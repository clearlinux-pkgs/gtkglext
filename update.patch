diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..0a89b86
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,39 @@
+*.a
+*.la
+*.lo
+*.nsi
+*.o
+*.pc
+*.spec
+.deps
+.libs
+ABOUT-NLS
+AUTHORS
+ChangeLog
+INSTALL
+Makefile
+Makefile.in
+aclocal.m4
+autom4te.cache
+compile
+configure
+config.cache
+config.guess
+config.h
+config.h.in
+config.log
+config.rpath
+config.status
+config.sub
+cscope.files
+cscope.out
+depcomp
+gtk-doc.make
+install-sh
+intl
+libtool
+ltmain.sh
+missing
+mkinstalldirs
+stamp-h1
+ylwrap
diff --git a/AUTHORS b/AUTHORS
index a53b90d..871761d 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -1,8 +1,17 @@
+Maintainers
+===========
+
+St√©phane Brunet  <stephane@stephanebrunet.net>
+
+Ralf Cors√©pius  <rc040203@freenet.de>
+
+Braden McDaniel  <braden@endoframe.com>
+
 
 Original Author
 ===============
 
-Naofumi Yasufuku (∞¬ ° æ∞ ∏)  <naofumi@users.sourceforge.net>
+Naofumi Yasufuku (ÂÆâÁ¶è Â∞öÊñá)  <naofumi@users.sourceforge.net>
 
 
 Contributors
diff --git a/ChangeLog b/ChangeLog.pre-1-2
similarity index 92%
rename from ChangeLog
rename to ChangeLog.pre-1-2
index b150bec..5fd054e 100644
--- a/ChangeLog
+++ b/ChangeLog.pre-1-2
@@ -1,3 +1,99 @@
+2009-03-11  Braden McDaniel <braden@endoframe.com>
+
+	* gdk/x11/gdkglfont-x11.c
+	(gdk_gl_font_use_pango_font_common): Check for null return values
+	from pango_x_font_map_get_font_cache and pango_x_font_cache_load.
+	From A C G Mennucc <mennucc@users.sourceforge.net>
+
+2009-03-10  Braden McDaniel <braden@endoframe.com>
+
+	Revert the 2009-03-07 change that removed the notions of
+	"interface age" and "binary age" and instead fix this logic to
+	bring it to parity with what modern GTK+ does.
+
+	* configure.ac: Reinstated GTKGLEXT_INTERFACE_AGE,
+	GTKGLEXT_BINARY_AGE, LT_RELEASE, LT_CURRENT, LT_REVISION, LT_AGE,
+	and LT_CURRENT_MINUS_AGE.  Note that GTKGLEXT_BINARY_AGE is now
+	computed from GTKGLEXT_MINOR_VERSION and GTKGLEXT_MICRO_VERSION.
+	* gdk/Makefile.am
+	* gdk/gdkglversion.c
+	* gdk/gdkglversion.h.in
+	* gtk/Makefile.am
+	* gtk/gtkglversion.c
+	* gtk/gtkglversion.h.in
+
+2009-03-09  Braden McDaniel <braden@endoframe.com>
+
+	Removed installed M4 macros for detecting the library.  pkg-config
+	should be used for this purpose.
+
+	* Makefile.am: Removed references to the m4macros subdirectory.
+	* configure.ac: Removed references to the m4macros subdirectory.
+	* m4macros/Makefile.am: Removed.
+	* m4macros/gtkglext.m4: Removed.
+
+2009-03-09  Braden McDaniel <braden@endoframe.com>
+
+	* AUTHORS: Note new maintainers.
+
+2009-03-09  Braden McDaniel <braden@endoframe.com>
+
+	Updated viewlw example to use GtkFileChooserDialog instead of the
+	deprecated GtkFileSelection.  The examples now compile with GTK+
+	2.14 using GTK_DISABLE_DEPRECATED.
+
+	Require at least GTK+ 2.4.  While strictly this isn't necessary
+	since we only need this 2.4-dependent feature in an example, GTK+
+	2.4 is an old enough release at this point that there seems little
+	potential harm in requiring it.
+
+	* configure.ac: Bump minimum required GTK+ version to 2.4.0.
+	* examples/viewlw.c
+	(filew_ok): Removed.
+	(select_lwobject): Create, run, and destroy the
+	GtkFileChooserDialog.
+
+2009-03-07  Braden McDaniel <braden@endoframe.com>
+
+	Removed the broken logic that translated notions of an "interface
+	age" and a "binary age" to Libtool library versions.  The Libtool
+	library versions for libgdkglext and libgtkglext are now set
+	directly in configure.ac.  Note also that the Libtool library
+	versions for these libraries can (and generally should) be updated
+	independently of eachother.
+
+	For now, the Libtool library versions for both libgdkglext and
+	libgtkglext have been reverted to their values as of the 1.0.6
+	release of GtkGLExt.
+
+	* configure.ac: Removed GTKGLEXT_INTERFACE_AGE,
+	GTKGLEXT_BINARY_AGE, and LT_RELEASE.  LT_CURRENT, LT_REVISION,
+	LT_AGE, and LT_CURRENT_MINUS_AGE have been split into separate
+	variables applying to libgdkglext and libgtkglext.
+	* gdk/Makefile.am: Use libgdkglext-specific variables.
+	* gdk/gdkglversion.c: Removed gdkglext_interface_age and
+	gdkglext_binary_age.
+	* gdk/gdkglversion.h.in: Removed preprocessor definitions
+	GDKGLEXT_INTERFACE_AGE and GDKGLEXT_BINARY_AGE along with variable
+	declarations gdkglext_interface_age and gdkglext_binary_age.
+	* gtk/Makefile.am: Use libgtkglext-specific variables.
+	* gtk/gtkglversion.c: Removed gtkglext_interface_age and
+	gtkglext_binary_age.
+	* gtk/gtkglversion.h.in: Removed preprocessor definitions
+	GTKGLEXT_INTERFACE_AGE and GTKGLEXT_BINARY_AGE along with variable
+	declarations gtkglext_interface_age and gtkglext_binary_age.
+
+2009-03-06  Braden McDaniel <braden@endoframe.com>
+
+	* configure.ac: Removed redundant usage of AM_PATH_GLIB_2_0 and
+	AM_PATH_GTK_2_0.
+
+2008-05-06  Ralf Cors√©pius <corsepiu@users.sourceforge.net>
+
+	* gdk/Makefile.am, gdk/win32/Makefile.am, gdk/x11/Makefile.am
+	gtk/Makefile.am: s/INCLUDES/AM_CPPFLAGS/.
+	* configure.in: Remove check for indent.
+
 2006-01-29 15:26  tshead
 
 	* GtkGLExt 1.1.0
diff --git a/INSTALL b/INSTALL
deleted file mode 100644
index 62ea076..0000000
--- a/INSTALL
+++ /dev/null
@@ -1,231 +0,0 @@
-Copyright 1994, 1995, 1996, 1999, 2000, 2001 Free Software Foundation,
-Inc.
-
-   This file is free documentation; the Free Software Foundation gives
-unlimited permission to copy, distribute and modify it.
-
-Basic Installation
-==================
-
-   These are generic installation instructions.
-
-   The `configure' shell script attempts to guess correct values for
-various system-dependent variables used during compilation.  It uses
-those values to create a `Makefile' in each directory of the package.
-It may also create one or more `.h' files containing system-dependent
-definitions.  Finally, it creates a shell script `config.status' that
-you can run in the future to recreate the current configuration, and a
-file `config.log' containing compiler output (useful mainly for
-debugging `configure').
-
-   It can also use an optional file (typically called `config.cache'
-and enabled with `--cache-file=config.cache' or simply `-C') that saves
-the results of its tests to speed up reconfiguring.  (Caching is
-disabled by default to prevent problems with accidental use of stale
-cache files.)
-
-   If you need to do unusual things to compile the package, please try
-to figure out how `configure' could check whether to do them, and mail
-diffs or instructions to the address given in the `README' so they can
-be considered for the next release.  If you are using the cache, and at
-some point `config.cache' contains results you don't want to keep, you
-may remove or edit it.
-
-   The file `configure.ac' (or `configure.in') is used to create
-`configure' by a program called `autoconf'.  You only need
-`configure.ac' if you want to change it or regenerate `configure' using
-a newer version of `autoconf'.
-
-The simplest way to compile this package is:
-
-  1. `cd' to the directory containing the package's source code and type
-     `./configure' to configure the package for your system.  If you're
-     using `csh' on an old version of System V, you might need to type
-     `sh ./configure' instead to prevent `csh' from trying to execute
-     `configure' itself.
-
-     Running `configure' takes awhile.  While running, it prints some
-     messages telling which features it is checking for.
-
-  2. Type `make' to compile the package.
-
-  3. Optionally, type `make check' to run any self-tests that come with
-     the package.
-
-  4. Type `make install' to install the programs and any data files and
-     documentation.
-
-  5. You can remove the program binaries and object files from the
-     source code directory by typing `make clean'.  To also remove the
-     files that `configure' created (so you can compile the package for
-     a different kind of computer), type `make distclean'.  There is
-     also a `make maintainer-clean' target, but that is intended mainly
-     for the package's developers.  If you use it, you may have to get
-     all sorts of other programs in order to regenerate files that came
-     with the distribution.
-
-Compilers and Options
-=====================
-
-   Some systems require unusual options for compilation or linking that
-the `configure' script does not know about.  Run `./configure --help'
-for details on some of the pertinent environment variables.
-
-   You can give `configure' initial values for variables by setting
-them in the environment.  You can do that on the command line like this:
-
-     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix
-
-   *Note Defining Variables::, for more details.
-
-Compiling For Multiple Architectures
-====================================
-
-   You can compile the package for more than one kind of computer at the
-same time, by placing the object files for each architecture in their
-own directory.  To do this, you must use a version of `make' that
-supports the `VPATH' variable, such as GNU `make'.  `cd' to the
-directory where you want the object files and executables to go and run
-the `configure' script.  `configure' automatically checks for the
-source code in the directory that `configure' is in and in `..'.
-
-   If you have to use a `make' that does not support the `VPATH'
-variable, you have to compile the package for one architecture at a
-time in the source code directory.  After you have installed the
-package for one architecture, use `make distclean' before reconfiguring
-for another architecture.
-
-Installation Names
-==================
-
-   By default, `make install' will install the package's files in
-`/usr/local/bin', `/usr/local/man', etc.  You can specify an
-installation prefix other than `/usr/local' by giving `configure' the
-option `--prefix=PATH'.
-
-   You can specify separate installation prefixes for
-architecture-specific files and architecture-independent files.  If you
-give `configure' the option `--exec-prefix=PATH', the package will use
-PATH as the prefix for installing programs and libraries.
-Documentation and other data files will still use the regular prefix.
-
-   In addition, if you use an unusual directory layout you can give
-options like `--bindir=PATH' to specify different values for particular
-kinds of files.  Run `configure --help' for a list of the directories
-you can set and what kinds of files go in them.
-
-   If the package supports it, you can cause programs to be installed
-with an extra prefix or suffix on their names by giving `configure' the
-option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.
-
-Optional Features
-=================
-
-   Some packages pay attention to `--enable-FEATURE' options to
-`configure', where FEATURE indicates an optional part of the package.
-They may also pay attention to `--with-PACKAGE' options, where PACKAGE
-is something like `gnu-as' or `x' (for the X Window System).  The
-`README' should mention any `--enable-' and `--with-' options that the
-package recognizes.
-
-   For packages that use the X Window System, `configure' can usually
-find the X include and library files automatically, but if it doesn't,
-you can use the `configure' options `--x-includes=DIR' and
-`--x-libraries=DIR' to specify their locations.
-
-Specifying the System Type
-==========================
-
-   There may be some features `configure' cannot figure out
-automatically, but needs to determine by the type of host the package
-will run on.  Usually `configure' can figure that out, but if it prints
-a message saying it cannot guess the host type, give it the
-`--build=TYPE' option.  TYPE can either be a short name for the system
-type, such as `sun4', or a canonical name which has the form:
-
-     CPU-COMPANY-SYSTEM
-
-where SYSTEM can have one of these forms:
-
-     OS KERNEL-OS
-
-   See the file `config.sub' for the possible values of each field.  If
-`config.sub' isn't included in this package, then this package doesn't
-need to know the host type.
-
-   If you are _building_ compiler tools for cross-compiling, you should
-use the `--target=TYPE' option to select the type of system they will
-produce code for.
-
-   If you want to _use_ a cross compiler, that generates code for a
-platform different from the build platform, you should specify the host
-platform (i.e., that on which the generated programs will eventually be
-run) with `--host=TYPE'.  In this case, you should also specify the
-build platform with `--build=TYPE', because, in this case, it may not
-be possible to guess the build platform (it sometimes involves
-compiling and running simple test programs, and this can't be done if
-the compiler is a cross compiler).
-
-Sharing Defaults
-================
-
-   If you want to set default values for `configure' scripts to share,
-you can create a site shell script called `config.site' that gives
-default values for variables like `CC', `cache_file', and `prefix'.
-`configure' looks for `PREFIX/share/config.site' if it exists, then
-`PREFIX/etc/config.site' if it exists.  Or, you can set the
-`CONFIG_SITE' environment variable to the location of the site script.
-A warning: not all `configure' scripts look for a site script.
-
-Defining Variables
-==================
-
-   Variables not defined in a site shell script can be set in the
-environment passed to `configure'.  However, some packages may run
-configure again during the build, and the customized values of these
-variables may be lost.  In order to avoid this problem, you should set
-them in the `configure' command line, using `VAR=value'.  For example:
-
-     ./configure CC=/usr/local2/bin/gcc
-
-will cause the specified gcc to be used as the C compiler (unless it is
-overridden in the site shell script).
-
-`configure' Invocation
-======================
-
-   `configure' recognizes the following options to control how it
-operates.
-
-`--help'
-`-h'
-     Print a summary of the options to `configure', and exit.
-
-`--version'
-`-V'
-     Print the version of Autoconf used to generate the `configure'
-     script, and exit.
-
-`--cache-file=FILE'
-     Enable the cache: use and save the results of the tests in FILE,
-     traditionally `config.cache'.  FILE defaults to `/dev/null' to
-     disable caching.
-
-`--config-cache'
-`-C'
-     Alias for `--cache-file=config.cache'.
-
-`--quiet'
-`--silent'
-`-q'
-     Do not print messages saying which checks are being made.  To
-     suppress all normal output, redirect it to `/dev/null' (any error
-     messages will still be shown).
-
-`--srcdir=DIR'
-     Look for the package's source code in directory DIR.  Usually
-     `configure' can determine that directory automatically.
-
-`configure' also accepts some other, not widely useful, options.  Run
-`configure --help' for more details.
-
diff --git a/MAINTAINERS b/MAINTAINERS
new file mode 100644
index 0000000..9b8973e
--- /dev/null
+++ b/MAINTAINERS
@@ -0,0 +1,8 @@
+St√©phane Brunet
+E-mail: stbru@teksavvy.com
+
+Ralf Cors√©pius
+E-mail: rcgnome@freenet.de
+
+Braden McDaniel
+E-mail: braden@endoframe.com
diff --git a/Makefile.am b/Makefile.am
index 94719ce..d5511b6 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,18 +1,19 @@
 ## -*- Makefile -*-
 ## Makefile.am for gtkglext
 
-SUBDIRS = gdk gtk m4macros docs
-DIST_SUBDIRS = $(SUBDIRS) examples
+SUBDIRS = gdk gtk docs examples
+
+ACLOCAL_AMFLAGS = -I m4macros ${ACLOCAL_FLAGS}
+DISTCHECK_CONFIGURE_FLAGS = --enable-gtk-doc --enable-introspection
 
 EXTRA_DIST = \
 	README.win32			\
 	ChangeLog.pre-1-0		\
+	ChangeLog.pre-1-2		\
 	gdkglext.pc.in			\
 	gtkglext.pc.in			\
 	gdkglext-uninstalled.pc.in	\
 	gtkglext-uninstalled.pc.in	\
-	gtkglext.spec.in		\
-	gtkglext.spec			\
 	gtkglext.nsi.in			\
 	gtkglext.nsi			\
 	setup-gtkglext.sh
@@ -63,15 +64,16 @@ DISTCLEANFILES = \
 	gtkglext-$(GDK_TARGET)-$(API_VER)-uninstalled.pc	\
 	gtkglext-$(API_VER)-uninstalled.pc
 
-.PHONY: examples clean-examples
-
-examples: all
-	( cd $(top_builddir)/examples && $(MAKE) $(MFLAGS) )
-
-clean-examples:
-	( cd $(top_builddir)/examples && $(MAKE) $(MFLAGS) clean )
-
-.PHONY: changelog
-changelog:
-	cvs2cl -b -t --hide-filenames
-
+ChangeLog:
+	@echo Creating $@
+	@if test -d "$(srcdir)/.git"; then \
+	  (GIT_DIR=$(top_srcdir)/.git $(top_srcdir)/missing --run git log --stat) | fmt --split-only > $@.tmp \
+	  && mv -f $@.tmp $@ \
+	  || ($(RM) $@.tmp; \
+	      echo Failed to generate ChangeLog, your ChangeLog may be outdated >&2; \
+	      (test -f $@ || echo git-log is required to generate this file >> $@)); \
+	else \
+	  test -f $@ || \
+	  (echo A git checkout and git-log is required to generate ChangeLog >&2 && \
+	  echo A git checkout and git-log is required to generate this file >> $@); \
+	fi
diff --git a/README b/README
index ae3be69..0a1ff02 100644
--- a/README
+++ b/README
@@ -16,10 +16,7 @@ rendering in GTK. GtkGLExt library provides the GtkWidget API add-ons
 to make GTK+ widgets OpenGL-capable.
 
 The official web site is:
-  http://gtkglext.sourceforge.net/
-
-The official download & development project site is:
-  http://sourceforge.net/projects/gtkglext/
+  http://projects.gnome.org/gtkglext/
 
 
 Licensing
@@ -112,23 +109,14 @@ Documentation options
   --with-html-dir=PATH    path to installed docs
 
 
-Building the CVS Version of GtkGLExt
+Building the Git Version of GtkGLExt
 ====================================
 
-GtkGLExt's SourceForge CVS repository can be checked out through
-anonymous (pserver) CVS with the following instruction set.
-When prompted for a password for anonymous, simply press the Enter key. 
-
-  $ cvs \
-      -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/gtkglext \
-      login
-  $ cvs -z3 \
-      -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/gtkglext \
-      co -r gtkglext-X-Y gtkglext
+GtkGLExt's GNOME Git repository can be checked out anonymously:
 
-  (gtkglext-X-Y is a branch name. e.g. gtkglext-1-0 is 1.0.x branch.)
+  $ git clone git://git.gnome.org/gtkglext
 
-When you are at work on the CVS version of GtkGLExt, you can use autogen.sh
+When you are working on the Git version of GtkGLExt, you can use autogen.sh
 for generating configure script and Makefiles.
 
   $ env ACLOCAL_FLAGS='-I /pkgconfig/share/aclocal -I /gtk/share/aclocal' \
@@ -139,7 +127,7 @@ for generating configure script and Makefiles.
   $ make examples
 
 You may have to set ACLOCAL_FLAGS environment variable for some m4
-macros used in configure.in.
+macros used in configure.ac.
 
 The following versions of the GNU autotools are required.
 
@@ -153,8 +141,6 @@ Contact
 
 Any patches, bug fixes and improvements are always welcome ;-)
 
-  * Home: http://gtkglext.sourceforge.net/
+  * Home: http://projects.gnome.org/gtkglext/
   * Mailing List: http://mail.gnome.org/mailman/listinfo/gtkglext-list/
-  * Bugs: Use the SourceForge bug tracker at http://sourceforge.net/tracker/?group_id=54333&atid=473434
-  * Patches: Use the SourceForge patch tracker at http://sourceforge.net/tracker/?group_id=54333&atid=473436
-  
+  * Bugs & Patches: Use GNOME Bugzilla at https://bugzilla.gnome.org/enter_bug.cgi?product=gtkglext
diff --git a/README.win32 b/README.win32
index 3070fd3..16c494c 100644
--- a/README.win32
+++ b/README.win32
@@ -16,10 +16,7 @@ rendering in GTK. GtkGLExt library provides the GtkWidget API add-ons
 to make GTK+ widgets OpenGL-capable.
 
 The official web site is:
-  http://gtkglext.sourceforge.net/
-
-The official download & development project site is:
-  http://sourceforge.net/projects/gtkglext/
+  http://projects.gnome.org/gtkglext/
 
 
 Licensing
@@ -204,8 +201,6 @@ Contact
 
 Any patches, bug fixes and improvements are always welcome ;-)
 
-  * Home: http://gtkglext.sourceforge.net/
+  * Home: http://projects.gnome.org/gtkglext/
   * Mailing List: http://mail.gnome.org/mailman/listinfo/gtkglext-list/
-  * Bugs: Use the SourceForge bug tracker at http://sourceforge.net/tracker/?group_id=54333&atid=473434
-  * Patches: Use the SourceForge patch tracker at http://sourceforge.net/tracker/?group_id=54333&atid=473436
-  
+  * Bugs & Patches: Use GNOME Bugzilla at https://bugzilla.gnome.org/enter_bug.cgi?product=gtkglext
diff --git a/configure.ac b/configure.ac
new file mode 100644
index 0000000..e19683d
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,523 @@
+#
+# Making releases:
+#   gtkglext_micro_version += 1;
+#   gtkglext_interface_age += 1;
+#   gtkglext_binary_age += 1;
+# if any functions have been added, set gtkglext_interface_age to 0.
+# if backwards compatibility has been broken,
+# set gtkglext_binary_age and gtkglext_interface_age to 0.
+#
+m4_define([gtkglext_major_version], [1])
+m4_define([gtkglext_minor_version], [2])
+m4_define([gtkglext_micro_version], [0])
+m4_define([gtkglext_interface_age], [0])
+m4_define([gtkglext_binary_age],
+          [m4_eval(100 * gtkglext_minor_version + gtkglext_micro_version)])
+m4_define([gtkglext_version],
+          [gtkglext_major_version.gtkglext_minor_version.gtkglext_micro_version])
+
+# This is the X.Y used in -lgtkglext-FOO-X.Y
+m4_define([gtkglext_api_major_version], [1])
+m4_define([gtkglext_api_minor_version], [0])
+m4_define([gtkglext_api_version],
+          [gtkglext_api_major_version.gtkglext_api_minor_version])
+
+# libtool version related macros
+m4_define([gtkglext_lt_release],
+          [gtkglext_major_version.gtkglext_minor_version])
+m4_define([gtkglext_lt_current],
+          [m4_eval(100 * gtkglext_minor_version + gtkglext_micro_version - gtkglext_interface_age)])
+m4_define([gtkglext_lt_revision],
+          [gtkglext_interface_age])
+m4_define([gtkglext_lt_age],
+          [m4_eval(gtkglext_binary_age - gtkglext_interface_age)])
+m4_define([gtkglext_lt_current_minus_age],
+          [m4_eval(gtkglext_lt_current - gtkglext_lt_age)])
+
+# if the minor version number is odd, then we want debugging.  Otherwise
+# we only want minimal debugging support.
+m4_define([gtkglext_debug_default],
+          [m4_if(m4_eval(gtkglext_minor_version % 2), [1], [yes], [minimum])])dnl
+
+# Process this file with autoconf to produce a configure script.
+AC_INIT([gtkglext],[gtkglext_version],[https://bugzilla.gnome.org/enter_bug.cgi?product=gtkglext],[gtkglext])
+AC_PREREQ([2.63])
+
+# Specify a configuration file
+AC_CONFIG_HEADERS([config.h])
+AC_CONFIG_SRCDIR([gdk/gdkgl.h])
+AC_CONFIG_MACRO_DIR([m4macros])
+
+# Save this value here, since automake will set cflags later
+cflags_set=${CFLAGS+set}
+
+# Initialize automake stuff
+AM_INIT_AUTOMAKE([1.11 no-define -Wno-portability dist-bzip2 dist-zip dist-xz])
+
+# Support silent build rules, requires at least automake-1.11. Enable
+# by either passing --enable-silent-rules to configure or passing V=0
+# to make
+AM_SILENT_RULES([no])
+
+AC_CANONICAL_HOST
+
+# GtkGLExt version
+GTKGLEXT_MAJOR_VERSION=gtkglext_major_version
+GTKGLEXT_MINOR_VERSION=gtkglext_minor_version
+GTKGLEXT_MICRO_VERSION=gtkglext_micro_version
+GTKGLEXT_INTERFACE_AGE=gtkglext_interface_age
+GTKGLEXT_BINARY_AGE=gtkglext_binary_age
+GTKGLEXT_VERSION=gtkglext_version
+# This is the X.Y used in -lgtkglext-FOO-X.Y
+GTKGLEXT_API_MAJOR_VERSION=gtkglext_api_major_version
+GTKGLEXT_API_MINOR_VERSION=gtkglext_api_minor_version
+GTKGLEXT_API_VERSION=gtkglext_api_version
+API_MJ=$GTKGLEXT_API_MAJOR_VERSION
+API_MI=$GTKGLEXT_API_MINOR_VERSION
+AC_SUBST([GTKGLEXT_MAJOR_VERSION])
+AC_SUBST([GTKGLEXT_MINOR_VERSION])
+AC_SUBST([GTKGLEXT_MICRO_VERSION])
+AC_SUBST([GTKGLEXT_INTERFACE_AGE])
+AC_SUBST([GTKGLEXT_BINARY_AGE])
+AC_SUBST([GTKGLEXT_VERSION])
+AC_SUBST([GTKGLEXT_API_MAJOR_VERSION])
+AC_SUBST([GTKGLEXT_API_MINOR_VERSION])
+AC_SUBST([GTKGLEXT_API_VERSION])
+AC_SUBST([API_MJ])
+AC_SUBST([API_MI])
+
+# Checks for programs.
+AC_PROG_CC
+AC_PROG_CC_C_O
+AC_PROG_OBJC
+AC_PROG_LN_S
+
+AC_CHECK_PROG([ms_librarian], [lib.exe], [yes], [no])
+
+AC_PATH_PROGS([PERL], [perl5 perl])
+
+# libtool versioning
+GTKGLEXT_RELEASE=gtkglext_lt_release
+GTKGLEXT_CURRENT=gtkglext_lt_current
+GTKGLEXT_REVISION=gtkglext_lt_revision
+GTKGLEXT_AGE=gtkglext_lt_age
+GTKGLEXT_CURRENT_MINUS_AGE=gtkglext_lt_current_minus_age
+AC_SUBST([GTKGLEXT_RELEASE])
+AC_SUBST([GTKGLEXT_CURRENT])
+AC_SUBST([GTKGLEXT_REVISION])
+AC_SUBST([GTKGLEXT_AGE])
+AC_SUBST([GTKGLEXT_CURRENT_MINUS_AGE])
+
+dnl Initialize libtool
+LT_PREREQ([2.2.6])
+LT_INIT([win32-dll disable-static])
+LT_LANG([C++])
+
+AC_CHECK_PROG([ms_librarian], [lib.exe], [yes], [no])
+
+AC_PROG_LN_S
+
+AC_PATH_PROGS([PERL], [perl5 perl])
+
+##################################################
+# GObject introspection
+##################################################
+
+GOBJECT_INTROSPECTION_CHECK([1.40.0])
+
+##################################################
+# Checks for gtk-doc and docbook-tools
+##################################################
+
+GTK_DOC_CHECK
+
+os_win32=no
+MATH_LIB=-lm
+AC_MSG_CHECKING([for native Win32])
+case "$host_os" in
+  *mingw*)
+    os_win32=yes
+    MATH_LIB=
+    ;;
+  *)
+    ;;
+esac
+AC_MSG_RESULT([$os_win32])
+AM_CONDITIONAL([OS_WIN32], [test "x$os_win32" = "xyes"])
+AC_SUBST([MATH_LIB])
+
+AM_CONDITIONAL([MS_LIB_AVAILABLE], [test "x$ms_librarian" = "xyes"])
+
+
+# Platform-specific compiler options
+case "$host_os" in
+  irix5* | irix6*)
+    # Suppress linker warnings
+    if test "x$with_gnu_ld" = "xno"; then
+      LDFLAGS="$LDFLAGS -Wl,-woff,84 -Wl,-woff,127"
+    fi
+    ;;
+  *)
+    ;;
+esac
+
+# Ensure MSVC-compatible struct packing convention is used when
+# compiling for Win32 with gcc.
+# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
+# gcc2 uses "-fnative-struct".
+if test "x$os_win32" = "xyes"; then
+  if test "x$GCC" = "xyes"; then
+    msnative_struct=''
+    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
+    if test -z "$ac_cv_prog_CC"; then
+      our_gcc="$CC"
+    else
+      our_gcc="$ac_cv_prog_CC"
+    fi
+    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
+      2.)
+	if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
+	  msnative_struct='-fnative-struct'
+	fi
+	;;
+      *)
+	if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
+	  msnative_struct='-mms-bitfields'
+	fi
+	;;
+    esac
+    if test x"$msnative_struct" = x ; then
+      AC_MSG_RESULT([no way])
+      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
+    else
+      CFLAGS="$CFLAGS $msnative_struct"
+      AC_MSG_RESULT([${msnative_struct}])
+    fi
+  fi
+fi
+
+if test "x$os_win32" != "xyes"; then
+    # libtool option to control which symbols are exported
+    # right now, symbols starting with _ are not exported
+    LIBTOOL_EXPORT_OPTIONS='-export-symbols-regex "^[[^_]].*"'
+else
+    # We currently use .def files on Windows
+    LIBTOOL_EXPORT_OPTIONS=
+fi
+AC_SUBST([LIBTOOL_EXPORT_OPTIONS])
+
+#
+# We need to get the value of gdktarget before we run AX_CHECK_GLU so
+# that we can set with_x appropriately.
+#
+AC_ARG_WITH([gdktarget],
+            [AS_HELP_STRING([--with-gdktarget=@<:@x11/win32@:>@],
+                            [select GDK target])],
+            [gdktarget=$with_gdktarget],
+            [gdktarget=`$PKG_CONFIG --variable=target gdk-2.0`])
+AS_IF([test x$gdktarget = xwin32 -o x$gdktarget = xquartz],
+      [with_x=no])
+
+# Checks for headers and libraries.
+
+AC_CHECK_HEADERS([inttypes.h stdlib.h string.h])
+
+PKG_CHECK_MODULES([GTK], [gtk+-2.0 >= 2.20], ,
+                  [AS_IF([test -z "${GTK_LIBS+x}"],
+                         [AC_MSG_FAILURE([GTK+ 2.20 or newer is required.])])])
+PKG_CHECK_MODULES([GDK], [gdk-2.0], ,
+                  [AS_IF([test -z "${GDK_LIBS+x}"],
+                         [AC_MSG_FAILURE([GDK is required.])])])
+PKG_CHECK_MODULES([PANGOFT2], [pangoft2], ,
+                  [AS_IF([test -z "${PANGOFT2_LIBS+x}"],
+                         [AC_MSG_WARN([Pango Freetype support is required to build some of the examples.])])])
+
+GLIB_MKENUMS="`$PKG_CONFIG --variable=glib_mkenums glib-2.0`"
+AC_SUBST(GLIB_MKENUMS)
+
+AX_CHECK_GL
+AS_IF([test X$no_gl = Xyes],
+      [AC_MSG_FAILURE([OpenGL is required.])])
+AX_CHECK_GLU
+# FIXME: AX_CHECK_GLU's behavior diverges from common autoconf conventions
+AM_CONDITIONAL([GLU],[test "$no_glu" != yes])
+
+# Checks for some types in gdk/GL/glxext.h
+
+# GLXFBConfigSGIX
+GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF=no
+AC_CHECK_TYPES([GLXFBConfigSGIX], , ,
+               [#include <GL/glx.h>])
+if test "x$ac_cv_type_GLXFBConfigSGIX" = "xno" ; then
+  GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF=yes
+fi
+
+# GLXFBConfigIDSGIX
+GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF=no
+AC_CHECK_TYPES([GLXFBConfigIDSGIX], , ,
+               [#include <GL/glx.h>])
+if test "x$ac_cv_type_GLXFBConfigIDSGIX" = "xno" ; then
+  GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF=yes
+fi
+
+# GLXPbufferSGIX
+GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF=no
+AC_CHECK_TYPES([GLXPbufferSGIX], , ,
+               [#include <GL/glx.h>])
+if test "x$ac_cv_type_GLXPbufferSGIX" = "xno" ; then
+  GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF=yes
+fi
+
+# GLXVideoSourceSGIX
+GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF=no
+AC_CHECK_TYPES([GLXVideoSourceSGIX], , ,
+               [#include <GL/glx.h>])
+if test "x$ac_cv_type_GLXVideoSourceSGIX" = "xno" ; then
+  GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF=yes
+fi
+
+# __GLXextFuncPtr
+GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF=no
+AC_CHECK_TYPES([__GLXextFuncPtr], , ,
+               [#include <GL/glx.h>])
+if test "x$ac_cv_type___GLXextFuncPtr" = "xno" ; then
+  GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF=yes
+fi
+
+# Checks for typedefs in gdk/GL/glext.h
+
+# GLhalfNV
+GDKGLEXT_NEED_GLHALFNV_TYPEDEF=no
+AC_CHECK_TYPES([GLhalfNV], , ,
+               [#include <GL/gl.h>])
+if test "x$ac_cv_type_GLhalfNV" = "xno" ; then
+  GDKGLEXT_NEED_GLHALFNV_TYPEDEF=yes
+fi
+
+# Checks for library functions.
+save_LIBS="$LIBS"
+LIBS="$LIBS $MATH_LIB"
+
+AC_FUNC_MALLOC
+AC_CHECK_FUNCS([memset sqrt strchr strrchr strstr])
+
+LIBS="$save_LIBS"
+
+case $gdktarget in
+  x11|quartz|win32) ;;
+  *) AC_MSG_ERROR([Invalid target for GDK: use x11, quartz or win32.]);;
+esac
+AC_SUBST([gdktarget])
+
+gdkglext_targetlib=libgdkglext-$gdktarget-$GTKGLEXT_API_VERSION.la
+gtkglext_targetlib=libgtkglext-$gdktarget-$GTKGLEXT_API_VERSION.la
+
+AC_SUBST([gdkglext_targetlib])
+AC_SUBST([gtkglext_targetlib])
+
+##################################################
+# Checks for Window System
+##################################################
+
+WINDOWING_CFLAGS=""
+WINDOWING_LIBS=""
+
+GDKGLEXT_WIN_CFLAGS=""
+GDKGLEXT_WIN_LIBS=""
+
+if test "x$gdktarget" = "xx11"; then
+  if test "x$no_x" = "xyes" ; then
+    AC_MSG_ERROR([X development libraries not found])
+  fi
+
+  XMU_LIBS=""
+  if test "x$ac_cv_lib_Xmu_XmuLookupStandardColormap" = "xyes" ; then
+    XMU_LIBS="-lXmu -lXt $X_PRE_LIBS"
+  fi
+
+  WINDOWING_CFLAGS="$X_CFLAGS"
+  WINDOWING_LIBS="$X_LIBS $XMU_LIBS -lXext -lX11 $X_EXTRA_LIBS"
+
+  GDKGLEXT_WIN_CFLAGS="$X_CFLAGS"
+  GDKGLEXT_WIN_LIBS="$X_LIBS $XMU_LIBS"
+fi
+
+if test "x$gdktarget" = "xwin32"; then
+  WINDOWING_LIBS="-lgdi32 -luser32 -lkernel32"
+  GDKGLEXT_WIN_LIBS="-lgdi32 -luser32 -lkernel32"
+fi
+
+AC_SUBST([WINDOWING_CFLAGS])
+AC_SUBST([WINDOWING_LIBS])
+
+AC_SUBST([GDKGLEXT_WIN_CFLAGS])
+AC_SUBST([GDKGLEXT_WIN_LIBS])
+
+AM_CONDITIONAL([USE_X11], [test x$gdktarget = xx11])
+AM_CONDITIONAL([USE_WIN32], [test x$gdktarget = xwin32])
+AM_CONDITIONAL([TARGET_QUARTZ], [test x$gdktarget = xquartz])
+
+# Debug option
+AC_ARG_ENABLE([debug],
+              AS_HELP_STRING([--enable-debug=@<:@no/minimum/yes@:>@],
+                             [turn on debugging @<:@default=gtkglext_debug_default@:>@]), ,
+              [enable_debug=gtkglext_debug_default])
+
+changequote(,)dnl
+if test "x$enable_debug" = "xyes"; then
+  if test x$cflags_set != xset ; then
+      case " $CFLAGS " in
+      *[[\ \	]]-g[[\ \	]]*) ;;
+      *) CFLAGS="$CFLAGS -g" ;;
+      esac
+  fi
+  GTKGLEXT_DEBUG_FLAGS="-DG_ENABLE_DEBUG"
+else
+  if test "x$enable_debug" = "xno"; then
+    GTKGLEXT_DEBUG_FLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS"
+  else
+    GTKGLEXT_DEBUG_FLAGS="-DG_DISABLE_CAST_CHECKS"
+  fi
+fi
+changequote([,])dnl
+
+AC_SUBST([GTKGLEXT_DEBUG_FLAGS])
+
+##################################################
+# Output configuration header
+##################################################
+
+dnl this section will only be run if config.status is invoked with no
+dnl arguments, or with "gdk/gdkglext-config.h" as an argument.
+AC_CONFIG_COMMANDS([gdk/gdkglext-config.h],
+[
+  outfile=gdkglext-config.h-tmp
+  cat > $outfile <<\_______EOF
+/* gdkglext-config.h
+ *
+ * This is a generated file.  Please modify `configure.ac'
+ */
+
+#ifndef GDKGLEXT_CONFIG_H
+#define GDKGLEXT_CONFIG_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+_______EOF
+
+	cat >>$outfile <<_______EOF
+$gdkglext_windowing
+_______EOF
+
+	cat >>$outfile <<_______EOF
+$gdkglext_need_glxfbconfigsgix_typedef
+$gdkglext_need_glxfbconfigidsgix_typedef
+$gdkglext_need_glxpbuffersgix_typedef
+$gdkglext_need_glxvideosourcesgix_typedef
+$gdkglext_need_glxextfuncptr_typedef
+$gdkglext_need_glhalfnv_typedef
+_______EOF
+
+	cat >>$outfile <<_______EOF
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif /* GDKGLEXT_CONFIG_H */
+_______EOF
+
+
+  if cmp -s $outfile gdk/gdkglext-config.h; then
+    AC_MSG_NOTICE([gdk/gdkglext-config.h is unchanged])
+    rm -f $outfile
+  else
+    mv $outfile gdk/gdkglext-config.h
+  fi
+
+],[
+
+if test "x$gdktarget" = "xx11" ; then
+  gdkglext_windowing='
+#define GDKGLEXT_WINDOWING_X11'
+elif test "x$gdktarget" = "xwin32" ; then
+  gdkglext_windowing='
+#define GDKGLEXT_WINDOWING_WIN32'
+elif test "x$gdktarget" = "xquartz" ; then
+  gdkglext_windowing='
+#define GDKGLEXT_WINDOWING_QUARTZ'
+fi
+
+if test "x$GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF" = "xyes"; then
+  gdkglext_need_glxfbconfigsgix_typedef='
+#define GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF'
+fi
+
+if test "x$GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF" = "xyes"; then
+  gdkglext_need_glxfbconfigidsgix_typedef='
+#define GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF'
+fi
+
+if test "x$GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF" = "xyes"; then
+  gdkglext_need_glxpbuffersgix_typedef='
+#define GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF'
+fi
+
+if test "x$GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF" = "xyes"; then
+  gdkglext_need_glxvideosourcesgix_typedef='
+#define GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF'
+fi
+
+if test "x$GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF" = "xyes"; then
+  gdkglext_need_glxextfuncptr_typedef='
+#define GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF'
+fi
+
+if test "x$GDKGLEXT_NEED_GLHALFNV_TYPEDEF" = "xyes"; then
+  gdkglext_need_glhalfnv_typedef='
+#define GDKGLEXT_NEED_GLHALFNV_TYPEDEF'
+fi
+
+])
+
+
+##################################################
+# Config files
+##################################################
+
+AC_CONFIG_FILES([
+gdkglext.pc
+gtkglext.pc
+gdkglext-uninstalled.pc
+gtkglext-uninstalled.pc
+gtkglext.nsi
+Makefile
+gdk/Makefile
+gdk/gdkglversion.h
+gdk/x11/Makefile
+gdk/win32/Makefile
+gdk/quartz/Makefile
+gtk/Makefile
+gtk/gtkglversion.h
+docs/Makefile
+docs/reference/Makefile
+docs/reference/gtkglext/Makefile
+docs/reference/gtkglext/version.xml
+examples/Makefile
+])
+
+AC_OUTPUT
+
+
+##################################################
+# Print configuration
+##################################################
+
+echo "
+configuration:
+	OpenGL CFLAGS:		$GL_CFLAGS
+	OpenGL LIBS:		$GL_LIBS
+	debug:			$enable_debug
+"
diff --git a/configure.in b/configure.in
deleted file mode 100644
index e5b678c..0000000
--- a/configure.in
+++ /dev/null
@@ -1,1040 +0,0 @@
-# required autoconf version
-AC_PREREQ([2.54])
-
-#
-# Making releases:
-#   gtkglext_micro_version += 1;
-#   gtkglext_interface_age += 1;
-#   gtkglext_binary_age += 1;
-# if any functions have been added, set gtkglext_interface_age to 0.
-# if backwards compatibility has been broken,
-# set gtkglext_binary_age and gtkglext_interface_age to 0.
-#
-m4_define([gtkglext_major_version], [1])
-m4_define([gtkglext_minor_version], [2])
-m4_define([gtkglext_micro_version], [0])
-m4_define([gtkglext_interface_age], [0])
-m4_define([gtkglext_binary_age],    [0])
-m4_define([gtkglext_version],
-          [gtkglext_major_version.gtkglext_minor_version.gtkglext_micro_version])
-
-# This is the X.Y used in -lgtkglext-FOO-X.Y
-m4_define([gtkglext_api_major_version], [1])
-m4_define([gtkglext_api_minor_version], [0])
-m4_define([gtkglext_api_version],
-          [gtkglext_api_major_version.gtkglext_api_minor_version])
-
-# libtool version related macros
-m4_define([gtkglext_lt_release],
-          [gtkglext_major_version.gtkglext_minor_version])
-m4_define([gtkglext_lt_current],
-          [m4_eval(gtkglext_micro_version - gtkglext_interface_age)])
-m4_define([gtkglext_lt_revision],
-          [gtkglext_interface_age])
-m4_define([gtkglext_lt_age],
-          [m4_eval(gtkglext_binary_age - gtkglext_interface_age)])
-m4_define([gtkglext_lt_current_minus_age],
-          [m4_eval(gtkglext_lt_current - gtkglext_lt_age)])
-
-# if the minor version number is odd, then we want debugging.  Otherwise
-# we only want minimal debugging support.
-m4_define([gtkglext_debug_default],
-          [m4_if(m4_eval(gtkglext_minor_version % 2), [1], [yes], [minimum])])dnl
-
-# Versions of dependencies
-
-# Glib
-m4_define([glib_pkg], [glib-2.0])
-m4_define([glib_required_version], [2.0.0])
-
-# GObject
-m4_define([gobject_pkg], [gobject-2.0])
-m4_define([gobject_required_version], [2.0.0])
-
-# GModule
-m4_define([gmodule_pkg], [gmodule-2.0])
-m4_define([gmodule_required_version], [2.0.0])
-
-# Pango
-m4_define([pango_pkg], [pango])
-m4_define([pango_required_version], [1.0.0])
-
-# Pangox
-m4_define([pangox_pkg], [pangox])
-m4_define([pangox_required_version], [1.0.0])
-
-# PangoFT2
-m4_define([pangoft2_pkg], [pangoft2])
-m4_define([pangoft2_required_version], [1.0.0])
-
-# GDK
-m4_define([gdk_pkg], [gdk-2.0])
-m4_define([gdk_required_version], [2.0.0])
-
-# GTK+
-m4_define([gtk_pkg], [gtk+-2.0])
-m4_define([gtk_required_version], [2.0.0])
-
-
-# Process this file with autoconf to produce a configure script.
-AC_INIT([gtkglext], [gtkglext_version],
-        [gtkglext-list@gnome.org])
-
-AC_CONFIG_SRCDIR([gdk/gdkgl.h])
-
-# Save this value here, since automake will set cflags later
-cflags_set=${CFLAGS+set}
-
-# Initialize automake stuff
-AM_INIT_AUTOMAKE([1.7 no-define dist-bzip2 dist-zip])
-
-# Specify a configuration file
-AM_CONFIG_HEADER([config.h])
-
-dnl Initialize maintainer mode
-AM_MAINTAINER_MODE
-
-AC_CANONICAL_HOST
-
-# GtkGLExt version
-GTKGLEXT_MAJOR_VERSION=gtkglext_major_version
-GTKGLEXT_MINOR_VERSION=gtkglext_minor_version
-GTKGLEXT_MICRO_VERSION=gtkglext_micro_version
-GTKGLEXT_INTERFACE_AGE=gtkglext_interface_age
-GTKGLEXT_BINARY_AGE=gtkglext_binary_age
-GTKGLEXT_VERSION=gtkglext_version
-# This is the X.Y used in -lgtkglext-FOO-X.Y
-GTKGLEXT_API_MAJOR_VERSION=gtkglext_api_major_version
-GTKGLEXT_API_MINOR_VERSION=gtkglext_api_minor_version
-GTKGLEXT_API_VERSION=gtkglext_api_version
-API_MJ=$GTKGLEXT_API_MAJOR_VERSION
-API_MI=$GTKGLEXT_API_MINOR_VERSION
-AC_SUBST([GTKGLEXT_MAJOR_VERSION])
-AC_SUBST([GTKGLEXT_MINOR_VERSION])
-AC_SUBST([GTKGLEXT_MICRO_VERSION])
-AC_SUBST([GTKGLEXT_INTERFACE_AGE])
-AC_SUBST([GTKGLEXT_BINARY_AGE])
-AC_SUBST([GTKGLEXT_VERSION])
-AC_SUBST([GTKGLEXT_API_MAJOR_VERSION])
-AC_SUBST([GTKGLEXT_API_MINOR_VERSION])
-AC_SUBST([GTKGLEXT_API_VERSION])
-AC_SUBST([API_MJ])
-AC_SUBST([API_MI])
-
-# libtool versioning
-LT_RELEASE=gtkglext_lt_release
-LT_CURRENT=gtkglext_lt_current
-LT_REVISION=gtkglext_lt_revision
-LT_AGE=gtkglext_lt_age
-LT_CURRENT_MINUS_AGE=gtkglext_lt_current_minus_age
-AC_SUBST([LT_RELEASE])
-AC_SUBST([LT_CURRENT])
-AC_SUBST([LT_REVISION])
-AC_SUBST([LT_AGE])
-AC_SUBST([LT_CURRENT_MINUS_AGE])
-
-dnl Initialize libtool
-AC_PROG_CC
-AC_PROG_CPP
-AC_ISC_POSIX
-#AM_DISABLE_STATIC
-AC_LIBTOOL_WIN32_DLL
-AC_PROG_LIBTOOL
-
-platform_win32=no
-AC_MSG_CHECKING([for some Win32 platform])
-case "$host_os" in
-  *mingw*|*cygwin*)
-    platform_win32=yes
-    ;;
-  *)
-    ;;
-esac
-AC_MSG_RESULT([$platform_win32])
-AM_CONDITIONAL([PLATFORM_WIN32], [test "x$platform_win32" = "xyes"])
-
-os_win32=no
-MATH_LIB=-lm
-AC_MSG_CHECKING([for native Win32])
-case "$host_os" in
-  *mingw*)
-    os_win32=yes
-    MATH_LIB=
-    ;;
-  *)
-    ;;
-esac
-AC_MSG_RESULT([$os_win32])
-AM_CONDITIONAL([OS_WIN32], [test "x$os_win32" = "xyes"])
-AC_SUBST([MATH_LIB])
-
-if test "x$os_win32" = "xyes"; then
-  AC_CHECK_PROG([ms_librarian], [lib.exe], [yes], [no])
-fi
-AM_CONDITIONAL([MS_LIB_AVAILABLE], [test "x$ms_librarian" = "xyes"])
-
-if test "x$platform_win32" = "xyes"; then
-  gdktarget=win32
-else
-  gdktarget=x11
-fi
-
-AC_ARG_WITH([gdktarget],
-            [AC_HELP_STRING([--with-gdktarget=@<:@x11/win32@:>@],
-                            [select GDK target])],
-            [gdktarget=$with_gdktarget])
-
-AC_SUBST([gdktarget])
-case $gdktarget in
-  x11|win32) ;;
-  *) AC_MSG_ERROR([Invalid target for GDK: use x11 or win32.]);;
-esac
-
-gdkglext_targetlib=libgdkglext-$gdktarget-$GTKGLEXT_API_VERSION.la
-gtkglext_targetlib=libgtkglext-$gdktarget-$GTKGLEXT_API_VERSION.la
-
-AC_SUBST([gdkglext_targetlib])
-AC_SUBST([gtkglext_targetlib])
-
-
-# Build time sanity check...
-AM_SANITY_CHECK
-
-# Checks for programs.
-AM_PROG_CC_STDC
-AC_PROG_INSTALL
-AC_PROG_MAKE_SET
-AC_PROG_LN_S
-AC_PROG_AWK
-
-# Debug option
-AC_ARG_ENABLE([debug],
-              AC_HELP_STRING([--enable-debug=@<:@no/minimum/yes@:>@],
-                             [turn on debugging @<:@default=gtkglext_debug_default@:>@]), ,
-              [enable_debug=gtkglext_debug_default])
-
-# Strict ansi
-AC_ARG_ENABLE([ansi],
-              [AC_HELP_STRING([--enable-ansi],
-                              [turn on strict ansi [default=no]])], ,
-	      [enable_ansi=no])
-
-changequote(,)dnl
-if test "x$GCC" = "xyes"; then
-  case " $CFLAGS " in
-  *[\ \	]-Wall[\ \	]*) ;;
-  *) CFLAGS="$CFLAGS -Wall" ;;
-  esac
-
-  if test "x$enable_ansi" = "xyes"; then
-    case " $CFLAGS " in
-    *[\ \	]-ansi[\ \	]*) ;;
-    *) CFLAGS="$CFLAGS -ansi" ;;
-    esac
-
-    case " $CFLAGS " in
-    *[\ \	]-pedantic[\ \	]*) ;;
-    *) CFLAGS="$CFLAGS -pedantic" ;;
-    esac
-  fi
-fi
-
-if test "x$enable_debug" = "xyes"; then
-  if test x$cflags_set != xset ; then
-      case " $CFLAGS " in
-      *[[\ \	]]-g[[\ \	]]*) ;;
-      *) CFLAGS="$CFLAGS -g" ;;
-      esac
-  fi
-  GTKGLEXT_DEBUG_FLAGS="-DG_ENABLE_DEBUG"
-else
-  if test "x$enable_debug" = "xno"; then
-    GTKGLEXT_DEBUG_FLAGS="-DG_DISABLE_ASSERT -DG_DISABLE_CHECKS -DG_DISABLE_CAST_CHECKS"
-  else
-    GTKGLEXT_DEBUG_FLAGS="-DG_DISABLE_CAST_CHECKS"
-  fi
-fi
-changequote([,])dnl
-
-AC_SUBST([GTKGLEXT_DEBUG_FLAGS])
-
-# Platform-specific compiler options
-case "$host_os" in
-  irix5* | irix6*)
-    # Suppress linker warnings
-    if test "x$with_gnu_ld" = "xno"; then
-      LDFLAGS="$LDFLAGS -Wl,-woff,84 -Wl,-woff,127"
-    fi
-    ;;
-  *)
-    ;;
-esac
-
-# Ensure MSVC-compatible struct packing convention is used when
-# compiling for Win32 with gcc.
-# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
-# gcc2 uses "-fnative-struct".
-if test "x$os_win32" = "xyes"; then
-  if test "x$GCC" = "xyes"; then
-    msnative_struct=''
-    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
-    if test -z "$ac_cv_prog_CC"; then
-      our_gcc="$CC"
-    else
-      our_gcc="$ac_cv_prog_CC"
-    fi
-    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
-      2.)
-	if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
-	  msnative_struct='-fnative-struct'
-	fi
-	;;
-      *)
-	if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
-	  msnative_struct='-mms-bitfields'
-	fi
-	;;
-    esac
-    if test x"$msnative_struct" = x ; then
-      AC_MSG_RESULT([no way])
-      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
-    else
-      CFLAGS="$CFLAGS $msnative_struct"
-      AC_MSG_RESULT([${msnative_struct}])
-    fi
-  fi
-fi
-
-if test "x$os_win32" != "xyes"; then
-    # libtool option to control which symbols are exported
-    # right now, symbols starting with _ are not exported
-    LIBTOOL_EXPORT_OPTIONS='-export-symbols-regex "^[[^_]].*"'
-else
-    # We currently use .def files on Windows
-    LIBTOOL_EXPORT_OPTIONS=
-fi
-AC_SUBST([LIBTOOL_EXPORT_OPTIONS])
-
-# define a MAINT-like variable REBUILD which is set if Perl
-# and awk are found, so autogenerated sources can be rebuilt
-
-AC_ARG_ENABLE([rebuilds],
-              [AC_HELP_STRING([--disable-rebuilds],
-                              [disable all source autogeneration rules])], ,
-              [enable_rebuilds=yes])
-
-AC_PATH_PROGS([PERL], [perl5 perl])
-
-# We would like indent, but don't require it.
-AC_CHECK_PROG([INDENT], [indent], [indent])
-
-REBUILD=\#
-if test "x$enable_rebuilds" = "xyes" && \
-     test -n "$PERL" && \
-     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 ; then
-  REBUILD=
-fi
-AC_SUBST([REBUILD])
-
-# Honor aclocal flags
-ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS -I $srcdir/m4macros"
-
-## Initial sanity check, done here so that users get told they 
-## have the wrong dependencies as early in the process as possible.
-## Later on we actually use the cflags/libs from separate pkg-config
-## calls. Oh, also the later pkg-config calls don't include 
-## the version requirements since those make the module lists 
-## annoying to construct
-PKG_CHECK_MODULES([BASE_DEPENDENCIES], [\
-gtk_pkg >= gtk_required_version \
-gdk_pkg >= gdk_required_version \
-pango_pkg >= pango_required_version \
-pangox_pkg >= pangox_required_version \
-gmodule_pkg >= gmodule_required_version \
-])
-
-# Check for GLib
-AM_PATH_GLIB_2_0([glib_required_version], ,
-                 [AC_MSG_ERROR([GLib 2.0 not found])])
-
-# Check for GTK+
-AM_PATH_GTK_2_0([gtk_required_version], ,
-                [AC_MSG_ERROR([GTK+ 2.0 not found])])
-
-# Checks for libraries.
-
-# Checks for header files.
-AC_HEADER_STDC
-AC_CHECK_HEADERS([inttypes.h stdlib.h string.h])
-
-# Checks for typedefs, structures, and compiler characteristics.
-AC_C_CONST
-
-# Checks for library functions.
-save_LIBS="$LIBS"
-LIBS="$LIBS $MATH_LIB"
-
-AC_FUNC_MALLOC
-AC_CHECK_FUNCS([memset sqrt strchr strrchr strstr])
-
-LIBS="$save_LIBS"
-
-
-##################################################
-# Checks for GDK multihead support
-##################################################
-
-GDKGLEXT_MULTIHEAD_SUPPORT=no
-
-save_CPPFLAGS="$CPPFLAGS"
-CPPFLAGS="$CPPFLAGS $BASE_DEPENDENCIES_CFLAGS"
-save_LIBS="$LIBS"
-LIBS="$LIBS $BASE_DEPENDENCIES_LIBS"
-
-AC_CHECK_HEADERS([gdk/gdkdisplay.h gdk/gdkscreen.h],
-                 [GDKGLEXT_MULTIHEAD_SUPPORT=yes],
-                 [GDKGLEXT_MULTIHEAD_SUPPORT=no])
-
-if test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes"; then
-  AC_MSG_CHECKING([for gdk_display_get_default in GDK library])
-  AC_TRY_LINK([#include <gdk/gdk.h>],
-              [gdk_display_get_default();],
-              [GDKGLEXT_MULTIHEAD_SUPPORT=yes],
-              [GDKGLEXT_MULTIHEAD_SUPPORT=no])
-  AC_MSG_RESULT([$GDKGLEXT_MULTIHEAD_SUPPORT])
-fi
-
-CPPFLAGS="$save_CPPFLAGS"
-LIBS="$save_LIBS"
-
-if test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes"; then
-  AC_MSG_NOTICE([GDK supports multihead])
-else
-  AC_MSG_NOTICE([GDK doesn't support multihead])
-fi
-
-AC_SUBST([GDKGLEXT_MULTIHEAD_SUPPORT])
-AM_CONDITIONAL([MULTIHEAD_SUPPORT],
-               [test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes"])
-
-
-##################################################
-# Checks for GDK functions
-##################################################
-
-save_LIBS="$LIBS"
-LIBS="$LIBS $BASE_DEPENDENCIES_LIBS"
-
-if test "x$gdktarget" = "xx11"; then
-  AC_CHECK_FUNCS([gdk_x11_colormap_foreign_new])
-fi
-
-LIBS="$save_LIBS"
-
-
-##################################################
-# Checks for Window System
-##################################################
-
-WINDOWING_CFLAGS=""
-WINDOWING_LIBS=""
-
-GDKGLEXT_WIN_CFLAGS=""
-GDKGLEXT_WIN_LIBS=""
-
-GDKGLEXT_WIN_EXTRA_DEFS=""
-
-if test "x$gdktarget" = "xx11"; then
-  AC_PATH_XTRA
-
-  if test "x$no_x" = "xyes" ; then
-    AC_MSG_ERROR([X development libraries not found])
-  fi
-
-  save_CPPFLAGS="$CPPFLAGS"
-  CPPFLAGS="$CPPFLAGS $X_CFLAGS"
-  save_LIBS="$LIBS"
-  LIBS="$LIBS $X_LIBS -lXext -lX11 $X_EXTRA_LIBS"
-
-  AC_CHECK_HEADERS([X11/Xmu/StdCmap.h Xmu/StdCmap.h], , ,
-                   [#include <X11/Xlib.h>
-                    #include <X11/Xutil.h>])
-
-  XMU_LIBS=""
-  AC_CHECK_LIB([Xmu], [XmuLookupStandardColormap], , ,
-               [-lXt $X_PRE_LIBS])
-  if test "x$ac_cv_lib_Xmu_XmuLookupStandardColormap" = "xyes" ; then
-    XMU_LIBS="-lXmu -lXt $X_PRE_LIBS"
-  fi
-
-  WINDOWING_CFLAGS="$X_CFLAGS"
-  WINDOWING_LIBS="$X_LIBS $XMU_LIBS -lXext -lX11 $X_EXTRA_LIBS"
-
-  GDKGLEXT_WIN_CFLAGS="$X_CFLAGS"
-  GDKGLEXT_WIN_LIBS="$X_LIBS $XMU_LIBS"
-
-  CPPFLAGS="$save_CPPFLAGS"
-  LIBS="$save_LIBS"
-
-  AM_CONDITIONAL([USE_X11], [true])
-else
-  AM_CONDITIONAL([USE_X11], [false])
-fi
-
-if test "x$gdktarget" = "xwin32"; then
-  WINDOWING_LIBS="-lgdi32 -luser32 -lkernel32"
-  GDKGLEXT_WIN_LIBS="-lgdi32 -luser32 -lkernel32"
-  AM_CONDITIONAL([USE_WIN32], [true])
-else
-  AM_CONDITIONAL([USE_WIN32], [false])
-fi
-
-AC_SUBST([WINDOWING_CFLAGS])
-AC_SUBST([WINDOWING_LIBS])
-
-AC_SUBST([GDKGLEXT_WIN_CFLAGS])
-AC_SUBST([GDKGLEXT_WIN_LIBS])
-
-AC_SUBST([GDKGLEXT_WIN_EXTRA_DEFS])
-
-
-##################################################
-# Checks for OpenGL
-##################################################
-
-GL_CFLAGS=""
-GL_LDFLAGS=""
-GL_LIBS=""
-
-AC_ARG_WITH([gl-prefix],
-            [AC_HELP_STRING([--with-gl-prefix=DIR],
-                            [OpenGL (Mesa) is installed in DIR [default=auto]])], ,
-            [with_gl_prefix=auto])
-
-AC_ARG_WITH([gl-includedir],
-            [AC_HELP_STRING([--with-gl-includedir=DIR],
-                            [OpenGL (Mesa) headers are in DIR [default=auto]])], ,
-            [with_gl_includedir=auto])
-
-AC_ARG_WITH([gl-libdir],
-            [AC_HELP_STRING([--with-gl-libdir=DIR],
-                            [OpenGL (Mesa) libraries are in DIR [default=auto]])], ,
-            [with_gl_libdir=auto])
-
-if test "x$with_gl_includedir" != "xauto"; then
-  GL_CFLAGS="-I$with_gl_includedir"
-elif test "x$with_gl_prefix" != "xauto"; then
-  GL_CFLAGS="-I$with_gl_prefix/include"
-fi
-
-if test "x$with_gl_libdir" != "xauto"; then
-  GL_LDFLAGS="-L$with_gl_libdir"
-elif test "x$with_gl_prefix" != "xauto"; then
-  GL_LDFLAGS="-L$with_gl_prefix/lib"
-fi
-
-save_CPPFLAGS="$CPPFLAGS"
-CPPFLAGS="$CPPFLAGS $GL_CFLAGS $WINDOWING_CFLAGS"
-save_LIBS="$LIBS"
-LIBS="$LIBS $GL_LDFLAGS $WINDOWING_LIBS $MATH_LIB"
-
-if test "x$gdktarget" = "xx11"; then
-  AC_CHECK_HEADERS([GL/glx.h], ,
-                   [AC_MSG_ERROR([Cannot find GLX header])])
-fi
-
-AC_CHECK_HEADERS([GL/gl.h GL/glu.h], ,
-                 [AC_MSG_ERROR([Cannot find OpenGL headers])])
-
-if test "x$gdktarget" = "xx11"; then
-
-  # for X11
-
-  THREAD_LIB="-lpthread"
-  STDCXX_LIB="-lstdc++"
-
-  have_GL=no
-  GL_LIB_NAME=GL
-
-  # GLcore and GL (SGI)
-  AC_CHECK_LIB([GLcore], [glVertex3d],
-               [GL_LIBS="-lGLcore"])
-  if test "x$ac_cv_lib_GLcore_glVertex3d" = "xyes" ; then
-    # if GLcore found, then also check for GL
-    AC_CHECK_LIB([GL], [glXCreateContext],
-                 [GL_LIBS="-lGL $GL_LIBS"
-                  have_GL=yes])
-  fi
-
-  # GL
-  if test "x$have_GL" = "xno" ; then
-    # if no GLcore and GL, check for GL
-    AC_CHECK_LIB([GL], [glVertex3d],
-                 [GL_LIBS="-lGL"
-                  have_GL=yes])
-    if test "x$ac_cv_lib_GL_glVertex3d" = "xno" ; then
-      # GL may need to be linked with the thread library explicitly
-      AC_CHECK_LIB([GL], [glVertex3f],
-                   [GL_LIBS="-lGL $THREAD_LIB"
-                    have_GL=yes], ,
-                   [$THREAD_LIB])
-      if test "x$ac_cv_lib_GL_glVertex3f" = "xno" ; then
-        # GL may need to be linked with std C++ library explicitly
-        AC_CHECK_LIB([GL], [glVertex3i],
-                     [GL_LIBS="-lGL $STDCXX_LIB"
-                      have_GL=yes], ,
-                     [$STDCXX_LIB])
-        if test "x$ac_cv_lib_GL_glVertex3i" = "xno" ; then
-          # GL may need to be linked with std C++ and thread libraries explicitly
-          AC_CHECK_LIB([GL], [glVertex3s],
-                       [GL_LIBS="-lGL $STDCXX_LIB $THREAD_LIB"
-                        have_GL=yes], ,
-                       [$STDCXX_LIB $THREAD_LIB])
-        fi
-      fi
-    fi
-  fi
-
-  # MesaGL
-  if test "x$have_GL" = "xno" ; then
-    # if no GL, check for MesaGL
-    AC_CHECK_LIB([MesaGL], [glVertex3d],
-                 [GL_LIBS="-lMesaGL"
-                  have_GL=yes
-                  GL_LIB_NAME=MesaGL])
-  fi
-
-  if test "x$have_GL" = "xno" ; then
-    # no GL found
-    AC_MSG_ERROR([Cannot find GL library])
-  fi
-
-  # GLU
-
-  have_GLU=no
-  have_SGI_GLU=no
-
-  AC_CHECK_LIB([GLU], [gluSphere],
-               [GL_LIBS="-lGLU $GL_LIBS"
-                have_GLU=yes], ,
-               [$GL_LIBS])
-  if test "x$ac_cv_lib_GLU_gluSphere" = "xno" ; then
-    # GLU may need to be linked with the thread library explicitly
-    AC_CHECK_LIB([GLU], [gluCylinder],
-                 [GL_LIBS="-lGLU $GL_LIBS $THREAD_LIB"
-                  have_GLU=yes], ,
-                 [$GL_LIBS $THREAD_LIB])
-    if test "x$ac_cv_lib_GLU_gluCylinder" = "xno" ; then
-      # GLU may need to be linked with std C++ library explicitly
-      AC_CHECK_LIB([GLU], [gluDisk],
-                   [GL_LIBS="-lGLU $GL_LIBS $STDCXX_LIB"
-                    have_GLU=yes
-                    have_SGI_GLU=yes], ,
-                   [$GL_LIBS $STDCXX_LIB])
-      if test "x$ac_cv_lib_GLU_gluDisk" = "xno" ; then
-        # GLU may need to be linked with std C++ and thread libraries explicitly
-        AC_CHECK_LIB([GLU], [gluPartialDisk],
-                     [GL_LIBS="-lGLU $GL_LIBS $STDCXX_LIB $THREAD_LIB"
-                      have_GLU=yes
-                      have_SGI_GLU=yes], ,
-                     [$GL_LIBS $STDCXX_LIB $THREAD_LIB])
-      fi
-    fi
-  fi
-
-  if test "x$have_GLU" = "xno" ; then
-    # if no GLU, check for MesaGLU
-    AC_CHECK_LIB([MesaGLU], [gluSphere],
-                 [GL_LIBS="-lMesaGLU $GL_LIBS"
-                  have_GLU=yes], ,
-                 [$GL_LIBS])
-  fi
-
-  if test "x$have_GLU" = "xno" ; then
-    # no GLU found
-    AC_MSG_ERROR([Cannot find GLU library])
-  fi
-
-  # Checks for SGI's GLU library
-  if test "x$have_SGI_GLU" = "xno" ; then
-    # Try static linking
-    save_LDFLAGS="$LDFLAGS"
-    LDFLAGS="$LDFLAGS $lt_cv_prog_cc_static"
-
-    AC_CHECK_LIB([GLU], [gluBeginCurve],
-                 [have_SGI_GLU=no], ,
-                 [$GL_LIBS])
-    if test "x$ac_cv_lib_GLU_gluBeginCurve" = "xno" ; then
-      AC_CHECK_LIB([GLU], [gluBeginPolygon],
-                   [GL_LIBS="$GL_LIBS $STDCXX_LIB"
-                    have_SGI_GLU=yes], ,
-                   [$GL_LIBS $STDCXX_LIB])
-    fi
-
-    LDFLAGS="$save_LDFLAGS"
-  fi
-
-  AC_MSG_CHECKING([whether libGLU needs to be linked with the std C++ library])
-  AC_MSG_RESULT([$have_SGI_GLU])
-
-  # Checks for some types in gdk/GL/glxext.h
-
-  # GLXFBConfigSGIX
-  GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF=no
-  AC_CHECK_TYPES([GLXFBConfigSGIX], , ,
-                 [#include <GL/glx.h>])
-  if test "x$ac_cv_type_GLXFBConfigSGIX" = "xno" ; then
-    GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF=yes
-  fi
-
-  # GLXFBConfigIDSGIX
-  GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF=no
-  AC_CHECK_TYPES([GLXFBConfigIDSGIX], , ,
-                 [#include <GL/glx.h>])
-  if test "x$ac_cv_type_GLXFBConfigIDSGIX" = "xno" ; then
-    GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF=yes
-  fi
-
-  # GLXPbufferSGIX
-  GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF=no
-  AC_CHECK_TYPES([GLXPbufferSGIX], , ,
-                 [#include <GL/glx.h>])
-  if test "x$ac_cv_type_GLXPbufferSGIX" = "xno" ; then
-    GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF=yes
-  fi
-
-  # GLXVideoSourceSGIX
-  GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF=no
-  AC_CHECK_TYPES([GLXVideoSourceSGIX], , ,
-                 [#include <GL/glx.h>])
-  if test "x$ac_cv_type_GLXVideoSourceSGIX" = "xno" ; then
-    GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF=yes
-  fi
-
-  # __GLXextFuncPtr
-  GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF=no
-  AC_CHECK_TYPES([__GLXextFuncPtr], , ,
-                 [#include <GL/glx.h>])
-  if test "x$ac_cv_type___GLXextFuncPtr" = "xno" ; then
-    GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF=yes
-  fi
-
-else
-
-  # for Win32
-
-  AC_MSG_CHECKING([for glNewList in -lopengl32])
-  have_opengl32=no
-  LIBS="-lopengl32 $LIBS"
-  AC_TRY_LINK([#include <windows.h>
-               #include <GL/gl.h>], 
-              [glVertex3d(0.0, 0.0, 0.0);], 
-              [GL_LIBS="-lopengl32"
-               have_opengl32=yes])
-  AC_MSG_RESULT([$have_opengl32])
-  if test "x$have_opengl32" = "xno" ; then
-    AC_MSG_ERROR([Cannot find GL library])
-  fi
-
-  AC_MSG_CHECKING([for gluNewQuadric in -lglu32])
-  have_glu32=no
-  LIBS="-lglu32 $LIBS"
-  AC_TRY_LINK([#include <windows.h>
-               #include <GL/gl.h>
-               #include <GL/glu.h>], 
-              [gluNewQuadric();], 
-              [GL_LIBS="-lglu32 $GL_LIBS"
-               have_glu32=yes])
-  AC_MSG_RESULT([$have_glu32])
-  if test "x$have_glu32" = "xno" ; then
-    AC_MSG_ERROR([Cannot find GLU library])
-  fi
-
-dnl   AC_CHECK_LIB(opengl32, glNewList,
-dnl                GL_LIBS="-lopengl32",
-dnl                AC_MSG_ERROR(Cannot find GL library))
-
-dnl   AC_CHECK_LIB(glu32, gluNewQuadric,
-dnl                GL_LIBS="-lglu32 $GL_LIBS",
-dnl                AC_MSG_ERROR(Cannot find GLU library),
-dnl                $GL_LIBS)
-
-fi
-
-dnl # if using mesa, check for xmesa.h
-dnl if test "x$ac_cv_lib_MesaGL_glNewList" = "xyes" ; then
-dnl   AC_CHECK_HEADERS([GL/xmesa.h])
-dnl   AM_CONDITIONAL(ENABLE_XMESA_FX, \
-dnl                  test "x$ac_cv_header_GL_xmesa_h" = "xyes")
-dnl else
-dnl   # force a failed check
-dnl   AM_CONDITIONAL(ENABLE_XMESA_FX, test "no" = "yes")
-dnl fi
-
-# Checks for typedefs in gdk/GL/glext.h
-
-# GLhalfNV
-GDKGLEXT_NEED_GLHALFNV_TYPEDEF=no
-AC_CHECK_TYPES([GLhalfNV], , ,
-               [#include <GL/gl.h>])
-if test "x$ac_cv_type_GLhalfNV" = "xno" ; then
-  GDKGLEXT_NEED_GLHALFNV_TYPEDEF=yes
-fi
-
-GL_LIBS="$GL_LDFLAGS $GL_LIBS"
-
-AC_SUBST([GL_CFLAGS])
-AC_SUBST([GL_LIBS])
-
-CPPFLAGS="$save_CPPFLAGS"
-LIBS="$save_LIBS"
-
-
-##################################################
-# CFLAGS and LIBS
-##################################################
-
-GDKGLEXT_PACKAGES="gdk_pkg pango_pkg pangox_pkg gmodule_pkg"
-GDKGLEXT_EXTRA_CFLAGS="$GL_CFLAGS $GDKGLEXT_WIN_CFLAGS"
-GDKGLEXT_EXTRA_LIBS="$GL_LIBS $GDKGLEXT_WIN_LIBS"
-GDKGLEXT_DEP_CFLAGS="$GDKGLEXT_EXTRA_CFLAGS `$PKG_CONFIG --cflags $GDKGLEXT_PACKAGES`"
-GDKGLEXT_DEP_LIBS="$GDKGLEXT_EXTRA_LIBS `$PKG_CONFIG --libs $GDKGLEXT_PACKAGES` $MATH_LIB"
-AC_SUBST([GDKGLEXT_PACKAGES])
-AC_SUBST([GDKGLEXT_EXTRA_CFLAGS])
-AC_SUBST([GDKGLEXT_EXTRA_LIBS])
-AC_SUBST([GDKGLEXT_DEP_CFLAGS])
-AC_SUBST([GDKGLEXT_DEP_LIBS])
-
-GTKGLEXT_PACKAGES="gtk_pkg"
-GTKGLEXT_EXTRA_CFLAGS=""
-GTKGLEXT_EXTRA_LIBS=""
-GTKGLEXT_DEP_CFLAGS="$GTKGLEXT_EXTRA_CFLAGS $GDKGLEXT_EXTRA_CFLAGS `$PKG_CONFIG --cflags $GDKGLEXT_PACKAGES $GTKGLEXT_PACKAGES`"
-GTKGLEXT_DEP_LIBS="$GTKGLEXT_EXTRA_LIBS $GDKGLEXT_EXTRA_LIBS `$PKG_CONFIG --libs $GDKGLEXT_PACKAGES $GTKGLEXT_PACKAGES` $MATH_LIB"
-AC_SUBST([GTKGLEXT_PACKAGES])
-AC_SUBST([GTKGLEXT_EXTRA_CFLAGS])
-AC_SUBST([GTKGLEXT_EXTRA_LIBS])
-AC_SUBST([GTKGLEXT_DEP_CFLAGS])
-AC_SUBST([GTKGLEXT_DEP_LIBS])
-
-# CFLAGS for examples
-EXAMPLES_DEP_CFLAGS="$GTKGLEXT_EXTRA_CFLAGS $GDKGLEXT_EXTRA_CFLAGS `$PKG_CONFIG --cflags $GDKGLEXT_PACKAGES $GTKGLEXT_PACKAGES pangoft2_pkg`"
-AC_SUBST([EXAMPLES_DEP_CFLAGS])
-
-# GtkGLExt dep libs + PangoFT2
-GTKGLEXT_DEP_LIBS_WITH_PANGOFT2="$GTKGLEXT_EXTRA_LIBS $GDKGLEXT_EXTRA_LIBS `$PKG_CONFIG --libs $GDKGLEXT_PACKAGES $GTKGLEXT_PACKAGES pangoft2_pkg` $MATH_LIB"
-AC_SUBST([GTKGLEXT_DEP_LIBS_WITH_PANGOFT2])
-
-
-##################################################
-# Checks for gtk-doc and docbook-tools
-##################################################
-
-AC_ARG_WITH([html-dir],
-            [AC_HELP_STRING([--with-html-dir=PATH],
-                            [path to installed docs])])
-
-if test "x$with_html_dir" = "x" ; then
-  HTML_DIR='${datadir}/gtk-doc/html'
-else
-  HTML_DIR=$with_html_dir
-fi
-
-AC_SUBST([HTML_DIR])
-
-dnl Make people enable the gtk-doc stuff explicitely.
-AC_ARG_ENABLE([gtk-doc],
-              [AC_HELP_STRING([--enable-gtk-doc],
-                              [use gtk-doc to build documentation [default=no]])], ,
-              [enable_gtk_doc=no])
-
-if test "x$enable_gtk_doc" = "xyes" ; then
-
-  gtk_doc_min_version=0.10
-
-  AC_CHECK_PROG([GTKDOC], [gtkdoc-mkdb], [true], [false])
-
-  if $GTKDOC ; then
-    gtk_doc_version=`gtkdoc-mkdb --version`
-    AC_MSG_CHECKING([gtk-doc version ($gtk_doc_version) >= $gtk_doc_min_version])
-
-    IFS="${IFS= 	}"; gtk_save_IFS="$IFS"; IFS="."
-    set $gtk_doc_version
-    for min in $gtk_doc_min_version ; do
-        cur=$1; shift
-        if test -z $min ; then break; fi
-        if test -z $cur ; then GTKDOC=false; break; fi
-        if test $cur -gt $min ; then break ; fi
-        if test $cur -lt $min ; then GTKDOC=false; break ; fi
-    done
-    IFS="$gtk_save_IFS"
-
-    if $GTKDOC ; then
-      AC_MSG_RESULT([yes])
-    else
-      AC_MSG_RESULT([no])
-    fi
-  fi
-
-  if test x$GTKDOC != xtrue ; then
-    enable_gtk_doc=no 
-  fi
-
-fi
-
-AM_CONDITIONAL([ENABLE_GTK_DOC], [test "x$enable_gtk_doc" = "xyes"])
-
-
-##################################################
-# Output configuration header
-##################################################
-
-dnl this section will only be run if config.status is invoked with no
-dnl arguments, or with "gdk/gdkglext-config.h" as an argument.
-AC_CONFIG_COMMANDS([gdk/gdkglext-config.h],
-[
-  outfile=gdkglext-config.h-tmp
-  cat > $outfile <<\_______EOF
-/* gdkglext-config.h
- *
- * This is a generated file.  Please modify `configure.in'
- */
-
-#ifndef GDKGLEXT_CONFIG_H
-#define GDKGLEXT_CONFIG_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif /* __cplusplus */
-
-_______EOF
-
-	cat >>$outfile <<_______EOF
-$gdkglext_windowing
-$gdkglext_multihead_support
-_______EOF
-
-	cat >>$outfile <<_______EOF
-
-#if !defined(GDKGLEXT_MULTIHEAD_SUPPORT) && defined(GDK_MULTIHEAD_SAFE)
-#error "Installed GdkGLExt library doesn't have multihead support."
-#endif
-
-_______EOF
-
-	cat >>$outfile <<_______EOF
-$gdkglext_need_glxfbconfigsgix_typedef
-$gdkglext_need_glxfbconfigidsgix_typedef
-$gdkglext_need_glxpbuffersgix_typedef
-$gdkglext_need_glxvideosourcesgix_typedef
-$gdkglext_need_glxextfuncptr_typedef
-$gdkglext_need_glhalfnv_typedef
-_______EOF
-
-	cat >>$outfile <<_______EOF
-
-#ifdef __cplusplus
-}
-#endif /* __cplusplus */
-
-#endif /* GDKGLEXT_CONFIG_H */
-_______EOF
-
-
-  if cmp -s $outfile gdk/gdkglext-config.h; then
-    AC_MSG_NOTICE([gdk/gdkglext-config.h is unchanged])
-    rm -f $outfile
-  else
-    mv $outfile gdk/gdkglext-config.h
-  fi
-
-],[
-
-if test "x$gdktarget" = "xx11" ; then
-  gdkglext_windowing='
-#define GDKGLEXT_WINDOWING_X11'
-elif test "x$gdktarget" = "xwin32" ; then
-  gdkglext_windowing='
-#define GDKGLEXT_WINDOWING_WIN32'
-fi
-
-if test "x$GDKGLEXT_MULTIHEAD_SUPPORT" = "xyes"; then
-  gdkglext_multihead_support='
-#define GDKGLEXT_MULTIHEAD_SUPPORT'
-fi
-
-if test "x$GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF" = "xyes"; then
-  gdkglext_need_glxfbconfigsgix_typedef='
-#define GDKGLEXT_NEED_GLXFBCONFIGSGIX_TYPEDEF'
-fi
-
-if test "x$GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF" = "xyes"; then
-  gdkglext_need_glxfbconfigidsgix_typedef='
-#define GDKGLEXT_NEED_GLXFBCONFIGIDSGIX_TYPEDEF'
-fi
-
-if test "x$GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF" = "xyes"; then
-  gdkglext_need_glxpbuffersgix_typedef='
-#define GDKGLEXT_NEED_GLXPBUFFERSGIX_TYPEDEF'
-fi
-
-if test "x$GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF" = "xyes"; then
-  gdkglext_need_glxvideosourcesgix_typedef='
-#define GDKGLEXT_NEED_GLXVIDEOSOURCESGIX_TYPEDEF'
-fi
-
-if test "x$GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF" = "xyes"; then
-  gdkglext_need_glxextfuncptr_typedef='
-#define GDKGLEXT_NEED_GLXEXTFUNCPTR_TYPEDEF'
-fi
-
-if test "x$GDKGLEXT_NEED_GLHALFNV_TYPEDEF" = "xyes"; then
-  gdkglext_need_glhalfnv_typedef='
-#define GDKGLEXT_NEED_GLHALFNV_TYPEDEF'
-fi
-
-])
-
-
-##################################################
-# Config files
-##################################################
-
-AC_CONFIG_FILES([
-gdkglext.pc
-gtkglext.pc
-gdkglext-uninstalled.pc
-gtkglext-uninstalled.pc
-gtkglext.spec
-gtkglext.nsi
-Makefile
-gdk/Makefile
-gdk/gdkglversion.h
-gdk/glext/Makefile
-gdk/x11/Makefile
-gdk/win32/Makefile
-gtk/Makefile
-gtk/gtkglversion.h
-m4macros/Makefile
-docs/Makefile
-docs/reference/Makefile
-docs/reference/gtkglext/Makefile
-docs/reference/gtkglext/version.xml
-examples/Makefile
-examples/glade/Makefile
-])
-
-AC_OUTPUT
-
-
-##################################################
-# Print configuration
-##################################################
-
-echo "
-configuration:
-	OpenGL CFLAGS:		$GL_CFLAGS
-	OpenGL LIBS:		$GL_LIBS
-	multihead support:	$GDKGLEXT_MULTIHEAD_SUPPORT
-	debug:			$enable_debug
-	extra defs:		$GDKGLEXT_WIN_EXTRA_DEFS
-"
diff --git a/docs/reference/gtkglext/.gitignore b/docs/reference/gtkglext/.gitignore
new file mode 100644
index 0000000..047d2e1
--- /dev/null
+++ b/docs/reference/gtkglext/.gitignore
@@ -0,0 +1,19 @@
+version.xml
+gtkglext-decl.txt
+gtkglext-decl-list.txt
+gtkglext-overrides.txt
+gtkglext-undeclared.txt
+gtkglext-undocumented.txt
+gtkglext-unused.txt
+gtkglext.args
+gtkglext.hierarchy
+gtkglext.interfaces
+gtkglext.prerequisites
+gtkglext.signals
+tmpl
+tmpl.stamp
+html
+html.stamp
+xml
+sgml.stamp
+*.sgml.bak
diff --git a/docs/reference/gtkglext/Makefile.am b/docs/reference/gtkglext/Makefile.am
index 6f144be..df0a2f6 100644
--- a/docs/reference/gtkglext/Makefile.am
+++ b/docs/reference/gtkglext/Makefile.am
@@ -36,6 +36,7 @@ IGNORE_HFILES = \
 	glext			\
 	x11			\
 	win32			\
+	quartz			\
 	gdkglext-config.h	\
 	gdkglprivate.h		\
 	gdkgldebug.h		\
@@ -63,10 +64,12 @@ extra_files = \
 # CFLAGS and LDFLAGS for compiling scan program. Only needed if your app/lib
 # contains GtkObjects/GObjects and you want to document signals and properties.
 GTKDOC_CFLAGS = \
+	@GDK_CFLAGS@ \
 	@CFLAGS@			\
 	-I$(top_srcdir)			\
 	-I$(top_srcdir)/gdk		\
 	-I$(top_srcdir)/gtk		\
+	-I$(top_builddir)		\
 	-I$(top_builddir)/gdk		\
 	-I$(top_builddir)/gtk		\
 	$(GTKGLEXT_DEBUG_FLAGS)		\
@@ -127,7 +130,7 @@ scan-build.stamp: $(HFILE_GLOB)
 	    done \
 	fi
 	cd $(srcdir) && \
-	  gtkdoc-scan --module=$(DOC_MODULE) --source-dir=$(DOC_SOURCE_DIR) --ignore-headers="$(IGNORE_HFILES)" $(SCAN_OPTIONS) $(EXTRA_HFILES)
+	  gtkdoc-scan --module=$(DOC_MODULE) --source-dir=$(DOC_SOURCE_DIR) --source-dir=$(abs_top_builddir) --ignore-headers="$(IGNORE_HFILES)" $(SCAN_OPTIONS) $(EXTRA_HFILES)
 	touch scan-build.stamp
 
 $(DOC_MODULE)-decl.txt $(SCANOBJ_FILES): scan-build.stamp
@@ -159,7 +162,7 @@ sgml.stamp: sgml-build.stamp
 html-build.stamp: sgml.stamp $(DOC_MAIN_SGML_FILE) $(content_files)
 	@echo '*** Building HTML ***'
 	test -d $(srcdir)/html || mkdir $(srcdir)/html
-	cd $(srcdir)/html && gtkdoc-mkhtml $(DOC_MODULE) ../$(DOC_MAIN_SGML_FILE)
+	cd $(srcdir)/html && gtkdoc-mkhtml --path=$(abs_builddir) $(DOC_MODULE) ../$(DOC_MAIN_SGML_FILE)
 	test "x$(HTML_IMAGES)" = "x" || ( cd $(srcdir) && cp $(HTML_IMAGES) html )
 	@echo '-- Fixing Crossreferences' 
 	cd $(srcdir) && gtkdoc-fixxref --module-dir=html --html-dir=$(HTML_DIR) $(FIXXREF_OPTIONS)
diff --git a/docs/reference/gtkglext/gtkglext-docs.sgml b/docs/reference/gtkglext/gtkglext-docs.sgml
index 74ada11..73e25a4 100644
--- a/docs/reference/gtkglext/gtkglext-docs.sgml
+++ b/docs/reference/gtkglext/gtkglext-docs.sgml
@@ -14,8 +14,6 @@
 <!ENTITY gtkglext-gdkgldrawable SYSTEM "xml/gdkgldrawable.xml">
 <!ENTITY gtkglext-gdkglpixmap SYSTEM "xml/gdkglpixmap.xml">
 <!ENTITY gtkglext-gdkglwindow SYSTEM "xml/gdkglwindow.xml">
-<!ENTITY gtkglext-gdkglfont SYSTEM "xml/gdkglfont.xml">
-<!ENTITY gtkglext-gdkglshapes SYSTEM "xml/gdkglshapes.xml">
 <!ENTITY gtkglext-gdkglx SYSTEM "xml/gdkglx.xml">
 
 <!ENTITY gtkglext-gtkgldefs SYSTEM "xml/gtkgldefs.xml">
@@ -49,8 +47,6 @@
     &gtkglext-gdkgldrawable;
     &gtkglext-gdkglpixmap;
     &gtkglext-gdkglwindow;
-    &gtkglext-gdkglfont;
-    &gtkglext-gdkglshapes;
     &gtkglext-gdkgltokens;
     &gtkglext-gdkglx;
     &gtkglext-gdkglversion;
diff --git a/docs/reference/gtkglext/gtkglext-sections.txt b/docs/reference/gtkglext/gtkglext-sections.txt
index f462255..ed1e57b 100644
--- a/docs/reference/gtkglext/gtkglext-sections.txt
+++ b/docs/reference/gtkglext/gtkglext-sections.txt
@@ -86,7 +86,6 @@ gdk_gl_config_get_type
 <FILE>gdkglcontext</FILE>
 GdkGLContext
 gdk_gl_context_new
-gdk_gl_context_destroy
 gdk_gl_context_copy
 gdk_gl_context_get_gl_drawable
 gdk_gl_context_get_gl_config
@@ -139,7 +138,6 @@ gdk_gl_drawable_get_type
 <FILE>gdkglpixmap</FILE>
 GdkGLPixmap
 gdk_gl_pixmap_new
-gdk_gl_pixmap_destroy
 gdk_gl_pixmap_get_pixmap
 gdk_pixmap_set_gl_capability
 gdk_pixmap_unset_gl_capability
@@ -164,7 +162,6 @@ gdk_gl_pixmap_get_type
 <FILE>gdkglwindow</FILE>
 GdkGLWindow
 gdk_gl_window_new
-gdk_gl_window_destroy
 gdk_gl_window_get_window
 gdk_window_set_gl_capability
 gdk_window_unset_gl_capability
@@ -185,25 +182,6 @@ GDK_GL_WINDOW_GET_CLASS
 gdk_gl_window_get_type
 </SECTION>
 
-<SECTION>
-<FILE>gdkglfont</FILE>
-gdk_gl_font_use_pango_font
-gdk_gl_font_use_pango_font_for_display
-</SECTION>
-
-<SECTION>
-<FILE>gdkglshapes</FILE>
-gdk_gl_draw_cube
-gdk_gl_draw_sphere
-gdk_gl_draw_cone
-gdk_gl_draw_torus
-gdk_gl_draw_tetrahedron
-gdk_gl_draw_octahedron
-gdk_gl_draw_dodecahedron
-gdk_gl_draw_icosahedron
-gdk_gl_draw_teapot
-</SECTION>
-
 <SECTION>
 <FILE>gdkgltokens</FILE>
 GDK_GL_SUCCESS
diff --git a/docs/reference/gtkglext/tmpl/gdkgl.sgml b/docs/reference/gtkglext/tmpl/gdkgl.sgml
deleted file mode 100644
index 9287fa5..0000000
--- a/docs/reference/gtkglext/tmpl/gdkgl.sgml
+++ /dev/null
@@ -1,19 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-gdkgl
-
-<!-- ##### SECTION Short_Description ##### -->
-
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglconfig.sgml b/docs/reference/gtkglext/tmpl/gdkglconfig.sgml
deleted file mode 100644
index 2c06bc5..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglconfig.sgml
+++ /dev/null
@@ -1,216 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Frame Buffer Configuration
-
-<!-- ##### SECTION Short_Description ##### -->
-OpenGL frame buffer configuration object
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### ENUM GdkGLConfigMode ##### -->
-<para>
-
-</para>
-
-@GDK_GL_MODE_RGB: 
-@GDK_GL_MODE_RGBA: 
-@GDK_GL_MODE_INDEX: 
-@GDK_GL_MODE_SINGLE: 
-@GDK_GL_MODE_DOUBLE: 
-@GDK_GL_MODE_STEREO: 
-@GDK_GL_MODE_ALPHA: 
-@GDK_GL_MODE_DEPTH: 
-@GDK_GL_MODE_STENCIL: 
-@GDK_GL_MODE_ACCUM: 
-@GDK_GL_MODE_MULTISAMPLE: 
-
-<!-- ##### STRUCT GdkGLConfig ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### FUNCTION gdk_gl_config_new ##### -->
-<para>
-
-</para>
-
-@attrib_list: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_new_for_screen ##### -->
-<para>
-
-</para>
-
-@screen: 
-@attrib_list: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_new_by_mode ##### -->
-<para>
-
-</para>
-
-@mode: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_new_by_mode_for_screen ##### -->
-<para>
-
-</para>
-
-@screen: 
-@mode: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_screen ##### -->
-<para>
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_attrib ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@attribute: 
-@value: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_colormap ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_visual ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_depth ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_layer_plane ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_n_aux_buffers ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_get_n_sample_buffers ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_is_rgba ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_is_double_buffered ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_is_stereo ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_has_alpha ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_has_depth_buffer ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_has_stencil_buffer ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_config_has_accum_buffer ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglcontext.sgml b/docs/reference/gtkglext/tmpl/gdkglcontext.sgml
deleted file mode 100644
index 46be120..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglcontext.sgml
+++ /dev/null
@@ -1,111 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Rendering Context
-
-<!-- ##### SECTION Short_Description ##### -->
-OpenGL rendering context object
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### STRUCT GdkGLContext ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### FUNCTION gdk_gl_context_new ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-@share_list: 
-@direct: 
-@render_type: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_destroy ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_copy ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-@src: 
-@Param3: 
-@Returns: 
-<!-- # Unused Parameters # -->
-@mask: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_get_gl_drawable ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_get_gl_config ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_get_share_list ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_is_direct ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_get_render_type ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_context_get_current ##### -->
-<para>
-
-</para>
-
-@Returns: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkgldefs.sgml b/docs/reference/gtkglext/tmpl/gdkgldefs.sgml
deleted file mode 100644
index c417130..0000000
--- a/docs/reference/gtkglext/tmpl/gdkgldefs.sgml
+++ /dev/null
@@ -1,26 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-gdkgldefs
-
-<!-- ##### SECTION Short_Description ##### -->
-
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### MACRO GDK_GL_VAR ##### -->
-<para>
-
-</para>
-
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkgldrawable.sgml b/docs/reference/gtkglext/tmpl/gdkgldrawable.sgml
deleted file mode 100644
index c72f851..0000000
--- a/docs/reference/gtkglext/tmpl/gdkgldrawable.sgml
+++ /dev/null
@@ -1,113 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Rendering Surface
-
-<!-- ##### SECTION Short_Description ##### -->
-OpenGL rendering surface interface
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### STRUCT GdkGLDrawable ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_make_current ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_is_double_buffered ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_swap_buffers ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_wait_gl ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_wait_gdk ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_gl_begin ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_gl_end ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_get_gl_config ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_get_size ##### -->
-<para>
-
-</para>
-
-@gldrawable: 
-@width: 
-@height: 
-
-
-<!-- ##### FUNCTION gdk_gl_drawable_get_current ##### -->
-<para>
-
-</para>
-
-@Returns: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglfont.sgml b/docs/reference/gtkglext/tmpl/gdkglfont.sgml
deleted file mode 100644
index ce69250..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglfont.sgml
+++ /dev/null
@@ -1,44 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Font Rendering
-
-<!-- ##### SECTION Short_Description ##### -->
-Functions for font rendering in OpenGL
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### FUNCTION gdk_gl_font_use_pango_font ##### -->
-<para>
-
-</para>
-
-@font_desc: 
-@first: 
-@count: 
-@list_base: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_font_use_pango_font_for_display ##### -->
-<para>
-
-</para>
-
-@display: 
-@font_desc: 
-@first: 
-@count: 
-@list_base: 
-@Returns: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglinit.sgml b/docs/reference/gtkglext/tmpl/gdkglinit.sgml
deleted file mode 100644
index e6d3a1c..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglinit.sgml
+++ /dev/null
@@ -1,48 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Initialization
-
-<!-- ##### SECTION Short_Description ##### -->
-Library initialization functions
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### FUNCTION gdk_gl_init ##### -->
-<para>
-
-</para>
-
-@argc: 
-@argv: 
-
-
-<!-- ##### FUNCTION gdk_gl_init_check ##### -->
-<para>
-
-</para>
-
-@argc: 
-@argv: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_parse_args ##### -->
-<para>
-
-</para>
-
-@argc: 
-@argv: 
-@Returns: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglpixmap.sgml b/docs/reference/gtkglext/tmpl/gdkglpixmap.sgml
deleted file mode 100644
index 355d58e..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglpixmap.sgml
+++ /dev/null
@@ -1,100 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-OpenGL Pixmap
-
-<!-- ##### SECTION Short_Description ##### -->
-OpenGL pixmap which is maintained off-screen
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### STRUCT GdkGLPixmap ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### FUNCTION gdk_gl_pixmap_new ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@pixmap: 
-@attrib_list: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_pixmap_destroy ##### -->
-<para>
-
-</para>
-
-@glpixmap: 
-
-
-<!-- ##### FUNCTION gdk_gl_pixmap_get_pixmap ##### -->
-<para>
-
-</para>
-
-@glpixmap: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_pixmap_set_gl_capability ##### -->
-<para>
-
-</para>
-
-@pixmap: 
-@glconfig: 
-@attrib_list: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_pixmap_unset_gl_capability ##### -->
-<para>
-
-</para>
-
-@pixmap: 
-
-
-<!-- ##### FUNCTION gdk_pixmap_is_gl_capable ##### -->
-<para>
-
-</para>
-
-@pixmap: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_pixmap_get_gl_pixmap ##### -->
-<para>
-
-</para>
-
-@pixmap: 
-@Returns: 
-
-
-<!-- ##### MACRO gdk_pixmap_get_gl_drawable ##### -->
-<para>
-Returns the #GdkGLDrawable held by the @pixmap. In fact, this is macro
-that casts the result of #gdk_pixmap_get_gl_pixmap to #GdkGLDrawable.
-</para>
-
-@pixmap: a #GdkGLPixmap.
-@Returns: the #GdkGLDrawable.
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglquery.sgml b/docs/reference/gtkglext/tmpl/gdkglquery.sgml
deleted file mode 100644
index 39ba118..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglquery.sgml
+++ /dev/null
@@ -1,82 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Query
-
-<!-- ##### SECTION Short_Description ##### -->
-Functions to query OpenGL support information
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### USER_FUNCTION GdkGLProc ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### FUNCTION gdk_gl_query_extension ##### -->
-<para>
-
-</para>
-
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_query_extension_for_display ##### -->
-<para>
-
-</para>
-
-@display: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_query_version ##### -->
-<para>
-
-</para>
-
-@major: 
-@minor: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_query_version_for_display ##### -->
-<para>
-
-</para>
-
-@display: 
-@major: 
-@minor: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_query_gl_extension ##### -->
-<para>
-
-</para>
-
-@extension: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_get_proc_address ##### -->
-<para>
-
-</para>
-
-@proc_name: 
-@Returns: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglshapes.sgml b/docs/reference/gtkglext/tmpl/gdkglshapes.sgml
deleted file mode 100644
index 22f1018..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglshapes.sgml
+++ /dev/null
@@ -1,104 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Geometric Object Rendering
-
-<!-- ##### SECTION Short_Description ##### -->
-Functions for generating easily recognizable 3D geometric objects
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### FUNCTION gdk_gl_draw_cube ##### -->
-<para>
-
-</para>
-
-@solid: 
-@size: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_sphere ##### -->
-<para>
-
-</para>
-
-@solid: 
-@radius: 
-@slices: 
-@stacks: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_cone ##### -->
-<para>
-
-</para>
-
-@solid: 
-@base: 
-@height: 
-@slices: 
-@stacks: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_torus ##### -->
-<para>
-
-</para>
-
-@solid: 
-@inner_radius: 
-@outer_radius: 
-@nsides: 
-@rings: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_tetrahedron ##### -->
-<para>
-
-</para>
-
-@solid: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_octahedron ##### -->
-<para>
-
-</para>
-
-@solid: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_dodecahedron ##### -->
-<para>
-
-</para>
-
-@solid: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_icosahedron ##### -->
-<para>
-
-</para>
-
-@solid: 
-
-
-<!-- ##### FUNCTION gdk_gl_draw_teapot ##### -->
-<para>
-
-</para>
-
-@solid: 
-@scale: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkgltokens.sgml b/docs/reference/gtkglext/tmpl/gdkgltokens.sgml
deleted file mode 100644
index 130878c..0000000
--- a/docs/reference/gtkglext/tmpl/gdkgltokens.sgml
+++ /dev/null
@@ -1,217 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Tokens
-
-<!-- ##### SECTION Short_Description ##### -->
-OpenGL-related tokens
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### MACRO GDK_GL_SUCCESS ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GDK_GL_ATTRIB_LIST_NONE ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### ENUM GdkGLConfigAttrib ##### -->
-<para>
-
-</para>
-
-@GDK_GL_USE_GL: 
-@GDK_GL_BUFFER_SIZE: 
-@GDK_GL_LEVEL: 
-@GDK_GL_RGBA: 
-@GDK_GL_DOUBLEBUFFER: 
-@GDK_GL_STEREO: 
-@GDK_GL_AUX_BUFFERS: 
-@GDK_GL_RED_SIZE: 
-@GDK_GL_GREEN_SIZE: 
-@GDK_GL_BLUE_SIZE: 
-@GDK_GL_ALPHA_SIZE: 
-@GDK_GL_DEPTH_SIZE: 
-@GDK_GL_STENCIL_SIZE: 
-@GDK_GL_ACCUM_RED_SIZE: 
-@GDK_GL_ACCUM_GREEN_SIZE: 
-@GDK_GL_ACCUM_BLUE_SIZE: 
-@GDK_GL_ACCUM_ALPHA_SIZE: 
-@GDK_GL_CONFIG_CAVEAT: 
-@GDK_GL_X_VISUAL_TYPE: 
-@GDK_GL_TRANSPARENT_TYPE: 
-@GDK_GL_TRANSPARENT_INDEX_VALUE: 
-@GDK_GL_TRANSPARENT_RED_VALUE: 
-@GDK_GL_TRANSPARENT_GREEN_VALUE: 
-@GDK_GL_TRANSPARENT_BLUE_VALUE: 
-@GDK_GL_TRANSPARENT_ALPHA_VALUE: 
-@GDK_GL_DRAWABLE_TYPE: 
-@GDK_GL_RENDER_TYPE: 
-@GDK_GL_X_RENDERABLE: 
-@GDK_GL_FBCONFIG_ID: 
-@GDK_GL_MAX_PBUFFER_WIDTH: 
-@GDK_GL_MAX_PBUFFER_HEIGHT: 
-@GDK_GL_MAX_PBUFFER_PIXELS: 
-@GDK_GL_VISUAL_ID: 
-@GDK_GL_SCREEN: 
-@GDK_GL_SAMPLE_BUFFERS: 
-@GDK_GL_SAMPLES: 
-
-<!-- ##### MACRO GDK_GL_DONT_CARE ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GDK_GL_NONE ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### ENUM GdkGLConfigCaveat ##### -->
-<para>
-
-</para>
-
-@GDK_GL_CONFIG_CAVEAT_DONT_CARE: 
-@GDK_GL_CONFIG_CAVEAT_NONE: 
-@GDK_GL_SLOW_CONFIG: 
-@GDK_GL_NON_CONFORMANT_CONFIG: 
-
-<!-- ##### ENUM GdkGLVisualType ##### -->
-<para>
-
-</para>
-
-@GDK_GL_VISUAL_TYPE_DONT_CARE: 
-@GDK_GL_TRUE_COLOR: 
-@GDK_GL_DIRECT_COLOR: 
-@GDK_GL_PSEUDO_COLOR: 
-@GDK_GL_STATIC_COLOR: 
-@GDK_GL_GRAY_SCALE: 
-@GDK_GL_STATIC_GRAY: 
-
-<!-- ##### ENUM GdkGLTransparentType ##### -->
-<para>
-
-</para>
-
-@GDK_GL_TRANSPARENT_NONE: 
-@GDK_GL_TRANSPARENT_RGB: 
-@GDK_GL_TRANSPARENT_INDEX: 
-
-<!-- ##### ENUM GdkGLDrawableTypeMask ##### -->
-<para>
-
-</para>
-
-@GDK_GL_WINDOW_BIT: 
-@GDK_GL_PIXMAP_BIT: 
-@GDK_GL_PBUFFER_BIT: 
-
-<!-- ##### ENUM GdkGLRenderTypeMask ##### -->
-<para>
-
-</para>
-
-@GDK_GL_RGBA_BIT: 
-@GDK_GL_COLOR_INDEX_BIT: 
-
-<!-- ##### ENUM GdkGLBufferMask ##### -->
-<para>
-
-</para>
-
-@GDK_GL_FRONT_LEFT_BUFFER_BIT: 
-@GDK_GL_FRONT_RIGHT_BUFFER_BIT: 
-@GDK_GL_BACK_LEFT_BUFFER_BIT: 
-@GDK_GL_BACK_RIGHT_BUFFER_BIT: 
-@GDK_GL_AUX_BUFFERS_BIT: 
-@GDK_GL_DEPTH_BUFFER_BIT: 
-@GDK_GL_STENCIL_BUFFER_BIT: 
-@GDK_GL_ACCUM_BUFFER_BIT: 
-
-<!-- ##### ENUM GdkGLConfigError ##### -->
-<para>
-
-</para>
-
-@GDK_GL_BAD_SCREEN: 
-@GDK_GL_BAD_ATTRIBUTE: 
-@GDK_GL_NO_EXTENSION: 
-@GDK_GL_BAD_VISUAL: 
-@GDK_GL_BAD_CONTEXT: 
-@GDK_GL_BAD_VALUE: 
-@GDK_GL_BAD_ENUM: 
-
-<!-- ##### ENUM GdkGLRenderType ##### -->
-<para>
-
-</para>
-
-@GDK_GL_RGBA_TYPE: 
-@GDK_GL_COLOR_INDEX_TYPE: 
-
-<!-- ##### ENUM GdkGLDrawableAttrib ##### -->
-<para>
-
-</para>
-
-@GDK_GL_PRESERVED_CONTENTS: 
-@GDK_GL_LARGEST_PBUFFER: 
-@GDK_GL_WIDTH: 
-@GDK_GL_HEIGHT: 
-@GDK_GL_EVENT_MASK: 
-
-<!-- ##### ENUM GdkGLPbufferAttrib ##### -->
-<para>
-
-</para>
-
-@GDK_GL_PBUFFER_PRESERVED_CONTENTS: 
-@GDK_GL_PBUFFER_LARGEST_PBUFFER: 
-@GDK_GL_PBUFFER_HEIGHT: 
-@GDK_GL_PBUFFER_WIDTH: 
-
-<!-- ##### ENUM GdkGLEventMask ##### -->
-<para>
-
-</para>
-
-@GDK_GL_PBUFFER_CLOBBER_MASK: 
-
-<!-- ##### ENUM GdkGLEventType ##### -->
-<para>
-
-</para>
-
-@GDK_GL_DAMAGED: 
-@GDK_GL_SAVED: 
-
-<!-- ##### ENUM GdkGLDrawableType ##### -->
-<para>
-
-</para>
-
-@GDK_GL_WINDOW: 
-@GDK_GL_PBUFFER: 
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglversion.sgml b/docs/reference/gtkglext/tmpl/gdkglversion.sgml
deleted file mode 100644
index b559cf1..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglversion.sgml
+++ /dev/null
@@ -1,94 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Version Information
-
-<!-- ##### SECTION Short_Description ##### -->
-Variables and macros to check the GdkGLExt version
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### MACRO GDKGLEXT_MAJOR_VERSION ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GDKGLEXT_MINOR_VERSION ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GDKGLEXT_MICRO_VERSION ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GDKGLEXT_INTERFACE_AGE ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GDKGLEXT_BINARY_AGE ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GDKGLEXT_CHECK_VERSION ##### -->
-<para>
-
-</para>
-
-@major: 
-@minor: 
-@micro: 
-
-
-<!-- ##### VARIABLE gdkglext_major_version ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gdkglext_minor_version ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gdkglext_micro_version ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gdkglext_interface_age ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gdkglext_binary_age ##### -->
-<para>
-
-</para>
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglwindow.sgml b/docs/reference/gtkglext/tmpl/gdkglwindow.sgml
deleted file mode 100644
index 9ae62f8..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglwindow.sgml
+++ /dev/null
@@ -1,100 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-OpenGL Window
-
-<!-- ##### SECTION Short_Description ##### -->
-OpenGL window which is located on-screen
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### STRUCT GdkGLWindow ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### FUNCTION gdk_gl_window_new ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@window: 
-@attrib_list: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_gl_window_destroy ##### -->
-<para>
-
-</para>
-
-@glwindow: 
-
-
-<!-- ##### FUNCTION gdk_gl_window_get_window ##### -->
-<para>
-
-</para>
-
-@glwindow: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_window_set_gl_capability ##### -->
-<para>
-
-</para>
-
-@window: 
-@glconfig: 
-@attrib_list: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_window_unset_gl_capability ##### -->
-<para>
-
-</para>
-
-@window: 
-
-
-<!-- ##### FUNCTION gdk_window_is_gl_capable ##### -->
-<para>
-
-</para>
-
-@window: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_window_get_gl_window ##### -->
-<para>
-
-</para>
-
-@window: 
-@Returns: 
-
-
-<!-- ##### MACRO gdk_window_get_gl_drawable ##### -->
-<para>
-Returns the #GdkGLDrawable held by the @window. In fact, this is macro
-that casts the result of #gdk_window_get_gl_window to #GdkGLDrawable.
-</para>
-
-@window: a #GdkGLWindow.
-@Returns: the #GdkGLDrawable.
-
-
diff --git a/docs/reference/gtkglext/tmpl/gdkglx.sgml b/docs/reference/gtkglext/tmpl/gdkglx.sgml
deleted file mode 100644
index 8bbdd8c..0000000
--- a/docs/reference/gtkglext/tmpl/gdkglx.sgml
+++ /dev/null
@@ -1,185 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-X Window System Interaction
-
-<!-- ##### SECTION Short_Description ##### -->
-Internal X-related functions
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### FUNCTION gdk_x11_gl_query_glx_extension ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@extension: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_config_new_from_visualid ##### -->
-<para>
-
-</para>
-
-@xvisualid: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_config_new_from_visualid_for_screen ##### -->
-<para>
-
-</para>
-
-@screen: 
-@xvisualid: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_config_get_xdisplay ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_config_get_screen_number ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_config_get_xvinfo ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_config_is_mesa_glx ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_context_foreign_new ##### -->
-<para>
-
-</para>
-
-@glconfig: 
-@share_list: 
-@glxcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_context_get_glxcontext ##### -->
-<para>
-
-</para>
-
-@glcontext: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_pixmap_get_glxpixmap ##### -->
-<para>
-
-</para>
-
-@glpixmap: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gdk_x11_gl_window_get_glxwindow ##### -->
-<para>
-
-</para>
-
-@glwindow: 
-@Returns: 
-
-
-<!-- ##### MACRO GDK_GL_CONFIG_XDISPLAY ##### -->
-<para>
-Gets X Display.
-</para>
-
-@glconfig: a #GdkGLConfig.
-@Returns: pointer to the Display.
-
-
-<!-- ##### MACRO GDK_GL_CONFIG_SCREEN_XNUMBER ##### -->
-<para>
-Gets X screen number.
-</para>
-
-@glconfig: a #GdkGLConfig.
-@Returns: the screen number.
-
-
-<!-- ##### MACRO GDK_GL_CONFIG_XVINFO ##### -->
-<para>
-Gets XVisualInfo data.
-</para>
-
-@glconfig: a #GdkGLConfig.
-@Returns: pointer to the XVisualInfo data.
-
-
-<!-- ##### MACRO GDK_GL_CONFIG_XCOLORMAP ##### -->
-<para>
-Gets X Colormap.
-</para>
-
-@glconfig: a #GdkGLConfig.
-@Returns: the Colormap.
-
-
-<!-- ##### MACRO GDK_GL_CONTEXT_GLXCONTEXT ##### -->
-<para>
-Gets GLXContext.
-</para>
-
-@glcontext: a #GdkGLContext.
-@Returns: the GLXContext.
-
-
-<!-- ##### MACRO GDK_GL_PIXMAP_GLXPIXMAP ##### -->
-<para>
-Gets GLXPixmap.
-</para>
-
-@glpixmap: a #GdkGLPixmap.
-@Returns: the GLXPixmap.
-
-
-<!-- ##### MACRO GDK_GL_WINDOW_GLXWINDOW ##### -->
-<para>
-Gets X Window.
-</para>
-
-@glwindow: a #GdkGLWindow.
-@Returns: the Window.
-
-
diff --git a/docs/reference/gtkglext/tmpl/gtkgl.sgml b/docs/reference/gtkglext/tmpl/gtkgl.sgml
deleted file mode 100644
index 2edc967..0000000
--- a/docs/reference/gtkglext/tmpl/gtkgl.sgml
+++ /dev/null
@@ -1,19 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-gtkgl
-
-<!-- ##### SECTION Short_Description ##### -->
-
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
diff --git a/docs/reference/gtkglext/tmpl/gtkgldefs.sgml b/docs/reference/gtkglext/tmpl/gtkgldefs.sgml
deleted file mode 100644
index d466043..0000000
--- a/docs/reference/gtkglext/tmpl/gtkgldefs.sgml
+++ /dev/null
@@ -1,26 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-gtkgldefs
-
-<!-- ##### SECTION Short_Description ##### -->
-
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### MACRO GTK_GL_VAR ##### -->
-<para>
-
-</para>
-
-
-
diff --git a/docs/reference/gtkglext/tmpl/gtkglext-unused.sgml b/docs/reference/gtkglext/tmpl/gtkglext-unused.sgml
deleted file mode 100644
index e69de29..0000000
diff --git a/docs/reference/gtkglext/tmpl/gtkglinit.sgml b/docs/reference/gtkglext/tmpl/gtkglinit.sgml
deleted file mode 100644
index c159141..0000000
--- a/docs/reference/gtkglext/tmpl/gtkglinit.sgml
+++ /dev/null
@@ -1,48 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Initialization
-
-<!-- ##### SECTION Short_Description ##### -->
-Library initialization functions
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### FUNCTION gtk_gl_init ##### -->
-<para>
-
-</para>
-
-@argc: 
-@argv: 
-
-
-<!-- ##### FUNCTION gtk_gl_init_check ##### -->
-<para>
-
-</para>
-
-@argc: 
-@argv: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gtk_gl_parse_args ##### -->
-<para>
-
-</para>
-
-@argc: 
-@argv: 
-@Returns: 
-
-
diff --git a/docs/reference/gtkglext/tmpl/gtkglversion.sgml b/docs/reference/gtkglext/tmpl/gtkglversion.sgml
deleted file mode 100644
index 3179634..0000000
--- a/docs/reference/gtkglext/tmpl/gtkglversion.sgml
+++ /dev/null
@@ -1,94 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-Version Information
-
-<!-- ##### SECTION Short_Description ##### -->
-Variables and macros to check the GtkGLExt version
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### MACRO GTKGLEXT_MAJOR_VERSION ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GTKGLEXT_MINOR_VERSION ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GTKGLEXT_MICRO_VERSION ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GTKGLEXT_INTERFACE_AGE ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GTKGLEXT_BINARY_AGE ##### -->
-<para>
-
-</para>
-
-
-
-<!-- ##### MACRO GTKGLEXT_CHECK_VERSION ##### -->
-<para>
-
-</para>
-
-@major: 
-@minor: 
-@micro: 
-
-
-<!-- ##### VARIABLE gtkglext_major_version ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gtkglext_minor_version ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gtkglext_micro_version ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gtkglext_interface_age ##### -->
-<para>
-
-</para>
-
-
-<!-- ##### VARIABLE gtkglext_binary_age ##### -->
-<para>
-
-</para>
-
-
diff --git a/docs/reference/gtkglext/tmpl/gtkglwidget.sgml b/docs/reference/gtkglext/tmpl/gtkglwidget.sgml
deleted file mode 100644
index a3b8567..0000000
--- a/docs/reference/gtkglext/tmpl/gtkglwidget.sgml
+++ /dev/null
@@ -1,98 +0,0 @@
-<!-- ##### SECTION Title ##### -->
-OpenGL-Capable Widget
-
-<!-- ##### SECTION Short_Description ##### -->
-OpenGL extension to GtkWidget API
-
-<!-- ##### SECTION Long_Description ##### -->
-<para>
-GtkGLExt is an extension to GTK which adds OpenGL capabilities to
-GtkWidget. Its use is quite simple: use #gtk_widget_set_gl_capability
-to add OpenGL support to a widget, it will create a OpenGL drawable
-(#GdkGLDrawable) for the widget, which can be obtained via
-#gtk_widget_get_gl_drawable. OpenGL rendering context (#GdkGLContext)
-can also be obtained via #gtk_widget_get_gl_context.
-With #GdkGLDrawable and #GdkGLContext, #gdk_gl_drawable_gl_begin and
-#gdk_gl_drawable_gl_end can be called, and OpenGL function calls can
-be made between those two functions.
-</para>
-
-<!-- ##### SECTION See_Also ##### -->
-<para>
-
-</para>
-
-<!-- ##### SECTION Stability_Level ##### -->
-
-
-<!-- ##### FUNCTION gtk_widget_set_gl_capability ##### -->
-<para>
-
-</para>
-
-@widget: 
-@glconfig: 
-@share_list: 
-@direct: 
-@render_type: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gtk_widget_is_gl_capable ##### -->
-<para>
-
-</para>
-
-@widget: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gtk_widget_get_gl_config ##### -->
-<para>
-
-</para>
-
-@widget: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gtk_widget_create_gl_context ##### -->
-<para>
-
-</para>
-
-@widget: 
-@share_list: 
-@direct: 
-@render_type: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gtk_widget_get_gl_context ##### -->
-<para>
-
-</para>
-
-@widget: 
-@Returns: 
-
-
-<!-- ##### FUNCTION gtk_widget_get_gl_window ##### -->
-<para>
-
-</para>
-
-@widget: 
-@Returns: 
-
-
-<!-- ##### MACRO gtk_widget_get_gl_drawable ##### -->
-<para>
-Returns the #GdkGLDrawable owned by the @widget. In fact, this is
-macro that casts the result of #gtk_widget_get_gl_window to #GdkGLDrawable.
-</para>
-
-@widget: a #GtkWidget.
-@Returns: the #GdkGLDrawable.
-
-
diff --git a/examples/.gitignore b/examples/.gitignore
new file mode 100644
index 0000000..de9b8fa
--- /dev/null
+++ b/examples/.gitignore
@@ -0,0 +1,23 @@
+button
+color
+coolwave
+coolwave2
+font
+font-pangoft2
+font-pangoft2-tex
+gears
+glxinfo
+logo
+low-level
+multiarb
+pixmap
+pixmap-mixed
+rotating-square
+scribble-gl
+shapes
+share-lists
+simple
+simple-mixed
+simple-pbuffer-sgix
+template
+viewlw
diff --git a/examples/Makefile.am b/examples/Makefile.am
index 41cf5fc..477fbd7 100644
--- a/examples/Makefile.am
+++ b/examples/Makefile.am
@@ -1,178 +1,199 @@
 ## -*- Makefile -*-
 ## Makefile.am for gtkglext/examples
 
-SUBDIRS = 
-DIST_SUBDIRS = glade
-
 EXTRA_DIST = \
-	Makefile.mingw	\
 	Makefile.msc	\
 	alien.lwo	\
 	penguin.lwo	\
 	girl.rgb	\
 	reflect.rgb
 
-INCLUDES = \
+AM_CPPFLAGS = \
 	-I$(top_srcdir) 		\
 	-I$(top_builddir)/gdk		\
 	-I$(top_builddir)/gtk		\
 	$(GTKGLEXT_DEBUG_FLAGS)		\
-	$(EXAMPLES_DEP_CFLAGS)		\
-	-DG_DISABLE_DEPRECATED		\
-	-DGDK_DISABLE_DEPRECATED	\
-	-DGDK_PIXBUF_DISABLE_DEPRECATED	\
-	-DGTK_DISABLE_DEPRECATED
-
-DEPS = \
-	$(top_builddir)/gdk/$(gdkglext_targetlib)	\
-	$(top_builddir)/gtk/$(gtkglext_targetlib)
-
-LDADDS = \
-	$(top_builddir)/gdk/$(gdkglext_targetlib)	\
-	$(top_builddir)/gtk/$(gtkglext_targetlib)	\
-	$(GTKGLEXT_DEP_LIBS)
-
-LDADDS_WITH_PANGOFT2 = \
-	$(top_builddir)/gdk/$(gdkglext_targetlib)	\
-	$(top_builddir)/gtk/$(gtkglext_targetlib)	\
-	$(GTKGLEXT_DEP_LIBS_WITH_PANGOFT2)
-
-common_programs = \
-	low-level		\
-	simple			\
-	simple-mixed		\
-	pixmap			\
-	pixmap-mixed		\
-	share-lists		\
-	color			\
-	font			\
-	button			\
-	shapes			\
-	logo			\
-	gears			\
-	multiarb		\
-	viewlw			\
-	rotating-square		\
-	coolwave		\
-	coolwave2		\
-	template		\
-	scribble-gl		\
-	font-pangoft2		\
-	font-pangoft2-tex
-
-x11_programs = \
-	simple-pbuffer-sgix	\
-	glxinfo
-
-win32_programs = \
-	wglinfo
-
-if PLATFORM_WIN32
-EXTRA_PROGRAMS = $(common_programs) $(win32_programs)
-else
-EXTRA_PROGRAMS = $(common_programs) $(x11_programs)
+	$(GTK_CFLAGS)			\
+	$(BASE_DEPENDENCIES_CFLAGS)	\
+	$(GL_CFLAGS)			\
+	$(GDKGLEXT_WIN_CFLAGS)		\
+	$(EXAMPLES_DEP_CFLAGS)
+
+LDADD = \
+	../gdk/$(gdkglext_targetlib)	\
+	../gtk/$(gtkglext_targetlib)
+
+AM_LDFLAGS = \
+	$(GTK_LIBS)		\
+	$(GDKGLEXT_WIN_LIBS)
+
+if GLU
+noinst_LTLIBRARIES = libdrawshapes.la
+nodist_EXTRA_libdrawshapes_la_SOURCES = ltdummy.cpp
+libdrawshapes_la_SOURCES = drawshapes.c drawshapes.h
+libdrawshapes_la_LIBADD = $(MATH_LIB) $(GLU_LIBS) $(GL_LIBS)
 endif
 
+noinst_PROGRAMS =
+
+if GLU
+noinst_PROGRAMS += low-level
+nodist_EXTRA_low_level_SOURCES = dummy.cpp
 low_level_SOURCES = low-level.c
-low_level_DEPENDENCIES = $(DEPS)
-low_level_LDADD = $(LDADDS)
+low_level_LDFLAGS = $(AM_LDFLAGS) $(GLU_LIBS) $(GL_LIBS)
+low_level_LDADD = ../gdk/$(gdkglext_targetlib)
+endif
 
+if GLU
+noinst_PROGRAMS += simple
+nodist_EXTRA_simple_SOURCES = dummy.cpp
 simple_SOURCES = simple.c
-simple_DEPENDENCIES = $(DEPS)
-simple_LDADD = $(LDADDS)
+simple_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if GLU
+noinst_PROGRAMS += simple-mixed
+nodist_EXTRA_simple_mixed_SOURCES = dummy.cpp
 simple_mixed_SOURCES = simple-mixed.c
-simple_mixed_DEPENDENCIES = $(DEPS)
-simple_mixed_LDADD = $(LDADDS)
+simple_mixed_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if GLU
+noinst_PROGRAMS += pixmap
+nodist_EXTRA_pixmap_SOURCES = dummy.cpp
 pixmap_SOURCES = pixmap.c
-pixmap_DEPENDENCIES = $(DEPS)
-pixmap_LDADD = $(LDADDS)
+pixmap_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if GLU
+noinst_PROGRAMS += pixmap-mixed
+nodist_EXTRA_pixmap_mixed_SOURCES = dummy.cpp
 pixmap_mixed_SOURCES = pixmap-mixed.c
-pixmap_mixed_DEPENDENCIES = $(DEPS)
-pixmap_mixed_LDADD = $(LDADDS)
+pixmap_mixed_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if GLU
+noinst_PROGRAMS += share-lists
+nodist_EXTRA_share_lists_SOURCES = dummy.cpp
 share_lists_SOURCES = share-lists.c
-share_lists_DEPENDENCIES = $(DEPS)
-share_lists_LDADD = $(LDADDS)
+share_lists_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+noinst_PROGRAMS += color
 color_SOURCES = color.c
-color_DEPENDENCIES = $(DEPS)
-color_LDADD = $(LDADDS)
-
-font_SOURCES = font.c
-font_DEPENDENCIES = $(DEPS)
-font_LDADD = $(LDADDS)
 
+if GLU
+noinst_PROGRAMS += button
+nodist_EXTRA_button_SOURCES = dummy.cpp
 button_SOURCES = button.c
-button_DEPENDENCIES = $(DEPS)
-button_LDADD = $(LDADDS)
+button_LDADD = $(LDADD) libdrawshapes.la
+endif
 
+if GLU
+noinst_PROGRAMS += shapes
+nodist_EXTRA_shapes_SOURCES = dummy.cpp
 shapes_SOURCES = trackball.h trackball.c shapes.c
-shapes_DEPENDENCIES = $(DEPS)
-shapes_LDADD = $(LDADDS)
+shapes_LDADD = $(LDADD) libdrawshapes.la
+endif
 
+noinst_PROGRAMS += logo
 logo_SOURCES = trackball.h trackball.c logo-model.h logo-model.c logo.c
-EXTRA_logo_SOURCES = logo-g.c logo-t.c logo-k.c
-logo_DEPENDENCIES = $(DEPS)
-logo_LDADD = $(LDADDS)
+logo_SOURCES += logo-g.h logo-t.h logo-k.h
 
+noinst_PROGRAMS += gears
 gears_SOURCES = gears.c
-gears_DEPENDENCIES = $(DEPS)
-gears_LDADD = $(LDADDS)
 
+if GLU
+noinst_PROGRAMS += multiarb
+nodist_EXTRA_multiarb_SOURCES = dummy.cpp
 multiarb_SOURCES = readtex.h readtex.c multiarb.c
-multiarb_DEPENDENCIES = $(DEPS)
-multiarb_LDADD = $(LDADDS)
+multiarb_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if GLU
+noinst_PROGRAMS += viewlw
+nodist_EXTRA_viewlw_SOURCES = dummy.cpp
 viewlw_SOURCES = viewlw.c lw.h lw.c trackball.h trackball.c
-viewlw_DEPENDENCIES = $(DEPS)
-viewlw_LDADD = $(LDADDS)
+viewlw_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+noinst_PROGRAMS += rotating-square
 rotating_square_SOURCES = rotating-square.c
-rotating_square_DEPENDENCIES = $(DEPS)
-rotating_square_LDADD = $(LDADDS)
 
+if GLU
+noinst_PROGRAMS += coolwave
+nodist_EXTRA_coolwave_SOURCES = dummy.cpp
 coolwave_SOURCES = coolwave.c
-coolwave_DEPENDENCIES = $(DEPS)
-coolwave_LDADD = $(LDADDS)
+coolwave_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if GLU
+noinst_PROGRAMS += coolwave2
+nodist_EXTRA_coolwave2_SOURCES = dummy.cpp
 coolwave2_SOURCES = coolwave2.c
-coolwave2_DEPENDENCIES = $(DEPS)
-coolwave2_LDADD = $(LDADDS)
+coolwave2_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
 
+noinst_PROGRAMS += template
 template_SOURCES = template.c
-template_DEPENDENCIES = $(DEPS)
-template_LDADD = $(LDADDS)
 
+noinst_PROGRAMS += scribble-gl
 scribble_gl_SOURCES = scribble-gl.c
-scribble_gl_DEPENDENCIES = $(DEPS)
-scribble_gl_LDADD = $(LDADDS)
 
+if GLU
+noinst_PROGRAMS += font-pangoft2
+nodist_EXTRA_font_pangoft2_SOURCES = dummy.cpp
 font_pangoft2_SOURCES = font-pangoft2.c
-font_pangoft2_DEPENDENCIES = $(DEPS)
-font_pangoft2_LDADD = $(LDADDS_WITH_PANGOFT2)
+font_pangoft2_CPPFLAGS = $(AM_CPPFLAGS) $(PANGOFT2_CFLAGS)
+font_pangoft2_LDFLAGS = $(AM_LDFLAGS) $(PANGOFT2_LIBS) $(GTKGLEXT_DEP_LIBS_WITH_PANGOFT2) $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if GLU
+noinst_PROGRAMS += font-pangoft2-tex
+nodist_EXTRA_font_pangoft2_tex_SOURCES = dummy.cpp
 font_pangoft2_tex_SOURCES = font-pangoft2-tex.c
-font_pangoft2_tex_DEPENDENCIES = $(DEPS)
-font_pangoft2_tex_LDADD = $(LDADDS_WITH_PANGOFT2)
+font_pangoft2_tex_CPPFLAGS = $(AM_CPPFLAGS) $(PANGOFT2_CFLAGS)
+font_pangoft2_tex_LDFLAGS = $(AM_LDFLAGS) $(PANGOFT2_LIBS) $(GTKGLEXT_DEP_LIBS_WITH_PANGOFT2) $(GLU_LIBS) $(GL_LIBS)
+endif
 
+if !USE_WIN32
+if !TARGET_QUARTZ
+if GLU
+noinst_PROGRAMS += simple-pbuffer-sgix
+nodist_EXTRA_simple_pbuffer_sgix_SOURCES = dummy.cpp
 simple_pbuffer_sgix_SOURCES = simple-pbuffer-sgix.c
-simple_pbuffer_sgix_DEPENDENCIES = $(DEPS)
-simple_pbuffer_sgix_LDADD = $(LDADDS)
-
-glxinfo_SOURCES = glxinfo.c
-glxinfo_DEPENDENCIES = $(DEPS)
-glxinfo_LDADD = $(GL_LIBS) $(WINDOWING_LIBS) $(MATH_LIB)
+simple_pbuffer_sgix_LDFLAGS = $(GLU_LIBS) $(GL_LIBS)
+endif
+endif
+endif
 
+if USE_WIN32
+noinst_PROGRAMS += wglinfo
 wglinfo_SOURCES = wglinfo.c
-wglinfo_DEPENDENCIES = $(DEPS)
 wglinfo_LDADD = $(GL_LIBS) $(WINDOWING_LIBS)
+endif
 
+if !USE_WIN32
+if !TARGET_QUARTZ
+if GLU
+noinst_PROGRAMS += glxinfo
+nodist_EXTRA_glxinfo_SOURCES = dummy.cpp
+glxinfo_SOURCES = glxinfo.c
+glxinfo_LDADD = $(WINDOWING_LIBS) $(GLU_LIBS) $(GL_LIBS) $(MATH_LIB)
+endif
+endif
+endif
 
-all-local: $(EXTRA_PROGRAMS)
 
-clean-local:
-	-rm -f $(EXTRA_PROGRAMS)
+EXTRA_DIST += glade/README \
+glade/simple.glade \
+glade/simple.c \
+glade/share-lists.glade	\
+glade/share-lists.c
 
+EXTRA_DIST += \
+glsl/gears.c \
+glsl/shiny.fsh \
+glsl/shiny.vsh \
+glsl/velvet.fsh \
+glsl/velvet.vsh
diff --git a/examples/Makefile.mingw b/examples/Makefile.mingw
deleted file mode 100644
index 099d44c..0000000
--- a/examples/Makefile.mingw
+++ /dev/null
@@ -1,203 +0,0 @@
-# -*- Makefile -*-
-#
-# Sample makefile for GtkGLExt example programs
-#   Naofumi Yasufuku <naofumi@users.sourceforge.net>
-#
-
-SHELL = /bin/sh
-
-INCLUDES := $(shell pkg-config --cflags gtkglext-1.0 pangoft2)
-LIBS := $(shell pkg-config --libs gtkglext-1.0)
-LIBS_WITH_PANGOFT2 := $(shell pkg-config --libs gtkglext-1.0 pangoft2)
-DEFINES = 
-
-CC = gcc
-OPTIMIZE = -march=pentium -O2
-DEBUG = -g -Wall
-MS_BITFIELDS = -mms-bitfields
-#MS_BITFIELDS = -fnative-struct
-CFLAGS = $(OPTIMIZE) $(DEBUG) $(MS_BITFIELDS)
-CPPFLAGS = $(INCLUDES) $(DEFINES)
-LDFLAGS = 
-
-COMPILE = $(CC) $(CFLAGS) $(CPPFLAGS)
-LINK = $(CC) $(LDFLAGS)
-
-EXEEXT = .exe
-
-HEADERS = \
-	trackball.h		\
-	logo-model.h		\
-	readtex.h		\
-	lw.h
-
-SOURCES = \
-	low-level.c		\
-	simple.c		\
-	simple-mixed.c		\
-	pixmap.c		\
-	pixmap-mixed.c		\
-	share-lists.c		\
-	color.c			\
-	font.c			\
-	button.c		\
-	trackball.c		\
-	shapes.c		\
-	logo-model.c		\
-	logo.c			\
-	gears.c			\
-	readtex.c		\
-	multiarb.c		\
-	viewlw.c		\
-	lw.c			\
-	rotating-square.c	\
-	coolwave.c		\
-	coolwave2.c		\
-	template.c		\
-	scribble-gl.c		\
-	font-pangoft2.c		\
-	font-pangoft2-tex.c	\
-	wglinfo.c
-
-EXTRA_SOURCES = \
-	logo-g.c		\
-	logo-t.c		\
-	logo-k.c
-
-OBJECTS = $(SOURCES:.c=.o)
-
-PROGRAMS = \
-	low-level$(EXEEXT)		\
-	simple$(EXEEXT)			\
-	simple-mixed$(EXEEXT)		\
-	pixmap$(EXEEXT)			\
-	pixmap-mixed$(EXEEXT)		\
-	share-lists$(EXEEXT)		\
-	color$(EXEEXT)			\
-	font$(EXEEXT)			\
-	button$(EXEEXT)			\
-	shapes$(EXEEXT)			\
-	logo$(EXEEXT)			\
-	gears$(EXEEXT)			\
-	multiarb$(EXEEXT)		\
-	viewlw$(EXEEXT)			\
-	rotating-square$(EXEEXT)	\
-	coolwave$(EXEEXT)		\
-	coolwave2$(EXEEXT)		\
-	template$(EXEEXT)		\
-	scribble-gl$(EXEEXT)		\
-	wglinfo$(EXEEXT)
-
-.PHONY: all clean-deps clean-obj clean distclean
-
-.SUFFIXES:
-.SUFFIXES: .c .o
-
-all: $(PROGRAMS)
-
-#
-# Include dependencies
-#
-
-DEPS_MAGIC := $(shell if test ! -d .deps; then mkdir .deps; fi)
-DEPS = $(addprefix .deps/, $(SOURCES:.c=.Po))
--include $(DEPS)
-
-#
-# Compile command
-#
-
-.c.o:
-	$(COMPILE) -Wp,-MD,.deps/$(*F).TPo -c $<
-	@-cp .deps/$(*F).TPo .deps/$(*F).Po; \
-	tr ' ' '\012' < .deps/$(*F).TPo \
-		| sed -e 's/^\\$$//' -e '/^$$/d' -e '/:$$/d' \
-		| sed -e 's/$$/ :/' \
-		>> .deps/$(*F).Po; \
-	rm .deps/$(*F).TPo
-
-#
-# Building executables
-#
-
-low-level$(EXEEXT): low-level.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-simple$(EXEEXT): simple.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-simple-mixed$(EXEEXT): simple-mixed.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-pixmap$(EXEEXT): pixmap.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-pixmap-mixed$(EXEEXT): pixmap-mixed.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-share-lists$(EXEEXT): share-lists.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-color$(EXEEXT): color.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-font$(EXEEXT): font.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-button$(EXEEXT): button.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-shapes$(EXEEXT): trackball.o shapes.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-logo$(EXEEXT): trackball.o logo-model.o logo.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-gears$(EXEEXT): gears.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-multiarb$(EXEEXT): readtex.o multiarb.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-viewlw$(EXEEXT): trackball.o lw.o viewlw.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-rotating-square$(EXEEXT): rotating-square.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-coolwave$(EXEEXT): coolwave.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-coolwave2$(EXEEXT): coolwave2.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-template$(EXEEXT): template.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-scribble-gl$(EXEEXT): scribble-gl.o
-	$(LINK) -o $@ $^ $(LIBS)
-
-font-pangoft2$(EXEEXT): font-pangoft2.o
-	$(LINK) -o $@ $^ $(LIBS_WITH_PANGOFT2)
-
-font-pangoft2-tex$(EXEEXT): font-pangoft2-tex.o
-	$(LINK) -o $@ $^ $(LIBS_WITH_PANGOFT2)
-
-wglinfo$(EXEEXT): wglinfo.o
-	$(LINK) -o $@ $^ -lopengl32 -lgdi32
-
-#
-# Clean up
-#
-
-clean-deps:
-	-rm -rf .deps
-
-clean-obj: clean-deps
-	-rm -f *.o
-
-clean: clean-obj
-	-rm -f $(PROGRAMS)
-
-distclean: clean
-	-rm -f *~
diff --git a/examples/button.c b/examples/button.c
index 97ee034..1cc2cd1 100644
--- a/examples/button.c
+++ b/examples/button.c
@@ -17,8 +17,13 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
+#endif
+
+#include "drawshapes.h"
 
 #define TIMEOUT_INTERVAL 10
 
@@ -65,13 +70,18 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
   GLfloat aspect;
 
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
+
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
@@ -129,7 +139,7 @@ expose_event (GtkWidget      *widget,
     glMaterialfv (GL_FRONT, GL_DIFFUSE, diffuse);
     glMaterialfv (GL_FRONT, GL_SPECULAR, specular);
     glMaterialf (GL_FRONT, GL_SHININESS, shininess);
-    gdk_gl_draw_torus (TRUE, 0.3, 0.6, 30, 30);
+    draw_torus (TRUE, 0.3, 0.6, 30, 30);
   glPopMatrix ();
 
   if (gdk_gl_drawable_is_double_buffered (gldrawable))
@@ -146,8 +156,13 @@ expose_event (GtkWidget      *widget,
 static gboolean
 timeout (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   GLfloat t;
 
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   angle += 3.0;
   if (angle >= 360.0)
     angle -= 360.0;
@@ -159,10 +174,10 @@ timeout (GtkWidget *widget)
   pos_y = 2.0 * (sin (t) + 0.4 * sin (3.0*t)) - 1.0;
 
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously (fast). */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -237,6 +252,7 @@ visibility_notify_event (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -246,7 +262,8 @@ toggle_animation (GtkWidget *widget)
   else
     {
       timeout_remove (widget);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
diff --git a/examples/color.c b/examples/color.c
index fd5b73d..26bcc13 100644
--- a/examples/color.c
+++ b/examples/color.c
@@ -17,8 +17,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
+#endif
 
 /*
  * Colors.
@@ -44,6 +47,7 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -51,8 +55,9 @@ configure_event (GtkWidget         *widget,
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     goto NO_GL;
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   gdk_gl_drawable_gl_end (gldrawable);
   /*** OpenGL END ***/
diff --git a/examples/coolwave.c b/examples/coolwave.c
index c550974..dc38380 100644
--- a/examples/coolwave.c
+++ b/examples/coolwave.c
@@ -37,8 +37,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 
 /**************************************************************************
@@ -281,11 +285,16 @@ configure_event (GtkWidget         *widget,
 		 GdkEventConfigure *event,
 		 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
@@ -354,15 +363,20 @@ expose_event (GtkWidget      *widget,
 static gboolean
 timeout (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   getforce ();
   getvelocity ();
   getposition ();
 
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously (fast). */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -376,8 +390,11 @@ motion_notify_event (GtkWidget      *widget,
 		     GdkEventMotion *event,
 		     gpointer        data)
 {
+  GtkAllocation allocation;
   gboolean redraw = FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   if (event->state & GDK_BUTTON1_MASK)
     {
       sphi += (float)(event->x - beginX) / 4.0;
@@ -388,7 +405,7 @@ motion_notify_event (GtkWidget      *widget,
 
   if (event->state & GDK_BUTTON2_MASK)
     {
-      sdepth -= ((event->y - beginY)/(widget->allocation.height))*(MAXGRID/2);
+      sdepth -= ((event->y - beginY)/(allocation.height))*(MAXGRID/2);
 
       redraw = TRUE;
     }
@@ -397,7 +414,7 @@ motion_notify_event (GtkWidget      *widget,
   beginY = event->y;
 
   if (redraw && !animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
 
   return TRUE;
 }
@@ -455,6 +472,8 @@ key_press_event (GtkWidget   *widget,
 		 GdkEventKey *event,
 		 gpointer     data)
 {
+  GtkAllocation allocation;
+
   switch (event->keyval)
     {
     case GDK_r:
@@ -487,7 +506,10 @@ key_press_event (GtkWidget   *widget,
     }
 
   if (!animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    {
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
+    }
 
   return TRUE;
 }
@@ -597,6 +619,7 @@ visibility_notify_event (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -606,7 +629,8 @@ toggle_animation (GtkWidget *widget)
   else
     {
       timeout_remove (widget);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
@@ -616,8 +640,11 @@ toggle_animation (GtkWidget *widget)
 static void
 init_wireframe (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+
   resetWireframe ();
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gtk_widget_get_allocation (widget, &allocation);
+  gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
 }
 
 
diff --git a/examples/coolwave2.c b/examples/coolwave2.c
index 5b3d433..353a65d 100644
--- a/examples/coolwave2.c
+++ b/examples/coolwave2.c
@@ -50,8 +50,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 
 /**************************************************************************
@@ -294,11 +298,16 @@ configure_event (GtkWidget         *widget,
 		 GdkEventConfigure *event,
 		 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
@@ -367,15 +376,20 @@ expose_event (GtkWidget      *widget,
 static gboolean
 timeout (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   getforce ();
   getvelocity ();
   getposition ();
 
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously (fast). */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -389,8 +403,11 @@ motion_notify_event (GtkWidget      *widget,
 		     GdkEventMotion *event,
 		     gpointer        data)
 {
+  GtkAllocation allocation;
   gboolean redraw = FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   if (event->state & GDK_BUTTON1_MASK)
     {
       sphi += (float)(event->x - beginX) / 4.0;
@@ -401,7 +418,7 @@ motion_notify_event (GtkWidget      *widget,
 
   if (event->state & GDK_BUTTON2_MASK)
     {
-      sdepth -= ((event->y - beginY)/(widget->allocation.height))*(MAXGRID/2);
+      sdepth -= ((event->y - beginY)/(allocation.height))*(MAXGRID/2);
 
       redraw = TRUE;
     }
@@ -410,7 +427,7 @@ motion_notify_event (GtkWidget      *widget,
   beginY = event->y;
 
   if (redraw && !animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
 
   return TRUE;
 }
@@ -469,6 +486,8 @@ key_press_event (GtkWidget   *widget,
 		 GdkEventKey *event,
 		 gpointer     data)
 {
+  GtkAllocation allocation;
+
   switch (event->keyval)
     {
     case GDK_r:
@@ -501,7 +520,10 @@ key_press_event (GtkWidget   *widget,
     }
 
   if (!animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    {
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
+    }
 
   return TRUE;
 }
@@ -611,6 +633,7 @@ visibility_notify_event (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -620,7 +643,8 @@ toggle_animation (GtkWidget *widget)
   else
     {
       timeout_remove (widget);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
@@ -630,8 +654,12 @@ toggle_animation (GtkWidget *widget)
 static void
 init_wireframe (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+
+  gtk_widget_get_allocation (widget, &allocation);
+
   resetWireframe ();
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
 }
 
 
diff --git a/gdk/gdkglshapes.c b/examples/drawshapes.c
similarity index 95%
rename from gdk/gdkglshapes.c
rename to examples/drawshapes.c
index f72abba..18cf23e 100644
--- a/gdk/gdkglshapes.c
+++ b/examples/drawshapes.c
@@ -18,18 +18,20 @@
 
 #include <math.h>
 
-#include <glib.h>
-
-#include "gdkglprivate.h"
-#include "gdkglshapes.h"
+#include "drawshapes.h"
+#include <gdk/gdkglext-config.h>
 
 #ifdef G_OS_WIN32
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 #endif
 
+#ifdef GDKGLEXT_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 /* 
  * The following code is imported from GLUT.
@@ -37,7 +39,7 @@
 
 /* Copyright (c) Mark J. Kilgard, 1994, 1997. */
 
-/**
+/*
 (c) Copyright 1993, Silicon Graphics, Inc.
 
 ALL RIGHTS RESERVED
@@ -127,7 +129,7 @@ drawBox(GLfloat size, GLenum type)
 }
 
 /**
- * gdk_gl_draw_cube:
+ * draw_cube:
  * @solid: TRUE if the cube should be solid.
  * @size: length of cube sides.
  *
@@ -137,8 +139,8 @@ drawBox(GLfloat size, GLenum type)
  *
  **/
 void
-gdk_gl_draw_cube (gboolean solid,
-                  double   size)
+draw_cube (gboolean solid,
+           double   size)
 {
   if (solid)
     drawBox (size, GL_QUADS);
@@ -163,7 +165,7 @@ initQuadObj(void)
 }
 
 /**
- * gdk_gl_draw_sphere:
+ * draw_sphere:
  * @solid: TRUE if the sphere should be solid.
  * @radius: the radius of the sphere.
  * @slices: the number of subdivisions around the Z axis (similar to lines of
@@ -177,10 +179,10 @@ initQuadObj(void)
  *
  **/
 void
-gdk_gl_draw_sphere (gboolean solid,
-                    double   radius,
-                    int      slices,
-                    int      stacks)
+draw_sphere (gboolean solid,
+             double   radius,
+             int      slices,
+             int      stacks)
 {
   QUAD_OBJ_INIT();
 
@@ -198,7 +200,7 @@ gdk_gl_draw_sphere (gboolean solid,
 }
 
 /**
- * gdk_gl_draw_cone:
+ * draw_cone:
  * @solid: TRUE if the cone should be solid.
  * @base: the radius of the base of the cone.
  * @height: the height of the cone.
@@ -212,11 +214,11 @@ gdk_gl_draw_sphere (gboolean solid,
  *
  **/
 void
-gdk_gl_draw_cone (gboolean solid,
-                  double   base,
-                  double   height,
-                  int      slices,
-                  int      stacks)
+draw_cone (gboolean solid,
+           double   base,
+           double   height,
+           int      slices,
+           int      stacks)
 {
   QUAD_OBJ_INIT();
 
@@ -279,7 +281,7 @@ doughnut(GLfloat r, GLfloat R, GLint nsides, GLint rings)
 }
 
 /**
- * gdk_gl_draw_torus:
+ * draw_torus:
  * @solid: TRUE if the torus should be solid.
  * @inner_radius: inner radius of the torus.
  * @outer_radius: outer radius of the torus.
@@ -291,11 +293,11 @@ doughnut(GLfloat r, GLfloat R, GLint nsides, GLint rings)
  *
  **/
 void
-gdk_gl_draw_torus (gboolean solid,
-                   double   inner_radius,
-                   double   outer_radius,
-                   int      nsides,
-                   int      rings)
+draw_torus (gboolean solid,
+            double   inner_radius,
+            double   outer_radius,
+            int      nsides,
+            int      rings)
 {
   if (solid)
     {
@@ -447,7 +449,7 @@ tetrahedron(GLenum shadeType)
 }
 
 /**
- * gdk_gl_draw_tetrahedron:
+ * draw_tetrahedron:
  * @solid: TRUE if the tetrahedron should be solid.
  *
  * Renders a tetrahedron centered at the modeling coordinates
@@ -455,7 +457,7 @@ tetrahedron(GLenum shadeType)
  *
  **/
 void
-gdk_gl_draw_tetrahedron (gboolean solid)
+draw_tetrahedron (gboolean solid)
 {
   if (solid)
     tetrahedron (GL_TRIANGLES);
@@ -502,7 +504,7 @@ octahedron(GLenum shadeType)
 }
 
 /**
- * gdk_gl_draw_octahedron:
+ * draw_octahedron:
  * @solid: TRUE if the octahedron should be solid.
  *
  * Renders a octahedron centered at the modeling coordinates
@@ -510,7 +512,7 @@ octahedron(GLenum shadeType)
  *
  **/
 void
-gdk_gl_draw_octahedron (gboolean solid)
+draw_octahedron (gboolean solid)
 {
   if (solid)
     octahedron (GL_TRIANGLES);
@@ -579,7 +581,7 @@ icosahedron(GLenum shadeType)
 }
 
 /**
- * gdk_gl_draw_icosahedron:
+ * draw_icosahedron:
  * @solid: TRUE if the icosahedron should be solid.
  *
  * Renders a icosahedron.
@@ -588,7 +590,7 @@ icosahedron(GLenum shadeType)
  *
  **/
 void
-gdk_gl_draw_icosahedron (gboolean solid)
+draw_icosahedron (gboolean solid)
 {
   if (solid)
     icosahedron (GL_TRIANGLES);
@@ -679,7 +681,7 @@ dodecahedron(GLenum type)
 }
 
 /**
- * gdk_gl_draw_dodecahedron:
+ * draw_dodecahedron:
  * @solid: TRUE if the dodecahedron should be solid.
  *
  * Renders a dodecahedron centered at the modeling coordinates
@@ -687,7 +689,7 @@ dodecahedron(GLenum type)
  *
  **/
 void
-gdk_gl_draw_dodecahedron (gboolean solid)
+draw_dodecahedron (gboolean solid)
 {
   if (solid)
     dodecahedron (GL_TRIANGLE_FAN);
@@ -848,7 +850,7 @@ teapot(GLint grid, GLdouble scale, GLenum type)
 }
 
 /**
- * gdk_gl_draw_teapot:
+ * draw_teapot:
  * @solid: TRUE if the teapot should be solid.
  * @scale: relative size of the teapot.
  *
@@ -858,8 +860,8 @@ teapot(GLint grid, GLdouble scale, GLenum type)
  *
  **/
 void
-gdk_gl_draw_teapot (gboolean solid,
-                    double   scale)
+draw_teapot (gboolean solid,
+             double   scale)
 {
   if (solid)
     teapot (7, scale, GL_FILL);
diff --git a/examples/drawshapes.h b/examples/drawshapes.h
new file mode 100644
index 0000000..2b564ca
--- /dev/null
+++ b/examples/drawshapes.h
@@ -0,0 +1,59 @@
+/* GdkGLExt - OpenGL Extension to GDK
+ * Copyright (C) 2002-2004  Naofumi Yasufuku
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+ */
+
+#ifndef __DRAW_SHAPES_H__
+#define __DRAW_SHAPES_H__
+
+#include <glib.h>
+
+G_BEGIN_DECLS
+
+void draw_cube         (gboolean solid,
+                        double   size);
+
+void draw_sphere       (gboolean solid,
+                        double   radius,
+                        int      slices,
+                        int      stacks);
+
+void draw_cone         (gboolean solid,
+                        double   base,
+                        double   height,
+                        int      slices,
+                        int      stacks);
+
+void draw_torus        (gboolean solid,
+                        double   inner_radius,
+                        double   outer_radius,
+                        int      nsides,
+                        int      rings);
+
+void draw_tetrahedron  (gboolean solid);
+
+void draw_octahedron   (gboolean solid);
+
+void draw_dodecahedron (gboolean solid);
+
+void draw_icosahedron  (gboolean solid);
+
+void draw_teapot       (gboolean solid,
+                        double   scale);
+
+G_END_DECLS
+
+#endif /* __DRAW_SHAPES_H__ */
diff --git a/examples/font-pangoft2-tex.c b/examples/font-pangoft2-tex.c
index 07c4e14..7a3a03f 100644
--- a/examples/font-pangoft2-tex.c
+++ b/examples/font-pangoft2-tex.c
@@ -20,8 +20,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 #define TIMEOUT_INTERVAL 10
 
@@ -268,11 +272,16 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLsizei w = widget->allocation.width;
-  GLsizei h = widget->allocation.height;
+  GLsizei w;
+  GLsizei h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
@@ -416,15 +425,21 @@ unrealize (GtkWidget *widget,
 static gboolean
 timeout (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
+
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   text_z -= TEXT_Z_DIFF;
   if (text_z <= TEXT_Z_FAR)
     text_z = TEXT_Z_NEAR;
 
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously. */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
diff --git a/examples/font-pangoft2.c b/examples/font-pangoft2.c
index 710d97b..103e60f 100644
--- a/examples/font-pangoft2.c
+++ b/examples/font-pangoft2.c
@@ -20,8 +20,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 #define FOVY_2 20.0
 #define Z_NEAR 3.0
@@ -168,11 +172,16 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLsizei w = widget->allocation.width;
-  GLsizei h = widget->allocation.height;
+  GLsizei w;
+  GLsizei h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
@@ -205,6 +214,7 @@ expose_event (GtkWidget      *widget,
               GdkEventExpose *event,
               gpointer        data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -215,6 +225,8 @@ expose_event (GtkWidget      *widget,
   GLfloat text_w, text_h;
   GLfloat tangent_h;
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   /* Font */
   widget_context = gtk_widget_get_pango_context (widget);
   font_desc = pango_context_get_font_description (widget_context);
@@ -223,7 +235,7 @@ expose_event (GtkWidget      *widget,
 
   /* Text layout */
   layout = pango_layout_new (ft2_context);
-  pango_layout_set_width (layout, PANGO_SCALE * widget->allocation.width);
+  pango_layout_set_width (layout, PANGO_SCALE * allocation.width);
   pango_layout_set_alignment (layout, PANGO_ALIGN_CENTER);
   pango_layout_set_text (layout, text, -1);
 
@@ -244,15 +256,15 @@ expose_event (GtkWidget      *widget,
   text_h = PANGO_PIXELS (logical_rect.height);
   /*
    * tangent = Z_NEAR * tan (FOVY_2 * G_PI / 180.0)
-   * w = widget->allocation.width
-   * h = widget->allocation.height
+   * w = allocation.width
+   * h = allocation.height
    *
    * x = -1.0 * (text_w/w) * tangent * (w/h) = -text_w * tangent / h
    * y = -1.0 * (text_h/h) * tangent         = -text_h * tangent / h
    * z = Z_NEAR
    */
   tangent_h = Z_NEAR * tan (FOVY_2 * G_PI / 180.0);
-  tangent_h /= widget->allocation.height;
+  tangent_h /= allocation.height;
   glRasterPos3f (-text_w * tangent_h,
                  -text_h * tangent_h,
                  Z_NEAR);
diff --git a/examples/font.c b/examples/font.c
deleted file mode 100644
index 964dd98..0000000
--- a/examples/font.c
+++ /dev/null
@@ -1,349 +0,0 @@
-/*
- * font.c:
- * Simple bitmap font rendering example.
- *
- * written by Naofumi Yasufuku  <naofumi@users.sourceforge.net>
- */
-
-#include <stdlib.h>
-#include <string.h>
-
-#include <gtk/gtk.h>
-
-#include <gtk/gtkgl.h>
-
-#ifdef G_OS_WIN32
-#define WIN32_LEAN_AND_MEAN 1
-#include <windows.h>
-#endif
-
-#include <GL/gl.h>
-#include <GL/glu.h>
-
-static gchar font_string[] = "courier 12";
-static GLuint font_list_base;
-static gint font_height;
-
-static void
-realize (GtkWidget *widget,
-         gpointer   data)
-{
-  GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
-  GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
-
-  PangoFontDescription *font_desc;
-  PangoFont *font;
-  PangoFontMetrics *font_metrics;
-
-  /*** OpenGL BEGIN ***/
-  if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
-    return;
-
-  /*
-   * Generate font display lists.
-   */
-  font_list_base = glGenLists (128);
-
-  font_desc = pango_font_description_from_string (font_string);
-
-  font = gdk_gl_font_use_pango_font (font_desc, 0, 128, font_list_base);
-  if (font == NULL)
-    {
-      g_print ("*** Can't load font '%s'\n", font_string);
-      exit (1);
-    }
-
-  font_metrics = pango_font_get_metrics (font, NULL);
-
-  font_height = pango_font_metrics_get_ascent (font_metrics) +
-                pango_font_metrics_get_descent (font_metrics);
-  font_height = PANGO_PIXELS (font_height);
-
-  pango_font_description_free (font_desc);
-  pango_font_metrics_unref (font_metrics);
-
-  glClearColor (1.0, 1.0, 1.0, 1.0);
-  glClearDepth (1.0);
-
-  glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
-
-  glMatrixMode (GL_PROJECTION);
-  glLoadIdentity ();
-  glOrtho (0.0, widget->allocation.width,
-           0.0, widget->allocation.height,
-           -1.0, 1.0);
-
-  glMatrixMode (GL_MODELVIEW);
-  glLoadIdentity ();
-
-  gdk_gl_drawable_gl_end (gldrawable);
-  /*** OpenGL END ***/
-}
-
-static gboolean
-configure_event (GtkWidget         *widget,
-                 GdkEventConfigure *event,
-                 gpointer           data)
-{
-  GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
-  GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
-
-  /*** OpenGL BEGIN ***/
-  if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
-    return FALSE;
-
-  glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
-
-  glMatrixMode (GL_PROJECTION);
-  glLoadIdentity ();
-  glOrtho (0.0, widget->allocation.width,
-           0.0, widget->allocation.height,
-           -1.0, 1.0);
-
-  glMatrixMode (GL_MODELVIEW);
-  glLoadIdentity ();
-
-  gdk_gl_drawable_gl_end (gldrawable);
-  /*** OpenGL END ***/
-
-  return TRUE;
-}
-
-static gboolean
-expose_event (GtkWidget      *widget,
-              GdkEventExpose *event,
-              gpointer        data)
-{
-  GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
-  GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
-  int i, j;
-
-  /*** OpenGL BEGIN ***/
-  if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
-    return FALSE;
-
-  glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
-
-  /*
-   * Draw some text.
-   */
-  glColor3f (0.0, 0.0, 0.0);
-  for (i = 2; i >= -2; i--)
-    {
-      glRasterPos2f (10.0, 0.5*widget->allocation.height + i*font_height);
-      for (j = ' '; j <= 'Z'; j++)
-        glCallList (font_list_base+j);
-    }
-
-  /*
-   * Show font description string.
-   */
-  glColor3f (1.0, 0.0, 0.0);
-  glRasterPos2f (10.0, 10.0);
-  glListBase (font_list_base);
-  glCallLists (strlen (font_string), GL_UNSIGNED_BYTE, font_string);
-
-  if (gdk_gl_drawable_is_double_buffered (gldrawable))
-    gdk_gl_drawable_swap_buffers (gldrawable);
-  else
-    glFlush ();
-
-  gdk_gl_drawable_gl_end (gldrawable);
-  /*** OpenGL END ***/
-
-  return TRUE;
-}
-
-static void
-print_gl_config_attrib (GdkGLConfig *glconfig,
-                        const gchar *attrib_str,
-                        int          attrib,
-                        gboolean     is_boolean)
-{
-  int value;
-
-  g_print ("%s = ", attrib_str);
-  if (gdk_gl_config_get_attrib (glconfig, attrib, &value))
-    {
-      if (is_boolean)
-        g_print ("%s\n", value == TRUE ? "TRUE" : "FALSE");
-      else
-        g_print ("%d\n", value);
-    }
-  else
-    g_print ("*** Cannot get %s attribute value\n", attrib_str);
-}
-
-static void
-examine_gl_config_attrib (GdkGLConfig *glconfig)
-{
-  g_print ("\nOpenGL visual configurations :\n\n");
-
-  g_print ("gdk_gl_config_is_rgba (glconfig) = %s\n",
-           gdk_gl_config_is_rgba (glconfig) ? "TRUE" : "FALSE");
-  g_print ("gdk_gl_config_is_double_buffered (glconfig) = %s\n",
-           gdk_gl_config_is_double_buffered (glconfig) ? "TRUE" : "FALSE");
-  g_print ("gdk_gl_config_is_stereo (glconfig) = %s\n",
-           gdk_gl_config_is_stereo (glconfig) ? "TRUE" : "FALSE");
-  g_print ("gdk_gl_config_has_alpha (glconfig) = %s\n",
-           gdk_gl_config_has_alpha (glconfig) ? "TRUE" : "FALSE");
-  g_print ("gdk_gl_config_has_depth_buffer (glconfig) = %s\n",
-           gdk_gl_config_has_depth_buffer (glconfig) ? "TRUE" : "FALSE");
-  g_print ("gdk_gl_config_has_stencil_buffer (glconfig) = %s\n",
-           gdk_gl_config_has_stencil_buffer (glconfig) ? "TRUE" : "FALSE");
-  g_print ("gdk_gl_config_has_accum_buffer (glconfig) = %s\n",
-           gdk_gl_config_has_accum_buffer (glconfig) ? "TRUE" : "FALSE");
-
-  g_print ("\n");
-
-  print_gl_config_attrib (glconfig, "GDK_GL_USE_GL",           GDK_GL_USE_GL,           TRUE);
-  print_gl_config_attrib (glconfig, "GDK_GL_BUFFER_SIZE",      GDK_GL_BUFFER_SIZE,      FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_LEVEL",            GDK_GL_LEVEL,            FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_RGBA",             GDK_GL_RGBA,             TRUE);
-  print_gl_config_attrib (glconfig, "GDK_GL_DOUBLEBUFFER",     GDK_GL_DOUBLEBUFFER,     TRUE);
-  print_gl_config_attrib (glconfig, "GDK_GL_STEREO",           GDK_GL_STEREO,           TRUE);
-  print_gl_config_attrib (glconfig, "GDK_GL_AUX_BUFFERS",      GDK_GL_AUX_BUFFERS,      FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_RED_SIZE",         GDK_GL_RED_SIZE,         FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_GREEN_SIZE",       GDK_GL_GREEN_SIZE,       FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_BLUE_SIZE",        GDK_GL_BLUE_SIZE,        FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_ALPHA_SIZE",       GDK_GL_ALPHA_SIZE,       FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_DEPTH_SIZE",       GDK_GL_DEPTH_SIZE,       FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_STENCIL_SIZE",     GDK_GL_STENCIL_SIZE,     FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_ACCUM_RED_SIZE",   GDK_GL_ACCUM_RED_SIZE,   FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_ACCUM_GREEN_SIZE", GDK_GL_ACCUM_GREEN_SIZE, FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_ACCUM_BLUE_SIZE",  GDK_GL_ACCUM_BLUE_SIZE,  FALSE);
-  print_gl_config_attrib (glconfig, "GDK_GL_ACCUM_ALPHA_SIZE", GDK_GL_ACCUM_ALPHA_SIZE, FALSE);
-
-  g_print ("\n");
-}
-
-int
-main (int   argc,
-      char *argv[])
-{
-  GdkGLConfig *glconfig;
-  gint major, minor;
-
-  GtkWidget *window;
-  GtkWidget *vbox;
-  GtkWidget *drawing_area;
-  GtkWidget *button;
-
-  /*
-   * Init GTK.
-   */
-
-  gtk_init (&argc, &argv);
-
-  /*
-   * Init GtkGLExt.
-   */
-
-  gtk_gl_init (&argc, &argv);
-
-  /*
-   * Query OpenGL extension version.
-   */
-
-  gdk_gl_query_version (&major, &minor);
-  g_print ("\nOpenGL extension version - %d.%d\n",
-           major, minor);
-
-  /*
-   * Configure OpenGL-capable visual.
-   */
-
-  /* Try double-buffered visual */
-  glconfig = gdk_gl_config_new_by_mode (GDK_GL_MODE_RGB    |
-                                        GDK_GL_MODE_DOUBLE);
-  if (glconfig == NULL)
-    {
-      g_print ("*** Cannot find the double-buffered visual.\n");
-      g_print ("*** Trying single-buffered visual.\n");
-
-      /* Try single-buffered visual */
-      glconfig = gdk_gl_config_new_by_mode (GDK_GL_MODE_RGB);
-      if (glconfig == NULL)
-        {
-          g_print ("*** No appropriate OpenGL-capable visual found.\n");
-          exit (1);
-        }
-    }
-
-  examine_gl_config_attrib (glconfig);
-
-  /*
-   * Top-level window.
-   */
-
-  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
-  gtk_window_set_title (GTK_WINDOW (window), "font");
-
-  /* Get automatically redrawn if any of their children changed allocation. */
-  gtk_container_set_reallocate_redraws (GTK_CONTAINER (window), TRUE);
-
-  g_signal_connect (G_OBJECT (window), "delete_event",
-                    G_CALLBACK (gtk_main_quit), NULL);
-
-  /*
-   * VBox.
-   */
-
-  vbox = gtk_vbox_new (FALSE, 0);
-  gtk_container_add (GTK_CONTAINER (window), vbox);
-  gtk_widget_show (vbox);
-
-  /*
-   * Drawing area for drawing OpenGL scene.
-   */
-
-  drawing_area = gtk_drawing_area_new ();
-  gtk_widget_set_size_request (drawing_area, 640, 240);
-
-  /* Set OpenGL-capability to the widget. */
-  gtk_widget_set_gl_capability (drawing_area,
-				glconfig,
-                                NULL,
-                                TRUE,
-                                GDK_GL_RGBA_TYPE);
-
-  g_signal_connect_after (G_OBJECT (drawing_area), "realize",
-                          G_CALLBACK (realize), NULL);
-  g_signal_connect (G_OBJECT (drawing_area), "configure_event",
-		    G_CALLBACK (configure_event), NULL);
-  g_signal_connect (G_OBJECT (drawing_area), "expose_event",
-		    G_CALLBACK (expose_event), NULL);
-
-  gtk_box_pack_start (GTK_BOX (vbox), drawing_area, TRUE, TRUE, 0);
-
-  gtk_widget_show (drawing_area);
-
-  /*
-   * Simple quit button.
-   */
-
-  button = gtk_button_new_with_label ("Quit");
-
-  g_signal_connect (G_OBJECT (button), "clicked",
-                    G_CALLBACK (gtk_main_quit), NULL);
-
-  gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
-
-  gtk_widget_show (button);
-
-  /*
-   * Show window.
-   */
-
-  gtk_widget_show (window);
-
-  /*
-   * Main loop.
-   */
-
-  gtk_main ();
-
-  return 0;
-}
diff --git a/examples/gears.c b/examples/gears.c
index e41754f..a8df06d 100644
--- a/examples/gears.c
+++ b/examples/gears.c
@@ -22,8 +22,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
+#endif
 
 /*
  * Draw a gear wheel.  You'll probably want to call this function when
@@ -234,16 +237,20 @@ reshape (GtkWidget         *widget,
 	 GdkEventConfigure *event,
 	 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat h = (GLfloat) (widget->allocation.height) / (GLfloat) (widget->allocation.width);
+  GLfloat h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  h = (GLfloat) (allocation.height) / (GLfloat) (allocation.width);
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
 
-  glViewport (0, 0, widget->allocation.width, widget->allocation.height);
+  glViewport (0, 0, allocation.width, allocation.height);
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
   glFrustum (-1.0, 1.0, -h, h, 5.0, 60.0);
@@ -320,14 +327,19 @@ init(GtkWidget *widget,
 static gboolean
 idle (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   angle += 2.0;
 
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously (fast). */
   if (is_sync)
-    gdk_window_process_updates (widget->window, FALSE);
+    gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -395,6 +407,8 @@ key (GtkWidget   *widget,
      GdkEventKey *event,
      gpointer     data)
 {
+  GtkAllocation allocation;
+
   switch (event->keyval)
     {
     case GDK_z:
@@ -422,7 +436,8 @@ key (GtkWidget   *widget,
       return FALSE;
     }
 
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gtk_widget_get_allocation (widget, &allocation);
+  gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
 
   return TRUE;
 }
@@ -563,7 +578,7 @@ main (int   argc,
   /*
    * Main loop.
    */
-
+//idle_add (drawing_area);
   gtk_main ();
 
   return 0;
diff --git a/examples/glade/Makefile.am b/examples/glade/Makefile.am
deleted file mode 100644
index c0eb17c..0000000
--- a/examples/glade/Makefile.am
+++ /dev/null
@@ -1,10 +0,0 @@
-## -*- Makefile -*-
-## Makefile.am for gtkglext/examples/glade
-
-EXTRA_DIST = \
-	README			\
-	simple.glade		\
-	simple.c		\
-	share-lists.glade	\
-	share-lists.c
-
diff --git a/examples/glade/share-lists.c b/examples/glade/share-lists.c
index 66b4ddc..7b41ef7 100644
--- a/examples/glade/share-lists.c
+++ b/examples/glade/share-lists.c
@@ -9,13 +9,19 @@
 #include <gtk/gtkgl.h>
 #include <glade/glade.h>
 
+#include <stdlib.h>
+
 #ifdef G_OS_WIN32
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 gboolean
 on_window1_delete_event (GtkWidget *widget,
diff --git a/examples/glade/simple.c b/examples/glade/simple.c
index 63f2d2b..5cfc635 100644
--- a/examples/glade/simple.c
+++ b/examples/glade/simple.c
@@ -9,13 +9,19 @@
 #include <gtk/gtkgl.h>
 #include <glade/glade.h>
 
+#include <stdlib.h>
+
 #ifdef G_OS_WIN32
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 gboolean
 on_window1_delete_event (GtkWidget *widget,
diff --git a/examples/glsl/gears.c b/examples/glsl/gears.c
new file mode 100644
index 0000000..9bd82a8
--- /dev/null
+++ b/examples/glsl/gears.c
@@ -0,0 +1,614 @@
+/*
+ * 3-D gear wheels.  This program is in the public domain.
+ *
+ * Brian Paul
+ */
+
+/* Conversion to GLUT by Mark J. Kilgard */
+
+/* Conversion to GtkGLExt by Naofumi Yasufuku */
+
+/* Shader code by Mukund Sivaraman, adapted from Michael Brooks's Ruby
+   code also released into public-domain. */
+
+#include <stdlib.h>
+#include <string.h>
+#include <math.h>
+
+#include <gtk/gtk.h>
+#include <gdk/gdkkeysyms.h>
+
+#include <gtk/gtkgl.h>
+#include <gdk/gdkglglext.h>
+
+#ifdef G_OS_WIN32
+#define WIN32_LEAN_AND_MEAN 1
+#include <windows.h>
+#endif
+
+#include <GL/gl.h>
+#include <GL/glu.h>
+
+/*
+ * Draw a gear wheel.  You'll probably want to call this function when
+ * building a display list since we do a lot of trig here.
+ *
+ * Input:  inner_radius - radius of hole at center
+ * outer_radius - radius at center of teeth
+ * width - width of gear
+ * teeth - number of teeth
+ * tooth_depth - depth of tooth
+ */
+
+static void
+gear(GLfloat inner_radius,
+     GLfloat outer_radius,
+     GLfloat width,
+     GLint   teeth,
+     GLfloat tooth_depth)
+{
+  GLint i;
+  GLfloat r0, r1, r2;
+  GLfloat angle, da;
+  GLfloat u, v, len;
+
+  r0 = inner_radius;
+  r1 = outer_radius - tooth_depth / 2.0;
+  r2 = outer_radius + tooth_depth / 2.0;
+
+  da = 2.0 * G_PI / teeth / 4.0;
+
+  glShadeModel(GL_FLAT);
+
+  glNormal3f(0.0, 0.0, 1.0);
+
+  /* draw front face */
+  glBegin(GL_QUAD_STRIP);
+  for (i = 0; i <= teeth; i++) {
+    angle = i * 2.0 * G_PI / teeth;
+    glVertex3f(r0 * cos(angle), r0 * sin(angle), width * 0.5);
+    glVertex3f(r1 * cos(angle), r1 * sin(angle), width * 0.5);
+    if (i < teeth) {
+      glVertex3f(r0 * cos(angle), r0 * sin(angle), width * 0.5);
+      glVertex3f(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da), width * 0.5);
+    }
+  }
+  glEnd();
+
+  /* draw front sides of teeth */
+  glBegin(GL_QUADS);
+  da = 2.0 * G_PI / teeth / 4.0;
+  for (i = 0; i < teeth; i++) {
+    angle = i * 2.0 * G_PI / teeth;
+
+    glVertex3f(r1 * cos(angle), r1 * sin(angle), width * 0.5);
+    glVertex3f(r2 * cos(angle + da), r2 * sin(angle + da), width * 0.5);
+    glVertex3f(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da), width * 0.5);
+    glVertex3f(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da), width * 0.5);
+  }
+  glEnd();
+
+  glNormal3f(0.0, 0.0, -1.0);
+
+  /* draw back face */
+  glBegin(GL_QUAD_STRIP);
+  for (i = 0; i <= teeth; i++) {
+    angle = i * 2.0 * G_PI / teeth;
+    glVertex3f(r1 * cos(angle), r1 * sin(angle), -width * 0.5);
+    glVertex3f(r0 * cos(angle), r0 * sin(angle), -width * 0.5);
+    if (i < teeth) {
+      glVertex3f(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da), -width * 0.5);
+      glVertex3f(r0 * cos(angle), r0 * sin(angle), -width * 0.5);
+    }
+  }
+  glEnd();
+
+  /* draw back sides of teeth */
+  glBegin(GL_QUADS);
+  da = 2.0 * G_PI / teeth / 4.0;
+  for (i = 0; i < teeth; i++) {
+    angle = i * 2.0 * G_PI / teeth;
+
+    glVertex3f(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da), -width * 0.5);
+    glVertex3f(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da), -width * 0.5);
+    glVertex3f(r2 * cos(angle + da), r2 * sin(angle + da), -width * 0.5);
+    glVertex3f(r1 * cos(angle), r1 * sin(angle), -width * 0.5);
+  }
+  glEnd();
+
+  /* draw outward faces of teeth */
+  glBegin(GL_QUAD_STRIP);
+  for (i = 0; i < teeth; i++) {
+    angle = i * 2.0 * G_PI / teeth;
+
+    glVertex3f(r1 * cos(angle), r1 * sin(angle), width * 0.5);
+    glVertex3f(r1 * cos(angle), r1 * sin(angle), -width * 0.5);
+    u = r2 * cos(angle + da) - r1 * cos(angle);
+    v = r2 * sin(angle + da) - r1 * sin(angle);
+    len = sqrt(u * u + v * v);
+    u /= len;
+    v /= len;
+    glNormal3f(v, -u, 0.0);
+    glVertex3f(r2 * cos(angle + da), r2 * sin(angle + da), width * 0.5);
+    glVertex3f(r2 * cos(angle + da), r2 * sin(angle + da), -width * 0.5);
+    glNormal3f(cos(angle), sin(angle), 0.0);
+    glVertex3f(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da), width * 0.5);
+    glVertex3f(r2 * cos(angle + 2 * da), r2 * sin(angle + 2 * da), -width * 0.5);
+    u = r1 * cos(angle + 3 * da) - r2 * cos(angle + 2 * da);
+    v = r1 * sin(angle + 3 * da) - r2 * sin(angle + 2 * da);
+    glNormal3f(v, -u, 0.0);
+    glVertex3f(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da), width * 0.5);
+    glVertex3f(r1 * cos(angle + 3 * da), r1 * sin(angle + 3 * da), -width * 0.5);
+    glNormal3f(cos(angle), sin(angle), 0.0);
+  }
+
+  glVertex3f(r1 * cos(0), r1 * sin(0), width * 0.5);
+  glVertex3f(r1 * cos(0), r1 * sin(0), -width * 0.5);
+
+  glEnd();
+
+  glShadeModel(GL_SMOOTH);
+
+  /* draw inside radius cylinder */
+  glBegin(GL_QUAD_STRIP);
+  for (i = 0; i <= teeth; i++) {
+    angle = i * 2.0 * G_PI / teeth;
+    glNormal3f(-cos(angle), -sin(angle), 0.0);
+    glVertex3f(r0 * cos(angle), r0 * sin(angle), -width * 0.5);
+    glVertex3f(r0 * cos(angle), r0 * sin(angle), width * 0.5);
+  }
+  glEnd();
+
+}
+
+static GLfloat view_rotx = 20.0, view_roty = 30.0, view_rotz = 0.0;
+static GLint gear1, gear2, gear3;
+static GLfloat angle = 0.0;
+
+static GTimer *timer = NULL;
+
+static gboolean is_sync = TRUE;
+
+static GLuint program1;
+static GLuint program2;
+
+static gboolean
+draw (GtkWidget      *widget,
+      GdkEventExpose *event,
+      gpointer        data)
+{
+  GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
+  GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
+
+  /*** OpenGL BEGIN ***/
+  if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
+    return FALSE;
+
+  glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
+
+  glPushMatrix ();
+    glRotatef (view_rotx, 1.0, 0.0, 0.0);
+    glRotatef (view_roty, 0.0, 1.0, 0.0);
+    glRotatef (view_rotz, 0.0, 0.0, 1.0);
+
+    gdk_gl_glUseProgram (gdk_gl_get_glUseProgram (), program1);
+
+    glPushMatrix ();
+      glTranslatef (-3.0, -2.0, 0.0);
+      glRotatef (angle, 0.0, 0.0, 1.0);
+      glCallList (gear1);
+    glPopMatrix ();
+
+    gdk_gl_glUseProgram (gdk_gl_get_glUseProgram (), program2);
+
+    glPushMatrix ();
+      glTranslatef (3.1, -2.0, 0.0);
+      glRotatef (-2.0 * angle - 9.0, 0.0, 0.0, 1.0);
+      glCallList (gear2);
+    glPopMatrix ();
+
+    glPushMatrix ();
+      glTranslatef (-3.1, 4.2, 0.0);
+      glRotatef (-2.0 * angle - 25.0, 0.0, 0.0, 1.0);
+      glCallList (gear3);
+    glPopMatrix ();
+
+  glPopMatrix ();
+
+  if (gdk_gl_drawable_is_double_buffered (gldrawable))
+    gdk_gl_drawable_swap_buffers (gldrawable);
+  else
+    glFlush ();
+
+  gdk_gl_drawable_gl_end (gldrawable);
+  /*** OpenGL END ***/
+
+  return TRUE;
+}
+
+/* new window size or exposure */
+static gboolean
+reshape (GtkWidget         *widget,
+	 GdkEventConfigure *event,
+	 gpointer           data)
+{
+  GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
+  GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
+
+  GLfloat h = (GLfloat) (widget->allocation.height) / (GLfloat) (widget->allocation.width);
+
+  /*** OpenGL BEGIN ***/
+  if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
+    return FALSE;
+
+  glViewport (0, 0, widget->allocation.width, widget->allocation.height);
+  glMatrixMode (GL_PROJECTION);
+  glLoadIdentity ();
+  glFrustum (-1.0, 1.0, -h, h, 5.0, 60.0);
+  glMatrixMode (GL_MODELVIEW);
+  glLoadIdentity ();
+  glTranslatef (0.0, 0.0, -40.0);
+
+  gdk_gl_drawable_gl_end (gldrawable);
+  /*** OpenGL END ***/
+
+  return TRUE;
+}
+
+static GLuint
+create_shader_program (const char *name)
+{
+  GLuint program;
+  GLuint vshader, fshader;
+  char *filename;
+  char *contents;
+  const GLchar *sources[1];
+
+  program = gdk_gl_glCreateProgram (gdk_gl_get_glCreateProgram ());
+
+
+  vshader = gdk_gl_glCreateShader (gdk_gl_get_glCreateShader (),
+                                   GL_VERTEX_SHADER);
+  filename = g_strdup_printf ("%s.vsh", name);
+  g_file_get_contents (filename, &contents, NULL, NULL);
+  sources[0] = contents;
+  gdk_gl_glShaderSource (gdk_gl_get_glShaderSource (),
+                         vshader, 1, sources, NULL);
+  g_free (contents);
+  g_free (filename);
+  gdk_gl_glCompileShader (gdk_gl_get_glCompileShader (), vshader);
+  gdk_gl_glAttachShader (gdk_gl_get_glAttachShader (), program, vshader);
+
+
+  fshader = gdk_gl_glCreateShader (gdk_gl_get_glCreateShader (),
+                                   GL_FRAGMENT_SHADER);
+  filename = g_strdup_printf ("%s.fsh", name);
+  g_file_get_contents (filename, &contents, NULL, NULL);
+  sources[0] = contents;
+  gdk_gl_glShaderSource (gdk_gl_get_glShaderSource (),
+                         fshader, 1, sources, NULL);
+  g_free (contents);
+  g_free (filename);
+  gdk_gl_glCompileShader (gdk_gl_get_glCompileShader (), fshader);
+  gdk_gl_glAttachShader (gdk_gl_get_glAttachShader (), program, fshader);
+
+  gdk_gl_glLinkProgram (gdk_gl_get_glLinkProgram (), program);
+
+  gdk_gl_glDeleteShader (gdk_gl_get_glDeleteShader (), vshader);
+  gdk_gl_glDeleteShader (gdk_gl_get_glDeleteShader (), fshader);
+
+  return program;
+}
+
+static void
+init(GtkWidget *widget,
+     gpointer   data)
+{
+  GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
+  GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
+
+  static GLfloat pos[4] = {100.0, 0.0, 0.0, 1.0};
+  static GLfloat red[4] = {0.8, 0.1, 0.0, 1.0};
+  static GLfloat green[4] = {0.0, 0.8, 0.2, 1.0};
+  static GLfloat blue[4] = {0.2, 0.2, 1.0, 1.0};
+
+  /*** OpenGL BEGIN ***/
+  if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
+    return;
+
+  glLightfv (GL_LIGHT0, GL_POSITION, pos);
+  glEnable (GL_CULL_FACE);
+  glEnable (GL_LIGHTING);
+  glEnable (GL_LIGHT0);
+  glShadeModel(GL_SMOOTH);
+  glEnable (GL_DEPTH_TEST);
+
+  /* make the gears */
+  gear1 = glGenLists (1);
+  glNewList (gear1, GL_COMPILE);
+    glMaterialfv (GL_FRONT, GL_AMBIENT_AND_DIFFUSE, red);
+    gear (1.0, 4.0, 1.0, 20, 0.7);
+  glEndList ();
+
+  gear2 = glGenLists (1);
+  glNewList (gear2, GL_COMPILE);
+    glMaterialfv (GL_FRONT, GL_AMBIENT_AND_DIFFUSE, green);
+    gear (0.5, 2.0, 2.0, 10, 0.7);
+  glEndList ();
+
+  gear3 = glGenLists (1);
+  glNewList (gear3, GL_COMPILE);
+    glMaterialfv (GL_FRONT, GL_AMBIENT_AND_DIFFUSE, blue);
+    gear (1.3, 2.0, 0.5, 10, 0.7);
+  glEndList ();
+
+  glEnable (GL_NORMALIZE);
+
+  g_print ("\n");
+  g_print ("GL_RENDERER   = %s\n", (char *) glGetString (GL_RENDERER));
+  g_print ("GL_VERSION    = %s\n", (char *) glGetString (GL_VERSION));
+  g_print ("GL_VENDOR     = %s\n", (char *) glGetString (GL_VENDOR));
+  g_print ("GL_EXTENSIONS = %s\n", (char *) glGetString (GL_EXTENSIONS));
+  g_print ("\n");
+
+  program1 = create_shader_program ("shiny");
+  program2 = create_shader_program ("velvet");
+
+  gdk_gl_drawable_gl_end (gldrawable);
+  /*** OpenGL END ***/
+
+  /* create timer */
+  if (timer == NULL)
+    timer = g_timer_new ();
+
+  g_timer_start (timer);
+}
+
+static gboolean
+idle (GtkWidget *widget)
+{
+  angle += 2.0;
+
+  /* Invalidate the whole window. */
+  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+
+  /* Update synchronously (fast). */
+  if (is_sync)
+    gdk_window_process_updates (widget->window, FALSE);
+
+  return TRUE;
+}
+
+static guint idle_id = 0;
+
+static void
+idle_add (GtkWidget *widget)
+{
+  if (idle_id == 0)
+    {
+      idle_id = g_timeout_add (50, (GSourceFunc) idle, widget);
+    }
+}
+
+static void
+idle_remove (GtkWidget *widget)
+{
+  if (idle_id != 0)
+    {
+      g_source_remove (idle_id);
+      idle_id = 0;
+    }
+}
+
+static gboolean
+map (GtkWidget   *widget,
+     GdkEventAny *event,
+     gpointer     data)
+{
+  idle_add (widget);
+
+  return TRUE;
+}
+
+static gboolean
+unmap (GtkWidget   *widget,
+       GdkEventAny *event,
+       gpointer     data)
+{
+  idle_remove (widget);
+
+  return TRUE;
+}
+
+static gboolean
+visible (GtkWidget          *widget,
+	 GdkEventVisibility *event,
+	 gpointer            data)
+{
+  if (event->state == GDK_VISIBILITY_FULLY_OBSCURED)
+    idle_remove (widget);
+  else
+    idle_add (widget);
+
+  return TRUE;
+}
+
+/* change view angle, exit upon ESC */
+static gboolean
+key (GtkWidget   *widget,
+     GdkEventKey *event,
+     gpointer     data)
+{
+  switch (event->keyval)
+    {
+    case GDK_z:
+      view_rotz += 5.0;
+      break;
+    case GDK_Z:
+      view_rotz -= 5.0;
+      break;
+    case GDK_Up:
+      view_rotx += 5.0;
+      break;
+    case GDK_Down:
+      view_rotx -= 5.0;
+      break;
+    case GDK_Left:
+      view_roty += 5.0;
+      break;
+    case GDK_Right:
+      view_roty -= 5.0;
+      break;
+    case GDK_Escape:
+      gtk_main_quit ();
+      break;
+    default:
+      return FALSE;
+    }
+
+  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+
+  return TRUE;
+}
+
+int
+main (int   argc,
+      char *argv[])
+{
+  GdkGLConfig *glconfig;
+  GtkWidget *window;
+  GtkWidget *vbox;
+  GtkWidget *drawing_area;
+  GtkWidget *button;
+  int i;
+
+  /*
+   * Init GTK.
+   */
+
+  gtk_init (&argc, &argv);
+
+  /*
+   * Init GtkGLExt.
+   */
+
+  gtk_gl_init (&argc, &argv);
+
+  /*
+   * Command line options.
+   */
+
+  for (i = 0; i < argc; i++)
+    {
+      if (strcmp (argv[i], "--async") == 0)
+        is_sync = FALSE;
+    }
+
+  /*
+   * Configure OpenGL-capable visual.
+   */
+
+  /* Try double-buffered visual */
+  glconfig = gdk_gl_config_new_by_mode (GDK_GL_MODE_RGB    |
+					GDK_GL_MODE_DEPTH  |
+					GDK_GL_MODE_DOUBLE);
+  if (glconfig == NULL)
+    {
+      g_print ("*** Cannot find the double-buffered visual.\n");
+      g_print ("*** Trying single-buffered visual.\n");
+
+      /* Try single-buffered visual */
+      glconfig = gdk_gl_config_new_by_mode (GDK_GL_MODE_RGB   |
+					    GDK_GL_MODE_DEPTH);
+      if (glconfig == NULL)
+	{
+	  g_print ("*** No appropriate OpenGL-capable visual found.\n");
+	  exit (1);
+	}
+    }
+
+  /*
+   * Top-level window.
+   */
+
+  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
+  gtk_window_set_title (GTK_WINDOW (window), "gears");
+
+  /* Get automatically redrawn if any of their children changed allocation. */
+  gtk_container_set_reallocate_redraws (GTK_CONTAINER (window), TRUE);
+
+  g_signal_connect (G_OBJECT (window), "delete_event",
+		    G_CALLBACK (gtk_main_quit), NULL);
+
+  /*
+   * VBox.
+   */
+
+  vbox = gtk_vbox_new (FALSE, 0);
+  gtk_container_add (GTK_CONTAINER (window), vbox);
+  gtk_widget_show (vbox);
+
+  /*
+   * Drawing area for drawing OpenGL scene.
+   */
+
+  drawing_area = gtk_drawing_area_new ();
+  gtk_widget_set_size_request (drawing_area, 300, 300);
+
+  /* Set OpenGL-capability to the widget. */
+  gtk_widget_set_gl_capability (drawing_area,
+				glconfig,
+				NULL,
+				TRUE,
+				GDK_GL_RGBA_TYPE);
+
+  gtk_widget_add_events (drawing_area,
+			 GDK_VISIBILITY_NOTIFY_MASK);
+
+  g_signal_connect_after (G_OBJECT (drawing_area), "realize",
+                          G_CALLBACK (init), NULL);
+  g_signal_connect (G_OBJECT (drawing_area), "configure_event",
+		    G_CALLBACK (reshape), NULL);
+  g_signal_connect (G_OBJECT (drawing_area), "expose_event",
+		    G_CALLBACK (draw), NULL);
+  g_signal_connect (G_OBJECT (drawing_area), "map_event",
+		    G_CALLBACK (map), NULL);
+  g_signal_connect (G_OBJECT (drawing_area), "unmap_event",
+		    G_CALLBACK (unmap), NULL);
+  g_signal_connect (G_OBJECT (drawing_area), "visibility_notify_event",
+		    G_CALLBACK (visible), NULL);
+
+  g_signal_connect_swapped (G_OBJECT (window), "key_press_event",
+			    G_CALLBACK (key), drawing_area);
+
+  gtk_box_pack_start (GTK_BOX (vbox), drawing_area, TRUE, TRUE, 0);
+
+  gtk_widget_show (drawing_area);
+
+  /*
+   * Simple quit button.
+   */
+
+  button = gtk_button_new_with_label ("Quit");
+
+  g_signal_connect (G_OBJECT (button), "clicked",
+		    G_CALLBACK (gtk_main_quit), NULL);
+
+  gtk_box_pack_start (GTK_BOX (vbox), button, FALSE, FALSE, 0);
+
+  gtk_widget_show (button);
+
+  /*
+   * Show window.
+   */
+
+  gtk_widget_show (window);
+
+  /*
+   * Main loop.
+   */
+
+  gtk_main ();
+
+  return 0;
+}
diff --git a/examples/glsl/shiny.fsh b/examples/glsl/shiny.fsh
new file mode 100644
index 0000000..27023d6
--- /dev/null
+++ b/examples/glsl/shiny.fsh
@@ -0,0 +1,33 @@
+// Based on Point Light shader from oZone3D.Net 
+// http://www.ozone3d.net/tutorials/glsl_lighting_phong_p2.php
+
+varying vec3 normal, light_direction, eye_position;
+varying float attenuation;
+
+void main(void)
+{
+  vec4 final_color = 
+    (gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
+	(gl_LightSource[0].ambient * gl_FrontMaterial.ambient)*attenuation;
+							
+  vec3 N = normalize(normal);
+  vec3 L = normalize(light_direction);
+	
+  float lambert_term = dot(N,L);
+	
+  if(lambert_term > 0.0)
+	{
+      final_color += gl_LightSource[0].diffuse * 
+                     gl_FrontMaterial.diffuse * lambert_term * attenuation;	
+		
+      vec3 E = normalize(eye_position);
+      vec3 R = reflect(-L, N);
+		
+      float specular = pow(max(dot(R, E), 0.0), gl_FrontMaterial.shininess);
+		
+      final_color += gl_LightSource[0].specular * gl_FrontMaterial.specular * 
+                     specular * attenuation;	
+	}
+
+	gl_FragColor = final_color;			
+}
diff --git a/examples/glsl/shiny.vsh b/examples/glsl/shiny.vsh
new file mode 100644
index 0000000..520abd2
--- /dev/null
+++ b/examples/glsl/shiny.vsh
@@ -0,0 +1,22 @@
+// Based on Point Light shader from oZone3D.Net 
+// http://www.ozone3d.net/tutorials/glsl_lighting_phong_p2.php
+
+varying vec3 normal, light_direction, eye_position;
+varying float attenuation;
+
+void main(void)
+{	
+  normal = gl_NormalMatrix * gl_Normal;
+
+  vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
+  light_direction = vec3(gl_LightSource[0].position.xyz - vVertex);
+  eye_position = -vVertex;
+	
+  float d = length(light_direction);
+	
+  attenuation = 1.0 / ( gl_LightSource[0].constantAttenuation + 
+                (gl_LightSource[0].linearAttenuation*d) + 
+                (gl_LightSource[0].quadraticAttenuation*d*d) );
+
+  gl_Position = ftransform();		
+}
diff --git a/examples/glsl/velvet.fsh b/examples/glsl/velvet.fsh
new file mode 100644
index 0000000..59c8adb
--- /dev/null
+++ b/examples/glsl/velvet.fsh
@@ -0,0 +1,53 @@
+// Based on Velvet shader from ATI RenderMonkey Fabric project
+// http://developer.amd.com/gpu/rendermonkey/
+
+varying vec3 eye_position;
+varying vec3 eye_normal;
+varying vec4 global_ambient;
+varying vec4 light_pos;
+varying vec4 light_color;
+varying vec4 base_color;
+
+const vec4 sheen = vec4(0.8137, 0.8137, 0.8137, 1.0); 
+const vec4 shiny = vec4(0.1267, 0.1267, 0.1267, 1.0);
+const vec4 Ka = vec4(0.23, 0.23, 0.23, 1.0);
+const vec4 Kd = vec4(0.43, 0.43, 0.43, 1.0);
+
+const float roughness = 0.1;
+const float edginess = 20.5;
+const float backscatter = 0.1;
+
+vec4 diffuse(vec3 Neye, vec3 Peye)
+{
+   // Compute normalized vector from vertex to light in eye space  (Leye)
+   vec3 Leye = (vec3(light_pos) - Peye) / length(vec3(light_pos) - Peye);
+
+   float NdotL = dot(Neye, Leye);
+
+   // N.L
+   return vec4(NdotL, NdotL, NdotL, NdotL);
+}
+
+void main(void)
+{
+   vec3 Nf = normalize(eye_normal);           // Normalized normal vector
+   vec3 Veye = -(eye_position / length(eye_position));  // Normalized eye vector
+
+   // For every light do the following:
+
+   // Hemisphere
+   vec3 Leye = ( vec3(light_pos) - eye_position) / length( vec3(light_pos) - eye_position);             // Leye for a given light
+
+   // Retroreflective lobe
+   float cosine = clamp(dot(Leye, Veye), 0.0, 1.0);
+   
+   vec4 local_shiny = shiny + pow (cosine, 1.0 / roughness ) * backscatter * light_color * sheen;
+
+   // Horizon scattering
+   cosine     = clamp (dot(Nf, Veye), 0.0, 1.0);
+   float sine = sqrt (1.0 - (cosine * cosine));
+   local_shiny += pow (sine, edginess) * dot(Leye, Nf) * light_color * sheen;
+
+   // Add in diffuse color and return
+   gl_FragColor = (Ka*global_ambient + Kd*diffuse(eye_normal, eye_position)) * base_color + local_shiny;
+}
\ No newline at end of file
diff --git a/examples/glsl/velvet.vsh b/examples/glsl/velvet.vsh
new file mode 100644
index 0000000..6181a33
--- /dev/null
+++ b/examples/glsl/velvet.vsh
@@ -0,0 +1,21 @@
+// Based on Velvet shader from ATI RenderMonkey Fabric project
+// http://developer.amd.com/gpu/rendermonkey/
+
+varying vec3 eye_position;
+varying vec3 eye_normal;
+varying vec4 global_ambient;
+varying vec4 light_pos;
+varying vec4 light_color;
+varying vec4 base_color;
+
+void main(void)
+{
+  gl_Position = ftransform();
+   
+  eye_position = vec3(gl_ModelViewMatrix * gl_Vertex);
+  eye_normal = gl_NormalMatrix * gl_Normal;
+  global_ambient = gl_LightModel.ambient * gl_FrontMaterial.ambient;
+  light_pos = gl_LightSource[0].position;
+  light_color = gl_LightSource[0].diffuse;
+  base_color = gl_FrontMaterial.diffuse;
+}
diff --git a/examples/logo-g.c b/examples/logo-g.h
similarity index 100%
rename from examples/logo-g.c
rename to examples/logo-g.h
diff --git a/examples/logo-k.c b/examples/logo-k.h
similarity index 100%
rename from examples/logo-k.c
rename to examples/logo-k.h
diff --git a/examples/logo-model.c b/examples/logo-model.c
index 604865a..0058175 100644
--- a/examples/logo-model.c
+++ b/examples/logo-model.c
@@ -12,7 +12,13 @@
 #include <windows.h>
 #endif
 
+#include <gdkconfig.h>
+
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
+#endif
 
 #include "logo-model.h"
 
@@ -163,7 +169,7 @@ logo_draw_triangle (GLfloat *v0,
 }
 
 /* AC3D triangle data */
-#include "logo-g.c"
+#include "logo-g.h"
 
 void
 logo_draw_g (void)
@@ -177,7 +183,7 @@ logo_draw_g (void)
 }
 
 /* AC3D triangle data */
-#include "logo-t.c"
+#include "logo-t.h"
 
 void
 logo_draw_t (void)
@@ -191,7 +197,7 @@ logo_draw_t (void)
 }
 
 /* AC3D triangle data */
-#include "logo-k.c"
+#include "logo-k.h"
 
 void
 logo_draw_k (void)
diff --git a/examples/logo-t.c b/examples/logo-t.h
similarity index 100%
rename from examples/logo-t.c
rename to examples/logo-t.h
diff --git a/examples/logo.c b/examples/logo.c
index a7fa396..274ddad 100644
--- a/examples/logo.c
+++ b/examples/logo.c
@@ -19,8 +19,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
+#endif
 
 #include "logo-model.h"
 #include "trackball.h"
@@ -221,13 +224,18 @@ configure_event (GtkWidget         *widget,
 		 GdkEventConfigure *event,
 		 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
   GLfloat aspect;
 
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
+
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
@@ -372,13 +380,18 @@ motion_notify_event (GtkWidget      *widget,
 		     GdkEventMotion *event,
 		     gpointer        data)
 {
-  float w = widget->allocation.width;
-  float h = widget->allocation.height;
+  GtkAllocation allocation;
+  float w;
+  float h;
   float x = event->x;
   float y = event->y;
   float d_quat[4];
   gboolean redraw = FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
+
   /* Rotation. */
   if (event->state & GDK_BUTTON1_MASK)
     {
@@ -406,7 +419,7 @@ motion_notify_event (GtkWidget      *widget,
   begin_y = y;
 
   if (redraw && !animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
 
   return TRUE;
 }
@@ -437,11 +450,17 @@ key_press_event (GtkWidget   *widget,
 static gboolean
 timeout (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
+
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously. */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -509,6 +528,7 @@ visibility_notify_event (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -518,20 +538,25 @@ toggle_animation (GtkWidget *widget)
   else
     {
       timeout_remove (widget);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
 static void
 init_logo_view (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   init_logo_quat ();
   init_view ();
   mode = 0;
   counter = 0;
 
   if (!animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    {
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
+    }
 }
 
 /* For popup menu. */
diff --git a/examples/low-level.c b/examples/low-level.c
index 567b0f0..d6231e1 100644
--- a/examples/low-level.c
+++ b/examples/low-level.c
@@ -16,8 +16,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 static GdkGLConfig *glconfig = NULL;
 static GdkGLWindow *glwindow = NULL;
@@ -37,20 +41,24 @@ static void
 realize (GtkWidget *widget,
          gpointer   data)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   GLUquadricObj *qobj;
   static GLfloat light_diffuse[] = {1.0, 0.0, 0.0, 1.0};
   static GLfloat light_position[] = {1.0, 1.0, 1.0, 0.0};
 
+  window = gtk_widget_get_window (widget);
+
   /*
    * Create GdkGLWindow for widget->window.
    */
 
   glwindow = gdk_gl_window_new (glconfig,
-                                widget->window,
+                                window,
                                 NULL);
 
   /* Set a background of "None" on window to avoid AIX X server crash */
-  gdk_window_set_back_pixmap (widget->window, NULL, FALSE);
+  gdk_window_set_back_pixmap (window, NULL, FALSE);
 
   /*
    * Create OpenGL rendering context.
@@ -91,8 +99,9 @@ realize (GtkWidget *widget,
   glClearColor (1.0, 1.0, 1.0, 1.0);
   glClearDepth (1.0);
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-	      widget->allocation.width, widget->allocation.height);
+	      allocation.width, allocation.height);
 
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
@@ -125,6 +134,8 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
+
   /* gtk_drawing_area sends configure_event when it is realized. */
   if (glwindow == NULL)
     return FALSE;
@@ -134,8 +145,9 @@ configure_event (GtkWidget         *widget,
   if (!gdk_gl_drawable_gl_begin (GDK_GL_DRAWABLE (glwindow), glcontext))
     return FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-	      widget->allocation.width, widget->allocation.height);
+	      allocation.width, allocation.height);
 
   gdk_gl_drawable_gl_end (GDK_GL_DRAWABLE (glwindow));
 
diff --git a/examples/lw.h b/examples/lw.h
index 407aa19..6ef0621 100644
--- a/examples/lw.h
+++ b/examples/lw.h
@@ -27,7 +27,13 @@
 #include <windows.h>
 #endif
 
+#include <gdk/gdkglext-config.h>
+
+#ifdef GDKGLEXT_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
+#endif
 
 #define LW_MAX_POINTS   200
 #define LW_MAX_NAME_LEN 500
diff --git a/examples/multiarb.c b/examples/multiarb.c
index 0e7fd3e..c5192ed 100644
--- a/examples/multiarb.c
+++ b/examples/multiarb.c
@@ -21,7 +21,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
+#include <GL/glu.h>
+#endif
 
 #include "readtex.h"
 
@@ -173,14 +178,17 @@ reshape (GtkWidget         *widget,
 	 GdkEventConfigure *event,
 	 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
 
-  glViewport (0, 0, widget->allocation.width, widget->allocation.height);
+  glViewport (0, 0, allocation.width, allocation.height);
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
   glFrustum (-1.0, 1.0, -1.0, 1.0, 10.0, 100.0);
@@ -262,8 +270,13 @@ display (GtkWidget      *widget,
 static gboolean
 timeout (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   GLint i;
 
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   drift += 0.05;
   if (drift >= 1.0)
     drift = 0.0;
@@ -293,10 +306,10 @@ timeout (GtkWidget *widget)
   glMatrixMode (GL_MODELVIEW);
 
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously. */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -364,6 +377,7 @@ visible (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -373,7 +387,8 @@ toggle_animation (GtkWidget *widget)
   else
     {
       timeout_remove (widget);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
@@ -396,6 +411,7 @@ key (GtkWidget   *widget,
      GdkEventKey *event,
      gpointer     data)
 {
+  GtkAllocation allocation;
   float step = 3.0;
 
   switch (event->keyval)
@@ -423,7 +439,10 @@ key (GtkWidget   *widget,
     }
 
   if (!animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    {
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
+    }
 
   return TRUE;
 }
diff --git a/examples/pixmap-mixed.c b/examples/pixmap-mixed.c
index 2346afd..7045053 100644
--- a/examples/pixmap-mixed.c
+++ b/examples/pixmap-mixed.c
@@ -16,8 +16,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 static GdkGLConfig *glconfig = NULL;
 static GdkGLContext *glcontext = NULL;
@@ -62,9 +66,12 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLDrawable *gldrawable;
   static gboolean is_initialized = FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   /*
    * Create an OpenGL off-screen rendering area.
    */
@@ -72,9 +79,9 @@ configure_event (GtkWidget         *widget,
   if (pixmap != NULL)
     g_object_unref (G_OBJECT (pixmap));
 
-  pixmap = gdk_pixmap_new (widget->window,
-			   widget->allocation.width,
-			   widget->allocation.height,
+  pixmap = gdk_pixmap_new (gtk_widget_get_window (widget),
+			   allocation.width,
+			   allocation.height,
                            -1);
 
   /*
@@ -117,7 +124,7 @@ configure_event (GtkWidget         *widget,
     }
 
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
@@ -126,12 +133,12 @@ configure_event (GtkWidget         *widget,
 
   /* GDK rendering. */
   gdk_draw_rectangle (GDK_DRAWABLE (gldrawable),
-		      widget->style->black_gc,
+		      gtk_widget_get_style (widget)->black_gc,
 		      TRUE,
-		      widget->allocation.width/10,
-		      widget->allocation.height/10,
-		      widget->allocation.width*8/10,
-		      widget->allocation.height*8/10);
+		      allocation.width/10,
+		      allocation.height/10,
+		      allocation.width*8/10,
+		      allocation.height*8/10);
 
   /* Sync. */
   gdk_gl_drawable_wait_gdk (gldrawable);
@@ -153,8 +160,12 @@ expose_event (GtkWidget      *widget,
               GdkEventExpose *event,
               gpointer        data)
 {
-  gdk_draw_drawable (widget->window,
-		     widget->style->fg_gc[GTK_WIDGET_STATE (widget)],
+  GtkStyle *style;
+
+  style = gtk_widget_get_style (widget);
+
+  gdk_draw_drawable (gtk_widget_get_window (widget),
+		     style->fg_gc[gtk_widget_get_state (widget)],
 		     pixmap,
 		     event->area.x, event->area.y,
 		     event->area.x, event->area.y,
diff --git a/examples/pixmap.c b/examples/pixmap.c
index 10e6fc1..3644211 100644
--- a/examples/pixmap.c
+++ b/examples/pixmap.c
@@ -16,8 +16,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 static GdkGLConfig *glconfig = NULL;
 static GdkGLContext *glcontext = NULL;
@@ -62,9 +66,12 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLDrawable *gldrawable;
   static gboolean is_initialized = FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   /*
    * Create an OpenGL off-screen rendering area.
    */
@@ -72,9 +79,9 @@ configure_event (GtkWidget         *widget,
   if (pixmap != NULL)
     g_object_unref (G_OBJECT (pixmap));
 
-  pixmap = gdk_pixmap_new (widget->window,
-			   widget->allocation.width,
-			   widget->allocation.height,
+  pixmap = gdk_pixmap_new (gtk_widget_get_window (widget),
+			   allocation.width,
+			   allocation.height,
                            -1);
 
   /*
@@ -117,7 +124,7 @@ configure_event (GtkWidget         *widget,
     }
 
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
@@ -136,8 +143,8 @@ expose_event (GtkWidget      *widget,
               GdkEventExpose *event,
               gpointer        data)
 {
-  gdk_draw_drawable (widget->window,
-		     widget->style->fg_gc[GTK_WIDGET_STATE (widget)],
+  gdk_draw_drawable (gtk_widget_get_window (widget),
+		     gtk_widget_get_style (widget)->fg_gc[gtk_widget_get_state (widget)],
 		     pixmap,
 		     event->area.x, event->area.y,
 		     event->area.x, event->area.y,
diff --git a/examples/readtex.c b/examples/readtex.c
index ecb91b5..51cffa9 100644
--- a/examples/readtex.c
+++ b/examples/readtex.c
@@ -12,8 +12,14 @@
 #include <windows.h>
 #endif
 
+#include <gdkconfig.h>
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
+
 #include <stdio.h>
 #include <stdlib.h> 
 #include <string.h>
diff --git a/examples/readtex.h b/examples/readtex.h
index 8e544f1..461e83b 100644
--- a/examples/readtex.h
+++ b/examples/readtex.h
@@ -4,7 +4,12 @@
 #define READTEX_H
 
 
+#include <gdkconfig.h>
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
+#endif
 
 
 extern GLboolean
diff --git a/examples/rotating-square.c b/examples/rotating-square.c
index bc551a7..3b038ef 100644
--- a/examples/rotating-square.c
+++ b/examples/rotating-square.c
@@ -34,8 +34,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
+#endif
 
 
 /**************************************************************************
@@ -111,11 +114,16 @@ configure_event (GtkWidget         *widget,
 		 GdkEventConfigure *event,
 		 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
@@ -179,14 +187,20 @@ expose_event (GtkWidget      *widget,
 static gboolean
 idle (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
+
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   spin += 2.0;
   if (spin > 360.0) spin -= 360.0;
 
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously. */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -252,6 +266,12 @@ key_press_event (GtkWidget   *widget,
 		 GdkEventKey *event,
 		 gpointer     data)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
+
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   switch (event->keyval)
     {
     case GDK_Left:
@@ -260,7 +280,7 @@ key_press_event (GtkWidget   *widget,
 	{
 	  spin += 2.0;
 	  if (spin > 360.0) spin -= 360.0;
-	  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+	  gdk_window_invalidate_rect (window, &allocation, FALSE);
 	}
       break;
 
@@ -270,7 +290,7 @@ key_press_event (GtkWidget   *widget,
 	{
 	  spin -= 2.0;
 	  if (spin < 360.0) spin += 360.0;
-	  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+	  gdk_window_invalidate_rect (window, &allocation, FALSE);
 	}
       break;
 
@@ -398,6 +418,7 @@ visibility_notify_event (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -407,7 +428,8 @@ toggle_animation (GtkWidget *widget)
   else
     {
       idle_remove (widget);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
diff --git a/examples/scribble-gl.c b/examples/scribble-gl.c
index 8dff46f..9d650aa 100644
--- a/examples/scribble-gl.c
+++ b/examples/scribble-gl.c
@@ -32,9 +32,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
-
+#endif
 
 /**************************************************************************
  * The following section contains all the macro definitions.
@@ -118,13 +120,18 @@ configure_event (GtkWidget         *widget,
 		 GdkEventConfigure *event,
 		 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
   guint count;
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
@@ -207,16 +214,18 @@ motion_notify_event (GtkWidget      *widget,
 		     GdkEventMotion *event,
 		     gpointer        data)
 {
+  GtkAllocation allocation;
   Point* coord=NULL;
 
   if (event->state & GDK_BUTTON1_MASK)
     {
+      gtk_widget_get_allocation (widget, &allocation);
       coord = g_malloc(sizeof(Point));
       coord->x = event->x;
-      coord->y = widget->allocation.height - event->y;
+      coord->y = allocation.height - event->y;
 
       brushStrokeList = g_list_append(brushStrokeList, coord);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
       return TRUE;
     }
 
@@ -233,16 +242,18 @@ button_press_event (GtkWidget      *widget,
 		    GdkEventButton *event,
 		    gpointer        data)
 {
+  GtkAllocation allocation;
   Point* coord=NULL;
 
   if (event->button == 1)
     {
+      gtk_widget_get_allocation (widget, &allocation);
       coord = g_malloc(sizeof(Point));
       coord->x = event->x;
-      coord->y = widget->allocation.height - event->y;
+      coord->y = allocation.height - event->y;
 
       brushStrokeList = g_list_append(brushStrokeList, coord);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
       return TRUE;
     }
 
diff --git a/examples/shapes.c b/examples/shapes.c
index c31db2e..d2b9084 100644
--- a/examples/shapes.c
+++ b/examples/shapes.c
@@ -18,10 +18,14 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
+#endif
 
 #include "trackball.h"
+#include "drawshapes.h"
 
 #define DIG_2_RAD (G_PI / 180.0)
 #define RAD_2_DIG (180.0 / G_PI)
@@ -198,32 +202,32 @@ realize (GtkWidget *widget,
 
   /* Cube */
   glNewList (shape_list_base + shape_cube, GL_COMPILE);
-    gdk_gl_draw_cube (TRUE, 1.5);
+    draw_cube (TRUE, 1.5);
   glEndList ();
 
   /* Sphere */
   glNewList (shape_list_base + shape_sphere, GL_COMPILE);
-    gdk_gl_draw_sphere (TRUE, 1.0, 30, 30);
+    draw_sphere (TRUE, 1.0, 30, 30);
   glEndList ();
 
   /* Cone */
   glNewList (shape_list_base + shape_cone, GL_COMPILE);
     glPushMatrix ();
       glTranslatef (0.0, 0.0, -1.0);
-      gdk_gl_draw_cone (TRUE, 1.0, 2.0, 30, 30);
+      draw_cone (TRUE, 1.0, 2.0, 30, 30);
     glPopMatrix ();
   glEndList ();
 
   /* Torus */
   glNewList (shape_list_base + shape_torus, GL_COMPILE);
-    gdk_gl_draw_torus (TRUE, 0.4, 0.8, 30, 30);
+    draw_torus (TRUE, 0.4, 0.8, 30, 30);
   glEndList ();
 
   /* Tetrahedron */
   glNewList (shape_list_base + shape_tetrahedron, GL_COMPILE);
     glPushMatrix ();
       glScalef (1.2, 1.2, 1.2);
-      gdk_gl_draw_tetrahedron (TRUE);
+      draw_tetrahedron (TRUE);
     glPopMatrix ();
   glEndList ();
 
@@ -231,7 +235,7 @@ realize (GtkWidget *widget,
   glNewList (shape_list_base + shape_octahedron, GL_COMPILE);
     glPushMatrix ();
       glScalef (1.2, 1.2, 1.2);
-      gdk_gl_draw_octahedron (TRUE);
+      draw_octahedron (TRUE);
     glPopMatrix ();
   glEndList ();
 
@@ -239,7 +243,7 @@ realize (GtkWidget *widget,
   glNewList (shape_list_base + shape_dodecahedron, GL_COMPILE);
     glPushMatrix ();
       glScalef (0.7, 0.7, 0.7);
-      gdk_gl_draw_dodecahedron (TRUE);
+      draw_dodecahedron (TRUE);
     glPopMatrix ();
   glEndList ();
 
@@ -247,13 +251,13 @@ realize (GtkWidget *widget,
   glNewList (shape_list_base + shape_icosahedron, GL_COMPILE);
     glPushMatrix ();
       glScalef (1.2, 1.2, 1.2);
-      gdk_gl_draw_icosahedron (TRUE);
+      draw_icosahedron (TRUE);
     glPopMatrix ();
   glEndList ();
 
   /* Teapot */
   glNewList (shape_list_base + shape_teapot, GL_COMPILE);
-    gdk_gl_draw_teapot (TRUE, 1.0);
+    draw_teapot (TRUE, 1.0);
   glEndList ();
 
   gdk_gl_drawable_gl_end (gldrawable);
@@ -267,13 +271,18 @@ configure_event (GtkWidget         *widget,
 		 GdkEventConfigure *event,
 		 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
   GLfloat aspect;
 
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
+
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
@@ -398,12 +407,17 @@ motion_notify_event (GtkWidget      *widget,
 		     GdkEventMotion *event,
 		     gpointer        data)
 {
-  float w = widget->allocation.width;
-  float h = widget->allocation.height;
+  GtkAllocation allocation;
+  float w;
+  float h;
   float x = event->x;
   float y = event->y;
   gboolean redraw = FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
+
   /* Rotation. */
   if (event->state & GDK_BUTTON1_MASK)
     {
@@ -435,7 +449,7 @@ motion_notify_event (GtkWidget      *widget,
   begin_y = y;
 
   if (redraw && !animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
 
   return TRUE;
 }
@@ -461,11 +475,17 @@ key_press_event (GtkWidget   *widget,
 static gboolean
 idle (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
+
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously. */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -535,6 +555,7 @@ visibility_notify_event (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -548,7 +569,8 @@ toggle_animation (GtkWidget *widget)
       view_quat_diff[1] = 0.0;
       view_quat_diff[2] = 0.0;
       view_quat_diff[3] = 1.0;
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
diff --git a/examples/share-lists.c b/examples/share-lists.c
index c2b598f..b994d08 100644
--- a/examples/share-lists.c
+++ b/examples/share-lists.c
@@ -16,8 +16,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 static GLfloat red[]    = {1.0, 0.0, 0.0, 1.0};
 static GLfloat yellow[] = {1.0, 1.0, 0.0, 1.0};
@@ -99,6 +103,7 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -106,8 +111,9 @@ configure_event (GtkWidget         *widget,
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   gdk_gl_drawable_gl_end (gldrawable);
   /*** OpenGL END ***/
diff --git a/examples/simple-mixed.c b/examples/simple-mixed.c
index f758b12..b88d407 100644
--- a/examples/simple-mixed.c
+++ b/examples/simple-mixed.c
@@ -16,13 +16,18 @@
 #include <windows.h>
 #endif
 
+#ifdef GDKGLEXT_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 static void
 realize (GtkWidget *widget,
          gpointer   data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -49,8 +54,9 @@ realize (GtkWidget *widget,
   glClearColor (1.0, 1.0, 1.0, 1.0);
   glClearDepth (1.0);
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
@@ -72,6 +78,7 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -79,8 +86,9 @@ configure_event (GtkWidget         *widget,
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   gdk_gl_drawable_gl_end (gldrawable);
   /*** OpenGL END ***/
@@ -93,9 +101,12 @@ expose_event (GtkWidget      *widget,
               GdkEventExpose *event,
               gpointer        data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
@@ -107,12 +118,12 @@ expose_event (GtkWidget      *widget,
 
   /* GDK rendering. */
   gdk_draw_rectangle (GDK_DRAWABLE (gldrawable),
-		      widget->style->black_gc,
+		      gtk_widget_get_style (widget)->black_gc,
 		      TRUE,
-		      widget->allocation.width/10,
-		      widget->allocation.height/10,
-		      widget->allocation.width*8/10,
-		      widget->allocation.height*8/10);
+		      allocation.width/10,
+		      allocation.height/10,
+		      allocation.width*8/10,
+		      allocation.height*8/10);
 
   /* Sync. */
   gdk_gl_drawable_wait_gdk (gldrawable);
diff --git a/examples/simple-pbuffer-sgix.c b/examples/simple-pbuffer-sgix.c
index 071b500..d61a479 100644
--- a/examples/simple-pbuffer-sgix.c
+++ b/examples/simple-pbuffer-sgix.c
@@ -24,6 +24,7 @@ static void
 realize (GtkWidget *widget,
          gpointer   data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -50,8 +51,9 @@ realize (GtkWidget *widget,
   glClearColor (1.0, 1.0, 1.0, 1.0);
   glClearDepth (1.0);
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
@@ -73,15 +75,18 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin (gldrawable, glcontext))
     return FALSE;
 
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   gdk_gl_drawable_gl_end (gldrawable);
   /*** OpenGL END ***/
@@ -168,6 +173,7 @@ static void
 render_to_file (GtkButton *button,
                 GtkWidget *widget)
 {
+  GtkAllocation allocation;
   GdkGLConfig *glconfig;
   Display *xdisplay;
   XVisualInfo *xvinfo;
@@ -206,8 +212,9 @@ render_to_file (GtkButton *button,
    * Create GLXPbuffer.
    */
 
-  width = widget->allocation.width;
-  height = widget->allocation.height;
+  gtk_widget_get_allocation (widget, &allocation);
+  width = allocation.width;
+  height = allocation.height;
 
   g_print ("- create GLXPbuffer\n");
   pbuffer = pb->glXCreateGLXPbufferSGIX (xdisplay, fbconfig,
diff --git a/examples/simple.c b/examples/simple.c
index 597fbaa..3c0ea98 100644
--- a/examples/simple.c
+++ b/examples/simple.c
@@ -16,13 +16,18 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 static void
 realize (GtkWidget *widget,
          gpointer   data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -49,8 +54,9 @@ realize (GtkWidget *widget,
   glClearColor (1.0, 1.0, 1.0, 1.0);
   glClearDepth (1.0);
 
+  gtk_widget_get_allocation (widget, &allocation);
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ();
@@ -72,6 +78,7 @@ configure_event (GtkWidget         *widget,
                  GdkEventConfigure *event,
                  gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
@@ -80,7 +87,7 @@ configure_event (GtkWidget         *widget,
     return FALSE;
 
   glViewport (0, 0,
-              widget->allocation.width, widget->allocation.height);
+              allocation.width, allocation.height);
 
   gdk_gl_drawable_gl_end (gldrawable);
   /*** OpenGL END ***/
diff --git a/examples/template.c b/examples/template.c
index 6827fa0..b469748 100644
--- a/examples/template.c
+++ b/examples/template.c
@@ -42,9 +42,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDKGLEXT_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
-#include <GL/glu.h>
-
+#endif
 
 /**************************************************************************
  * The following section contains all the macro definitions.
@@ -123,11 +125,16 @@ configure_event (GtkWidget         *widget,
 		 GdkEventConfigure *event,
 		 gpointer           data)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext = gtk_widget_get_gl_context (widget);
   GdkGLDrawable *gldrawable = gtk_widget_get_gl_drawable (widget);
 
-  GLfloat w = widget->allocation.width;
-  GLfloat h = widget->allocation.height;
+  GLfloat w;
+  GLfloat h;
+
+  gtk_widget_get_allocation (widget, &allocation);
+  w = allocation.width;
+  h = allocation.height;
 
   g_print ("%s: \"configure_event\"\n", gtk_widget_get_name (widget));
 
@@ -188,15 +195,20 @@ expose_event (GtkWidget      *widget,
 static gboolean
 timeout (GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   g_print (".");
 
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   /*** Fill in the details here ***/
 
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously. */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -441,6 +453,7 @@ visibility_notify_event (GtkWidget          *widget,
 static void
 toggle_animation (GtkWidget *widget)
 {
+  GtkAllocation allocation;
   animate = !animate;
 
   if (animate)
@@ -450,7 +463,8 @@ toggle_animation (GtkWidget *widget)
   else
     {
       timeout_remove (widget);
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
diff --git a/examples/viewlw.c b/examples/viewlw.c
index a92793d..3528075 100644
--- a/examples/viewlw.c
+++ b/examples/viewlw.c
@@ -43,8 +43,12 @@
 #include <windows.h>
 #endif
 
+#ifdef GDKGLEXT_WINDOWING_QUARTZ
+#include <OpenGL/glu.h>
+#else
 #include <GL/gl.h>
 #include <GL/glu.h>
+#endif
 
 #include "trackball.h"
 #include "lw.h"
@@ -182,6 +186,7 @@ static gboolean
 configure(GtkWidget         *widget,
           GdkEventConfigure *event)
 {
+  GtkAllocation allocation;
   GdkGLContext *glcontext;
   GdkGLDrawable *gldrawable;
 
@@ -189,12 +194,13 @@ configure(GtkWidget         *widget,
 
   glcontext = gtk_widget_get_gl_context(widget);
   gldrawable = gtk_widget_get_gl_drawable(widget);
+  gtk_widget_get_allocation (widget, &allocation);
 
   /*** OpenGL BEGIN ***/
   if (!gdk_gl_drawable_gl_begin(gldrawable, glcontext))
     goto NO_GL;
 
-  glViewport (0, 0, widget->allocation.width, widget->allocation.height);
+  glViewport (0, 0, allocation.width, allocation.height);
 
   gdk_gl_drawable_gl_end(gldrawable);
   /*** OpenGL END ***/
@@ -264,13 +270,16 @@ static gboolean
 motion_notify(GtkWidget      *widget,
               GdkEventMotion *event)
 {
+  GtkAllocation allocation;
+  GdkModifierType state = 0;
   int x = 0;
   int y = 0;
-  GdkModifierType state = 0;
   float width, height;
   gboolean redraw = FALSE;
   mesh_info *info = (mesh_info*)g_object_get_data(G_OBJECT(widget), "mesh_info");
 
+  gtk_widget_get_allocation (widget, &allocation);
+
   if (event->is_hint)
     {
       // fix this!
@@ -285,8 +294,8 @@ motion_notify(GtkWidget      *widget,
       state = event->state;
     }
 
-  width = widget->allocation.width;
-  height = widget->allocation.height;
+  width = allocation.width;
+  height = allocation.height;
 
   if (state & GDK_BUTTON1_MASK)
     {
@@ -319,7 +328,10 @@ motion_notify(GtkWidget      *widget,
   info->beginy = y;
 
   if (redraw && !info->animate)
-    gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+    {
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
+    }
 
   return TRUE;
 }
@@ -327,11 +339,16 @@ motion_notify(GtkWidget      *widget,
 static gboolean
 timeout(GtkWidget *widget)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
+
+  gtk_widget_get_allocation (widget, &allocation);
+
   /* Invalidate the whole window. */
-  gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+  gdk_window_invalidate_rect (window, &allocation, FALSE);
 
   /* Update synchronously. */
-  gdk_window_process_updates (widget->window, FALSE);
+  gdk_window_process_updates (window, FALSE);
 
   return TRUE;
 }
@@ -364,6 +381,7 @@ timeout_remove(GtkWidget *widget)
 static void
 toggle_animation(GtkWidget *widget)
 {
+  GtkAllocation allocation;
   mesh_info *info = (mesh_info*)g_object_get_data(G_OBJECT(widget), "mesh_info");
 
   info->animate = !info->animate;
@@ -379,7 +397,8 @@ toggle_animation(GtkWidget *widget)
       info->dquat[1] = 0.0;
       info->dquat[2] = 0.0;
       info->dquat[3] = 1.0;
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gtk_widget_get_allocation (widget, &allocation);
+      gdk_window_invalidate_rect (gtk_widget_get_window (widget), &allocation, FALSE);
     }
 }
 
@@ -425,8 +444,13 @@ static gboolean
 key_press_event(GtkWidget   *widget,
                 GdkEventKey *event)
 {
+  GtkAllocation allocation;
+  GdkWindow *window;
   mesh_info *info = (mesh_info*)g_object_get_data(G_OBJECT(widget), "mesh_info");
 
+  window = gtk_widget_get_window (widget);
+  gtk_widget_get_allocation (widget, &allocation);
+
   switch (event->keyval)
     {
     case GDK_plus:
@@ -435,7 +459,7 @@ key_press_event(GtkWidget   *widget,
       if (info->zoom < 5.0) info->zoom = 5.0;
       if (info->zoom > 120.0) info->zoom = 120.0;
       /* zoom has changed, redraw mesh */
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gdk_window_invalidate_rect (window, &allocation, FALSE);
       break;
 
     case GDK_minus:
@@ -444,7 +468,7 @@ key_press_event(GtkWidget   *widget,
       if (info->zoom < 5.0) info->zoom = 5.0;
       if (info->zoom > 120.0) info->zoom = 120.0;
       /* zoom has changed, redraw mesh */
-      gdk_window_invalidate_rect (widget->window, &widget->allocation, FALSE);
+      gdk_window_invalidate_rect (window, &allocation, FALSE);
       break;
 
     case GDK_Escape:
@@ -631,33 +655,26 @@ show_lwobject(const char *lwobject_name)
   return TRUE;
 }
 
-static gint
-filew_ok(GtkWidget *widget,
-         GtkWidget *filew)
-{
-  if (show_lwobject(gtk_file_selection_get_filename(GTK_FILE_SELECTION(filew))) == TRUE)
-    gtk_widget_destroy(filew);
-  return TRUE;
-}
-
 static void
 select_lwobject(void)
 {
-  GtkWidget *filew = gtk_file_selection_new("Select LightWave 3D object");
-
-  g_signal_connect(G_OBJECT(GTK_FILE_SELECTION (filew)->ok_button), "clicked",
-                   G_CALLBACK(filew_ok), filew);
-
-  g_signal_connect_swapped(G_OBJECT(GTK_FILE_SELECTION(filew)->cancel_button),
-                           "clicked", G_CALLBACK(gtk_widget_destroy),
-                           filew);
-
-  g_signal_connect(G_OBJECT(filew), "destroy",
-                   G_CALLBACK(window_destroy), NULL);
-
-  window_count++;
+  GtkWidget *filew =
+    gtk_file_chooser_dialog_new("Select LightWave 3D object",
+                                NULL,
+                                GTK_FILE_CHOOSER_ACTION_OPEN,
+                                GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
+                                GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,
+                                NULL);
+
+  if (gtk_dialog_run(GTK_DIALOG(filew)) == GTK_RESPONSE_ACCEPT)
+    {
+      char * filename;
+      filename = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(filew));
+      show_lwobject(filename);
+      g_free(filename);
+    }
 
-  gtk_widget_show(filew);
+  gtk_widget_destroy(filew);
 }
 
 int
diff --git a/gdk/.gitignore b/gdk/.gitignore
new file mode 100644
index 0000000..7378cc3
--- /dev/null
+++ b/gdk/.gitignore
@@ -0,0 +1,8 @@
+gdkglenumtypes.c
+gdkglenumtypes.h
+gdkglext-config.h
+gdkglversion.h
+stamp-gdkglenumtypes-h
+stamp-gdkglext-config-h
+GdkGLExt-1.0.gir
+GdkGLExt-1.0.typelib
diff --git a/gdk/Makefile.am b/gdk/Makefile.am
index 525bfc2..7260532 100644
--- a/gdk/Makefile.am
+++ b/gdk/Makefile.am
@@ -1,41 +1,26 @@
 ## -*- Makefile -*-
 ## Makefile.am for gtkglext/gdk
 
-SUBDIRS = glext $(gdktarget)
-DIST_SUBDIRS = glext x11 win32
+SUBDIRS = $(gdktarget)
+DIST_SUBDIRS = x11 win32 quartz
+
+CLEANFILES =
 
 EXTRA_DIST = \
 	gdkglversion.h.in	\
-	gdkglext.def		\
-	gdkglext-gtk20.def
-
-if PLATFORM_WIN32
-no_undefined = -no-undefined
-endif
+	gdkglext.def
 
 if OS_WIN32
-if MULTIHEAD_SUPPORT
-gdkglext_def = gdkglext.def
-else
-gdkglext_def = gdkglext-gtk20.def
-endif
+gdkglext_def = $(srcdir)/gdkglext.def
 gdkglext_win32_symbols = -export-symbols $(gdkglext_def)
 endif
 
 if MS_LIB_AVAILABLE
-noinst_DATA = gdkglext-win32-@GTKGLEXT_API_VERSION@.lib
+mslibdir = $(libdir)
+mslib_DATA = gdkglext-win32-@GTKGLEXT_API_VERSION@.lib
 
 gdkglext-win32-@GTKGLEXT_API_VERSION@.lib: libgdkglext-win32-@GTKGLEXT_API_VERSION@.la $(gdkglext_def)
-	lib -name:libgdkglext-win32-@GTKGLEXT_API_VERSION@-@LT_CURRENT_MINUS_AGE@.dll -def:$(gdkglext_def) -out:$@
-
-install-ms-lib:
-	$(INSTALL) gdkglext-win32-@GTKGLEXT_API_VERSION@.lib $(DESTDIR)$(libdir)
-
-uninstall-ms-lib:
-	-rm $(DESTDIR)$(libdir)/gdkglext-win32-@GTKGLEXT_API_VERSION@.lib
-else
-install-ms-lib:
-uninstall-ms-lib:
+	lib -name:libgdkglext-win32-@GTKGLEXT_API_VERSION@-@GTKGLEXT_CURRENT_MINUS_AGE@.dll -def:$(gdkglext_def) -out:$@
 endif
 
 common_includes = \
@@ -43,30 +28,30 @@ common_includes = \
 	-DGDK_GL_COMPILATION		\
 	-I$(top_srcdir)			\
 	$(GTKGLEXT_DEBUG_FLAGS)		\
-	$(GDKGLEXT_DEP_CFLAGS)		\
-	-DG_DISABLE_DEPRECATED		\
-	-DGDK_DISABLE_DEPRECATED	\
-	-DGDK_PIXBUF_DISABLE_DEPRECATED
+	$(GDK_CFLAGS)			\
+	$(GTK_CFLAGS)			\
+	$(GL_CFLAGS)			\
+	$(GDKGLEXT_WIN_CFLAGS)
 
 common_ldflags = \
-	-version-info $(LT_CURRENT):$(LT_REVISION):$(LT_AGE) 	\
+	-version-info $(GTKGLEXT_CURRENT):$(GTKGLEXT_REVISION):$(GTKGLEXT_AGE) 	\
 	-export-dynamic 					\
 	-rpath $(libdir) 					\
-	$(no_undefined)						\
+	-no-undefined						\
 	@LIBTOOL_EXPORT_OPTIONS@				\
 	$(gdkglext_win32_symbols)
 
 common_libadd = \
-	$(GDKGLEXT_DEP_LIBS)
+	$(GDK_LIBS) $(GLU_LIBS) $(GDKGLEXT_WIN_LIBS)
 
 #
 # setup source file variables
 #
+gdkglext_configure_generated_public_h_source = gdkglversion.h
 
 gdkglext_public_h_sources = \
 	gdkgl.h			\
 	gdkgldefs.h		\
-	gdkglversion.h		\
 	gdkgltokens.h		\
 	gdkgltypes.h		\
 	gdkglinit.h		\
@@ -76,8 +61,6 @@ gdkglext_public_h_sources = \
 	gdkgldrawable.h		\
 	gdkglpixmap.h		\
 	gdkglwindow.h		\
-	gdkglfont.h		\
-	gdkglshapes.h		\
 	gdkglglext.h
 
 gdkglext_private_h_sources = \
@@ -95,15 +78,15 @@ gdkglext_c_sources = \
 	gdkgldrawable.c		\
 	gdkglpixmap.c		\
 	gdkglwindow.c		\
-	gdkglshapes.c		\
 	gdkglglext.c
 
 gdkglext_built_c_sources = \
 	gdkglenumtypes.c
 
 gdkglext_headers = \
-	$(gdkglext_public_h_sources)		\
-	$(gdkglext_built_public_h_sources)	\
+	$(gdkglext_public_h_sources)			\
+	$(gdkglext_built_public_h_sources)		\
+	$(gdkglext_configure_generated_public_h_source) \
 	gdkgldebug.h
 
 gdkglext_sources = \
@@ -125,63 +108,56 @@ stamp_files = \
 gdkglextincludedir = $(includedir)/gtkglext-@GTKGLEXT_API_VERSION@/gdk
 gdkglextinclude_HEADERS = $(gdkglext_headers)
 
-INCLUDES = $(common_includes)
+AM_CPPFLAGS = $(common_includes)
 
 lib_LTLIBRARIES = $(gdkglext_targetlib)
 
 EXTRA_LTLIBRARIES = \
 	libgdkglext-x11-@API_MJ@.@API_MI@.la	\
+	libgdkglext-quartz-@API_MJ@.@API_MI@.la  \
 	libgdkglext-win32-@API_MJ@.@API_MI@.la
 
 libgdkglext_x11_@API_MJ@_@API_MI@_la_SOURCES = $(gdkglext_sources)
 libgdkglext_x11_@API_MJ@_@API_MI@_la_LDFLAGS = $(common_ldflags)
 libgdkglext_x11_@API_MJ@_@API_MI@_la_LIBADD = x11/libgdkglext-x11.la $(common_libadd)
 
+libgdkglext_quartz_@API_MJ@_@API_MI@_la_SOURCES = $(gdkglext_sources)
+libgdkglext_quartz_@API_MJ@_@API_MI@_la_LDFLAGS = $(common_ldflags)
+libgdkglext_quartz_@API_MJ@_@API_MI@_la_LIBADD = quartz/libgdkglext-quartz.la $(common_libadd)
+
 libgdkglext_win32_@API_MJ@_@API_MI@_la_SOURCES = $(gdkglext_sources)
 libgdkglext_win32_@API_MJ@_@API_MI@_la_LDFLAGS = $(common_ldflags)
 libgdkglext_win32_@API_MJ@_@API_MI@_la_LIBADD = win32/libgdkglext-win32.la $(common_libadd)
 libgdkglext_win32_@API_MJ@_@API_MI@_la_DEPENDENCIES = $(gdkglext_def)
 
 BUILT_SOURCES = \
-	@REBUILD@			\
 	$(gdkglext_built_sources)
 
-DISTCLEANFILES = $(stamp_files)
+DISTCLEANFILES = $(stamp_files) $(gdkglext_configure_generated_public_h_source)
 
 MAINTAINERCLEANFILES = \
 	$(gdkglext_built_sources)
 
 # Generate built header without using automake BUILT_SOURCES
-$(libgdkglext_x11_@API_MJ@_@API_MI@_la_OBJECTS) $(libgdkglext_win32_@API_MJ@_@API_MI@_la_OBJECTS): $(gdkglext_built_public_h_sources)
-
-$(srcdir)/gdkglenumtypes.h: stamp-gdkglenumtypes-h
-	@true
-stamp-gdkglenumtypes-h: @REBUILD@ $(gdkglext_public_h_sources) Makefile
-	( cd $(srcdir) && glib-mkenums \
-			--fhead "#ifndef __GDK_GL_ENUM_TYPES_H__\n#define __GDK_GL_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n" \
-			--fprod "/* enumerations from \"@filename@\" */\n" \
-			--vhead "GType @enum_name@_get_type (void);\n#define GDK_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n" \
-			--ftail "G_END_DECLS\n\n#endif /* __GDK_GL_ENUM_TYPES_H__ */" \
-		$(gdkglext_public_h_sources) ) >> xgen-geth \
-	&& (cmp -s xgen-geth $(srcdir)/gdkglenumtypes.h || cp xgen-geth $(srcdir)/gdkglenumtypes.h ) \
-	&& rm -f xgen-geth \
-	&& echo timestamp > $(@F)
-$(srcdir)/gdkglenumtypes.c: @REBUILD@ $(gdkglext_public_h_sources) Makefile
-	( cd $(srcdir) && glib-mkenums \
-			--fhead "#include \"gdkgl.h\"" \
-			--fprod "\n/* enumerations from \"@filename@\" */" \
-			--vhead "GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n    static const G@Type@Value values[] = {" \
-			--vprod "      { @VALUENAME@, \"@VALUENAME@\", \"@valuenick@\" }," \
-			--vtail "      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static (\"@EnumName@\", values);\n  }\n  return etype;\n}\n" \
-		$(gdkglext_public_h_sources) ) > xgen-getc \
-	&& cp xgen-getc $(srcdir)/gdkglenumtypes.c  \
-	&& rm -f xgen-getc
+$(libgdkglext_x11_@API_MJ@_@API_MI@_la_OBJECTS) $(libgdkglext_quartz_@API_MJ@_@API_MI@_la_OBJECTS) $(libgdkglext_win32_@API_MJ@_@API_MI@_la_OBJECTS): $(gdkglext_built_public_h_sources)
+
+$(srcdir)/gdkglenumtypes.h: $(srcdir)/gtkglenumtypes.h.template $(gdkglext_public_h_sources) $(abs_builddir)/$(gdkglext_configure_generated_public_h_source)
+	( cd $(srcdir) && $(GLIB_MKENUMS) --template gtkglenumtypes.h.template \
+$(gdkglext_public_h_sources) $(abs_builddir)/$(gdkglext_configure_generated_public_h_source) ) >> xgen-geth \
+&& (cmp -s xgen-geth $(srcdir)/gdkglenumtypes.h || cp xgen-geth $(srcdir)/gdkglenumtypes.h ) \
+&& rm -f xgen-geth
+
+$(srcdir)/gdkglenumtypes.c: $(srcdir)/gtkglenumtypes.c.template $(gdkglext_public_h_sources) $(abs_builddir)/$(gdkglext_configure_generated_public_h_source)
+	( cd $(srcdir) && $(GLIB_MKENUMS) --template gtkglenumtypes.c.template \
+$(gdkglext_public_h_sources) $(abs_builddir)/$(gdkglext_configure_generated_public_h_source) ) > xgen-getc \
+&& cp xgen-getc $(srcdir)/gdkglenumtypes.c  \
+&& rm -f xgen-getc
 
 #
 # Rule to install gdkglext-config.h header file
 #
 configexecincludedir = $(libdir)/gtkglext-@GTKGLEXT_API_VERSION@/include
-#configexecinclude_DATA = gdkglext-config.h
+configexecinclude_DATA = gdkglext-config.h
 
 install-exec-local: gdkglext-config.h
 	$(mkinstalldirs) $(DESTDIR)$(configexecincludedir)
@@ -199,11 +175,78 @@ stamp-gdkglext-config-h: $(top_builddir)/config.status
 
 DISTCLEANFILES += gdkglext-config.h stamp-gdkglext-config-h
 
+EXTRA_DIST += \
+glext/README			\
+glext/glxext.h.patch		\
+glext/list-ext.pl		\
+glext/gen-gdkglglext-c.pl	\
+glext/gen-gdkglglext-h.pl	\
+glext/gen-gdkglglxext-c.pl	\
+glext/gen-gdkglglxext-h.pl	\
+glext/gen-gdkglwglext-c.pl	\
+glext/gen-gdkglwglext-h.pl	\
+glext/common-header.h \
+gtkglenumtypes.h.template \
+gtkglenumtypes.c.template
+
+gdkglext_glext_public_h_sources = \
+glext/glext.h		\
+glext/glxext.h	\
+glext/wglext.h	\
+glext/glext-extra.h	\
+glext/glxext-extra.h	\
+glext/wglext-extra.h
+
+gdkglextglextincludedir = $(includedir)/gtkglext-@GTKGLEXT_API_VERSION@/gdk/glext
+gdkglextglextinclude_HEADERS = $(gdkglext_glext_public_h_sources)
+
 #
-# Extra rules
+# Introspection
 #
 
-install-data-local: install-ms-lib
+-include $(INTROSPECTION_MAKEFILE)
+INTROSPECTION_GIRS =
+INTROSPECTION_SCANNER_ARGS =
+INTROSPECTION_COMPILER_ARGS = --includedir=$(srcdir)
+
+if HAVE_INTROSPECTION
+introspection_sources = \
+	$(filter-out gdkgldebug.h gdkglglext.h, $(gdkglext_headers)) \
+	$(gdkglext_c_sources) \
+	$(gdkglext_built_c_sources)
 
-uninstall-local: uninstall-ms-lib
+if USE_X11
+introspection_sources += \
+	x11/gdkglconfig-x11.c	\
+	x11/gdkglcontext-x11.c	\
+	x11/gdkgldrawable-x11.c	\
+	x11/gdkgloverlay-x11.c	\
+	x11/gdkglpixmap-x11.c	\
+	x11/gdkglquery-x11.c	\
+	x11/gdkglwindow-x11.c
+endif # USE_X11
+
+GdkGLExt-1.0.gir: $(gdkglext_targetlib)
+GdkGLExt_1_0_gir_INCLUDES = Gdk-3.0
+GdkGLExt_1_0_gir_SCANNERFLAGS = \
+	--warn-all \
+	--identifier-prefix=GdkGL \
+	--symbol-prefix=gdk_gl \
+	--symbol-prefix=gdk
+GdkGLExt_1_0_gir_CFLAGS = $(common_includes)
+GdkGLExt_1_0_gir_LIBS = $(gdkglext_targetlib)
+GdkGLExt_1_0_gir_FILES = $(introspection_sources)
+INTROSPECTION_GIRS += GdkGLExt-1.0.gir
+
+girdir = $(datadir)/gir-1.0
+gir_DATA = $(INTROSPECTION_GIRS)
+
+typelibdir = $(libdir)/girepository-1.0
+typelib_DATA = $(INTROSPECTION_GIRS:.gir=.typelib)
+
+CLEANFILES += $(gir_DATA) $(typelib_DATA)
+endif # HAVE_INTROSPECTION
 
+#
+# Extra rules
+#
diff --git a/gdk/gdkgl.h b/gdk/gdkgl.h
index f22a31c..2c107b5 100644
--- a/gdk/gdkgl.h
+++ b/gdk/gdkgl.h
@@ -33,7 +33,5 @@
 #include <gdk/gdkgldrawable.h>
 #include <gdk/gdkglpixmap.h>
 #include <gdk/gdkglwindow.h>
-#include <gdk/gdkglfont.h>
-#include <gdk/gdkglshapes.h>
 
 #endif /* __GDK_GL_H__ */
diff --git a/gdk/gdkglconfig.c b/gdk/gdkglconfig.c
index 7743d05..3d30b7c 100644
--- a/gdk/gdkglconfig.c
+++ b/gdk/gdkglconfig.c
@@ -16,45 +16,24 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglprivate.h"
 #include "gdkglconfig.h"
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-#include <gdk/gdkscreen.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
+#include <gdk/gdk.h>
 
 gboolean _gdk_gl_config_no_standard_colormap = FALSE;
 
-static void gdk_gl_config_class_init (GdkGLConfigClass *klass);
-static void gdk_gl_config_finalize   (GObject          *object);
-
-static gpointer parent_class = NULL;
+G_DEFINE_TYPE (GdkGLConfig,     \
+               gdk_gl_config,   \
+               G_TYPE_OBJECT)
 
-GType
-gdk_gl_config_get_type (void)
+static void
+gdk_gl_config_init (GdkGLConfig *self)
 {
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLConfigClass),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_config_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLConfig),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (G_TYPE_OBJECT,
-                                     "GdkGLConfig",
-                                     &type_info, 0);
-    }
-
-  return type;
 }
 
 static void
@@ -63,18 +42,6 @@ gdk_gl_config_class_init (GdkGLConfigClass *klass)
   GObjectClass *object_class = G_OBJECT_CLASS (klass);
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_config_finalize;
-}
-
-static void
-gdk_gl_config_finalize (GObject *object)
-{
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
 }
 
 static GdkGLConfig *
@@ -123,11 +90,7 @@ gdk_gl_config_new_ci (GdkScreen       *screen,
       /* XXX Assumes list[1] is where GDK_GL_BUFFER_SIZE parameter is. */
       list[1] = buf_size_list[i];
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
       glconfig = gdk_gl_config_new_for_screen (screen, list);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-      glconfig = gdk_gl_config_new (list);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
       if (glconfig != NULL)
         return glconfig;
@@ -189,11 +152,7 @@ gdk_gl_config_new_rgb (GdkScreen       *screen,
     }
   list[n] = GDK_GL_ATTRIB_LIST_NONE;
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   return gdk_gl_config_new_for_screen (screen, list);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  return gdk_gl_config_new (list);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 }
 
 static GdkGLConfig *
@@ -244,17 +203,11 @@ gdk_gl_config_new_by_mode (GdkGLConfigMode mode)
 {
   GdkScreen *screen;
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   screen = gdk_screen_get_default ();
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  screen = NULL;
-#endif
 
   return gdk_gl_config_new_by_mode_common (screen, mode);
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 /**
  * gdk_gl_config_new_by_mode_for_screen:
  * @screen: target screen.
@@ -272,8 +225,6 @@ gdk_gl_config_new_by_mode_for_screen (GdkScreen       *screen,
   return gdk_gl_config_new_by_mode_common (screen, mode);
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 /**
  * gdk_gl_config_get_layer_plane:
  * @glconfig: a #GdkGLConfig.
diff --git a/gdk/gdkglconfig.h b/gdk/gdkglconfig.h
index 0698abc..d877b0e 100644
--- a/gdk/gdkglconfig.h
+++ b/gdk/gdkglconfig.h
@@ -22,7 +22,7 @@
 #include <gdk/gdkgldefs.h>
 #include <gdk/gdkgltypes.h>
 
-#include <gdk/gdkwindow.h>
+#include <gdk/gdk.h>
 
 G_BEGIN_DECLS
 
@@ -84,19 +84,15 @@ GType        gdk_gl_config_get_type               (void);
 GdkGLConfig *gdk_gl_config_new                    (const int       *attrib_list);
 #endif /* GDK_MULTIHEAD_SAFE */
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
 GdkGLConfig *gdk_gl_config_new_for_screen         (GdkScreen       *screen,
                                                    const int       *attrib_list);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
 #ifndef GDK_MULTIHEAD_SAFE
 GdkGLConfig *gdk_gl_config_new_by_mode            (GdkGLConfigMode  mode);
 #endif /* GDK_MULTIHEAD_SAFE */
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
 GdkGLConfig *gdk_gl_config_new_by_mode_for_screen (GdkScreen       *screen,
                                                    GdkGLConfigMode  mode);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
 GdkScreen   *gdk_gl_config_get_screen             (GdkGLConfig     *glconfig);
 
diff --git a/gdk/gdkglcontext.c b/gdk/gdkglcontext.c
index 9ec0189..621b103 100644
--- a/gdk/gdkglcontext.c
+++ b/gdk/gdkglcontext.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglprivate.h"
 #include "gdkgldrawable.h"
 #include "gdkglconfig.h"
@@ -23,36 +27,13 @@
 
 gboolean _gdk_gl_context_force_indirect = FALSE;
 
-static void gdk_gl_context_class_init (GdkGLContextClass *klass);
-static void gdk_gl_context_finalize   (GObject           *object);
-
-static gpointer parent_class = NULL;
+G_DEFINE_TYPE (GdkGLContext,    \
+               gdk_gl_context,  \
+               G_TYPE_OBJECT)
 
-GType
-gdk_gl_context_get_type (void)
+static void
+gdk_gl_context_init (GdkGLContext *self)
 {
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLContextClass),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_context_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLContext),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (G_TYPE_OBJECT,
-                                     "GdkGLContext",
-                                     &type_info, 0);
-    }
-
-  return type;
 }
 
 static void
@@ -61,24 +42,12 @@ gdk_gl_context_class_init (GdkGLContextClass *klass)
   GObjectClass *object_class = G_OBJECT_CLASS (klass);
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_context_finalize;
-}
-
-static void
-gdk_gl_context_finalize (GObject *object)
-{
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
 }
 
 /**
  * gdk_gl_context_new:
  * @gldrawable: a #GdkGLDrawable.
- * @share_list: the #GdkGLContext with which to share display lists and texture
+ * @share_list: (allow-none): the #GdkGLContext with which to share display lists and texture
  *              objects. NULL indicates that no sharing is to take place.
  * @direct: whether rendering is to be done with a direct connection to
  *          the graphics system.
@@ -102,19 +71,3 @@ gdk_gl_context_new (GdkGLDrawable *gldrawable,
                                                                      direct,
                                                                      render_type);
 }
-
-/**
- * gdk_gl_context_destroy:
- * @glcontext: a #GdkGLContext.
- *
- * Destroys the OpenGL resources associated with @glcontext and
- * decrements @glcontext's reference count.
- **/
-void
-gdk_gl_context_destroy (GdkGLContext *glcontext)
-{
-  g_return_if_fail (GDK_IS_GL_CONTEXT (glcontext));
-
-  _gdk_gl_context_destroy (glcontext);
-  g_object_unref (G_OBJECT (glcontext));
-}
diff --git a/gdk/gdkglcontext.h b/gdk/gdkglcontext.h
index ade9d27..5ff68b6 100644
--- a/gdk/gdkglcontext.h
+++ b/gdk/gdkglcontext.h
@@ -50,8 +50,6 @@ GdkGLContext  *gdk_gl_context_new             (GdkGLDrawable *gldrawable,
                                                gboolean       direct,
                                                int            render_type);
 
-void           gdk_gl_context_destroy         (GdkGLContext  *glcontext);
-
 gboolean       gdk_gl_context_copy            (GdkGLContext  *glcontext,
                                                GdkGLContext  *src,
                                                unsigned long  mask);
diff --git a/gdk/gdkgldrawable.c b/gdk/gdkgldrawable.c
index 8518336..b74ef69 100644
--- a/gdk/gdkgldrawable.c
+++ b/gdk/gdkgldrawable.c
@@ -16,7 +16,11 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
-#include <gdk/gdkdrawable.h>
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
+#include <gdk/gdk.h>
 
 #include "gdkglprivate.h"
 #include "gdkglcontext.h"
@@ -166,7 +170,7 @@ gdk_gl_drawable_gl_end (GdkGLDrawable *gldrawable)
  *
  * Gets #GdkGLConfig with which the @gldrawable is configured.
  *
- * Return value: the #GdkGLConfig.
+ * Return value: (transfer none): the #GdkGLConfig.
  **/
 GdkGLConfig *
 gdk_gl_drawable_get_gl_config (GdkGLDrawable *gldrawable)
@@ -179,8 +183,8 @@ gdk_gl_drawable_get_gl_config (GdkGLDrawable *gldrawable)
 /**
  * gdk_gl_drawable_get_size:
  * @gldrawable: a #GdkGLDrawable.
- * @width: location to store drawable's width, or NULL.
- * @height: location to store drawable's height, or NULL.
+ * @width: (out) (allow-none): location to store drawable's width, or NULL.
+ * @height: (out) (allow-none): location to store drawable's height, or NULL.
  *
  * Fills *width and *height with the size of GL drawable.
  * width or height can be NULL if you only want the other one.
@@ -201,7 +205,7 @@ gdk_gl_drawable_get_size (GdkGLDrawable *gldrawable,
  *
  * Returns the current #GdkGLDrawable.
  *
- * Return value: the current #GdkGLDrawable or NULL if there is no current drawable.
+ * Return value: (transfer none): the current #GdkGLDrawable or NULL if there is no current drawable.
  **/
 GdkGLDrawable *
 gdk_gl_drawable_get_current (void)
diff --git a/gdk/gdkglext-gtk20.def b/gdk/gdkglext-gtk20.def
deleted file mode 100644
index e1bf38e..0000000
--- a/gdk/gdkglext-gtk20.def
+++ /dev/null
@@ -1,1355 +0,0 @@
-EXPORTS
-	gdk_gl_buffer_mask_get_type
-	gdk_gl_config_attrib_get_type
-	gdk_gl_config_caveat_get_type
-	gdk_gl_config_error_get_type
-	gdk_gl_config_get_attrib
-	gdk_gl_config_get_colormap
-	gdk_gl_config_get_depth
-	gdk_gl_config_get_layer_plane
-	gdk_gl_config_get_n_aux_buffers
-	gdk_gl_config_get_n_sample_buffers
-	gdk_gl_config_get_screen
-	gdk_gl_config_get_type
-	gdk_gl_config_get_visual
-	gdk_gl_config_has_accum_buffer
-	gdk_gl_config_has_alpha
-	gdk_gl_config_has_depth_buffer
-	gdk_gl_config_has_stencil_buffer
-	gdk_gl_config_is_double_buffered
-	gdk_gl_config_is_rgba
-	gdk_gl_config_is_stereo
-	gdk_gl_config_mode_get_type
-	gdk_gl_config_new
-	gdk_gl_config_new_by_mode
-	gdk_gl_context_copy
-	gdk_gl_context_destroy
-	gdk_gl_context_get_current
-	gdk_gl_context_get_gl_config
-	gdk_gl_context_get_gl_drawable
-	gdk_gl_context_get_render_type
-	gdk_gl_context_get_share_list
-	gdk_gl_context_get_type
-	gdk_gl_context_is_direct
-	gdk_gl_context_new
-	gdk_gl_debug_flags
-	gdk_gl_draw_cone
-	gdk_gl_draw_cube
-	gdk_gl_draw_dodecahedron
-	gdk_gl_draw_icosahedron
-	gdk_gl_draw_octahedron
-	gdk_gl_draw_sphere
-	gdk_gl_draw_teapot
-	gdk_gl_draw_tetrahedron
-	gdk_gl_draw_torus
-	gdk_gl_drawable_attrib_get_type
-	gdk_gl_drawable_get_current
-	gdk_gl_drawable_get_gl_config
-	gdk_gl_drawable_get_size
-	gdk_gl_drawable_get_type
-	gdk_gl_drawable_gl_begin
-	gdk_gl_drawable_gl_end
-	gdk_gl_drawable_is_double_buffered
-	gdk_gl_drawable_make_current
-	gdk_gl_drawable_swap_buffers
-	gdk_gl_drawable_type_get_type
-	gdk_gl_drawable_type_mask_get_type
-	gdk_gl_drawable_wait_gdk
-	gdk_gl_drawable_wait_gl
-	gdk_gl_event_mask_get_type
-	gdk_gl_event_type_get_type
-	gdk_gl_font_use_pango_font
-	gdk_gl_get_GL_3DFX_tbuffer
-	gdk_gl_get_GL_APPLE_element_array
-	gdk_gl_get_GL_APPLE_fence
-	gdk_gl_get_GL_APPLE_texture_range
-	gdk_gl_get_GL_APPLE_vertex_array_object
-	gdk_gl_get_GL_APPLE_vertex_array_range
-	gdk_gl_get_GL_APPLE_vertex_program_evaluators
-	gdk_gl_get_GL_ARB_matrix_palette
-	gdk_gl_get_GL_ARB_multisample
-	gdk_gl_get_GL_ARB_multitexture
-	gdk_gl_get_GL_ARB_point_parameters
-	gdk_gl_get_GL_ARB_texture_compression
-	gdk_gl_get_GL_ARB_transpose_matrix
-	gdk_gl_get_GL_ARB_vertex_blend
-	gdk_gl_get_GL_ARB_vertex_buffer_object
-	gdk_gl_get_GL_ARB_vertex_program
-	gdk_gl_get_GL_ARB_window_pos
-	gdk_gl_get_GL_ATIX_pn_triangles
-	gdk_gl_get_GL_ATI_blend_equation_separate
-	gdk_gl_get_GL_ATI_draw_buffers
-	gdk_gl_get_GL_ATI_element_array
-	gdk_gl_get_GL_ATI_envmap_bumpmap
-	gdk_gl_get_GL_ATI_fragment_shader
-	gdk_gl_get_GL_ATI_map_object_buffer
-	gdk_gl_get_GL_ATI_pn_triangles
-	gdk_gl_get_GL_ATI_separate_stencil
-	gdk_gl_get_GL_ATI_vertex_array_object
-	gdk_gl_get_GL_ATI_vertex_attrib_array_object
-	gdk_gl_get_GL_ATI_vertex_streams
-	gdk_gl_get_GL_Autodesk_facet_normal
-	gdk_gl_get_GL_Autodesk_valid_back_buffer_hint
-	gdk_gl_get_GL_EXT_blend_color
-	gdk_gl_get_GL_EXT_blend_func_separate
-	gdk_gl_get_GL_EXT_blend_minmax
-	gdk_gl_get_GL_EXT_color_subtable
-	gdk_gl_get_GL_EXT_compiled_vertex_array
-	gdk_gl_get_GL_EXT_convolution
-	gdk_gl_get_GL_EXT_coordinate_frame
-	gdk_gl_get_GL_EXT_copy_texture
-	gdk_gl_get_GL_EXT_cull_vertex
-	gdk_gl_get_GL_EXT_depth_bounds_test
-	gdk_gl_get_GL_EXT_draw_range_elements
-	gdk_gl_get_GL_EXT_fog_coord
-	gdk_gl_get_GL_EXT_fragment_lighting
-	gdk_gl_get_GL_EXT_histogram
-	gdk_gl_get_GL_EXT_index_func
-	gdk_gl_get_GL_EXT_index_material
-	gdk_gl_get_GL_EXT_light_texture
-	gdk_gl_get_GL_EXT_multi_draw_arrays
-	gdk_gl_get_GL_EXT_multisample
-	gdk_gl_get_GL_EXT_multitexture
-	gdk_gl_get_GL_EXT_paletted_texture
-	gdk_gl_get_GL_EXT_pixel_transform
-	gdk_gl_get_GL_EXT_point_parameters
-	gdk_gl_get_GL_EXT_polygon_offset
-	gdk_gl_get_GL_EXT_scene_marker
-	gdk_gl_get_GL_EXT_secondary_color
-	gdk_gl_get_GL_EXT_stencil_two_side
-	gdk_gl_get_GL_EXT_subtexture
-	gdk_gl_get_GL_EXT_texture3D
-	gdk_gl_get_GL_EXT_texture_object
-	gdk_gl_get_GL_EXT_texture_perturb_normal
-	gdk_gl_get_GL_EXT_vertex_array
-	gdk_gl_get_GL_EXT_vertex_shader
-	gdk_gl_get_GL_EXT_vertex_weighting
-	gdk_gl_get_GL_HP_image_transform
-	gdk_gl_get_GL_IBM_multimode_draw_arrays
-	gdk_gl_get_GL_IBM_static_data
-	gdk_gl_get_GL_IBM_vertex_array_lists
-	gdk_gl_get_GL_INGR_blend_func_separate
-	gdk_gl_get_GL_INTEL_parallel_arrays
-	gdk_gl_get_GL_KTX_buffer_region
-	gdk_gl_get_GL_MESA_resize_buffers
-	gdk_gl_get_GL_MESA_window_pos
-	gdk_gl_get_GL_NV_element_array
-	gdk_gl_get_GL_NV_evaluators
-	gdk_gl_get_GL_NV_fence
-	gdk_gl_get_GL_NV_fragment_program
-	gdk_gl_get_GL_NV_half_float
-	gdk_gl_get_GL_NV_occlusion_query
-	gdk_gl_get_GL_NV_pixel_data_range
-	gdk_gl_get_GL_NV_point_sprite
-	gdk_gl_get_GL_NV_primitive_restart
-	gdk_gl_get_GL_NV_register_combiners
-	gdk_gl_get_GL_NV_register_combiners2
-	gdk_gl_get_GL_NV_stencil_two_side
-	gdk_gl_get_GL_NV_vertex_array_range
-	gdk_gl_get_GL_NV_vertex_program
-	gdk_gl_get_GL_PGI_misc_hints
-	gdk_gl_get_GL_SGIS_detail_texture
-	gdk_gl_get_GL_SGIS_fog_function
-	gdk_gl_get_GL_SGIS_multisample
-	gdk_gl_get_GL_SGIS_multitexture
-	gdk_gl_get_GL_SGIS_pixel_texture
-	gdk_gl_get_GL_SGIS_point_parameters
-	gdk_gl_get_GL_SGIS_sharpen_texture
-	gdk_gl_get_GL_SGIS_texture4D
-	gdk_gl_get_GL_SGIS_texture_color_mask
-	gdk_gl_get_GL_SGIS_texture_filter4
-	gdk_gl_get_GL_SGIX_async
-	gdk_gl_get_GL_SGIX_flush_raster
-	gdk_gl_get_GL_SGIX_fog_texture
-	gdk_gl_get_GL_SGIX_fragment_lighting
-	gdk_gl_get_GL_SGIX_framezoom
-	gdk_gl_get_GL_SGIX_igloo_interface
-	gdk_gl_get_GL_SGIX_instruments
-	gdk_gl_get_GL_SGIX_list_priority
-	gdk_gl_get_GL_SGIX_pixel_texture
-	gdk_gl_get_GL_SGIX_polynomial_ffd
-	gdk_gl_get_GL_SGIX_reference_plane
-	gdk_gl_get_GL_SGIX_sprite
-	gdk_gl_get_GL_SGIX_tag_sample_buffer
-	gdk_gl_get_GL_SGI_color_table
-	gdk_gl_get_GL_SUNX_constant_data
-	gdk_gl_get_GL_SUN_global_alpha
-	gdk_gl_get_GL_SUN_mesh_array
-	gdk_gl_get_GL_SUN_multi_draw_arrays
-	gdk_gl_get_GL_SUN_triangle_list
-	gdk_gl_get_GL_SUN_vertex
-	gdk_gl_get_GL_VERSION_1_2
-	gdk_gl_get_GL_VERSION_1_3
-	gdk_gl_get_GL_VERSION_1_4
-	gdk_gl_get_GL_WIN_swap_hint
-	gdk_gl_get_WGL_ARB_buffer_region
-	gdk_gl_get_WGL_ARB_extensions_string
-	gdk_gl_get_WGL_ARB_make_current_read
-	gdk_gl_get_WGL_ARB_pbuffer
-	gdk_gl_get_WGL_ARB_pixel_format
-	gdk_gl_get_WGL_ARB_render_texture
-	gdk_gl_get_WGL_EXT_display_color_table
-	gdk_gl_get_WGL_EXT_extensions_string
-	gdk_gl_get_WGL_EXT_make_current_read
-	gdk_gl_get_WGL_EXT_pbuffer
-	gdk_gl_get_WGL_EXT_pixel_format
-	gdk_gl_get_WGL_EXT_swap_control
-	gdk_gl_get_WGL_I3D_digital_video_control
-	gdk_gl_get_WGL_I3D_gamma
-	gdk_gl_get_WGL_I3D_genlock
-	gdk_gl_get_WGL_I3D_image_buffer
-	gdk_gl_get_WGL_I3D_swap_frame_lock
-	gdk_gl_get_WGL_I3D_swap_frame_usage
-	gdk_gl_get_WGL_NV_vertex_array_range
-	gdk_gl_get_WGL_OML_sync_control
-	gdk_gl_get_glActiveStencilFaceEXT
-	gdk_gl_get_glActiveStencilFaceNV
-	gdk_gl_get_glActiveTexture
-	gdk_gl_get_glActiveTextureARB
-	gdk_gl_get_glAddSwapHintRectWIN
-	gdk_gl_get_glAlphaFragmentOp1ATI
-	gdk_gl_get_glAlphaFragmentOp2ATI
-	gdk_gl_get_glAlphaFragmentOp3ATI
-	gdk_gl_get_glApplyTextureEXT
-	gdk_gl_get_glAreProgramsResidentNV
-	gdk_gl_get_glAreTexturesResidentEXT
-	gdk_gl_get_glArrayElementEXT
-	gdk_gl_get_glArrayObjectATI
-	gdk_gl_get_glAsyncMarkerSGIX
-	gdk_gl_get_glBeginFragmentShaderATI
-	gdk_gl_get_glBeginOcclusionQueryNV
-	gdk_gl_get_glBeginSceneEXT
-	gdk_gl_get_glBeginVertexShaderEXT
-	gdk_gl_get_glBindBufferARB
-	gdk_gl_get_glBindFragmentShaderATI
-	gdk_gl_get_glBindLightParameterEXT
-	gdk_gl_get_glBindMaterialParameterEXT
-	gdk_gl_get_glBindParameterEXT
-	gdk_gl_get_glBindProgramARB
-	gdk_gl_get_glBindProgramNV
-	gdk_gl_get_glBindTexGenParameterEXT
-	gdk_gl_get_glBindTextureEXT
-	gdk_gl_get_glBindTextureUnitParameterEXT
-	gdk_gl_get_glBindVertexArrayAPPLE
-	gdk_gl_get_glBindVertexShaderEXT
-	gdk_gl_get_glBinormal3bEXT
-	gdk_gl_get_glBinormal3bvEXT
-	gdk_gl_get_glBinormal3dEXT
-	gdk_gl_get_glBinormal3dvEXT
-	gdk_gl_get_glBinormal3fEXT
-	gdk_gl_get_glBinormal3fvEXT
-	gdk_gl_get_glBinormal3iEXT
-	gdk_gl_get_glBinormal3ivEXT
-	gdk_gl_get_glBinormal3sEXT
-	gdk_gl_get_glBinormal3svEXT
-	gdk_gl_get_glBinormalPointerEXT
-	gdk_gl_get_glBlendColor
-	gdk_gl_get_glBlendColorEXT
-	gdk_gl_get_glBlendEquation
-	gdk_gl_get_glBlendEquationEXT
-	gdk_gl_get_glBlendEquationSeparateATI
-	gdk_gl_get_glBlendFuncSeparate
-	gdk_gl_get_glBlendFuncSeparateEXT
-	gdk_gl_get_glBlendFuncSeparateINGR
-	gdk_gl_get_glBufferDataARB
-	gdk_gl_get_glBufferRegionEnabled
-	gdk_gl_get_glBufferSubDataARB
-	gdk_gl_get_glClientActiveTexture
-	gdk_gl_get_glClientActiveTextureARB
-	gdk_gl_get_glClientActiveVertexStreamATI
-	gdk_gl_get_glColor3fVertex3fSUN
-	gdk_gl_get_glColor3fVertex3fvSUN
-	gdk_gl_get_glColor3hNV
-	gdk_gl_get_glColor3hvNV
-	gdk_gl_get_glColor4fNormal3fVertex3fSUN
-	gdk_gl_get_glColor4fNormal3fVertex3fvSUN
-	gdk_gl_get_glColor4hNV
-	gdk_gl_get_glColor4hvNV
-	gdk_gl_get_glColor4ubVertex2fSUN
-	gdk_gl_get_glColor4ubVertex2fvSUN
-	gdk_gl_get_glColor4ubVertex3fSUN
-	gdk_gl_get_glColor4ubVertex3fvSUN
-	gdk_gl_get_glColorFragmentOp1ATI
-	gdk_gl_get_glColorFragmentOp2ATI
-	gdk_gl_get_glColorFragmentOp3ATI
-	gdk_gl_get_glColorPointerEXT
-	gdk_gl_get_glColorPointerListIBM
-	gdk_gl_get_glColorPointervINTEL
-	gdk_gl_get_glColorSubTable
-	gdk_gl_get_glColorSubTableEXT
-	gdk_gl_get_glColorTable
-	gdk_gl_get_glColorTableEXT
-	gdk_gl_get_glColorTableParameterfv
-	gdk_gl_get_glColorTableParameterfvSGI
-	gdk_gl_get_glColorTableParameteriv
-	gdk_gl_get_glColorTableParameterivSGI
-	gdk_gl_get_glColorTableSGI
-	gdk_gl_get_glCombinerInputNV
-	gdk_gl_get_glCombinerOutputNV
-	gdk_gl_get_glCombinerParameterfNV
-	gdk_gl_get_glCombinerParameterfvNV
-	gdk_gl_get_glCombinerParameteriNV
-	gdk_gl_get_glCombinerParameterivNV
-	gdk_gl_get_glCombinerStageParameterfvNV
-	gdk_gl_get_glCompressedTexImage1D
-	gdk_gl_get_glCompressedTexImage1DARB
-	gdk_gl_get_glCompressedTexImage2D
-	gdk_gl_get_glCompressedTexImage2DARB
-	gdk_gl_get_glCompressedTexImage3D
-	gdk_gl_get_glCompressedTexImage3DARB
-	gdk_gl_get_glCompressedTexSubImage1D
-	gdk_gl_get_glCompressedTexSubImage1DARB
-	gdk_gl_get_glCompressedTexSubImage2D
-	gdk_gl_get_glCompressedTexSubImage2DARB
-	gdk_gl_get_glCompressedTexSubImage3D
-	gdk_gl_get_glCompressedTexSubImage3DARB
-	gdk_gl_get_glConvolutionFilter1D
-	gdk_gl_get_glConvolutionFilter1DEXT
-	gdk_gl_get_glConvolutionFilter2D
-	gdk_gl_get_glConvolutionFilter2DEXT
-	gdk_gl_get_glConvolutionParameterf
-	gdk_gl_get_glConvolutionParameterfEXT
-	gdk_gl_get_glConvolutionParameterfv
-	gdk_gl_get_glConvolutionParameterfvEXT
-	gdk_gl_get_glConvolutionParameteri
-	gdk_gl_get_glConvolutionParameteriEXT
-	gdk_gl_get_glConvolutionParameteriv
-	gdk_gl_get_glConvolutionParameterivEXT
-	gdk_gl_get_glCopyColorSubTable
-	gdk_gl_get_glCopyColorSubTableEXT
-	gdk_gl_get_glCopyColorTable
-	gdk_gl_get_glCopyColorTableSGI
-	gdk_gl_get_glCopyConvolutionFilter1D
-	gdk_gl_get_glCopyConvolutionFilter1DEXT
-	gdk_gl_get_glCopyConvolutionFilter2D
-	gdk_gl_get_glCopyConvolutionFilter2DEXT
-	gdk_gl_get_glCopyTexImage1DEXT
-	gdk_gl_get_glCopyTexImage2DEXT
-	gdk_gl_get_glCopyTexSubImage1DEXT
-	gdk_gl_get_glCopyTexSubImage2DEXT
-	gdk_gl_get_glCopyTexSubImage3D
-	gdk_gl_get_glCopyTexSubImage3DEXT
-	gdk_gl_get_glCullParameterdvEXT
-	gdk_gl_get_glCullParameterfvEXT
-	gdk_gl_get_glCurrentPaletteMatrixARB
-	gdk_gl_get_glDeformSGIX
-	gdk_gl_get_glDeformationMap3dSGIX
-	gdk_gl_get_glDeformationMap3fSGIX
-	gdk_gl_get_glDeleteAsyncMarkersSGIX
-	gdk_gl_get_glDeleteBufferRegion
-	gdk_gl_get_glDeleteBuffersARB
-	gdk_gl_get_glDeleteFencesAPPLE
-	gdk_gl_get_glDeleteFencesNV
-	gdk_gl_get_glDeleteFragmentShaderATI
-	gdk_gl_get_glDeleteOcclusionQueriesNV
-	gdk_gl_get_glDeleteProgramsARB
-	gdk_gl_get_glDeleteProgramsNV
-	gdk_gl_get_glDeleteTexturesEXT
-	gdk_gl_get_glDeleteVertexArraysAPPLE
-	gdk_gl_get_glDeleteVertexShaderEXT
-	gdk_gl_get_glDepthBoundsEXT
-	gdk_gl_get_glDetailTexFuncSGIS
-	gdk_gl_get_glDisableVariantClientStateEXT
-	gdk_gl_get_glDisableVertexAttribAPPLE
-	gdk_gl_get_glDisableVertexAttribArrayARB
-	gdk_gl_get_glDrawArraysEXT
-	gdk_gl_get_glDrawBufferRegion
-	gdk_gl_get_glDrawBuffersATI
-	gdk_gl_get_glDrawElementArrayAPPLE
-	gdk_gl_get_glDrawElementArrayATI
-	gdk_gl_get_glDrawElementArrayNV
-	gdk_gl_get_glDrawMeshArraysSUN
-	gdk_gl_get_glDrawRangeElementArrayAPPLE
-	gdk_gl_get_glDrawRangeElementArrayATI
-	gdk_gl_get_glDrawRangeElementArrayNV
-	gdk_gl_get_glDrawRangeElements
-	gdk_gl_get_glDrawRangeElementsEXT
-	gdk_gl_get_glEdgeFlagPointerEXT
-	gdk_gl_get_glEdgeFlagPointerListIBM
-	gdk_gl_get_glElementPointerAPPLE
-	gdk_gl_get_glElementPointerATI
-	gdk_gl_get_glElementPointerNV
-	gdk_gl_get_glEnableVariantClientStateEXT
-	gdk_gl_get_glEnableVertexAttribAPPLE
-	gdk_gl_get_glEnableVertexAttribArrayARB
-	gdk_gl_get_glEndFragmentShaderATI
-	gdk_gl_get_glEndOcclusionQueryNV
-	gdk_gl_get_glEndSceneEXT
-	gdk_gl_get_glEndVertexShaderEXT
-	gdk_gl_get_glEvalMapsNV
-	gdk_gl_get_glExecuteProgramNV
-	gdk_gl_get_glExtractComponentEXT
-	gdk_gl_get_glFacetNormal3b
-	gdk_gl_get_glFacetNormal3bv
-	gdk_gl_get_glFacetNormal3d
-	gdk_gl_get_glFacetNormal3dv
-	gdk_gl_get_glFacetNormal3f
-	gdk_gl_get_glFacetNormal3fv
-	gdk_gl_get_glFacetNormal3i
-	gdk_gl_get_glFacetNormal3iv
-	gdk_gl_get_glFacetNormal3s
-	gdk_gl_get_glFacetNormal3sv
-	gdk_gl_get_glFinalCombinerInputNV
-	gdk_gl_get_glFinishAsyncSGIX
-	gdk_gl_get_glFinishFenceAPPLE
-	gdk_gl_get_glFinishFenceNV
-	gdk_gl_get_glFinishObjectAPPLE
-	gdk_gl_get_glFinishTextureSUNX
-	gdk_gl_get_glFlushPixelDataRangeNV
-	gdk_gl_get_glFlushRasterSGIX
-	gdk_gl_get_glFlushStaticDataIBM
-	gdk_gl_get_glFlushVertexArrayRangeAPPLE
-	gdk_gl_get_glFlushVertexArrayRangeNV
-	gdk_gl_get_glFogCoordPointer
-	gdk_gl_get_glFogCoordPointerEXT
-	gdk_gl_get_glFogCoordPointerListIBM
-	gdk_gl_get_glFogCoordd
-	gdk_gl_get_glFogCoorddEXT
-	gdk_gl_get_glFogCoorddv
-	gdk_gl_get_glFogCoorddvEXT
-	gdk_gl_get_glFogCoordf
-	gdk_gl_get_glFogCoordfEXT
-	gdk_gl_get_glFogCoordfv
-	gdk_gl_get_glFogCoordfvEXT
-	gdk_gl_get_glFogCoordhNV
-	gdk_gl_get_glFogCoordhvNV
-	gdk_gl_get_glFogFuncSGIS
-	gdk_gl_get_glFragmentColorMaterialEXT
-	gdk_gl_get_glFragmentColorMaterialSGIX
-	gdk_gl_get_glFragmentLightModelfEXT
-	gdk_gl_get_glFragmentLightModelfSGIX
-	gdk_gl_get_glFragmentLightModelfvEXT
-	gdk_gl_get_glFragmentLightModelfvSGIX
-	gdk_gl_get_glFragmentLightModeliEXT
-	gdk_gl_get_glFragmentLightModeliSGIX
-	gdk_gl_get_glFragmentLightModelivEXT
-	gdk_gl_get_glFragmentLightModelivSGIX
-	gdk_gl_get_glFragmentLightfEXT
-	gdk_gl_get_glFragmentLightfSGIX
-	gdk_gl_get_glFragmentLightfvEXT
-	gdk_gl_get_glFragmentLightfvSGIX
-	gdk_gl_get_glFragmentLightiEXT
-	gdk_gl_get_glFragmentLightiSGIX
-	gdk_gl_get_glFragmentLightivEXT
-	gdk_gl_get_glFragmentLightivSGIX
-	gdk_gl_get_glFragmentMaterialfEXT
-	gdk_gl_get_glFragmentMaterialfSGIX
-	gdk_gl_get_glFragmentMaterialfvEXT
-	gdk_gl_get_glFragmentMaterialfvSGIX
-	gdk_gl_get_glFragmentMaterialiEXT
-	gdk_gl_get_glFragmentMaterialiSGIX
-	gdk_gl_get_glFragmentMaterialivEXT
-	gdk_gl_get_glFragmentMaterialivSGIX
-	gdk_gl_get_glFrameZoomSGIX
-	gdk_gl_get_glFreeObjectBufferATI
-	gdk_gl_get_glGenAsyncMarkersSGIX
-	gdk_gl_get_glGenBuffersARB
-	gdk_gl_get_glGenFencesAPPLE
-	gdk_gl_get_glGenFencesNV
-	gdk_gl_get_glGenFragmentShadersATI
-	gdk_gl_get_glGenOcclusionQueriesNV
-	gdk_gl_get_glGenProgramsARB
-	gdk_gl_get_glGenProgramsNV
-	gdk_gl_get_glGenSymbolsEXT
-	gdk_gl_get_glGenTexturesEXT
-	gdk_gl_get_glGenVertexArraysAPPLE
-	gdk_gl_get_glGenVertexShadersEXT
-	gdk_gl_get_glGetArrayObjectfvATI
-	gdk_gl_get_glGetArrayObjectivATI
-	gdk_gl_get_glGetBufferParameterivARB
-	gdk_gl_get_glGetBufferPointervARB
-	gdk_gl_get_glGetBufferSubDataARB
-	gdk_gl_get_glGetColorTable
-	gdk_gl_get_glGetColorTableEXT
-	gdk_gl_get_glGetColorTableParameterfv
-	gdk_gl_get_glGetColorTableParameterfvEXT
-	gdk_gl_get_glGetColorTableParameterfvSGI
-	gdk_gl_get_glGetColorTableParameteriv
-	gdk_gl_get_glGetColorTableParameterivEXT
-	gdk_gl_get_glGetColorTableParameterivSGI
-	gdk_gl_get_glGetColorTableSGI
-	gdk_gl_get_glGetCombinerInputParameterfvNV
-	gdk_gl_get_glGetCombinerInputParameterivNV
-	gdk_gl_get_glGetCombinerOutputParameterfvNV
-	gdk_gl_get_glGetCombinerOutputParameterivNV
-	gdk_gl_get_glGetCombinerStageParameterfvNV
-	gdk_gl_get_glGetCompressedTexImage
-	gdk_gl_get_glGetCompressedTexImageARB
-	gdk_gl_get_glGetConvolutionFilter
-	gdk_gl_get_glGetConvolutionFilterEXT
-	gdk_gl_get_glGetConvolutionParameterfv
-	gdk_gl_get_glGetConvolutionParameterfvEXT
-	gdk_gl_get_glGetConvolutionParameteriv
-	gdk_gl_get_glGetConvolutionParameterivEXT
-	gdk_gl_get_glGetDetailTexFuncSGIS
-	gdk_gl_get_glGetFenceivNV
-	gdk_gl_get_glGetFinalCombinerInputParameterfvNV
-	gdk_gl_get_glGetFinalCombinerInputParameterivNV
-	gdk_gl_get_glGetFogFuncSGIS
-	gdk_gl_get_glGetFragmentLightfvEXT
-	gdk_gl_get_glGetFragmentLightfvSGIX
-	gdk_gl_get_glGetFragmentLightivEXT
-	gdk_gl_get_glGetFragmentLightivSGIX
-	gdk_gl_get_glGetFragmentMaterialfvEXT
-	gdk_gl_get_glGetFragmentMaterialfvSGIX
-	gdk_gl_get_glGetFragmentMaterialivEXT
-	gdk_gl_get_glGetFragmentMaterialivSGIX
-	gdk_gl_get_glGetHistogram
-	gdk_gl_get_glGetHistogramEXT
-	gdk_gl_get_glGetHistogramParameterfv
-	gdk_gl_get_glGetHistogramParameterfvEXT
-	gdk_gl_get_glGetHistogramParameteriv
-	gdk_gl_get_glGetHistogramParameterivEXT
-	gdk_gl_get_glGetImageTransformParameterfvHP
-	gdk_gl_get_glGetImageTransformParameterivHP
-	gdk_gl_get_glGetInstrumentsSGIX
-	gdk_gl_get_glGetInvariantBooleanvEXT
-	gdk_gl_get_glGetInvariantFloatvEXT
-	gdk_gl_get_glGetInvariantIntegervEXT
-	gdk_gl_get_glGetListParameterfvSGIX
-	gdk_gl_get_glGetListParameterivSGIX
-	gdk_gl_get_glGetLocalConstantBooleanvEXT
-	gdk_gl_get_glGetLocalConstantFloatvEXT
-	gdk_gl_get_glGetLocalConstantIntegervEXT
-	gdk_gl_get_glGetMapAttribParameterfvNV
-	gdk_gl_get_glGetMapAttribParameterivNV
-	gdk_gl_get_glGetMapControlPointsNV
-	gdk_gl_get_glGetMapParameterfvNV
-	gdk_gl_get_glGetMapParameterivNV
-	gdk_gl_get_glGetMinmax
-	gdk_gl_get_glGetMinmaxEXT
-	gdk_gl_get_glGetMinmaxParameterfv
-	gdk_gl_get_glGetMinmaxParameterfvEXT
-	gdk_gl_get_glGetMinmaxParameteriv
-	gdk_gl_get_glGetMinmaxParameterivEXT
-	gdk_gl_get_glGetObjectBufferfvATI
-	gdk_gl_get_glGetObjectBufferivATI
-	gdk_gl_get_glGetOcclusionQueryivNV
-	gdk_gl_get_glGetOcclusionQueryuivNV
-	gdk_gl_get_glGetPixelTexGenParameterfvSGIS
-	gdk_gl_get_glGetPixelTexGenParameterivSGIS
-	gdk_gl_get_glGetPointervEXT
-	gdk_gl_get_glGetProgramEnvParameterdvARB
-	gdk_gl_get_glGetProgramEnvParameterfvARB
-	gdk_gl_get_glGetProgramLocalParameterdvARB
-	gdk_gl_get_glGetProgramLocalParameterfvARB
-	gdk_gl_get_glGetProgramNamedParameterdvNV
-	gdk_gl_get_glGetProgramNamedParameterfvNV
-	gdk_gl_get_glGetProgramParameterdvNV
-	gdk_gl_get_glGetProgramParameterfvNV
-	gdk_gl_get_glGetProgramStringARB
-	gdk_gl_get_glGetProgramStringNV
-	gdk_gl_get_glGetProgramivARB
-	gdk_gl_get_glGetProgramivNV
-	gdk_gl_get_glGetSeparableFilter
-	gdk_gl_get_glGetSeparableFilterEXT
-	gdk_gl_get_glGetSharpenTexFuncSGIS
-	gdk_gl_get_glGetTexBumpParameterfvATI
-	gdk_gl_get_glGetTexBumpParameterivATI
-	gdk_gl_get_glGetTexFilterFuncSGIS
-	gdk_gl_get_glGetTexParameterPointervAPPLE
-	gdk_gl_get_glGetTrackMatrixivNV
-	gdk_gl_get_glGetVariantArrayObjectfvATI
-	gdk_gl_get_glGetVariantArrayObjectivATI
-	gdk_gl_get_glGetVariantBooleanvEXT
-	gdk_gl_get_glGetVariantFloatvEXT
-	gdk_gl_get_glGetVariantIntegervEXT
-	gdk_gl_get_glGetVariantPointervEXT
-	gdk_gl_get_glGetVertexAttribArrayObjectfvATI
-	gdk_gl_get_glGetVertexAttribArrayObjectivATI
-	gdk_gl_get_glGetVertexAttribPointervARB
-	gdk_gl_get_glGetVertexAttribPointervNV
-	gdk_gl_get_glGetVertexAttribdvARB
-	gdk_gl_get_glGetVertexAttribdvNV
-	gdk_gl_get_glGetVertexAttribfvARB
-	gdk_gl_get_glGetVertexAttribfvNV
-	gdk_gl_get_glGetVertexAttribivARB
-	gdk_gl_get_glGetVertexAttribivNV
-	gdk_gl_get_glGlobalAlphaFactorbSUN
-	gdk_gl_get_glGlobalAlphaFactordSUN
-	gdk_gl_get_glGlobalAlphaFactorfSUN
-	gdk_gl_get_glGlobalAlphaFactoriSUN
-	gdk_gl_get_glGlobalAlphaFactorsSUN
-	gdk_gl_get_glGlobalAlphaFactorubSUN
-	gdk_gl_get_glGlobalAlphaFactoruiSUN
-	gdk_gl_get_glGlobalAlphaFactorusSUN
-	gdk_gl_get_glHintPGI
-	gdk_gl_get_glHistogram
-	gdk_gl_get_glHistogramEXT
-	gdk_gl_get_glIglooInterfaceSGIX
-	gdk_gl_get_glImageTransformParameterfHP
-	gdk_gl_get_glImageTransformParameterfvHP
-	gdk_gl_get_glImageTransformParameteriHP
-	gdk_gl_get_glImageTransformParameterivHP
-	gdk_gl_get_glIndexFuncEXT
-	gdk_gl_get_glIndexMaterialEXT
-	gdk_gl_get_glIndexPointerEXT
-	gdk_gl_get_glIndexPointerListIBM
-	gdk_gl_get_glInsertComponentEXT
-	gdk_gl_get_glInstrumentsBufferSGIX
-	gdk_gl_get_glInterleavedTextureCoordSetsEXT
-	gdk_gl_get_glIsAsyncMarkerSGIX
-	gdk_gl_get_glIsBufferARB
-	gdk_gl_get_glIsFenceAPPLE
-	gdk_gl_get_glIsFenceNV
-	gdk_gl_get_glIsObjectBufferATI
-	gdk_gl_get_glIsOcclusionQueryNV
-	gdk_gl_get_glIsProgramARB
-	gdk_gl_get_glIsProgramNV
-	gdk_gl_get_glIsTextureEXT
-	gdk_gl_get_glIsVariantEnabledEXT
-	gdk_gl_get_glIsVertexArrayAPPLE
-	gdk_gl_get_glIsVertexAttribEnabledAPPLE
-	gdk_gl_get_glLightEnviEXT
-	gdk_gl_get_glLightEnviSGIX
-	gdk_gl_get_glListParameterfSGIX
-	gdk_gl_get_glListParameterfvSGIX
-	gdk_gl_get_glListParameteriSGIX
-	gdk_gl_get_glListParameterivSGIX
-	gdk_gl_get_glLoadIdentityDeformationMapSGIX
-	gdk_gl_get_glLoadProgramNV
-	gdk_gl_get_glLoadTransposeMatrixd
-	gdk_gl_get_glLoadTransposeMatrixdARB
-	gdk_gl_get_glLoadTransposeMatrixf
-	gdk_gl_get_glLoadTransposeMatrixfARB
-	gdk_gl_get_glLockArraysEXT
-	gdk_gl_get_glMapBufferARB
-	gdk_gl_get_glMapControlPointsNV
-	gdk_gl_get_glMapObjectBufferATI
-	gdk_gl_get_glMapParameterfvNV
-	gdk_gl_get_glMapParameterivNV
-	gdk_gl_get_glMapVertexAttrib1dAPPLE
-	gdk_gl_get_glMapVertexAttrib1fAPPLE
-	gdk_gl_get_glMapVertexAttrib2dAPPLE
-	gdk_gl_get_glMapVertexAttrib2fAPPLE
-	gdk_gl_get_glMatrixIndexPointerARB
-	gdk_gl_get_glMatrixIndexubvARB
-	gdk_gl_get_glMatrixIndexuivARB
-	gdk_gl_get_glMatrixIndexusvARB
-	gdk_gl_get_glMinmax
-	gdk_gl_get_glMinmaxEXT
-	gdk_gl_get_glMultTransposeMatrixd
-	gdk_gl_get_glMultTransposeMatrixdARB
-	gdk_gl_get_glMultTransposeMatrixf
-	gdk_gl_get_glMultTransposeMatrixfARB
-	gdk_gl_get_glMultiDrawArrays
-	gdk_gl_get_glMultiDrawArraysEXT
-	gdk_gl_get_glMultiDrawArraysSUN
-	gdk_gl_get_glMultiDrawElementArrayAPPLE
-	gdk_gl_get_glMultiDrawElementArrayNV
-	gdk_gl_get_glMultiDrawElements
-	gdk_gl_get_glMultiDrawElementsEXT
-	gdk_gl_get_glMultiDrawElementsSUN
-	gdk_gl_get_glMultiDrawRangeElementArrayAPPLE
-	gdk_gl_get_glMultiDrawRangeElementArrayNV
-	gdk_gl_get_glMultiModeDrawArraysIBM
-	gdk_gl_get_glMultiModeDrawElementsIBM
-	gdk_gl_get_glMultiTexCoord1d
-	gdk_gl_get_glMultiTexCoord1dARB
-	gdk_gl_get_glMultiTexCoord1dEXT
-	gdk_gl_get_glMultiTexCoord1dSGIS
-	gdk_gl_get_glMultiTexCoord1dv
-	gdk_gl_get_glMultiTexCoord1dvARB
-	gdk_gl_get_glMultiTexCoord1dvEXT
-	gdk_gl_get_glMultiTexCoord1dvSGIS
-	gdk_gl_get_glMultiTexCoord1f
-	gdk_gl_get_glMultiTexCoord1fARB
-	gdk_gl_get_glMultiTexCoord1fEXT
-	gdk_gl_get_glMultiTexCoord1fSGIS
-	gdk_gl_get_glMultiTexCoord1fv
-	gdk_gl_get_glMultiTexCoord1fvARB
-	gdk_gl_get_glMultiTexCoord1fvEXT
-	gdk_gl_get_glMultiTexCoord1fvSGIS
-	gdk_gl_get_glMultiTexCoord1hNV
-	gdk_gl_get_glMultiTexCoord1hvNV
-	gdk_gl_get_glMultiTexCoord1i
-	gdk_gl_get_glMultiTexCoord1iARB
-	gdk_gl_get_glMultiTexCoord1iEXT
-	gdk_gl_get_glMultiTexCoord1iSGIS
-	gdk_gl_get_glMultiTexCoord1iv
-	gdk_gl_get_glMultiTexCoord1ivARB
-	gdk_gl_get_glMultiTexCoord1ivEXT
-	gdk_gl_get_glMultiTexCoord1ivSGIS
-	gdk_gl_get_glMultiTexCoord1s
-	gdk_gl_get_glMultiTexCoord1sARB
-	gdk_gl_get_glMultiTexCoord1sEXT
-	gdk_gl_get_glMultiTexCoord1sSGIS
-	gdk_gl_get_glMultiTexCoord1sv
-	gdk_gl_get_glMultiTexCoord1svARB
-	gdk_gl_get_glMultiTexCoord1svEXT
-	gdk_gl_get_glMultiTexCoord1svSGIS
-	gdk_gl_get_glMultiTexCoord2d
-	gdk_gl_get_glMultiTexCoord2dARB
-	gdk_gl_get_glMultiTexCoord2dEXT
-	gdk_gl_get_glMultiTexCoord2dSGIS
-	gdk_gl_get_glMultiTexCoord2dv
-	gdk_gl_get_glMultiTexCoord2dvARB
-	gdk_gl_get_glMultiTexCoord2dvEXT
-	gdk_gl_get_glMultiTexCoord2dvSGIS
-	gdk_gl_get_glMultiTexCoord2f
-	gdk_gl_get_glMultiTexCoord2fARB
-	gdk_gl_get_glMultiTexCoord2fEXT
-	gdk_gl_get_glMultiTexCoord2fSGIS
-	gdk_gl_get_glMultiTexCoord2fv
-	gdk_gl_get_glMultiTexCoord2fvARB
-	gdk_gl_get_glMultiTexCoord2fvEXT
-	gdk_gl_get_glMultiTexCoord2fvSGIS
-	gdk_gl_get_glMultiTexCoord2hNV
-	gdk_gl_get_glMultiTexCoord2hvNV
-	gdk_gl_get_glMultiTexCoord2i
-	gdk_gl_get_glMultiTexCoord2iARB
-	gdk_gl_get_glMultiTexCoord2iEXT
-	gdk_gl_get_glMultiTexCoord2iSGIS
-	gdk_gl_get_glMultiTexCoord2iv
-	gdk_gl_get_glMultiTexCoord2ivARB
-	gdk_gl_get_glMultiTexCoord2ivEXT
-	gdk_gl_get_glMultiTexCoord2ivSGIS
-	gdk_gl_get_glMultiTexCoord2s
-	gdk_gl_get_glMultiTexCoord2sARB
-	gdk_gl_get_glMultiTexCoord2sEXT
-	gdk_gl_get_glMultiTexCoord2sSGIS
-	gdk_gl_get_glMultiTexCoord2sv
-	gdk_gl_get_glMultiTexCoord2svARB
-	gdk_gl_get_glMultiTexCoord2svEXT
-	gdk_gl_get_glMultiTexCoord2svSGIS
-	gdk_gl_get_glMultiTexCoord3d
-	gdk_gl_get_glMultiTexCoord3dARB
-	gdk_gl_get_glMultiTexCoord3dEXT
-	gdk_gl_get_glMultiTexCoord3dSGIS
-	gdk_gl_get_glMultiTexCoord3dv
-	gdk_gl_get_glMultiTexCoord3dvARB
-	gdk_gl_get_glMultiTexCoord3dvEXT
-	gdk_gl_get_glMultiTexCoord3dvSGIS
-	gdk_gl_get_glMultiTexCoord3f
-	gdk_gl_get_glMultiTexCoord3fARB
-	gdk_gl_get_glMultiTexCoord3fEXT
-	gdk_gl_get_glMultiTexCoord3fSGIS
-	gdk_gl_get_glMultiTexCoord3fv
-	gdk_gl_get_glMultiTexCoord3fvARB
-	gdk_gl_get_glMultiTexCoord3fvEXT
-	gdk_gl_get_glMultiTexCoord3fvSGIS
-	gdk_gl_get_glMultiTexCoord3hNV
-	gdk_gl_get_glMultiTexCoord3hvNV
-	gdk_gl_get_glMultiTexCoord3i
-	gdk_gl_get_glMultiTexCoord3iARB
-	gdk_gl_get_glMultiTexCoord3iEXT
-	gdk_gl_get_glMultiTexCoord3iSGIS
-	gdk_gl_get_glMultiTexCoord3iv
-	gdk_gl_get_glMultiTexCoord3ivARB
-	gdk_gl_get_glMultiTexCoord3ivEXT
-	gdk_gl_get_glMultiTexCoord3ivSGIS
-	gdk_gl_get_glMultiTexCoord3s
-	gdk_gl_get_glMultiTexCoord3sARB
-	gdk_gl_get_glMultiTexCoord3sEXT
-	gdk_gl_get_glMultiTexCoord3sSGIS
-	gdk_gl_get_glMultiTexCoord3sv
-	gdk_gl_get_glMultiTexCoord3svARB
-	gdk_gl_get_glMultiTexCoord3svEXT
-	gdk_gl_get_glMultiTexCoord3svSGIS
-	gdk_gl_get_glMultiTexCoord4d
-	gdk_gl_get_glMultiTexCoord4dARB
-	gdk_gl_get_glMultiTexCoord4dEXT
-	gdk_gl_get_glMultiTexCoord4dSGIS
-	gdk_gl_get_glMultiTexCoord4dv
-	gdk_gl_get_glMultiTexCoord4dvARB
-	gdk_gl_get_glMultiTexCoord4dvEXT
-	gdk_gl_get_glMultiTexCoord4dvSGIS
-	gdk_gl_get_glMultiTexCoord4f
-	gdk_gl_get_glMultiTexCoord4fARB
-	gdk_gl_get_glMultiTexCoord4fEXT
-	gdk_gl_get_glMultiTexCoord4fSGIS
-	gdk_gl_get_glMultiTexCoord4fv
-	gdk_gl_get_glMultiTexCoord4fvARB
-	gdk_gl_get_glMultiTexCoord4fvEXT
-	gdk_gl_get_glMultiTexCoord4fvSGIS
-	gdk_gl_get_glMultiTexCoord4hNV
-	gdk_gl_get_glMultiTexCoord4hvNV
-	gdk_gl_get_glMultiTexCoord4i
-	gdk_gl_get_glMultiTexCoord4iARB
-	gdk_gl_get_glMultiTexCoord4iEXT
-	gdk_gl_get_glMultiTexCoord4iSGIS
-	gdk_gl_get_glMultiTexCoord4iv
-	gdk_gl_get_glMultiTexCoord4ivARB
-	gdk_gl_get_glMultiTexCoord4ivEXT
-	gdk_gl_get_glMultiTexCoord4ivSGIS
-	gdk_gl_get_glMultiTexCoord4s
-	gdk_gl_get_glMultiTexCoord4sARB
-	gdk_gl_get_glMultiTexCoord4sEXT
-	gdk_gl_get_glMultiTexCoord4sSGIS
-	gdk_gl_get_glMultiTexCoord4sv
-	gdk_gl_get_glMultiTexCoord4svARB
-	gdk_gl_get_glMultiTexCoord4svEXT
-	gdk_gl_get_glMultiTexCoord4svSGIS
-	gdk_gl_get_glMultiTexCoordPointerSGIS
-	gdk_gl_get_glNewBufferRegion
-	gdk_gl_get_glNewObjectBufferATI
-	gdk_gl_get_glNormal3fVertex3fSUN
-	gdk_gl_get_glNormal3fVertex3fvSUN
-	gdk_gl_get_glNormal3hNV
-	gdk_gl_get_glNormal3hvNV
-	gdk_gl_get_glNormalPointerEXT
-	gdk_gl_get_glNormalPointerListIBM
-	gdk_gl_get_glNormalPointervINTEL
-	gdk_gl_get_glNormalStream3bATI
-	gdk_gl_get_glNormalStream3bvATI
-	gdk_gl_get_glNormalStream3dATI
-	gdk_gl_get_glNormalStream3dvATI
-	gdk_gl_get_glNormalStream3fATI
-	gdk_gl_get_glNormalStream3fvATI
-	gdk_gl_get_glNormalStream3iATI
-	gdk_gl_get_glNormalStream3ivATI
-	gdk_gl_get_glNormalStream3sATI
-	gdk_gl_get_glNormalStream3svATI
-	gdk_gl_get_glPNTrianglesfATI
-	gdk_gl_get_glPNTrianglesfATIX
-	gdk_gl_get_glPNTrianglesiATI
-	gdk_gl_get_glPNTrianglesiATIX
-	gdk_gl_get_glPassTexCoordATI
-	gdk_gl_get_glPixelDataRangeNV
-	gdk_gl_get_glPixelTexGenParameterfSGIS
-	gdk_gl_get_glPixelTexGenParameterfvSGIS
-	gdk_gl_get_glPixelTexGenParameteriSGIS
-	gdk_gl_get_glPixelTexGenParameterivSGIS
-	gdk_gl_get_glPixelTexGenSGIX
-	gdk_gl_get_glPixelTransformParameterfEXT
-	gdk_gl_get_glPixelTransformParameterfvEXT
-	gdk_gl_get_glPixelTransformParameteriEXT
-	gdk_gl_get_glPixelTransformParameterivEXT
-	gdk_gl_get_glPointParameterf
-	gdk_gl_get_glPointParameterfARB
-	gdk_gl_get_glPointParameterfEXT
-	gdk_gl_get_glPointParameterfSGIS
-	gdk_gl_get_glPointParameterfv
-	gdk_gl_get_glPointParameterfvARB
-	gdk_gl_get_glPointParameterfvEXT
-	gdk_gl_get_glPointParameterfvSGIS
-	gdk_gl_get_glPointParameteri
-	gdk_gl_get_glPointParameteriNV
-	gdk_gl_get_glPointParameteriv
-	gdk_gl_get_glPointParameterivNV
-	gdk_gl_get_glPollAsyncSGIX
-	gdk_gl_get_glPollInstrumentsSGIX
-	gdk_gl_get_glPolygonOffsetEXT
-	gdk_gl_get_glPrimitiveRestartIndexNV
-	gdk_gl_get_glPrimitiveRestartNV
-	gdk_gl_get_glPrioritizeTexturesEXT
-	gdk_gl_get_glProgramEnvParameter4dARB
-	gdk_gl_get_glProgramEnvParameter4dvARB
-	gdk_gl_get_glProgramEnvParameter4fARB
-	gdk_gl_get_glProgramEnvParameter4fvARB
-	gdk_gl_get_glProgramLocalParameter4dARB
-	gdk_gl_get_glProgramLocalParameter4dvARB
-	gdk_gl_get_glProgramLocalParameter4fARB
-	gdk_gl_get_glProgramLocalParameter4fvARB
-	gdk_gl_get_glProgramNamedParameter4dNV
-	gdk_gl_get_glProgramNamedParameter4dvNV
-	gdk_gl_get_glProgramNamedParameter4fNV
-	gdk_gl_get_glProgramNamedParameter4fvNV
-	gdk_gl_get_glProgramParameter4dNV
-	gdk_gl_get_glProgramParameter4dvNV
-	gdk_gl_get_glProgramParameter4fNV
-	gdk_gl_get_glProgramParameter4fvNV
-	gdk_gl_get_glProgramParameters4dvNV
-	gdk_gl_get_glProgramParameters4fvNV
-	gdk_gl_get_glProgramStringARB
-	gdk_gl_get_glReadBufferRegion
-	gdk_gl_get_glReadInstrumentsSGIX
-	gdk_gl_get_glReferencePlaneSGIX
-	gdk_gl_get_glReplacementCodePointerSUN
-	gdk_gl_get_glReplacementCodeubSUN
-	gdk_gl_get_glReplacementCodeubvSUN
-	gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuiSUN
-	gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuiVertex3fSUN
-	gdk_gl_get_glReplacementCodeuiVertex3fvSUN
-	gdk_gl_get_glReplacementCodeuivSUN
-	gdk_gl_get_glReplacementCodeusSUN
-	gdk_gl_get_glReplacementCodeusvSUN
-	gdk_gl_get_glRequestResidentProgramsNV
-	gdk_gl_get_glResetHistogram
-	gdk_gl_get_glResetHistogramEXT
-	gdk_gl_get_glResetMinmax
-	gdk_gl_get_glResetMinmaxEXT
-	gdk_gl_get_glResizeBuffersMESA
-	gdk_gl_get_glSampleCoverage
-	gdk_gl_get_glSampleCoverageARB
-	gdk_gl_get_glSampleMapATI
-	gdk_gl_get_glSampleMaskEXT
-	gdk_gl_get_glSampleMaskSGIS
-	gdk_gl_get_glSamplePatternEXT
-	gdk_gl_get_glSamplePatternSGIS
-	gdk_gl_get_glSecondaryColor3b
-	gdk_gl_get_glSecondaryColor3bEXT
-	gdk_gl_get_glSecondaryColor3bv
-	gdk_gl_get_glSecondaryColor3bvEXT
-	gdk_gl_get_glSecondaryColor3d
-	gdk_gl_get_glSecondaryColor3dEXT
-	gdk_gl_get_glSecondaryColor3dv
-	gdk_gl_get_glSecondaryColor3dvEXT
-	gdk_gl_get_glSecondaryColor3f
-	gdk_gl_get_glSecondaryColor3fEXT
-	gdk_gl_get_glSecondaryColor3fv
-	gdk_gl_get_glSecondaryColor3fvEXT
-	gdk_gl_get_glSecondaryColor3hNV
-	gdk_gl_get_glSecondaryColor3hvNV
-	gdk_gl_get_glSecondaryColor3i
-	gdk_gl_get_glSecondaryColor3iEXT
-	gdk_gl_get_glSecondaryColor3iv
-	gdk_gl_get_glSecondaryColor3ivEXT
-	gdk_gl_get_glSecondaryColor3s
-	gdk_gl_get_glSecondaryColor3sEXT
-	gdk_gl_get_glSecondaryColor3sv
-	gdk_gl_get_glSecondaryColor3svEXT
-	gdk_gl_get_glSecondaryColor3ub
-	gdk_gl_get_glSecondaryColor3ubEXT
-	gdk_gl_get_glSecondaryColor3ubv
-	gdk_gl_get_glSecondaryColor3ubvEXT
-	gdk_gl_get_glSecondaryColor3ui
-	gdk_gl_get_glSecondaryColor3uiEXT
-	gdk_gl_get_glSecondaryColor3uiv
-	gdk_gl_get_glSecondaryColor3uivEXT
-	gdk_gl_get_glSecondaryColor3us
-	gdk_gl_get_glSecondaryColor3usEXT
-	gdk_gl_get_glSecondaryColor3usv
-	gdk_gl_get_glSecondaryColor3usvEXT
-	gdk_gl_get_glSecondaryColorPointer
-	gdk_gl_get_glSecondaryColorPointerEXT
-	gdk_gl_get_glSecondaryColorPointerListIBM
-	gdk_gl_get_glSelectTextureCoordSetEXT
-	gdk_gl_get_glSelectTextureCoordSetSGIS
-	gdk_gl_get_glSelectTextureEXT
-	gdk_gl_get_glSelectTextureSGIS
-	gdk_gl_get_glSelectTextureTransformEXT
-	gdk_gl_get_glSeparableFilter2D
-	gdk_gl_get_glSeparableFilter2DEXT
-	gdk_gl_get_glSetFenceAPPLE
-	gdk_gl_get_glSetFenceNV
-	gdk_gl_get_glSetFragmentShaderConstantATI
-	gdk_gl_get_glSetInvariantEXT
-	gdk_gl_get_glSetLocalConstantEXT
-	gdk_gl_get_glShaderOp1EXT
-	gdk_gl_get_glShaderOp2EXT
-	gdk_gl_get_glShaderOp3EXT
-	gdk_gl_get_glSharpenTexFuncSGIS
-	gdk_gl_get_glSpriteParameterfSGIX
-	gdk_gl_get_glSpriteParameterfvSGIX
-	gdk_gl_get_glSpriteParameteriSGIX
-	gdk_gl_get_glSpriteParameterivSGIX
-	gdk_gl_get_glStartInstrumentsSGIX
-	gdk_gl_get_glStencilFuncSeparateATI
-	gdk_gl_get_glStencilOpSeparateATI
-	gdk_gl_get_glStopInstrumentsSGIX
-	gdk_gl_get_glSwizzleEXT
-	gdk_gl_get_glTagSampleBufferSGIX
-	gdk_gl_get_glTangent3bEXT
-	gdk_gl_get_glTangent3bvEXT
-	gdk_gl_get_glTangent3dEXT
-	gdk_gl_get_glTangent3dvEXT
-	gdk_gl_get_glTangent3fEXT
-	gdk_gl_get_glTangent3fvEXT
-	gdk_gl_get_glTangent3iEXT
-	gdk_gl_get_glTangent3ivEXT
-	gdk_gl_get_glTangent3sEXT
-	gdk_gl_get_glTangent3svEXT
-	gdk_gl_get_glTangentPointerEXT
-	gdk_gl_get_glTbufferMask3DFX
-	gdk_gl_get_glTestFenceAPPLE
-	gdk_gl_get_glTestFenceNV
-	gdk_gl_get_glTestObjectAPPLE
-	gdk_gl_get_glTexBumpParameterfvATI
-	gdk_gl_get_glTexBumpParameterivATI
-	gdk_gl_get_glTexCoord1hNV
-	gdk_gl_get_glTexCoord1hvNV
-	gdk_gl_get_glTexCoord2fColor3fVertex3fSUN
-	gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN
-	gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN
-	gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN
-	gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN
-	gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN
-	gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN
-	gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN
-	gdk_gl_get_glTexCoord2fVertex3fSUN
-	gdk_gl_get_glTexCoord2fVertex3fvSUN
-	gdk_gl_get_glTexCoord2hNV
-	gdk_gl_get_glTexCoord2hvNV
-	gdk_gl_get_glTexCoord3hNV
-	gdk_gl_get_glTexCoord3hvNV
-	gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN
-	gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN
-	gdk_gl_get_glTexCoord4fVertex4fSUN
-	gdk_gl_get_glTexCoord4fVertex4fvSUN
-	gdk_gl_get_glTexCoord4hNV
-	gdk_gl_get_glTexCoord4hvNV
-	gdk_gl_get_glTexCoordPointerEXT
-	gdk_gl_get_glTexCoordPointerListIBM
-	gdk_gl_get_glTexCoordPointervINTEL
-	gdk_gl_get_glTexFilterFuncSGIS
-	gdk_gl_get_glTexImage3D
-	gdk_gl_get_glTexImage3DEXT
-	gdk_gl_get_glTexImage4DSGIS
-	gdk_gl_get_glTexSubImage1DEXT
-	gdk_gl_get_glTexSubImage2DEXT
-	gdk_gl_get_glTexSubImage3D
-	gdk_gl_get_glTexSubImage3DEXT
-	gdk_gl_get_glTexSubImage4DSGIS
-	gdk_gl_get_glTextureColorMaskSGIS
-	gdk_gl_get_glTextureFogSGIX
-	gdk_gl_get_glTextureLightEXT
-	gdk_gl_get_glTextureMaterialEXT
-	gdk_gl_get_glTextureNormalEXT
-	gdk_gl_get_glTextureRangeAPPLE
-	gdk_gl_get_glTrackMatrixNV
-	gdk_gl_get_glUnlockArraysEXT
-	gdk_gl_get_glUnmapBufferARB
-	gdk_gl_get_glUnmapObjectBufferATI
-	gdk_gl_get_glUpdateObjectBufferATI
-	gdk_gl_get_glValidBackBufferHint
-	gdk_gl_get_glVariantArrayObjectATI
-	gdk_gl_get_glVariantPointerEXT
-	gdk_gl_get_glVariantbvEXT
-	gdk_gl_get_glVariantdvEXT
-	gdk_gl_get_glVariantfvEXT
-	gdk_gl_get_glVariantivEXT
-	gdk_gl_get_glVariantsvEXT
-	gdk_gl_get_glVariantubvEXT
-	gdk_gl_get_glVariantuivEXT
-	gdk_gl_get_glVariantusvEXT
-	gdk_gl_get_glVertex2hNV
-	gdk_gl_get_glVertex2hvNV
-	gdk_gl_get_glVertex3hNV
-	gdk_gl_get_glVertex3hvNV
-	gdk_gl_get_glVertex4hNV
-	gdk_gl_get_glVertex4hvNV
-	gdk_gl_get_glVertexArrayParameteriAPPLE
-	gdk_gl_get_glVertexArrayRangeAPPLE
-	gdk_gl_get_glVertexArrayRangeNV
-	gdk_gl_get_glVertexAttrib1dARB
-	gdk_gl_get_glVertexAttrib1dNV
-	gdk_gl_get_glVertexAttrib1dvARB
-	gdk_gl_get_glVertexAttrib1dvNV
-	gdk_gl_get_glVertexAttrib1fARB
-	gdk_gl_get_glVertexAttrib1fNV
-	gdk_gl_get_glVertexAttrib1fvARB
-	gdk_gl_get_glVertexAttrib1fvNV
-	gdk_gl_get_glVertexAttrib1hNV
-	gdk_gl_get_glVertexAttrib1hvNV
-	gdk_gl_get_glVertexAttrib1sARB
-	gdk_gl_get_glVertexAttrib1sNV
-	gdk_gl_get_glVertexAttrib1svARB
-	gdk_gl_get_glVertexAttrib1svNV
-	gdk_gl_get_glVertexAttrib2dARB
-	gdk_gl_get_glVertexAttrib2dNV
-	gdk_gl_get_glVertexAttrib2dvARB
-	gdk_gl_get_glVertexAttrib2dvNV
-	gdk_gl_get_glVertexAttrib2fARB
-	gdk_gl_get_glVertexAttrib2fNV
-	gdk_gl_get_glVertexAttrib2fvARB
-	gdk_gl_get_glVertexAttrib2fvNV
-	gdk_gl_get_glVertexAttrib2hNV
-	gdk_gl_get_glVertexAttrib2hvNV
-	gdk_gl_get_glVertexAttrib2sARB
-	gdk_gl_get_glVertexAttrib2sNV
-	gdk_gl_get_glVertexAttrib2svARB
-	gdk_gl_get_glVertexAttrib2svNV
-	gdk_gl_get_glVertexAttrib3dARB
-	gdk_gl_get_glVertexAttrib3dNV
-	gdk_gl_get_glVertexAttrib3dvARB
-	gdk_gl_get_glVertexAttrib3dvNV
-	gdk_gl_get_glVertexAttrib3fARB
-	gdk_gl_get_glVertexAttrib3fNV
-	gdk_gl_get_glVertexAttrib3fvARB
-	gdk_gl_get_glVertexAttrib3fvNV
-	gdk_gl_get_glVertexAttrib3hNV
-	gdk_gl_get_glVertexAttrib3hvNV
-	gdk_gl_get_glVertexAttrib3sARB
-	gdk_gl_get_glVertexAttrib3sNV
-	gdk_gl_get_glVertexAttrib3svARB
-	gdk_gl_get_glVertexAttrib3svNV
-	gdk_gl_get_glVertexAttrib4NbvARB
-	gdk_gl_get_glVertexAttrib4NivARB
-	gdk_gl_get_glVertexAttrib4NsvARB
-	gdk_gl_get_glVertexAttrib4NubARB
-	gdk_gl_get_glVertexAttrib4NubvARB
-	gdk_gl_get_glVertexAttrib4NuivARB
-	gdk_gl_get_glVertexAttrib4NusvARB
-	gdk_gl_get_glVertexAttrib4bvARB
-	gdk_gl_get_glVertexAttrib4dARB
-	gdk_gl_get_glVertexAttrib4dNV
-	gdk_gl_get_glVertexAttrib4dvARB
-	gdk_gl_get_glVertexAttrib4dvNV
-	gdk_gl_get_glVertexAttrib4fARB
-	gdk_gl_get_glVertexAttrib4fNV
-	gdk_gl_get_glVertexAttrib4fvARB
-	gdk_gl_get_glVertexAttrib4fvNV
-	gdk_gl_get_glVertexAttrib4hNV
-	gdk_gl_get_glVertexAttrib4hvNV
-	gdk_gl_get_glVertexAttrib4ivARB
-	gdk_gl_get_glVertexAttrib4sARB
-	gdk_gl_get_glVertexAttrib4sNV
-	gdk_gl_get_glVertexAttrib4svARB
-	gdk_gl_get_glVertexAttrib4svNV
-	gdk_gl_get_glVertexAttrib4ubNV
-	gdk_gl_get_glVertexAttrib4ubvARB
-	gdk_gl_get_glVertexAttrib4ubvNV
-	gdk_gl_get_glVertexAttrib4uivARB
-	gdk_gl_get_glVertexAttrib4usvARB
-	gdk_gl_get_glVertexAttribArrayObjectATI
-	gdk_gl_get_glVertexAttribPointerARB
-	gdk_gl_get_glVertexAttribPointerNV
-	gdk_gl_get_glVertexAttribs1dvNV
-	gdk_gl_get_glVertexAttribs1fvNV
-	gdk_gl_get_glVertexAttribs1hvNV
-	gdk_gl_get_glVertexAttribs1svNV
-	gdk_gl_get_glVertexAttribs2dvNV
-	gdk_gl_get_glVertexAttribs2fvNV
-	gdk_gl_get_glVertexAttribs2hvNV
-	gdk_gl_get_glVertexAttribs2svNV
-	gdk_gl_get_glVertexAttribs3dvNV
-	gdk_gl_get_glVertexAttribs3fvNV
-	gdk_gl_get_glVertexAttribs3hvNV
-	gdk_gl_get_glVertexAttribs3svNV
-	gdk_gl_get_glVertexAttribs4dvNV
-	gdk_gl_get_glVertexAttribs4fvNV
-	gdk_gl_get_glVertexAttribs4hvNV
-	gdk_gl_get_glVertexAttribs4svNV
-	gdk_gl_get_glVertexAttribs4ubvNV
-	gdk_gl_get_glVertexBlendARB
-	gdk_gl_get_glVertexBlendEnvfATI
-	gdk_gl_get_glVertexBlendEnviATI
-	gdk_gl_get_glVertexPointerEXT
-	gdk_gl_get_glVertexPointerListIBM
-	gdk_gl_get_glVertexPointervINTEL
-	gdk_gl_get_glVertexStream1dATI
-	gdk_gl_get_glVertexStream1dvATI
-	gdk_gl_get_glVertexStream1fATI
-	gdk_gl_get_glVertexStream1fvATI
-	gdk_gl_get_glVertexStream1iATI
-	gdk_gl_get_glVertexStream1ivATI
-	gdk_gl_get_glVertexStream1sATI
-	gdk_gl_get_glVertexStream1svATI
-	gdk_gl_get_glVertexStream2dATI
-	gdk_gl_get_glVertexStream2dvATI
-	gdk_gl_get_glVertexStream2fATI
-	gdk_gl_get_glVertexStream2fvATI
-	gdk_gl_get_glVertexStream2iATI
-	gdk_gl_get_glVertexStream2ivATI
-	gdk_gl_get_glVertexStream2sATI
-	gdk_gl_get_glVertexStream2svATI
-	gdk_gl_get_glVertexStream3dATI
-	gdk_gl_get_glVertexStream3dvATI
-	gdk_gl_get_glVertexStream3fATI
-	gdk_gl_get_glVertexStream3fvATI
-	gdk_gl_get_glVertexStream3iATI
-	gdk_gl_get_glVertexStream3ivATI
-	gdk_gl_get_glVertexStream3sATI
-	gdk_gl_get_glVertexStream3svATI
-	gdk_gl_get_glVertexStream4dATI
-	gdk_gl_get_glVertexStream4dvATI
-	gdk_gl_get_glVertexStream4fATI
-	gdk_gl_get_glVertexStream4fvATI
-	gdk_gl_get_glVertexStream4iATI
-	gdk_gl_get_glVertexStream4ivATI
-	gdk_gl_get_glVertexStream4sATI
-	gdk_gl_get_glVertexStream4svATI
-	gdk_gl_get_glVertexWeightPointerEXT
-	gdk_gl_get_glVertexWeightfEXT
-	gdk_gl_get_glVertexWeightfvEXT
-	gdk_gl_get_glVertexWeighthNV
-	gdk_gl_get_glVertexWeighthvNV
-	gdk_gl_get_glWeightPointerARB
-	gdk_gl_get_glWeightbvARB
-	gdk_gl_get_glWeightdvARB
-	gdk_gl_get_glWeightfvARB
-	gdk_gl_get_glWeightivARB
-	gdk_gl_get_glWeightsvARB
-	gdk_gl_get_glWeightubvARB
-	gdk_gl_get_glWeightuivARB
-	gdk_gl_get_glWeightusvARB
-	gdk_gl_get_glWindowBackBufferHint
-	gdk_gl_get_glWindowPos2d
-	gdk_gl_get_glWindowPos2dARB
-	gdk_gl_get_glWindowPos2dMESA
-	gdk_gl_get_glWindowPos2dv
-	gdk_gl_get_glWindowPos2dvARB
-	gdk_gl_get_glWindowPos2dvMESA
-	gdk_gl_get_glWindowPos2f
-	gdk_gl_get_glWindowPos2fARB
-	gdk_gl_get_glWindowPos2fMESA
-	gdk_gl_get_glWindowPos2fv
-	gdk_gl_get_glWindowPos2fvARB
-	gdk_gl_get_glWindowPos2fvMESA
-	gdk_gl_get_glWindowPos2i
-	gdk_gl_get_glWindowPos2iARB
-	gdk_gl_get_glWindowPos2iMESA
-	gdk_gl_get_glWindowPos2iv
-	gdk_gl_get_glWindowPos2ivARB
-	gdk_gl_get_glWindowPos2ivMESA
-	gdk_gl_get_glWindowPos2s
-	gdk_gl_get_glWindowPos2sARB
-	gdk_gl_get_glWindowPos2sMESA
-	gdk_gl_get_glWindowPos2sv
-	gdk_gl_get_glWindowPos2svARB
-	gdk_gl_get_glWindowPos2svMESA
-	gdk_gl_get_glWindowPos3d
-	gdk_gl_get_glWindowPos3dARB
-	gdk_gl_get_glWindowPos3dMESA
-	gdk_gl_get_glWindowPos3dv
-	gdk_gl_get_glWindowPos3dvARB
-	gdk_gl_get_glWindowPos3dvMESA
-	gdk_gl_get_glWindowPos3f
-	gdk_gl_get_glWindowPos3fARB
-	gdk_gl_get_glWindowPos3fMESA
-	gdk_gl_get_glWindowPos3fv
-	gdk_gl_get_glWindowPos3fvARB
-	gdk_gl_get_glWindowPos3fvMESA
-	gdk_gl_get_glWindowPos3i
-	gdk_gl_get_glWindowPos3iARB
-	gdk_gl_get_glWindowPos3iMESA
-	gdk_gl_get_glWindowPos3iv
-	gdk_gl_get_glWindowPos3ivARB
-	gdk_gl_get_glWindowPos3ivMESA
-	gdk_gl_get_glWindowPos3s
-	gdk_gl_get_glWindowPos3sARB
-	gdk_gl_get_glWindowPos3sMESA
-	gdk_gl_get_glWindowPos3sv
-	gdk_gl_get_glWindowPos3svARB
-	gdk_gl_get_glWindowPos3svMESA
-	gdk_gl_get_glWindowPos4dMESA
-	gdk_gl_get_glWindowPos4dvMESA
-	gdk_gl_get_glWindowPos4fMESA
-	gdk_gl_get_glWindowPos4fvMESA
-	gdk_gl_get_glWindowPos4iMESA
-	gdk_gl_get_glWindowPos4ivMESA
-	gdk_gl_get_glWindowPos4sMESA
-	gdk_gl_get_glWindowPos4svMESA
-	gdk_gl_get_glWriteMaskEXT
-	gdk_gl_get_proc_address
-	gdk_gl_get_wglAllocateMemoryNV
-	gdk_gl_get_wglAssociateImageBufferEventsI3D
-	gdk_gl_get_wglBeginFrameTrackingI3D
-	gdk_gl_get_wglBindDisplayColorTableEXT
-	gdk_gl_get_wglBindTexImageARB
-	gdk_gl_get_wglChoosePixelFormatARB
-	gdk_gl_get_wglChoosePixelFormatEXT
-	gdk_gl_get_wglCreateBufferRegionARB
-	gdk_gl_get_wglCreateDisplayColorTableEXT
-	gdk_gl_get_wglCreateImageBufferI3D
-	gdk_gl_get_wglCreatePbufferARB
-	gdk_gl_get_wglCreatePbufferEXT
-	gdk_gl_get_wglDeleteBufferRegionARB
-	gdk_gl_get_wglDestroyDisplayColorTableEXT
-	gdk_gl_get_wglDestroyImageBufferI3D
-	gdk_gl_get_wglDestroyPbufferARB
-	gdk_gl_get_wglDestroyPbufferEXT
-	gdk_gl_get_wglDisableFrameLockI3D
-	gdk_gl_get_wglDisableGenlockI3D
-	gdk_gl_get_wglEnableFrameLockI3D
-	gdk_gl_get_wglEnableGenlockI3D
-	gdk_gl_get_wglEndFrameTrackingI3D
-	gdk_gl_get_wglFreeMemoryNV
-	gdk_gl_get_wglGenlockSampleRateI3D
-	gdk_gl_get_wglGenlockSourceDelayI3D
-	gdk_gl_get_wglGenlockSourceEdgeI3D
-	gdk_gl_get_wglGenlockSourceI3D
-	gdk_gl_get_wglGetCurrentReadDCARB
-	gdk_gl_get_wglGetCurrentReadDCEXT
-	gdk_gl_get_wglGetDigitalVideoParametersI3D
-	gdk_gl_get_wglGetExtensionsStringARB
-	gdk_gl_get_wglGetExtensionsStringEXT
-	gdk_gl_get_wglGetFrameUsageI3D
-	gdk_gl_get_wglGetGammaTableI3D
-	gdk_gl_get_wglGetGammaTableParametersI3D
-	gdk_gl_get_wglGetGenlockSampleRateI3D
-	gdk_gl_get_wglGetGenlockSourceDelayI3D
-	gdk_gl_get_wglGetGenlockSourceEdgeI3D
-	gdk_gl_get_wglGetGenlockSourceI3D
-	gdk_gl_get_wglGetMscRateOML
-	gdk_gl_get_wglGetPbufferDCARB
-	gdk_gl_get_wglGetPbufferDCEXT
-	gdk_gl_get_wglGetPixelFormatAttribfvARB
-	gdk_gl_get_wglGetPixelFormatAttribfvEXT
-	gdk_gl_get_wglGetPixelFormatAttribivARB
-	gdk_gl_get_wglGetPixelFormatAttribivEXT
-	gdk_gl_get_wglGetSwapIntervalEXT
-	gdk_gl_get_wglGetSyncValuesOML
-	gdk_gl_get_wglIsEnabledFrameLockI3D
-	gdk_gl_get_wglIsEnabledGenlockI3D
-	gdk_gl_get_wglLoadDisplayColorTableEXT
-	gdk_gl_get_wglMakeContextCurrentARB
-	gdk_gl_get_wglMakeContextCurrentEXT
-	gdk_gl_get_wglQueryFrameLockMasterI3D
-	gdk_gl_get_wglQueryFrameTrackingI3D
-	gdk_gl_get_wglQueryGenlockMaxSourceDelayI3D
-	gdk_gl_get_wglQueryPbufferARB
-	gdk_gl_get_wglQueryPbufferEXT
-	gdk_gl_get_wglReleaseImageBufferEventsI3D
-	gdk_gl_get_wglReleasePbufferDCARB
-	gdk_gl_get_wglReleasePbufferDCEXT
-	gdk_gl_get_wglReleaseTexImageARB
-	gdk_gl_get_wglRestoreBufferRegionARB
-	gdk_gl_get_wglSaveBufferRegionARB
-	gdk_gl_get_wglSetDigitalVideoParametersI3D
-	gdk_gl_get_wglSetGammaTableI3D
-	gdk_gl_get_wglSetGammaTableParametersI3D
-	gdk_gl_get_wglSetPbufferAttribARB
-	gdk_gl_get_wglSwapBuffersMscOML
-	gdk_gl_get_wglSwapIntervalEXT
-	gdk_gl_get_wglSwapLayerBuffersMscOML
-	gdk_gl_get_wglWaitForMscOML
-	gdk_gl_get_wglWaitForSbcOML
-	gdk_gl_init
-	gdk_gl_init_check
-	gdk_gl_parse_args
-	gdk_gl_pbuffer_attrib_get_type
-	gdk_gl_pixmap_destroy
-	gdk_gl_pixmap_get_pixmap
-	gdk_gl_pixmap_get_type
-	gdk_gl_pixmap_new
-	gdk_gl_query_extension
-	gdk_gl_query_gl_extension
-	gdk_gl_query_version
-	gdk_gl_render_type_get_type
-	gdk_gl_render_type_mask_get_type
-	gdk_gl_transparent_type_get_type
-	gdk_gl_visual_type_get_type
-	gdk_gl_window_destroy
-	gdk_gl_window_get_type
-	gdk_gl_window_get_window
-	gdk_gl_window_new
-	gdk_pixmap_get_gl_pixmap
-	gdk_pixmap_is_gl_capable
-	gdk_pixmap_set_gl_capability
-	gdk_pixmap_unset_gl_capability
-	gdk_win32_gl_config_get_pfd
-	gdk_win32_gl_config_new_from_pixel_format
-	gdk_win32_gl_context_foreign_new
-	gdk_win32_gl_context_get_hglrc
-	gdk_win32_gl_drawable_hdc_get
-	gdk_win32_gl_drawable_hdc_release
-	gdk_win32_gl_pixmap_get_pfd
-	gdk_win32_gl_pixmap_get_pixel_format
-	gdk_win32_gl_query_wgl_extension
-	gdk_win32_gl_window_get_pfd
-	gdk_win32_gl_window_get_pixel_format
-	gdk_window_get_gl_window
-	gdk_window_is_gl_capable
-	gdk_window_set_gl_capability
-	gdk_window_unset_gl_capability
-	gdkglext_binary_age
-	gdkglext_interface_age
-	gdkglext_major_version
-	gdkglext_micro_version
-	gdkglext_minor_version
diff --git a/gdk/gdkglext.def b/gdk/gdkglext.def
index b3b54cb..16a037f 100644
--- a/gdk/gdkglext.def
+++ b/gdk/gdkglext.def
@@ -25,7 +25,6 @@ EXPORTS
 	gdk_gl_config_new_by_mode_for_screen
 	gdk_gl_config_new_for_screen
 	gdk_gl_context_copy
-	gdk_gl_context_destroy
 	gdk_gl_context_get_current
 	gdk_gl_context_get_gl_config
 	gdk_gl_context_get_gl_drawable
@@ -35,15 +34,6 @@ EXPORTS
 	gdk_gl_context_is_direct
 	gdk_gl_context_new
 	gdk_gl_debug_flags
-	gdk_gl_draw_cone
-	gdk_gl_draw_cube
-	gdk_gl_draw_dodecahedron
-	gdk_gl_draw_icosahedron
-	gdk_gl_draw_octahedron
-	gdk_gl_draw_sphere
-	gdk_gl_draw_teapot
-	gdk_gl_draw_tetrahedron
-	gdk_gl_draw_torus
 	gdk_gl_drawable_attrib_get_type
 	gdk_gl_drawable_get_current
 	gdk_gl_drawable_get_gl_config
@@ -1317,7 +1307,6 @@ EXPORTS
 	gdk_gl_init_check
 	gdk_gl_parse_args
 	gdk_gl_pbuffer_attrib_get_type
-	gdk_gl_pixmap_destroy
 	gdk_gl_pixmap_get_pixmap
 	gdk_gl_pixmap_get_type
 	gdk_gl_pixmap_new
@@ -1330,7 +1319,6 @@ EXPORTS
 	gdk_gl_render_type_mask_get_type
 	gdk_gl_transparent_type_get_type
 	gdk_gl_visual_type_get_type
-	gdk_gl_window_destroy
 	gdk_gl_window_get_type
 	gdk_gl_window_get_window
 	gdk_gl_window_new
diff --git a/gdk/gdkglfont.h b/gdk/gdkglfont.h
deleted file mode 100644
index 6aaca13..0000000
--- a/gdk/gdkglfont.h
+++ /dev/null
@@ -1,44 +0,0 @@
-/* GdkGLExt - OpenGL Extension to GDK
- * Copyright (C) 2002-2004  Naofumi Yasufuku
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
- */
-
-#ifndef __GDK_GL_FONT_H__
-#define __GDK_GL_FONT_H__
-
-#include <gdk/gdkgldefs.h>
-#include <gdk/gdkgltypes.h>
-
-G_BEGIN_DECLS
-
-#ifndef GDK_MULTIHEAD_SAFE
-PangoFont *gdk_gl_font_use_pango_font             (const PangoFontDescription *font_desc,
-                                                   int                         first,
-                                                   int                         count,
-                                                   int                         list_base);
-#endif /* GDK_MULTIHEAD_SAFE */
-
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-PangoFont *gdk_gl_font_use_pango_font_for_display (GdkDisplay                 *display,
-                                                   const PangoFontDescription *font_desc,
-                                                   int                         first,
-                                                   int                         count,
-                                                   int                         list_base);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
-G_END_DECLS
-
-#endif /* __GDK_GL_FONT_H__ */
diff --git a/gdk/gdkglglext.c b/gdk/gdkglglext.c
index 2bee4c3..c6ff15e 100644
--- a/gdk/gdkglglext.c
+++ b/gdk/gdkglglext.c
@@ -20,6 +20,10 @@
  * This is a generated file.  Please modify "gen-gdkglglext-c.pl".
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglprivate.h"
 #include "gdkglquery.h"
 #include "gdkglcontext.h"
@@ -33,38 +37,6 @@ static GdkGL_GL_VERSION_1_2 _procs_GL_VERSION_1_2 = {
   (GdkGLProc_glBlendColor) -1,
   (GdkGLProc_glBlendEquation) -1,
   (GdkGLProc_glDrawRangeElements) -1,
-  (GdkGLProc_glColorTable) -1,
-  (GdkGLProc_glColorTableParameterfv) -1,
-  (GdkGLProc_glColorTableParameteriv) -1,
-  (GdkGLProc_glCopyColorTable) -1,
-  (GdkGLProc_glGetColorTable) -1,
-  (GdkGLProc_glGetColorTableParameterfv) -1,
-  (GdkGLProc_glGetColorTableParameteriv) -1,
-  (GdkGLProc_glColorSubTable) -1,
-  (GdkGLProc_glCopyColorSubTable) -1,
-  (GdkGLProc_glConvolutionFilter1D) -1,
-  (GdkGLProc_glConvolutionFilter2D) -1,
-  (GdkGLProc_glConvolutionParameterf) -1,
-  (GdkGLProc_glConvolutionParameterfv) -1,
-  (GdkGLProc_glConvolutionParameteri) -1,
-  (GdkGLProc_glConvolutionParameteriv) -1,
-  (GdkGLProc_glCopyConvolutionFilter1D) -1,
-  (GdkGLProc_glCopyConvolutionFilter2D) -1,
-  (GdkGLProc_glGetConvolutionFilter) -1,
-  (GdkGLProc_glGetConvolutionParameterfv) -1,
-  (GdkGLProc_glGetConvolutionParameteriv) -1,
-  (GdkGLProc_glGetSeparableFilter) -1,
-  (GdkGLProc_glSeparableFilter2D) -1,
-  (GdkGLProc_glGetHistogram) -1,
-  (GdkGLProc_glGetHistogramParameterfv) -1,
-  (GdkGLProc_glGetHistogramParameteriv) -1,
-  (GdkGLProc_glGetMinmax) -1,
-  (GdkGLProc_glGetMinmaxParameterfv) -1,
-  (GdkGLProc_glGetMinmaxParameteriv) -1,
-  (GdkGLProc_glHistogram) -1,
-  (GdkGLProc_glMinmax) -1,
-  (GdkGLProc_glResetHistogram) -1,
-  (GdkGLProc_glResetMinmax) -1,
   (GdkGLProc_glTexImage3D) -1,
   (GdkGLProc_glTexSubImage3D) -1,
   (GdkGLProc_glCopyTexSubImage3D) -1
@@ -124,6 +96,128 @@ gdk_gl_get_glDrawRangeElements (void)
   return (GdkGLProc) (_procs_GL_VERSION_1_2.glDrawRangeElements);
 }
 
+/* glTexImage3D */
+GdkGLProc
+gdk_gl_get_glTexImage3D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_2.glTexImage3D == (GdkGLProc_glTexImage3D) -1)
+    _procs_GL_VERSION_1_2.glTexImage3D =
+      (GdkGLProc_glTexImage3D) gdk_gl_get_proc_address ("glTexImage3D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexImage3D () - %s",
+               (_procs_GL_VERSION_1_2.glTexImage3D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_2.glTexImage3D);
+}
+
+/* glTexSubImage3D */
+GdkGLProc
+gdk_gl_get_glTexSubImage3D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_2.glTexSubImage3D == (GdkGLProc_glTexSubImage3D) -1)
+    _procs_GL_VERSION_1_2.glTexSubImage3D =
+      (GdkGLProc_glTexSubImage3D) gdk_gl_get_proc_address ("glTexSubImage3D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexSubImage3D () - %s",
+               (_procs_GL_VERSION_1_2.glTexSubImage3D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_2.glTexSubImage3D);
+}
+
+/* glCopyTexSubImage3D */
+GdkGLProc
+gdk_gl_get_glCopyTexSubImage3D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_2.glCopyTexSubImage3D == (GdkGLProc_glCopyTexSubImage3D) -1)
+    _procs_GL_VERSION_1_2.glCopyTexSubImage3D =
+      (GdkGLProc_glCopyTexSubImage3D) gdk_gl_get_proc_address ("glCopyTexSubImage3D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyTexSubImage3D () - %s",
+               (_procs_GL_VERSION_1_2.glCopyTexSubImage3D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_2.glCopyTexSubImage3D);
+}
+
+/* Get GL_VERSION_1_2 functions */
+GdkGL_GL_VERSION_1_2 *
+gdk_gl_get_GL_VERSION_1_2 (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported =  (gdk_gl_get_glBlendColor () != NULL);
+      supported &= (gdk_gl_get_glBlendEquation () != NULL);
+      supported &= (gdk_gl_get_glDrawRangeElements () != NULL);
+      supported &= (gdk_gl_get_glTexImage3D () != NULL);
+      supported &= (gdk_gl_get_glTexSubImage3D () != NULL);
+      supported &= (gdk_gl_get_glCopyTexSubImage3D () != NULL);
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_VERSION_1_2 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_VERSION_1_2;
+}
+
+/*
+ * GL_VERSION_1_2_DEPRECATED
+ */
+
+static GdkGL_GL_VERSION_1_2_DEPRECATED _procs_GL_VERSION_1_2_DEPRECATED = {
+  (GdkGLProc_glColorTable) -1,
+  (GdkGLProc_glColorTableParameterfv) -1,
+  (GdkGLProc_glColorTableParameteriv) -1,
+  (GdkGLProc_glCopyColorTable) -1,
+  (GdkGLProc_glGetColorTable) -1,
+  (GdkGLProc_glGetColorTableParameterfv) -1,
+  (GdkGLProc_glGetColorTableParameteriv) -1,
+  (GdkGLProc_glColorSubTable) -1,
+  (GdkGLProc_glCopyColorSubTable) -1,
+  (GdkGLProc_glConvolutionFilter1D) -1,
+  (GdkGLProc_glConvolutionFilter2D) -1,
+  (GdkGLProc_glConvolutionParameterf) -1,
+  (GdkGLProc_glConvolutionParameterfv) -1,
+  (GdkGLProc_glConvolutionParameteri) -1,
+  (GdkGLProc_glConvolutionParameteriv) -1,
+  (GdkGLProc_glCopyConvolutionFilter1D) -1,
+  (GdkGLProc_glCopyConvolutionFilter2D) -1,
+  (GdkGLProc_glGetConvolutionFilter) -1,
+  (GdkGLProc_glGetConvolutionParameterfv) -1,
+  (GdkGLProc_glGetConvolutionParameteriv) -1,
+  (GdkGLProc_glGetSeparableFilter) -1,
+  (GdkGLProc_glSeparableFilter2D) -1,
+  (GdkGLProc_glGetHistogram) -1,
+  (GdkGLProc_glGetHistogramParameterfv) -1,
+  (GdkGLProc_glGetHistogramParameteriv) -1,
+  (GdkGLProc_glGetMinmax) -1,
+  (GdkGLProc_glGetMinmaxParameterfv) -1,
+  (GdkGLProc_glGetMinmaxParameteriv) -1,
+  (GdkGLProc_glHistogram) -1,
+  (GdkGLProc_glMinmax) -1,
+  (GdkGLProc_glResetHistogram) -1,
+  (GdkGLProc_glResetMinmax) -1
+};
+
 /* glColorTable */
 GdkGLProc
 gdk_gl_get_glColorTable (void)
@@ -131,15 +225,15 @@ gdk_gl_get_glColorTable (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glColorTable == (GdkGLProc_glColorTable) -1)
-    _procs_GL_VERSION_1_2.glColorTable =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glColorTable == (GdkGLProc_glColorTable) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glColorTable =
       (GdkGLProc_glColorTable) gdk_gl_get_proc_address ("glColorTable");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glColorTable () - %s",
-               (_procs_GL_VERSION_1_2.glColorTable) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glColorTable) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glColorTable);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glColorTable);
 }
 
 /* glColorTableParameterfv */
@@ -149,15 +243,15 @@ gdk_gl_get_glColorTableParameterfv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glColorTableParameterfv == (GdkGLProc_glColorTableParameterfv) -1)
-    _procs_GL_VERSION_1_2.glColorTableParameterfv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameterfv == (GdkGLProc_glColorTableParameterfv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameterfv =
       (GdkGLProc_glColorTableParameterfv) gdk_gl_get_proc_address ("glColorTableParameterfv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glColorTableParameterfv () - %s",
-               (_procs_GL_VERSION_1_2.glColorTableParameterfv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameterfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glColorTableParameterfv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameterfv);
 }
 
 /* glColorTableParameteriv */
@@ -167,15 +261,15 @@ gdk_gl_get_glColorTableParameteriv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glColorTableParameteriv == (GdkGLProc_glColorTableParameteriv) -1)
-    _procs_GL_VERSION_1_2.glColorTableParameteriv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameteriv == (GdkGLProc_glColorTableParameteriv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameteriv =
       (GdkGLProc_glColorTableParameteriv) gdk_gl_get_proc_address ("glColorTableParameteriv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glColorTableParameteriv () - %s",
-               (_procs_GL_VERSION_1_2.glColorTableParameteriv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameteriv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glColorTableParameteriv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glColorTableParameteriv);
 }
 
 /* glCopyColorTable */
@@ -185,15 +279,15 @@ gdk_gl_get_glCopyColorTable (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glCopyColorTable == (GdkGLProc_glCopyColorTable) -1)
-    _procs_GL_VERSION_1_2.glCopyColorTable =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glCopyColorTable == (GdkGLProc_glCopyColorTable) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glCopyColorTable =
       (GdkGLProc_glCopyColorTable) gdk_gl_get_proc_address ("glCopyColorTable");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glCopyColorTable () - %s",
-               (_procs_GL_VERSION_1_2.glCopyColorTable) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glCopyColorTable) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glCopyColorTable);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glCopyColorTable);
 }
 
 /* glGetColorTable */
@@ -203,15 +297,15 @@ gdk_gl_get_glGetColorTable (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetColorTable == (GdkGLProc_glGetColorTable) -1)
-    _procs_GL_VERSION_1_2.glGetColorTable =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTable == (GdkGLProc_glGetColorTable) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetColorTable =
       (GdkGLProc_glGetColorTable) gdk_gl_get_proc_address ("glGetColorTable");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetColorTable () - %s",
-               (_procs_GL_VERSION_1_2.glGetColorTable) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTable) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetColorTable);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTable);
 }
 
 /* glGetColorTableParameterfv */
@@ -221,15 +315,15 @@ gdk_gl_get_glGetColorTableParameterfv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetColorTableParameterfv == (GdkGLProc_glGetColorTableParameterfv) -1)
-    _procs_GL_VERSION_1_2.glGetColorTableParameterfv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameterfv == (GdkGLProc_glGetColorTableParameterfv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameterfv =
       (GdkGLProc_glGetColorTableParameterfv) gdk_gl_get_proc_address ("glGetColorTableParameterfv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetColorTableParameterfv () - %s",
-               (_procs_GL_VERSION_1_2.glGetColorTableParameterfv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameterfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetColorTableParameterfv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameterfv);
 }
 
 /* glGetColorTableParameteriv */
@@ -239,15 +333,15 @@ gdk_gl_get_glGetColorTableParameteriv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetColorTableParameteriv == (GdkGLProc_glGetColorTableParameteriv) -1)
-    _procs_GL_VERSION_1_2.glGetColorTableParameteriv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameteriv == (GdkGLProc_glGetColorTableParameteriv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameteriv =
       (GdkGLProc_glGetColorTableParameteriv) gdk_gl_get_proc_address ("glGetColorTableParameteriv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetColorTableParameteriv () - %s",
-               (_procs_GL_VERSION_1_2.glGetColorTableParameteriv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameteriv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetColorTableParameteriv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetColorTableParameteriv);
 }
 
 /* glColorSubTable */
@@ -257,15 +351,15 @@ gdk_gl_get_glColorSubTable (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glColorSubTable == (GdkGLProc_glColorSubTable) -1)
-    _procs_GL_VERSION_1_2.glColorSubTable =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glColorSubTable == (GdkGLProc_glColorSubTable) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glColorSubTable =
       (GdkGLProc_glColorSubTable) gdk_gl_get_proc_address ("glColorSubTable");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glColorSubTable () - %s",
-               (_procs_GL_VERSION_1_2.glColorSubTable) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glColorSubTable) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glColorSubTable);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glColorSubTable);
 }
 
 /* glCopyColorSubTable */
@@ -275,15 +369,15 @@ gdk_gl_get_glCopyColorSubTable (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glCopyColorSubTable == (GdkGLProc_glCopyColorSubTable) -1)
-    _procs_GL_VERSION_1_2.glCopyColorSubTable =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glCopyColorSubTable == (GdkGLProc_glCopyColorSubTable) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glCopyColorSubTable =
       (GdkGLProc_glCopyColorSubTable) gdk_gl_get_proc_address ("glCopyColorSubTable");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glCopyColorSubTable () - %s",
-               (_procs_GL_VERSION_1_2.glCopyColorSubTable) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glCopyColorSubTable) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glCopyColorSubTable);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glCopyColorSubTable);
 }
 
 /* glConvolutionFilter1D */
@@ -293,15 +387,15 @@ gdk_gl_get_glConvolutionFilter1D (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glConvolutionFilter1D == (GdkGLProc_glConvolutionFilter1D) -1)
-    _procs_GL_VERSION_1_2.glConvolutionFilter1D =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter1D == (GdkGLProc_glConvolutionFilter1D) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter1D =
       (GdkGLProc_glConvolutionFilter1D) gdk_gl_get_proc_address ("glConvolutionFilter1D");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glConvolutionFilter1D () - %s",
-               (_procs_GL_VERSION_1_2.glConvolutionFilter1D) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter1D) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glConvolutionFilter1D);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter1D);
 }
 
 /* glConvolutionFilter2D */
@@ -311,15 +405,15 @@ gdk_gl_get_glConvolutionFilter2D (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glConvolutionFilter2D == (GdkGLProc_glConvolutionFilter2D) -1)
-    _procs_GL_VERSION_1_2.glConvolutionFilter2D =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter2D == (GdkGLProc_glConvolutionFilter2D) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter2D =
       (GdkGLProc_glConvolutionFilter2D) gdk_gl_get_proc_address ("glConvolutionFilter2D");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glConvolutionFilter2D () - %s",
-               (_procs_GL_VERSION_1_2.glConvolutionFilter2D) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter2D) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glConvolutionFilter2D);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionFilter2D);
 }
 
 /* glConvolutionParameterf */
@@ -329,15 +423,15 @@ gdk_gl_get_glConvolutionParameterf (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glConvolutionParameterf == (GdkGLProc_glConvolutionParameterf) -1)
-    _procs_GL_VERSION_1_2.glConvolutionParameterf =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterf == (GdkGLProc_glConvolutionParameterf) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterf =
       (GdkGLProc_glConvolutionParameterf) gdk_gl_get_proc_address ("glConvolutionParameterf");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glConvolutionParameterf () - %s",
-               (_procs_GL_VERSION_1_2.glConvolutionParameterf) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterf) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glConvolutionParameterf);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterf);
 }
 
 /* glConvolutionParameterfv */
@@ -347,15 +441,15 @@ gdk_gl_get_glConvolutionParameterfv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glConvolutionParameterfv == (GdkGLProc_glConvolutionParameterfv) -1)
-    _procs_GL_VERSION_1_2.glConvolutionParameterfv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterfv == (GdkGLProc_glConvolutionParameterfv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterfv =
       (GdkGLProc_glConvolutionParameterfv) gdk_gl_get_proc_address ("glConvolutionParameterfv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glConvolutionParameterfv () - %s",
-               (_procs_GL_VERSION_1_2.glConvolutionParameterfv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glConvolutionParameterfv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameterfv);
 }
 
 /* glConvolutionParameteri */
@@ -365,15 +459,15 @@ gdk_gl_get_glConvolutionParameteri (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glConvolutionParameteri == (GdkGLProc_glConvolutionParameteri) -1)
-    _procs_GL_VERSION_1_2.glConvolutionParameteri =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteri == (GdkGLProc_glConvolutionParameteri) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteri =
       (GdkGLProc_glConvolutionParameteri) gdk_gl_get_proc_address ("glConvolutionParameteri");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glConvolutionParameteri () - %s",
-               (_procs_GL_VERSION_1_2.glConvolutionParameteri) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteri) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glConvolutionParameteri);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteri);
 }
 
 /* glConvolutionParameteriv */
@@ -383,15 +477,15 @@ gdk_gl_get_glConvolutionParameteriv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glConvolutionParameteriv == (GdkGLProc_glConvolutionParameteriv) -1)
-    _procs_GL_VERSION_1_2.glConvolutionParameteriv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteriv == (GdkGLProc_glConvolutionParameteriv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteriv =
       (GdkGLProc_glConvolutionParameteriv) gdk_gl_get_proc_address ("glConvolutionParameteriv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glConvolutionParameteriv () - %s",
-               (_procs_GL_VERSION_1_2.glConvolutionParameteriv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteriv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glConvolutionParameteriv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glConvolutionParameteriv);
 }
 
 /* glCopyConvolutionFilter1D */
@@ -401,15 +495,15 @@ gdk_gl_get_glCopyConvolutionFilter1D (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glCopyConvolutionFilter1D == (GdkGLProc_glCopyConvolutionFilter1D) -1)
-    _procs_GL_VERSION_1_2.glCopyConvolutionFilter1D =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter1D == (GdkGLProc_glCopyConvolutionFilter1D) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter1D =
       (GdkGLProc_glCopyConvolutionFilter1D) gdk_gl_get_proc_address ("glCopyConvolutionFilter1D");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glCopyConvolutionFilter1D () - %s",
-               (_procs_GL_VERSION_1_2.glCopyConvolutionFilter1D) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter1D) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glCopyConvolutionFilter1D);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter1D);
 }
 
 /* glCopyConvolutionFilter2D */
@@ -419,15 +513,15 @@ gdk_gl_get_glCopyConvolutionFilter2D (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glCopyConvolutionFilter2D == (GdkGLProc_glCopyConvolutionFilter2D) -1)
-    _procs_GL_VERSION_1_2.glCopyConvolutionFilter2D =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter2D == (GdkGLProc_glCopyConvolutionFilter2D) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter2D =
       (GdkGLProc_glCopyConvolutionFilter2D) gdk_gl_get_proc_address ("glCopyConvolutionFilter2D");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glCopyConvolutionFilter2D () - %s",
-               (_procs_GL_VERSION_1_2.glCopyConvolutionFilter2D) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter2D) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glCopyConvolutionFilter2D);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glCopyConvolutionFilter2D);
 }
 
 /* glGetConvolutionFilter */
@@ -437,15 +531,15 @@ gdk_gl_get_glGetConvolutionFilter (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetConvolutionFilter == (GdkGLProc_glGetConvolutionFilter) -1)
-    _procs_GL_VERSION_1_2.glGetConvolutionFilter =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionFilter == (GdkGLProc_glGetConvolutionFilter) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionFilter =
       (GdkGLProc_glGetConvolutionFilter) gdk_gl_get_proc_address ("glGetConvolutionFilter");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetConvolutionFilter () - %s",
-               (_procs_GL_VERSION_1_2.glGetConvolutionFilter) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionFilter) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetConvolutionFilter);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionFilter);
 }
 
 /* glGetConvolutionParameterfv */
@@ -455,15 +549,15 @@ gdk_gl_get_glGetConvolutionParameterfv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetConvolutionParameterfv == (GdkGLProc_glGetConvolutionParameterfv) -1)
-    _procs_GL_VERSION_1_2.glGetConvolutionParameterfv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameterfv == (GdkGLProc_glGetConvolutionParameterfv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameterfv =
       (GdkGLProc_glGetConvolutionParameterfv) gdk_gl_get_proc_address ("glGetConvolutionParameterfv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetConvolutionParameterfv () - %s",
-               (_procs_GL_VERSION_1_2.glGetConvolutionParameterfv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameterfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetConvolutionParameterfv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameterfv);
 }
 
 /* glGetConvolutionParameteriv */
@@ -473,15 +567,15 @@ gdk_gl_get_glGetConvolutionParameteriv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetConvolutionParameteriv == (GdkGLProc_glGetConvolutionParameteriv) -1)
-    _procs_GL_VERSION_1_2.glGetConvolutionParameteriv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameteriv == (GdkGLProc_glGetConvolutionParameteriv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameteriv =
       (GdkGLProc_glGetConvolutionParameteriv) gdk_gl_get_proc_address ("glGetConvolutionParameteriv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetConvolutionParameteriv () - %s",
-               (_procs_GL_VERSION_1_2.glGetConvolutionParameteriv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameteriv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetConvolutionParameteriv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetConvolutionParameteriv);
 }
 
 /* glGetSeparableFilter */
@@ -491,15 +585,15 @@ gdk_gl_get_glGetSeparableFilter (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetSeparableFilter == (GdkGLProc_glGetSeparableFilter) -1)
-    _procs_GL_VERSION_1_2.glGetSeparableFilter =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetSeparableFilter == (GdkGLProc_glGetSeparableFilter) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetSeparableFilter =
       (GdkGLProc_glGetSeparableFilter) gdk_gl_get_proc_address ("glGetSeparableFilter");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetSeparableFilter () - %s",
-               (_procs_GL_VERSION_1_2.glGetSeparableFilter) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetSeparableFilter) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetSeparableFilter);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetSeparableFilter);
 }
 
 /* glSeparableFilter2D */
@@ -509,15 +603,15 @@ gdk_gl_get_glSeparableFilter2D (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glSeparableFilter2D == (GdkGLProc_glSeparableFilter2D) -1)
-    _procs_GL_VERSION_1_2.glSeparableFilter2D =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glSeparableFilter2D == (GdkGLProc_glSeparableFilter2D) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glSeparableFilter2D =
       (GdkGLProc_glSeparableFilter2D) gdk_gl_get_proc_address ("glSeparableFilter2D");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSeparableFilter2D () - %s",
-               (_procs_GL_VERSION_1_2.glSeparableFilter2D) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glSeparableFilter2D) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glSeparableFilter2D);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glSeparableFilter2D);
 }
 
 /* glGetHistogram */
@@ -527,15 +621,15 @@ gdk_gl_get_glGetHistogram (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetHistogram == (GdkGLProc_glGetHistogram) -1)
-    _procs_GL_VERSION_1_2.glGetHistogram =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogram == (GdkGLProc_glGetHistogram) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetHistogram =
       (GdkGLProc_glGetHistogram) gdk_gl_get_proc_address ("glGetHistogram");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetHistogram () - %s",
-               (_procs_GL_VERSION_1_2.glGetHistogram) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetHistogram);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogram);
 }
 
 /* glGetHistogramParameterfv */
@@ -545,15 +639,15 @@ gdk_gl_get_glGetHistogramParameterfv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetHistogramParameterfv == (GdkGLProc_glGetHistogramParameterfv) -1)
-    _procs_GL_VERSION_1_2.glGetHistogramParameterfv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameterfv == (GdkGLProc_glGetHistogramParameterfv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameterfv =
       (GdkGLProc_glGetHistogramParameterfv) gdk_gl_get_proc_address ("glGetHistogramParameterfv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetHistogramParameterfv () - %s",
-               (_procs_GL_VERSION_1_2.glGetHistogramParameterfv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameterfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetHistogramParameterfv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameterfv);
 }
 
 /* glGetHistogramParameteriv */
@@ -563,15 +657,15 @@ gdk_gl_get_glGetHistogramParameteriv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetHistogramParameteriv == (GdkGLProc_glGetHistogramParameteriv) -1)
-    _procs_GL_VERSION_1_2.glGetHistogramParameteriv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameteriv == (GdkGLProc_glGetHistogramParameteriv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameteriv =
       (GdkGLProc_glGetHistogramParameteriv) gdk_gl_get_proc_address ("glGetHistogramParameteriv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetHistogramParameteriv () - %s",
-               (_procs_GL_VERSION_1_2.glGetHistogramParameteriv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameteriv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetHistogramParameteriv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetHistogramParameteriv);
 }
 
 /* glGetMinmax */
@@ -581,15 +675,15 @@ gdk_gl_get_glGetMinmax (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetMinmax == (GdkGLProc_glGetMinmax) -1)
-    _procs_GL_VERSION_1_2.glGetMinmax =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmax == (GdkGLProc_glGetMinmax) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetMinmax =
       (GdkGLProc_glGetMinmax) gdk_gl_get_proc_address ("glGetMinmax");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetMinmax () - %s",
-               (_procs_GL_VERSION_1_2.glGetMinmax) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmax) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetMinmax);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmax);
 }
 
 /* glGetMinmaxParameterfv */
@@ -599,15 +693,15 @@ gdk_gl_get_glGetMinmaxParameterfv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetMinmaxParameterfv == (GdkGLProc_glGetMinmaxParameterfv) -1)
-    _procs_GL_VERSION_1_2.glGetMinmaxParameterfv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameterfv == (GdkGLProc_glGetMinmaxParameterfv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameterfv =
       (GdkGLProc_glGetMinmaxParameterfv) gdk_gl_get_proc_address ("glGetMinmaxParameterfv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetMinmaxParameterfv () - %s",
-               (_procs_GL_VERSION_1_2.glGetMinmaxParameterfv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameterfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetMinmaxParameterfv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameterfv);
 }
 
 /* glGetMinmaxParameteriv */
@@ -617,15 +711,15 @@ gdk_gl_get_glGetMinmaxParameteriv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glGetMinmaxParameteriv == (GdkGLProc_glGetMinmaxParameteriv) -1)
-    _procs_GL_VERSION_1_2.glGetMinmaxParameteriv =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameteriv == (GdkGLProc_glGetMinmaxParameteriv) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameteriv =
       (GdkGLProc_glGetMinmaxParameteriv) gdk_gl_get_proc_address ("glGetMinmaxParameteriv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glGetMinmaxParameteriv () - %s",
-               (_procs_GL_VERSION_1_2.glGetMinmaxParameteriv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameteriv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glGetMinmaxParameteriv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glGetMinmaxParameteriv);
 }
 
 /* glHistogram */
@@ -635,15 +729,15 @@ gdk_gl_get_glHistogram (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glHistogram == (GdkGLProc_glHistogram) -1)
-    _procs_GL_VERSION_1_2.glHistogram =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glHistogram == (GdkGLProc_glHistogram) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glHistogram =
       (GdkGLProc_glHistogram) gdk_gl_get_proc_address ("glHistogram");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glHistogram () - %s",
-               (_procs_GL_VERSION_1_2.glHistogram) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glHistogram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glHistogram);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glHistogram);
 }
 
 /* glMinmax */
@@ -653,15 +747,15 @@ gdk_gl_get_glMinmax (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glMinmax == (GdkGLProc_glMinmax) -1)
-    _procs_GL_VERSION_1_2.glMinmax =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glMinmax == (GdkGLProc_glMinmax) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glMinmax =
       (GdkGLProc_glMinmax) gdk_gl_get_proc_address ("glMinmax");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMinmax () - %s",
-               (_procs_GL_VERSION_1_2.glMinmax) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glMinmax) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glMinmax);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glMinmax);
 }
 
 /* glResetHistogram */
@@ -671,15 +765,15 @@ gdk_gl_get_glResetHistogram (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glResetHistogram == (GdkGLProc_glResetHistogram) -1)
-    _procs_GL_VERSION_1_2.glResetHistogram =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glResetHistogram == (GdkGLProc_glResetHistogram) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glResetHistogram =
       (GdkGLProc_glResetHistogram) gdk_gl_get_proc_address ("glResetHistogram");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glResetHistogram () - %s",
-               (_procs_GL_VERSION_1_2.glResetHistogram) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_2_DEPRECATED.glResetHistogram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glResetHistogram);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glResetHistogram);
 }
 
 /* glResetMinmax */
@@ -689,74 +783,20 @@ gdk_gl_get_glResetMinmax (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_2.glResetMinmax == (GdkGLProc_glResetMinmax) -1)
-    _procs_GL_VERSION_1_2.glResetMinmax =
+  if (_procs_GL_VERSION_1_2_DEPRECATED.glResetMinmax == (GdkGLProc_glResetMinmax) -1)
+    _procs_GL_VERSION_1_2_DEPRECATED.glResetMinmax =
       (GdkGLProc_glResetMinmax) gdk_gl_get_proc_address ("glResetMinmax");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glResetMinmax () - %s",
-               (_procs_GL_VERSION_1_2.glResetMinmax) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glResetMinmax);
-}
-
-/* glTexImage3D */
-GdkGLProc
-gdk_gl_get_glTexImage3D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_2.glTexImage3D == (GdkGLProc_glTexImage3D) -1)
-    _procs_GL_VERSION_1_2.glTexImage3D =
-      (GdkGLProc_glTexImage3D) gdk_gl_get_proc_address ("glTexImage3D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexImage3D () - %s",
-               (_procs_GL_VERSION_1_2.glTexImage3D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glTexImage3D);
-}
-
-/* glTexSubImage3D */
-GdkGLProc
-gdk_gl_get_glTexSubImage3D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_2.glTexSubImage3D == (GdkGLProc_glTexSubImage3D) -1)
-    _procs_GL_VERSION_1_2.glTexSubImage3D =
-      (GdkGLProc_glTexSubImage3D) gdk_gl_get_proc_address ("glTexSubImage3D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexSubImage3D () - %s",
-               (_procs_GL_VERSION_1_2.glTexSubImage3D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glTexSubImage3D);
-}
-
-/* glCopyTexSubImage3D */
-GdkGLProc
-gdk_gl_get_glCopyTexSubImage3D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_2.glCopyTexSubImage3D == (GdkGLProc_glCopyTexSubImage3D) -1)
-    _procs_GL_VERSION_1_2.glCopyTexSubImage3D =
-      (GdkGLProc_glCopyTexSubImage3D) gdk_gl_get_proc_address ("glCopyTexSubImage3D");
+               (_procs_GL_VERSION_1_2_DEPRECATED.glResetMinmax) ? "supported" : "not supported"));
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyTexSubImage3D () - %s",
-               (_procs_GL_VERSION_1_2.glCopyTexSubImage3D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_2.glCopyTexSubImage3D);
+  return (GdkGLProc) (_procs_GL_VERSION_1_2_DEPRECATED.glResetMinmax);
 }
 
-/* Get GL_VERSION_1_2 functions */
-GdkGL_GL_VERSION_1_2 *
-gdk_gl_get_GL_VERSION_1_2 (void)
+/* Get GL_VERSION_1_2_DEPRECATED functions */
+GdkGL_GL_VERSION_1_2_DEPRECATED *
+gdk_gl_get_GL_VERSION_1_2_DEPRECATED (void)
 {
   static gint supported = -1;
 
@@ -765,10 +805,7 @@ gdk_gl_get_GL_VERSION_1_2 (void)
 
   if (supported == -1)
     {
-      supported =  (gdk_gl_get_glBlendColor () != NULL);
-      supported &= (gdk_gl_get_glBlendEquation () != NULL);
-      supported &= (gdk_gl_get_glDrawRangeElements () != NULL);
-      supported &= (gdk_gl_get_glColorTable () != NULL);
+      supported =  (gdk_gl_get_glColorTable () != NULL);
       supported &= (gdk_gl_get_glColorTableParameterfv () != NULL);
       supported &= (gdk_gl_get_glColorTableParameteriv () != NULL);
       supported &= (gdk_gl_get_glCopyColorTable () != NULL);
@@ -800,19 +837,16 @@ gdk_gl_get_GL_VERSION_1_2 (void)
       supported &= (gdk_gl_get_glMinmax () != NULL);
       supported &= (gdk_gl_get_glResetHistogram () != NULL);
       supported &= (gdk_gl_get_glResetMinmax () != NULL);
-      supported &= (gdk_gl_get_glTexImage3D () != NULL);
-      supported &= (gdk_gl_get_glTexSubImage3D () != NULL);
-      supported &= (gdk_gl_get_glCopyTexSubImage3D () != NULL);
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_VERSION_1_2 () - %s",
+    g_message (" - gdk_gl_get_GL_VERSION_1_2_DEPRECATED () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_VERSION_1_2;
+  return &_procs_GL_VERSION_1_2_DEPRECATED;
 }
 
 /*
@@ -821,43 +855,6 @@ gdk_gl_get_GL_VERSION_1_2 (void)
 
 static GdkGL_GL_VERSION_1_3 _procs_GL_VERSION_1_3 = {
   (GdkGLProc_glActiveTexture) -1,
-  (GdkGLProc_glClientActiveTexture) -1,
-  (GdkGLProc_glMultiTexCoord1d) -1,
-  (GdkGLProc_glMultiTexCoord1dv) -1,
-  (GdkGLProc_glMultiTexCoord1f) -1,
-  (GdkGLProc_glMultiTexCoord1fv) -1,
-  (GdkGLProc_glMultiTexCoord1i) -1,
-  (GdkGLProc_glMultiTexCoord1iv) -1,
-  (GdkGLProc_glMultiTexCoord1s) -1,
-  (GdkGLProc_glMultiTexCoord1sv) -1,
-  (GdkGLProc_glMultiTexCoord2d) -1,
-  (GdkGLProc_glMultiTexCoord2dv) -1,
-  (GdkGLProc_glMultiTexCoord2f) -1,
-  (GdkGLProc_glMultiTexCoord2fv) -1,
-  (GdkGLProc_glMultiTexCoord2i) -1,
-  (GdkGLProc_glMultiTexCoord2iv) -1,
-  (GdkGLProc_glMultiTexCoord2s) -1,
-  (GdkGLProc_glMultiTexCoord2sv) -1,
-  (GdkGLProc_glMultiTexCoord3d) -1,
-  (GdkGLProc_glMultiTexCoord3dv) -1,
-  (GdkGLProc_glMultiTexCoord3f) -1,
-  (GdkGLProc_glMultiTexCoord3fv) -1,
-  (GdkGLProc_glMultiTexCoord3i) -1,
-  (GdkGLProc_glMultiTexCoord3iv) -1,
-  (GdkGLProc_glMultiTexCoord3s) -1,
-  (GdkGLProc_glMultiTexCoord3sv) -1,
-  (GdkGLProc_glMultiTexCoord4d) -1,
-  (GdkGLProc_glMultiTexCoord4dv) -1,
-  (GdkGLProc_glMultiTexCoord4f) -1,
-  (GdkGLProc_glMultiTexCoord4fv) -1,
-  (GdkGLProc_glMultiTexCoord4i) -1,
-  (GdkGLProc_glMultiTexCoord4iv) -1,
-  (GdkGLProc_glMultiTexCoord4s) -1,
-  (GdkGLProc_glMultiTexCoord4sv) -1,
-  (GdkGLProc_glLoadTransposeMatrixf) -1,
-  (GdkGLProc_glLoadTransposeMatrixd) -1,
-  (GdkGLProc_glMultTransposeMatrixf) -1,
-  (GdkGLProc_glMultTransposeMatrixd) -1,
   (GdkGLProc_glSampleCoverage) -1,
   (GdkGLProc_glCompressedTexImage3D) -1,
   (GdkGLProc_glCompressedTexImage2D) -1,
@@ -886,22 +883,242 @@ gdk_gl_get_glActiveTexture (void)
   return (GdkGLProc) (_procs_GL_VERSION_1_3.glActiveTexture);
 }
 
-/* glClientActiveTexture */
+/* glSampleCoverage */
 GdkGLProc
-gdk_gl_get_glClientActiveTexture (void)
+gdk_gl_get_glSampleCoverage (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glClientActiveTexture == (GdkGLProc_glClientActiveTexture) -1)
-    _procs_GL_VERSION_1_3.glClientActiveTexture =
+  if (_procs_GL_VERSION_1_3.glSampleCoverage == (GdkGLProc_glSampleCoverage) -1)
+    _procs_GL_VERSION_1_3.glSampleCoverage =
+      (GdkGLProc_glSampleCoverage) gdk_gl_get_proc_address ("glSampleCoverage");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSampleCoverage () - %s",
+               (_procs_GL_VERSION_1_3.glSampleCoverage) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glSampleCoverage);
+}
+
+/* glCompressedTexImage3D */
+GdkGLProc
+gdk_gl_get_glCompressedTexImage3D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3.glCompressedTexImage3D == (GdkGLProc_glCompressedTexImage3D) -1)
+    _procs_GL_VERSION_1_3.glCompressedTexImage3D =
+      (GdkGLProc_glCompressedTexImage3D) gdk_gl_get_proc_address ("glCompressedTexImage3D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompressedTexImage3D () - %s",
+               (_procs_GL_VERSION_1_3.glCompressedTexImage3D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexImage3D);
+}
+
+/* glCompressedTexImage2D */
+GdkGLProc
+gdk_gl_get_glCompressedTexImage2D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3.glCompressedTexImage2D == (GdkGLProc_glCompressedTexImage2D) -1)
+    _procs_GL_VERSION_1_3.glCompressedTexImage2D =
+      (GdkGLProc_glCompressedTexImage2D) gdk_gl_get_proc_address ("glCompressedTexImage2D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompressedTexImage2D () - %s",
+               (_procs_GL_VERSION_1_3.glCompressedTexImage2D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexImage2D);
+}
+
+/* glCompressedTexImage1D */
+GdkGLProc
+gdk_gl_get_glCompressedTexImage1D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3.glCompressedTexImage1D == (GdkGLProc_glCompressedTexImage1D) -1)
+    _procs_GL_VERSION_1_3.glCompressedTexImage1D =
+      (GdkGLProc_glCompressedTexImage1D) gdk_gl_get_proc_address ("glCompressedTexImage1D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompressedTexImage1D () - %s",
+               (_procs_GL_VERSION_1_3.glCompressedTexImage1D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexImage1D);
+}
+
+/* glCompressedTexSubImage3D */
+GdkGLProc
+gdk_gl_get_glCompressedTexSubImage3D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3.glCompressedTexSubImage3D == (GdkGLProc_glCompressedTexSubImage3D) -1)
+    _procs_GL_VERSION_1_3.glCompressedTexSubImage3D =
+      (GdkGLProc_glCompressedTexSubImage3D) gdk_gl_get_proc_address ("glCompressedTexSubImage3D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompressedTexSubImage3D () - %s",
+               (_procs_GL_VERSION_1_3.glCompressedTexSubImage3D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexSubImage3D);
+}
+
+/* glCompressedTexSubImage2D */
+GdkGLProc
+gdk_gl_get_glCompressedTexSubImage2D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3.glCompressedTexSubImage2D == (GdkGLProc_glCompressedTexSubImage2D) -1)
+    _procs_GL_VERSION_1_3.glCompressedTexSubImage2D =
+      (GdkGLProc_glCompressedTexSubImage2D) gdk_gl_get_proc_address ("glCompressedTexSubImage2D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompressedTexSubImage2D () - %s",
+               (_procs_GL_VERSION_1_3.glCompressedTexSubImage2D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexSubImage2D);
+}
+
+/* glCompressedTexSubImage1D */
+GdkGLProc
+gdk_gl_get_glCompressedTexSubImage1D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3.glCompressedTexSubImage1D == (GdkGLProc_glCompressedTexSubImage1D) -1)
+    _procs_GL_VERSION_1_3.glCompressedTexSubImage1D =
+      (GdkGLProc_glCompressedTexSubImage1D) gdk_gl_get_proc_address ("glCompressedTexSubImage1D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompressedTexSubImage1D () - %s",
+               (_procs_GL_VERSION_1_3.glCompressedTexSubImage1D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexSubImage1D);
+}
+
+/* glGetCompressedTexImage */
+GdkGLProc
+gdk_gl_get_glGetCompressedTexImage (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3.glGetCompressedTexImage == (GdkGLProc_glGetCompressedTexImage) -1)
+    _procs_GL_VERSION_1_3.glGetCompressedTexImage =
+      (GdkGLProc_glGetCompressedTexImage) gdk_gl_get_proc_address ("glGetCompressedTexImage");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetCompressedTexImage () - %s",
+               (_procs_GL_VERSION_1_3.glGetCompressedTexImage) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_3.glGetCompressedTexImage);
+}
+
+/* Get GL_VERSION_1_3 functions */
+GdkGL_GL_VERSION_1_3 *
+gdk_gl_get_GL_VERSION_1_3 (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported =  (gdk_gl_get_glActiveTexture () != NULL);
+      supported &= (gdk_gl_get_glSampleCoverage () != NULL);
+      supported &= (gdk_gl_get_glCompressedTexImage3D () != NULL);
+      supported &= (gdk_gl_get_glCompressedTexImage2D () != NULL);
+      supported &= (gdk_gl_get_glCompressedTexImage1D () != NULL);
+      supported &= (gdk_gl_get_glCompressedTexSubImage3D () != NULL);
+      supported &= (gdk_gl_get_glCompressedTexSubImage2D () != NULL);
+      supported &= (gdk_gl_get_glCompressedTexSubImage1D () != NULL);
+      supported &= (gdk_gl_get_glGetCompressedTexImage () != NULL);
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_VERSION_1_3 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_VERSION_1_3;
+}
+
+/*
+ * GL_VERSION_1_3_DEPRECATED
+ */
+
+static GdkGL_GL_VERSION_1_3_DEPRECATED _procs_GL_VERSION_1_3_DEPRECATED = {
+  (GdkGLProc_glClientActiveTexture) -1,
+  (GdkGLProc_glMultiTexCoord1d) -1,
+  (GdkGLProc_glMultiTexCoord1dv) -1,
+  (GdkGLProc_glMultiTexCoord1f) -1,
+  (GdkGLProc_glMultiTexCoord1fv) -1,
+  (GdkGLProc_glMultiTexCoord1i) -1,
+  (GdkGLProc_glMultiTexCoord1iv) -1,
+  (GdkGLProc_glMultiTexCoord1s) -1,
+  (GdkGLProc_glMultiTexCoord1sv) -1,
+  (GdkGLProc_glMultiTexCoord2d) -1,
+  (GdkGLProc_glMultiTexCoord2dv) -1,
+  (GdkGLProc_glMultiTexCoord2f) -1,
+  (GdkGLProc_glMultiTexCoord2fv) -1,
+  (GdkGLProc_glMultiTexCoord2i) -1,
+  (GdkGLProc_glMultiTexCoord2iv) -1,
+  (GdkGLProc_glMultiTexCoord2s) -1,
+  (GdkGLProc_glMultiTexCoord2sv) -1,
+  (GdkGLProc_glMultiTexCoord3d) -1,
+  (GdkGLProc_glMultiTexCoord3dv) -1,
+  (GdkGLProc_glMultiTexCoord3f) -1,
+  (GdkGLProc_glMultiTexCoord3fv) -1,
+  (GdkGLProc_glMultiTexCoord3i) -1,
+  (GdkGLProc_glMultiTexCoord3iv) -1,
+  (GdkGLProc_glMultiTexCoord3s) -1,
+  (GdkGLProc_glMultiTexCoord3sv) -1,
+  (GdkGLProc_glMultiTexCoord4d) -1,
+  (GdkGLProc_glMultiTexCoord4dv) -1,
+  (GdkGLProc_glMultiTexCoord4f) -1,
+  (GdkGLProc_glMultiTexCoord4fv) -1,
+  (GdkGLProc_glMultiTexCoord4i) -1,
+  (GdkGLProc_glMultiTexCoord4iv) -1,
+  (GdkGLProc_glMultiTexCoord4s) -1,
+  (GdkGLProc_glMultiTexCoord4sv) -1,
+  (GdkGLProc_glLoadTransposeMatrixf) -1,
+  (GdkGLProc_glLoadTransposeMatrixd) -1,
+  (GdkGLProc_glMultTransposeMatrixf) -1,
+  (GdkGLProc_glMultTransposeMatrixd) -1
+};
+
+/* glClientActiveTexture */
+GdkGLProc
+gdk_gl_get_glClientActiveTexture (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glClientActiveTexture == (GdkGLProc_glClientActiveTexture) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glClientActiveTexture =
       (GdkGLProc_glClientActiveTexture) gdk_gl_get_proc_address ("glClientActiveTexture");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glClientActiveTexture () - %s",
-               (_procs_GL_VERSION_1_3.glClientActiveTexture) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glClientActiveTexture) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glClientActiveTexture);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glClientActiveTexture);
 }
 
 /* glMultiTexCoord1d */
@@ -911,15 +1128,15 @@ gdk_gl_get_glMultiTexCoord1d (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1d == (GdkGLProc_glMultiTexCoord1d) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1d =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1d == (GdkGLProc_glMultiTexCoord1d) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1d =
       (GdkGLProc_glMultiTexCoord1d) gdk_gl_get_proc_address ("glMultiTexCoord1d");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1d () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1d) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1d);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1d);
 }
 
 /* glMultiTexCoord1dv */
@@ -929,15 +1146,15 @@ gdk_gl_get_glMultiTexCoord1dv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1dv == (GdkGLProc_glMultiTexCoord1dv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1dv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1dv == (GdkGLProc_glMultiTexCoord1dv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1dv =
       (GdkGLProc_glMultiTexCoord1dv) gdk_gl_get_proc_address ("glMultiTexCoord1dv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1dv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1dv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1dv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1dv);
 }
 
 /* glMultiTexCoord1f */
@@ -947,15 +1164,15 @@ gdk_gl_get_glMultiTexCoord1f (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1f == (GdkGLProc_glMultiTexCoord1f) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1f =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1f == (GdkGLProc_glMultiTexCoord1f) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1f =
       (GdkGLProc_glMultiTexCoord1f) gdk_gl_get_proc_address ("glMultiTexCoord1f");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1f () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1f) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1f);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1f);
 }
 
 /* glMultiTexCoord1fv */
@@ -965,15 +1182,15 @@ gdk_gl_get_glMultiTexCoord1fv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1fv == (GdkGLProc_glMultiTexCoord1fv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1fv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1fv == (GdkGLProc_glMultiTexCoord1fv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1fv =
       (GdkGLProc_glMultiTexCoord1fv) gdk_gl_get_proc_address ("glMultiTexCoord1fv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1fv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1fv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1fv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1fv);
 }
 
 /* glMultiTexCoord1i */
@@ -983,15 +1200,15 @@ gdk_gl_get_glMultiTexCoord1i (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1i == (GdkGLProc_glMultiTexCoord1i) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1i =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1i == (GdkGLProc_glMultiTexCoord1i) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1i =
       (GdkGLProc_glMultiTexCoord1i) gdk_gl_get_proc_address ("glMultiTexCoord1i");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1i () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1i) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1i);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1i);
 }
 
 /* glMultiTexCoord1iv */
@@ -1001,15 +1218,15 @@ gdk_gl_get_glMultiTexCoord1iv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1iv == (GdkGLProc_glMultiTexCoord1iv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1iv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1iv == (GdkGLProc_glMultiTexCoord1iv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1iv =
       (GdkGLProc_glMultiTexCoord1iv) gdk_gl_get_proc_address ("glMultiTexCoord1iv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1iv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1iv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1iv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1iv);
 }
 
 /* glMultiTexCoord1s */
@@ -1019,15 +1236,15 @@ gdk_gl_get_glMultiTexCoord1s (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1s == (GdkGLProc_glMultiTexCoord1s) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1s =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1s == (GdkGLProc_glMultiTexCoord1s) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1s =
       (GdkGLProc_glMultiTexCoord1s) gdk_gl_get_proc_address ("glMultiTexCoord1s");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1s () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1s) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1s);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1s);
 }
 
 /* glMultiTexCoord1sv */
@@ -1037,15 +1254,15 @@ gdk_gl_get_glMultiTexCoord1sv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord1sv == (GdkGLProc_glMultiTexCoord1sv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord1sv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1sv == (GdkGLProc_glMultiTexCoord1sv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1sv =
       (GdkGLProc_glMultiTexCoord1sv) gdk_gl_get_proc_address ("glMultiTexCoord1sv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord1sv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord1sv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord1sv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord1sv);
 }
 
 /* glMultiTexCoord2d */
@@ -1055,15 +1272,15 @@ gdk_gl_get_glMultiTexCoord2d (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2d == (GdkGLProc_glMultiTexCoord2d) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2d =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2d == (GdkGLProc_glMultiTexCoord2d) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2d =
       (GdkGLProc_glMultiTexCoord2d) gdk_gl_get_proc_address ("glMultiTexCoord2d");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2d () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2d) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2d);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2d);
 }
 
 /* glMultiTexCoord2dv */
@@ -1073,15 +1290,15 @@ gdk_gl_get_glMultiTexCoord2dv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2dv == (GdkGLProc_glMultiTexCoord2dv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2dv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2dv == (GdkGLProc_glMultiTexCoord2dv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2dv =
       (GdkGLProc_glMultiTexCoord2dv) gdk_gl_get_proc_address ("glMultiTexCoord2dv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2dv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2dv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2dv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2dv);
 }
 
 /* glMultiTexCoord2f */
@@ -1091,15 +1308,15 @@ gdk_gl_get_glMultiTexCoord2f (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2f == (GdkGLProc_glMultiTexCoord2f) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2f =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2f == (GdkGLProc_glMultiTexCoord2f) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2f =
       (GdkGLProc_glMultiTexCoord2f) gdk_gl_get_proc_address ("glMultiTexCoord2f");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2f () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2f) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2f);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2f);
 }
 
 /* glMultiTexCoord2fv */
@@ -1109,15 +1326,15 @@ gdk_gl_get_glMultiTexCoord2fv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2fv == (GdkGLProc_glMultiTexCoord2fv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2fv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2fv == (GdkGLProc_glMultiTexCoord2fv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2fv =
       (GdkGLProc_glMultiTexCoord2fv) gdk_gl_get_proc_address ("glMultiTexCoord2fv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2fv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2fv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2fv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2fv);
 }
 
 /* glMultiTexCoord2i */
@@ -1127,15 +1344,15 @@ gdk_gl_get_glMultiTexCoord2i (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2i == (GdkGLProc_glMultiTexCoord2i) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2i =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2i == (GdkGLProc_glMultiTexCoord2i) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2i =
       (GdkGLProc_glMultiTexCoord2i) gdk_gl_get_proc_address ("glMultiTexCoord2i");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2i () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2i) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2i);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2i);
 }
 
 /* glMultiTexCoord2iv */
@@ -1145,15 +1362,15 @@ gdk_gl_get_glMultiTexCoord2iv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2iv == (GdkGLProc_glMultiTexCoord2iv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2iv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2iv == (GdkGLProc_glMultiTexCoord2iv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2iv =
       (GdkGLProc_glMultiTexCoord2iv) gdk_gl_get_proc_address ("glMultiTexCoord2iv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2iv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2iv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2iv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2iv);
 }
 
 /* glMultiTexCoord2s */
@@ -1163,15 +1380,15 @@ gdk_gl_get_glMultiTexCoord2s (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2s == (GdkGLProc_glMultiTexCoord2s) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2s =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2s == (GdkGLProc_glMultiTexCoord2s) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2s =
       (GdkGLProc_glMultiTexCoord2s) gdk_gl_get_proc_address ("glMultiTexCoord2s");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2s () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2s) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2s);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2s);
 }
 
 /* glMultiTexCoord2sv */
@@ -1181,15 +1398,15 @@ gdk_gl_get_glMultiTexCoord2sv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord2sv == (GdkGLProc_glMultiTexCoord2sv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord2sv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2sv == (GdkGLProc_glMultiTexCoord2sv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2sv =
       (GdkGLProc_glMultiTexCoord2sv) gdk_gl_get_proc_address ("glMultiTexCoord2sv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord2sv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord2sv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord2sv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord2sv);
 }
 
 /* glMultiTexCoord3d */
@@ -1199,15 +1416,15 @@ gdk_gl_get_glMultiTexCoord3d (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3d == (GdkGLProc_glMultiTexCoord3d) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3d =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3d == (GdkGLProc_glMultiTexCoord3d) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3d =
       (GdkGLProc_glMultiTexCoord3d) gdk_gl_get_proc_address ("glMultiTexCoord3d");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3d () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3d) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3d);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3d);
 }
 
 /* glMultiTexCoord3dv */
@@ -1217,15 +1434,15 @@ gdk_gl_get_glMultiTexCoord3dv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3dv == (GdkGLProc_glMultiTexCoord3dv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3dv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3dv == (GdkGLProc_glMultiTexCoord3dv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3dv =
       (GdkGLProc_glMultiTexCoord3dv) gdk_gl_get_proc_address ("glMultiTexCoord3dv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3dv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3dv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3dv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3dv);
 }
 
 /* glMultiTexCoord3f */
@@ -1235,15 +1452,15 @@ gdk_gl_get_glMultiTexCoord3f (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3f == (GdkGLProc_glMultiTexCoord3f) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3f =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3f == (GdkGLProc_glMultiTexCoord3f) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3f =
       (GdkGLProc_glMultiTexCoord3f) gdk_gl_get_proc_address ("glMultiTexCoord3f");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3f () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3f) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3f);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3f);
 }
 
 /* glMultiTexCoord3fv */
@@ -1253,15 +1470,15 @@ gdk_gl_get_glMultiTexCoord3fv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3fv == (GdkGLProc_glMultiTexCoord3fv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3fv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3fv == (GdkGLProc_glMultiTexCoord3fv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3fv =
       (GdkGLProc_glMultiTexCoord3fv) gdk_gl_get_proc_address ("glMultiTexCoord3fv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3fv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3fv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3fv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3fv);
 }
 
 /* glMultiTexCoord3i */
@@ -1271,15 +1488,15 @@ gdk_gl_get_glMultiTexCoord3i (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3i == (GdkGLProc_glMultiTexCoord3i) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3i =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3i == (GdkGLProc_glMultiTexCoord3i) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3i =
       (GdkGLProc_glMultiTexCoord3i) gdk_gl_get_proc_address ("glMultiTexCoord3i");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3i () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3i) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3i);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3i);
 }
 
 /* glMultiTexCoord3iv */
@@ -1289,15 +1506,15 @@ gdk_gl_get_glMultiTexCoord3iv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3iv == (GdkGLProc_glMultiTexCoord3iv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3iv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3iv == (GdkGLProc_glMultiTexCoord3iv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3iv =
       (GdkGLProc_glMultiTexCoord3iv) gdk_gl_get_proc_address ("glMultiTexCoord3iv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3iv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3iv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3iv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3iv);
 }
 
 /* glMultiTexCoord3s */
@@ -1307,15 +1524,15 @@ gdk_gl_get_glMultiTexCoord3s (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3s == (GdkGLProc_glMultiTexCoord3s) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3s =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3s == (GdkGLProc_glMultiTexCoord3s) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3s =
       (GdkGLProc_glMultiTexCoord3s) gdk_gl_get_proc_address ("glMultiTexCoord3s");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3s () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3s) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3s);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3s);
 }
 
 /* glMultiTexCoord3sv */
@@ -1325,15 +1542,15 @@ gdk_gl_get_glMultiTexCoord3sv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord3sv == (GdkGLProc_glMultiTexCoord3sv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord3sv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3sv == (GdkGLProc_glMultiTexCoord3sv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3sv =
       (GdkGLProc_glMultiTexCoord3sv) gdk_gl_get_proc_address ("glMultiTexCoord3sv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord3sv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord3sv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord3sv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord3sv);
 }
 
 /* glMultiTexCoord4d */
@@ -1343,15 +1560,15 @@ gdk_gl_get_glMultiTexCoord4d (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4d == (GdkGLProc_glMultiTexCoord4d) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4d =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4d == (GdkGLProc_glMultiTexCoord4d) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4d =
       (GdkGLProc_glMultiTexCoord4d) gdk_gl_get_proc_address ("glMultiTexCoord4d");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4d () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4d) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4d);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4d);
 }
 
 /* glMultiTexCoord4dv */
@@ -1361,15 +1578,15 @@ gdk_gl_get_glMultiTexCoord4dv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4dv == (GdkGLProc_glMultiTexCoord4dv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4dv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4dv == (GdkGLProc_glMultiTexCoord4dv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4dv =
       (GdkGLProc_glMultiTexCoord4dv) gdk_gl_get_proc_address ("glMultiTexCoord4dv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4dv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4dv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4dv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4dv);
 }
 
 /* glMultiTexCoord4f */
@@ -1379,15 +1596,15 @@ gdk_gl_get_glMultiTexCoord4f (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4f == (GdkGLProc_glMultiTexCoord4f) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4f =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4f == (GdkGLProc_glMultiTexCoord4f) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4f =
       (GdkGLProc_glMultiTexCoord4f) gdk_gl_get_proc_address ("glMultiTexCoord4f");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4f () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4f) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4f);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4f);
 }
 
 /* glMultiTexCoord4fv */
@@ -1397,15 +1614,15 @@ gdk_gl_get_glMultiTexCoord4fv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4fv == (GdkGLProc_glMultiTexCoord4fv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4fv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4fv == (GdkGLProc_glMultiTexCoord4fv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4fv =
       (GdkGLProc_glMultiTexCoord4fv) gdk_gl_get_proc_address ("glMultiTexCoord4fv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4fv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4fv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4fv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4fv);
 }
 
 /* glMultiTexCoord4i */
@@ -1415,15 +1632,15 @@ gdk_gl_get_glMultiTexCoord4i (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4i == (GdkGLProc_glMultiTexCoord4i) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4i =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4i == (GdkGLProc_glMultiTexCoord4i) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4i =
       (GdkGLProc_glMultiTexCoord4i) gdk_gl_get_proc_address ("glMultiTexCoord4i");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4i () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4i) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4i);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4i);
 }
 
 /* glMultiTexCoord4iv */
@@ -1433,15 +1650,15 @@ gdk_gl_get_glMultiTexCoord4iv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4iv == (GdkGLProc_glMultiTexCoord4iv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4iv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4iv == (GdkGLProc_glMultiTexCoord4iv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4iv =
       (GdkGLProc_glMultiTexCoord4iv) gdk_gl_get_proc_address ("glMultiTexCoord4iv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4iv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4iv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4iv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4iv);
 }
 
 /* glMultiTexCoord4s */
@@ -1451,15 +1668,15 @@ gdk_gl_get_glMultiTexCoord4s (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4s == (GdkGLProc_glMultiTexCoord4s) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4s =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4s == (GdkGLProc_glMultiTexCoord4s) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4s =
       (GdkGLProc_glMultiTexCoord4s) gdk_gl_get_proc_address ("glMultiTexCoord4s");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4s () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4s) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4s);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4s);
 }
 
 /* glMultiTexCoord4sv */
@@ -1469,15 +1686,15 @@ gdk_gl_get_glMultiTexCoord4sv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultiTexCoord4sv == (GdkGLProc_glMultiTexCoord4sv) -1)
-    _procs_GL_VERSION_1_3.glMultiTexCoord4sv =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4sv == (GdkGLProc_glMultiTexCoord4sv) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4sv =
       (GdkGLProc_glMultiTexCoord4sv) gdk_gl_get_proc_address ("glMultiTexCoord4sv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultiTexCoord4sv () - %s",
-               (_procs_GL_VERSION_1_3.glMultiTexCoord4sv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultiTexCoord4sv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultiTexCoord4sv);
 }
 
 /* glLoadTransposeMatrixf */
@@ -1487,15 +1704,15 @@ gdk_gl_get_glLoadTransposeMatrixf (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glLoadTransposeMatrixf == (GdkGLProc_glLoadTransposeMatrixf) -1)
-    _procs_GL_VERSION_1_3.glLoadTransposeMatrixf =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixf == (GdkGLProc_glLoadTransposeMatrixf) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixf =
       (GdkGLProc_glLoadTransposeMatrixf) gdk_gl_get_proc_address ("glLoadTransposeMatrixf");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glLoadTransposeMatrixf () - %s",
-               (_procs_GL_VERSION_1_3.glLoadTransposeMatrixf) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixf) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glLoadTransposeMatrixf);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixf);
 }
 
 /* glLoadTransposeMatrixd */
@@ -1505,15 +1722,15 @@ gdk_gl_get_glLoadTransposeMatrixd (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glLoadTransposeMatrixd == (GdkGLProc_glLoadTransposeMatrixd) -1)
-    _procs_GL_VERSION_1_3.glLoadTransposeMatrixd =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixd == (GdkGLProc_glLoadTransposeMatrixd) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixd =
       (GdkGLProc_glLoadTransposeMatrixd) gdk_gl_get_proc_address ("glLoadTransposeMatrixd");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glLoadTransposeMatrixd () - %s",
-               (_procs_GL_VERSION_1_3.glLoadTransposeMatrixd) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixd) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glLoadTransposeMatrixd);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glLoadTransposeMatrixd);
 }
 
 /* glMultTransposeMatrixf */
@@ -1523,15 +1740,15 @@ gdk_gl_get_glMultTransposeMatrixf (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultTransposeMatrixf == (GdkGLProc_glMultTransposeMatrixf) -1)
-    _procs_GL_VERSION_1_3.glMultTransposeMatrixf =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixf == (GdkGLProc_glMultTransposeMatrixf) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixf =
       (GdkGLProc_glMultTransposeMatrixf) gdk_gl_get_proc_address ("glMultTransposeMatrixf");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultTransposeMatrixf () - %s",
-               (_procs_GL_VERSION_1_3.glMultTransposeMatrixf) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixf) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultTransposeMatrixf);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixf);
 }
 
 /* glMultTransposeMatrixd */
@@ -1541,174 +1758,29 @@ gdk_gl_get_glMultTransposeMatrixd (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_3.glMultTransposeMatrixd == (GdkGLProc_glMultTransposeMatrixd) -1)
-    _procs_GL_VERSION_1_3.glMultTransposeMatrixd =
+  if (_procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixd == (GdkGLProc_glMultTransposeMatrixd) -1)
+    _procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixd =
       (GdkGLProc_glMultTransposeMatrixd) gdk_gl_get_proc_address ("glMultTransposeMatrixd");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glMultTransposeMatrixd () - %s",
-               (_procs_GL_VERSION_1_3.glMultTransposeMatrixd) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glMultTransposeMatrixd);
-}
-
-/* glSampleCoverage */
-GdkGLProc
-gdk_gl_get_glSampleCoverage (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glSampleCoverage == (GdkGLProc_glSampleCoverage) -1)
-    _procs_GL_VERSION_1_3.glSampleCoverage =
-      (GdkGLProc_glSampleCoverage) gdk_gl_get_proc_address ("glSampleCoverage");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSampleCoverage () - %s",
-               (_procs_GL_VERSION_1_3.glSampleCoverage) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixd) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glSampleCoverage);
+  return (GdkGLProc) (_procs_GL_VERSION_1_3_DEPRECATED.glMultTransposeMatrixd);
 }
 
-/* glCompressedTexImage3D */
-GdkGLProc
-gdk_gl_get_glCompressedTexImage3D (void)
+/* Get GL_VERSION_1_3_DEPRECATED functions */
+GdkGL_GL_VERSION_1_3_DEPRECATED *
+gdk_gl_get_GL_VERSION_1_3_DEPRECATED (void)
 {
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glCompressedTexImage3D == (GdkGLProc_glCompressedTexImage3D) -1)
-    _procs_GL_VERSION_1_3.glCompressedTexImage3D =
-      (GdkGLProc_glCompressedTexImage3D) gdk_gl_get_proc_address ("glCompressedTexImage3D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexImage3D () - %s",
-               (_procs_GL_VERSION_1_3.glCompressedTexImage3D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexImage3D);
-}
-
-/* glCompressedTexImage2D */
-GdkGLProc
-gdk_gl_get_glCompressedTexImage2D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glCompressedTexImage2D == (GdkGLProc_glCompressedTexImage2D) -1)
-    _procs_GL_VERSION_1_3.glCompressedTexImage2D =
-      (GdkGLProc_glCompressedTexImage2D) gdk_gl_get_proc_address ("glCompressedTexImage2D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexImage2D () - %s",
-               (_procs_GL_VERSION_1_3.glCompressedTexImage2D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexImage2D);
-}
-
-/* glCompressedTexImage1D */
-GdkGLProc
-gdk_gl_get_glCompressedTexImage1D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glCompressedTexImage1D == (GdkGLProc_glCompressedTexImage1D) -1)
-    _procs_GL_VERSION_1_3.glCompressedTexImage1D =
-      (GdkGLProc_glCompressedTexImage1D) gdk_gl_get_proc_address ("glCompressedTexImage1D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexImage1D () - %s",
-               (_procs_GL_VERSION_1_3.glCompressedTexImage1D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexImage1D);
-}
-
-/* glCompressedTexSubImage3D */
-GdkGLProc
-gdk_gl_get_glCompressedTexSubImage3D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glCompressedTexSubImage3D == (GdkGLProc_glCompressedTexSubImage3D) -1)
-    _procs_GL_VERSION_1_3.glCompressedTexSubImage3D =
-      (GdkGLProc_glCompressedTexSubImage3D) gdk_gl_get_proc_address ("glCompressedTexSubImage3D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexSubImage3D () - %s",
-               (_procs_GL_VERSION_1_3.glCompressedTexSubImage3D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexSubImage3D);
-}
-
-/* glCompressedTexSubImage2D */
-GdkGLProc
-gdk_gl_get_glCompressedTexSubImage2D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glCompressedTexSubImage2D == (GdkGLProc_glCompressedTexSubImage2D) -1)
-    _procs_GL_VERSION_1_3.glCompressedTexSubImage2D =
-      (GdkGLProc_glCompressedTexSubImage2D) gdk_gl_get_proc_address ("glCompressedTexSubImage2D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexSubImage2D () - %s",
-               (_procs_GL_VERSION_1_3.glCompressedTexSubImage2D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexSubImage2D);
-}
-
-/* glCompressedTexSubImage1D */
-GdkGLProc
-gdk_gl_get_glCompressedTexSubImage1D (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glCompressedTexSubImage1D == (GdkGLProc_glCompressedTexSubImage1D) -1)
-    _procs_GL_VERSION_1_3.glCompressedTexSubImage1D =
-      (GdkGLProc_glCompressedTexSubImage1D) gdk_gl_get_proc_address ("glCompressedTexSubImage1D");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexSubImage1D () - %s",
-               (_procs_GL_VERSION_1_3.glCompressedTexSubImage1D) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glCompressedTexSubImage1D);
-}
-
-/* glGetCompressedTexImage */
-GdkGLProc
-gdk_gl_get_glGetCompressedTexImage (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_3.glGetCompressedTexImage == (GdkGLProc_glGetCompressedTexImage) -1)
-    _procs_GL_VERSION_1_3.glGetCompressedTexImage =
-      (GdkGLProc_glGetCompressedTexImage) gdk_gl_get_proc_address ("glGetCompressedTexImage");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetCompressedTexImage () - %s",
-               (_procs_GL_VERSION_1_3.glGetCompressedTexImage) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_3.glGetCompressedTexImage);
-}
-
-/* Get GL_VERSION_1_3 functions */
-GdkGL_GL_VERSION_1_3 *
-gdk_gl_get_GL_VERSION_1_3 (void)
-{
-  static gint supported = -1;
+  static gint supported = -1;
 
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
   if (supported == -1)
     {
-      supported =  (gdk_gl_get_glActiveTexture () != NULL);
-      supported &= (gdk_gl_get_glClientActiveTexture () != NULL);
+      supported =  (gdk_gl_get_glClientActiveTexture () != NULL);
       supported &= (gdk_gl_get_glMultiTexCoord1d () != NULL);
       supported &= (gdk_gl_get_glMultiTexCoord1dv () != NULL);
       supported &= (gdk_gl_get_glMultiTexCoord1f () != NULL);
@@ -1745,24 +1817,16 @@ gdk_gl_get_GL_VERSION_1_3 (void)
       supported &= (gdk_gl_get_glLoadTransposeMatrixd () != NULL);
       supported &= (gdk_gl_get_glMultTransposeMatrixf () != NULL);
       supported &= (gdk_gl_get_glMultTransposeMatrixd () != NULL);
-      supported &= (gdk_gl_get_glSampleCoverage () != NULL);
-      supported &= (gdk_gl_get_glCompressedTexImage3D () != NULL);
-      supported &= (gdk_gl_get_glCompressedTexImage2D () != NULL);
-      supported &= (gdk_gl_get_glCompressedTexImage1D () != NULL);
-      supported &= (gdk_gl_get_glCompressedTexSubImage3D () != NULL);
-      supported &= (gdk_gl_get_glCompressedTexSubImage2D () != NULL);
-      supported &= (gdk_gl_get_glCompressedTexSubImage1D () != NULL);
-      supported &= (gdk_gl_get_glGetCompressedTexImage () != NULL);
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_VERSION_1_3 () - %s",
+    g_message (" - gdk_gl_get_GL_VERSION_1_3_DEPRECATED () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_VERSION_1_3;
+  return &_procs_GL_VERSION_1_3_DEPRECATED;
 }
 
 /*
@@ -1771,50 +1835,12 @@ gdk_gl_get_GL_VERSION_1_3 (void)
 
 static GdkGL_GL_VERSION_1_4 _procs_GL_VERSION_1_4 = {
   (GdkGLProc_glBlendFuncSeparate) -1,
-  (GdkGLProc_glFogCoordf) -1,
-  (GdkGLProc_glFogCoordfv) -1,
-  (GdkGLProc_glFogCoordd) -1,
-  (GdkGLProc_glFogCoorddv) -1,
-  (GdkGLProc_glFogCoordPointer) -1,
   (GdkGLProc_glMultiDrawArrays) -1,
   (GdkGLProc_glMultiDrawElements) -1,
   (GdkGLProc_glPointParameterf) -1,
   (GdkGLProc_glPointParameterfv) -1,
   (GdkGLProc_glPointParameteri) -1,
-  (GdkGLProc_glPointParameteriv) -1,
-  (GdkGLProc_glSecondaryColor3b) -1,
-  (GdkGLProc_glSecondaryColor3bv) -1,
-  (GdkGLProc_glSecondaryColor3d) -1,
-  (GdkGLProc_glSecondaryColor3dv) -1,
-  (GdkGLProc_glSecondaryColor3f) -1,
-  (GdkGLProc_glSecondaryColor3fv) -1,
-  (GdkGLProc_glSecondaryColor3i) -1,
-  (GdkGLProc_glSecondaryColor3iv) -1,
-  (GdkGLProc_glSecondaryColor3s) -1,
-  (GdkGLProc_glSecondaryColor3sv) -1,
-  (GdkGLProc_glSecondaryColor3ub) -1,
-  (GdkGLProc_glSecondaryColor3ubv) -1,
-  (GdkGLProc_glSecondaryColor3ui) -1,
-  (GdkGLProc_glSecondaryColor3uiv) -1,
-  (GdkGLProc_glSecondaryColor3us) -1,
-  (GdkGLProc_glSecondaryColor3usv) -1,
-  (GdkGLProc_glSecondaryColorPointer) -1,
-  (GdkGLProc_glWindowPos2d) -1,
-  (GdkGLProc_glWindowPos2dv) -1,
-  (GdkGLProc_glWindowPos2f) -1,
-  (GdkGLProc_glWindowPos2fv) -1,
-  (GdkGLProc_glWindowPos2i) -1,
-  (GdkGLProc_glWindowPos2iv) -1,
-  (GdkGLProc_glWindowPos2s) -1,
-  (GdkGLProc_glWindowPos2sv) -1,
-  (GdkGLProc_glWindowPos3d) -1,
-  (GdkGLProc_glWindowPos3dv) -1,
-  (GdkGLProc_glWindowPos3f) -1,
-  (GdkGLProc_glWindowPos3fv) -1,
-  (GdkGLProc_glWindowPos3i) -1,
-  (GdkGLProc_glWindowPos3iv) -1,
-  (GdkGLProc_glWindowPos3s) -1,
-  (GdkGLProc_glWindowPos3sv) -1
+  (GdkGLProc_glPointParameteriv) -1
 };
 
 /* glBlendFuncSeparate */
@@ -1835,96 +1861,6 @@ gdk_gl_get_glBlendFuncSeparate (void)
   return (GdkGLProc) (_procs_GL_VERSION_1_4.glBlendFuncSeparate);
 }
 
-/* glFogCoordf */
-GdkGLProc
-gdk_gl_get_glFogCoordf (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_4.glFogCoordf == (GdkGLProc_glFogCoordf) -1)
-    _procs_GL_VERSION_1_4.glFogCoordf =
-      (GdkGLProc_glFogCoordf) gdk_gl_get_proc_address ("glFogCoordf");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordf () - %s",
-               (_procs_GL_VERSION_1_4.glFogCoordf) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glFogCoordf);
-}
-
-/* glFogCoordfv */
-GdkGLProc
-gdk_gl_get_glFogCoordfv (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_4.glFogCoordfv == (GdkGLProc_glFogCoordfv) -1)
-    _procs_GL_VERSION_1_4.glFogCoordfv =
-      (GdkGLProc_glFogCoordfv) gdk_gl_get_proc_address ("glFogCoordfv");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordfv () - %s",
-               (_procs_GL_VERSION_1_4.glFogCoordfv) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glFogCoordfv);
-}
-
-/* glFogCoordd */
-GdkGLProc
-gdk_gl_get_glFogCoordd (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_4.glFogCoordd == (GdkGLProc_glFogCoordd) -1)
-    _procs_GL_VERSION_1_4.glFogCoordd =
-      (GdkGLProc_glFogCoordd) gdk_gl_get_proc_address ("glFogCoordd");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordd () - %s",
-               (_procs_GL_VERSION_1_4.glFogCoordd) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glFogCoordd);
-}
-
-/* glFogCoorddv */
-GdkGLProc
-gdk_gl_get_glFogCoorddv (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_4.glFogCoorddv == (GdkGLProc_glFogCoorddv) -1)
-    _procs_GL_VERSION_1_4.glFogCoorddv =
-      (GdkGLProc_glFogCoorddv) gdk_gl_get_proc_address ("glFogCoorddv");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoorddv () - %s",
-               (_procs_GL_VERSION_1_4.glFogCoorddv) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glFogCoorddv);
-}
-
-/* glFogCoordPointer */
-GdkGLProc
-gdk_gl_get_glFogCoordPointer (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_VERSION_1_4.glFogCoordPointer == (GdkGLProc_glFogCoordPointer) -1)
-    _procs_GL_VERSION_1_4.glFogCoordPointer =
-      (GdkGLProc_glFogCoordPointer) gdk_gl_get_proc_address ("glFogCoordPointer");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordPointer () - %s",
-               (_procs_GL_VERSION_1_4.glFogCoordPointer) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glFogCoordPointer);
-}
-
 /* glMultiDrawArrays */
 GdkGLProc
 gdk_gl_get_glMultiDrawArrays (void)
@@ -2033,40 +1969,205 @@ gdk_gl_get_glPointParameteriv (void)
   return (GdkGLProc) (_procs_GL_VERSION_1_4.glPointParameteriv);
 }
 
-/* glSecondaryColor3b */
-GdkGLProc
-gdk_gl_get_glSecondaryColor3b (void)
+/* Get GL_VERSION_1_4 functions */
+GdkGL_GL_VERSION_1_4 *
+gdk_gl_get_GL_VERSION_1_4 (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3b == (GdkGLProc_glSecondaryColor3b) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3b =
-      (GdkGLProc_glSecondaryColor3b) gdk_gl_get_proc_address ("glSecondaryColor3b");
+  if (supported == -1)
+    {
+      supported =  (gdk_gl_get_glBlendFuncSeparate () != NULL);
+      supported &= (gdk_gl_get_glMultiDrawArrays () != NULL);
+      supported &= (gdk_gl_get_glMultiDrawElements () != NULL);
+      supported &= (gdk_gl_get_glPointParameterf () != NULL);
+      supported &= (gdk_gl_get_glPointParameterfv () != NULL);
+      supported &= (gdk_gl_get_glPointParameteri () != NULL);
+      supported &= (gdk_gl_get_glPointParameteriv () != NULL);
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3b () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3b) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_VERSION_1_4 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3b);
+  return &_procs_GL_VERSION_1_4;
 }
 
-/* glSecondaryColor3bv */
+/*
+ * GL_VERSION_1_4_DEPRECATED
+ */
+
+static GdkGL_GL_VERSION_1_4_DEPRECATED _procs_GL_VERSION_1_4_DEPRECATED = {
+  (GdkGLProc_glFogCoordf) -1,
+  (GdkGLProc_glFogCoordfv) -1,
+  (GdkGLProc_glFogCoordd) -1,
+  (GdkGLProc_glFogCoorddv) -1,
+  (GdkGLProc_glFogCoordPointer) -1,
+  (GdkGLProc_glSecondaryColor3b) -1,
+  (GdkGLProc_glSecondaryColor3bv) -1,
+  (GdkGLProc_glSecondaryColor3d) -1,
+  (GdkGLProc_glSecondaryColor3dv) -1,
+  (GdkGLProc_glSecondaryColor3f) -1,
+  (GdkGLProc_glSecondaryColor3fv) -1,
+  (GdkGLProc_glSecondaryColor3i) -1,
+  (GdkGLProc_glSecondaryColor3iv) -1,
+  (GdkGLProc_glSecondaryColor3s) -1,
+  (GdkGLProc_glSecondaryColor3sv) -1,
+  (GdkGLProc_glSecondaryColor3ub) -1,
+  (GdkGLProc_glSecondaryColor3ubv) -1,
+  (GdkGLProc_glSecondaryColor3ui) -1,
+  (GdkGLProc_glSecondaryColor3uiv) -1,
+  (GdkGLProc_glSecondaryColor3us) -1,
+  (GdkGLProc_glSecondaryColor3usv) -1,
+  (GdkGLProc_glSecondaryColorPointer) -1,
+  (GdkGLProc_glWindowPos2d) -1,
+  (GdkGLProc_glWindowPos2dv) -1,
+  (GdkGLProc_glWindowPos2f) -1,
+  (GdkGLProc_glWindowPos2fv) -1,
+  (GdkGLProc_glWindowPos2i) -1,
+  (GdkGLProc_glWindowPos2iv) -1,
+  (GdkGLProc_glWindowPos2s) -1,
+  (GdkGLProc_glWindowPos2sv) -1,
+  (GdkGLProc_glWindowPos3d) -1,
+  (GdkGLProc_glWindowPos3dv) -1,
+  (GdkGLProc_glWindowPos3f) -1,
+  (GdkGLProc_glWindowPos3fv) -1,
+  (GdkGLProc_glWindowPos3i) -1,
+  (GdkGLProc_glWindowPos3iv) -1,
+  (GdkGLProc_glWindowPos3s) -1,
+  (GdkGLProc_glWindowPos3sv) -1
+};
+
+/* glFogCoordf */
+GdkGLProc
+gdk_gl_get_glFogCoordf (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordf == (GdkGLProc_glFogCoordf) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glFogCoordf =
+      (GdkGLProc_glFogCoordf) gdk_gl_get_proc_address ("glFogCoordf");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordf () - %s",
+               (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordf) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordf);
+}
+
+/* glFogCoordfv */
+GdkGLProc
+gdk_gl_get_glFogCoordfv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordfv == (GdkGLProc_glFogCoordfv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glFogCoordfv =
+      (GdkGLProc_glFogCoordfv) gdk_gl_get_proc_address ("glFogCoordfv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordfv () - %s",
+               (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordfv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordfv);
+}
+
+/* glFogCoordd */
+GdkGLProc
+gdk_gl_get_glFogCoordd (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordd == (GdkGLProc_glFogCoordd) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glFogCoordd =
+      (GdkGLProc_glFogCoordd) gdk_gl_get_proc_address ("glFogCoordd");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordd () - %s",
+               (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordd) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordd);
+}
+
+/* glFogCoorddv */
+GdkGLProc
+gdk_gl_get_glFogCoorddv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoorddv == (GdkGLProc_glFogCoorddv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glFogCoorddv =
+      (GdkGLProc_glFogCoorddv) gdk_gl_get_proc_address ("glFogCoorddv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoorddv () - %s",
+               (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoorddv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoorddv);
+}
+
+/* glFogCoordPointer */
+GdkGLProc
+gdk_gl_get_glFogCoordPointer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordPointer == (GdkGLProc_glFogCoordPointer) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glFogCoordPointer =
+      (GdkGLProc_glFogCoordPointer) gdk_gl_get_proc_address ("glFogCoordPointer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordPointer () - %s",
+               (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordPointer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glFogCoordPointer);
+}
+
+/* glSecondaryColor3b */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3b (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3b == (GdkGLProc_glSecondaryColor3b) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3b =
+      (GdkGLProc_glSecondaryColor3b) gdk_gl_get_proc_address ("glSecondaryColor3b");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3b () - %s",
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3b) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3b);
+}
+
+/* glSecondaryColor3bv */
 GdkGLProc
 gdk_gl_get_glSecondaryColor3bv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3bv == (GdkGLProc_glSecondaryColor3bv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3bv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3bv == (GdkGLProc_glSecondaryColor3bv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3bv =
       (GdkGLProc_glSecondaryColor3bv) gdk_gl_get_proc_address ("glSecondaryColor3bv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3bv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3bv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3bv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3bv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3bv);
 }
 
 /* glSecondaryColor3d */
@@ -2076,15 +2177,15 @@ gdk_gl_get_glSecondaryColor3d (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3d == (GdkGLProc_glSecondaryColor3d) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3d =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3d == (GdkGLProc_glSecondaryColor3d) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3d =
       (GdkGLProc_glSecondaryColor3d) gdk_gl_get_proc_address ("glSecondaryColor3d");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3d () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3d) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3d);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3d);
 }
 
 /* glSecondaryColor3dv */
@@ -2094,15 +2195,15 @@ gdk_gl_get_glSecondaryColor3dv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3dv == (GdkGLProc_glSecondaryColor3dv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3dv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3dv == (GdkGLProc_glSecondaryColor3dv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3dv =
       (GdkGLProc_glSecondaryColor3dv) gdk_gl_get_proc_address ("glSecondaryColor3dv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3dv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3dv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3dv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3dv);
 }
 
 /* glSecondaryColor3f */
@@ -2112,15 +2213,15 @@ gdk_gl_get_glSecondaryColor3f (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3f == (GdkGLProc_glSecondaryColor3f) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3f =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3f == (GdkGLProc_glSecondaryColor3f) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3f =
       (GdkGLProc_glSecondaryColor3f) gdk_gl_get_proc_address ("glSecondaryColor3f");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3f () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3f) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3f);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3f);
 }
 
 /* glSecondaryColor3fv */
@@ -2130,15 +2231,15 @@ gdk_gl_get_glSecondaryColor3fv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3fv == (GdkGLProc_glSecondaryColor3fv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3fv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3fv == (GdkGLProc_glSecondaryColor3fv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3fv =
       (GdkGLProc_glSecondaryColor3fv) gdk_gl_get_proc_address ("glSecondaryColor3fv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3fv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3fv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3fv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3fv);
 }
 
 /* glSecondaryColor3i */
@@ -2148,15 +2249,15 @@ gdk_gl_get_glSecondaryColor3i (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3i == (GdkGLProc_glSecondaryColor3i) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3i =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3i == (GdkGLProc_glSecondaryColor3i) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3i =
       (GdkGLProc_glSecondaryColor3i) gdk_gl_get_proc_address ("glSecondaryColor3i");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3i () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3i) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3i);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3i);
 }
 
 /* glSecondaryColor3iv */
@@ -2166,15 +2267,15 @@ gdk_gl_get_glSecondaryColor3iv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3iv == (GdkGLProc_glSecondaryColor3iv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3iv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3iv == (GdkGLProc_glSecondaryColor3iv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3iv =
       (GdkGLProc_glSecondaryColor3iv) gdk_gl_get_proc_address ("glSecondaryColor3iv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3iv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3iv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3iv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3iv);
 }
 
 /* glSecondaryColor3s */
@@ -2184,15 +2285,15 @@ gdk_gl_get_glSecondaryColor3s (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3s == (GdkGLProc_glSecondaryColor3s) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3s =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3s == (GdkGLProc_glSecondaryColor3s) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3s =
       (GdkGLProc_glSecondaryColor3s) gdk_gl_get_proc_address ("glSecondaryColor3s");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3s () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3s) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3s);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3s);
 }
 
 /* glSecondaryColor3sv */
@@ -2202,15 +2303,15 @@ gdk_gl_get_glSecondaryColor3sv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3sv == (GdkGLProc_glSecondaryColor3sv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3sv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3sv == (GdkGLProc_glSecondaryColor3sv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3sv =
       (GdkGLProc_glSecondaryColor3sv) gdk_gl_get_proc_address ("glSecondaryColor3sv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3sv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3sv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3sv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3sv);
 }
 
 /* glSecondaryColor3ub */
@@ -2220,15 +2321,15 @@ gdk_gl_get_glSecondaryColor3ub (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3ub == (GdkGLProc_glSecondaryColor3ub) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3ub =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ub == (GdkGLProc_glSecondaryColor3ub) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ub =
       (GdkGLProc_glSecondaryColor3ub) gdk_gl_get_proc_address ("glSecondaryColor3ub");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3ub () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3ub) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ub) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3ub);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ub);
 }
 
 /* glSecondaryColor3ubv */
@@ -2238,15 +2339,15 @@ gdk_gl_get_glSecondaryColor3ubv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3ubv == (GdkGLProc_glSecondaryColor3ubv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3ubv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ubv == (GdkGLProc_glSecondaryColor3ubv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ubv =
       (GdkGLProc_glSecondaryColor3ubv) gdk_gl_get_proc_address ("glSecondaryColor3ubv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3ubv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3ubv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ubv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3ubv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ubv);
 }
 
 /* glSecondaryColor3ui */
@@ -2256,15 +2357,15 @@ gdk_gl_get_glSecondaryColor3ui (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3ui == (GdkGLProc_glSecondaryColor3ui) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3ui =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ui == (GdkGLProc_glSecondaryColor3ui) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ui =
       (GdkGLProc_glSecondaryColor3ui) gdk_gl_get_proc_address ("glSecondaryColor3ui");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3ui () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3ui) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3ui);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3ui);
 }
 
 /* glSecondaryColor3uiv */
@@ -2274,15 +2375,15 @@ gdk_gl_get_glSecondaryColor3uiv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3uiv == (GdkGLProc_glSecondaryColor3uiv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3uiv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3uiv == (GdkGLProc_glSecondaryColor3uiv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3uiv =
       (GdkGLProc_glSecondaryColor3uiv) gdk_gl_get_proc_address ("glSecondaryColor3uiv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3uiv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3uiv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3uiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3uiv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3uiv);
 }
 
 /* glSecondaryColor3us */
@@ -2292,15 +2393,15 @@ gdk_gl_get_glSecondaryColor3us (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3us == (GdkGLProc_glSecondaryColor3us) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3us =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3us == (GdkGLProc_glSecondaryColor3us) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3us =
       (GdkGLProc_glSecondaryColor3us) gdk_gl_get_proc_address ("glSecondaryColor3us");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3us () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3us) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3us) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3us);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3us);
 }
 
 /* glSecondaryColor3usv */
@@ -2310,15 +2411,15 @@ gdk_gl_get_glSecondaryColor3usv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColor3usv == (GdkGLProc_glSecondaryColor3usv) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColor3usv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3usv == (GdkGLProc_glSecondaryColor3usv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3usv =
       (GdkGLProc_glSecondaryColor3usv) gdk_gl_get_proc_address ("glSecondaryColor3usv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColor3usv () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColor3usv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3usv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColor3usv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColor3usv);
 }
 
 /* glSecondaryColorPointer */
@@ -2328,15 +2429,15 @@ gdk_gl_get_glSecondaryColorPointer (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glSecondaryColorPointer == (GdkGLProc_glSecondaryColorPointer) -1)
-    _procs_GL_VERSION_1_4.glSecondaryColorPointer =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColorPointer == (GdkGLProc_glSecondaryColorPointer) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColorPointer =
       (GdkGLProc_glSecondaryColorPointer) gdk_gl_get_proc_address ("glSecondaryColorPointer");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glSecondaryColorPointer () - %s",
-               (_procs_GL_VERSION_1_4.glSecondaryColorPointer) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColorPointer) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glSecondaryColorPointer);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glSecondaryColorPointer);
 }
 
 /* glWindowPos2d */
@@ -2346,15 +2447,15 @@ gdk_gl_get_glWindowPos2d (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2d == (GdkGLProc_glWindowPos2d) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2d =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2d == (GdkGLProc_glWindowPos2d) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2d =
       (GdkGLProc_glWindowPos2d) gdk_gl_get_proc_address ("glWindowPos2d");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2d () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2d) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2d);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2d);
 }
 
 /* glWindowPos2dv */
@@ -2364,15 +2465,15 @@ gdk_gl_get_glWindowPos2dv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2dv == (GdkGLProc_glWindowPos2dv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2dv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2dv == (GdkGLProc_glWindowPos2dv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2dv =
       (GdkGLProc_glWindowPos2dv) gdk_gl_get_proc_address ("glWindowPos2dv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2dv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2dv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2dv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2dv);
 }
 
 /* glWindowPos2f */
@@ -2382,15 +2483,15 @@ gdk_gl_get_glWindowPos2f (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2f == (GdkGLProc_glWindowPos2f) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2f =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2f == (GdkGLProc_glWindowPos2f) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2f =
       (GdkGLProc_glWindowPos2f) gdk_gl_get_proc_address ("glWindowPos2f");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2f () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2f) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2f);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2f);
 }
 
 /* glWindowPos2fv */
@@ -2400,15 +2501,15 @@ gdk_gl_get_glWindowPos2fv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2fv == (GdkGLProc_glWindowPos2fv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2fv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2fv == (GdkGLProc_glWindowPos2fv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2fv =
       (GdkGLProc_glWindowPos2fv) gdk_gl_get_proc_address ("glWindowPos2fv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2fv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2fv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2fv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2fv);
 }
 
 /* glWindowPos2i */
@@ -2418,15 +2519,15 @@ gdk_gl_get_glWindowPos2i (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2i == (GdkGLProc_glWindowPos2i) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2i =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2i == (GdkGLProc_glWindowPos2i) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2i =
       (GdkGLProc_glWindowPos2i) gdk_gl_get_proc_address ("glWindowPos2i");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2i () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2i) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2i);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2i);
 }
 
 /* glWindowPos2iv */
@@ -2436,15 +2537,15 @@ gdk_gl_get_glWindowPos2iv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2iv == (GdkGLProc_glWindowPos2iv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2iv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2iv == (GdkGLProc_glWindowPos2iv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2iv =
       (GdkGLProc_glWindowPos2iv) gdk_gl_get_proc_address ("glWindowPos2iv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2iv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2iv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2iv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2iv);
 }
 
 /* glWindowPos2s */
@@ -2454,15 +2555,15 @@ gdk_gl_get_glWindowPos2s (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2s == (GdkGLProc_glWindowPos2s) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2s =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2s == (GdkGLProc_glWindowPos2s) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2s =
       (GdkGLProc_glWindowPos2s) gdk_gl_get_proc_address ("glWindowPos2s");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2s () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2s) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2s);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2s);
 }
 
 /* glWindowPos2sv */
@@ -2472,15 +2573,15 @@ gdk_gl_get_glWindowPos2sv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos2sv == (GdkGLProc_glWindowPos2sv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos2sv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2sv == (GdkGLProc_glWindowPos2sv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2sv =
       (GdkGLProc_glWindowPos2sv) gdk_gl_get_proc_address ("glWindowPos2sv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos2sv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos2sv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos2sv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos2sv);
 }
 
 /* glWindowPos3d */
@@ -2490,15 +2591,15 @@ gdk_gl_get_glWindowPos3d (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3d == (GdkGLProc_glWindowPos3d) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3d =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3d == (GdkGLProc_glWindowPos3d) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3d =
       (GdkGLProc_glWindowPos3d) gdk_gl_get_proc_address ("glWindowPos3d");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3d () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3d) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3d);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3d);
 }
 
 /* glWindowPos3dv */
@@ -2508,15 +2609,15 @@ gdk_gl_get_glWindowPos3dv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3dv == (GdkGLProc_glWindowPos3dv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3dv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3dv == (GdkGLProc_glWindowPos3dv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3dv =
       (GdkGLProc_glWindowPos3dv) gdk_gl_get_proc_address ("glWindowPos3dv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3dv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3dv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3dv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3dv);
 }
 
 /* glWindowPos3f */
@@ -2526,15 +2627,15 @@ gdk_gl_get_glWindowPos3f (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3f == (GdkGLProc_glWindowPos3f) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3f =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3f == (GdkGLProc_glWindowPos3f) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3f =
       (GdkGLProc_glWindowPos3f) gdk_gl_get_proc_address ("glWindowPos3f");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3f () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3f) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3f);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3f);
 }
 
 /* glWindowPos3fv */
@@ -2544,15 +2645,15 @@ gdk_gl_get_glWindowPos3fv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3fv == (GdkGLProc_glWindowPos3fv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3fv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3fv == (GdkGLProc_glWindowPos3fv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3fv =
       (GdkGLProc_glWindowPos3fv) gdk_gl_get_proc_address ("glWindowPos3fv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3fv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3fv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3fv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3fv);
 }
 
 /* glWindowPos3i */
@@ -2562,15 +2663,15 @@ gdk_gl_get_glWindowPos3i (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3i == (GdkGLProc_glWindowPos3i) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3i =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3i == (GdkGLProc_glWindowPos3i) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3i =
       (GdkGLProc_glWindowPos3i) gdk_gl_get_proc_address ("glWindowPos3i");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3i () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3i) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3i);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3i);
 }
 
 /* glWindowPos3iv */
@@ -2580,15 +2681,15 @@ gdk_gl_get_glWindowPos3iv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3iv == (GdkGLProc_glWindowPos3iv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3iv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3iv == (GdkGLProc_glWindowPos3iv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3iv =
       (GdkGLProc_glWindowPos3iv) gdk_gl_get_proc_address ("glWindowPos3iv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3iv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3iv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3iv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3iv);
 }
 
 /* glWindowPos3s */
@@ -2598,15 +2699,15 @@ gdk_gl_get_glWindowPos3s (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3s == (GdkGLProc_glWindowPos3s) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3s =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3s == (GdkGLProc_glWindowPos3s) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3s =
       (GdkGLProc_glWindowPos3s) gdk_gl_get_proc_address ("glWindowPos3s");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3s () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3s) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3s);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3s);
 }
 
 /* glWindowPos3sv */
@@ -2616,20 +2717,20 @@ gdk_gl_get_glWindowPos3sv (void)
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_VERSION_1_4.glWindowPos3sv == (GdkGLProc_glWindowPos3sv) -1)
-    _procs_GL_VERSION_1_4.glWindowPos3sv =
+  if (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3sv == (GdkGLProc_glWindowPos3sv) -1)
+    _procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3sv =
       (GdkGLProc_glWindowPos3sv) gdk_gl_get_proc_address ("glWindowPos3sv");
 
   GDK_GL_NOTE (MISC,
     g_message (" - gdk_gl_get_glWindowPos3sv () - %s",
-               (_procs_GL_VERSION_1_4.glWindowPos3sv) ? "supported" : "not supported"));
+               (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_VERSION_1_4.glWindowPos3sv);
+  return (GdkGLProc) (_procs_GL_VERSION_1_4_DEPRECATED.glWindowPos3sv);
 }
 
-/* Get GL_VERSION_1_4 functions */
-GdkGL_GL_VERSION_1_4 *
-gdk_gl_get_GL_VERSION_1_4 (void)
+/* Get GL_VERSION_1_4_DEPRECATED functions */
+GdkGL_GL_VERSION_1_4_DEPRECATED *
+gdk_gl_get_GL_VERSION_1_4_DEPRECATED (void)
 {
   static gint supported = -1;
 
@@ -2638,18 +2739,11 @@ gdk_gl_get_GL_VERSION_1_4 (void)
 
   if (supported == -1)
     {
-      supported =  (gdk_gl_get_glBlendFuncSeparate () != NULL);
-      supported &= (gdk_gl_get_glFogCoordf () != NULL);
+      supported =  (gdk_gl_get_glFogCoordf () != NULL);
       supported &= (gdk_gl_get_glFogCoordfv () != NULL);
       supported &= (gdk_gl_get_glFogCoordd () != NULL);
       supported &= (gdk_gl_get_glFogCoorddv () != NULL);
       supported &= (gdk_gl_get_glFogCoordPointer () != NULL);
-      supported &= (gdk_gl_get_glMultiDrawArrays () != NULL);
-      supported &= (gdk_gl_get_glMultiDrawElements () != NULL);
-      supported &= (gdk_gl_get_glPointParameterf () != NULL);
-      supported &= (gdk_gl_get_glPointParameterfv () != NULL);
-      supported &= (gdk_gl_get_glPointParameteri () != NULL);
-      supported &= (gdk_gl_get_glPointParameteriv () != NULL);
       supported &= (gdk_gl_get_glSecondaryColor3b () != NULL);
       supported &= (gdk_gl_get_glSecondaryColor3bv () != NULL);
       supported &= (gdk_gl_get_glSecondaryColor3d () != NULL);
@@ -2686,3638 +2780,3577 @@ gdk_gl_get_GL_VERSION_1_4 (void)
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_VERSION_1_4 () - %s",
+    g_message (" - gdk_gl_get_GL_VERSION_1_4_DEPRECATED () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_VERSION_1_4;
+  return &_procs_GL_VERSION_1_4_DEPRECATED;
 }
 
 /*
- * GL_ARB_multitexture
+ * GL_VERSION_1_5
  */
 
-static GdkGL_GL_ARB_multitexture _procs_GL_ARB_multitexture = {
-  (GdkGLProc_glActiveTextureARB) -1,
-  (GdkGLProc_glClientActiveTextureARB) -1,
-  (GdkGLProc_glMultiTexCoord1dARB) -1,
-  (GdkGLProc_glMultiTexCoord1dvARB) -1,
-  (GdkGLProc_glMultiTexCoord1fARB) -1,
-  (GdkGLProc_glMultiTexCoord1fvARB) -1,
-  (GdkGLProc_glMultiTexCoord1iARB) -1,
-  (GdkGLProc_glMultiTexCoord1ivARB) -1,
-  (GdkGLProc_glMultiTexCoord1sARB) -1,
-  (GdkGLProc_glMultiTexCoord1svARB) -1,
-  (GdkGLProc_glMultiTexCoord2dARB) -1,
-  (GdkGLProc_glMultiTexCoord2dvARB) -1,
-  (GdkGLProc_glMultiTexCoord2fARB) -1,
-  (GdkGLProc_glMultiTexCoord2fvARB) -1,
-  (GdkGLProc_glMultiTexCoord2iARB) -1,
-  (GdkGLProc_glMultiTexCoord2ivARB) -1,
-  (GdkGLProc_glMultiTexCoord2sARB) -1,
-  (GdkGLProc_glMultiTexCoord2svARB) -1,
-  (GdkGLProc_glMultiTexCoord3dARB) -1,
-  (GdkGLProc_glMultiTexCoord3dvARB) -1,
-  (GdkGLProc_glMultiTexCoord3fARB) -1,
-  (GdkGLProc_glMultiTexCoord3fvARB) -1,
-  (GdkGLProc_glMultiTexCoord3iARB) -1,
-  (GdkGLProc_glMultiTexCoord3ivARB) -1,
-  (GdkGLProc_glMultiTexCoord3sARB) -1,
-  (GdkGLProc_glMultiTexCoord3svARB) -1,
-  (GdkGLProc_glMultiTexCoord4dARB) -1,
-  (GdkGLProc_glMultiTexCoord4dvARB) -1,
-  (GdkGLProc_glMultiTexCoord4fARB) -1,
-  (GdkGLProc_glMultiTexCoord4fvARB) -1,
-  (GdkGLProc_glMultiTexCoord4iARB) -1,
-  (GdkGLProc_glMultiTexCoord4ivARB) -1,
-  (GdkGLProc_glMultiTexCoord4sARB) -1,
-  (GdkGLProc_glMultiTexCoord4svARB) -1
+static GdkGL_GL_VERSION_1_5 _procs_GL_VERSION_1_5 = {
+  (GdkGLProc_glGenQueries) -1,
+  (GdkGLProc_glDeleteQueries) -1,
+  (GdkGLProc_glIsQuery) -1,
+  (GdkGLProc_glBeginQuery) -1,
+  (GdkGLProc_glEndQuery) -1,
+  (GdkGLProc_glGetQueryiv) -1,
+  (GdkGLProc_glGetQueryObjectiv) -1,
+  (GdkGLProc_glGetQueryObjectuiv) -1,
+  (GdkGLProc_glBindBuffer) -1,
+  (GdkGLProc_glDeleteBuffers) -1,
+  (GdkGLProc_glGenBuffers) -1,
+  (GdkGLProc_glIsBuffer) -1,
+  (GdkGLProc_glBufferData) -1,
+  (GdkGLProc_glBufferSubData) -1,
+  (GdkGLProc_glGetBufferSubData) -1,
+  (GdkGLProc_glMapBuffer) -1,
+  (GdkGLProc_glUnmapBuffer) -1,
+  (GdkGLProc_glGetBufferParameteriv) -1,
+  (GdkGLProc_glGetBufferPointerv) -1
 };
 
-/* glActiveTextureARB */
+/* glGenQueries */
 GdkGLProc
-gdk_gl_get_glActiveTextureARB (void)
+gdk_gl_get_glGenQueries (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glActiveTextureARB == (GdkGLProc_glActiveTextureARB) -1)
-    _procs_GL_ARB_multitexture.glActiveTextureARB =
-      (GdkGLProc_glActiveTextureARB) gdk_gl_get_proc_address ("glActiveTextureARB");
+  if (_procs_GL_VERSION_1_5.glGenQueries == (GdkGLProc_glGenQueries) -1)
+    _procs_GL_VERSION_1_5.glGenQueries =
+      (GdkGLProc_glGenQueries) gdk_gl_get_proc_address ("glGenQueries");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glActiveTextureARB () - %s",
-               (_procs_GL_ARB_multitexture.glActiveTextureARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenQueries () - %s",
+               (_procs_GL_VERSION_1_5.glGenQueries) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glActiveTextureARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGenQueries);
 }
 
-/* glClientActiveTextureARB */
+/* glDeleteQueries */
 GdkGLProc
-gdk_gl_get_glClientActiveTextureARB (void)
+gdk_gl_get_glDeleteQueries (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glClientActiveTextureARB == (GdkGLProc_glClientActiveTextureARB) -1)
-    _procs_GL_ARB_multitexture.glClientActiveTextureARB =
-      (GdkGLProc_glClientActiveTextureARB) gdk_gl_get_proc_address ("glClientActiveTextureARB");
+  if (_procs_GL_VERSION_1_5.glDeleteQueries == (GdkGLProc_glDeleteQueries) -1)
+    _procs_GL_VERSION_1_5.glDeleteQueries =
+      (GdkGLProc_glDeleteQueries) gdk_gl_get_proc_address ("glDeleteQueries");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glClientActiveTextureARB () - %s",
-               (_procs_GL_ARB_multitexture.glClientActiveTextureARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteQueries () - %s",
+               (_procs_GL_VERSION_1_5.glDeleteQueries) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glClientActiveTextureARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glDeleteQueries);
 }
 
-/* glMultiTexCoord1dARB */
+/* glIsQuery */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1dARB (void)
+gdk_gl_get_glIsQuery (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1dARB == (GdkGLProc_glMultiTexCoord1dARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1dARB =
-      (GdkGLProc_glMultiTexCoord1dARB) gdk_gl_get_proc_address ("glMultiTexCoord1dARB");
+  if (_procs_GL_VERSION_1_5.glIsQuery == (GdkGLProc_glIsQuery) -1)
+    _procs_GL_VERSION_1_5.glIsQuery =
+      (GdkGLProc_glIsQuery) gdk_gl_get_proc_address ("glIsQuery");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1dARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsQuery () - %s",
+               (_procs_GL_VERSION_1_5.glIsQuery) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glIsQuery);
 }
 
-/* glMultiTexCoord1dvARB */
+/* glBeginQuery */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1dvARB (void)
+gdk_gl_get_glBeginQuery (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1dvARB == (GdkGLProc_glMultiTexCoord1dvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1dvARB =
-      (GdkGLProc_glMultiTexCoord1dvARB) gdk_gl_get_proc_address ("glMultiTexCoord1dvARB");
+  if (_procs_GL_VERSION_1_5.glBeginQuery == (GdkGLProc_glBeginQuery) -1)
+    _procs_GL_VERSION_1_5.glBeginQuery =
+      (GdkGLProc_glBeginQuery) gdk_gl_get_proc_address ("glBeginQuery");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1dvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginQuery () - %s",
+               (_procs_GL_VERSION_1_5.glBeginQuery) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glBeginQuery);
 }
 
-/* glMultiTexCoord1fARB */
+/* glEndQuery */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1fARB (void)
+gdk_gl_get_glEndQuery (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1fARB == (GdkGLProc_glMultiTexCoord1fARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1fARB =
-      (GdkGLProc_glMultiTexCoord1fARB) gdk_gl_get_proc_address ("glMultiTexCoord1fARB");
+  if (_procs_GL_VERSION_1_5.glEndQuery == (GdkGLProc_glEndQuery) -1)
+    _procs_GL_VERSION_1_5.glEndQuery =
+      (GdkGLProc_glEndQuery) gdk_gl_get_proc_address ("glEndQuery");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1fARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndQuery () - %s",
+               (_procs_GL_VERSION_1_5.glEndQuery) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glEndQuery);
 }
 
-/* glMultiTexCoord1fvARB */
+/* glGetQueryiv */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1fvARB (void)
+gdk_gl_get_glGetQueryiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1fvARB == (GdkGLProc_glMultiTexCoord1fvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1fvARB =
-      (GdkGLProc_glMultiTexCoord1fvARB) gdk_gl_get_proc_address ("glMultiTexCoord1fvARB");
+  if (_procs_GL_VERSION_1_5.glGetQueryiv == (GdkGLProc_glGetQueryiv) -1)
+    _procs_GL_VERSION_1_5.glGetQueryiv =
+      (GdkGLProc_glGetQueryiv) gdk_gl_get_proc_address ("glGetQueryiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1fvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetQueryiv () - %s",
+               (_procs_GL_VERSION_1_5.glGetQueryiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGetQueryiv);
 }
 
-/* glMultiTexCoord1iARB */
+/* glGetQueryObjectiv */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1iARB (void)
+gdk_gl_get_glGetQueryObjectiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1iARB == (GdkGLProc_glMultiTexCoord1iARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1iARB =
-      (GdkGLProc_glMultiTexCoord1iARB) gdk_gl_get_proc_address ("glMultiTexCoord1iARB");
+  if (_procs_GL_VERSION_1_5.glGetQueryObjectiv == (GdkGLProc_glGetQueryObjectiv) -1)
+    _procs_GL_VERSION_1_5.glGetQueryObjectiv =
+      (GdkGLProc_glGetQueryObjectiv) gdk_gl_get_proc_address ("glGetQueryObjectiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1iARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1iARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetQueryObjectiv () - %s",
+               (_procs_GL_VERSION_1_5.glGetQueryObjectiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1iARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGetQueryObjectiv);
 }
 
-/* glMultiTexCoord1ivARB */
+/* glGetQueryObjectuiv */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1ivARB (void)
+gdk_gl_get_glGetQueryObjectuiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1ivARB == (GdkGLProc_glMultiTexCoord1ivARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1ivARB =
-      (GdkGLProc_glMultiTexCoord1ivARB) gdk_gl_get_proc_address ("glMultiTexCoord1ivARB");
+  if (_procs_GL_VERSION_1_5.glGetQueryObjectuiv == (GdkGLProc_glGetQueryObjectuiv) -1)
+    _procs_GL_VERSION_1_5.glGetQueryObjectuiv =
+      (GdkGLProc_glGetQueryObjectuiv) gdk_gl_get_proc_address ("glGetQueryObjectuiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1ivARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1ivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetQueryObjectuiv () - %s",
+               (_procs_GL_VERSION_1_5.glGetQueryObjectuiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1ivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGetQueryObjectuiv);
 }
 
-/* glMultiTexCoord1sARB */
+/* glBindBuffer */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1sARB (void)
+gdk_gl_get_glBindBuffer (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1sARB == (GdkGLProc_glMultiTexCoord1sARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1sARB =
-      (GdkGLProc_glMultiTexCoord1sARB) gdk_gl_get_proc_address ("glMultiTexCoord1sARB");
+  if (_procs_GL_VERSION_1_5.glBindBuffer == (GdkGLProc_glBindBuffer) -1)
+    _procs_GL_VERSION_1_5.glBindBuffer =
+      (GdkGLProc_glBindBuffer) gdk_gl_get_proc_address ("glBindBuffer");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1sARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBuffer () - %s",
+               (_procs_GL_VERSION_1_5.glBindBuffer) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glBindBuffer);
 }
 
-/* glMultiTexCoord1svARB */
+/* glDeleteBuffers */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1svARB (void)
+gdk_gl_get_glDeleteBuffers (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord1svARB == (GdkGLProc_glMultiTexCoord1svARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord1svARB =
-      (GdkGLProc_glMultiTexCoord1svARB) gdk_gl_get_proc_address ("glMultiTexCoord1svARB");
+  if (_procs_GL_VERSION_1_5.glDeleteBuffers == (GdkGLProc_glDeleteBuffers) -1)
+    _procs_GL_VERSION_1_5.glDeleteBuffers =
+      (GdkGLProc_glDeleteBuffers) gdk_gl_get_proc_address ("glDeleteBuffers");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1svARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord1svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteBuffers () - %s",
+               (_procs_GL_VERSION_1_5.glDeleteBuffers) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glDeleteBuffers);
 }
 
-/* glMultiTexCoord2dARB */
+/* glGenBuffers */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2dARB (void)
+gdk_gl_get_glGenBuffers (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2dARB == (GdkGLProc_glMultiTexCoord2dARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2dARB =
-      (GdkGLProc_glMultiTexCoord2dARB) gdk_gl_get_proc_address ("glMultiTexCoord2dARB");
+  if (_procs_GL_VERSION_1_5.glGenBuffers == (GdkGLProc_glGenBuffers) -1)
+    _procs_GL_VERSION_1_5.glGenBuffers =
+      (GdkGLProc_glGenBuffers) gdk_gl_get_proc_address ("glGenBuffers");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2dARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenBuffers () - %s",
+               (_procs_GL_VERSION_1_5.glGenBuffers) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGenBuffers);
 }
 
-/* glMultiTexCoord2dvARB */
+/* glIsBuffer */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2dvARB (void)
+gdk_gl_get_glIsBuffer (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2dvARB == (GdkGLProc_glMultiTexCoord2dvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2dvARB =
-      (GdkGLProc_glMultiTexCoord2dvARB) gdk_gl_get_proc_address ("glMultiTexCoord2dvARB");
+  if (_procs_GL_VERSION_1_5.glIsBuffer == (GdkGLProc_glIsBuffer) -1)
+    _procs_GL_VERSION_1_5.glIsBuffer =
+      (GdkGLProc_glIsBuffer) gdk_gl_get_proc_address ("glIsBuffer");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2dvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsBuffer () - %s",
+               (_procs_GL_VERSION_1_5.glIsBuffer) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glIsBuffer);
 }
 
-/* glMultiTexCoord2fARB */
+/* glBufferData */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2fARB (void)
+gdk_gl_get_glBufferData (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2fARB == (GdkGLProc_glMultiTexCoord2fARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2fARB =
-      (GdkGLProc_glMultiTexCoord2fARB) gdk_gl_get_proc_address ("glMultiTexCoord2fARB");
+  if (_procs_GL_VERSION_1_5.glBufferData == (GdkGLProc_glBufferData) -1)
+    _procs_GL_VERSION_1_5.glBufferData =
+      (GdkGLProc_glBufferData) gdk_gl_get_proc_address ("glBufferData");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2fARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBufferData () - %s",
+               (_procs_GL_VERSION_1_5.glBufferData) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glBufferData);
 }
 
-/* glMultiTexCoord2fvARB */
+/* glBufferSubData */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2fvARB (void)
+gdk_gl_get_glBufferSubData (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2fvARB == (GdkGLProc_glMultiTexCoord2fvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2fvARB =
-      (GdkGLProc_glMultiTexCoord2fvARB) gdk_gl_get_proc_address ("glMultiTexCoord2fvARB");
+  if (_procs_GL_VERSION_1_5.glBufferSubData == (GdkGLProc_glBufferSubData) -1)
+    _procs_GL_VERSION_1_5.glBufferSubData =
+      (GdkGLProc_glBufferSubData) gdk_gl_get_proc_address ("glBufferSubData");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2fvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBufferSubData () - %s",
+               (_procs_GL_VERSION_1_5.glBufferSubData) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glBufferSubData);
 }
 
-/* glMultiTexCoord2iARB */
+/* glGetBufferSubData */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2iARB (void)
+gdk_gl_get_glGetBufferSubData (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2iARB == (GdkGLProc_glMultiTexCoord2iARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2iARB =
-      (GdkGLProc_glMultiTexCoord2iARB) gdk_gl_get_proc_address ("glMultiTexCoord2iARB");
+  if (_procs_GL_VERSION_1_5.glGetBufferSubData == (GdkGLProc_glGetBufferSubData) -1)
+    _procs_GL_VERSION_1_5.glGetBufferSubData =
+      (GdkGLProc_glGetBufferSubData) gdk_gl_get_proc_address ("glGetBufferSubData");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2iARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2iARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetBufferSubData () - %s",
+               (_procs_GL_VERSION_1_5.glGetBufferSubData) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2iARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGetBufferSubData);
 }
 
-/* glMultiTexCoord2ivARB */
+/* glMapBuffer */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2ivARB (void)
+gdk_gl_get_glMapBuffer (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2ivARB == (GdkGLProc_glMultiTexCoord2ivARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2ivARB =
-      (GdkGLProc_glMultiTexCoord2ivARB) gdk_gl_get_proc_address ("glMultiTexCoord2ivARB");
+  if (_procs_GL_VERSION_1_5.glMapBuffer == (GdkGLProc_glMapBuffer) -1)
+    _procs_GL_VERSION_1_5.glMapBuffer =
+      (GdkGLProc_glMapBuffer) gdk_gl_get_proc_address ("glMapBuffer");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2ivARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2ivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMapBuffer () - %s",
+               (_procs_GL_VERSION_1_5.glMapBuffer) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2ivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glMapBuffer);
 }
 
-/* glMultiTexCoord2sARB */
+/* glUnmapBuffer */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2sARB (void)
+gdk_gl_get_glUnmapBuffer (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2sARB == (GdkGLProc_glMultiTexCoord2sARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2sARB =
-      (GdkGLProc_glMultiTexCoord2sARB) gdk_gl_get_proc_address ("glMultiTexCoord2sARB");
+  if (_procs_GL_VERSION_1_5.glUnmapBuffer == (GdkGLProc_glUnmapBuffer) -1)
+    _procs_GL_VERSION_1_5.glUnmapBuffer =
+      (GdkGLProc_glUnmapBuffer) gdk_gl_get_proc_address ("glUnmapBuffer");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2sARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUnmapBuffer () - %s",
+               (_procs_GL_VERSION_1_5.glUnmapBuffer) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glUnmapBuffer);
 }
 
-/* glMultiTexCoord2svARB */
+/* glGetBufferParameteriv */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2svARB (void)
+gdk_gl_get_glGetBufferParameteriv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord2svARB == (GdkGLProc_glMultiTexCoord2svARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord2svARB =
-      (GdkGLProc_glMultiTexCoord2svARB) gdk_gl_get_proc_address ("glMultiTexCoord2svARB");
+  if (_procs_GL_VERSION_1_5.glGetBufferParameteriv == (GdkGLProc_glGetBufferParameteriv) -1)
+    _procs_GL_VERSION_1_5.glGetBufferParameteriv =
+      (GdkGLProc_glGetBufferParameteriv) gdk_gl_get_proc_address ("glGetBufferParameteriv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2svARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord2svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetBufferParameteriv () - %s",
+               (_procs_GL_VERSION_1_5.glGetBufferParameteriv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGetBufferParameteriv);
 }
 
-/* glMultiTexCoord3dARB */
+/* glGetBufferPointerv */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3dARB (void)
+gdk_gl_get_glGetBufferPointerv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3dARB == (GdkGLProc_glMultiTexCoord3dARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3dARB =
-      (GdkGLProc_glMultiTexCoord3dARB) gdk_gl_get_proc_address ("glMultiTexCoord3dARB");
+  if (_procs_GL_VERSION_1_5.glGetBufferPointerv == (GdkGLProc_glGetBufferPointerv) -1)
+    _procs_GL_VERSION_1_5.glGetBufferPointerv =
+      (GdkGLProc_glGetBufferPointerv) gdk_gl_get_proc_address ("glGetBufferPointerv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3dARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetBufferPointerv () - %s",
+               (_procs_GL_VERSION_1_5.glGetBufferPointerv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_1_5.glGetBufferPointerv);
 }
 
-/* glMultiTexCoord3dvARB */
+/* Get GL_VERSION_1_5 functions */
+GdkGL_GL_VERSION_1_5 *
+gdk_gl_get_GL_VERSION_1_5 (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported =  (gdk_gl_get_glGenQueries () != NULL);
+      supported &= (gdk_gl_get_glDeleteQueries () != NULL);
+      supported &= (gdk_gl_get_glIsQuery () != NULL);
+      supported &= (gdk_gl_get_glBeginQuery () != NULL);
+      supported &= (gdk_gl_get_glEndQuery () != NULL);
+      supported &= (gdk_gl_get_glGetQueryiv () != NULL);
+      supported &= (gdk_gl_get_glGetQueryObjectiv () != NULL);
+      supported &= (gdk_gl_get_glGetQueryObjectuiv () != NULL);
+      supported &= (gdk_gl_get_glBindBuffer () != NULL);
+      supported &= (gdk_gl_get_glDeleteBuffers () != NULL);
+      supported &= (gdk_gl_get_glGenBuffers () != NULL);
+      supported &= (gdk_gl_get_glIsBuffer () != NULL);
+      supported &= (gdk_gl_get_glBufferData () != NULL);
+      supported &= (gdk_gl_get_glBufferSubData () != NULL);
+      supported &= (gdk_gl_get_glGetBufferSubData () != NULL);
+      supported &= (gdk_gl_get_glMapBuffer () != NULL);
+      supported &= (gdk_gl_get_glUnmapBuffer () != NULL);
+      supported &= (gdk_gl_get_glGetBufferParameteriv () != NULL);
+      supported &= (gdk_gl_get_glGetBufferPointerv () != NULL);
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_VERSION_1_5 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_VERSION_1_5;
+}
+
+/*
+ * GL_VERSION_2_0
+ */
+
+static GdkGL_GL_VERSION_2_0 _procs_GL_VERSION_2_0 = {
+  (GdkGLProc_glBlendEquationSeparate) -1,
+  (GdkGLProc_glDrawBuffers) -1,
+  (GdkGLProc_glStencilOpSeparate) -1,
+  (GdkGLProc_glStencilFuncSeparate) -1,
+  (GdkGLProc_glStencilMaskSeparate) -1,
+  (GdkGLProc_glAttachShader) -1,
+  (GdkGLProc_glBindAttribLocation) -1,
+  (GdkGLProc_glCompileShader) -1,
+  (GdkGLProc_glCreateProgram) -1,
+  (GdkGLProc_glCreateShader) -1,
+  (GdkGLProc_glDeleteProgram) -1,
+  (GdkGLProc_glDeleteShader) -1,
+  (GdkGLProc_glDetachShader) -1,
+  (GdkGLProc_glDisableVertexAttribArray) -1,
+  (GdkGLProc_glEnableVertexAttribArray) -1,
+  (GdkGLProc_glGetActiveAttrib) -1,
+  (GdkGLProc_glGetActiveUniform) -1,
+  (GdkGLProc_glGetAttachedShaders) -1,
+  (GdkGLProc_glGetAttribLocation) -1,
+  (GdkGLProc_glGetProgramiv) -1,
+  (GdkGLProc_glGetProgramInfoLog) -1,
+  (GdkGLProc_glGetShaderiv) -1,
+  (GdkGLProc_glGetShaderInfoLog) -1,
+  (GdkGLProc_glGetShaderSource) -1,
+  (GdkGLProc_glGetUniformLocation) -1,
+  (GdkGLProc_glGetUniformfv) -1,
+  (GdkGLProc_glGetUniformiv) -1,
+  (GdkGLProc_glGetVertexAttribdv) -1,
+  (GdkGLProc_glGetVertexAttribfv) -1,
+  (GdkGLProc_glGetVertexAttribiv) -1,
+  (GdkGLProc_glGetVertexAttribPointerv) -1,
+  (GdkGLProc_glIsProgram) -1,
+  (GdkGLProc_glIsShader) -1,
+  (GdkGLProc_glLinkProgram) -1,
+  (GdkGLProc_glShaderSource) -1,
+  (GdkGLProc_glUseProgram) -1,
+  (GdkGLProc_glUniform1f) -1,
+  (GdkGLProc_glUniform2f) -1,
+  (GdkGLProc_glUniform3f) -1,
+  (GdkGLProc_glUniform4f) -1,
+  (GdkGLProc_glUniform1i) -1,
+  (GdkGLProc_glUniform2i) -1,
+  (GdkGLProc_glUniform3i) -1,
+  (GdkGLProc_glUniform4i) -1,
+  (GdkGLProc_glUniform1fv) -1,
+  (GdkGLProc_glUniform2fv) -1,
+  (GdkGLProc_glUniform3fv) -1,
+  (GdkGLProc_glUniform4fv) -1,
+  (GdkGLProc_glUniform1iv) -1,
+  (GdkGLProc_glUniform2iv) -1,
+  (GdkGLProc_glUniform3iv) -1,
+  (GdkGLProc_glUniform4iv) -1,
+  (GdkGLProc_glUniformMatrix2fv) -1,
+  (GdkGLProc_glUniformMatrix3fv) -1,
+  (GdkGLProc_glUniformMatrix4fv) -1,
+  (GdkGLProc_glValidateProgram) -1,
+  (GdkGLProc_glVertexAttrib1d) -1,
+  (GdkGLProc_glVertexAttrib1dv) -1,
+  (GdkGLProc_glVertexAttrib1f) -1,
+  (GdkGLProc_glVertexAttrib1fv) -1,
+  (GdkGLProc_glVertexAttrib1s) -1,
+  (GdkGLProc_glVertexAttrib1sv) -1,
+  (GdkGLProc_glVertexAttrib2d) -1,
+  (GdkGLProc_glVertexAttrib2dv) -1,
+  (GdkGLProc_glVertexAttrib2f) -1,
+  (GdkGLProc_glVertexAttrib2fv) -1,
+  (GdkGLProc_glVertexAttrib2s) -1,
+  (GdkGLProc_glVertexAttrib2sv) -1,
+  (GdkGLProc_glVertexAttrib3d) -1,
+  (GdkGLProc_glVertexAttrib3dv) -1,
+  (GdkGLProc_glVertexAttrib3f) -1,
+  (GdkGLProc_glVertexAttrib3fv) -1,
+  (GdkGLProc_glVertexAttrib3s) -1,
+  (GdkGLProc_glVertexAttrib3sv) -1,
+  (GdkGLProc_glVertexAttrib4Nbv) -1,
+  (GdkGLProc_glVertexAttrib4Niv) -1,
+  (GdkGLProc_glVertexAttrib4Nsv) -1,
+  (GdkGLProc_glVertexAttrib4Nub) -1,
+  (GdkGLProc_glVertexAttrib4Nubv) -1,
+  (GdkGLProc_glVertexAttrib4Nuiv) -1,
+  (GdkGLProc_glVertexAttrib4Nusv) -1,
+  (GdkGLProc_glVertexAttrib4bv) -1,
+  (GdkGLProc_glVertexAttrib4d) -1,
+  (GdkGLProc_glVertexAttrib4dv) -1,
+  (GdkGLProc_glVertexAttrib4f) -1,
+  (GdkGLProc_glVertexAttrib4fv) -1,
+  (GdkGLProc_glVertexAttrib4iv) -1,
+  (GdkGLProc_glVertexAttrib4s) -1,
+  (GdkGLProc_glVertexAttrib4sv) -1,
+  (GdkGLProc_glVertexAttrib4ubv) -1,
+  (GdkGLProc_glVertexAttrib4uiv) -1,
+  (GdkGLProc_glVertexAttrib4usv) -1,
+  (GdkGLProc_glVertexAttribPointer) -1
+};
+
+/* glBlendEquationSeparate */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3dvARB (void)
+gdk_gl_get_glBlendEquationSeparate (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3dvARB == (GdkGLProc_glMultiTexCoord3dvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3dvARB =
-      (GdkGLProc_glMultiTexCoord3dvARB) gdk_gl_get_proc_address ("glMultiTexCoord3dvARB");
+  if (_procs_GL_VERSION_2_0.glBlendEquationSeparate == (GdkGLProc_glBlendEquationSeparate) -1)
+    _procs_GL_VERSION_2_0.glBlendEquationSeparate =
+      (GdkGLProc_glBlendEquationSeparate) gdk_gl_get_proc_address ("glBlendEquationSeparate");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3dvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBlendEquationSeparate () - %s",
+               (_procs_GL_VERSION_2_0.glBlendEquationSeparate) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glBlendEquationSeparate);
 }
 
-/* glMultiTexCoord3fARB */
+/* glDrawBuffers */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3fARB (void)
+gdk_gl_get_glDrawBuffers (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3fARB == (GdkGLProc_glMultiTexCoord3fARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3fARB =
-      (GdkGLProc_glMultiTexCoord3fARB) gdk_gl_get_proc_address ("glMultiTexCoord3fARB");
+  if (_procs_GL_VERSION_2_0.glDrawBuffers == (GdkGLProc_glDrawBuffers) -1)
+    _procs_GL_VERSION_2_0.glDrawBuffers =
+      (GdkGLProc_glDrawBuffers) gdk_gl_get_proc_address ("glDrawBuffers");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3fARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawBuffers () - %s",
+               (_procs_GL_VERSION_2_0.glDrawBuffers) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glDrawBuffers);
 }
 
-/* glMultiTexCoord3fvARB */
+/* glStencilOpSeparate */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3fvARB (void)
+gdk_gl_get_glStencilOpSeparate (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3fvARB == (GdkGLProc_glMultiTexCoord3fvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3fvARB =
-      (GdkGLProc_glMultiTexCoord3fvARB) gdk_gl_get_proc_address ("glMultiTexCoord3fvARB");
+  if (_procs_GL_VERSION_2_0.glStencilOpSeparate == (GdkGLProc_glStencilOpSeparate) -1)
+    _procs_GL_VERSION_2_0.glStencilOpSeparate =
+      (GdkGLProc_glStencilOpSeparate) gdk_gl_get_proc_address ("glStencilOpSeparate");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3fvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glStencilOpSeparate () - %s",
+               (_procs_GL_VERSION_2_0.glStencilOpSeparate) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glStencilOpSeparate);
 }
 
-/* glMultiTexCoord3iARB */
+/* glStencilFuncSeparate */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3iARB (void)
+gdk_gl_get_glStencilFuncSeparate (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3iARB == (GdkGLProc_glMultiTexCoord3iARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3iARB =
-      (GdkGLProc_glMultiTexCoord3iARB) gdk_gl_get_proc_address ("glMultiTexCoord3iARB");
+  if (_procs_GL_VERSION_2_0.glStencilFuncSeparate == (GdkGLProc_glStencilFuncSeparate) -1)
+    _procs_GL_VERSION_2_0.glStencilFuncSeparate =
+      (GdkGLProc_glStencilFuncSeparate) gdk_gl_get_proc_address ("glStencilFuncSeparate");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3iARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3iARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glStencilFuncSeparate () - %s",
+               (_procs_GL_VERSION_2_0.glStencilFuncSeparate) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3iARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glStencilFuncSeparate);
 }
 
-/* glMultiTexCoord3ivARB */
+/* glStencilMaskSeparate */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3ivARB (void)
+gdk_gl_get_glStencilMaskSeparate (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3ivARB == (GdkGLProc_glMultiTexCoord3ivARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3ivARB =
-      (GdkGLProc_glMultiTexCoord3ivARB) gdk_gl_get_proc_address ("glMultiTexCoord3ivARB");
+  if (_procs_GL_VERSION_2_0.glStencilMaskSeparate == (GdkGLProc_glStencilMaskSeparate) -1)
+    _procs_GL_VERSION_2_0.glStencilMaskSeparate =
+      (GdkGLProc_glStencilMaskSeparate) gdk_gl_get_proc_address ("glStencilMaskSeparate");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3ivARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3ivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glStencilMaskSeparate () - %s",
+               (_procs_GL_VERSION_2_0.glStencilMaskSeparate) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3ivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glStencilMaskSeparate);
 }
 
-/* glMultiTexCoord3sARB */
+/* glAttachShader */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3sARB (void)
+gdk_gl_get_glAttachShader (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3sARB == (GdkGLProc_glMultiTexCoord3sARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3sARB =
-      (GdkGLProc_glMultiTexCoord3sARB) gdk_gl_get_proc_address ("glMultiTexCoord3sARB");
+  if (_procs_GL_VERSION_2_0.glAttachShader == (GdkGLProc_glAttachShader) -1)
+    _procs_GL_VERSION_2_0.glAttachShader =
+      (GdkGLProc_glAttachShader) gdk_gl_get_proc_address ("glAttachShader");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3sARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glAttachShader () - %s",
+               (_procs_GL_VERSION_2_0.glAttachShader) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glAttachShader);
 }
 
-/* glMultiTexCoord3svARB */
+/* glBindAttribLocation */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3svARB (void)
+gdk_gl_get_glBindAttribLocation (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord3svARB == (GdkGLProc_glMultiTexCoord3svARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord3svARB =
-      (GdkGLProc_glMultiTexCoord3svARB) gdk_gl_get_proc_address ("glMultiTexCoord3svARB");
+  if (_procs_GL_VERSION_2_0.glBindAttribLocation == (GdkGLProc_glBindAttribLocation) -1)
+    _procs_GL_VERSION_2_0.glBindAttribLocation =
+      (GdkGLProc_glBindAttribLocation) gdk_gl_get_proc_address ("glBindAttribLocation");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3svARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord3svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindAttribLocation () - %s",
+               (_procs_GL_VERSION_2_0.glBindAttribLocation) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glBindAttribLocation);
 }
 
-/* glMultiTexCoord4dARB */
+/* glCompileShader */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4dARB (void)
+gdk_gl_get_glCompileShader (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4dARB == (GdkGLProc_glMultiTexCoord4dARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4dARB =
-      (GdkGLProc_glMultiTexCoord4dARB) gdk_gl_get_proc_address ("glMultiTexCoord4dARB");
+  if (_procs_GL_VERSION_2_0.glCompileShader == (GdkGLProc_glCompileShader) -1)
+    _procs_GL_VERSION_2_0.glCompileShader =
+      (GdkGLProc_glCompileShader) gdk_gl_get_proc_address ("glCompileShader");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4dARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompileShader () - %s",
+               (_procs_GL_VERSION_2_0.glCompileShader) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glCompileShader);
 }
 
-/* glMultiTexCoord4dvARB */
+/* glCreateProgram */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4dvARB (void)
+gdk_gl_get_glCreateProgram (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4dvARB == (GdkGLProc_glMultiTexCoord4dvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4dvARB =
-      (GdkGLProc_glMultiTexCoord4dvARB) gdk_gl_get_proc_address ("glMultiTexCoord4dvARB");
+  if (_procs_GL_VERSION_2_0.glCreateProgram == (GdkGLProc_glCreateProgram) -1)
+    _procs_GL_VERSION_2_0.glCreateProgram =
+      (GdkGLProc_glCreateProgram) gdk_gl_get_proc_address ("glCreateProgram");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4dvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCreateProgram () - %s",
+               (_procs_GL_VERSION_2_0.glCreateProgram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glCreateProgram);
 }
 
-/* glMultiTexCoord4fARB */
+/* glCreateShader */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4fARB (void)
+gdk_gl_get_glCreateShader (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4fARB == (GdkGLProc_glMultiTexCoord4fARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4fARB =
-      (GdkGLProc_glMultiTexCoord4fARB) gdk_gl_get_proc_address ("glMultiTexCoord4fARB");
+  if (_procs_GL_VERSION_2_0.glCreateShader == (GdkGLProc_glCreateShader) -1)
+    _procs_GL_VERSION_2_0.glCreateShader =
+      (GdkGLProc_glCreateShader) gdk_gl_get_proc_address ("glCreateShader");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4fARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCreateShader () - %s",
+               (_procs_GL_VERSION_2_0.glCreateShader) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glCreateShader);
 }
 
-/* glMultiTexCoord4fvARB */
+/* glDeleteProgram */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4fvARB (void)
+gdk_gl_get_glDeleteProgram (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4fvARB == (GdkGLProc_glMultiTexCoord4fvARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4fvARB =
-      (GdkGLProc_glMultiTexCoord4fvARB) gdk_gl_get_proc_address ("glMultiTexCoord4fvARB");
+  if (_procs_GL_VERSION_2_0.glDeleteProgram == (GdkGLProc_glDeleteProgram) -1)
+    _procs_GL_VERSION_2_0.glDeleteProgram =
+      (GdkGLProc_glDeleteProgram) gdk_gl_get_proc_address ("glDeleteProgram");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4fvARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteProgram () - %s",
+               (_procs_GL_VERSION_2_0.glDeleteProgram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glDeleteProgram);
 }
 
-/* glMultiTexCoord4iARB */
+/* glDeleteShader */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4iARB (void)
+gdk_gl_get_glDeleteShader (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4iARB == (GdkGLProc_glMultiTexCoord4iARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4iARB =
-      (GdkGLProc_glMultiTexCoord4iARB) gdk_gl_get_proc_address ("glMultiTexCoord4iARB");
+  if (_procs_GL_VERSION_2_0.glDeleteShader == (GdkGLProc_glDeleteShader) -1)
+    _procs_GL_VERSION_2_0.glDeleteShader =
+      (GdkGLProc_glDeleteShader) gdk_gl_get_proc_address ("glDeleteShader");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4iARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4iARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteShader () - %s",
+               (_procs_GL_VERSION_2_0.glDeleteShader) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4iARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glDeleteShader);
 }
 
-/* glMultiTexCoord4ivARB */
+/* glDetachShader */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4ivARB (void)
+gdk_gl_get_glDetachShader (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4ivARB == (GdkGLProc_glMultiTexCoord4ivARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4ivARB =
-      (GdkGLProc_glMultiTexCoord4ivARB) gdk_gl_get_proc_address ("glMultiTexCoord4ivARB");
+  if (_procs_GL_VERSION_2_0.glDetachShader == (GdkGLProc_glDetachShader) -1)
+    _procs_GL_VERSION_2_0.glDetachShader =
+      (GdkGLProc_glDetachShader) gdk_gl_get_proc_address ("glDetachShader");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4ivARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4ivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDetachShader () - %s",
+               (_procs_GL_VERSION_2_0.glDetachShader) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4ivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glDetachShader);
 }
 
-/* glMultiTexCoord4sARB */
+/* glDisableVertexAttribArray */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4sARB (void)
+gdk_gl_get_glDisableVertexAttribArray (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4sARB == (GdkGLProc_glMultiTexCoord4sARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4sARB =
-      (GdkGLProc_glMultiTexCoord4sARB) gdk_gl_get_proc_address ("glMultiTexCoord4sARB");
+  if (_procs_GL_VERSION_2_0.glDisableVertexAttribArray == (GdkGLProc_glDisableVertexAttribArray) -1)
+    _procs_GL_VERSION_2_0.glDisableVertexAttribArray =
+      (GdkGLProc_glDisableVertexAttribArray) gdk_gl_get_proc_address ("glDisableVertexAttribArray");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4sARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDisableVertexAttribArray () - %s",
+               (_procs_GL_VERSION_2_0.glDisableVertexAttribArray) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glDisableVertexAttribArray);
 }
 
-/* glMultiTexCoord4svARB */
+/* glEnableVertexAttribArray */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4svARB (void)
+gdk_gl_get_glEnableVertexAttribArray (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multitexture.glMultiTexCoord4svARB == (GdkGLProc_glMultiTexCoord4svARB) -1)
-    _procs_GL_ARB_multitexture.glMultiTexCoord4svARB =
-      (GdkGLProc_glMultiTexCoord4svARB) gdk_gl_get_proc_address ("glMultiTexCoord4svARB");
+  if (_procs_GL_VERSION_2_0.glEnableVertexAttribArray == (GdkGLProc_glEnableVertexAttribArray) -1)
+    _procs_GL_VERSION_2_0.glEnableVertexAttribArray =
+      (GdkGLProc_glEnableVertexAttribArray) gdk_gl_get_proc_address ("glEnableVertexAttribArray");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4svARB () - %s",
-               (_procs_GL_ARB_multitexture.glMultiTexCoord4svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEnableVertexAttribArray () - %s",
+               (_procs_GL_VERSION_2_0.glEnableVertexAttribArray) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glEnableVertexAttribArray);
 }
 
-/* Get GL_ARB_multitexture functions */
-GdkGL_GL_ARB_multitexture *
-gdk_gl_get_GL_ARB_multitexture (void)
+/* glGetActiveAttrib */
+GdkGLProc
+gdk_gl_get_glGetActiveAttrib (void)
 {
-  static gint supported = -1;
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_2_0.glGetActiveAttrib == (GdkGLProc_glGetActiveAttrib) -1)
+    _procs_GL_VERSION_2_0.glGetActiveAttrib =
+      (GdkGLProc_glGetActiveAttrib) gdk_gl_get_proc_address ("glGetActiveAttrib");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetActiveAttrib () - %s",
+               (_procs_GL_VERSION_2_0.glGetActiveAttrib) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetActiveAttrib);
+}
 
+/* glGetActiveUniform */
+GdkGLProc
+gdk_gl_get_glGetActiveUniform (void)
+{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_multitexture");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glActiveTextureARB () != NULL);
-          supported &= (gdk_gl_get_glClientActiveTextureARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1dARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1dvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1fARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1fvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1iARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1ivARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1sARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1svARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2dARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2dvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2fARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2fvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2iARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2ivARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2sARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2svARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3dARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3dvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3fARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3fvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3iARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3ivARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3sARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3svARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4dARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4dvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4fARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4fvARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4iARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4ivARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4sARB () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4svARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glGetActiveUniform == (GdkGLProc_glGetActiveUniform) -1)
+    _procs_GL_VERSION_2_0.glGetActiveUniform =
+      (GdkGLProc_glGetActiveUniform) gdk_gl_get_proc_address ("glGetActiveUniform");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_multitexture () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glGetActiveUniform () - %s",
+               (_procs_GL_VERSION_2_0.glGetActiveUniform) ? "supported" : "not supported"));
 
-  return &_procs_GL_ARB_multitexture;
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetActiveUniform);
 }
 
-/*
- * GL_ARB_transpose_matrix
- */
-
-static GdkGL_GL_ARB_transpose_matrix _procs_GL_ARB_transpose_matrix = {
-  (GdkGLProc_glLoadTransposeMatrixfARB) -1,
-  (GdkGLProc_glLoadTransposeMatrixdARB) -1,
-  (GdkGLProc_glMultTransposeMatrixfARB) -1,
-  (GdkGLProc_glMultTransposeMatrixdARB) -1
-};
-
-/* glLoadTransposeMatrixfARB */
+/* glGetAttachedShaders */
 GdkGLProc
-gdk_gl_get_glLoadTransposeMatrixfARB (void)
+gdk_gl_get_glGetAttachedShaders (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB == (GdkGLProc_glLoadTransposeMatrixfARB) -1)
-    _procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB =
-      (GdkGLProc_glLoadTransposeMatrixfARB) gdk_gl_get_proc_address ("glLoadTransposeMatrixfARB");
+  if (_procs_GL_VERSION_2_0.glGetAttachedShaders == (GdkGLProc_glGetAttachedShaders) -1)
+    _procs_GL_VERSION_2_0.glGetAttachedShaders =
+      (GdkGLProc_glGetAttachedShaders) gdk_gl_get_proc_address ("glGetAttachedShaders");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glLoadTransposeMatrixfARB () - %s",
-               (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetAttachedShaders () - %s",
+               (_procs_GL_VERSION_2_0.glGetAttachedShaders) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetAttachedShaders);
 }
 
-/* glLoadTransposeMatrixdARB */
+/* glGetAttribLocation */
 GdkGLProc
-gdk_gl_get_glLoadTransposeMatrixdARB (void)
+gdk_gl_get_glGetAttribLocation (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB == (GdkGLProc_glLoadTransposeMatrixdARB) -1)
-    _procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB =
-      (GdkGLProc_glLoadTransposeMatrixdARB) gdk_gl_get_proc_address ("glLoadTransposeMatrixdARB");
+  if (_procs_GL_VERSION_2_0.glGetAttribLocation == (GdkGLProc_glGetAttribLocation) -1)
+    _procs_GL_VERSION_2_0.glGetAttribLocation =
+      (GdkGLProc_glGetAttribLocation) gdk_gl_get_proc_address ("glGetAttribLocation");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glLoadTransposeMatrixdARB () - %s",
-               (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetAttribLocation () - %s",
+               (_procs_GL_VERSION_2_0.glGetAttribLocation) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetAttribLocation);
 }
 
-/* glMultTransposeMatrixfARB */
+/* glGetProgramiv */
 GdkGLProc
-gdk_gl_get_glMultTransposeMatrixfARB (void)
+gdk_gl_get_glGetProgramiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB == (GdkGLProc_glMultTransposeMatrixfARB) -1)
-    _procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB =
-      (GdkGLProc_glMultTransposeMatrixfARB) gdk_gl_get_proc_address ("glMultTransposeMatrixfARB");
+  if (_procs_GL_VERSION_2_0.glGetProgramiv == (GdkGLProc_glGetProgramiv) -1)
+    _procs_GL_VERSION_2_0.glGetProgramiv =
+      (GdkGLProc_glGetProgramiv) gdk_gl_get_proc_address ("glGetProgramiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultTransposeMatrixfARB () - %s",
-               (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetProgramiv () - %s",
+               (_procs_GL_VERSION_2_0.glGetProgramiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetProgramiv);
 }
 
-/* glMultTransposeMatrixdARB */
+/* glGetProgramInfoLog */
 GdkGLProc
-gdk_gl_get_glMultTransposeMatrixdARB (void)
+gdk_gl_get_glGetProgramInfoLog (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB == (GdkGLProc_glMultTransposeMatrixdARB) -1)
-    _procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB =
-      (GdkGLProc_glMultTransposeMatrixdARB) gdk_gl_get_proc_address ("glMultTransposeMatrixdARB");
+  if (_procs_GL_VERSION_2_0.glGetProgramInfoLog == (GdkGLProc_glGetProgramInfoLog) -1)
+    _procs_GL_VERSION_2_0.glGetProgramInfoLog =
+      (GdkGLProc_glGetProgramInfoLog) gdk_gl_get_proc_address ("glGetProgramInfoLog");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultTransposeMatrixdARB () - %s",
-               (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetProgramInfoLog () - %s",
+               (_procs_GL_VERSION_2_0.glGetProgramInfoLog) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetProgramInfoLog);
 }
 
-/* Get GL_ARB_transpose_matrix functions */
-GdkGL_GL_ARB_transpose_matrix *
-gdk_gl_get_GL_ARB_transpose_matrix (void)
+/* glGetShaderiv */
+GdkGLProc
+gdk_gl_get_glGetShaderiv (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_transpose_matrix");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glLoadTransposeMatrixfARB () != NULL);
-          supported &= (gdk_gl_get_glLoadTransposeMatrixdARB () != NULL);
-          supported &= (gdk_gl_get_glMultTransposeMatrixfARB () != NULL);
-          supported &= (gdk_gl_get_glMultTransposeMatrixdARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glGetShaderiv == (GdkGLProc_glGetShaderiv) -1)
+    _procs_GL_VERSION_2_0.glGetShaderiv =
+      (GdkGLProc_glGetShaderiv) gdk_gl_get_proc_address ("glGetShaderiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_transpose_matrix () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetShaderiv () - %s",
+               (_procs_GL_VERSION_2_0.glGetShaderiv) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_ARB_transpose_matrix;
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetShaderiv);
 }
 
-/*
- * GL_ARB_multisample
- */
-
-static GdkGL_GL_ARB_multisample _procs_GL_ARB_multisample = {
-  (GdkGLProc_glSampleCoverageARB) -1
-};
-
-/* glSampleCoverageARB */
+/* glGetShaderInfoLog */
 GdkGLProc
-gdk_gl_get_glSampleCoverageARB (void)
+gdk_gl_get_glGetShaderInfoLog (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_multisample.glSampleCoverageARB == (GdkGLProc_glSampleCoverageARB) -1)
-    _procs_GL_ARB_multisample.glSampleCoverageARB =
-      (GdkGLProc_glSampleCoverageARB) gdk_gl_get_proc_address ("glSampleCoverageARB");
+  if (_procs_GL_VERSION_2_0.glGetShaderInfoLog == (GdkGLProc_glGetShaderInfoLog) -1)
+    _procs_GL_VERSION_2_0.glGetShaderInfoLog =
+      (GdkGLProc_glGetShaderInfoLog) gdk_gl_get_proc_address ("glGetShaderInfoLog");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSampleCoverageARB () - %s",
-               (_procs_GL_ARB_multisample.glSampleCoverageARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetShaderInfoLog () - %s",
+               (_procs_GL_VERSION_2_0.glGetShaderInfoLog) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_multisample.glSampleCoverageARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetShaderInfoLog);
 }
 
-/* Get GL_ARB_multisample functions */
-GdkGL_GL_ARB_multisample *
-gdk_gl_get_GL_ARB_multisample (void)
+/* glGetShaderSource */
+GdkGLProc
+gdk_gl_get_glGetShaderSource (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_multisample");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glSampleCoverageARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glGetShaderSource == (GdkGLProc_glGetShaderSource) -1)
+    _procs_GL_VERSION_2_0.glGetShaderSource =
+      (GdkGLProc_glGetShaderSource) gdk_gl_get_proc_address ("glGetShaderSource");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_multisample () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetShaderSource () - %s",
+               (_procs_GL_VERSION_2_0.glGetShaderSource) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetShaderSource);
+}
+
+/* glGetUniformLocation */
+GdkGLProc
+gdk_gl_get_glGetUniformLocation (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ARB_multisample;
-}
+  if (_procs_GL_VERSION_2_0.glGetUniformLocation == (GdkGLProc_glGetUniformLocation) -1)
+    _procs_GL_VERSION_2_0.glGetUniformLocation =
+      (GdkGLProc_glGetUniformLocation) gdk_gl_get_proc_address ("glGetUniformLocation");
 
-/*
- * GL_ARB_texture_compression
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetUniformLocation () - %s",
+               (_procs_GL_VERSION_2_0.glGetUniformLocation) ? "supported" : "not supported"));
 
-static GdkGL_GL_ARB_texture_compression _procs_GL_ARB_texture_compression = {
-  (GdkGLProc_glCompressedTexImage3DARB) -1,
-  (GdkGLProc_glCompressedTexImage2DARB) -1,
-  (GdkGLProc_glCompressedTexImage1DARB) -1,
-  (GdkGLProc_glCompressedTexSubImage3DARB) -1,
-  (GdkGLProc_glCompressedTexSubImage2DARB) -1,
-  (GdkGLProc_glCompressedTexSubImage1DARB) -1,
-  (GdkGLProc_glGetCompressedTexImageARB) -1
-};
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetUniformLocation);
+}
 
-/* glCompressedTexImage3DARB */
+/* glGetUniformfv */
 GdkGLProc
-gdk_gl_get_glCompressedTexImage3DARB (void)
+gdk_gl_get_glGetUniformfv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_texture_compression.glCompressedTexImage3DARB == (GdkGLProc_glCompressedTexImage3DARB) -1)
-    _procs_GL_ARB_texture_compression.glCompressedTexImage3DARB =
-      (GdkGLProc_glCompressedTexImage3DARB) gdk_gl_get_proc_address ("glCompressedTexImage3DARB");
+  if (_procs_GL_VERSION_2_0.glGetUniformfv == (GdkGLProc_glGetUniformfv) -1)
+    _procs_GL_VERSION_2_0.glGetUniformfv =
+      (GdkGLProc_glGetUniformfv) gdk_gl_get_proc_address ("glGetUniformfv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexImage3DARB () - %s",
-               (_procs_GL_ARB_texture_compression.glCompressedTexImage3DARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetUniformfv () - %s",
+               (_procs_GL_VERSION_2_0.glGetUniformfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexImage3DARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetUniformfv);
 }
 
-/* glCompressedTexImage2DARB */
+/* glGetUniformiv */
 GdkGLProc
-gdk_gl_get_glCompressedTexImage2DARB (void)
+gdk_gl_get_glGetUniformiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_texture_compression.glCompressedTexImage2DARB == (GdkGLProc_glCompressedTexImage2DARB) -1)
-    _procs_GL_ARB_texture_compression.glCompressedTexImage2DARB =
-      (GdkGLProc_glCompressedTexImage2DARB) gdk_gl_get_proc_address ("glCompressedTexImage2DARB");
+  if (_procs_GL_VERSION_2_0.glGetUniformiv == (GdkGLProc_glGetUniformiv) -1)
+    _procs_GL_VERSION_2_0.glGetUniformiv =
+      (GdkGLProc_glGetUniformiv) gdk_gl_get_proc_address ("glGetUniformiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexImage2DARB () - %s",
-               (_procs_GL_ARB_texture_compression.glCompressedTexImage2DARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetUniformiv () - %s",
+               (_procs_GL_VERSION_2_0.glGetUniformiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexImage2DARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetUniformiv);
 }
 
-/* glCompressedTexImage1DARB */
+/* glGetVertexAttribdv */
 GdkGLProc
-gdk_gl_get_glCompressedTexImage1DARB (void)
+gdk_gl_get_glGetVertexAttribdv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_texture_compression.glCompressedTexImage1DARB == (GdkGLProc_glCompressedTexImage1DARB) -1)
-    _procs_GL_ARB_texture_compression.glCompressedTexImage1DARB =
-      (GdkGLProc_glCompressedTexImage1DARB) gdk_gl_get_proc_address ("glCompressedTexImage1DARB");
+  if (_procs_GL_VERSION_2_0.glGetVertexAttribdv == (GdkGLProc_glGetVertexAttribdv) -1)
+    _procs_GL_VERSION_2_0.glGetVertexAttribdv =
+      (GdkGLProc_glGetVertexAttribdv) gdk_gl_get_proc_address ("glGetVertexAttribdv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexImage1DARB () - %s",
-               (_procs_GL_ARB_texture_compression.glCompressedTexImage1DARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribdv () - %s",
+               (_procs_GL_VERSION_2_0.glGetVertexAttribdv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexImage1DARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetVertexAttribdv);
 }
 
-/* glCompressedTexSubImage3DARB */
+/* glGetVertexAttribfv */
 GdkGLProc
-gdk_gl_get_glCompressedTexSubImage3DARB (void)
+gdk_gl_get_glGetVertexAttribfv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB == (GdkGLProc_glCompressedTexSubImage3DARB) -1)
-    _procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB =
-      (GdkGLProc_glCompressedTexSubImage3DARB) gdk_gl_get_proc_address ("glCompressedTexSubImage3DARB");
+  if (_procs_GL_VERSION_2_0.glGetVertexAttribfv == (GdkGLProc_glGetVertexAttribfv) -1)
+    _procs_GL_VERSION_2_0.glGetVertexAttribfv =
+      (GdkGLProc_glGetVertexAttribfv) gdk_gl_get_proc_address ("glGetVertexAttribfv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexSubImage3DARB () - %s",
-               (_procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribfv () - %s",
+               (_procs_GL_VERSION_2_0.glGetVertexAttribfv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetVertexAttribfv);
 }
 
-/* glCompressedTexSubImage2DARB */
+/* glGetVertexAttribiv */
 GdkGLProc
-gdk_gl_get_glCompressedTexSubImage2DARB (void)
+gdk_gl_get_glGetVertexAttribiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB == (GdkGLProc_glCompressedTexSubImage2DARB) -1)
-    _procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB =
-      (GdkGLProc_glCompressedTexSubImage2DARB) gdk_gl_get_proc_address ("glCompressedTexSubImage2DARB");
+  if (_procs_GL_VERSION_2_0.glGetVertexAttribiv == (GdkGLProc_glGetVertexAttribiv) -1)
+    _procs_GL_VERSION_2_0.glGetVertexAttribiv =
+      (GdkGLProc_glGetVertexAttribiv) gdk_gl_get_proc_address ("glGetVertexAttribiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexSubImage2DARB () - %s",
-               (_procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribiv () - %s",
+               (_procs_GL_VERSION_2_0.glGetVertexAttribiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetVertexAttribiv);
 }
 
-/* glCompressedTexSubImage1DARB */
+/* glGetVertexAttribPointerv */
 GdkGLProc
-gdk_gl_get_glCompressedTexSubImage1DARB (void)
+gdk_gl_get_glGetVertexAttribPointerv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB == (GdkGLProc_glCompressedTexSubImage1DARB) -1)
-    _procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB =
-      (GdkGLProc_glCompressedTexSubImage1DARB) gdk_gl_get_proc_address ("glCompressedTexSubImage1DARB");
+  if (_procs_GL_VERSION_2_0.glGetVertexAttribPointerv == (GdkGLProc_glGetVertexAttribPointerv) -1)
+    _procs_GL_VERSION_2_0.glGetVertexAttribPointerv =
+      (GdkGLProc_glGetVertexAttribPointerv) gdk_gl_get_proc_address ("glGetVertexAttribPointerv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCompressedTexSubImage1DARB () - %s",
-               (_procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribPointerv () - %s",
+               (_procs_GL_VERSION_2_0.glGetVertexAttribPointerv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glGetVertexAttribPointerv);
 }
 
-/* glGetCompressedTexImageARB */
+/* glIsProgram */
 GdkGLProc
-gdk_gl_get_glGetCompressedTexImageARB (void)
+gdk_gl_get_glIsProgram (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_texture_compression.glGetCompressedTexImageARB == (GdkGLProc_glGetCompressedTexImageARB) -1)
-    _procs_GL_ARB_texture_compression.glGetCompressedTexImageARB =
-      (GdkGLProc_glGetCompressedTexImageARB) gdk_gl_get_proc_address ("glGetCompressedTexImageARB");
+  if (_procs_GL_VERSION_2_0.glIsProgram == (GdkGLProc_glIsProgram) -1)
+    _procs_GL_VERSION_2_0.glIsProgram =
+      (GdkGLProc_glIsProgram) gdk_gl_get_proc_address ("glIsProgram");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetCompressedTexImageARB () - %s",
-               (_procs_GL_ARB_texture_compression.glGetCompressedTexImageARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsProgram () - %s",
+               (_procs_GL_VERSION_2_0.glIsProgram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glGetCompressedTexImageARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glIsProgram);
 }
 
-/* Get GL_ARB_texture_compression functions */
-GdkGL_GL_ARB_texture_compression *
-gdk_gl_get_GL_ARB_texture_compression (void)
+/* glIsShader */
+GdkGLProc
+gdk_gl_get_glIsShader (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_texture_compression");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glCompressedTexImage3DARB () != NULL);
-          supported &= (gdk_gl_get_glCompressedTexImage2DARB () != NULL);
-          supported &= (gdk_gl_get_glCompressedTexImage1DARB () != NULL);
-          supported &= (gdk_gl_get_glCompressedTexSubImage3DARB () != NULL);
-          supported &= (gdk_gl_get_glCompressedTexSubImage2DARB () != NULL);
-          supported &= (gdk_gl_get_glCompressedTexSubImage1DARB () != NULL);
-          supported &= (gdk_gl_get_glGetCompressedTexImageARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glIsShader == (GdkGLProc_glIsShader) -1)
+    _procs_GL_VERSION_2_0.glIsShader =
+      (GdkGLProc_glIsShader) gdk_gl_get_proc_address ("glIsShader");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_texture_compression () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsShader () - %s",
+               (_procs_GL_VERSION_2_0.glIsShader) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glIsShader);
+}
+
+/* glLinkProgram */
+GdkGLProc
+gdk_gl_get_glLinkProgram (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ARB_texture_compression;
-}
+  if (_procs_GL_VERSION_2_0.glLinkProgram == (GdkGLProc_glLinkProgram) -1)
+    _procs_GL_VERSION_2_0.glLinkProgram =
+      (GdkGLProc_glLinkProgram) gdk_gl_get_proc_address ("glLinkProgram");
 
-/*
- * GL_ARB_point_parameters
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glLinkProgram () - %s",
+               (_procs_GL_VERSION_2_0.glLinkProgram) ? "supported" : "not supported"));
 
-static GdkGL_GL_ARB_point_parameters _procs_GL_ARB_point_parameters = {
-  (GdkGLProc_glPointParameterfARB) -1,
-  (GdkGLProc_glPointParameterfvARB) -1
-};
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glLinkProgram);
+}
 
-/* glPointParameterfARB */
+/* glShaderSource */
 GdkGLProc
-gdk_gl_get_glPointParameterfARB (void)
+gdk_gl_get_glShaderSource (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_point_parameters.glPointParameterfARB == (GdkGLProc_glPointParameterfARB) -1)
-    _procs_GL_ARB_point_parameters.glPointParameterfARB =
-      (GdkGLProc_glPointParameterfARB) gdk_gl_get_proc_address ("glPointParameterfARB");
+  if (_procs_GL_VERSION_2_0.glShaderSource == (GdkGLProc_glShaderSource) -1)
+    _procs_GL_VERSION_2_0.glShaderSource =
+      (GdkGLProc_glShaderSource) gdk_gl_get_proc_address ("glShaderSource");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameterfARB () - %s",
-               (_procs_GL_ARB_point_parameters.glPointParameterfARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glShaderSource () - %s",
+               (_procs_GL_VERSION_2_0.glShaderSource) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_point_parameters.glPointParameterfARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glShaderSource);
 }
 
-/* glPointParameterfvARB */
+/* glUseProgram */
 GdkGLProc
-gdk_gl_get_glPointParameterfvARB (void)
+gdk_gl_get_glUseProgram (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_point_parameters.glPointParameterfvARB == (GdkGLProc_glPointParameterfvARB) -1)
-    _procs_GL_ARB_point_parameters.glPointParameterfvARB =
-      (GdkGLProc_glPointParameterfvARB) gdk_gl_get_proc_address ("glPointParameterfvARB");
+  if (_procs_GL_VERSION_2_0.glUseProgram == (GdkGLProc_glUseProgram) -1)
+    _procs_GL_VERSION_2_0.glUseProgram =
+      (GdkGLProc_glUseProgram) gdk_gl_get_proc_address ("glUseProgram");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameterfvARB () - %s",
-               (_procs_GL_ARB_point_parameters.glPointParameterfvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUseProgram () - %s",
+               (_procs_GL_VERSION_2_0.glUseProgram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_point_parameters.glPointParameterfvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUseProgram);
 }
 
-/* Get GL_ARB_point_parameters functions */
-GdkGL_GL_ARB_point_parameters *
-gdk_gl_get_GL_ARB_point_parameters (void)
+/* glUniform1f */
+GdkGLProc
+gdk_gl_get_glUniform1f (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_point_parameters");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glPointParameterfARB () != NULL);
-          supported &= (gdk_gl_get_glPointParameterfvARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glUniform1f == (GdkGLProc_glUniform1f) -1)
+    _procs_GL_VERSION_2_0.glUniform1f =
+      (GdkGLProc_glUniform1f) gdk_gl_get_proc_address ("glUniform1f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_point_parameters () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glUniform1f () - %s",
+               (_procs_GL_VERSION_2_0.glUniform1f) ? "supported" : "not supported"));
 
-  return &_procs_GL_ARB_point_parameters;
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform1f);
 }
 
-/*
- * GL_ARB_vertex_blend
- */
-
-static GdkGL_GL_ARB_vertex_blend _procs_GL_ARB_vertex_blend = {
-  (GdkGLProc_glWeightbvARB) -1,
-  (GdkGLProc_glWeightsvARB) -1,
-  (GdkGLProc_glWeightivARB) -1,
-  (GdkGLProc_glWeightfvARB) -1,
-  (GdkGLProc_glWeightdvARB) -1,
-  (GdkGLProc_glWeightubvARB) -1,
-  (GdkGLProc_glWeightusvARB) -1,
-  (GdkGLProc_glWeightuivARB) -1,
-  (GdkGLProc_glWeightPointerARB) -1,
-  (GdkGLProc_glVertexBlendARB) -1
-};
-
-/* glWeightbvARB */
+/* glUniform2f */
 GdkGLProc
-gdk_gl_get_glWeightbvARB (void)
+gdk_gl_get_glUniform2f (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightbvARB == (GdkGLProc_glWeightbvARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightbvARB =
-      (GdkGLProc_glWeightbvARB) gdk_gl_get_proc_address ("glWeightbvARB");
+  if (_procs_GL_VERSION_2_0.glUniform2f == (GdkGLProc_glUniform2f) -1)
+    _procs_GL_VERSION_2_0.glUniform2f =
+      (GdkGLProc_glUniform2f) gdk_gl_get_proc_address ("glUniform2f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightbvARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightbvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2f () - %s",
+               (_procs_GL_VERSION_2_0.glUniform2f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightbvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform2f);
 }
 
-/* glWeightsvARB */
+/* glUniform3f */
 GdkGLProc
-gdk_gl_get_glWeightsvARB (void)
+gdk_gl_get_glUniform3f (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightsvARB == (GdkGLProc_glWeightsvARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightsvARB =
-      (GdkGLProc_glWeightsvARB) gdk_gl_get_proc_address ("glWeightsvARB");
+  if (_procs_GL_VERSION_2_0.glUniform3f == (GdkGLProc_glUniform3f) -1)
+    _procs_GL_VERSION_2_0.glUniform3f =
+      (GdkGLProc_glUniform3f) gdk_gl_get_proc_address ("glUniform3f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightsvARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightsvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform3f () - %s",
+               (_procs_GL_VERSION_2_0.glUniform3f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightsvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform3f);
 }
 
-/* glWeightivARB */
+/* glUniform4f */
 GdkGLProc
-gdk_gl_get_glWeightivARB (void)
+gdk_gl_get_glUniform4f (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightivARB == (GdkGLProc_glWeightivARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightivARB =
-      (GdkGLProc_glWeightivARB) gdk_gl_get_proc_address ("glWeightivARB");
+  if (_procs_GL_VERSION_2_0.glUniform4f == (GdkGLProc_glUniform4f) -1)
+    _procs_GL_VERSION_2_0.glUniform4f =
+      (GdkGLProc_glUniform4f) gdk_gl_get_proc_address ("glUniform4f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightivARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4f () - %s",
+               (_procs_GL_VERSION_2_0.glUniform4f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform4f);
 }
 
-/* glWeightfvARB */
+/* glUniform1i */
 GdkGLProc
-gdk_gl_get_glWeightfvARB (void)
+gdk_gl_get_glUniform1i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightfvARB == (GdkGLProc_glWeightfvARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightfvARB =
-      (GdkGLProc_glWeightfvARB) gdk_gl_get_proc_address ("glWeightfvARB");
+  if (_procs_GL_VERSION_2_0.glUniform1i == (GdkGLProc_glUniform1i) -1)
+    _procs_GL_VERSION_2_0.glUniform1i =
+      (GdkGLProc_glUniform1i) gdk_gl_get_proc_address ("glUniform1i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightfvARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightfvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform1i () - %s",
+               (_procs_GL_VERSION_2_0.glUniform1i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightfvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform1i);
 }
 
-/* glWeightdvARB */
+/* glUniform2i */
 GdkGLProc
-gdk_gl_get_glWeightdvARB (void)
+gdk_gl_get_glUniform2i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightdvARB == (GdkGLProc_glWeightdvARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightdvARB =
-      (GdkGLProc_glWeightdvARB) gdk_gl_get_proc_address ("glWeightdvARB");
+  if (_procs_GL_VERSION_2_0.glUniform2i == (GdkGLProc_glUniform2i) -1)
+    _procs_GL_VERSION_2_0.glUniform2i =
+      (GdkGLProc_glUniform2i) gdk_gl_get_proc_address ("glUniform2i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightdvARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightdvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2i () - %s",
+               (_procs_GL_VERSION_2_0.glUniform2i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightdvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform2i);
 }
 
-/* glWeightubvARB */
+/* glUniform3i */
 GdkGLProc
-gdk_gl_get_glWeightubvARB (void)
+gdk_gl_get_glUniform3i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightubvARB == (GdkGLProc_glWeightubvARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightubvARB =
-      (GdkGLProc_glWeightubvARB) gdk_gl_get_proc_address ("glWeightubvARB");
+  if (_procs_GL_VERSION_2_0.glUniform3i == (GdkGLProc_glUniform3i) -1)
+    _procs_GL_VERSION_2_0.glUniform3i =
+      (GdkGLProc_glUniform3i) gdk_gl_get_proc_address ("glUniform3i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightubvARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightubvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform3i () - %s",
+               (_procs_GL_VERSION_2_0.glUniform3i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightubvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform3i);
 }
 
-/* glWeightusvARB */
+/* glUniform4i */
 GdkGLProc
-gdk_gl_get_glWeightusvARB (void)
+gdk_gl_get_glUniform4i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightusvARB == (GdkGLProc_glWeightusvARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightusvARB =
-      (GdkGLProc_glWeightusvARB) gdk_gl_get_proc_address ("glWeightusvARB");
+  if (_procs_GL_VERSION_2_0.glUniform4i == (GdkGLProc_glUniform4i) -1)
+    _procs_GL_VERSION_2_0.glUniform4i =
+      (GdkGLProc_glUniform4i) gdk_gl_get_proc_address ("glUniform4i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightusvARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightusvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4i () - %s",
+               (_procs_GL_VERSION_2_0.glUniform4i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightusvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform4i);
 }
 
-/* glWeightuivARB */
+/* glUniform1fv */
 GdkGLProc
-gdk_gl_get_glWeightuivARB (void)
+gdk_gl_get_glUniform1fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightuivARB == (GdkGLProc_glWeightuivARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightuivARB =
-      (GdkGLProc_glWeightuivARB) gdk_gl_get_proc_address ("glWeightuivARB");
+  if (_procs_GL_VERSION_2_0.glUniform1fv == (GdkGLProc_glUniform1fv) -1)
+    _procs_GL_VERSION_2_0.glUniform1fv =
+      (GdkGLProc_glUniform1fv) gdk_gl_get_proc_address ("glUniform1fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightuivARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightuivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform1fv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform1fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightuivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform1fv);
 }
 
-/* glWeightPointerARB */
+/* glUniform2fv */
 GdkGLProc
-gdk_gl_get_glWeightPointerARB (void)
+gdk_gl_get_glUniform2fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glWeightPointerARB == (GdkGLProc_glWeightPointerARB) -1)
-    _procs_GL_ARB_vertex_blend.glWeightPointerARB =
-      (GdkGLProc_glWeightPointerARB) gdk_gl_get_proc_address ("glWeightPointerARB");
+  if (_procs_GL_VERSION_2_0.glUniform2fv == (GdkGLProc_glUniform2fv) -1)
+    _procs_GL_VERSION_2_0.glUniform2fv =
+      (GdkGLProc_glUniform2fv) gdk_gl_get_proc_address ("glUniform2fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWeightPointerARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glWeightPointerARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2fv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform2fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightPointerARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform2fv);
 }
 
-/* glVertexBlendARB */
+/* glUniform3fv */
 GdkGLProc
-gdk_gl_get_glVertexBlendARB (void)
+gdk_gl_get_glUniform3fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_blend.glVertexBlendARB == (GdkGLProc_glVertexBlendARB) -1)
-    _procs_GL_ARB_vertex_blend.glVertexBlendARB =
-      (GdkGLProc_glVertexBlendARB) gdk_gl_get_proc_address ("glVertexBlendARB");
+  if (_procs_GL_VERSION_2_0.glUniform3fv == (GdkGLProc_glUniform3fv) -1)
+    _procs_GL_VERSION_2_0.glUniform3fv =
+      (GdkGLProc_glUniform3fv) gdk_gl_get_proc_address ("glUniform3fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexBlendARB () - %s",
-               (_procs_GL_ARB_vertex_blend.glVertexBlendARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform3fv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform3fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glVertexBlendARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform3fv);
 }
 
-/* Get GL_ARB_vertex_blend functions */
-GdkGL_GL_ARB_vertex_blend *
-gdk_gl_get_GL_ARB_vertex_blend (void)
+/* glUniform4fv */
+GdkGLProc
+gdk_gl_get_glUniform4fv (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_blend");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glWeightbvARB () != NULL);
-          supported &= (gdk_gl_get_glWeightsvARB () != NULL);
-          supported &= (gdk_gl_get_glWeightivARB () != NULL);
-          supported &= (gdk_gl_get_glWeightfvARB () != NULL);
-          supported &= (gdk_gl_get_glWeightdvARB () != NULL);
-          supported &= (gdk_gl_get_glWeightubvARB () != NULL);
-          supported &= (gdk_gl_get_glWeightusvARB () != NULL);
-          supported &= (gdk_gl_get_glWeightuivARB () != NULL);
-          supported &= (gdk_gl_get_glWeightPointerARB () != NULL);
-          supported &= (gdk_gl_get_glVertexBlendARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glUniform4fv == (GdkGLProc_glUniform4fv) -1)
+    _procs_GL_VERSION_2_0.glUniform4fv =
+      (GdkGLProc_glUniform4fv) gdk_gl_get_proc_address ("glUniform4fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_vertex_blend () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4fv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform4fv) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_ARB_vertex_blend;
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform4fv);
 }
 
-/*
- * GL_ARB_matrix_palette
- */
-
-static GdkGL_GL_ARB_matrix_palette _procs_GL_ARB_matrix_palette = {
-  (GdkGLProc_glCurrentPaletteMatrixARB) -1,
-  (GdkGLProc_glMatrixIndexubvARB) -1,
-  (GdkGLProc_glMatrixIndexusvARB) -1,
-  (GdkGLProc_glMatrixIndexuivARB) -1,
-  (GdkGLProc_glMatrixIndexPointerARB) -1
-};
-
-/* glCurrentPaletteMatrixARB */
+/* glUniform1iv */
 GdkGLProc
-gdk_gl_get_glCurrentPaletteMatrixARB (void)
+gdk_gl_get_glUniform1iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB == (GdkGLProc_glCurrentPaletteMatrixARB) -1)
-    _procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB =
-      (GdkGLProc_glCurrentPaletteMatrixARB) gdk_gl_get_proc_address ("glCurrentPaletteMatrixARB");
+  if (_procs_GL_VERSION_2_0.glUniform1iv == (GdkGLProc_glUniform1iv) -1)
+    _procs_GL_VERSION_2_0.glUniform1iv =
+      (GdkGLProc_glUniform1iv) gdk_gl_get_proc_address ("glUniform1iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCurrentPaletteMatrixARB () - %s",
-               (_procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform1iv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform1iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform1iv);
 }
 
-/* glMatrixIndexubvARB */
+/* glUniform2iv */
 GdkGLProc
-gdk_gl_get_glMatrixIndexubvARB (void)
+gdk_gl_get_glUniform2iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_matrix_palette.glMatrixIndexubvARB == (GdkGLProc_glMatrixIndexubvARB) -1)
-    _procs_GL_ARB_matrix_palette.glMatrixIndexubvARB =
-      (GdkGLProc_glMatrixIndexubvARB) gdk_gl_get_proc_address ("glMatrixIndexubvARB");
+  if (_procs_GL_VERSION_2_0.glUniform2iv == (GdkGLProc_glUniform2iv) -1)
+    _procs_GL_VERSION_2_0.glUniform2iv =
+      (GdkGLProc_glUniform2iv) gdk_gl_get_proc_address ("glUniform2iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMatrixIndexubvARB () - %s",
-               (_procs_GL_ARB_matrix_palette.glMatrixIndexubvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2iv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform2iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexubvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform2iv);
 }
 
-/* glMatrixIndexusvARB */
+/* glUniform3iv */
 GdkGLProc
-gdk_gl_get_glMatrixIndexusvARB (void)
+gdk_gl_get_glUniform3iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_matrix_palette.glMatrixIndexusvARB == (GdkGLProc_glMatrixIndexusvARB) -1)
-    _procs_GL_ARB_matrix_palette.glMatrixIndexusvARB =
-      (GdkGLProc_glMatrixIndexusvARB) gdk_gl_get_proc_address ("glMatrixIndexusvARB");
+  if (_procs_GL_VERSION_2_0.glUniform3iv == (GdkGLProc_glUniform3iv) -1)
+    _procs_GL_VERSION_2_0.glUniform3iv =
+      (GdkGLProc_glUniform3iv) gdk_gl_get_proc_address ("glUniform3iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMatrixIndexusvARB () - %s",
-               (_procs_GL_ARB_matrix_palette.glMatrixIndexusvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform3iv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform3iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexusvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform3iv);
 }
 
-/* glMatrixIndexuivARB */
+/* glUniform4iv */
 GdkGLProc
-gdk_gl_get_glMatrixIndexuivARB (void)
+gdk_gl_get_glUniform4iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_matrix_palette.glMatrixIndexuivARB == (GdkGLProc_glMatrixIndexuivARB) -1)
-    _procs_GL_ARB_matrix_palette.glMatrixIndexuivARB =
-      (GdkGLProc_glMatrixIndexuivARB) gdk_gl_get_proc_address ("glMatrixIndexuivARB");
+  if (_procs_GL_VERSION_2_0.glUniform4iv == (GdkGLProc_glUniform4iv) -1)
+    _procs_GL_VERSION_2_0.glUniform4iv =
+      (GdkGLProc_glUniform4iv) gdk_gl_get_proc_address ("glUniform4iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMatrixIndexuivARB () - %s",
-               (_procs_GL_ARB_matrix_palette.glMatrixIndexuivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4iv () - %s",
+               (_procs_GL_VERSION_2_0.glUniform4iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexuivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniform4iv);
 }
 
-/* glMatrixIndexPointerARB */
+/* glUniformMatrix2fv */
 GdkGLProc
-gdk_gl_get_glMatrixIndexPointerARB (void)
+gdk_gl_get_glUniformMatrix2fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB == (GdkGLProc_glMatrixIndexPointerARB) -1)
-    _procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB =
-      (GdkGLProc_glMatrixIndexPointerARB) gdk_gl_get_proc_address ("glMatrixIndexPointerARB");
+  if (_procs_GL_VERSION_2_0.glUniformMatrix2fv == (GdkGLProc_glUniformMatrix2fv) -1)
+    _procs_GL_VERSION_2_0.glUniformMatrix2fv =
+      (GdkGLProc_glUniformMatrix2fv) gdk_gl_get_proc_address ("glUniformMatrix2fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMatrixIndexPointerARB () - %s",
-               (_procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix2fv () - %s",
+               (_procs_GL_VERSION_2_0.glUniformMatrix2fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniformMatrix2fv);
 }
 
-/* Get GL_ARB_matrix_palette functions */
-GdkGL_GL_ARB_matrix_palette *
-gdk_gl_get_GL_ARB_matrix_palette (void)
+/* glUniformMatrix3fv */
+GdkGLProc
+gdk_gl_get_glUniformMatrix3fv (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_matrix_palette");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glCurrentPaletteMatrixARB () != NULL);
-          supported &= (gdk_gl_get_glMatrixIndexubvARB () != NULL);
-          supported &= (gdk_gl_get_glMatrixIndexusvARB () != NULL);
-          supported &= (gdk_gl_get_glMatrixIndexuivARB () != NULL);
-          supported &= (gdk_gl_get_glMatrixIndexPointerARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glUniformMatrix3fv == (GdkGLProc_glUniformMatrix3fv) -1)
+    _procs_GL_VERSION_2_0.glUniformMatrix3fv =
+      (GdkGLProc_glUniformMatrix3fv) gdk_gl_get_proc_address ("glUniformMatrix3fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_matrix_palette () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glUniformMatrix3fv () - %s",
+               (_procs_GL_VERSION_2_0.glUniformMatrix3fv) ? "supported" : "not supported"));
 
-  return &_procs_GL_ARB_matrix_palette;
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniformMatrix3fv);
 }
 
-/*
- * GL_ARB_window_pos
- */
-
-static GdkGL_GL_ARB_window_pos _procs_GL_ARB_window_pos = {
-  (GdkGLProc_glWindowPos2dARB) -1,
-  (GdkGLProc_glWindowPos2dvARB) -1,
-  (GdkGLProc_glWindowPos2fARB) -1,
-  (GdkGLProc_glWindowPos2fvARB) -1,
-  (GdkGLProc_glWindowPos2iARB) -1,
-  (GdkGLProc_glWindowPos2ivARB) -1,
-  (GdkGLProc_glWindowPos2sARB) -1,
-  (GdkGLProc_glWindowPos2svARB) -1,
-  (GdkGLProc_glWindowPos3dARB) -1,
-  (GdkGLProc_glWindowPos3dvARB) -1,
-  (GdkGLProc_glWindowPos3fARB) -1,
-  (GdkGLProc_glWindowPos3fvARB) -1,
-  (GdkGLProc_glWindowPos3iARB) -1,
-  (GdkGLProc_glWindowPos3ivARB) -1,
-  (GdkGLProc_glWindowPos3sARB) -1,
-  (GdkGLProc_glWindowPos3svARB) -1
-};
-
-/* glWindowPos2dARB */
+/* glUniformMatrix4fv */
 GdkGLProc
-gdk_gl_get_glWindowPos2dARB (void)
+gdk_gl_get_glUniformMatrix4fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2dARB == (GdkGLProc_glWindowPos2dARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2dARB =
-      (GdkGLProc_glWindowPos2dARB) gdk_gl_get_proc_address ("glWindowPos2dARB");
+  if (_procs_GL_VERSION_2_0.glUniformMatrix4fv == (GdkGLProc_glUniformMatrix4fv) -1)
+    _procs_GL_VERSION_2_0.glUniformMatrix4fv =
+      (GdkGLProc_glUniformMatrix4fv) gdk_gl_get_proc_address ("glUniformMatrix4fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2dARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix4fv () - %s",
+               (_procs_GL_VERSION_2_0.glUniformMatrix4fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glUniformMatrix4fv);
 }
 
-/* glWindowPos2dvARB */
+/* glValidateProgram */
 GdkGLProc
-gdk_gl_get_glWindowPos2dvARB (void)
+gdk_gl_get_glValidateProgram (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2dvARB == (GdkGLProc_glWindowPos2dvARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2dvARB =
-      (GdkGLProc_glWindowPos2dvARB) gdk_gl_get_proc_address ("glWindowPos2dvARB");
+  if (_procs_GL_VERSION_2_0.glValidateProgram == (GdkGLProc_glValidateProgram) -1)
+    _procs_GL_VERSION_2_0.glValidateProgram =
+      (GdkGLProc_glValidateProgram) gdk_gl_get_proc_address ("glValidateProgram");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2dvARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glValidateProgram () - %s",
+               (_procs_GL_VERSION_2_0.glValidateProgram) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glValidateProgram);
 }
 
-/* glWindowPos2fARB */
+/* glVertexAttrib1d */
 GdkGLProc
-gdk_gl_get_glWindowPos2fARB (void)
+gdk_gl_get_glVertexAttrib1d (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2fARB == (GdkGLProc_glWindowPos2fARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2fARB =
-      (GdkGLProc_glWindowPos2fARB) gdk_gl_get_proc_address ("glWindowPos2fARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib1d == (GdkGLProc_glVertexAttrib1d) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib1d =
+      (GdkGLProc_glVertexAttrib1d) gdk_gl_get_proc_address ("glVertexAttrib1d");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2fARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1d () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib1d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib1d);
 }
 
-/* glWindowPos2fvARB */
+/* glVertexAttrib1dv */
 GdkGLProc
-gdk_gl_get_glWindowPos2fvARB (void)
+gdk_gl_get_glVertexAttrib1dv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2fvARB == (GdkGLProc_glWindowPos2fvARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2fvARB =
-      (GdkGLProc_glWindowPos2fvARB) gdk_gl_get_proc_address ("glWindowPos2fvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib1dv == (GdkGLProc_glVertexAttrib1dv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib1dv =
+      (GdkGLProc_glVertexAttrib1dv) gdk_gl_get_proc_address ("glVertexAttrib1dv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2fvARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1dv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib1dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib1dv);
 }
 
-/* glWindowPos2iARB */
+/* glVertexAttrib1f */
 GdkGLProc
-gdk_gl_get_glWindowPos2iARB (void)
+gdk_gl_get_glVertexAttrib1f (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2iARB == (GdkGLProc_glWindowPos2iARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2iARB =
-      (GdkGLProc_glWindowPos2iARB) gdk_gl_get_proc_address ("glWindowPos2iARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib1f == (GdkGLProc_glVertexAttrib1f) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib1f =
+      (GdkGLProc_glVertexAttrib1f) gdk_gl_get_proc_address ("glVertexAttrib1f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2iARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2iARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1f () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib1f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2iARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib1f);
 }
 
-/* glWindowPos2ivARB */
+/* glVertexAttrib1fv */
 GdkGLProc
-gdk_gl_get_glWindowPos2ivARB (void)
+gdk_gl_get_glVertexAttrib1fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2ivARB == (GdkGLProc_glWindowPos2ivARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2ivARB =
-      (GdkGLProc_glWindowPos2ivARB) gdk_gl_get_proc_address ("glWindowPos2ivARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib1fv == (GdkGLProc_glVertexAttrib1fv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib1fv =
+      (GdkGLProc_glVertexAttrib1fv) gdk_gl_get_proc_address ("glVertexAttrib1fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2ivARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2ivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1fv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib1fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2ivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib1fv);
 }
 
-/* glWindowPos2sARB */
+/* glVertexAttrib1s */
 GdkGLProc
-gdk_gl_get_glWindowPos2sARB (void)
+gdk_gl_get_glVertexAttrib1s (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2sARB == (GdkGLProc_glWindowPos2sARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2sARB =
-      (GdkGLProc_glWindowPos2sARB) gdk_gl_get_proc_address ("glWindowPos2sARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib1s == (GdkGLProc_glVertexAttrib1s) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib1s =
+      (GdkGLProc_glVertexAttrib1s) gdk_gl_get_proc_address ("glVertexAttrib1s");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2sARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1s () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib1s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib1s);
 }
 
-/* glWindowPos2svARB */
+/* glVertexAttrib1sv */
 GdkGLProc
-gdk_gl_get_glWindowPos2svARB (void)
+gdk_gl_get_glVertexAttrib1sv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos2svARB == (GdkGLProc_glWindowPos2svARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos2svARB =
-      (GdkGLProc_glWindowPos2svARB) gdk_gl_get_proc_address ("glWindowPos2svARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib1sv == (GdkGLProc_glVertexAttrib1sv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib1sv =
+      (GdkGLProc_glVertexAttrib1sv) gdk_gl_get_proc_address ("glVertexAttrib1sv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2svARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos2svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1sv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib1sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib1sv);
 }
 
-/* glWindowPos3dARB */
+/* glVertexAttrib2d */
 GdkGLProc
-gdk_gl_get_glWindowPos3dARB (void)
+gdk_gl_get_glVertexAttrib2d (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3dARB == (GdkGLProc_glWindowPos3dARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3dARB =
-      (GdkGLProc_glWindowPos3dARB) gdk_gl_get_proc_address ("glWindowPos3dARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib2d == (GdkGLProc_glVertexAttrib2d) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib2d =
+      (GdkGLProc_glVertexAttrib2d) gdk_gl_get_proc_address ("glVertexAttrib2d");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3dARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2d () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib2d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib2d);
 }
 
-/* glWindowPos3dvARB */
+/* glVertexAttrib2dv */
 GdkGLProc
-gdk_gl_get_glWindowPos3dvARB (void)
+gdk_gl_get_glVertexAttrib2dv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3dvARB == (GdkGLProc_glWindowPos3dvARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3dvARB =
-      (GdkGLProc_glWindowPos3dvARB) gdk_gl_get_proc_address ("glWindowPos3dvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib2dv == (GdkGLProc_glVertexAttrib2dv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib2dv =
+      (GdkGLProc_glVertexAttrib2dv) gdk_gl_get_proc_address ("glVertexAttrib2dv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3dvARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2dv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib2dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib2dv);
 }
 
-/* glWindowPos3fARB */
+/* glVertexAttrib2f */
 GdkGLProc
-gdk_gl_get_glWindowPos3fARB (void)
+gdk_gl_get_glVertexAttrib2f (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3fARB == (GdkGLProc_glWindowPos3fARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3fARB =
-      (GdkGLProc_glWindowPos3fARB) gdk_gl_get_proc_address ("glWindowPos3fARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib2f == (GdkGLProc_glVertexAttrib2f) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib2f =
+      (GdkGLProc_glVertexAttrib2f) gdk_gl_get_proc_address ("glVertexAttrib2f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3fARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2f () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib2f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib2f);
 }
 
-/* glWindowPos3fvARB */
+/* glVertexAttrib2fv */
 GdkGLProc
-gdk_gl_get_glWindowPos3fvARB (void)
+gdk_gl_get_glVertexAttrib2fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3fvARB == (GdkGLProc_glWindowPos3fvARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3fvARB =
-      (GdkGLProc_glWindowPos3fvARB) gdk_gl_get_proc_address ("glWindowPos3fvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib2fv == (GdkGLProc_glVertexAttrib2fv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib2fv =
+      (GdkGLProc_glVertexAttrib2fv) gdk_gl_get_proc_address ("glVertexAttrib2fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3fvARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2fv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib2fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib2fv);
 }
 
-/* glWindowPos3iARB */
+/* glVertexAttrib2s */
 GdkGLProc
-gdk_gl_get_glWindowPos3iARB (void)
+gdk_gl_get_glVertexAttrib2s (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3iARB == (GdkGLProc_glWindowPos3iARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3iARB =
-      (GdkGLProc_glWindowPos3iARB) gdk_gl_get_proc_address ("glWindowPos3iARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib2s == (GdkGLProc_glVertexAttrib2s) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib2s =
+      (GdkGLProc_glVertexAttrib2s) gdk_gl_get_proc_address ("glVertexAttrib2s");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3iARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3iARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2s () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib2s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3iARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib2s);
 }
 
-/* glWindowPos3ivARB */
+/* glVertexAttrib2sv */
 GdkGLProc
-gdk_gl_get_glWindowPos3ivARB (void)
+gdk_gl_get_glVertexAttrib2sv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3ivARB == (GdkGLProc_glWindowPos3ivARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3ivARB =
-      (GdkGLProc_glWindowPos3ivARB) gdk_gl_get_proc_address ("glWindowPos3ivARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib2sv == (GdkGLProc_glVertexAttrib2sv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib2sv =
+      (GdkGLProc_glVertexAttrib2sv) gdk_gl_get_proc_address ("glVertexAttrib2sv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3ivARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3ivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2sv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib2sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3ivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib2sv);
 }
 
-/* glWindowPos3sARB */
+/* glVertexAttrib3d */
 GdkGLProc
-gdk_gl_get_glWindowPos3sARB (void)
+gdk_gl_get_glVertexAttrib3d (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3sARB == (GdkGLProc_glWindowPos3sARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3sARB =
-      (GdkGLProc_glWindowPos3sARB) gdk_gl_get_proc_address ("glWindowPos3sARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib3d == (GdkGLProc_glVertexAttrib3d) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib3d =
+      (GdkGLProc_glVertexAttrib3d) gdk_gl_get_proc_address ("glVertexAttrib3d");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3sARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3d () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib3d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib3d);
 }
 
-/* glWindowPos3svARB */
+/* glVertexAttrib3dv */
 GdkGLProc
-gdk_gl_get_glWindowPos3svARB (void)
+gdk_gl_get_glVertexAttrib3dv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_window_pos.glWindowPos3svARB == (GdkGLProc_glWindowPos3svARB) -1)
-    _procs_GL_ARB_window_pos.glWindowPos3svARB =
-      (GdkGLProc_glWindowPos3svARB) gdk_gl_get_proc_address ("glWindowPos3svARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib3dv == (GdkGLProc_glVertexAttrib3dv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib3dv =
+      (GdkGLProc_glVertexAttrib3dv) gdk_gl_get_proc_address ("glVertexAttrib3dv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3svARB () - %s",
-               (_procs_GL_ARB_window_pos.glWindowPos3svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3dv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib3dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib3dv);
 }
 
-/* Get GL_ARB_window_pos functions */
-GdkGL_GL_ARB_window_pos *
-gdk_gl_get_GL_ARB_window_pos (void)
+/* glVertexAttrib3f */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3f (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_window_pos");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glWindowPos2dARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2dvARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2fARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2fvARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2iARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2ivARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2sARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2svARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3dARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3dvARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3fARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3fvARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3iARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3ivARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3sARB () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3svARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_2_0.glVertexAttrib3f == (GdkGLProc_glVertexAttrib3f) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib3f =
+      (GdkGLProc_glVertexAttrib3f) gdk_gl_get_proc_address ("glVertexAttrib3f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_window_pos () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3f () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib3f) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_ARB_window_pos;
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib3f);
 }
 
-/*
- * GL_ARB_vertex_program
- */
-
-static GdkGL_GL_ARB_vertex_program _procs_GL_ARB_vertex_program = {
-  (GdkGLProc_glVertexAttrib1dARB) -1,
-  (GdkGLProc_glVertexAttrib1dvARB) -1,
-  (GdkGLProc_glVertexAttrib1fARB) -1,
-  (GdkGLProc_glVertexAttrib1fvARB) -1,
-  (GdkGLProc_glVertexAttrib1sARB) -1,
-  (GdkGLProc_glVertexAttrib1svARB) -1,
-  (GdkGLProc_glVertexAttrib2dARB) -1,
-  (GdkGLProc_glVertexAttrib2dvARB) -1,
-  (GdkGLProc_glVertexAttrib2fARB) -1,
-  (GdkGLProc_glVertexAttrib2fvARB) -1,
-  (GdkGLProc_glVertexAttrib2sARB) -1,
-  (GdkGLProc_glVertexAttrib2svARB) -1,
-  (GdkGLProc_glVertexAttrib3dARB) -1,
-  (GdkGLProc_glVertexAttrib3dvARB) -1,
-  (GdkGLProc_glVertexAttrib3fARB) -1,
-  (GdkGLProc_glVertexAttrib3fvARB) -1,
-  (GdkGLProc_glVertexAttrib3sARB) -1,
-  (GdkGLProc_glVertexAttrib3svARB) -1,
-  (GdkGLProc_glVertexAttrib4NbvARB) -1,
-  (GdkGLProc_glVertexAttrib4NivARB) -1,
-  (GdkGLProc_glVertexAttrib4NsvARB) -1,
-  (GdkGLProc_glVertexAttrib4NubARB) -1,
-  (GdkGLProc_glVertexAttrib4NubvARB) -1,
-  (GdkGLProc_glVertexAttrib4NuivARB) -1,
-  (GdkGLProc_glVertexAttrib4NusvARB) -1,
-  (GdkGLProc_glVertexAttrib4bvARB) -1,
-  (GdkGLProc_glVertexAttrib4dARB) -1,
-  (GdkGLProc_glVertexAttrib4dvARB) -1,
-  (GdkGLProc_glVertexAttrib4fARB) -1,
-  (GdkGLProc_glVertexAttrib4fvARB) -1,
-  (GdkGLProc_glVertexAttrib4ivARB) -1,
-  (GdkGLProc_glVertexAttrib4sARB) -1,
-  (GdkGLProc_glVertexAttrib4svARB) -1,
-  (GdkGLProc_glVertexAttrib4ubvARB) -1,
-  (GdkGLProc_glVertexAttrib4uivARB) -1,
-  (GdkGLProc_glVertexAttrib4usvARB) -1,
-  (GdkGLProc_glVertexAttribPointerARB) -1,
-  (GdkGLProc_glEnableVertexAttribArrayARB) -1,
-  (GdkGLProc_glDisableVertexAttribArrayARB) -1,
-  (GdkGLProc_glProgramStringARB) -1,
-  (GdkGLProc_glBindProgramARB) -1,
-  (GdkGLProc_glDeleteProgramsARB) -1,
-  (GdkGLProc_glGenProgramsARB) -1,
-  (GdkGLProc_glProgramEnvParameter4dARB) -1,
-  (GdkGLProc_glProgramEnvParameter4dvARB) -1,
-  (GdkGLProc_glProgramEnvParameter4fARB) -1,
-  (GdkGLProc_glProgramEnvParameter4fvARB) -1,
-  (GdkGLProc_glProgramLocalParameter4dARB) -1,
-  (GdkGLProc_glProgramLocalParameter4dvARB) -1,
-  (GdkGLProc_glProgramLocalParameter4fARB) -1,
-  (GdkGLProc_glProgramLocalParameter4fvARB) -1,
-  (GdkGLProc_glGetProgramEnvParameterdvARB) -1,
-  (GdkGLProc_glGetProgramEnvParameterfvARB) -1,
-  (GdkGLProc_glGetProgramLocalParameterdvARB) -1,
-  (GdkGLProc_glGetProgramLocalParameterfvARB) -1,
-  (GdkGLProc_glGetProgramivARB) -1,
-  (GdkGLProc_glGetProgramStringARB) -1,
-  (GdkGLProc_glGetVertexAttribdvARB) -1,
-  (GdkGLProc_glGetVertexAttribfvARB) -1,
-  (GdkGLProc_glGetVertexAttribivARB) -1,
-  (GdkGLProc_glGetVertexAttribPointervARB) -1,
-  (GdkGLProc_glIsProgramARB) -1
-};
-
-/* glVertexAttrib1dARB */
+/* glVertexAttrib3fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1dARB (void)
+gdk_gl_get_glVertexAttrib3fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib1dARB == (GdkGLProc_glVertexAttrib1dARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib1dARB =
-      (GdkGLProc_glVertexAttrib1dARB) gdk_gl_get_proc_address ("glVertexAttrib1dARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib3fv == (GdkGLProc_glVertexAttrib3fv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib3fv =
+      (GdkGLProc_glVertexAttrib3fv) gdk_gl_get_proc_address ("glVertexAttrib3fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1dARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib1dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3fv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib3fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib3fv);
 }
 
-/* glVertexAttrib1dvARB */
+/* glVertexAttrib3s */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1dvARB (void)
+gdk_gl_get_glVertexAttrib3s (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib1dvARB == (GdkGLProc_glVertexAttrib1dvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib1dvARB =
-      (GdkGLProc_glVertexAttrib1dvARB) gdk_gl_get_proc_address ("glVertexAttrib1dvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib3s == (GdkGLProc_glVertexAttrib3s) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib3s =
+      (GdkGLProc_glVertexAttrib3s) gdk_gl_get_proc_address ("glVertexAttrib3s");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1dvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib1dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3s () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib3s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib3s);
 }
 
-/* glVertexAttrib1fARB */
+/* glVertexAttrib3sv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1fARB (void)
+gdk_gl_get_glVertexAttrib3sv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib1fARB == (GdkGLProc_glVertexAttrib1fARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib1fARB =
-      (GdkGLProc_glVertexAttrib1fARB) gdk_gl_get_proc_address ("glVertexAttrib1fARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib3sv == (GdkGLProc_glVertexAttrib3sv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib3sv =
+      (GdkGLProc_glVertexAttrib3sv) gdk_gl_get_proc_address ("glVertexAttrib3sv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1fARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib1fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3sv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib3sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib3sv);
 }
 
-/* glVertexAttrib1fvARB */
+/* glVertexAttrib4Nbv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1fvARB (void)
+gdk_gl_get_glVertexAttrib4Nbv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib1fvARB == (GdkGLProc_glVertexAttrib1fvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib1fvARB =
-      (GdkGLProc_glVertexAttrib1fvARB) gdk_gl_get_proc_address ("glVertexAttrib1fvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4Nbv == (GdkGLProc_glVertexAttrib4Nbv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4Nbv =
+      (GdkGLProc_glVertexAttrib4Nbv) gdk_gl_get_proc_address ("glVertexAttrib4Nbv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1fvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib1fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4Nbv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4Nbv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4Nbv);
 }
 
-/* glVertexAttrib1sARB */
+/* glVertexAttrib4Niv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1sARB (void)
+gdk_gl_get_glVertexAttrib4Niv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib1sARB == (GdkGLProc_glVertexAttrib1sARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib1sARB =
-      (GdkGLProc_glVertexAttrib1sARB) gdk_gl_get_proc_address ("glVertexAttrib1sARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4Niv == (GdkGLProc_glVertexAttrib4Niv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4Niv =
+      (GdkGLProc_glVertexAttrib4Niv) gdk_gl_get_proc_address ("glVertexAttrib4Niv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1sARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib1sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4Niv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4Niv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4Niv);
 }
 
-/* glVertexAttrib1svARB */
+/* glVertexAttrib4Nsv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1svARB (void)
+gdk_gl_get_glVertexAttrib4Nsv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib1svARB == (GdkGLProc_glVertexAttrib1svARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib1svARB =
-      (GdkGLProc_glVertexAttrib1svARB) gdk_gl_get_proc_address ("glVertexAttrib1svARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4Nsv == (GdkGLProc_glVertexAttrib4Nsv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4Nsv =
+      (GdkGLProc_glVertexAttrib4Nsv) gdk_gl_get_proc_address ("glVertexAttrib4Nsv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1svARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib1svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4Nsv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4Nsv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4Nsv);
 }
 
-/* glVertexAttrib2dARB */
+/* glVertexAttrib4Nub */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2dARB (void)
+gdk_gl_get_glVertexAttrib4Nub (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib2dARB == (GdkGLProc_glVertexAttrib2dARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib2dARB =
-      (GdkGLProc_glVertexAttrib2dARB) gdk_gl_get_proc_address ("glVertexAttrib2dARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4Nub == (GdkGLProc_glVertexAttrib4Nub) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4Nub =
+      (GdkGLProc_glVertexAttrib4Nub) gdk_gl_get_proc_address ("glVertexAttrib4Nub");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2dARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib2dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4Nub () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4Nub) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4Nub);
 }
 
-/* glVertexAttrib2dvARB */
+/* glVertexAttrib4Nubv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2dvARB (void)
+gdk_gl_get_glVertexAttrib4Nubv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib2dvARB == (GdkGLProc_glVertexAttrib2dvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib2dvARB =
-      (GdkGLProc_glVertexAttrib2dvARB) gdk_gl_get_proc_address ("glVertexAttrib2dvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4Nubv == (GdkGLProc_glVertexAttrib4Nubv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4Nubv =
+      (GdkGLProc_glVertexAttrib4Nubv) gdk_gl_get_proc_address ("glVertexAttrib4Nubv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2dvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib2dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4Nubv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4Nubv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4Nubv);
 }
 
-/* glVertexAttrib2fARB */
+/* glVertexAttrib4Nuiv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2fARB (void)
+gdk_gl_get_glVertexAttrib4Nuiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib2fARB == (GdkGLProc_glVertexAttrib2fARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib2fARB =
-      (GdkGLProc_glVertexAttrib2fARB) gdk_gl_get_proc_address ("glVertexAttrib2fARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4Nuiv == (GdkGLProc_glVertexAttrib4Nuiv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4Nuiv =
+      (GdkGLProc_glVertexAttrib4Nuiv) gdk_gl_get_proc_address ("glVertexAttrib4Nuiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2fARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib2fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4Nuiv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4Nuiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4Nuiv);
 }
 
-/* glVertexAttrib2fvARB */
+/* glVertexAttrib4Nusv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2fvARB (void)
+gdk_gl_get_glVertexAttrib4Nusv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib2fvARB == (GdkGLProc_glVertexAttrib2fvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib2fvARB =
-      (GdkGLProc_glVertexAttrib2fvARB) gdk_gl_get_proc_address ("glVertexAttrib2fvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4Nusv == (GdkGLProc_glVertexAttrib4Nusv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4Nusv =
+      (GdkGLProc_glVertexAttrib4Nusv) gdk_gl_get_proc_address ("glVertexAttrib4Nusv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2fvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib2fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4Nusv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4Nusv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4Nusv);
 }
 
-/* glVertexAttrib2sARB */
+/* glVertexAttrib4bv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2sARB (void)
+gdk_gl_get_glVertexAttrib4bv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib2sARB == (GdkGLProc_glVertexAttrib2sARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib2sARB =
-      (GdkGLProc_glVertexAttrib2sARB) gdk_gl_get_proc_address ("glVertexAttrib2sARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4bv == (GdkGLProc_glVertexAttrib4bv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4bv =
+      (GdkGLProc_glVertexAttrib4bv) gdk_gl_get_proc_address ("glVertexAttrib4bv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2sARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib2sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4bv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4bv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4bv);
 }
 
-/* glVertexAttrib2svARB */
+/* glVertexAttrib4d */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2svARB (void)
+gdk_gl_get_glVertexAttrib4d (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib2svARB == (GdkGLProc_glVertexAttrib2svARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib2svARB =
-      (GdkGLProc_glVertexAttrib2svARB) gdk_gl_get_proc_address ("glVertexAttrib2svARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4d == (GdkGLProc_glVertexAttrib4d) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4d =
+      (GdkGLProc_glVertexAttrib4d) gdk_gl_get_proc_address ("glVertexAttrib4d");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2svARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib2svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4d () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4d) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4d);
 }
 
-/* glVertexAttrib3dARB */
+/* glVertexAttrib4dv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3dARB (void)
+gdk_gl_get_glVertexAttrib4dv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib3dARB == (GdkGLProc_glVertexAttrib3dARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib3dARB =
-      (GdkGLProc_glVertexAttrib3dARB) gdk_gl_get_proc_address ("glVertexAttrib3dARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4dv == (GdkGLProc_glVertexAttrib4dv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4dv =
+      (GdkGLProc_glVertexAttrib4dv) gdk_gl_get_proc_address ("glVertexAttrib4dv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3dARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib3dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4dv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4dv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4dv);
 }
 
-/* glVertexAttrib3dvARB */
+/* glVertexAttrib4f */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3dvARB (void)
+gdk_gl_get_glVertexAttrib4f (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib3dvARB == (GdkGLProc_glVertexAttrib3dvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib3dvARB =
-      (GdkGLProc_glVertexAttrib3dvARB) gdk_gl_get_proc_address ("glVertexAttrib3dvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4f == (GdkGLProc_glVertexAttrib4f) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4f =
+      (GdkGLProc_glVertexAttrib4f) gdk_gl_get_proc_address ("glVertexAttrib4f");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3dvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib3dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4f () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4f) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4f);
 }
 
-/* glVertexAttrib3fARB */
+/* glVertexAttrib4fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3fARB (void)
+gdk_gl_get_glVertexAttrib4fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib3fARB == (GdkGLProc_glVertexAttrib3fARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib3fARB =
-      (GdkGLProc_glVertexAttrib3fARB) gdk_gl_get_proc_address ("glVertexAttrib3fARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4fv == (GdkGLProc_glVertexAttrib4fv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4fv =
+      (GdkGLProc_glVertexAttrib4fv) gdk_gl_get_proc_address ("glVertexAttrib4fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3fARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib3fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4fv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4fv);
 }
 
-/* glVertexAttrib3fvARB */
+/* glVertexAttrib4iv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3fvARB (void)
+gdk_gl_get_glVertexAttrib4iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib3fvARB == (GdkGLProc_glVertexAttrib3fvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib3fvARB =
-      (GdkGLProc_glVertexAttrib3fvARB) gdk_gl_get_proc_address ("glVertexAttrib3fvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4iv == (GdkGLProc_glVertexAttrib4iv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4iv =
+      (GdkGLProc_glVertexAttrib4iv) gdk_gl_get_proc_address ("glVertexAttrib4iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3fvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib3fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4iv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4iv);
 }
 
-/* glVertexAttrib3sARB */
+/* glVertexAttrib4s */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3sARB (void)
+gdk_gl_get_glVertexAttrib4s (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib3sARB == (GdkGLProc_glVertexAttrib3sARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib3sARB =
-      (GdkGLProc_glVertexAttrib3sARB) gdk_gl_get_proc_address ("glVertexAttrib3sARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4s == (GdkGLProc_glVertexAttrib4s) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4s =
+      (GdkGLProc_glVertexAttrib4s) gdk_gl_get_proc_address ("glVertexAttrib4s");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3sARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib3sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4s () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4s) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4s);
 }
 
-/* glVertexAttrib3svARB */
+/* glVertexAttrib4sv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3svARB (void)
+gdk_gl_get_glVertexAttrib4sv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib3svARB == (GdkGLProc_glVertexAttrib3svARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib3svARB =
-      (GdkGLProc_glVertexAttrib3svARB) gdk_gl_get_proc_address ("glVertexAttrib3svARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4sv == (GdkGLProc_glVertexAttrib4sv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4sv =
+      (GdkGLProc_glVertexAttrib4sv) gdk_gl_get_proc_address ("glVertexAttrib4sv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3svARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib3svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4sv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4sv);
 }
 
-/* glVertexAttrib4NbvARB */
+/* glVertexAttrib4ubv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4NbvARB (void)
+gdk_gl_get_glVertexAttrib4ubv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB == (GdkGLProc_glVertexAttrib4NbvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB =
-      (GdkGLProc_glVertexAttrib4NbvARB) gdk_gl_get_proc_address ("glVertexAttrib4NbvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4ubv == (GdkGLProc_glVertexAttrib4ubv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4ubv =
+      (GdkGLProc_glVertexAttrib4ubv) gdk_gl_get_proc_address ("glVertexAttrib4ubv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4NbvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4ubv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4ubv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4ubv);
 }
 
-/* glVertexAttrib4NivARB */
+/* glVertexAttrib4uiv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4NivARB (void)
+gdk_gl_get_glVertexAttrib4uiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NivARB == (GdkGLProc_glVertexAttrib4NivARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4NivARB =
-      (GdkGLProc_glVertexAttrib4NivARB) gdk_gl_get_proc_address ("glVertexAttrib4NivARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4uiv == (GdkGLProc_glVertexAttrib4uiv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4uiv =
+      (GdkGLProc_glVertexAttrib4uiv) gdk_gl_get_proc_address ("glVertexAttrib4uiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4NivARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4NivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4uiv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4uiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4uiv);
 }
 
-/* glVertexAttrib4NsvARB */
+/* glVertexAttrib4usv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4NsvARB (void)
+gdk_gl_get_glVertexAttrib4usv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB == (GdkGLProc_glVertexAttrib4NsvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB =
-      (GdkGLProc_glVertexAttrib4NsvARB) gdk_gl_get_proc_address ("glVertexAttrib4NsvARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttrib4usv == (GdkGLProc_glVertexAttrib4usv) -1)
+    _procs_GL_VERSION_2_0.glVertexAttrib4usv =
+      (GdkGLProc_glVertexAttrib4usv) gdk_gl_get_proc_address ("glVertexAttrib4usv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4NsvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4usv () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttrib4usv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttrib4usv);
 }
 
-/* glVertexAttrib4NubARB */
+/* glVertexAttribPointer */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4NubARB (void)
+gdk_gl_get_glVertexAttribPointer (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NubARB == (GdkGLProc_glVertexAttrib4NubARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4NubARB =
-      (GdkGLProc_glVertexAttrib4NubARB) gdk_gl_get_proc_address ("glVertexAttrib4NubARB");
+  if (_procs_GL_VERSION_2_0.glVertexAttribPointer == (GdkGLProc_glVertexAttribPointer) -1)
+    _procs_GL_VERSION_2_0.glVertexAttribPointer =
+      (GdkGLProc_glVertexAttribPointer) gdk_gl_get_proc_address ("glVertexAttribPointer");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4NubARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4NubARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribPointer () - %s",
+               (_procs_GL_VERSION_2_0.glVertexAttribPointer) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NubARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_0.glVertexAttribPointer);
 }
 
-/* glVertexAttrib4NubvARB */
-GdkGLProc
-gdk_gl_get_glVertexAttrib4NubvARB (void)
+/* Get GL_VERSION_2_0 functions */
+GdkGL_GL_VERSION_2_0 *
+gdk_gl_get_GL_VERSION_2_0 (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB == (GdkGLProc_glVertexAttrib4NubvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB =
-      (GdkGLProc_glVertexAttrib4NubvARB) gdk_gl_get_proc_address ("glVertexAttrib4NubvARB");
+  if (supported == -1)
+    {
+      supported =  (gdk_gl_get_glBlendEquationSeparate () != NULL);
+      supported &= (gdk_gl_get_glDrawBuffers () != NULL);
+      supported &= (gdk_gl_get_glStencilOpSeparate () != NULL);
+      supported &= (gdk_gl_get_glStencilFuncSeparate () != NULL);
+      supported &= (gdk_gl_get_glStencilMaskSeparate () != NULL);
+      supported &= (gdk_gl_get_glAttachShader () != NULL);
+      supported &= (gdk_gl_get_glBindAttribLocation () != NULL);
+      supported &= (gdk_gl_get_glCompileShader () != NULL);
+      supported &= (gdk_gl_get_glCreateProgram () != NULL);
+      supported &= (gdk_gl_get_glCreateShader () != NULL);
+      supported &= (gdk_gl_get_glDeleteProgram () != NULL);
+      supported &= (gdk_gl_get_glDeleteShader () != NULL);
+      supported &= (gdk_gl_get_glDetachShader () != NULL);
+      supported &= (gdk_gl_get_glDisableVertexAttribArray () != NULL);
+      supported &= (gdk_gl_get_glEnableVertexAttribArray () != NULL);
+      supported &= (gdk_gl_get_glGetActiveAttrib () != NULL);
+      supported &= (gdk_gl_get_glGetActiveUniform () != NULL);
+      supported &= (gdk_gl_get_glGetAttachedShaders () != NULL);
+      supported &= (gdk_gl_get_glGetAttribLocation () != NULL);
+      supported &= (gdk_gl_get_glGetProgramiv () != NULL);
+      supported &= (gdk_gl_get_glGetProgramInfoLog () != NULL);
+      supported &= (gdk_gl_get_glGetShaderiv () != NULL);
+      supported &= (gdk_gl_get_glGetShaderInfoLog () != NULL);
+      supported &= (gdk_gl_get_glGetShaderSource () != NULL);
+      supported &= (gdk_gl_get_glGetUniformLocation () != NULL);
+      supported &= (gdk_gl_get_glGetUniformfv () != NULL);
+      supported &= (gdk_gl_get_glGetUniformiv () != NULL);
+      supported &= (gdk_gl_get_glGetVertexAttribdv () != NULL);
+      supported &= (gdk_gl_get_glGetVertexAttribfv () != NULL);
+      supported &= (gdk_gl_get_glGetVertexAttribiv () != NULL);
+      supported &= (gdk_gl_get_glGetVertexAttribPointerv () != NULL);
+      supported &= (gdk_gl_get_glIsProgram () != NULL);
+      supported &= (gdk_gl_get_glIsShader () != NULL);
+      supported &= (gdk_gl_get_glLinkProgram () != NULL);
+      supported &= (gdk_gl_get_glShaderSource () != NULL);
+      supported &= (gdk_gl_get_glUseProgram () != NULL);
+      supported &= (gdk_gl_get_glUniform1f () != NULL);
+      supported &= (gdk_gl_get_glUniform2f () != NULL);
+      supported &= (gdk_gl_get_glUniform3f () != NULL);
+      supported &= (gdk_gl_get_glUniform4f () != NULL);
+      supported &= (gdk_gl_get_glUniform1i () != NULL);
+      supported &= (gdk_gl_get_glUniform2i () != NULL);
+      supported &= (gdk_gl_get_glUniform3i () != NULL);
+      supported &= (gdk_gl_get_glUniform4i () != NULL);
+      supported &= (gdk_gl_get_glUniform1fv () != NULL);
+      supported &= (gdk_gl_get_glUniform2fv () != NULL);
+      supported &= (gdk_gl_get_glUniform3fv () != NULL);
+      supported &= (gdk_gl_get_glUniform4fv () != NULL);
+      supported &= (gdk_gl_get_glUniform1iv () != NULL);
+      supported &= (gdk_gl_get_glUniform2iv () != NULL);
+      supported &= (gdk_gl_get_glUniform3iv () != NULL);
+      supported &= (gdk_gl_get_glUniform4iv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix2fv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix3fv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix4fv () != NULL);
+      supported &= (gdk_gl_get_glValidateProgram () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib1d () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib1dv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib1f () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib1fv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib1s () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib1sv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib2d () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib2dv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib2f () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib2fv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib2s () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib2sv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib3d () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib3dv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib3f () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib3fv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib3s () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib3sv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4Nbv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4Niv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4Nsv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4Nub () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4Nubv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4Nuiv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4Nusv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4bv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4d () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4dv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4f () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4fv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4iv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4s () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4sv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4ubv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4uiv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttrib4usv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribPointer () != NULL);
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4NubvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_VERSION_2_0 () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_VERSION_2_0;
 }
 
-/* glVertexAttrib4NuivARB */
+/*
+ * GL_VERSION_2_1
+ */
+
+static GdkGL_GL_VERSION_2_1 _procs_GL_VERSION_2_1 = {
+  (GdkGLProc_glUniformMatrix2x3fv) -1,
+  (GdkGLProc_glUniformMatrix3x2fv) -1,
+  (GdkGLProc_glUniformMatrix2x4fv) -1,
+  (GdkGLProc_glUniformMatrix4x2fv) -1,
+  (GdkGLProc_glUniformMatrix3x4fv) -1,
+  (GdkGLProc_glUniformMatrix4x3fv) -1
+};
+
+/* glUniformMatrix2x3fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4NuivARB (void)
+gdk_gl_get_glUniformMatrix2x3fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB == (GdkGLProc_glVertexAttrib4NuivARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB =
-      (GdkGLProc_glVertexAttrib4NuivARB) gdk_gl_get_proc_address ("glVertexAttrib4NuivARB");
+  if (_procs_GL_VERSION_2_1.glUniformMatrix2x3fv == (GdkGLProc_glUniformMatrix2x3fv) -1)
+    _procs_GL_VERSION_2_1.glUniformMatrix2x3fv =
+      (GdkGLProc_glUniformMatrix2x3fv) gdk_gl_get_proc_address ("glUniformMatrix2x3fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4NuivARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix2x3fv () - %s",
+               (_procs_GL_VERSION_2_1.glUniformMatrix2x3fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_1.glUniformMatrix2x3fv);
 }
 
-/* glVertexAttrib4NusvARB */
+/* glUniformMatrix3x2fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4NusvARB (void)
+gdk_gl_get_glUniformMatrix3x2fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB == (GdkGLProc_glVertexAttrib4NusvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB =
-      (GdkGLProc_glVertexAttrib4NusvARB) gdk_gl_get_proc_address ("glVertexAttrib4NusvARB");
+  if (_procs_GL_VERSION_2_1.glUniformMatrix3x2fv == (GdkGLProc_glUniformMatrix3x2fv) -1)
+    _procs_GL_VERSION_2_1.glUniformMatrix3x2fv =
+      (GdkGLProc_glUniformMatrix3x2fv) gdk_gl_get_proc_address ("glUniformMatrix3x2fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4NusvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix3x2fv () - %s",
+               (_procs_GL_VERSION_2_1.glUniformMatrix3x2fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_1.glUniformMatrix3x2fv);
 }
 
-/* glVertexAttrib4bvARB */
+/* glUniformMatrix2x4fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4bvARB (void)
+gdk_gl_get_glUniformMatrix2x4fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4bvARB == (GdkGLProc_glVertexAttrib4bvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4bvARB =
-      (GdkGLProc_glVertexAttrib4bvARB) gdk_gl_get_proc_address ("glVertexAttrib4bvARB");
+  if (_procs_GL_VERSION_2_1.glUniformMatrix2x4fv == (GdkGLProc_glUniformMatrix2x4fv) -1)
+    _procs_GL_VERSION_2_1.glUniformMatrix2x4fv =
+      (GdkGLProc_glUniformMatrix2x4fv) gdk_gl_get_proc_address ("glUniformMatrix2x4fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4bvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4bvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix2x4fv () - %s",
+               (_procs_GL_VERSION_2_1.glUniformMatrix2x4fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4bvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_1.glUniformMatrix2x4fv);
 }
 
-/* glVertexAttrib4dARB */
+/* glUniformMatrix4x2fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4dARB (void)
+gdk_gl_get_glUniformMatrix4x2fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4dARB == (GdkGLProc_glVertexAttrib4dARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4dARB =
-      (GdkGLProc_glVertexAttrib4dARB) gdk_gl_get_proc_address ("glVertexAttrib4dARB");
+  if (_procs_GL_VERSION_2_1.glUniformMatrix4x2fv == (GdkGLProc_glUniformMatrix4x2fv) -1)
+    _procs_GL_VERSION_2_1.glUniformMatrix4x2fv =
+      (GdkGLProc_glUniformMatrix4x2fv) gdk_gl_get_proc_address ("glUniformMatrix4x2fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4dARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix4x2fv () - %s",
+               (_procs_GL_VERSION_2_1.glUniformMatrix4x2fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_1.glUniformMatrix4x2fv);
 }
 
-/* glVertexAttrib4dvARB */
+/* glUniformMatrix3x4fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4dvARB (void)
+gdk_gl_get_glUniformMatrix3x4fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4dvARB == (GdkGLProc_glVertexAttrib4dvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4dvARB =
-      (GdkGLProc_glVertexAttrib4dvARB) gdk_gl_get_proc_address ("glVertexAttrib4dvARB");
+  if (_procs_GL_VERSION_2_1.glUniformMatrix3x4fv == (GdkGLProc_glUniformMatrix3x4fv) -1)
+    _procs_GL_VERSION_2_1.glUniformMatrix3x4fv =
+      (GdkGLProc_glUniformMatrix3x4fv) gdk_gl_get_proc_address ("glUniformMatrix3x4fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4dvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix3x4fv () - %s",
+               (_procs_GL_VERSION_2_1.glUniformMatrix3x4fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_1.glUniformMatrix3x4fv);
 }
 
-/* glVertexAttrib4fARB */
+/* glUniformMatrix4x3fv */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4fARB (void)
+gdk_gl_get_glUniformMatrix4x3fv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4fARB == (GdkGLProc_glVertexAttrib4fARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4fARB =
-      (GdkGLProc_glVertexAttrib4fARB) gdk_gl_get_proc_address ("glVertexAttrib4fARB");
+  if (_procs_GL_VERSION_2_1.glUniformMatrix4x3fv == (GdkGLProc_glUniformMatrix4x3fv) -1)
+    _procs_GL_VERSION_2_1.glUniformMatrix4x3fv =
+      (GdkGLProc_glUniformMatrix4x3fv) gdk_gl_get_proc_address ("glUniformMatrix4x3fv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4fARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformMatrix4x3fv () - %s",
+               (_procs_GL_VERSION_2_1.glUniformMatrix4x3fv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_2_1.glUniformMatrix4x3fv);
 }
 
-/* glVertexAttrib4fvARB */
-GdkGLProc
-gdk_gl_get_glVertexAttrib4fvARB (void)
+/* Get GL_VERSION_2_1 functions */
+GdkGL_GL_VERSION_2_1 *
+gdk_gl_get_GL_VERSION_2_1 (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4fvARB == (GdkGLProc_glVertexAttrib4fvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4fvARB =
-      (GdkGLProc_glVertexAttrib4fvARB) gdk_gl_get_proc_address ("glVertexAttrib4fvARB");
+  if (supported == -1)
+    {
+      supported =  (gdk_gl_get_glUniformMatrix2x3fv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix3x2fv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix2x4fv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix4x2fv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix3x4fv () != NULL);
+      supported &= (gdk_gl_get_glUniformMatrix4x3fv () != NULL);
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4fvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_VERSION_2_1 () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4fvARB);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_VERSION_2_1;
 }
 
-/* glVertexAttrib4ivARB */
+/*
+ * GL_VERSION_3_0
+ */
+
+static GdkGL_GL_VERSION_3_0 _procs_GL_VERSION_3_0 = {
+  (GdkGLProc_glColorMaski) -1,
+  (GdkGLProc_glGetBooleani_v) -1,
+  (GdkGLProc_glGetIntegeri_v) -1,
+  (GdkGLProc_glEnablei) -1,
+  (GdkGLProc_glDisablei) -1,
+  (GdkGLProc_glIsEnabledi) -1,
+  (GdkGLProc_glBeginTransformFeedback) -1,
+  (GdkGLProc_glEndTransformFeedback) -1,
+  (GdkGLProc_glBindBufferRange) -1,
+  (GdkGLProc_glBindBufferBase) -1,
+  (GdkGLProc_glTransformFeedbackVaryings) -1,
+  (GdkGLProc_glGetTransformFeedbackVarying) -1,
+  (GdkGLProc_glClampColor) -1,
+  (GdkGLProc_glBeginConditionalRender) -1,
+  (GdkGLProc_glEndConditionalRender) -1,
+  (GdkGLProc_glVertexAttribIPointer) -1,
+  (GdkGLProc_glGetVertexAttribIiv) -1,
+  (GdkGLProc_glGetVertexAttribIuiv) -1,
+  (GdkGLProc_glVertexAttribI1i) -1,
+  (GdkGLProc_glVertexAttribI2i) -1,
+  (GdkGLProc_glVertexAttribI3i) -1,
+  (GdkGLProc_glVertexAttribI4i) -1,
+  (GdkGLProc_glVertexAttribI1ui) -1,
+  (GdkGLProc_glVertexAttribI2ui) -1,
+  (GdkGLProc_glVertexAttribI3ui) -1,
+  (GdkGLProc_glVertexAttribI4ui) -1,
+  (GdkGLProc_glVertexAttribI1iv) -1,
+  (GdkGLProc_glVertexAttribI2iv) -1,
+  (GdkGLProc_glVertexAttribI3iv) -1,
+  (GdkGLProc_glVertexAttribI4iv) -1,
+  (GdkGLProc_glVertexAttribI1uiv) -1,
+  (GdkGLProc_glVertexAttribI2uiv) -1,
+  (GdkGLProc_glVertexAttribI3uiv) -1,
+  (GdkGLProc_glVertexAttribI4uiv) -1,
+  (GdkGLProc_glVertexAttribI4bv) -1,
+  (GdkGLProc_glVertexAttribI4sv) -1,
+  (GdkGLProc_glVertexAttribI4ubv) -1,
+  (GdkGLProc_glVertexAttribI4usv) -1,
+  (GdkGLProc_glGetUniformuiv) -1,
+  (GdkGLProc_glBindFragDataLocation) -1,
+  (GdkGLProc_glGetFragDataLocation) -1,
+  (GdkGLProc_glUniform1ui) -1,
+  (GdkGLProc_glUniform2ui) -1,
+  (GdkGLProc_glUniform3ui) -1,
+  (GdkGLProc_glUniform4ui) -1,
+  (GdkGLProc_glUniform1uiv) -1,
+  (GdkGLProc_glUniform2uiv) -1,
+  (GdkGLProc_glUniform3uiv) -1,
+  (GdkGLProc_glUniform4uiv) -1,
+  (GdkGLProc_glTexParameterIiv) -1,
+  (GdkGLProc_glTexParameterIuiv) -1,
+  (GdkGLProc_glGetTexParameterIiv) -1,
+  (GdkGLProc_glGetTexParameterIuiv) -1,
+  (GdkGLProc_glClearBufferiv) -1,
+  (GdkGLProc_glClearBufferuiv) -1,
+  (GdkGLProc_glClearBufferfv) -1,
+  (GdkGLProc_glClearBufferfi) -1,
+  (GdkGLProc_glGetStringi) -1
+};
+
+/* glColorMaski */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4ivARB (void)
+gdk_gl_get_glColorMaski (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4ivARB == (GdkGLProc_glVertexAttrib4ivARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4ivARB =
-      (GdkGLProc_glVertexAttrib4ivARB) gdk_gl_get_proc_address ("glVertexAttrib4ivARB");
+  if (_procs_GL_VERSION_3_0.glColorMaski == (GdkGLProc_glColorMaski) -1)
+    _procs_GL_VERSION_3_0.glColorMaski =
+      (GdkGLProc_glColorMaski) gdk_gl_get_proc_address ("glColorMaski");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4ivARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4ivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glColorMaski () - %s",
+               (_procs_GL_VERSION_3_0.glColorMaski) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4ivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glColorMaski);
 }
 
-/* glVertexAttrib4sARB */
+/* glGetBooleani_v */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4sARB (void)
+gdk_gl_get_glGetBooleani_v (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4sARB == (GdkGLProc_glVertexAttrib4sARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4sARB =
-      (GdkGLProc_glVertexAttrib4sARB) gdk_gl_get_proc_address ("glVertexAttrib4sARB");
+  if (_procs_GL_VERSION_3_0.glGetBooleani_v == (GdkGLProc_glGetBooleani_v) -1)
+    _procs_GL_VERSION_3_0.glGetBooleani_v =
+      (GdkGLProc_glGetBooleani_v) gdk_gl_get_proc_address ("glGetBooleani_v");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4sARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4sARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetBooleani_v () - %s",
+               (_procs_GL_VERSION_3_0.glGetBooleani_v) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4sARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetBooleani_v);
 }
 
-/* glVertexAttrib4svARB */
+/* glGetIntegeri_v */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4svARB (void)
+gdk_gl_get_glGetIntegeri_v (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4svARB == (GdkGLProc_glVertexAttrib4svARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4svARB =
-      (GdkGLProc_glVertexAttrib4svARB) gdk_gl_get_proc_address ("glVertexAttrib4svARB");
+  if (_procs_GL_VERSION_3_0.glGetIntegeri_v == (GdkGLProc_glGetIntegeri_v) -1)
+    _procs_GL_VERSION_3_0.glGetIntegeri_v =
+      (GdkGLProc_glGetIntegeri_v) gdk_gl_get_proc_address ("glGetIntegeri_v");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4svARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4svARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetIntegeri_v () - %s",
+               (_procs_GL_VERSION_3_0.glGetIntegeri_v) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4svARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetIntegeri_v);
 }
 
-/* glVertexAttrib4ubvARB */
+/* glEnablei */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4ubvARB (void)
+gdk_gl_get_glEnablei (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB == (GdkGLProc_glVertexAttrib4ubvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB =
-      (GdkGLProc_glVertexAttrib4ubvARB) gdk_gl_get_proc_address ("glVertexAttrib4ubvARB");
+  if (_procs_GL_VERSION_3_0.glEnablei == (GdkGLProc_glEnablei) -1)
+    _procs_GL_VERSION_3_0.glEnablei =
+      (GdkGLProc_glEnablei) gdk_gl_get_proc_address ("glEnablei");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4ubvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEnablei () - %s",
+               (_procs_GL_VERSION_3_0.glEnablei) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glEnablei);
 }
 
-/* glVertexAttrib4uivARB */
+/* glDisablei */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4uivARB (void)
+gdk_gl_get_glDisablei (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4uivARB == (GdkGLProc_glVertexAttrib4uivARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4uivARB =
-      (GdkGLProc_glVertexAttrib4uivARB) gdk_gl_get_proc_address ("glVertexAttrib4uivARB");
+  if (_procs_GL_VERSION_3_0.glDisablei == (GdkGLProc_glDisablei) -1)
+    _procs_GL_VERSION_3_0.glDisablei =
+      (GdkGLProc_glDisablei) gdk_gl_get_proc_address ("glDisablei");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4uivARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4uivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDisablei () - %s",
+               (_procs_GL_VERSION_3_0.glDisablei) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4uivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glDisablei);
 }
 
-/* glVertexAttrib4usvARB */
+/* glIsEnabledi */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4usvARB (void)
+gdk_gl_get_glIsEnabledi (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttrib4usvARB == (GdkGLProc_glVertexAttrib4usvARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttrib4usvARB =
-      (GdkGLProc_glVertexAttrib4usvARB) gdk_gl_get_proc_address ("glVertexAttrib4usvARB");
+  if (_procs_GL_VERSION_3_0.glIsEnabledi == (GdkGLProc_glIsEnabledi) -1)
+    _procs_GL_VERSION_3_0.glIsEnabledi =
+      (GdkGLProc_glIsEnabledi) gdk_gl_get_proc_address ("glIsEnabledi");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4usvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttrib4usvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsEnabledi () - %s",
+               (_procs_GL_VERSION_3_0.glIsEnabledi) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4usvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glIsEnabledi);
 }
 
-/* glVertexAttribPointerARB */
+/* glBeginTransformFeedback */
 GdkGLProc
-gdk_gl_get_glVertexAttribPointerARB (void)
+gdk_gl_get_glBeginTransformFeedback (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glVertexAttribPointerARB == (GdkGLProc_glVertexAttribPointerARB) -1)
-    _procs_GL_ARB_vertex_program.glVertexAttribPointerARB =
-      (GdkGLProc_glVertexAttribPointerARB) gdk_gl_get_proc_address ("glVertexAttribPointerARB");
+  if (_procs_GL_VERSION_3_0.glBeginTransformFeedback == (GdkGLProc_glBeginTransformFeedback) -1)
+    _procs_GL_VERSION_3_0.glBeginTransformFeedback =
+      (GdkGLProc_glBeginTransformFeedback) gdk_gl_get_proc_address ("glBeginTransformFeedback");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribPointerARB () - %s",
-               (_procs_GL_ARB_vertex_program.glVertexAttribPointerARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginTransformFeedback () - %s",
+               (_procs_GL_VERSION_3_0.glBeginTransformFeedback) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttribPointerARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glBeginTransformFeedback);
 }
 
-/* glEnableVertexAttribArrayARB */
+/* glEndTransformFeedback */
 GdkGLProc
-gdk_gl_get_glEnableVertexAttribArrayARB (void)
+gdk_gl_get_glEndTransformFeedback (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB == (GdkGLProc_glEnableVertexAttribArrayARB) -1)
-    _procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB =
-      (GdkGLProc_glEnableVertexAttribArrayARB) gdk_gl_get_proc_address ("glEnableVertexAttribArrayARB");
+  if (_procs_GL_VERSION_3_0.glEndTransformFeedback == (GdkGLProc_glEndTransformFeedback) -1)
+    _procs_GL_VERSION_3_0.glEndTransformFeedback =
+      (GdkGLProc_glEndTransformFeedback) gdk_gl_get_proc_address ("glEndTransformFeedback");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEnableVertexAttribArrayARB () - %s",
-               (_procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndTransformFeedback () - %s",
+               (_procs_GL_VERSION_3_0.glEndTransformFeedback) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glEndTransformFeedback);
 }
 
-/* glDisableVertexAttribArrayARB */
+/* glBindBufferRange */
 GdkGLProc
-gdk_gl_get_glDisableVertexAttribArrayARB (void)
+gdk_gl_get_glBindBufferRange (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB == (GdkGLProc_glDisableVertexAttribArrayARB) -1)
-    _procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB =
-      (GdkGLProc_glDisableVertexAttribArrayARB) gdk_gl_get_proc_address ("glDisableVertexAttribArrayARB");
+  if (_procs_GL_VERSION_3_0.glBindBufferRange == (GdkGLProc_glBindBufferRange) -1)
+    _procs_GL_VERSION_3_0.glBindBufferRange =
+      (GdkGLProc_glBindBufferRange) gdk_gl_get_proc_address ("glBindBufferRange");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDisableVertexAttribArrayARB () - %s",
-               (_procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferRange () - %s",
+               (_procs_GL_VERSION_3_0.glBindBufferRange) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glBindBufferRange);
 }
 
-/* glProgramStringARB */
+/* glBindBufferBase */
 GdkGLProc
-gdk_gl_get_glProgramStringARB (void)
+gdk_gl_get_glBindBufferBase (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramStringARB == (GdkGLProc_glProgramStringARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramStringARB =
-      (GdkGLProc_glProgramStringARB) gdk_gl_get_proc_address ("glProgramStringARB");
+  if (_procs_GL_VERSION_3_0.glBindBufferBase == (GdkGLProc_glBindBufferBase) -1)
+    _procs_GL_VERSION_3_0.glBindBufferBase =
+      (GdkGLProc_glBindBufferBase) gdk_gl_get_proc_address ("glBindBufferBase");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramStringARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramStringARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferBase () - %s",
+               (_procs_GL_VERSION_3_0.glBindBufferBase) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramStringARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glBindBufferBase);
 }
 
-/* glBindProgramARB */
+/* glTransformFeedbackVaryings */
 GdkGLProc
-gdk_gl_get_glBindProgramARB (void)
+gdk_gl_get_glTransformFeedbackVaryings (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glBindProgramARB == (GdkGLProc_glBindProgramARB) -1)
-    _procs_GL_ARB_vertex_program.glBindProgramARB =
-      (GdkGLProc_glBindProgramARB) gdk_gl_get_proc_address ("glBindProgramARB");
+  if (_procs_GL_VERSION_3_0.glTransformFeedbackVaryings == (GdkGLProc_glTransformFeedbackVaryings) -1)
+    _procs_GL_VERSION_3_0.glTransformFeedbackVaryings =
+      (GdkGLProc_glTransformFeedbackVaryings) gdk_gl_get_proc_address ("glTransformFeedbackVaryings");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindProgramARB () - %s",
-               (_procs_GL_ARB_vertex_program.glBindProgramARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTransformFeedbackVaryings () - %s",
+               (_procs_GL_VERSION_3_0.glTransformFeedbackVaryings) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glBindProgramARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glTransformFeedbackVaryings);
 }
 
-/* glDeleteProgramsARB */
+/* glGetTransformFeedbackVarying */
 GdkGLProc
-gdk_gl_get_glDeleteProgramsARB (void)
+gdk_gl_get_glGetTransformFeedbackVarying (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glDeleteProgramsARB == (GdkGLProc_glDeleteProgramsARB) -1)
-    _procs_GL_ARB_vertex_program.glDeleteProgramsARB =
-      (GdkGLProc_glDeleteProgramsARB) gdk_gl_get_proc_address ("glDeleteProgramsARB");
+  if (_procs_GL_VERSION_3_0.glGetTransformFeedbackVarying == (GdkGLProc_glGetTransformFeedbackVarying) -1)
+    _procs_GL_VERSION_3_0.glGetTransformFeedbackVarying =
+      (GdkGLProc_glGetTransformFeedbackVarying) gdk_gl_get_proc_address ("glGetTransformFeedbackVarying");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteProgramsARB () - %s",
-               (_procs_GL_ARB_vertex_program.glDeleteProgramsARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTransformFeedbackVarying () - %s",
+               (_procs_GL_VERSION_3_0.glGetTransformFeedbackVarying) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glDeleteProgramsARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetTransformFeedbackVarying);
 }
 
-/* glGenProgramsARB */
+/* glClampColor */
 GdkGLProc
-gdk_gl_get_glGenProgramsARB (void)
+gdk_gl_get_glClampColor (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGenProgramsARB == (GdkGLProc_glGenProgramsARB) -1)
-    _procs_GL_ARB_vertex_program.glGenProgramsARB =
-      (GdkGLProc_glGenProgramsARB) gdk_gl_get_proc_address ("glGenProgramsARB");
+  if (_procs_GL_VERSION_3_0.glClampColor == (GdkGLProc_glClampColor) -1)
+    _procs_GL_VERSION_3_0.glClampColor =
+      (GdkGLProc_glClampColor) gdk_gl_get_proc_address ("glClampColor");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenProgramsARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGenProgramsARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClampColor () - %s",
+               (_procs_GL_VERSION_3_0.glClampColor) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGenProgramsARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glClampColor);
 }
 
-/* glProgramEnvParameter4dARB */
+/* glBeginConditionalRender */
 GdkGLProc
-gdk_gl_get_glProgramEnvParameter4dARB (void)
+gdk_gl_get_glBeginConditionalRender (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB == (GdkGLProc_glProgramEnvParameter4dARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB =
-      (GdkGLProc_glProgramEnvParameter4dARB) gdk_gl_get_proc_address ("glProgramEnvParameter4dARB");
+  if (_procs_GL_VERSION_3_0.glBeginConditionalRender == (GdkGLProc_glBeginConditionalRender) -1)
+    _procs_GL_VERSION_3_0.glBeginConditionalRender =
+      (GdkGLProc_glBeginConditionalRender) gdk_gl_get_proc_address ("glBeginConditionalRender");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramEnvParameter4dARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginConditionalRender () - %s",
+               (_procs_GL_VERSION_3_0.glBeginConditionalRender) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glBeginConditionalRender);
 }
 
-/* glProgramEnvParameter4dvARB */
+/* glEndConditionalRender */
 GdkGLProc
-gdk_gl_get_glProgramEnvParameter4dvARB (void)
+gdk_gl_get_glEndConditionalRender (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB == (GdkGLProc_glProgramEnvParameter4dvARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB =
-      (GdkGLProc_glProgramEnvParameter4dvARB) gdk_gl_get_proc_address ("glProgramEnvParameter4dvARB");
+  if (_procs_GL_VERSION_3_0.glEndConditionalRender == (GdkGLProc_glEndConditionalRender) -1)
+    _procs_GL_VERSION_3_0.glEndConditionalRender =
+      (GdkGLProc_glEndConditionalRender) gdk_gl_get_proc_address ("glEndConditionalRender");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramEnvParameter4dvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndConditionalRender () - %s",
+               (_procs_GL_VERSION_3_0.glEndConditionalRender) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glEndConditionalRender);
 }
 
-/* glProgramEnvParameter4fARB */
+/* glVertexAttribIPointer */
 GdkGLProc
-gdk_gl_get_glProgramEnvParameter4fARB (void)
+gdk_gl_get_glVertexAttribIPointer (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB == (GdkGLProc_glProgramEnvParameter4fARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB =
-      (GdkGLProc_glProgramEnvParameter4fARB) gdk_gl_get_proc_address ("glProgramEnvParameter4fARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribIPointer == (GdkGLProc_glVertexAttribIPointer) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribIPointer =
+      (GdkGLProc_glVertexAttribIPointer) gdk_gl_get_proc_address ("glVertexAttribIPointer");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramEnvParameter4fARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribIPointer () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribIPointer) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribIPointer);
 }
 
-/* glProgramEnvParameter4fvARB */
+/* glGetVertexAttribIiv */
 GdkGLProc
-gdk_gl_get_glProgramEnvParameter4fvARB (void)
+gdk_gl_get_glGetVertexAttribIiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB == (GdkGLProc_glProgramEnvParameter4fvARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB =
-      (GdkGLProc_glProgramEnvParameter4fvARB) gdk_gl_get_proc_address ("glProgramEnvParameter4fvARB");
+  if (_procs_GL_VERSION_3_0.glGetVertexAttribIiv == (GdkGLProc_glGetVertexAttribIiv) -1)
+    _procs_GL_VERSION_3_0.glGetVertexAttribIiv =
+      (GdkGLProc_glGetVertexAttribIiv) gdk_gl_get_proc_address ("glGetVertexAttribIiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramEnvParameter4fvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribIiv () - %s",
+               (_procs_GL_VERSION_3_0.glGetVertexAttribIiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetVertexAttribIiv);
 }
 
-/* glProgramLocalParameter4dARB */
+/* glGetVertexAttribIuiv */
 GdkGLProc
-gdk_gl_get_glProgramLocalParameter4dARB (void)
+gdk_gl_get_glGetVertexAttribIuiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB == (GdkGLProc_glProgramLocalParameter4dARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB =
-      (GdkGLProc_glProgramLocalParameter4dARB) gdk_gl_get_proc_address ("glProgramLocalParameter4dARB");
+  if (_procs_GL_VERSION_3_0.glGetVertexAttribIuiv == (GdkGLProc_glGetVertexAttribIuiv) -1)
+    _procs_GL_VERSION_3_0.glGetVertexAttribIuiv =
+      (GdkGLProc_glGetVertexAttribIuiv) gdk_gl_get_proc_address ("glGetVertexAttribIuiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramLocalParameter4dARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribIuiv () - %s",
+               (_procs_GL_VERSION_3_0.glGetVertexAttribIuiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetVertexAttribIuiv);
 }
 
-/* glProgramLocalParameter4dvARB */
+/* glVertexAttribI1i */
 GdkGLProc
-gdk_gl_get_glProgramLocalParameter4dvARB (void)
+gdk_gl_get_glVertexAttribI1i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB == (GdkGLProc_glProgramLocalParameter4dvARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB =
-      (GdkGLProc_glProgramLocalParameter4dvARB) gdk_gl_get_proc_address ("glProgramLocalParameter4dvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI1i == (GdkGLProc_glVertexAttribI1i) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI1i =
+      (GdkGLProc_glVertexAttribI1i) gdk_gl_get_proc_address ("glVertexAttribI1i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramLocalParameter4dvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI1i () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI1i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI1i);
 }
 
-/* glProgramLocalParameter4fARB */
+/* glVertexAttribI2i */
 GdkGLProc
-gdk_gl_get_glProgramLocalParameter4fARB (void)
+gdk_gl_get_glVertexAttribI2i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB == (GdkGLProc_glProgramLocalParameter4fARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB =
-      (GdkGLProc_glProgramLocalParameter4fARB) gdk_gl_get_proc_address ("glProgramLocalParameter4fARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI2i == (GdkGLProc_glVertexAttribI2i) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI2i =
+      (GdkGLProc_glVertexAttribI2i) gdk_gl_get_proc_address ("glVertexAttribI2i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramLocalParameter4fARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2i () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI2i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI2i);
 }
 
-/* glProgramLocalParameter4fvARB */
+/* glVertexAttribI3i */
 GdkGLProc
-gdk_gl_get_glProgramLocalParameter4fvARB (void)
+gdk_gl_get_glVertexAttribI3i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB == (GdkGLProc_glProgramLocalParameter4fvARB) -1)
-    _procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB =
-      (GdkGLProc_glProgramLocalParameter4fvARB) gdk_gl_get_proc_address ("glProgramLocalParameter4fvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI3i == (GdkGLProc_glVertexAttribI3i) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI3i =
+      (GdkGLProc_glVertexAttribI3i) gdk_gl_get_proc_address ("glVertexAttribI3i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramLocalParameter4fvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI3i () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI3i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI3i);
 }
 
-/* glGetProgramEnvParameterdvARB */
+/* glVertexAttribI4i */
 GdkGLProc
-gdk_gl_get_glGetProgramEnvParameterdvARB (void)
+gdk_gl_get_glVertexAttribI4i (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB == (GdkGLProc_glGetProgramEnvParameterdvARB) -1)
-    _procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB =
-      (GdkGLProc_glGetProgramEnvParameterdvARB) gdk_gl_get_proc_address ("glGetProgramEnvParameterdvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4i == (GdkGLProc_glVertexAttribI4i) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4i =
+      (GdkGLProc_glVertexAttribI4i) gdk_gl_get_proc_address ("glVertexAttribI4i");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramEnvParameterdvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4i () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4i) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4i);
 }
 
-/* glGetProgramEnvParameterfvARB */
+/* glVertexAttribI1ui */
 GdkGLProc
-gdk_gl_get_glGetProgramEnvParameterfvARB (void)
+gdk_gl_get_glVertexAttribI1ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB == (GdkGLProc_glGetProgramEnvParameterfvARB) -1)
-    _procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB =
-      (GdkGLProc_glGetProgramEnvParameterfvARB) gdk_gl_get_proc_address ("glGetProgramEnvParameterfvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI1ui == (GdkGLProc_glVertexAttribI1ui) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI1ui =
+      (GdkGLProc_glVertexAttribI1ui) gdk_gl_get_proc_address ("glVertexAttribI1ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramEnvParameterfvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI1ui () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI1ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI1ui);
 }
 
-/* glGetProgramLocalParameterdvARB */
+/* glVertexAttribI2ui */
 GdkGLProc
-gdk_gl_get_glGetProgramLocalParameterdvARB (void)
+gdk_gl_get_glVertexAttribI2ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB == (GdkGLProc_glGetProgramLocalParameterdvARB) -1)
-    _procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB =
-      (GdkGLProc_glGetProgramLocalParameterdvARB) gdk_gl_get_proc_address ("glGetProgramLocalParameterdvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI2ui == (GdkGLProc_glVertexAttribI2ui) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI2ui =
+      (GdkGLProc_glVertexAttribI2ui) gdk_gl_get_proc_address ("glVertexAttribI2ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramLocalParameterdvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2ui () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI2ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI2ui);
 }
 
-/* glGetProgramLocalParameterfvARB */
+/* glVertexAttribI3ui */
 GdkGLProc
-gdk_gl_get_glGetProgramLocalParameterfvARB (void)
+gdk_gl_get_glVertexAttribI3ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB == (GdkGLProc_glGetProgramLocalParameterfvARB) -1)
-    _procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB =
-      (GdkGLProc_glGetProgramLocalParameterfvARB) gdk_gl_get_proc_address ("glGetProgramLocalParameterfvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI3ui == (GdkGLProc_glVertexAttribI3ui) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI3ui =
+      (GdkGLProc_glVertexAttribI3ui) gdk_gl_get_proc_address ("glVertexAttribI3ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramLocalParameterfvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI3ui () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI3ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI3ui);
 }
 
-/* glGetProgramivARB */
+/* glVertexAttribI4ui */
 GdkGLProc
-gdk_gl_get_glGetProgramivARB (void)
+gdk_gl_get_glVertexAttribI4ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetProgramivARB == (GdkGLProc_glGetProgramivARB) -1)
-    _procs_GL_ARB_vertex_program.glGetProgramivARB =
-      (GdkGLProc_glGetProgramivARB) gdk_gl_get_proc_address ("glGetProgramivARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4ui == (GdkGLProc_glVertexAttribI4ui) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4ui =
+      (GdkGLProc_glVertexAttribI4ui) gdk_gl_get_proc_address ("glVertexAttribI4ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramivARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetProgramivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4ui () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4ui);
 }
 
-/* glGetProgramStringARB */
+/* glVertexAttribI1iv */
 GdkGLProc
-gdk_gl_get_glGetProgramStringARB (void)
+gdk_gl_get_glVertexAttribI1iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetProgramStringARB == (GdkGLProc_glGetProgramStringARB) -1)
-    _procs_GL_ARB_vertex_program.glGetProgramStringARB =
-      (GdkGLProc_glGetProgramStringARB) gdk_gl_get_proc_address ("glGetProgramStringARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI1iv == (GdkGLProc_glVertexAttribI1iv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI1iv =
+      (GdkGLProc_glVertexAttribI1iv) gdk_gl_get_proc_address ("glVertexAttribI1iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramStringARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetProgramStringARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI1iv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI1iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramStringARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI1iv);
 }
 
-/* glGetVertexAttribdvARB */
+/* glVertexAttribI2iv */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribdvARB (void)
+gdk_gl_get_glVertexAttribI2iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetVertexAttribdvARB == (GdkGLProc_glGetVertexAttribdvARB) -1)
-    _procs_GL_ARB_vertex_program.glGetVertexAttribdvARB =
-      (GdkGLProc_glGetVertexAttribdvARB) gdk_gl_get_proc_address ("glGetVertexAttribdvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI2iv == (GdkGLProc_glVertexAttribI2iv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI2iv =
+      (GdkGLProc_glVertexAttribI2iv) gdk_gl_get_proc_address ("glVertexAttribI2iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribdvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetVertexAttribdvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2iv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI2iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribdvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI2iv);
 }
 
-/* glGetVertexAttribfvARB */
+/* glVertexAttribI3iv */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribfvARB (void)
+gdk_gl_get_glVertexAttribI3iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetVertexAttribfvARB == (GdkGLProc_glGetVertexAttribfvARB) -1)
-    _procs_GL_ARB_vertex_program.glGetVertexAttribfvARB =
-      (GdkGLProc_glGetVertexAttribfvARB) gdk_gl_get_proc_address ("glGetVertexAttribfvARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI3iv == (GdkGLProc_glVertexAttribI3iv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI3iv =
+      (GdkGLProc_glVertexAttribI3iv) gdk_gl_get_proc_address ("glVertexAttribI3iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribfvARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetVertexAttribfvARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI3iv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI3iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribfvARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI3iv);
 }
 
-/* glGetVertexAttribivARB */
+/* glVertexAttribI4iv */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribivARB (void)
+gdk_gl_get_glVertexAttribI4iv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetVertexAttribivARB == (GdkGLProc_glGetVertexAttribivARB) -1)
-    _procs_GL_ARB_vertex_program.glGetVertexAttribivARB =
-      (GdkGLProc_glGetVertexAttribivARB) gdk_gl_get_proc_address ("glGetVertexAttribivARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4iv == (GdkGLProc_glVertexAttribI4iv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4iv =
+      (GdkGLProc_glVertexAttribI4iv) gdk_gl_get_proc_address ("glVertexAttribI4iv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribivARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetVertexAttribivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4iv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4iv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4iv);
 }
 
-/* glGetVertexAttribPointervARB */
+/* glVertexAttribI1uiv */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribPointervARB (void)
+gdk_gl_get_glVertexAttribI1uiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB == (GdkGLProc_glGetVertexAttribPointervARB) -1)
-    _procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB =
-      (GdkGLProc_glGetVertexAttribPointervARB) gdk_gl_get_proc_address ("glGetVertexAttribPointervARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI1uiv == (GdkGLProc_glVertexAttribI1uiv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI1uiv =
+      (GdkGLProc_glVertexAttribI1uiv) gdk_gl_get_proc_address ("glVertexAttribI1uiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribPointervARB () - %s",
-               (_procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI1uiv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI1uiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI1uiv);
 }
 
-/* glIsProgramARB */
+/* glVertexAttribI2uiv */
 GdkGLProc
-gdk_gl_get_glIsProgramARB (void)
+gdk_gl_get_glVertexAttribI2uiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_program.glIsProgramARB == (GdkGLProc_glIsProgramARB) -1)
-    _procs_GL_ARB_vertex_program.glIsProgramARB =
-      (GdkGLProc_glIsProgramARB) gdk_gl_get_proc_address ("glIsProgramARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI2uiv == (GdkGLProc_glVertexAttribI2uiv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI2uiv =
+      (GdkGLProc_glVertexAttribI2uiv) gdk_gl_get_proc_address ("glVertexAttribI2uiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsProgramARB () - %s",
-               (_procs_GL_ARB_vertex_program.glIsProgramARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2uiv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI2uiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glIsProgramARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI2uiv);
 }
 
-/* Get GL_ARB_vertex_program functions */
-GdkGL_GL_ARB_vertex_program *
-gdk_gl_get_GL_ARB_vertex_program (void)
+/* glVertexAttribI3uiv */
+GdkGLProc
+gdk_gl_get_glVertexAttribI3uiv (void)
 {
-  static gint supported = -1;
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_3_0.glVertexAttribI3uiv == (GdkGLProc_glVertexAttribI3uiv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI3uiv =
+      (GdkGLProc_glVertexAttribI3uiv) gdk_gl_get_proc_address ("glVertexAttribI3uiv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribI3uiv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI3uiv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI3uiv);
+}
 
+/* glVertexAttribI4uiv */
+GdkGLProc
+gdk_gl_get_glVertexAttribI4uiv (void)
+{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_program");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glVertexAttrib1dARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1dvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1fARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1fvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1sARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1svARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2dARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2dvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2fARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2fvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2sARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2svARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3dARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3dvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3fARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3fvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3sARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3svARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4NbvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4NivARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4NsvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4NubARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4NubvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4NuivARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4NusvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4bvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4dARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4dvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4fARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4fvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4ivARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4sARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4svARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4ubvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4uivARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4usvARB () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribPointerARB () != NULL);
-          supported &= (gdk_gl_get_glEnableVertexAttribArrayARB () != NULL);
-          supported &= (gdk_gl_get_glDisableVertexAttribArrayARB () != NULL);
-          supported &= (gdk_gl_get_glProgramStringARB () != NULL);
-          supported &= (gdk_gl_get_glBindProgramARB () != NULL);
-          supported &= (gdk_gl_get_glDeleteProgramsARB () != NULL);
-          supported &= (gdk_gl_get_glGenProgramsARB () != NULL);
-          supported &= (gdk_gl_get_glProgramEnvParameter4dARB () != NULL);
-          supported &= (gdk_gl_get_glProgramEnvParameter4dvARB () != NULL);
-          supported &= (gdk_gl_get_glProgramEnvParameter4fARB () != NULL);
-          supported &= (gdk_gl_get_glProgramEnvParameter4fvARB () != NULL);
-          supported &= (gdk_gl_get_glProgramLocalParameter4dARB () != NULL);
-          supported &= (gdk_gl_get_glProgramLocalParameter4dvARB () != NULL);
-          supported &= (gdk_gl_get_glProgramLocalParameter4fARB () != NULL);
-          supported &= (gdk_gl_get_glProgramLocalParameter4fvARB () != NULL);
-          supported &= (gdk_gl_get_glGetProgramEnvParameterdvARB () != NULL);
-          supported &= (gdk_gl_get_glGetProgramEnvParameterfvARB () != NULL);
-          supported &= (gdk_gl_get_glGetProgramLocalParameterdvARB () != NULL);
-          supported &= (gdk_gl_get_glGetProgramLocalParameterfvARB () != NULL);
-          supported &= (gdk_gl_get_glGetProgramivARB () != NULL);
-          supported &= (gdk_gl_get_glGetProgramStringARB () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribdvARB () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribfvARB () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribivARB () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribPointervARB () != NULL);
-          supported &= (gdk_gl_get_glIsProgramARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4uiv == (GdkGLProc_glVertexAttribI4uiv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4uiv =
+      (GdkGLProc_glVertexAttribI4uiv) gdk_gl_get_proc_address ("glVertexAttribI4uiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_vertex_program () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4uiv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4uiv) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4uiv);
+}
+
+/* glVertexAttribI4bv */
+GdkGLProc
+gdk_gl_get_glVertexAttribI4bv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ARB_vertex_program;
-}
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4bv == (GdkGLProc_glVertexAttribI4bv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4bv =
+      (GdkGLProc_glVertexAttribI4bv) gdk_gl_get_proc_address ("glVertexAttribI4bv");
 
-/*
- * GL_ARB_vertex_buffer_object
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribI4bv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4bv) ? "supported" : "not supported"));
 
-static GdkGL_GL_ARB_vertex_buffer_object _procs_GL_ARB_vertex_buffer_object = {
-  (GdkGLProc_glBindBufferARB) -1,
-  (GdkGLProc_glDeleteBuffersARB) -1,
-  (GdkGLProc_glGenBuffersARB) -1,
-  (GdkGLProc_glIsBufferARB) -1,
-  (GdkGLProc_glBufferDataARB) -1,
-  (GdkGLProc_glBufferSubDataARB) -1,
-  (GdkGLProc_glGetBufferSubDataARB) -1,
-  (GdkGLProc_glMapBufferARB) -1,
-  (GdkGLProc_glUnmapBufferARB) -1,
-  (GdkGLProc_glGetBufferParameterivARB) -1,
-  (GdkGLProc_glGetBufferPointervARB) -1
-};
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4bv);
+}
 
-/* glBindBufferARB */
+/* glVertexAttribI4sv */
 GdkGLProc
-gdk_gl_get_glBindBufferARB (void)
+gdk_gl_get_glVertexAttribI4sv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glBindBufferARB == (GdkGLProc_glBindBufferARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glBindBufferARB =
-      (GdkGLProc_glBindBufferARB) gdk_gl_get_proc_address ("glBindBufferARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4sv == (GdkGLProc_glVertexAttribI4sv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4sv =
+      (GdkGLProc_glVertexAttribI4sv) gdk_gl_get_proc_address ("glVertexAttribI4sv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindBufferARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glBindBufferARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4sv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4sv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glBindBufferARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4sv);
 }
 
-/* glDeleteBuffersARB */
+/* glVertexAttribI4ubv */
 GdkGLProc
-gdk_gl_get_glDeleteBuffersARB (void)
+gdk_gl_get_glVertexAttribI4ubv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB == (GdkGLProc_glDeleteBuffersARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB =
-      (GdkGLProc_glDeleteBuffersARB) gdk_gl_get_proc_address ("glDeleteBuffersARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4ubv == (GdkGLProc_glVertexAttribI4ubv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4ubv =
+      (GdkGLProc_glVertexAttribI4ubv) gdk_gl_get_proc_address ("glVertexAttribI4ubv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteBuffersARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4ubv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4ubv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4ubv);
 }
 
-/* glGenBuffersARB */
+/* glVertexAttribI4usv */
 GdkGLProc
-gdk_gl_get_glGenBuffersARB (void)
+gdk_gl_get_glVertexAttribI4usv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glGenBuffersARB == (GdkGLProc_glGenBuffersARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glGenBuffersARB =
-      (GdkGLProc_glGenBuffersARB) gdk_gl_get_proc_address ("glGenBuffersARB");
+  if (_procs_GL_VERSION_3_0.glVertexAttribI4usv == (GdkGLProc_glVertexAttribI4usv) -1)
+    _procs_GL_VERSION_3_0.glVertexAttribI4usv =
+      (GdkGLProc_glVertexAttribI4usv) gdk_gl_get_proc_address ("glVertexAttribI4usv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenBuffersARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glGenBuffersARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4usv () - %s",
+               (_procs_GL_VERSION_3_0.glVertexAttribI4usv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGenBuffersARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glVertexAttribI4usv);
 }
 
-/* glIsBufferARB */
+/* glGetUniformuiv */
 GdkGLProc
-gdk_gl_get_glIsBufferARB (void)
+gdk_gl_get_glGetUniformuiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glIsBufferARB == (GdkGLProc_glIsBufferARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glIsBufferARB =
-      (GdkGLProc_glIsBufferARB) gdk_gl_get_proc_address ("glIsBufferARB");
+  if (_procs_GL_VERSION_3_0.glGetUniformuiv == (GdkGLProc_glGetUniformuiv) -1)
+    _procs_GL_VERSION_3_0.glGetUniformuiv =
+      (GdkGLProc_glGetUniformuiv) gdk_gl_get_proc_address ("glGetUniformuiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsBufferARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glIsBufferARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetUniformuiv () - %s",
+               (_procs_GL_VERSION_3_0.glGetUniformuiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glIsBufferARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetUniformuiv);
 }
 
-/* glBufferDataARB */
+/* glBindFragDataLocation */
 GdkGLProc
-gdk_gl_get_glBufferDataARB (void)
+gdk_gl_get_glBindFragDataLocation (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glBufferDataARB == (GdkGLProc_glBufferDataARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glBufferDataARB =
-      (GdkGLProc_glBufferDataARB) gdk_gl_get_proc_address ("glBufferDataARB");
+  if (_procs_GL_VERSION_3_0.glBindFragDataLocation == (GdkGLProc_glBindFragDataLocation) -1)
+    _procs_GL_VERSION_3_0.glBindFragDataLocation =
+      (GdkGLProc_glBindFragDataLocation) gdk_gl_get_proc_address ("glBindFragDataLocation");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBufferDataARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glBufferDataARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindFragDataLocation () - %s",
+               (_procs_GL_VERSION_3_0.glBindFragDataLocation) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glBufferDataARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glBindFragDataLocation);
 }
 
-/* glBufferSubDataARB */
+/* glGetFragDataLocation */
 GdkGLProc
-gdk_gl_get_glBufferSubDataARB (void)
+gdk_gl_get_glGetFragDataLocation (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB == (GdkGLProc_glBufferSubDataARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB =
-      (GdkGLProc_glBufferSubDataARB) gdk_gl_get_proc_address ("glBufferSubDataARB");
+  if (_procs_GL_VERSION_3_0.glGetFragDataLocation == (GdkGLProc_glGetFragDataLocation) -1)
+    _procs_GL_VERSION_3_0.glGetFragDataLocation =
+      (GdkGLProc_glGetFragDataLocation) gdk_gl_get_proc_address ("glGetFragDataLocation");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBufferSubDataARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetFragDataLocation () - %s",
+               (_procs_GL_VERSION_3_0.glGetFragDataLocation) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetFragDataLocation);
 }
 
-/* glGetBufferSubDataARB */
+/* glUniform1ui */
 GdkGLProc
-gdk_gl_get_glGetBufferSubDataARB (void)
+gdk_gl_get_glUniform1ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB == (GdkGLProc_glGetBufferSubDataARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB =
-      (GdkGLProc_glGetBufferSubDataARB) gdk_gl_get_proc_address ("glGetBufferSubDataARB");
+  if (_procs_GL_VERSION_3_0.glUniform1ui == (GdkGLProc_glUniform1ui) -1)
+    _procs_GL_VERSION_3_0.glUniform1ui =
+      (GdkGLProc_glUniform1ui) gdk_gl_get_proc_address ("glUniform1ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetBufferSubDataARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform1ui () - %s",
+               (_procs_GL_VERSION_3_0.glUniform1ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform1ui);
 }
 
-/* glMapBufferARB */
+/* glUniform2ui */
 GdkGLProc
-gdk_gl_get_glMapBufferARB (void)
+gdk_gl_get_glUniform2ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glMapBufferARB == (GdkGLProc_glMapBufferARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glMapBufferARB =
-      (GdkGLProc_glMapBufferARB) gdk_gl_get_proc_address ("glMapBufferARB");
+  if (_procs_GL_VERSION_3_0.glUniform2ui == (GdkGLProc_glUniform2ui) -1)
+    _procs_GL_VERSION_3_0.glUniform2ui =
+      (GdkGLProc_glUniform2ui) gdk_gl_get_proc_address ("glUniform2ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapBufferARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glMapBufferARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2ui () - %s",
+               (_procs_GL_VERSION_3_0.glUniform2ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glMapBufferARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform2ui);
 }
 
-/* glUnmapBufferARB */
+/* glUniform3ui */
 GdkGLProc
-gdk_gl_get_glUnmapBufferARB (void)
+gdk_gl_get_glUniform3ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB == (GdkGLProc_glUnmapBufferARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB =
-      (GdkGLProc_glUnmapBufferARB) gdk_gl_get_proc_address ("glUnmapBufferARB");
+  if (_procs_GL_VERSION_3_0.glUniform3ui == (GdkGLProc_glUniform3ui) -1)
+    _procs_GL_VERSION_3_0.glUniform3ui =
+      (GdkGLProc_glUniform3ui) gdk_gl_get_proc_address ("glUniform3ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glUnmapBufferARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform3ui () - %s",
+               (_procs_GL_VERSION_3_0.glUniform3ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform3ui);
 }
 
-/* glGetBufferParameterivARB */
+/* glUniform4ui */
 GdkGLProc
-gdk_gl_get_glGetBufferParameterivARB (void)
+gdk_gl_get_glUniform4ui (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB == (GdkGLProc_glGetBufferParameterivARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB =
-      (GdkGLProc_glGetBufferParameterivARB) gdk_gl_get_proc_address ("glGetBufferParameterivARB");
+  if (_procs_GL_VERSION_3_0.glUniform4ui == (GdkGLProc_glUniform4ui) -1)
+    _procs_GL_VERSION_3_0.glUniform4ui =
+      (GdkGLProc_glUniform4ui) gdk_gl_get_proc_address ("glUniform4ui");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetBufferParameterivARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4ui () - %s",
+               (_procs_GL_VERSION_3_0.glUniform4ui) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform4ui);
 }
 
-/* glGetBufferPointervARB */
+/* glUniform1uiv */
 GdkGLProc
-gdk_gl_get_glGetBufferPointervARB (void)
+gdk_gl_get_glUniform1uiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB == (GdkGLProc_glGetBufferPointervARB) -1)
-    _procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB =
-      (GdkGLProc_glGetBufferPointervARB) gdk_gl_get_proc_address ("glGetBufferPointervARB");
+  if (_procs_GL_VERSION_3_0.glUniform1uiv == (GdkGLProc_glUniform1uiv) -1)
+    _procs_GL_VERSION_3_0.glUniform1uiv =
+      (GdkGLProc_glUniform1uiv) gdk_gl_get_proc_address ("glUniform1uiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetBufferPointervARB () - %s",
-               (_procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform1uiv () - %s",
+               (_procs_GL_VERSION_3_0.glUniform1uiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform1uiv);
 }
 
-/* Get GL_ARB_vertex_buffer_object functions */
-GdkGL_GL_ARB_vertex_buffer_object *
-gdk_gl_get_GL_ARB_vertex_buffer_object (void)
+/* glUniform2uiv */
+GdkGLProc
+gdk_gl_get_glUniform2uiv (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_buffer_object");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glBindBufferARB () != NULL);
-          supported &= (gdk_gl_get_glDeleteBuffersARB () != NULL);
-          supported &= (gdk_gl_get_glGenBuffersARB () != NULL);
-          supported &= (gdk_gl_get_glIsBufferARB () != NULL);
-          supported &= (gdk_gl_get_glBufferDataARB () != NULL);
-          supported &= (gdk_gl_get_glBufferSubDataARB () != NULL);
-          supported &= (gdk_gl_get_glGetBufferSubDataARB () != NULL);
-          supported &= (gdk_gl_get_glMapBufferARB () != NULL);
-          supported &= (gdk_gl_get_glUnmapBufferARB () != NULL);
-          supported &= (gdk_gl_get_glGetBufferParameterivARB () != NULL);
-          supported &= (gdk_gl_get_glGetBufferPointervARB () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_3_0.glUniform2uiv == (GdkGLProc_glUniform2uiv) -1)
+    _procs_GL_VERSION_3_0.glUniform2uiv =
+      (GdkGLProc_glUniform2uiv) gdk_gl_get_proc_address ("glUniform2uiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ARB_vertex_buffer_object () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2uiv () - %s",
+               (_procs_GL_VERSION_3_0.glUniform2uiv) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform2uiv);
+}
+
+/* glUniform3uiv */
+GdkGLProc
+gdk_gl_get_glUniform3uiv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ARB_vertex_buffer_object;
-}
+  if (_procs_GL_VERSION_3_0.glUniform3uiv == (GdkGLProc_glUniform3uiv) -1)
+    _procs_GL_VERSION_3_0.glUniform3uiv =
+      (GdkGLProc_glUniform3uiv) gdk_gl_get_proc_address ("glUniform3uiv");
 
-/*
- * GL_EXT_blend_color
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform3uiv () - %s",
+               (_procs_GL_VERSION_3_0.glUniform3uiv) ? "supported" : "not supported"));
 
-static GdkGL_GL_EXT_blend_color _procs_GL_EXT_blend_color = {
-  (GdkGLProc_glBlendColorEXT) -1
-};
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform3uiv);
+}
 
-/* glBlendColorEXT */
+/* glUniform4uiv */
 GdkGLProc
-gdk_gl_get_glBlendColorEXT (void)
+gdk_gl_get_glUniform4uiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_blend_color.glBlendColorEXT == (GdkGLProc_glBlendColorEXT) -1)
-    _procs_GL_EXT_blend_color.glBlendColorEXT =
-      (GdkGLProc_glBlendColorEXT) gdk_gl_get_proc_address ("glBlendColorEXT");
+  if (_procs_GL_VERSION_3_0.glUniform4uiv == (GdkGLProc_glUniform4uiv) -1)
+    _procs_GL_VERSION_3_0.glUniform4uiv =
+      (GdkGLProc_glUniform4uiv) gdk_gl_get_proc_address ("glUniform4uiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBlendColorEXT () - %s",
-               (_procs_GL_EXT_blend_color.glBlendColorEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4uiv () - %s",
+               (_procs_GL_VERSION_3_0.glUniform4uiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_blend_color.glBlendColorEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glUniform4uiv);
 }
 
-/* Get GL_EXT_blend_color functions */
-GdkGL_GL_EXT_blend_color *
-gdk_gl_get_GL_EXT_blend_color (void)
+/* glTexParameterIiv */
+GdkGLProc
+gdk_gl_get_glTexParameterIiv (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_blend_color");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glBlendColorEXT () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_3_0.glTexParameterIiv == (GdkGLProc_glTexParameterIiv) -1)
+    _procs_GL_VERSION_3_0.glTexParameterIiv =
+      (GdkGLProc_glTexParameterIiv) gdk_gl_get_proc_address ("glTexParameterIiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_blend_color () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glTexParameterIiv () - %s",
+               (_procs_GL_VERSION_3_0.glTexParameterIiv) ? "supported" : "not supported"));
 
-  return &_procs_GL_EXT_blend_color;
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glTexParameterIiv);
 }
 
-/*
- * GL_EXT_polygon_offset
- */
-
-static GdkGL_GL_EXT_polygon_offset _procs_GL_EXT_polygon_offset = {
-  (GdkGLProc_glPolygonOffsetEXT) -1
-};
-
-/* glPolygonOffsetEXT */
+/* glTexParameterIuiv */
 GdkGLProc
-gdk_gl_get_glPolygonOffsetEXT (void)
+gdk_gl_get_glTexParameterIuiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_polygon_offset.glPolygonOffsetEXT == (GdkGLProc_glPolygonOffsetEXT) -1)
-    _procs_GL_EXT_polygon_offset.glPolygonOffsetEXT =
-      (GdkGLProc_glPolygonOffsetEXT) gdk_gl_get_proc_address ("glPolygonOffsetEXT");
+  if (_procs_GL_VERSION_3_0.glTexParameterIuiv == (GdkGLProc_glTexParameterIuiv) -1)
+    _procs_GL_VERSION_3_0.glTexParameterIuiv =
+      (GdkGLProc_glTexParameterIuiv) gdk_gl_get_proc_address ("glTexParameterIuiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPolygonOffsetEXT () - %s",
-               (_procs_GL_EXT_polygon_offset.glPolygonOffsetEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexParameterIuiv () - %s",
+               (_procs_GL_VERSION_3_0.glTexParameterIuiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_polygon_offset.glPolygonOffsetEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glTexParameterIuiv);
 }
 
-/* Get GL_EXT_polygon_offset functions */
-GdkGL_GL_EXT_polygon_offset *
-gdk_gl_get_GL_EXT_polygon_offset (void)
+/* glGetTexParameterIiv */
+GdkGLProc
+gdk_gl_get_glGetTexParameterIiv (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_polygon_offset");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glPolygonOffsetEXT () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_3_0.glGetTexParameterIiv == (GdkGLProc_glGetTexParameterIiv) -1)
+    _procs_GL_VERSION_3_0.glGetTexParameterIiv =
+      (GdkGLProc_glGetTexParameterIiv) gdk_gl_get_proc_address ("glGetTexParameterIiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_polygon_offset () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTexParameterIiv () - %s",
+               (_procs_GL_VERSION_3_0.glGetTexParameterIiv) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_polygon_offset;
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetTexParameterIiv);
 }
 
-/*
- * GL_EXT_texture3D
- */
-
-static GdkGL_GL_EXT_texture3D _procs_GL_EXT_texture3D = {
-  (GdkGLProc_glTexImage3DEXT) -1,
-  (GdkGLProc_glTexSubImage3DEXT) -1
-};
-
-/* glTexImage3DEXT */
+/* glGetTexParameterIuiv */
 GdkGLProc
-gdk_gl_get_glTexImage3DEXT (void)
+gdk_gl_get_glGetTexParameterIuiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_texture3D.glTexImage3DEXT == (GdkGLProc_glTexImage3DEXT) -1)
-    _procs_GL_EXT_texture3D.glTexImage3DEXT =
-      (GdkGLProc_glTexImage3DEXT) gdk_gl_get_proc_address ("glTexImage3DEXT");
+  if (_procs_GL_VERSION_3_0.glGetTexParameterIuiv == (GdkGLProc_glGetTexParameterIuiv) -1)
+    _procs_GL_VERSION_3_0.glGetTexParameterIuiv =
+      (GdkGLProc_glGetTexParameterIuiv) gdk_gl_get_proc_address ("glGetTexParameterIuiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexImage3DEXT () - %s",
-               (_procs_GL_EXT_texture3D.glTexImage3DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTexParameterIuiv () - %s",
+               (_procs_GL_VERSION_3_0.glGetTexParameterIuiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_texture3D.glTexImage3DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetTexParameterIuiv);
 }
 
-/* glTexSubImage3DEXT */
+/* glClearBufferiv */
 GdkGLProc
-gdk_gl_get_glTexSubImage3DEXT (void)
+gdk_gl_get_glClearBufferiv (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_texture3D.glTexSubImage3DEXT == (GdkGLProc_glTexSubImage3DEXT) -1)
-    _procs_GL_EXT_texture3D.glTexSubImage3DEXT =
-      (GdkGLProc_glTexSubImage3DEXT) gdk_gl_get_proc_address ("glTexSubImage3DEXT");
+  if (_procs_GL_VERSION_3_0.glClearBufferiv == (GdkGLProc_glClearBufferiv) -1)
+    _procs_GL_VERSION_3_0.glClearBufferiv =
+      (GdkGLProc_glClearBufferiv) gdk_gl_get_proc_address ("glClearBufferiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexSubImage3DEXT () - %s",
-               (_procs_GL_EXT_texture3D.glTexSubImage3DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClearBufferiv () - %s",
+               (_procs_GL_VERSION_3_0.glClearBufferiv) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_texture3D.glTexSubImage3DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glClearBufferiv);
 }
 
-/* Get GL_EXT_texture3D functions */
-GdkGL_GL_EXT_texture3D *
-gdk_gl_get_GL_EXT_texture3D (void)
+/* glClearBufferuiv */
+GdkGLProc
+gdk_gl_get_glClearBufferuiv (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_texture3D");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTexImage3DEXT () != NULL);
-          supported &= (gdk_gl_get_glTexSubImage3DEXT () != NULL);
-        }
-    }
+  if (_procs_GL_VERSION_3_0.glClearBufferuiv == (GdkGLProc_glClearBufferuiv) -1)
+    _procs_GL_VERSION_3_0.glClearBufferuiv =
+      (GdkGLProc_glClearBufferuiv) gdk_gl_get_proc_address ("glClearBufferuiv");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_texture3D () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClearBufferuiv () - %s",
+               (_procs_GL_VERSION_3_0.glClearBufferuiv) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glClearBufferuiv);
+}
+
+/* glClearBufferfv */
+GdkGLProc
+gdk_gl_get_glClearBufferfv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_EXT_texture3D;
-}
+  if (_procs_GL_VERSION_3_0.glClearBufferfv == (GdkGLProc_glClearBufferfv) -1)
+    _procs_GL_VERSION_3_0.glClearBufferfv =
+      (GdkGLProc_glClearBufferfv) gdk_gl_get_proc_address ("glClearBufferfv");
 
-/*
- * GL_SGIS_texture_filter4
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glClearBufferfv () - %s",
+               (_procs_GL_VERSION_3_0.glClearBufferfv) ? "supported" : "not supported"));
 
-static GdkGL_GL_SGIS_texture_filter4 _procs_GL_SGIS_texture_filter4 = {
-  (GdkGLProc_glGetTexFilterFuncSGIS) -1,
-  (GdkGLProc_glTexFilterFuncSGIS) -1
-};
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glClearBufferfv);
+}
 
-/* glGetTexFilterFuncSGIS */
+/* glClearBufferfi */
 GdkGLProc
-gdk_gl_get_glGetTexFilterFuncSGIS (void)
+gdk_gl_get_glClearBufferfi (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS == (GdkGLProc_glGetTexFilterFuncSGIS) -1)
-    _procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS =
-      (GdkGLProc_glGetTexFilterFuncSGIS) gdk_gl_get_proc_address ("glGetTexFilterFuncSGIS");
+  if (_procs_GL_VERSION_3_0.glClearBufferfi == (GdkGLProc_glClearBufferfi) -1)
+    _procs_GL_VERSION_3_0.glClearBufferfi =
+      (GdkGLProc_glClearBufferfi) gdk_gl_get_proc_address ("glClearBufferfi");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetTexFilterFuncSGIS () - %s",
-               (_procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClearBufferfi () - %s",
+               (_procs_GL_VERSION_3_0.glClearBufferfi) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glClearBufferfi);
 }
 
-/* glTexFilterFuncSGIS */
+/* glGetStringi */
 GdkGLProc
-gdk_gl_get_glTexFilterFuncSGIS (void)
+gdk_gl_get_glGetStringi (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS == (GdkGLProc_glTexFilterFuncSGIS) -1)
-    _procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS =
-      (GdkGLProc_glTexFilterFuncSGIS) gdk_gl_get_proc_address ("glTexFilterFuncSGIS");
+  if (_procs_GL_VERSION_3_0.glGetStringi == (GdkGLProc_glGetStringi) -1)
+    _procs_GL_VERSION_3_0.glGetStringi =
+      (GdkGLProc_glGetStringi) gdk_gl_get_proc_address ("glGetStringi");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexFilterFuncSGIS () - %s",
-               (_procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetStringi () - %s",
+               (_procs_GL_VERSION_3_0.glGetStringi) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS);
+  return (GdkGLProc) (_procs_GL_VERSION_3_0.glGetStringi);
 }
 
-/* Get GL_SGIS_texture_filter4 functions */
-GdkGL_GL_SGIS_texture_filter4 *
-gdk_gl_get_GL_SGIS_texture_filter4 (void)
+/* Get GL_VERSION_3_0 functions */
+GdkGL_GL_VERSION_3_0 *
+gdk_gl_get_GL_VERSION_3_0 (void)
 {
   static gint supported = -1;
 
@@ -6326,73 +6359,162 @@ gdk_gl_get_GL_SGIS_texture_filter4 (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_texture_filter4");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glGetTexFilterFuncSGIS () != NULL);
-          supported &= (gdk_gl_get_glTexFilterFuncSGIS () != NULL);
-        }
+      supported =  (gdk_gl_get_glColorMaski () != NULL);
+      supported &= (gdk_gl_get_glGetBooleani_v () != NULL);
+      supported &= (gdk_gl_get_glGetIntegeri_v () != NULL);
+      supported &= (gdk_gl_get_glEnablei () != NULL);
+      supported &= (gdk_gl_get_glDisablei () != NULL);
+      supported &= (gdk_gl_get_glIsEnabledi () != NULL);
+      supported &= (gdk_gl_get_glBeginTransformFeedback () != NULL);
+      supported &= (gdk_gl_get_glEndTransformFeedback () != NULL);
+      supported &= (gdk_gl_get_glBindBufferRange () != NULL);
+      supported &= (gdk_gl_get_glBindBufferBase () != NULL);
+      supported &= (gdk_gl_get_glTransformFeedbackVaryings () != NULL);
+      supported &= (gdk_gl_get_glGetTransformFeedbackVarying () != NULL);
+      supported &= (gdk_gl_get_glClampColor () != NULL);
+      supported &= (gdk_gl_get_glBeginConditionalRender () != NULL);
+      supported &= (gdk_gl_get_glEndConditionalRender () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribIPointer () != NULL);
+      supported &= (gdk_gl_get_glGetVertexAttribIiv () != NULL);
+      supported &= (gdk_gl_get_glGetVertexAttribIuiv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI1i () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI2i () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI3i () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4i () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI1ui () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI2ui () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI3ui () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4ui () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI1iv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI2iv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI3iv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4iv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI1uiv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI2uiv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI3uiv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4uiv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4bv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4sv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4ubv () != NULL);
+      supported &= (gdk_gl_get_glVertexAttribI4usv () != NULL);
+      supported &= (gdk_gl_get_glGetUniformuiv () != NULL);
+      supported &= (gdk_gl_get_glBindFragDataLocation () != NULL);
+      supported &= (gdk_gl_get_glGetFragDataLocation () != NULL);
+      supported &= (gdk_gl_get_glUniform1ui () != NULL);
+      supported &= (gdk_gl_get_glUniform2ui () != NULL);
+      supported &= (gdk_gl_get_glUniform3ui () != NULL);
+      supported &= (gdk_gl_get_glUniform4ui () != NULL);
+      supported &= (gdk_gl_get_glUniform1uiv () != NULL);
+      supported &= (gdk_gl_get_glUniform2uiv () != NULL);
+      supported &= (gdk_gl_get_glUniform3uiv () != NULL);
+      supported &= (gdk_gl_get_glUniform4uiv () != NULL);
+      supported &= (gdk_gl_get_glTexParameterIiv () != NULL);
+      supported &= (gdk_gl_get_glTexParameterIuiv () != NULL);
+      supported &= (gdk_gl_get_glGetTexParameterIiv () != NULL);
+      supported &= (gdk_gl_get_glGetTexParameterIuiv () != NULL);
+      supported &= (gdk_gl_get_glClearBufferiv () != NULL);
+      supported &= (gdk_gl_get_glClearBufferuiv () != NULL);
+      supported &= (gdk_gl_get_glClearBufferfv () != NULL);
+      supported &= (gdk_gl_get_glClearBufferfi () != NULL);
+      supported &= (gdk_gl_get_glGetStringi () != NULL);
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_texture_filter4 () - %s",
+    g_message (" - gdk_gl_get_GL_VERSION_3_0 () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_SGIS_texture_filter4;
+  return &_procs_GL_VERSION_3_0;
 }
 
 /*
- * GL_EXT_subtexture
+ * GL_VERSION_3_1
  */
 
-static GdkGL_GL_EXT_subtexture _procs_GL_EXT_subtexture = {
-  (GdkGLProc_glTexSubImage1DEXT) -1,
-  (GdkGLProc_glTexSubImage2DEXT) -1
+static GdkGL_GL_VERSION_3_1 _procs_GL_VERSION_3_1 = {
+  (GdkGLProc_glDrawArraysInstanced) -1,
+  (GdkGLProc_glDrawElementsInstanced) -1,
+  (GdkGLProc_glTexBuffer) -1,
+  (GdkGLProc_glPrimitiveRestartIndex) -1
 };
 
-/* glTexSubImage1DEXT */
+/* glDrawArraysInstanced */
 GdkGLProc
-gdk_gl_get_glTexSubImage1DEXT (void)
+gdk_gl_get_glDrawArraysInstanced (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_subtexture.glTexSubImage1DEXT == (GdkGLProc_glTexSubImage1DEXT) -1)
-    _procs_GL_EXT_subtexture.glTexSubImage1DEXT =
-      (GdkGLProc_glTexSubImage1DEXT) gdk_gl_get_proc_address ("glTexSubImage1DEXT");
+  if (_procs_GL_VERSION_3_1.glDrawArraysInstanced == (GdkGLProc_glDrawArraysInstanced) -1)
+    _procs_GL_VERSION_3_1.glDrawArraysInstanced =
+      (GdkGLProc_glDrawArraysInstanced) gdk_gl_get_proc_address ("glDrawArraysInstanced");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexSubImage1DEXT () - %s",
-               (_procs_GL_EXT_subtexture.glTexSubImage1DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawArraysInstanced () - %s",
+               (_procs_GL_VERSION_3_1.glDrawArraysInstanced) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_subtexture.glTexSubImage1DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_1.glDrawArraysInstanced);
 }
 
-/* glTexSubImage2DEXT */
+/* glDrawElementsInstanced */
 GdkGLProc
-gdk_gl_get_glTexSubImage2DEXT (void)
+gdk_gl_get_glDrawElementsInstanced (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_subtexture.glTexSubImage2DEXT == (GdkGLProc_glTexSubImage2DEXT) -1)
-    _procs_GL_EXT_subtexture.glTexSubImage2DEXT =
-      (GdkGLProc_glTexSubImage2DEXT) gdk_gl_get_proc_address ("glTexSubImage2DEXT");
+  if (_procs_GL_VERSION_3_1.glDrawElementsInstanced == (GdkGLProc_glDrawElementsInstanced) -1)
+    _procs_GL_VERSION_3_1.glDrawElementsInstanced =
+      (GdkGLProc_glDrawElementsInstanced) gdk_gl_get_proc_address ("glDrawElementsInstanced");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexSubImage2DEXT () - %s",
-               (_procs_GL_EXT_subtexture.glTexSubImage2DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawElementsInstanced () - %s",
+               (_procs_GL_VERSION_3_1.glDrawElementsInstanced) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_subtexture.glTexSubImage2DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_1.glDrawElementsInstanced);
 }
 
-/* Get GL_EXT_subtexture functions */
-GdkGL_GL_EXT_subtexture *
-gdk_gl_get_GL_EXT_subtexture (void)
+/* glTexBuffer */
+GdkGLProc
+gdk_gl_get_glTexBuffer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_3_1.glTexBuffer == (GdkGLProc_glTexBuffer) -1)
+    _procs_GL_VERSION_3_1.glTexBuffer =
+      (GdkGLProc_glTexBuffer) gdk_gl_get_proc_address ("glTexBuffer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexBuffer () - %s",
+               (_procs_GL_VERSION_3_1.glTexBuffer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_3_1.glTexBuffer);
+}
+
+/* glPrimitiveRestartIndex */
+GdkGLProc
+gdk_gl_get_glPrimitiveRestartIndex (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_VERSION_3_1.glPrimitiveRestartIndex == (GdkGLProc_glPrimitiveRestartIndex) -1)
+    _procs_GL_VERSION_3_1.glPrimitiveRestartIndex =
+      (GdkGLProc_glPrimitiveRestartIndex) gdk_gl_get_proc_address ("glPrimitiveRestartIndex");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPrimitiveRestartIndex () - %s",
+               (_procs_GL_VERSION_3_1.glPrimitiveRestartIndex) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_VERSION_3_1.glPrimitiveRestartIndex);
+}
+
+/* Get GL_VERSION_3_1 functions */
+GdkGL_GL_VERSION_3_1 *
+gdk_gl_get_GL_VERSION_3_1 (void)
 {
   static gint supported = -1;
 
@@ -6401,130 +6523,127 @@ gdk_gl_get_GL_EXT_subtexture (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_subtexture");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTexSubImage1DEXT () != NULL);
-          supported &= (gdk_gl_get_glTexSubImage2DEXT () != NULL);
-        }
+      supported =  (gdk_gl_get_glDrawArraysInstanced () != NULL);
+      supported &= (gdk_gl_get_glDrawElementsInstanced () != NULL);
+      supported &= (gdk_gl_get_glTexBuffer () != NULL);
+      supported &= (gdk_gl_get_glPrimitiveRestartIndex () != NULL);
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_subtexture () - %s",
+    g_message (" - gdk_gl_get_GL_VERSION_3_1 () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_subtexture;
+  return &_procs_GL_VERSION_3_1;
 }
 
 /*
- * GL_EXT_copy_texture
+ * GL_VERSION_3_2
  */
 
-static GdkGL_GL_EXT_copy_texture _procs_GL_EXT_copy_texture = {
-  (GdkGLProc_glCopyTexImage1DEXT) -1,
-  (GdkGLProc_glCopyTexImage2DEXT) -1,
-  (GdkGLProc_glCopyTexSubImage1DEXT) -1,
-  (GdkGLProc_glCopyTexSubImage2DEXT) -1,
-  (GdkGLProc_glCopyTexSubImage3DEXT) -1
+static GdkGL_GL_VERSION_3_2 _procs_GL_VERSION_3_2 = {
+  (GdkGLProc_glGetInteger64i_v) -1,
+  (GdkGLProc_glGetBufferParameteri64v) -1,
+  (GdkGLProc_glProgramParameteri) -1,
+  (GdkGLProc_glFramebufferTexture) -1,
+  (GdkGLProc_glFramebufferTextureFace) -1
 };
 
-/* glCopyTexImage1DEXT */
+/* glGetInteger64i_v */
 GdkGLProc
-gdk_gl_get_glCopyTexImage1DEXT (void)
+gdk_gl_get_glGetInteger64i_v (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_copy_texture.glCopyTexImage1DEXT == (GdkGLProc_glCopyTexImage1DEXT) -1)
-    _procs_GL_EXT_copy_texture.glCopyTexImage1DEXT =
-      (GdkGLProc_glCopyTexImage1DEXT) gdk_gl_get_proc_address ("glCopyTexImage1DEXT");
+  if (_procs_GL_VERSION_3_2.glGetInteger64i_v == (GdkGLProc_glGetInteger64i_v) -1)
+    _procs_GL_VERSION_3_2.glGetInteger64i_v =
+      (GdkGLProc_glGetInteger64i_v) gdk_gl_get_proc_address ("glGetInteger64i_v");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyTexImage1DEXT () - %s",
-               (_procs_GL_EXT_copy_texture.glCopyTexImage1DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetInteger64i_v () - %s",
+               (_procs_GL_VERSION_3_2.glGetInteger64i_v) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexImage1DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_2.glGetInteger64i_v);
 }
 
-/* glCopyTexImage2DEXT */
+/* glGetBufferParameteri64v */
 GdkGLProc
-gdk_gl_get_glCopyTexImage2DEXT (void)
+gdk_gl_get_glGetBufferParameteri64v (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_copy_texture.glCopyTexImage2DEXT == (GdkGLProc_glCopyTexImage2DEXT) -1)
-    _procs_GL_EXT_copy_texture.glCopyTexImage2DEXT =
-      (GdkGLProc_glCopyTexImage2DEXT) gdk_gl_get_proc_address ("glCopyTexImage2DEXT");
+  if (_procs_GL_VERSION_3_2.glGetBufferParameteri64v == (GdkGLProc_glGetBufferParameteri64v) -1)
+    _procs_GL_VERSION_3_2.glGetBufferParameteri64v =
+      (GdkGLProc_glGetBufferParameteri64v) gdk_gl_get_proc_address ("glGetBufferParameteri64v");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyTexImage2DEXT () - %s",
-               (_procs_GL_EXT_copy_texture.glCopyTexImage2DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetBufferParameteri64v () - %s",
+               (_procs_GL_VERSION_3_2.glGetBufferParameteri64v) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexImage2DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_2.glGetBufferParameteri64v);
 }
 
-/* glCopyTexSubImage1DEXT */
+/* glProgramParameteri */
 GdkGLProc
-gdk_gl_get_glCopyTexSubImage1DEXT (void)
+gdk_gl_get_glProgramParameteri (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT == (GdkGLProc_glCopyTexSubImage1DEXT) -1)
-    _procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT =
-      (GdkGLProc_glCopyTexSubImage1DEXT) gdk_gl_get_proc_address ("glCopyTexSubImage1DEXT");
+  if (_procs_GL_VERSION_3_2.glProgramParameteri == (GdkGLProc_glProgramParameteri) -1)
+    _procs_GL_VERSION_3_2.glProgramParameteri =
+      (GdkGLProc_glProgramParameteri) gdk_gl_get_proc_address ("glProgramParameteri");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyTexSubImage1DEXT () - %s",
-               (_procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramParameteri () - %s",
+               (_procs_GL_VERSION_3_2.glProgramParameteri) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_2.glProgramParameteri);
 }
 
-/* glCopyTexSubImage2DEXT */
+/* glFramebufferTexture */
 GdkGLProc
-gdk_gl_get_glCopyTexSubImage2DEXT (void)
+gdk_gl_get_glFramebufferTexture (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT == (GdkGLProc_glCopyTexSubImage2DEXT) -1)
-    _procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT =
-      (GdkGLProc_glCopyTexSubImage2DEXT) gdk_gl_get_proc_address ("glCopyTexSubImage2DEXT");
+  if (_procs_GL_VERSION_3_2.glFramebufferTexture == (GdkGLProc_glFramebufferTexture) -1)
+    _procs_GL_VERSION_3_2.glFramebufferTexture =
+      (GdkGLProc_glFramebufferTexture) gdk_gl_get_proc_address ("glFramebufferTexture");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyTexSubImage2DEXT () - %s",
-               (_procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferTexture () - %s",
+               (_procs_GL_VERSION_3_2.glFramebufferTexture) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_2.glFramebufferTexture);
 }
 
-/* glCopyTexSubImage3DEXT */
+/* glFramebufferTextureFace */
 GdkGLProc
-gdk_gl_get_glCopyTexSubImage3DEXT (void)
+gdk_gl_get_glFramebufferTextureFace (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT == (GdkGLProc_glCopyTexSubImage3DEXT) -1)
-    _procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT =
-      (GdkGLProc_glCopyTexSubImage3DEXT) gdk_gl_get_proc_address ("glCopyTexSubImage3DEXT");
+  if (_procs_GL_VERSION_3_2.glFramebufferTextureFace == (GdkGLProc_glFramebufferTextureFace) -1)
+    _procs_GL_VERSION_3_2.glFramebufferTextureFace =
+      (GdkGLProc_glFramebufferTextureFace) gdk_gl_get_proc_address ("glFramebufferTextureFace");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyTexSubImage3DEXT () - %s",
-               (_procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferTextureFace () - %s",
+               (_procs_GL_VERSION_3_2.glFramebufferTextureFace) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT);
+  return (GdkGLProc) (_procs_GL_VERSION_3_2.glFramebufferTextureFace);
 }
 
-/* Get GL_EXT_copy_texture functions */
-GdkGL_GL_EXT_copy_texture *
-gdk_gl_get_GL_EXT_copy_texture (void)
+/* Get GL_VERSION_3_2 functions */
+GdkGL_GL_VERSION_3_2 *
+gdk_gl_get_GL_VERSION_3_2 (void)
 {
   static gint supported = -1;
 
@@ -6533,701 +6652,679 @@ gdk_gl_get_GL_EXT_copy_texture (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_copy_texture");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glCopyTexImage1DEXT () != NULL);
-          supported &= (gdk_gl_get_glCopyTexImage2DEXT () != NULL);
-          supported &= (gdk_gl_get_glCopyTexSubImage1DEXT () != NULL);
-          supported &= (gdk_gl_get_glCopyTexSubImage2DEXT () != NULL);
-          supported &= (gdk_gl_get_glCopyTexSubImage3DEXT () != NULL);
-        }
+      supported =  (gdk_gl_get_glGetInteger64i_v () != NULL);
+      supported &= (gdk_gl_get_glGetBufferParameteri64v () != NULL);
+      supported &= (gdk_gl_get_glProgramParameteri () != NULL);
+      supported &= (gdk_gl_get_glFramebufferTexture () != NULL);
+      supported &= (gdk_gl_get_glFramebufferTextureFace () != NULL);
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_copy_texture () - %s",
+    g_message (" - gdk_gl_get_GL_VERSION_3_2 () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_copy_texture;
+  return &_procs_GL_VERSION_3_2;
 }
 
 /*
- * GL_EXT_histogram
+ * GL_ARB_multitexture
  */
 
-static GdkGL_GL_EXT_histogram _procs_GL_EXT_histogram = {
-  (GdkGLProc_glGetHistogramEXT) -1,
-  (GdkGLProc_glGetHistogramParameterfvEXT) -1,
-  (GdkGLProc_glGetHistogramParameterivEXT) -1,
-  (GdkGLProc_glGetMinmaxEXT) -1,
-  (GdkGLProc_glGetMinmaxParameterfvEXT) -1,
-  (GdkGLProc_glGetMinmaxParameterivEXT) -1,
-  (GdkGLProc_glHistogramEXT) -1,
-  (GdkGLProc_glMinmaxEXT) -1,
-  (GdkGLProc_glResetHistogramEXT) -1,
-  (GdkGLProc_glResetMinmaxEXT) -1
-};
-
-/* glGetHistogramEXT */
-GdkGLProc
-gdk_gl_get_glGetHistogramEXT (void)
+static GdkGL_GL_ARB_multitexture _procs_GL_ARB_multitexture = {
+  (GdkGLProc_glActiveTextureARB) -1,
+  (GdkGLProc_glClientActiveTextureARB) -1,
+  (GdkGLProc_glMultiTexCoord1dARB) -1,
+  (GdkGLProc_glMultiTexCoord1dvARB) -1,
+  (GdkGLProc_glMultiTexCoord1fARB) -1,
+  (GdkGLProc_glMultiTexCoord1fvARB) -1,
+  (GdkGLProc_glMultiTexCoord1iARB) -1,
+  (GdkGLProc_glMultiTexCoord1ivARB) -1,
+  (GdkGLProc_glMultiTexCoord1sARB) -1,
+  (GdkGLProc_glMultiTexCoord1svARB) -1,
+  (GdkGLProc_glMultiTexCoord2dARB) -1,
+  (GdkGLProc_glMultiTexCoord2dvARB) -1,
+  (GdkGLProc_glMultiTexCoord2fARB) -1,
+  (GdkGLProc_glMultiTexCoord2fvARB) -1,
+  (GdkGLProc_glMultiTexCoord2iARB) -1,
+  (GdkGLProc_glMultiTexCoord2ivARB) -1,
+  (GdkGLProc_glMultiTexCoord2sARB) -1,
+  (GdkGLProc_glMultiTexCoord2svARB) -1,
+  (GdkGLProc_glMultiTexCoord3dARB) -1,
+  (GdkGLProc_glMultiTexCoord3dvARB) -1,
+  (GdkGLProc_glMultiTexCoord3fARB) -1,
+  (GdkGLProc_glMultiTexCoord3fvARB) -1,
+  (GdkGLProc_glMultiTexCoord3iARB) -1,
+  (GdkGLProc_glMultiTexCoord3ivARB) -1,
+  (GdkGLProc_glMultiTexCoord3sARB) -1,
+  (GdkGLProc_glMultiTexCoord3svARB) -1,
+  (GdkGLProc_glMultiTexCoord4dARB) -1,
+  (GdkGLProc_glMultiTexCoord4dvARB) -1,
+  (GdkGLProc_glMultiTexCoord4fARB) -1,
+  (GdkGLProc_glMultiTexCoord4fvARB) -1,
+  (GdkGLProc_glMultiTexCoord4iARB) -1,
+  (GdkGLProc_glMultiTexCoord4ivARB) -1,
+  (GdkGLProc_glMultiTexCoord4sARB) -1,
+  (GdkGLProc_glMultiTexCoord4svARB) -1
+};
+
+/* glActiveTextureARB */
+GdkGLProc
+gdk_gl_get_glActiveTextureARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glGetHistogramEXT == (GdkGLProc_glGetHistogramEXT) -1)
-    _procs_GL_EXT_histogram.glGetHistogramEXT =
-      (GdkGLProc_glGetHistogramEXT) gdk_gl_get_proc_address ("glGetHistogramEXT");
+  if (_procs_GL_ARB_multitexture.glActiveTextureARB == (GdkGLProc_glActiveTextureARB) -1)
+    _procs_GL_ARB_multitexture.glActiveTextureARB =
+      (GdkGLProc_glActiveTextureARB) gdk_gl_get_proc_address ("glActiveTextureARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetHistogramEXT () - %s",
-               (_procs_GL_EXT_histogram.glGetHistogramEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glActiveTextureARB () - %s",
+               (_procs_GL_ARB_multitexture.glActiveTextureARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetHistogramEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glActiveTextureARB);
 }
 
-/* glGetHistogramParameterfvEXT */
+/* glClientActiveTextureARB */
 GdkGLProc
-gdk_gl_get_glGetHistogramParameterfvEXT (void)
+gdk_gl_get_glClientActiveTextureARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glGetHistogramParameterfvEXT == (GdkGLProc_glGetHistogramParameterfvEXT) -1)
-    _procs_GL_EXT_histogram.glGetHistogramParameterfvEXT =
-      (GdkGLProc_glGetHistogramParameterfvEXT) gdk_gl_get_proc_address ("glGetHistogramParameterfvEXT");
+  if (_procs_GL_ARB_multitexture.glClientActiveTextureARB == (GdkGLProc_glClientActiveTextureARB) -1)
+    _procs_GL_ARB_multitexture.glClientActiveTextureARB =
+      (GdkGLProc_glClientActiveTextureARB) gdk_gl_get_proc_address ("glClientActiveTextureARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetHistogramParameterfvEXT () - %s",
-               (_procs_GL_EXT_histogram.glGetHistogramParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClientActiveTextureARB () - %s",
+               (_procs_GL_ARB_multitexture.glClientActiveTextureARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetHistogramParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glClientActiveTextureARB);
 }
 
-/* glGetHistogramParameterivEXT */
+/* glMultiTexCoord1dARB */
 GdkGLProc
-gdk_gl_get_glGetHistogramParameterivEXT (void)
+gdk_gl_get_glMultiTexCoord1dARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glGetHistogramParameterivEXT == (GdkGLProc_glGetHistogramParameterivEXT) -1)
-    _procs_GL_EXT_histogram.glGetHistogramParameterivEXT =
-      (GdkGLProc_glGetHistogramParameterivEXT) gdk_gl_get_proc_address ("glGetHistogramParameterivEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1dARB == (GdkGLProc_glMultiTexCoord1dARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1dARB =
+      (GdkGLProc_glMultiTexCoord1dARB) gdk_gl_get_proc_address ("glMultiTexCoord1dARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetHistogramParameterivEXT () - %s",
-               (_procs_GL_EXT_histogram.glGetHistogramParameterivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1dARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1dARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetHistogramParameterivEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1dARB);
 }
 
-/* glGetMinmaxEXT */
+/* glMultiTexCoord1dvARB */
 GdkGLProc
-gdk_gl_get_glGetMinmaxEXT (void)
+gdk_gl_get_glMultiTexCoord1dvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glGetMinmaxEXT == (GdkGLProc_glGetMinmaxEXT) -1)
-    _procs_GL_EXT_histogram.glGetMinmaxEXT =
-      (GdkGLProc_glGetMinmaxEXT) gdk_gl_get_proc_address ("glGetMinmaxEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1dvARB == (GdkGLProc_glMultiTexCoord1dvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1dvARB =
+      (GdkGLProc_glMultiTexCoord1dvARB) gdk_gl_get_proc_address ("glMultiTexCoord1dvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMinmaxEXT () - %s",
-               (_procs_GL_EXT_histogram.glGetMinmaxEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1dvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1dvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetMinmaxEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1dvARB);
 }
 
-/* glGetMinmaxParameterfvEXT */
+/* glMultiTexCoord1fARB */
 GdkGLProc
-gdk_gl_get_glGetMinmaxParameterfvEXT (void)
+gdk_gl_get_glMultiTexCoord1fARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT == (GdkGLProc_glGetMinmaxParameterfvEXT) -1)
-    _procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT =
-      (GdkGLProc_glGetMinmaxParameterfvEXT) gdk_gl_get_proc_address ("glGetMinmaxParameterfvEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1fARB == (GdkGLProc_glMultiTexCoord1fARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1fARB =
+      (GdkGLProc_glMultiTexCoord1fARB) gdk_gl_get_proc_address ("glMultiTexCoord1fARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMinmaxParameterfvEXT () - %s",
-               (_procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1fARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1fARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1fARB);
 }
 
-/* glGetMinmaxParameterivEXT */
+/* glMultiTexCoord1fvARB */
 GdkGLProc
-gdk_gl_get_glGetMinmaxParameterivEXT (void)
+gdk_gl_get_glMultiTexCoord1fvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glGetMinmaxParameterivEXT == (GdkGLProc_glGetMinmaxParameterivEXT) -1)
-    _procs_GL_EXT_histogram.glGetMinmaxParameterivEXT =
-      (GdkGLProc_glGetMinmaxParameterivEXT) gdk_gl_get_proc_address ("glGetMinmaxParameterivEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1fvARB == (GdkGLProc_glMultiTexCoord1fvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1fvARB =
+      (GdkGLProc_glMultiTexCoord1fvARB) gdk_gl_get_proc_address ("glMultiTexCoord1fvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMinmaxParameterivEXT () - %s",
-               (_procs_GL_EXT_histogram.glGetMinmaxParameterivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1fvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1fvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetMinmaxParameterivEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1fvARB);
 }
 
-/* glHistogramEXT */
+/* glMultiTexCoord1iARB */
 GdkGLProc
-gdk_gl_get_glHistogramEXT (void)
+gdk_gl_get_glMultiTexCoord1iARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glHistogramEXT == (GdkGLProc_glHistogramEXT) -1)
-    _procs_GL_EXT_histogram.glHistogramEXT =
-      (GdkGLProc_glHistogramEXT) gdk_gl_get_proc_address ("glHistogramEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1iARB == (GdkGLProc_glMultiTexCoord1iARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1iARB =
+      (GdkGLProc_glMultiTexCoord1iARB) gdk_gl_get_proc_address ("glMultiTexCoord1iARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glHistogramEXT () - %s",
-               (_procs_GL_EXT_histogram.glHistogramEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1iARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1iARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glHistogramEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1iARB);
 }
 
-/* glMinmaxEXT */
+/* glMultiTexCoord1ivARB */
 GdkGLProc
-gdk_gl_get_glMinmaxEXT (void)
+gdk_gl_get_glMultiTexCoord1ivARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glMinmaxEXT == (GdkGLProc_glMinmaxEXT) -1)
-    _procs_GL_EXT_histogram.glMinmaxEXT =
-      (GdkGLProc_glMinmaxEXT) gdk_gl_get_proc_address ("glMinmaxEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1ivARB == (GdkGLProc_glMultiTexCoord1ivARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1ivARB =
+      (GdkGLProc_glMultiTexCoord1ivARB) gdk_gl_get_proc_address ("glMultiTexCoord1ivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMinmaxEXT () - %s",
-               (_procs_GL_EXT_histogram.glMinmaxEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1ivARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1ivARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glMinmaxEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1ivARB);
 }
 
-/* glResetHistogramEXT */
+/* glMultiTexCoord1sARB */
 GdkGLProc
-gdk_gl_get_glResetHistogramEXT (void)
+gdk_gl_get_glMultiTexCoord1sARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glResetHistogramEXT == (GdkGLProc_glResetHistogramEXT) -1)
-    _procs_GL_EXT_histogram.glResetHistogramEXT =
-      (GdkGLProc_glResetHistogramEXT) gdk_gl_get_proc_address ("glResetHistogramEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1sARB == (GdkGLProc_glMultiTexCoord1sARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1sARB =
+      (GdkGLProc_glMultiTexCoord1sARB) gdk_gl_get_proc_address ("glMultiTexCoord1sARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glResetHistogramEXT () - %s",
-               (_procs_GL_EXT_histogram.glResetHistogramEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1sARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1sARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glResetHistogramEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1sARB);
 }
 
-/* glResetMinmaxEXT */
+/* glMultiTexCoord1svARB */
 GdkGLProc
-gdk_gl_get_glResetMinmaxEXT (void)
+gdk_gl_get_glMultiTexCoord1svARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_histogram.glResetMinmaxEXT == (GdkGLProc_glResetMinmaxEXT) -1)
-    _procs_GL_EXT_histogram.glResetMinmaxEXT =
-      (GdkGLProc_glResetMinmaxEXT) gdk_gl_get_proc_address ("glResetMinmaxEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord1svARB == (GdkGLProc_glMultiTexCoord1svARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord1svARB =
+      (GdkGLProc_glMultiTexCoord1svARB) gdk_gl_get_proc_address ("glMultiTexCoord1svARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glResetMinmaxEXT () - %s",
-               (_procs_GL_EXT_histogram.glResetMinmaxEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1svARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord1svARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_histogram.glResetMinmaxEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord1svARB);
 }
 
-/* Get GL_EXT_histogram functions */
-GdkGL_GL_EXT_histogram *
-gdk_gl_get_GL_EXT_histogram (void)
+/* glMultiTexCoord2dARB */
+GdkGLProc
+gdk_gl_get_glMultiTexCoord2dARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_histogram");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glGetHistogramEXT () != NULL);
-          supported &= (gdk_gl_get_glGetHistogramParameterfvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetHistogramParameterivEXT () != NULL);
-          supported &= (gdk_gl_get_glGetMinmaxEXT () != NULL);
-          supported &= (gdk_gl_get_glGetMinmaxParameterfvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetMinmaxParameterivEXT () != NULL);
-          supported &= (gdk_gl_get_glHistogramEXT () != NULL);
-          supported &= (gdk_gl_get_glMinmaxEXT () != NULL);
-          supported &= (gdk_gl_get_glResetHistogramEXT () != NULL);
-          supported &= (gdk_gl_get_glResetMinmaxEXT () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2dARB == (GdkGLProc_glMultiTexCoord2dARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2dARB =
+      (GdkGLProc_glMultiTexCoord2dARB) gdk_gl_get_proc_address ("glMultiTexCoord2dARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_histogram () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2dARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2dARB) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2dARB);
+}
+
+/* glMultiTexCoord2dvARB */
+GdkGLProc
+gdk_gl_get_glMultiTexCoord2dvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_EXT_histogram;
-}
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2dvARB == (GdkGLProc_glMultiTexCoord2dvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2dvARB =
+      (GdkGLProc_glMultiTexCoord2dvARB) gdk_gl_get_proc_address ("glMultiTexCoord2dvARB");
 
-/*
- * GL_EXT_convolution
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMultiTexCoord2dvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2dvARB) ? "supported" : "not supported"));
 
-static GdkGL_GL_EXT_convolution _procs_GL_EXT_convolution = {
-  (GdkGLProc_glConvolutionFilter1DEXT) -1,
-  (GdkGLProc_glConvolutionFilter2DEXT) -1,
-  (GdkGLProc_glConvolutionParameterfEXT) -1,
-  (GdkGLProc_glConvolutionParameterfvEXT) -1,
-  (GdkGLProc_glConvolutionParameteriEXT) -1,
-  (GdkGLProc_glConvolutionParameterivEXT) -1,
-  (GdkGLProc_glCopyConvolutionFilter1DEXT) -1,
-  (GdkGLProc_glCopyConvolutionFilter2DEXT) -1,
-  (GdkGLProc_glGetConvolutionFilterEXT) -1,
-  (GdkGLProc_glGetConvolutionParameterfvEXT) -1,
-  (GdkGLProc_glGetConvolutionParameterivEXT) -1,
-  (GdkGLProc_glGetSeparableFilterEXT) -1,
-  (GdkGLProc_glSeparableFilter2DEXT) -1
-};
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2dvARB);
+}
 
-/* glConvolutionFilter1DEXT */
+/* glMultiTexCoord2fARB */
 GdkGLProc
-gdk_gl_get_glConvolutionFilter1DEXT (void)
+gdk_gl_get_glMultiTexCoord2fARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glConvolutionFilter1DEXT == (GdkGLProc_glConvolutionFilter1DEXT) -1)
-    _procs_GL_EXT_convolution.glConvolutionFilter1DEXT =
-      (GdkGLProc_glConvolutionFilter1DEXT) gdk_gl_get_proc_address ("glConvolutionFilter1DEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2fARB == (GdkGLProc_glMultiTexCoord2fARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2fARB =
+      (GdkGLProc_glMultiTexCoord2fARB) gdk_gl_get_proc_address ("glMultiTexCoord2fARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glConvolutionFilter1DEXT () - %s",
-               (_procs_GL_EXT_convolution.glConvolutionFilter1DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2fARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2fARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionFilter1DEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2fARB);
 }
 
-/* glConvolutionFilter2DEXT */
+/* glMultiTexCoord2fvARB */
 GdkGLProc
-gdk_gl_get_glConvolutionFilter2DEXT (void)
+gdk_gl_get_glMultiTexCoord2fvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glConvolutionFilter2DEXT == (GdkGLProc_glConvolutionFilter2DEXT) -1)
-    _procs_GL_EXT_convolution.glConvolutionFilter2DEXT =
-      (GdkGLProc_glConvolutionFilter2DEXT) gdk_gl_get_proc_address ("glConvolutionFilter2DEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2fvARB == (GdkGLProc_glMultiTexCoord2fvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2fvARB =
+      (GdkGLProc_glMultiTexCoord2fvARB) gdk_gl_get_proc_address ("glMultiTexCoord2fvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glConvolutionFilter2DEXT () - %s",
-               (_procs_GL_EXT_convolution.glConvolutionFilter2DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2fvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2fvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionFilter2DEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2fvARB);
 }
 
-/* glConvolutionParameterfEXT */
+/* glMultiTexCoord2iARB */
 GdkGLProc
-gdk_gl_get_glConvolutionParameterfEXT (void)
+gdk_gl_get_glMultiTexCoord2iARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glConvolutionParameterfEXT == (GdkGLProc_glConvolutionParameterfEXT) -1)
-    _procs_GL_EXT_convolution.glConvolutionParameterfEXT =
-      (GdkGLProc_glConvolutionParameterfEXT) gdk_gl_get_proc_address ("glConvolutionParameterfEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2iARB == (GdkGLProc_glMultiTexCoord2iARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2iARB =
+      (GdkGLProc_glMultiTexCoord2iARB) gdk_gl_get_proc_address ("glMultiTexCoord2iARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glConvolutionParameterfEXT () - %s",
-               (_procs_GL_EXT_convolution.glConvolutionParameterfEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2iARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2iARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameterfEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2iARB);
 }
 
-/* glConvolutionParameterfvEXT */
+/* glMultiTexCoord2ivARB */
 GdkGLProc
-gdk_gl_get_glConvolutionParameterfvEXT (void)
+gdk_gl_get_glMultiTexCoord2ivARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glConvolutionParameterfvEXT == (GdkGLProc_glConvolutionParameterfvEXT) -1)
-    _procs_GL_EXT_convolution.glConvolutionParameterfvEXT =
-      (GdkGLProc_glConvolutionParameterfvEXT) gdk_gl_get_proc_address ("glConvolutionParameterfvEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2ivARB == (GdkGLProc_glMultiTexCoord2ivARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2ivARB =
+      (GdkGLProc_glMultiTexCoord2ivARB) gdk_gl_get_proc_address ("glMultiTexCoord2ivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glConvolutionParameterfvEXT () - %s",
-               (_procs_GL_EXT_convolution.glConvolutionParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2ivARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2ivARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2ivARB);
 }
 
-/* glConvolutionParameteriEXT */
+/* glMultiTexCoord2sARB */
 GdkGLProc
-gdk_gl_get_glConvolutionParameteriEXT (void)
+gdk_gl_get_glMultiTexCoord2sARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glConvolutionParameteriEXT == (GdkGLProc_glConvolutionParameteriEXT) -1)
-    _procs_GL_EXT_convolution.glConvolutionParameteriEXT =
-      (GdkGLProc_glConvolutionParameteriEXT) gdk_gl_get_proc_address ("glConvolutionParameteriEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2sARB == (GdkGLProc_glMultiTexCoord2sARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2sARB =
+      (GdkGLProc_glMultiTexCoord2sARB) gdk_gl_get_proc_address ("glMultiTexCoord2sARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glConvolutionParameteriEXT () - %s",
-               (_procs_GL_EXT_convolution.glConvolutionParameteriEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2sARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2sARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameteriEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2sARB);
 }
 
-/* glConvolutionParameterivEXT */
+/* glMultiTexCoord2svARB */
 GdkGLProc
-gdk_gl_get_glConvolutionParameterivEXT (void)
+gdk_gl_get_glMultiTexCoord2svARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glConvolutionParameterivEXT == (GdkGLProc_glConvolutionParameterivEXT) -1)
-    _procs_GL_EXT_convolution.glConvolutionParameterivEXT =
-      (GdkGLProc_glConvolutionParameterivEXT) gdk_gl_get_proc_address ("glConvolutionParameterivEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord2svARB == (GdkGLProc_glMultiTexCoord2svARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord2svARB =
+      (GdkGLProc_glMultiTexCoord2svARB) gdk_gl_get_proc_address ("glMultiTexCoord2svARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glConvolutionParameterivEXT () - %s",
-               (_procs_GL_EXT_convolution.glConvolutionParameterivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2svARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord2svARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameterivEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord2svARB);
 }
 
-/* glCopyConvolutionFilter1DEXT */
+/* glMultiTexCoord3dARB */
 GdkGLProc
-gdk_gl_get_glCopyConvolutionFilter1DEXT (void)
+gdk_gl_get_glMultiTexCoord3dARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT == (GdkGLProc_glCopyConvolutionFilter1DEXT) -1)
-    _procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT =
-      (GdkGLProc_glCopyConvolutionFilter1DEXT) gdk_gl_get_proc_address ("glCopyConvolutionFilter1DEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3dARB == (GdkGLProc_glMultiTexCoord3dARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3dARB =
+      (GdkGLProc_glMultiTexCoord3dARB) gdk_gl_get_proc_address ("glMultiTexCoord3dARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyConvolutionFilter1DEXT () - %s",
-               (_procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3dARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3dARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3dARB);
 }
 
-/* glCopyConvolutionFilter2DEXT */
+/* glMultiTexCoord3dvARB */
 GdkGLProc
-gdk_gl_get_glCopyConvolutionFilter2DEXT (void)
+gdk_gl_get_glMultiTexCoord3dvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT == (GdkGLProc_glCopyConvolutionFilter2DEXT) -1)
-    _procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT =
-      (GdkGLProc_glCopyConvolutionFilter2DEXT) gdk_gl_get_proc_address ("glCopyConvolutionFilter2DEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3dvARB == (GdkGLProc_glMultiTexCoord3dvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3dvARB =
+      (GdkGLProc_glMultiTexCoord3dvARB) gdk_gl_get_proc_address ("glMultiTexCoord3dvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyConvolutionFilter2DEXT () - %s",
-               (_procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3dvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3dvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3dvARB);
 }
 
-/* glGetConvolutionFilterEXT */
+/* glMultiTexCoord3fARB */
 GdkGLProc
-gdk_gl_get_glGetConvolutionFilterEXT (void)
+gdk_gl_get_glMultiTexCoord3fARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glGetConvolutionFilterEXT == (GdkGLProc_glGetConvolutionFilterEXT) -1)
-    _procs_GL_EXT_convolution.glGetConvolutionFilterEXT =
-      (GdkGLProc_glGetConvolutionFilterEXT) gdk_gl_get_proc_address ("glGetConvolutionFilterEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3fARB == (GdkGLProc_glMultiTexCoord3fARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3fARB =
+      (GdkGLProc_glMultiTexCoord3fARB) gdk_gl_get_proc_address ("glMultiTexCoord3fARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetConvolutionFilterEXT () - %s",
-               (_procs_GL_EXT_convolution.glGetConvolutionFilterEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3fARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3fARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetConvolutionFilterEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3fARB);
 }
 
-/* glGetConvolutionParameterfvEXT */
+/* glMultiTexCoord3fvARB */
 GdkGLProc
-gdk_gl_get_glGetConvolutionParameterfvEXT (void)
+gdk_gl_get_glMultiTexCoord3fvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT == (GdkGLProc_glGetConvolutionParameterfvEXT) -1)
-    _procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT =
-      (GdkGLProc_glGetConvolutionParameterfvEXT) gdk_gl_get_proc_address ("glGetConvolutionParameterfvEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3fvARB == (GdkGLProc_glMultiTexCoord3fvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3fvARB =
+      (GdkGLProc_glMultiTexCoord3fvARB) gdk_gl_get_proc_address ("glMultiTexCoord3fvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetConvolutionParameterfvEXT () - %s",
-               (_procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3fvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3fvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3fvARB);
 }
 
-/* glGetConvolutionParameterivEXT */
+/* glMultiTexCoord3iARB */
 GdkGLProc
-gdk_gl_get_glGetConvolutionParameterivEXT (void)
+gdk_gl_get_glMultiTexCoord3iARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glGetConvolutionParameterivEXT == (GdkGLProc_glGetConvolutionParameterivEXT) -1)
-    _procs_GL_EXT_convolution.glGetConvolutionParameterivEXT =
-      (GdkGLProc_glGetConvolutionParameterivEXT) gdk_gl_get_proc_address ("glGetConvolutionParameterivEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3iARB == (GdkGLProc_glMultiTexCoord3iARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3iARB =
+      (GdkGLProc_glMultiTexCoord3iARB) gdk_gl_get_proc_address ("glMultiTexCoord3iARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetConvolutionParameterivEXT () - %s",
-               (_procs_GL_EXT_convolution.glGetConvolutionParameterivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3iARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3iARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetConvolutionParameterivEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3iARB);
 }
 
-/* glGetSeparableFilterEXT */
+/* glMultiTexCoord3ivARB */
 GdkGLProc
-gdk_gl_get_glGetSeparableFilterEXT (void)
+gdk_gl_get_glMultiTexCoord3ivARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glGetSeparableFilterEXT == (GdkGLProc_glGetSeparableFilterEXT) -1)
-    _procs_GL_EXT_convolution.glGetSeparableFilterEXT =
-      (GdkGLProc_glGetSeparableFilterEXT) gdk_gl_get_proc_address ("glGetSeparableFilterEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3ivARB == (GdkGLProc_glMultiTexCoord3ivARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3ivARB =
+      (GdkGLProc_glMultiTexCoord3ivARB) gdk_gl_get_proc_address ("glMultiTexCoord3ivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetSeparableFilterEXT () - %s",
-               (_procs_GL_EXT_convolution.glGetSeparableFilterEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3ivARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3ivARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetSeparableFilterEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3ivARB);
 }
 
-/* glSeparableFilter2DEXT */
+/* glMultiTexCoord3sARB */
 GdkGLProc
-gdk_gl_get_glSeparableFilter2DEXT (void)
+gdk_gl_get_glMultiTexCoord3sARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_convolution.glSeparableFilter2DEXT == (GdkGLProc_glSeparableFilter2DEXT) -1)
-    _procs_GL_EXT_convolution.glSeparableFilter2DEXT =
-      (GdkGLProc_glSeparableFilter2DEXT) gdk_gl_get_proc_address ("glSeparableFilter2DEXT");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3sARB == (GdkGLProc_glMultiTexCoord3sARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3sARB =
+      (GdkGLProc_glMultiTexCoord3sARB) gdk_gl_get_proc_address ("glMultiTexCoord3sARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSeparableFilter2DEXT () - %s",
-               (_procs_GL_EXT_convolution.glSeparableFilter2DEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3sARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3sARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_convolution.glSeparableFilter2DEXT);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3sARB);
 }
 
-/* Get GL_EXT_convolution functions */
-GdkGL_GL_EXT_convolution *
-gdk_gl_get_GL_EXT_convolution (void)
+/* glMultiTexCoord3svARB */
+GdkGLProc
+gdk_gl_get_glMultiTexCoord3svARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_convolution");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glConvolutionFilter1DEXT () != NULL);
-          supported &= (gdk_gl_get_glConvolutionFilter2DEXT () != NULL);
-          supported &= (gdk_gl_get_glConvolutionParameterfEXT () != NULL);
-          supported &= (gdk_gl_get_glConvolutionParameterfvEXT () != NULL);
-          supported &= (gdk_gl_get_glConvolutionParameteriEXT () != NULL);
-          supported &= (gdk_gl_get_glConvolutionParameterivEXT () != NULL);
-          supported &= (gdk_gl_get_glCopyConvolutionFilter1DEXT () != NULL);
-          supported &= (gdk_gl_get_glCopyConvolutionFilter2DEXT () != NULL);
-          supported &= (gdk_gl_get_glGetConvolutionFilterEXT () != NULL);
-          supported &= (gdk_gl_get_glGetConvolutionParameterfvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetConvolutionParameterivEXT () != NULL);
-          supported &= (gdk_gl_get_glGetSeparableFilterEXT () != NULL);
-          supported &= (gdk_gl_get_glSeparableFilter2DEXT () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord3svARB == (GdkGLProc_glMultiTexCoord3svARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord3svARB =
+      (GdkGLProc_glMultiTexCoord3svARB) gdk_gl_get_proc_address ("glMultiTexCoord3svARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_convolution () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3svARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord3svARB) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_convolution;
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord3svARB);
 }
 
-/*
- * GL_SGI_color_table
- */
+/* glMultiTexCoord4dARB */
+GdkGLProc
+gdk_gl_get_glMultiTexCoord4dARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_SGI_color_table _procs_GL_SGI_color_table = {
-  (GdkGLProc_glColorTableSGI) -1,
-  (GdkGLProc_glColorTableParameterfvSGI) -1,
-  (GdkGLProc_glColorTableParameterivSGI) -1,
-  (GdkGLProc_glCopyColorTableSGI) -1,
-  (GdkGLProc_glGetColorTableSGI) -1,
-  (GdkGLProc_glGetColorTableParameterfvSGI) -1,
-  (GdkGLProc_glGetColorTableParameterivSGI) -1
-};
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4dARB == (GdkGLProc_glMultiTexCoord4dARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4dARB =
+      (GdkGLProc_glMultiTexCoord4dARB) gdk_gl_get_proc_address ("glMultiTexCoord4dARB");
 
-/* glColorTableSGI */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMultiTexCoord4dARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4dARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4dARB);
+}
+
+/* glMultiTexCoord4dvARB */
 GdkGLProc
-gdk_gl_get_glColorTableSGI (void)
+gdk_gl_get_glMultiTexCoord4dvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGI_color_table.glColorTableSGI == (GdkGLProc_glColorTableSGI) -1)
-    _procs_GL_SGI_color_table.glColorTableSGI =
-      (GdkGLProc_glColorTableSGI) gdk_gl_get_proc_address ("glColorTableSGI");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4dvARB == (GdkGLProc_glMultiTexCoord4dvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4dvARB =
+      (GdkGLProc_glMultiTexCoord4dvARB) gdk_gl_get_proc_address ("glMultiTexCoord4dvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorTableSGI () - %s",
-               (_procs_GL_SGI_color_table.glColorTableSGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4dvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4dvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGI_color_table.glColorTableSGI);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4dvARB);
 }
 
-/* glColorTableParameterfvSGI */
+/* glMultiTexCoord4fARB */
 GdkGLProc
-gdk_gl_get_glColorTableParameterfvSGI (void)
+gdk_gl_get_glMultiTexCoord4fARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGI_color_table.glColorTableParameterfvSGI == (GdkGLProc_glColorTableParameterfvSGI) -1)
-    _procs_GL_SGI_color_table.glColorTableParameterfvSGI =
-      (GdkGLProc_glColorTableParameterfvSGI) gdk_gl_get_proc_address ("glColorTableParameterfvSGI");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4fARB == (GdkGLProc_glMultiTexCoord4fARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4fARB =
+      (GdkGLProc_glMultiTexCoord4fARB) gdk_gl_get_proc_address ("glMultiTexCoord4fARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorTableParameterfvSGI () - %s",
-               (_procs_GL_SGI_color_table.glColorTableParameterfvSGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4fARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4fARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGI_color_table.glColorTableParameterfvSGI);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4fARB);
 }
 
-/* glColorTableParameterivSGI */
+/* glMultiTexCoord4fvARB */
 GdkGLProc
-gdk_gl_get_glColorTableParameterivSGI (void)
+gdk_gl_get_glMultiTexCoord4fvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGI_color_table.glColorTableParameterivSGI == (GdkGLProc_glColorTableParameterivSGI) -1)
-    _procs_GL_SGI_color_table.glColorTableParameterivSGI =
-      (GdkGLProc_glColorTableParameterivSGI) gdk_gl_get_proc_address ("glColorTableParameterivSGI");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4fvARB == (GdkGLProc_glMultiTexCoord4fvARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4fvARB =
+      (GdkGLProc_glMultiTexCoord4fvARB) gdk_gl_get_proc_address ("glMultiTexCoord4fvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorTableParameterivSGI () - %s",
-               (_procs_GL_SGI_color_table.glColorTableParameterivSGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4fvARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4fvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGI_color_table.glColorTableParameterivSGI);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4fvARB);
 }
 
-/* glCopyColorTableSGI */
+/* glMultiTexCoord4iARB */
 GdkGLProc
-gdk_gl_get_glCopyColorTableSGI (void)
+gdk_gl_get_glMultiTexCoord4iARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGI_color_table.glCopyColorTableSGI == (GdkGLProc_glCopyColorTableSGI) -1)
-    _procs_GL_SGI_color_table.glCopyColorTableSGI =
-      (GdkGLProc_glCopyColorTableSGI) gdk_gl_get_proc_address ("glCopyColorTableSGI");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4iARB == (GdkGLProc_glMultiTexCoord4iARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4iARB =
+      (GdkGLProc_glMultiTexCoord4iARB) gdk_gl_get_proc_address ("glMultiTexCoord4iARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyColorTableSGI () - %s",
-               (_procs_GL_SGI_color_table.glCopyColorTableSGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4iARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4iARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGI_color_table.glCopyColorTableSGI);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4iARB);
 }
 
-/* glGetColorTableSGI */
+/* glMultiTexCoord4ivARB */
 GdkGLProc
-gdk_gl_get_glGetColorTableSGI (void)
+gdk_gl_get_glMultiTexCoord4ivARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGI_color_table.glGetColorTableSGI == (GdkGLProc_glGetColorTableSGI) -1)
-    _procs_GL_SGI_color_table.glGetColorTableSGI =
-      (GdkGLProc_glGetColorTableSGI) gdk_gl_get_proc_address ("glGetColorTableSGI");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4ivARB == (GdkGLProc_glMultiTexCoord4ivARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4ivARB =
+      (GdkGLProc_glMultiTexCoord4ivARB) gdk_gl_get_proc_address ("glMultiTexCoord4ivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetColorTableSGI () - %s",
-               (_procs_GL_SGI_color_table.glGetColorTableSGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4ivARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4ivARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGI_color_table.glGetColorTableSGI);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4ivARB);
 }
 
-/* glGetColorTableParameterfvSGI */
+/* glMultiTexCoord4sARB */
 GdkGLProc
-gdk_gl_get_glGetColorTableParameterfvSGI (void)
+gdk_gl_get_glMultiTexCoord4sARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGI_color_table.glGetColorTableParameterfvSGI == (GdkGLProc_glGetColorTableParameterfvSGI) -1)
-    _procs_GL_SGI_color_table.glGetColorTableParameterfvSGI =
-      (GdkGLProc_glGetColorTableParameterfvSGI) gdk_gl_get_proc_address ("glGetColorTableParameterfvSGI");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4sARB == (GdkGLProc_glMultiTexCoord4sARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4sARB =
+      (GdkGLProc_glMultiTexCoord4sARB) gdk_gl_get_proc_address ("glMultiTexCoord4sARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetColorTableParameterfvSGI () - %s",
-               (_procs_GL_SGI_color_table.glGetColorTableParameterfvSGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4sARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4sARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGI_color_table.glGetColorTableParameterfvSGI);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4sARB);
 }
 
-/* glGetColorTableParameterivSGI */
+/* glMultiTexCoord4svARB */
 GdkGLProc
-gdk_gl_get_glGetColorTableParameterivSGI (void)
+gdk_gl_get_glMultiTexCoord4svARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGI_color_table.glGetColorTableParameterivSGI == (GdkGLProc_glGetColorTableParameterivSGI) -1)
-    _procs_GL_SGI_color_table.glGetColorTableParameterivSGI =
-      (GdkGLProc_glGetColorTableParameterivSGI) gdk_gl_get_proc_address ("glGetColorTableParameterivSGI");
+  if (_procs_GL_ARB_multitexture.glMultiTexCoord4svARB == (GdkGLProc_glMultiTexCoord4svARB) -1)
+    _procs_GL_ARB_multitexture.glMultiTexCoord4svARB =
+      (GdkGLProc_glMultiTexCoord4svARB) gdk_gl_get_proc_address ("glMultiTexCoord4svARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetColorTableParameterivSGI () - %s",
-               (_procs_GL_SGI_color_table.glGetColorTableParameterivSGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4svARB () - %s",
+               (_procs_GL_ARB_multitexture.glMultiTexCoord4svARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGI_color_table.glGetColorTableParameterivSGI);
+  return (GdkGLProc) (_procs_GL_ARB_multitexture.glMultiTexCoord4svARB);
 }
 
-/* Get GL_SGI_color_table functions */
-GdkGL_GL_SGI_color_table *
-gdk_gl_get_GL_SGI_color_table (void)
+/* Get GL_ARB_multitexture functions */
+GdkGL_GL_ARB_multitexture *
+gdk_gl_get_GL_ARB_multitexture (void)
 {
   static gint supported = -1;
 
@@ -7236,209 +7333,201 @@ gdk_gl_get_GL_SGI_color_table (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_SGI_color_table");
+      supported = gdk_gl_query_gl_extension ("GL_ARB_multitexture");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glColorTableSGI () != NULL);
-          supported &= (gdk_gl_get_glColorTableParameterfvSGI () != NULL);
-          supported &= (gdk_gl_get_glColorTableParameterivSGI () != NULL);
-          supported &= (gdk_gl_get_glCopyColorTableSGI () != NULL);
-          supported &= (gdk_gl_get_glGetColorTableSGI () != NULL);
-          supported &= (gdk_gl_get_glGetColorTableParameterfvSGI () != NULL);
-          supported &= (gdk_gl_get_glGetColorTableParameterivSGI () != NULL);
+          supported &= (gdk_gl_get_glActiveTextureARB () != NULL);
+          supported &= (gdk_gl_get_glClientActiveTextureARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1dARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1dvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1fARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1fvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1iARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1ivARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1sARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1svARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2dARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2dvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2fARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2fvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2iARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2ivARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2sARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2svARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3dARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3dvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3fARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3fvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3iARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3ivARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3sARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3svARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4dARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4dvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4fARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4fvARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4iARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4ivARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4sARB () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4svARB () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGI_color_table () - %s",
+    g_message (" - gdk_gl_get_GL_ARB_multitexture () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_SGI_color_table;
+  return &_procs_GL_ARB_multitexture;
 }
 
 /*
- * GL_SGIX_pixel_texture
+ * GL_ARB_transpose_matrix
  */
 
-static GdkGL_GL_SGIX_pixel_texture _procs_GL_SGIX_pixel_texture = {
-  (GdkGLProc_glPixelTexGenSGIX) -1
+static GdkGL_GL_ARB_transpose_matrix _procs_GL_ARB_transpose_matrix = {
+  (GdkGLProc_glLoadTransposeMatrixfARB) -1,
+  (GdkGLProc_glLoadTransposeMatrixdARB) -1,
+  (GdkGLProc_glMultTransposeMatrixfARB) -1,
+  (GdkGLProc_glMultTransposeMatrixdARB) -1
 };
 
-/* glPixelTexGenSGIX */
+/* glLoadTransposeMatrixfARB */
 GdkGLProc
-gdk_gl_get_glPixelTexGenSGIX (void)
+gdk_gl_get_glLoadTransposeMatrixfARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX == (GdkGLProc_glPixelTexGenSGIX) -1)
-    _procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX =
-      (GdkGLProc_glPixelTexGenSGIX) gdk_gl_get_proc_address ("glPixelTexGenSGIX");
+  if (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB == (GdkGLProc_glLoadTransposeMatrixfARB) -1)
+    _procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB =
+      (GdkGLProc_glLoadTransposeMatrixfARB) gdk_gl_get_proc_address ("glLoadTransposeMatrixfARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTexGenSGIX () - %s",
-               (_procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glLoadTransposeMatrixfARB () - %s",
+               (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixfARB);
 }
 
-/* Get GL_SGIX_pixel_texture functions */
-GdkGL_GL_SGIX_pixel_texture *
-gdk_gl_get_GL_SGIX_pixel_texture (void)
+/* glLoadTransposeMatrixdARB */
+GdkGLProc
+gdk_gl_get_glLoadTransposeMatrixdARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_pixel_texture");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glPixelTexGenSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB == (GdkGLProc_glLoadTransposeMatrixdARB) -1)
+    _procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB =
+      (GdkGLProc_glLoadTransposeMatrixdARB) gdk_gl_get_proc_address ("glLoadTransposeMatrixdARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_pixel_texture () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glLoadTransposeMatrixdARB () - %s",
+               (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIX_pixel_texture;
+  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glLoadTransposeMatrixdARB);
 }
 
-/*
- * GL_SGIS_pixel_texture
- */
-
-static GdkGL_GL_SGIS_pixel_texture _procs_GL_SGIS_pixel_texture = {
-  (GdkGLProc_glPixelTexGenParameteriSGIS) -1,
-  (GdkGLProc_glPixelTexGenParameterivSGIS) -1,
-  (GdkGLProc_glPixelTexGenParameterfSGIS) -1,
-  (GdkGLProc_glPixelTexGenParameterfvSGIS) -1,
-  (GdkGLProc_glGetPixelTexGenParameterivSGIS) -1,
-  (GdkGLProc_glGetPixelTexGenParameterfvSGIS) -1
-};
-
-/* glPixelTexGenParameteriSGIS */
+/* glMultTransposeMatrixfARB */
 GdkGLProc
-gdk_gl_get_glPixelTexGenParameteriSGIS (void)
+gdk_gl_get_glMultTransposeMatrixfARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS == (GdkGLProc_glPixelTexGenParameteriSGIS) -1)
-    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS =
-      (GdkGLProc_glPixelTexGenParameteriSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameteriSGIS");
+  if (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB == (GdkGLProc_glMultTransposeMatrixfARB) -1)
+    _procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB =
+      (GdkGLProc_glMultTransposeMatrixfARB) gdk_gl_get_proc_address ("glMultTransposeMatrixfARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTexGenParameteriSGIS () - %s",
-               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultTransposeMatrixfARB () - %s",
+               (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixfARB);
 }
 
-/* glPixelTexGenParameterivSGIS */
+/* glMultTransposeMatrixdARB */
 GdkGLProc
-gdk_gl_get_glPixelTexGenParameterivSGIS (void)
+gdk_gl_get_glMultTransposeMatrixdARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS == (GdkGLProc_glPixelTexGenParameterivSGIS) -1)
-    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS =
-      (GdkGLProc_glPixelTexGenParameterivSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameterivSGIS");
+  if (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB == (GdkGLProc_glMultTransposeMatrixdARB) -1)
+    _procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB =
+      (GdkGLProc_glMultTransposeMatrixdARB) gdk_gl_get_proc_address ("glMultTransposeMatrixdARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTexGenParameterivSGIS () - %s",
-               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultTransposeMatrixdARB () - %s",
+               (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_transpose_matrix.glMultTransposeMatrixdARB);
 }
 
-/* glPixelTexGenParameterfSGIS */
-GdkGLProc
-gdk_gl_get_glPixelTexGenParameterfSGIS (void)
+/* Get GL_ARB_transpose_matrix functions */
+GdkGL_GL_ARB_transpose_matrix *
+gdk_gl_get_GL_ARB_transpose_matrix (void)
 {
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS == (GdkGLProc_glPixelTexGenParameterfSGIS) -1)
-    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS =
-      (GdkGLProc_glPixelTexGenParameterfSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameterfSGIS");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTexGenParameterfSGIS () - %s",
-               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS);
-}
+  static gint supported = -1;
 
-/* glPixelTexGenParameterfvSGIS */
-GdkGLProc
-gdk_gl_get_glPixelTexGenParameterfvSGIS (void)
-{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS == (GdkGLProc_glPixelTexGenParameterfvSGIS) -1)
-    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS =
-      (GdkGLProc_glPixelTexGenParameterfvSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameterfvSGIS");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_transpose_matrix");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTexGenParameterfvSGIS () - %s",
-               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS) ? "supported" : "not supported"));
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glLoadTransposeMatrixfARB () != NULL);
+          supported &= (gdk_gl_get_glLoadTransposeMatrixdARB () != NULL);
+          supported &= (gdk_gl_get_glMultTransposeMatrixfARB () != NULL);
+          supported &= (gdk_gl_get_glMultTransposeMatrixdARB () != NULL);
+        }
+    }
 
-  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS);
-}
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_transpose_matrix () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glGetPixelTexGenParameterivSGIS */
-GdkGLProc
-gdk_gl_get_glGetPixelTexGenParameterivSGIS (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS == (GdkGLProc_glGetPixelTexGenParameterivSGIS) -1)
-    _procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS =
-      (GdkGLProc_glGetPixelTexGenParameterivSGIS) gdk_gl_get_proc_address ("glGetPixelTexGenParameterivSGIS");
+  return &_procs_GL_ARB_transpose_matrix;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetPixelTexGenParameterivSGIS () - %s",
-               (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS) ? "supported" : "not supported"));
+/*
+ * GL_ARB_multisample
+ */
 
-  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS);
-}
+static GdkGL_GL_ARB_multisample _procs_GL_ARB_multisample = {
+  (GdkGLProc_glSampleCoverageARB) -1
+};
 
-/* glGetPixelTexGenParameterfvSGIS */
+/* glSampleCoverageARB */
 GdkGLProc
-gdk_gl_get_glGetPixelTexGenParameterfvSGIS (void)
+gdk_gl_get_glSampleCoverageARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS == (GdkGLProc_glGetPixelTexGenParameterfvSGIS) -1)
-    _procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS =
-      (GdkGLProc_glGetPixelTexGenParameterfvSGIS) gdk_gl_get_proc_address ("glGetPixelTexGenParameterfvSGIS");
+  if (_procs_GL_ARB_multisample.glSampleCoverageARB == (GdkGLProc_glSampleCoverageARB) -1)
+    _procs_GL_ARB_multisample.glSampleCoverageARB =
+      (GdkGLProc_glSampleCoverageARB) gdk_gl_get_proc_address ("glSampleCoverageARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetPixelTexGenParameterfvSGIS () - %s",
-               (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSampleCoverageARB () - %s",
+               (_procs_GL_ARB_multisample.glSampleCoverageARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_multisample.glSampleCoverageARB);
 }
 
-/* Get GL_SGIS_pixel_texture functions */
-GdkGL_GL_SGIS_pixel_texture *
-gdk_gl_get_GL_SGIS_pixel_texture (void)
+/* Get GL_ARB_multisample functions */
+GdkGL_GL_ARB_multisample *
+gdk_gl_get_GL_ARB_multisample (void)
 {
   static gint supported = -1;
 
@@ -7447,228 +7536,167 @@ gdk_gl_get_GL_SGIS_pixel_texture (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_pixel_texture");
+      supported = gdk_gl_query_gl_extension ("GL_ARB_multisample");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glPixelTexGenParameteriSGIS () != NULL);
-          supported &= (gdk_gl_get_glPixelTexGenParameterivSGIS () != NULL);
-          supported &= (gdk_gl_get_glPixelTexGenParameterfSGIS () != NULL);
-          supported &= (gdk_gl_get_glPixelTexGenParameterfvSGIS () != NULL);
-          supported &= (gdk_gl_get_glGetPixelTexGenParameterivSGIS () != NULL);
-          supported &= (gdk_gl_get_glGetPixelTexGenParameterfvSGIS () != NULL);
+          supported &= (gdk_gl_get_glSampleCoverageARB () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_pixel_texture () - %s",
+    g_message (" - gdk_gl_get_GL_ARB_multisample () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_SGIS_pixel_texture;
+  return &_procs_GL_ARB_multisample;
 }
 
 /*
- * GL_SGIS_texture4D
+ * GL_ARB_texture_compression
  */
 
-static GdkGL_GL_SGIS_texture4D _procs_GL_SGIS_texture4D = {
-  (GdkGLProc_glTexImage4DSGIS) -1,
-  (GdkGLProc_glTexSubImage4DSGIS) -1
+static GdkGL_GL_ARB_texture_compression _procs_GL_ARB_texture_compression = {
+  (GdkGLProc_glCompressedTexImage3DARB) -1,
+  (GdkGLProc_glCompressedTexImage2DARB) -1,
+  (GdkGLProc_glCompressedTexImage1DARB) -1,
+  (GdkGLProc_glCompressedTexSubImage3DARB) -1,
+  (GdkGLProc_glCompressedTexSubImage2DARB) -1,
+  (GdkGLProc_glCompressedTexSubImage1DARB) -1,
+  (GdkGLProc_glGetCompressedTexImageARB) -1
 };
 
-/* glTexImage4DSGIS */
+/* glCompressedTexImage3DARB */
 GdkGLProc
-gdk_gl_get_glTexImage4DSGIS (void)
+gdk_gl_get_glCompressedTexImage3DARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_texture4D.glTexImage4DSGIS == (GdkGLProc_glTexImage4DSGIS) -1)
-    _procs_GL_SGIS_texture4D.glTexImage4DSGIS =
-      (GdkGLProc_glTexImage4DSGIS) gdk_gl_get_proc_address ("glTexImage4DSGIS");
+  if (_procs_GL_ARB_texture_compression.glCompressedTexImage3DARB == (GdkGLProc_glCompressedTexImage3DARB) -1)
+    _procs_GL_ARB_texture_compression.glCompressedTexImage3DARB =
+      (GdkGLProc_glCompressedTexImage3DARB) gdk_gl_get_proc_address ("glCompressedTexImage3DARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexImage4DSGIS () - %s",
-               (_procs_GL_SGIS_texture4D.glTexImage4DSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTexImage3DARB () - %s",
+               (_procs_GL_ARB_texture_compression.glCompressedTexImage3DARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_texture4D.glTexImage4DSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexImage3DARB);
 }
 
-/* glTexSubImage4DSGIS */
+/* glCompressedTexImage2DARB */
 GdkGLProc
-gdk_gl_get_glTexSubImage4DSGIS (void)
+gdk_gl_get_glCompressedTexImage2DARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_texture4D.glTexSubImage4DSGIS == (GdkGLProc_glTexSubImage4DSGIS) -1)
-    _procs_GL_SGIS_texture4D.glTexSubImage4DSGIS =
-      (GdkGLProc_glTexSubImage4DSGIS) gdk_gl_get_proc_address ("glTexSubImage4DSGIS");
+  if (_procs_GL_ARB_texture_compression.glCompressedTexImage2DARB == (GdkGLProc_glCompressedTexImage2DARB) -1)
+    _procs_GL_ARB_texture_compression.glCompressedTexImage2DARB =
+      (GdkGLProc_glCompressedTexImage2DARB) gdk_gl_get_proc_address ("glCompressedTexImage2DARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexSubImage4DSGIS () - %s",
-               (_procs_GL_SGIS_texture4D.glTexSubImage4DSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTexImage2DARB () - %s",
+               (_procs_GL_ARB_texture_compression.glCompressedTexImage2DARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_texture4D.glTexSubImage4DSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexImage2DARB);
 }
 
-/* Get GL_SGIS_texture4D functions */
-GdkGL_GL_SGIS_texture4D *
-gdk_gl_get_GL_SGIS_texture4D (void)
+/* glCompressedTexImage1DARB */
+GdkGLProc
+gdk_gl_get_glCompressedTexImage1DARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_texture4D");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTexImage4DSGIS () != NULL);
-          supported &= (gdk_gl_get_glTexSubImage4DSGIS () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_texture_compression.glCompressedTexImage1DARB == (GdkGLProc_glCompressedTexImage1DARB) -1)
+    _procs_GL_ARB_texture_compression.glCompressedTexImage1DARB =
+      (GdkGLProc_glCompressedTexImage1DARB) gdk_gl_get_proc_address ("glCompressedTexImage1DARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_texture4D () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glCompressedTexImage1DARB () - %s",
+               (_procs_GL_ARB_texture_compression.glCompressedTexImage1DARB) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIS_texture4D;
+  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexImage1DARB);
 }
 
-/*
- * GL_EXT_texture_object
- */
-
-static GdkGL_GL_EXT_texture_object _procs_GL_EXT_texture_object = {
-  (GdkGLProc_glAreTexturesResidentEXT) -1,
-  (GdkGLProc_glBindTextureEXT) -1,
-  (GdkGLProc_glDeleteTexturesEXT) -1,
-  (GdkGLProc_glGenTexturesEXT) -1,
-  (GdkGLProc_glIsTextureEXT) -1,
-  (GdkGLProc_glPrioritizeTexturesEXT) -1
-};
-
-/* glAreTexturesResidentEXT */
+/* glCompressedTexSubImage3DARB */
 GdkGLProc
-gdk_gl_get_glAreTexturesResidentEXT (void)
+gdk_gl_get_glCompressedTexSubImage3DARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_texture_object.glAreTexturesResidentEXT == (GdkGLProc_glAreTexturesResidentEXT) -1)
-    _procs_GL_EXT_texture_object.glAreTexturesResidentEXT =
-      (GdkGLProc_glAreTexturesResidentEXT) gdk_gl_get_proc_address ("glAreTexturesResidentEXT");
+  if (_procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB == (GdkGLProc_glCompressedTexSubImage3DARB) -1)
+    _procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB =
+      (GdkGLProc_glCompressedTexSubImage3DARB) gdk_gl_get_proc_address ("glCompressedTexSubImage3DARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glAreTexturesResidentEXT () - %s",
-               (_procs_GL_EXT_texture_object.glAreTexturesResidentEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTexSubImage3DARB () - %s",
+               (_procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_texture_object.glAreTexturesResidentEXT);
+  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexSubImage3DARB);
 }
 
-/* glBindTextureEXT */
+/* glCompressedTexSubImage2DARB */
 GdkGLProc
-gdk_gl_get_glBindTextureEXT (void)
+gdk_gl_get_glCompressedTexSubImage2DARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_texture_object.glBindTextureEXT == (GdkGLProc_glBindTextureEXT) -1)
-    _procs_GL_EXT_texture_object.glBindTextureEXT =
-      (GdkGLProc_glBindTextureEXT) gdk_gl_get_proc_address ("glBindTextureEXT");
+  if (_procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB == (GdkGLProc_glCompressedTexSubImage2DARB) -1)
+    _procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB =
+      (GdkGLProc_glCompressedTexSubImage2DARB) gdk_gl_get_proc_address ("glCompressedTexSubImage2DARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindTextureEXT () - %s",
-               (_procs_GL_EXT_texture_object.glBindTextureEXT) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_EXT_texture_object.glBindTextureEXT);
-}
-
-/* glDeleteTexturesEXT */
-GdkGLProc
-gdk_gl_get_glDeleteTexturesEXT (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_EXT_texture_object.glDeleteTexturesEXT == (GdkGLProc_glDeleteTexturesEXT) -1)
-    _procs_GL_EXT_texture_object.glDeleteTexturesEXT =
-      (GdkGLProc_glDeleteTexturesEXT) gdk_gl_get_proc_address ("glDeleteTexturesEXT");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteTexturesEXT () - %s",
-               (_procs_GL_EXT_texture_object.glDeleteTexturesEXT) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_EXT_texture_object.glDeleteTexturesEXT);
-}
-
-/* glGenTexturesEXT */
-GdkGLProc
-gdk_gl_get_glGenTexturesEXT (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_EXT_texture_object.glGenTexturesEXT == (GdkGLProc_glGenTexturesEXT) -1)
-    _procs_GL_EXT_texture_object.glGenTexturesEXT =
-      (GdkGLProc_glGenTexturesEXT) gdk_gl_get_proc_address ("glGenTexturesEXT");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenTexturesEXT () - %s",
-               (_procs_GL_EXT_texture_object.glGenTexturesEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTexSubImage2DARB () - %s",
+               (_procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_texture_object.glGenTexturesEXT);
+  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexSubImage2DARB);
 }
 
-/* glIsTextureEXT */
+/* glCompressedTexSubImage1DARB */
 GdkGLProc
-gdk_gl_get_glIsTextureEXT (void)
+gdk_gl_get_glCompressedTexSubImage1DARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_texture_object.glIsTextureEXT == (GdkGLProc_glIsTextureEXT) -1)
-    _procs_GL_EXT_texture_object.glIsTextureEXT =
-      (GdkGLProc_glIsTextureEXT) gdk_gl_get_proc_address ("glIsTextureEXT");
+  if (_procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB == (GdkGLProc_glCompressedTexSubImage1DARB) -1)
+    _procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB =
+      (GdkGLProc_glCompressedTexSubImage1DARB) gdk_gl_get_proc_address ("glCompressedTexSubImage1DARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsTextureEXT () - %s",
-               (_procs_GL_EXT_texture_object.glIsTextureEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTexSubImage1DARB () - %s",
+               (_procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_texture_object.glIsTextureEXT);
+  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glCompressedTexSubImage1DARB);
 }
 
-/* glPrioritizeTexturesEXT */
+/* glGetCompressedTexImageARB */
 GdkGLProc
-gdk_gl_get_glPrioritizeTexturesEXT (void)
+gdk_gl_get_glGetCompressedTexImageARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_texture_object.glPrioritizeTexturesEXT == (GdkGLProc_glPrioritizeTexturesEXT) -1)
-    _procs_GL_EXT_texture_object.glPrioritizeTexturesEXT =
-      (GdkGLProc_glPrioritizeTexturesEXT) gdk_gl_get_proc_address ("glPrioritizeTexturesEXT");
+  if (_procs_GL_ARB_texture_compression.glGetCompressedTexImageARB == (GdkGLProc_glGetCompressedTexImageARB) -1)
+    _procs_GL_ARB_texture_compression.glGetCompressedTexImageARB =
+      (GdkGLProc_glGetCompressedTexImageARB) gdk_gl_get_proc_address ("glGetCompressedTexImageARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPrioritizeTexturesEXT () - %s",
-               (_procs_GL_EXT_texture_object.glPrioritizeTexturesEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetCompressedTexImageARB () - %s",
+               (_procs_GL_ARB_texture_compression.glGetCompressedTexImageARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_texture_object.glPrioritizeTexturesEXT);
+  return (GdkGLProc) (_procs_GL_ARB_texture_compression.glGetCompressedTexImageARB);
 }
 
-/* Get GL_EXT_texture_object functions */
-GdkGL_GL_EXT_texture_object *
-gdk_gl_get_GL_EXT_texture_object (void)
+/* Get GL_ARB_texture_compression functions */
+GdkGL_GL_ARB_texture_compression *
+gdk_gl_get_GL_ARB_texture_compression (void)
 {
   static gint supported = -1;
 
@@ -7677,77 +7705,78 @@ gdk_gl_get_GL_EXT_texture_object (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_texture_object");
+      supported = gdk_gl_query_gl_extension ("GL_ARB_texture_compression");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glAreTexturesResidentEXT () != NULL);
-          supported &= (gdk_gl_get_glBindTextureEXT () != NULL);
-          supported &= (gdk_gl_get_glDeleteTexturesEXT () != NULL);
-          supported &= (gdk_gl_get_glGenTexturesEXT () != NULL);
-          supported &= (gdk_gl_get_glIsTextureEXT () != NULL);
-          supported &= (gdk_gl_get_glPrioritizeTexturesEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedTexImage3DARB () != NULL);
+          supported &= (gdk_gl_get_glCompressedTexImage2DARB () != NULL);
+          supported &= (gdk_gl_get_glCompressedTexImage1DARB () != NULL);
+          supported &= (gdk_gl_get_glCompressedTexSubImage3DARB () != NULL);
+          supported &= (gdk_gl_get_glCompressedTexSubImage2DARB () != NULL);
+          supported &= (gdk_gl_get_glCompressedTexSubImage1DARB () != NULL);
+          supported &= (gdk_gl_get_glGetCompressedTexImageARB () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_texture_object () - %s",
+    g_message (" - gdk_gl_get_GL_ARB_texture_compression () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_texture_object;
+  return &_procs_GL_ARB_texture_compression;
 }
 
 /*
- * GL_SGIS_detail_texture
+ * GL_ARB_point_parameters
  */
 
-static GdkGL_GL_SGIS_detail_texture _procs_GL_SGIS_detail_texture = {
-  (GdkGLProc_glDetailTexFuncSGIS) -1,
-  (GdkGLProc_glGetDetailTexFuncSGIS) -1
+static GdkGL_GL_ARB_point_parameters _procs_GL_ARB_point_parameters = {
+  (GdkGLProc_glPointParameterfARB) -1,
+  (GdkGLProc_glPointParameterfvARB) -1
 };
 
-/* glDetailTexFuncSGIS */
+/* glPointParameterfARB */
 GdkGLProc
-gdk_gl_get_glDetailTexFuncSGIS (void)
+gdk_gl_get_glPointParameterfARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS == (GdkGLProc_glDetailTexFuncSGIS) -1)
-    _procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS =
-      (GdkGLProc_glDetailTexFuncSGIS) gdk_gl_get_proc_address ("glDetailTexFuncSGIS");
+  if (_procs_GL_ARB_point_parameters.glPointParameterfARB == (GdkGLProc_glPointParameterfARB) -1)
+    _procs_GL_ARB_point_parameters.glPointParameterfARB =
+      (GdkGLProc_glPointParameterfARB) gdk_gl_get_proc_address ("glPointParameterfARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDetailTexFuncSGIS () - %s",
-               (_procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPointParameterfARB () - %s",
+               (_procs_GL_ARB_point_parameters.glPointParameterfARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_point_parameters.glPointParameterfARB);
 }
 
-/* glGetDetailTexFuncSGIS */
+/* glPointParameterfvARB */
 GdkGLProc
-gdk_gl_get_glGetDetailTexFuncSGIS (void)
+gdk_gl_get_glPointParameterfvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS == (GdkGLProc_glGetDetailTexFuncSGIS) -1)
-    _procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS =
-      (GdkGLProc_glGetDetailTexFuncSGIS) gdk_gl_get_proc_address ("glGetDetailTexFuncSGIS");
+  if (_procs_GL_ARB_point_parameters.glPointParameterfvARB == (GdkGLProc_glPointParameterfvARB) -1)
+    _procs_GL_ARB_point_parameters.glPointParameterfvARB =
+      (GdkGLProc_glPointParameterfvARB) gdk_gl_get_proc_address ("glPointParameterfvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetDetailTexFuncSGIS () - %s",
-               (_procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPointParameterfvARB () - %s",
+               (_procs_GL_ARB_point_parameters.glPointParameterfvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_point_parameters.glPointParameterfvARB);
 }
 
-/* Get GL_SGIS_detail_texture functions */
-GdkGL_GL_SGIS_detail_texture *
-gdk_gl_get_GL_SGIS_detail_texture (void)
+/* Get GL_ARB_point_parameters functions */
+GdkGL_GL_ARB_point_parameters *
+gdk_gl_get_GL_ARB_point_parameters (void)
 {
   static gint supported = -1;
 
@@ -7756,419 +7785,365 @@ gdk_gl_get_GL_SGIS_detail_texture (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_detail_texture");
+      supported = gdk_gl_query_gl_extension ("GL_ARB_point_parameters");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glDetailTexFuncSGIS () != NULL);
-          supported &= (gdk_gl_get_glGetDetailTexFuncSGIS () != NULL);
+          supported &= (gdk_gl_get_glPointParameterfARB () != NULL);
+          supported &= (gdk_gl_get_glPointParameterfvARB () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_detail_texture () - %s",
+    g_message (" - gdk_gl_get_GL_ARB_point_parameters () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_SGIS_detail_texture;
+  return &_procs_GL_ARB_point_parameters;
 }
 
 /*
- * GL_SGIS_sharpen_texture
+ * GL_ARB_vertex_blend
  */
 
-static GdkGL_GL_SGIS_sharpen_texture _procs_GL_SGIS_sharpen_texture = {
-  (GdkGLProc_glSharpenTexFuncSGIS) -1,
-  (GdkGLProc_glGetSharpenTexFuncSGIS) -1
+static GdkGL_GL_ARB_vertex_blend _procs_GL_ARB_vertex_blend = {
+  (GdkGLProc_glWeightbvARB) -1,
+  (GdkGLProc_glWeightsvARB) -1,
+  (GdkGLProc_glWeightivARB) -1,
+  (GdkGLProc_glWeightfvARB) -1,
+  (GdkGLProc_glWeightdvARB) -1,
+  (GdkGLProc_glWeightubvARB) -1,
+  (GdkGLProc_glWeightusvARB) -1,
+  (GdkGLProc_glWeightuivARB) -1,
+  (GdkGLProc_glWeightPointerARB) -1,
+  (GdkGLProc_glVertexBlendARB) -1
 };
 
-/* glSharpenTexFuncSGIS */
+/* glWeightbvARB */
 GdkGLProc
-gdk_gl_get_glSharpenTexFuncSGIS (void)
+gdk_gl_get_glWeightbvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS == (GdkGLProc_glSharpenTexFuncSGIS) -1)
-    _procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS =
-      (GdkGLProc_glSharpenTexFuncSGIS) gdk_gl_get_proc_address ("glSharpenTexFuncSGIS");
+  if (_procs_GL_ARB_vertex_blend.glWeightbvARB == (GdkGLProc_glWeightbvARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightbvARB =
+      (GdkGLProc_glWeightbvARB) gdk_gl_get_proc_address ("glWeightbvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSharpenTexFuncSGIS () - %s",
-               (_procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWeightbvARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightbvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightbvARB);
 }
 
-/* glGetSharpenTexFuncSGIS */
+/* glWeightsvARB */
 GdkGLProc
-gdk_gl_get_glGetSharpenTexFuncSGIS (void)
+gdk_gl_get_glWeightsvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS == (GdkGLProc_glGetSharpenTexFuncSGIS) -1)
-    _procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS =
-      (GdkGLProc_glGetSharpenTexFuncSGIS) gdk_gl_get_proc_address ("glGetSharpenTexFuncSGIS");
+  if (_procs_GL_ARB_vertex_blend.glWeightsvARB == (GdkGLProc_glWeightsvARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightsvARB =
+      (GdkGLProc_glWeightsvARB) gdk_gl_get_proc_address ("glWeightsvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetSharpenTexFuncSGIS () - %s",
-               (_procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWeightsvARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightsvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightsvARB);
 }
 
-/* Get GL_SGIS_sharpen_texture functions */
-GdkGL_GL_SGIS_sharpen_texture *
-gdk_gl_get_GL_SGIS_sharpen_texture (void)
+/* glWeightivARB */
+GdkGLProc
+gdk_gl_get_glWeightivARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_sharpen_texture");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glSharpenTexFuncSGIS () != NULL);
-          supported &= (gdk_gl_get_glGetSharpenTexFuncSGIS () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_vertex_blend.glWeightivARB == (GdkGLProc_glWeightivARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightivARB =
+      (GdkGLProc_glWeightivARB) gdk_gl_get_proc_address ("glWeightivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_sharpen_texture () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glWeightivARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightivARB) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIS_sharpen_texture;
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightivARB);
 }
 
-/*
- * GL_SGIS_multisample
- */
-
-static GdkGL_GL_SGIS_multisample _procs_GL_SGIS_multisample = {
-  (GdkGLProc_glSampleMaskSGIS) -1,
-  (GdkGLProc_glSamplePatternSGIS) -1
-};
-
-/* glSampleMaskSGIS */
+/* glWeightfvARB */
 GdkGLProc
-gdk_gl_get_glSampleMaskSGIS (void)
+gdk_gl_get_glWeightfvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_multisample.glSampleMaskSGIS == (GdkGLProc_glSampleMaskSGIS) -1)
-    _procs_GL_SGIS_multisample.glSampleMaskSGIS =
-      (GdkGLProc_glSampleMaskSGIS) gdk_gl_get_proc_address ("glSampleMaskSGIS");
+  if (_procs_GL_ARB_vertex_blend.glWeightfvARB == (GdkGLProc_glWeightfvARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightfvARB =
+      (GdkGLProc_glWeightfvARB) gdk_gl_get_proc_address ("glWeightfvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSampleMaskSGIS () - %s",
-               (_procs_GL_SGIS_multisample.glSampleMaskSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWeightfvARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightfvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_multisample.glSampleMaskSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightfvARB);
 }
 
-/* glSamplePatternSGIS */
+/* glWeightdvARB */
 GdkGLProc
-gdk_gl_get_glSamplePatternSGIS (void)
+gdk_gl_get_glWeightdvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_multisample.glSamplePatternSGIS == (GdkGLProc_glSamplePatternSGIS) -1)
-    _procs_GL_SGIS_multisample.glSamplePatternSGIS =
-      (GdkGLProc_glSamplePatternSGIS) gdk_gl_get_proc_address ("glSamplePatternSGIS");
+  if (_procs_GL_ARB_vertex_blend.glWeightdvARB == (GdkGLProc_glWeightdvARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightdvARB =
+      (GdkGLProc_glWeightdvARB) gdk_gl_get_proc_address ("glWeightdvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSamplePatternSGIS () - %s",
-               (_procs_GL_SGIS_multisample.glSamplePatternSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWeightdvARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightdvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_multisample.glSamplePatternSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightdvARB);
 }
 
-/* Get GL_SGIS_multisample functions */
-GdkGL_GL_SGIS_multisample *
-gdk_gl_get_GL_SGIS_multisample (void)
+/* glWeightubvARB */
+GdkGLProc
+gdk_gl_get_glWeightubvARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_multisample");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glSampleMaskSGIS () != NULL);
-          supported &= (gdk_gl_get_glSamplePatternSGIS () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_vertex_blend.glWeightubvARB == (GdkGLProc_glWeightubvARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightubvARB =
+      (GdkGLProc_glWeightubvARB) gdk_gl_get_proc_address ("glWeightubvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_multisample () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glWeightubvARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightubvARB) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIS_multisample;
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightubvARB);
 }
 
-/*
- * GL_EXT_vertex_array
- */
-
-static GdkGL_GL_EXT_vertex_array _procs_GL_EXT_vertex_array = {
-  (GdkGLProc_glArrayElementEXT) -1,
-  (GdkGLProc_glColorPointerEXT) -1,
-  (GdkGLProc_glDrawArraysEXT) -1,
-  (GdkGLProc_glEdgeFlagPointerEXT) -1,
-  (GdkGLProc_glGetPointervEXT) -1,
-  (GdkGLProc_glIndexPointerEXT) -1,
-  (GdkGLProc_glNormalPointerEXT) -1,
-  (GdkGLProc_glTexCoordPointerEXT) -1,
-  (GdkGLProc_glVertexPointerEXT) -1
-};
-
-/* glArrayElementEXT */
+/* glWeightusvARB */
 GdkGLProc
-gdk_gl_get_glArrayElementEXT (void)
+gdk_gl_get_glWeightusvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glArrayElementEXT == (GdkGLProc_glArrayElementEXT) -1)
-    _procs_GL_EXT_vertex_array.glArrayElementEXT =
-      (GdkGLProc_glArrayElementEXT) gdk_gl_get_proc_address ("glArrayElementEXT");
+  if (_procs_GL_ARB_vertex_blend.glWeightusvARB == (GdkGLProc_glWeightusvARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightusvARB =
+      (GdkGLProc_glWeightusvARB) gdk_gl_get_proc_address ("glWeightusvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glArrayElementEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glArrayElementEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWeightusvARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightusvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glArrayElementEXT);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightusvARB);
 }
 
-/* glColorPointerEXT */
+/* glWeightuivARB */
 GdkGLProc
-gdk_gl_get_glColorPointerEXT (void)
+gdk_gl_get_glWeightuivARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glColorPointerEXT == (GdkGLProc_glColorPointerEXT) -1)
-    _procs_GL_EXT_vertex_array.glColorPointerEXT =
-      (GdkGLProc_glColorPointerEXT) gdk_gl_get_proc_address ("glColorPointerEXT");
+  if (_procs_GL_ARB_vertex_blend.glWeightuivARB == (GdkGLProc_glWeightuivARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightuivARB =
+      (GdkGLProc_glWeightuivARB) gdk_gl_get_proc_address ("glWeightuivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glColorPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWeightuivARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightuivARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glColorPointerEXT);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightuivARB);
 }
 
-/* glDrawArraysEXT */
+/* glWeightPointerARB */
 GdkGLProc
-gdk_gl_get_glDrawArraysEXT (void)
+gdk_gl_get_glWeightPointerARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glDrawArraysEXT == (GdkGLProc_glDrawArraysEXT) -1)
-    _procs_GL_EXT_vertex_array.glDrawArraysEXT =
-      (GdkGLProc_glDrawArraysEXT) gdk_gl_get_proc_address ("glDrawArraysEXT");
+  if (_procs_GL_ARB_vertex_blend.glWeightPointerARB == (GdkGLProc_glWeightPointerARB) -1)
+    _procs_GL_ARB_vertex_blend.glWeightPointerARB =
+      (GdkGLProc_glWeightPointerARB) gdk_gl_get_proc_address ("glWeightPointerARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawArraysEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glDrawArraysEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWeightPointerARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glWeightPointerARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glDrawArraysEXT);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glWeightPointerARB);
 }
 
-/* glEdgeFlagPointerEXT */
+/* glVertexBlendARB */
 GdkGLProc
-gdk_gl_get_glEdgeFlagPointerEXT (void)
+gdk_gl_get_glVertexBlendARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT == (GdkGLProc_glEdgeFlagPointerEXT) -1)
-    _procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT =
-      (GdkGLProc_glEdgeFlagPointerEXT) gdk_gl_get_proc_address ("glEdgeFlagPointerEXT");
+  if (_procs_GL_ARB_vertex_blend.glVertexBlendARB == (GdkGLProc_glVertexBlendARB) -1)
+    _procs_GL_ARB_vertex_blend.glVertexBlendARB =
+      (GdkGLProc_glVertexBlendARB) gdk_gl_get_proc_address ("glVertexBlendARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEdgeFlagPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexBlendARB () - %s",
+               (_procs_GL_ARB_vertex_blend.glVertexBlendARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT);
+  return (GdkGLProc) (_procs_GL_ARB_vertex_blend.glVertexBlendARB);
 }
 
-/* glGetPointervEXT */
-GdkGLProc
-gdk_gl_get_glGetPointervEXT (void)
+/* Get GL_ARB_vertex_blend functions */
+GdkGL_GL_ARB_vertex_blend *
+gdk_gl_get_GL_ARB_vertex_blend (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glGetPointervEXT == (GdkGLProc_glGetPointervEXT) -1)
-    _procs_GL_EXT_vertex_array.glGetPointervEXT =
-      (GdkGLProc_glGetPointervEXT) gdk_gl_get_proc_address ("glGetPointervEXT");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_blend");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glWeightbvARB () != NULL);
+          supported &= (gdk_gl_get_glWeightsvARB () != NULL);
+          supported &= (gdk_gl_get_glWeightivARB () != NULL);
+          supported &= (gdk_gl_get_glWeightfvARB () != NULL);
+          supported &= (gdk_gl_get_glWeightdvARB () != NULL);
+          supported &= (gdk_gl_get_glWeightubvARB () != NULL);
+          supported &= (gdk_gl_get_glWeightusvARB () != NULL);
+          supported &= (gdk_gl_get_glWeightuivARB () != NULL);
+          supported &= (gdk_gl_get_glWeightPointerARB () != NULL);
+          supported &= (gdk_gl_get_glVertexBlendARB () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetPointervEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glGetPointervEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_ARB_vertex_blend () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glGetPointervEXT);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_vertex_blend;
 }
 
-/* glIndexPointerEXT */
+/*
+ * GL_ARB_matrix_palette
+ */
+
+static GdkGL_GL_ARB_matrix_palette _procs_GL_ARB_matrix_palette = {
+  (GdkGLProc_glCurrentPaletteMatrixARB) -1,
+  (GdkGLProc_glMatrixIndexubvARB) -1,
+  (GdkGLProc_glMatrixIndexusvARB) -1,
+  (GdkGLProc_glMatrixIndexuivARB) -1,
+  (GdkGLProc_glMatrixIndexPointerARB) -1
+};
+
+/* glCurrentPaletteMatrixARB */
 GdkGLProc
-gdk_gl_get_glIndexPointerEXT (void)
+gdk_gl_get_glCurrentPaletteMatrixARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glIndexPointerEXT == (GdkGLProc_glIndexPointerEXT) -1)
-    _procs_GL_EXT_vertex_array.glIndexPointerEXT =
-      (GdkGLProc_glIndexPointerEXT) gdk_gl_get_proc_address ("glIndexPointerEXT");
+  if (_procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB == (GdkGLProc_glCurrentPaletteMatrixARB) -1)
+    _procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB =
+      (GdkGLProc_glCurrentPaletteMatrixARB) gdk_gl_get_proc_address ("glCurrentPaletteMatrixARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIndexPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glIndexPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCurrentPaletteMatrixARB () - %s",
+               (_procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glIndexPointerEXT);
+  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glCurrentPaletteMatrixARB);
 }
 
-/* glNormalPointerEXT */
+/* glMatrixIndexubvARB */
 GdkGLProc
-gdk_gl_get_glNormalPointerEXT (void)
+gdk_gl_get_glMatrixIndexubvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glNormalPointerEXT == (GdkGLProc_glNormalPointerEXT) -1)
-    _procs_GL_EXT_vertex_array.glNormalPointerEXT =
-      (GdkGLProc_glNormalPointerEXT) gdk_gl_get_proc_address ("glNormalPointerEXT");
+  if (_procs_GL_ARB_matrix_palette.glMatrixIndexubvARB == (GdkGLProc_glMatrixIndexubvARB) -1)
+    _procs_GL_ARB_matrix_palette.glMatrixIndexubvARB =
+      (GdkGLProc_glMatrixIndexubvARB) gdk_gl_get_proc_address ("glMatrixIndexubvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glNormalPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixIndexubvARB () - %s",
+               (_procs_GL_ARB_matrix_palette.glMatrixIndexubvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glNormalPointerEXT);
+  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexubvARB);
 }
 
-/* glTexCoordPointerEXT */
+/* glMatrixIndexusvARB */
 GdkGLProc
-gdk_gl_get_glTexCoordPointerEXT (void)
+gdk_gl_get_glMatrixIndexusvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glTexCoordPointerEXT == (GdkGLProc_glTexCoordPointerEXT) -1)
-    _procs_GL_EXT_vertex_array.glTexCoordPointerEXT =
-      (GdkGLProc_glTexCoordPointerEXT) gdk_gl_get_proc_address ("glTexCoordPointerEXT");
+  if (_procs_GL_ARB_matrix_palette.glMatrixIndexusvARB == (GdkGLProc_glMatrixIndexusvARB) -1)
+    _procs_GL_ARB_matrix_palette.glMatrixIndexusvARB =
+      (GdkGLProc_glMatrixIndexusvARB) gdk_gl_get_proc_address ("glMatrixIndexusvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoordPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glTexCoordPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixIndexusvARB () - %s",
+               (_procs_GL_ARB_matrix_palette.glMatrixIndexusvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glTexCoordPointerEXT);
+  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexusvARB);
 }
 
-/* glVertexPointerEXT */
+/* glMatrixIndexuivARB */
 GdkGLProc
-gdk_gl_get_glVertexPointerEXT (void)
+gdk_gl_get_glMatrixIndexuivARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_array.glVertexPointerEXT == (GdkGLProc_glVertexPointerEXT) -1)
-    _procs_GL_EXT_vertex_array.glVertexPointerEXT =
-      (GdkGLProc_glVertexPointerEXT) gdk_gl_get_proc_address ("glVertexPointerEXT");
+  if (_procs_GL_ARB_matrix_palette.glMatrixIndexuivARB == (GdkGLProc_glMatrixIndexuivARB) -1)
+    _procs_GL_ARB_matrix_palette.glMatrixIndexuivARB =
+      (GdkGLProc_glMatrixIndexuivARB) gdk_gl_get_proc_address ("glMatrixIndexuivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_array.glVertexPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixIndexuivARB () - %s",
+               (_procs_GL_ARB_matrix_palette.glMatrixIndexuivARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glVertexPointerEXT);
+  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexuivARB);
 }
 
-/* Get GL_EXT_vertex_array functions */
-GdkGL_GL_EXT_vertex_array *
-gdk_gl_get_GL_EXT_vertex_array (void)
+/* glMatrixIndexPointerARB */
+GdkGLProc
+gdk_gl_get_glMatrixIndexPointerARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_vertex_array");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glArrayElementEXT () != NULL);
-          supported &= (gdk_gl_get_glColorPointerEXT () != NULL);
-          supported &= (gdk_gl_get_glDrawArraysEXT () != NULL);
-          supported &= (gdk_gl_get_glEdgeFlagPointerEXT () != NULL);
-          supported &= (gdk_gl_get_glGetPointervEXT () != NULL);
-          supported &= (gdk_gl_get_glIndexPointerEXT () != NULL);
-          supported &= (gdk_gl_get_glNormalPointerEXT () != NULL);
-          supported &= (gdk_gl_get_glTexCoordPointerEXT () != NULL);
-          supported &= (gdk_gl_get_glVertexPointerEXT () != NULL);
-        }
-    }
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_vertex_array () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_vertex_array;
-}
-
-/*
- * GL_EXT_blend_minmax
- */
-
-static GdkGL_GL_EXT_blend_minmax _procs_GL_EXT_blend_minmax = {
-  (GdkGLProc_glBlendEquationEXT) -1
-};
-
-/* glBlendEquationEXT */
-GdkGLProc
-gdk_gl_get_glBlendEquationEXT (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_EXT_blend_minmax.glBlendEquationEXT == (GdkGLProc_glBlendEquationEXT) -1)
-    _procs_GL_EXT_blend_minmax.glBlendEquationEXT =
-      (GdkGLProc_glBlendEquationEXT) gdk_gl_get_proc_address ("glBlendEquationEXT");
+  if (_procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB == (GdkGLProc_glMatrixIndexPointerARB) -1)
+    _procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB =
+      (GdkGLProc_glMatrixIndexPointerARB) gdk_gl_get_proc_address ("glMatrixIndexPointerARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBlendEquationEXT () - %s",
-               (_procs_GL_EXT_blend_minmax.glBlendEquationEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixIndexPointerARB () - %s",
+               (_procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_blend_minmax.glBlendEquationEXT);
+  return (GdkGLProc) (_procs_GL_ARB_matrix_palette.glMatrixIndexPointerARB);
 }
 
-/* Get GL_EXT_blend_minmax functions */
-GdkGL_GL_EXT_blend_minmax *
-gdk_gl_get_GL_EXT_blend_minmax (void)
+/* Get GL_ARB_matrix_palette functions */
+GdkGL_GL_ARB_matrix_palette *
+gdk_gl_get_GL_ARB_matrix_palette (void)
 {
   static gint supported = -1;
 
@@ -8177,413 +8152,342 @@ gdk_gl_get_GL_EXT_blend_minmax (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_blend_minmax");
+      supported = gdk_gl_query_gl_extension ("GL_ARB_matrix_palette");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glBlendEquationEXT () != NULL);
+          supported &= (gdk_gl_get_glCurrentPaletteMatrixARB () != NULL);
+          supported &= (gdk_gl_get_glMatrixIndexubvARB () != NULL);
+          supported &= (gdk_gl_get_glMatrixIndexusvARB () != NULL);
+          supported &= (gdk_gl_get_glMatrixIndexuivARB () != NULL);
+          supported &= (gdk_gl_get_glMatrixIndexPointerARB () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_blend_minmax () - %s",
+    g_message (" - gdk_gl_get_GL_ARB_matrix_palette () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_blend_minmax;
+  return &_procs_GL_ARB_matrix_palette;
 }
 
 /*
- * GL_SGIX_sprite
+ * GL_ARB_window_pos
  */
 
-static GdkGL_GL_SGIX_sprite _procs_GL_SGIX_sprite = {
-  (GdkGLProc_glSpriteParameterfSGIX) -1,
-  (GdkGLProc_glSpriteParameterfvSGIX) -1,
-  (GdkGLProc_glSpriteParameteriSGIX) -1,
-  (GdkGLProc_glSpriteParameterivSGIX) -1
+static GdkGL_GL_ARB_window_pos _procs_GL_ARB_window_pos = {
+  (GdkGLProc_glWindowPos2dARB) -1,
+  (GdkGLProc_glWindowPos2dvARB) -1,
+  (GdkGLProc_glWindowPos2fARB) -1,
+  (GdkGLProc_glWindowPos2fvARB) -1,
+  (GdkGLProc_glWindowPos2iARB) -1,
+  (GdkGLProc_glWindowPos2ivARB) -1,
+  (GdkGLProc_glWindowPos2sARB) -1,
+  (GdkGLProc_glWindowPos2svARB) -1,
+  (GdkGLProc_glWindowPos3dARB) -1,
+  (GdkGLProc_glWindowPos3dvARB) -1,
+  (GdkGLProc_glWindowPos3fARB) -1,
+  (GdkGLProc_glWindowPos3fvARB) -1,
+  (GdkGLProc_glWindowPos3iARB) -1,
+  (GdkGLProc_glWindowPos3ivARB) -1,
+  (GdkGLProc_glWindowPos3sARB) -1,
+  (GdkGLProc_glWindowPos3svARB) -1
 };
 
-/* glSpriteParameterfSGIX */
+/* glWindowPos2dARB */
 GdkGLProc
-gdk_gl_get_glSpriteParameterfSGIX (void)
+gdk_gl_get_glWindowPos2dARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_sprite.glSpriteParameterfSGIX == (GdkGLProc_glSpriteParameterfSGIX) -1)
-    _procs_GL_SGIX_sprite.glSpriteParameterfSGIX =
-      (GdkGLProc_glSpriteParameterfSGIX) gdk_gl_get_proc_address ("glSpriteParameterfSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos2dARB == (GdkGLProc_glWindowPos2dARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2dARB =
+      (GdkGLProc_glWindowPos2dARB) gdk_gl_get_proc_address ("glWindowPos2dARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSpriteParameterfSGIX () - %s",
-               (_procs_GL_SGIX_sprite.glSpriteParameterfSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos2dARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2dARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameterfSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2dARB);
 }
 
-/* glSpriteParameterfvSGIX */
+/* glWindowPos2dvARB */
 GdkGLProc
-gdk_gl_get_glSpriteParameterfvSGIX (void)
+gdk_gl_get_glWindowPos2dvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_sprite.glSpriteParameterfvSGIX == (GdkGLProc_glSpriteParameterfvSGIX) -1)
-    _procs_GL_SGIX_sprite.glSpriteParameterfvSGIX =
-      (GdkGLProc_glSpriteParameterfvSGIX) gdk_gl_get_proc_address ("glSpriteParameterfvSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos2dvARB == (GdkGLProc_glWindowPos2dvARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2dvARB =
+      (GdkGLProc_glWindowPos2dvARB) gdk_gl_get_proc_address ("glWindowPos2dvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSpriteParameterfvSGIX () - %s",
-               (_procs_GL_SGIX_sprite.glSpriteParameterfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos2dvARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2dvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameterfvSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2dvARB);
 }
 
-/* glSpriteParameteriSGIX */
+/* glWindowPos2fARB */
 GdkGLProc
-gdk_gl_get_glSpriteParameteriSGIX (void)
+gdk_gl_get_glWindowPos2fARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_sprite.glSpriteParameteriSGIX == (GdkGLProc_glSpriteParameteriSGIX) -1)
-    _procs_GL_SGIX_sprite.glSpriteParameteriSGIX =
-      (GdkGLProc_glSpriteParameteriSGIX) gdk_gl_get_proc_address ("glSpriteParameteriSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos2fARB == (GdkGLProc_glWindowPos2fARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2fARB =
+      (GdkGLProc_glWindowPos2fARB) gdk_gl_get_proc_address ("glWindowPos2fARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSpriteParameteriSGIX () - %s",
-               (_procs_GL_SGIX_sprite.glSpriteParameteriSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos2fARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2fARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameteriSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2fARB);
 }
 
-/* glSpriteParameterivSGIX */
+/* glWindowPos2fvARB */
 GdkGLProc
-gdk_gl_get_glSpriteParameterivSGIX (void)
+gdk_gl_get_glWindowPos2fvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_sprite.glSpriteParameterivSGIX == (GdkGLProc_glSpriteParameterivSGIX) -1)
-    _procs_GL_SGIX_sprite.glSpriteParameterivSGIX =
-      (GdkGLProc_glSpriteParameterivSGIX) gdk_gl_get_proc_address ("glSpriteParameterivSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos2fvARB == (GdkGLProc_glWindowPos2fvARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2fvARB =
+      (GdkGLProc_glWindowPos2fvARB) gdk_gl_get_proc_address ("glWindowPos2fvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSpriteParameterivSGIX () - %s",
-               (_procs_GL_SGIX_sprite.glSpriteParameterivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos2fvARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2fvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameterivSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2fvARB);
 }
 
-/* Get GL_SGIX_sprite functions */
-GdkGL_GL_SGIX_sprite *
-gdk_gl_get_GL_SGIX_sprite (void)
+/* glWindowPos2iARB */
+GdkGLProc
+gdk_gl_get_glWindowPos2iARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_sprite");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glSpriteParameterfSGIX () != NULL);
-          supported &= (gdk_gl_get_glSpriteParameterfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glSpriteParameteriSGIX () != NULL);
-          supported &= (gdk_gl_get_glSpriteParameterivSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_window_pos.glWindowPos2iARB == (GdkGLProc_glWindowPos2iARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2iARB =
+      (GdkGLProc_glWindowPos2iARB) gdk_gl_get_proc_address ("glWindowPos2iARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_sprite () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos2iARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2iARB) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2iARB);
+}
+
+/* glWindowPos2ivARB */
+GdkGLProc
+gdk_gl_get_glWindowPos2ivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_SGIX_sprite;
-}
+  if (_procs_GL_ARB_window_pos.glWindowPos2ivARB == (GdkGLProc_glWindowPos2ivARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2ivARB =
+      (GdkGLProc_glWindowPos2ivARB) gdk_gl_get_proc_address ("glWindowPos2ivARB");
 
-/*
- * GL_EXT_point_parameters
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2ivARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2ivARB) ? "supported" : "not supported"));
 
-static GdkGL_GL_EXT_point_parameters _procs_GL_EXT_point_parameters = {
-  (GdkGLProc_glPointParameterfEXT) -1,
-  (GdkGLProc_glPointParameterfvEXT) -1
-};
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2ivARB);
+}
 
-/* glPointParameterfEXT */
+/* glWindowPos2sARB */
 GdkGLProc
-gdk_gl_get_glPointParameterfEXT (void)
+gdk_gl_get_glWindowPos2sARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_point_parameters.glPointParameterfEXT == (GdkGLProc_glPointParameterfEXT) -1)
-    _procs_GL_EXT_point_parameters.glPointParameterfEXT =
-      (GdkGLProc_glPointParameterfEXT) gdk_gl_get_proc_address ("glPointParameterfEXT");
+  if (_procs_GL_ARB_window_pos.glWindowPos2sARB == (GdkGLProc_glWindowPos2sARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2sARB =
+      (GdkGLProc_glWindowPos2sARB) gdk_gl_get_proc_address ("glWindowPos2sARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameterfEXT () - %s",
-               (_procs_GL_EXT_point_parameters.glPointParameterfEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos2sARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2sARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_point_parameters.glPointParameterfEXT);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2sARB);
 }
 
-/* glPointParameterfvEXT */
+/* glWindowPos2svARB */
 GdkGLProc
-gdk_gl_get_glPointParameterfvEXT (void)
+gdk_gl_get_glWindowPos2svARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_point_parameters.glPointParameterfvEXT == (GdkGLProc_glPointParameterfvEXT) -1)
-    _procs_GL_EXT_point_parameters.glPointParameterfvEXT =
-      (GdkGLProc_glPointParameterfvEXT) gdk_gl_get_proc_address ("glPointParameterfvEXT");
+  if (_procs_GL_ARB_window_pos.glWindowPos2svARB == (GdkGLProc_glWindowPos2svARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos2svARB =
+      (GdkGLProc_glWindowPos2svARB) gdk_gl_get_proc_address ("glWindowPos2svARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameterfvEXT () - %s",
-               (_procs_GL_EXT_point_parameters.glPointParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos2svARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos2svARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_point_parameters.glPointParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos2svARB);
 }
 
-/* Get GL_EXT_point_parameters functions */
-GdkGL_GL_EXT_point_parameters *
-gdk_gl_get_GL_EXT_point_parameters (void)
+/* glWindowPos3dARB */
+GdkGLProc
+gdk_gl_get_glWindowPos3dARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_point_parameters");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glPointParameterfEXT () != NULL);
-          supported &= (gdk_gl_get_glPointParameterfvEXT () != NULL);
-        }
-    }
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_point_parameters () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_point_parameters;
-}
-
-/*
- * GL_SGIS_point_parameters
- */
-
-static GdkGL_GL_SGIS_point_parameters _procs_GL_SGIS_point_parameters = {
-  (GdkGLProc_glPointParameterfSGIS) -1,
-  (GdkGLProc_glPointParameterfvSGIS) -1
-};
-
-/* glPointParameterfSGIS */
-GdkGLProc
-gdk_gl_get_glPointParameterfSGIS (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SGIS_point_parameters.glPointParameterfSGIS == (GdkGLProc_glPointParameterfSGIS) -1)
-    _procs_GL_SGIS_point_parameters.glPointParameterfSGIS =
-      (GdkGLProc_glPointParameterfSGIS) gdk_gl_get_proc_address ("glPointParameterfSGIS");
+  if (_procs_GL_ARB_window_pos.glWindowPos3dARB == (GdkGLProc_glWindowPos3dARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3dARB =
+      (GdkGLProc_glWindowPos3dARB) gdk_gl_get_proc_address ("glWindowPos3dARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameterfSGIS () - %s",
-               (_procs_GL_SGIS_point_parameters.glPointParameterfSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos3dARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3dARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_point_parameters.glPointParameterfSGIS);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3dARB);
 }
 
-/* glPointParameterfvSGIS */
+/* glWindowPos3dvARB */
 GdkGLProc
-gdk_gl_get_glPointParameterfvSGIS (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SGIS_point_parameters.glPointParameterfvSGIS == (GdkGLProc_glPointParameterfvSGIS) -1)
-    _procs_GL_SGIS_point_parameters.glPointParameterfvSGIS =
-      (GdkGLProc_glPointParameterfvSGIS) gdk_gl_get_proc_address ("glPointParameterfvSGIS");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameterfvSGIS () - %s",
-               (_procs_GL_SGIS_point_parameters.glPointParameterfvSGIS) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_SGIS_point_parameters.glPointParameterfvSGIS);
-}
-
-/* Get GL_SGIS_point_parameters functions */
-GdkGL_GL_SGIS_point_parameters *
-gdk_gl_get_GL_SGIS_point_parameters (void)
+gdk_gl_get_glWindowPos3dvARB (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_point_parameters");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glPointParameterfSGIS () != NULL);
-          supported &= (gdk_gl_get_glPointParameterfvSGIS () != NULL);
-        }
-    }
+  if (_procs_GL_ARB_window_pos.glWindowPos3dvARB == (GdkGLProc_glWindowPos3dvARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3dvARB =
+      (GdkGLProc_glWindowPos3dvARB) gdk_gl_get_proc_address ("glWindowPos3dvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_point_parameters () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glWindowPos3dvARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3dvARB) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIS_point_parameters;
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3dvARB);
 }
 
-/*
- * GL_SGIX_instruments
- */
-
-static GdkGL_GL_SGIX_instruments _procs_GL_SGIX_instruments = {
-  (GdkGLProc_glGetInstrumentsSGIX) -1,
-  (GdkGLProc_glInstrumentsBufferSGIX) -1,
-  (GdkGLProc_glPollInstrumentsSGIX) -1,
-  (GdkGLProc_glReadInstrumentsSGIX) -1,
-  (GdkGLProc_glStartInstrumentsSGIX) -1,
-  (GdkGLProc_glStopInstrumentsSGIX) -1
-};
-
-/* glGetInstrumentsSGIX */
+/* glWindowPos3fARB */
 GdkGLProc
-gdk_gl_get_glGetInstrumentsSGIX (void)
+gdk_gl_get_glWindowPos3fARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_instruments.glGetInstrumentsSGIX == (GdkGLProc_glGetInstrumentsSGIX) -1)
-    _procs_GL_SGIX_instruments.glGetInstrumentsSGIX =
-      (GdkGLProc_glGetInstrumentsSGIX) gdk_gl_get_proc_address ("glGetInstrumentsSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos3fARB == (GdkGLProc_glWindowPos3fARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3fARB =
+      (GdkGLProc_glWindowPos3fARB) gdk_gl_get_proc_address ("glWindowPos3fARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetInstrumentsSGIX () - %s",
-               (_procs_GL_SGIX_instruments.glGetInstrumentsSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos3fARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3fARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_instruments.glGetInstrumentsSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3fARB);
 }
 
-/* glInstrumentsBufferSGIX */
+/* glWindowPos3fvARB */
 GdkGLProc
-gdk_gl_get_glInstrumentsBufferSGIX (void)
+gdk_gl_get_glWindowPos3fvARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_instruments.glInstrumentsBufferSGIX == (GdkGLProc_glInstrumentsBufferSGIX) -1)
-    _procs_GL_SGIX_instruments.glInstrumentsBufferSGIX =
-      (GdkGLProc_glInstrumentsBufferSGIX) gdk_gl_get_proc_address ("glInstrumentsBufferSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos3fvARB == (GdkGLProc_glWindowPos3fvARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3fvARB =
+      (GdkGLProc_glWindowPos3fvARB) gdk_gl_get_proc_address ("glWindowPos3fvARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glInstrumentsBufferSGIX () - %s",
-               (_procs_GL_SGIX_instruments.glInstrumentsBufferSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos3fvARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3fvARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_instruments.glInstrumentsBufferSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3fvARB);
 }
 
-/* glPollInstrumentsSGIX */
+/* glWindowPos3iARB */
 GdkGLProc
-gdk_gl_get_glPollInstrumentsSGIX (void)
+gdk_gl_get_glWindowPos3iARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_instruments.glPollInstrumentsSGIX == (GdkGLProc_glPollInstrumentsSGIX) -1)
-    _procs_GL_SGIX_instruments.glPollInstrumentsSGIX =
-      (GdkGLProc_glPollInstrumentsSGIX) gdk_gl_get_proc_address ("glPollInstrumentsSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos3iARB == (GdkGLProc_glWindowPos3iARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3iARB =
+      (GdkGLProc_glWindowPos3iARB) gdk_gl_get_proc_address ("glWindowPos3iARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPollInstrumentsSGIX () - %s",
-               (_procs_GL_SGIX_instruments.glPollInstrumentsSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos3iARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3iARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_instruments.glPollInstrumentsSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3iARB);
 }
 
-/* glReadInstrumentsSGIX */
+/* glWindowPos3ivARB */
 GdkGLProc
-gdk_gl_get_glReadInstrumentsSGIX (void)
+gdk_gl_get_glWindowPos3ivARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_instruments.glReadInstrumentsSGIX == (GdkGLProc_glReadInstrumentsSGIX) -1)
-    _procs_GL_SGIX_instruments.glReadInstrumentsSGIX =
-      (GdkGLProc_glReadInstrumentsSGIX) gdk_gl_get_proc_address ("glReadInstrumentsSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos3ivARB == (GdkGLProc_glWindowPos3ivARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3ivARB =
+      (GdkGLProc_glWindowPos3ivARB) gdk_gl_get_proc_address ("glWindowPos3ivARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReadInstrumentsSGIX () - %s",
-               (_procs_GL_SGIX_instruments.glReadInstrumentsSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos3ivARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3ivARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_instruments.glReadInstrumentsSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3ivARB);
 }
 
-/* glStartInstrumentsSGIX */
+/* glWindowPos3sARB */
 GdkGLProc
-gdk_gl_get_glStartInstrumentsSGIX (void)
+gdk_gl_get_glWindowPos3sARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_instruments.glStartInstrumentsSGIX == (GdkGLProc_glStartInstrumentsSGIX) -1)
-    _procs_GL_SGIX_instruments.glStartInstrumentsSGIX =
-      (GdkGLProc_glStartInstrumentsSGIX) gdk_gl_get_proc_address ("glStartInstrumentsSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos3sARB == (GdkGLProc_glWindowPos3sARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3sARB =
+      (GdkGLProc_glWindowPos3sARB) gdk_gl_get_proc_address ("glWindowPos3sARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glStartInstrumentsSGIX () - %s",
-               (_procs_GL_SGIX_instruments.glStartInstrumentsSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos3sARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3sARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_instruments.glStartInstrumentsSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3sARB);
 }
 
-/* glStopInstrumentsSGIX */
+/* glWindowPos3svARB */
 GdkGLProc
-gdk_gl_get_glStopInstrumentsSGIX (void)
+gdk_gl_get_glWindowPos3svARB (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_instruments.glStopInstrumentsSGIX == (GdkGLProc_glStopInstrumentsSGIX) -1)
-    _procs_GL_SGIX_instruments.glStopInstrumentsSGIX =
-      (GdkGLProc_glStopInstrumentsSGIX) gdk_gl_get_proc_address ("glStopInstrumentsSGIX");
+  if (_procs_GL_ARB_window_pos.glWindowPos3svARB == (GdkGLProc_glWindowPos3svARB) -1)
+    _procs_GL_ARB_window_pos.glWindowPos3svARB =
+      (GdkGLProc_glWindowPos3svARB) gdk_gl_get_proc_address ("glWindowPos3svARB");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glStopInstrumentsSGIX () - %s",
-               (_procs_GL_SGIX_instruments.glStopInstrumentsSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glWindowPos3svARB () - %s",
+               (_procs_GL_ARB_window_pos.glWindowPos3svARB) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_instruments.glStopInstrumentsSGIX);
+  return (GdkGLProc) (_procs_GL_ARB_window_pos.glWindowPos3svARB);
 }
 
-/* Get GL_SGIX_instruments functions */
-GdkGL_GL_SGIX_instruments *
-gdk_gl_get_GL_SGIX_instruments (void)
+/* Get GL_ARB_window_pos functions */
+GdkGL_GL_ARB_window_pos *
+gdk_gl_get_GL_ARB_window_pos (void)
 {
   static gint supported = -1;
 
@@ -8592,698 +8496,16652 @@ gdk_gl_get_GL_SGIX_instruments (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_instruments");
+      supported = gdk_gl_query_gl_extension ("GL_ARB_window_pos");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glGetInstrumentsSGIX () != NULL);
-          supported &= (gdk_gl_get_glInstrumentsBufferSGIX () != NULL);
-          supported &= (gdk_gl_get_glPollInstrumentsSGIX () != NULL);
-          supported &= (gdk_gl_get_glReadInstrumentsSGIX () != NULL);
-          supported &= (gdk_gl_get_glStartInstrumentsSGIX () != NULL);
-          supported &= (gdk_gl_get_glStopInstrumentsSGIX () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2dARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2dvARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2fARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2fvARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2iARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2ivARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2sARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2svARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3dARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3dvARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3fARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3fvARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3iARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3ivARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3sARB () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3svARB () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_instruments () - %s",
+    g_message (" - gdk_gl_get_GL_ARB_window_pos () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_SGIX_instruments;
+  return &_procs_GL_ARB_window_pos;
 }
 
 /*
- * GL_SGIX_framezoom
+ * GL_ARB_vertex_program
  */
 
-static GdkGL_GL_SGIX_framezoom _procs_GL_SGIX_framezoom = {
-  (GdkGLProc_glFrameZoomSGIX) -1
-};
-
-/* glFrameZoomSGIX */
-GdkGLProc
-gdk_gl_get_glFrameZoomSGIX (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SGIX_framezoom.glFrameZoomSGIX == (GdkGLProc_glFrameZoomSGIX) -1)
-    _procs_GL_SGIX_framezoom.glFrameZoomSGIX =
-      (GdkGLProc_glFrameZoomSGIX) gdk_gl_get_proc_address ("glFrameZoomSGIX");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFrameZoomSGIX () - %s",
-               (_procs_GL_SGIX_framezoom.glFrameZoomSGIX) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_SGIX_framezoom.glFrameZoomSGIX);
-}
-
-/* Get GL_SGIX_framezoom functions */
-GdkGL_GL_SGIX_framezoom *
+static GdkGL_GL_ARB_vertex_program _procs_GL_ARB_vertex_program = {
+  (GdkGLProc_glVertexAttrib1dARB) -1,
+  (GdkGLProc_glVertexAttrib1dvARB) -1,
+  (GdkGLProc_glVertexAttrib1fARB) -1,
+  (GdkGLProc_glVertexAttrib1fvARB) -1,
+  (GdkGLProc_glVertexAttrib1sARB) -1,
+  (GdkGLProc_glVertexAttrib1svARB) -1,
+  (GdkGLProc_glVertexAttrib2dARB) -1,
+  (GdkGLProc_glVertexAttrib2dvARB) -1,
+  (GdkGLProc_glVertexAttrib2fARB) -1,
+  (GdkGLProc_glVertexAttrib2fvARB) -1,
+  (GdkGLProc_glVertexAttrib2sARB) -1,
+  (GdkGLProc_glVertexAttrib2svARB) -1,
+  (GdkGLProc_glVertexAttrib3dARB) -1,
+  (GdkGLProc_glVertexAttrib3dvARB) -1,
+  (GdkGLProc_glVertexAttrib3fARB) -1,
+  (GdkGLProc_glVertexAttrib3fvARB) -1,
+  (GdkGLProc_glVertexAttrib3sARB) -1,
+  (GdkGLProc_glVertexAttrib3svARB) -1,
+  (GdkGLProc_glVertexAttrib4NbvARB) -1,
+  (GdkGLProc_glVertexAttrib4NivARB) -1,
+  (GdkGLProc_glVertexAttrib4NsvARB) -1,
+  (GdkGLProc_glVertexAttrib4NubARB) -1,
+  (GdkGLProc_glVertexAttrib4NubvARB) -1,
+  (GdkGLProc_glVertexAttrib4NuivARB) -1,
+  (GdkGLProc_glVertexAttrib4NusvARB) -1,
+  (GdkGLProc_glVertexAttrib4bvARB) -1,
+  (GdkGLProc_glVertexAttrib4dARB) -1,
+  (GdkGLProc_glVertexAttrib4dvARB) -1,
+  (GdkGLProc_glVertexAttrib4fARB) -1,
+  (GdkGLProc_glVertexAttrib4fvARB) -1,
+  (GdkGLProc_glVertexAttrib4ivARB) -1,
+  (GdkGLProc_glVertexAttrib4sARB) -1,
+  (GdkGLProc_glVertexAttrib4svARB) -1,
+  (GdkGLProc_glVertexAttrib4ubvARB) -1,
+  (GdkGLProc_glVertexAttrib4uivARB) -1,
+  (GdkGLProc_glVertexAttrib4usvARB) -1,
+  (GdkGLProc_glVertexAttribPointerARB) -1,
+  (GdkGLProc_glEnableVertexAttribArrayARB) -1,
+  (GdkGLProc_glDisableVertexAttribArrayARB) -1,
+  (GdkGLProc_glProgramStringARB) -1,
+  (GdkGLProc_glBindProgramARB) -1,
+  (GdkGLProc_glDeleteProgramsARB) -1,
+  (GdkGLProc_glGenProgramsARB) -1,
+  (GdkGLProc_glProgramEnvParameter4dARB) -1,
+  (GdkGLProc_glProgramEnvParameter4dvARB) -1,
+  (GdkGLProc_glProgramEnvParameter4fARB) -1,
+  (GdkGLProc_glProgramEnvParameter4fvARB) -1,
+  (GdkGLProc_glProgramLocalParameter4dARB) -1,
+  (GdkGLProc_glProgramLocalParameter4dvARB) -1,
+  (GdkGLProc_glProgramLocalParameter4fARB) -1,
+  (GdkGLProc_glProgramLocalParameter4fvARB) -1,
+  (GdkGLProc_glGetProgramEnvParameterdvARB) -1,
+  (GdkGLProc_glGetProgramEnvParameterfvARB) -1,
+  (GdkGLProc_glGetProgramLocalParameterdvARB) -1,
+  (GdkGLProc_glGetProgramLocalParameterfvARB) -1,
+  (GdkGLProc_glGetProgramivARB) -1,
+  (GdkGLProc_glGetProgramStringARB) -1,
+  (GdkGLProc_glGetVertexAttribdvARB) -1,
+  (GdkGLProc_glGetVertexAttribfvARB) -1,
+  (GdkGLProc_glGetVertexAttribivARB) -1,
+  (GdkGLProc_glGetVertexAttribPointervARB) -1,
+  (GdkGLProc_glIsProgramARB) -1
+};
+
+/* glVertexAttrib1dARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1dARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib1dARB == (GdkGLProc_glVertexAttrib1dARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib1dARB =
+      (GdkGLProc_glVertexAttrib1dARB) gdk_gl_get_proc_address ("glVertexAttrib1dARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1dARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib1dARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1dARB);
+}
+
+/* glVertexAttrib1dvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1dvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib1dvARB == (GdkGLProc_glVertexAttrib1dvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib1dvARB =
+      (GdkGLProc_glVertexAttrib1dvARB) gdk_gl_get_proc_address ("glVertexAttrib1dvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1dvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib1dvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1dvARB);
+}
+
+/* glVertexAttrib1fARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib1fARB == (GdkGLProc_glVertexAttrib1fARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib1fARB =
+      (GdkGLProc_glVertexAttrib1fARB) gdk_gl_get_proc_address ("glVertexAttrib1fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1fARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib1fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1fARB);
+}
+
+/* glVertexAttrib1fvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib1fvARB == (GdkGLProc_glVertexAttrib1fvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib1fvARB =
+      (GdkGLProc_glVertexAttrib1fvARB) gdk_gl_get_proc_address ("glVertexAttrib1fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1fvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib1fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1fvARB);
+}
+
+/* glVertexAttrib1sARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1sARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib1sARB == (GdkGLProc_glVertexAttrib1sARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib1sARB =
+      (GdkGLProc_glVertexAttrib1sARB) gdk_gl_get_proc_address ("glVertexAttrib1sARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1sARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib1sARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1sARB);
+}
+
+/* glVertexAttrib1svARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1svARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib1svARB == (GdkGLProc_glVertexAttrib1svARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib1svARB =
+      (GdkGLProc_glVertexAttrib1svARB) gdk_gl_get_proc_address ("glVertexAttrib1svARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1svARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib1svARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib1svARB);
+}
+
+/* glVertexAttrib2dARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2dARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib2dARB == (GdkGLProc_glVertexAttrib2dARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib2dARB =
+      (GdkGLProc_glVertexAttrib2dARB) gdk_gl_get_proc_address ("glVertexAttrib2dARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2dARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib2dARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2dARB);
+}
+
+/* glVertexAttrib2dvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2dvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib2dvARB == (GdkGLProc_glVertexAttrib2dvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib2dvARB =
+      (GdkGLProc_glVertexAttrib2dvARB) gdk_gl_get_proc_address ("glVertexAttrib2dvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2dvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib2dvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2dvARB);
+}
+
+/* glVertexAttrib2fARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib2fARB == (GdkGLProc_glVertexAttrib2fARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib2fARB =
+      (GdkGLProc_glVertexAttrib2fARB) gdk_gl_get_proc_address ("glVertexAttrib2fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2fARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib2fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2fARB);
+}
+
+/* glVertexAttrib2fvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib2fvARB == (GdkGLProc_glVertexAttrib2fvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib2fvARB =
+      (GdkGLProc_glVertexAttrib2fvARB) gdk_gl_get_proc_address ("glVertexAttrib2fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2fvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib2fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2fvARB);
+}
+
+/* glVertexAttrib2sARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2sARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib2sARB == (GdkGLProc_glVertexAttrib2sARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib2sARB =
+      (GdkGLProc_glVertexAttrib2sARB) gdk_gl_get_proc_address ("glVertexAttrib2sARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2sARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib2sARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2sARB);
+}
+
+/* glVertexAttrib2svARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2svARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib2svARB == (GdkGLProc_glVertexAttrib2svARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib2svARB =
+      (GdkGLProc_glVertexAttrib2svARB) gdk_gl_get_proc_address ("glVertexAttrib2svARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2svARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib2svARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib2svARB);
+}
+
+/* glVertexAttrib3dARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3dARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib3dARB == (GdkGLProc_glVertexAttrib3dARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib3dARB =
+      (GdkGLProc_glVertexAttrib3dARB) gdk_gl_get_proc_address ("glVertexAttrib3dARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3dARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib3dARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3dARB);
+}
+
+/* glVertexAttrib3dvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3dvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib3dvARB == (GdkGLProc_glVertexAttrib3dvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib3dvARB =
+      (GdkGLProc_glVertexAttrib3dvARB) gdk_gl_get_proc_address ("glVertexAttrib3dvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3dvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib3dvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3dvARB);
+}
+
+/* glVertexAttrib3fARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib3fARB == (GdkGLProc_glVertexAttrib3fARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib3fARB =
+      (GdkGLProc_glVertexAttrib3fARB) gdk_gl_get_proc_address ("glVertexAttrib3fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3fARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib3fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3fARB);
+}
+
+/* glVertexAttrib3fvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib3fvARB == (GdkGLProc_glVertexAttrib3fvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib3fvARB =
+      (GdkGLProc_glVertexAttrib3fvARB) gdk_gl_get_proc_address ("glVertexAttrib3fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3fvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib3fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3fvARB);
+}
+
+/* glVertexAttrib3sARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3sARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib3sARB == (GdkGLProc_glVertexAttrib3sARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib3sARB =
+      (GdkGLProc_glVertexAttrib3sARB) gdk_gl_get_proc_address ("glVertexAttrib3sARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3sARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib3sARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3sARB);
+}
+
+/* glVertexAttrib3svARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3svARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib3svARB == (GdkGLProc_glVertexAttrib3svARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib3svARB =
+      (GdkGLProc_glVertexAttrib3svARB) gdk_gl_get_proc_address ("glVertexAttrib3svARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3svARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib3svARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib3svARB);
+}
+
+/* glVertexAttrib4NbvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4NbvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB == (GdkGLProc_glVertexAttrib4NbvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB =
+      (GdkGLProc_glVertexAttrib4NbvARB) gdk_gl_get_proc_address ("glVertexAttrib4NbvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4NbvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NbvARB);
+}
+
+/* glVertexAttrib4NivARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4NivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NivARB == (GdkGLProc_glVertexAttrib4NivARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4NivARB =
+      (GdkGLProc_glVertexAttrib4NivARB) gdk_gl_get_proc_address ("glVertexAttrib4NivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4NivARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4NivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NivARB);
+}
+
+/* glVertexAttrib4NsvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4NsvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB == (GdkGLProc_glVertexAttrib4NsvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB =
+      (GdkGLProc_glVertexAttrib4NsvARB) gdk_gl_get_proc_address ("glVertexAttrib4NsvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4NsvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NsvARB);
+}
+
+/* glVertexAttrib4NubARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4NubARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NubARB == (GdkGLProc_glVertexAttrib4NubARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4NubARB =
+      (GdkGLProc_glVertexAttrib4NubARB) gdk_gl_get_proc_address ("glVertexAttrib4NubARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4NubARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4NubARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NubARB);
+}
+
+/* glVertexAttrib4NubvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4NubvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB == (GdkGLProc_glVertexAttrib4NubvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB =
+      (GdkGLProc_glVertexAttrib4NubvARB) gdk_gl_get_proc_address ("glVertexAttrib4NubvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4NubvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NubvARB);
+}
+
+/* glVertexAttrib4NuivARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4NuivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB == (GdkGLProc_glVertexAttrib4NuivARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB =
+      (GdkGLProc_glVertexAttrib4NuivARB) gdk_gl_get_proc_address ("glVertexAttrib4NuivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4NuivARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NuivARB);
+}
+
+/* glVertexAttrib4NusvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4NusvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB == (GdkGLProc_glVertexAttrib4NusvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB =
+      (GdkGLProc_glVertexAttrib4NusvARB) gdk_gl_get_proc_address ("glVertexAttrib4NusvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4NusvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4NusvARB);
+}
+
+/* glVertexAttrib4bvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4bvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4bvARB == (GdkGLProc_glVertexAttrib4bvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4bvARB =
+      (GdkGLProc_glVertexAttrib4bvARB) gdk_gl_get_proc_address ("glVertexAttrib4bvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4bvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4bvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4bvARB);
+}
+
+/* glVertexAttrib4dARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4dARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4dARB == (GdkGLProc_glVertexAttrib4dARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4dARB =
+      (GdkGLProc_glVertexAttrib4dARB) gdk_gl_get_proc_address ("glVertexAttrib4dARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4dARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4dARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4dARB);
+}
+
+/* glVertexAttrib4dvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4dvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4dvARB == (GdkGLProc_glVertexAttrib4dvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4dvARB =
+      (GdkGLProc_glVertexAttrib4dvARB) gdk_gl_get_proc_address ("glVertexAttrib4dvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4dvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4dvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4dvARB);
+}
+
+/* glVertexAttrib4fARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4fARB == (GdkGLProc_glVertexAttrib4fARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4fARB =
+      (GdkGLProc_glVertexAttrib4fARB) gdk_gl_get_proc_address ("glVertexAttrib4fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4fARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4fARB);
+}
+
+/* glVertexAttrib4fvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4fvARB == (GdkGLProc_glVertexAttrib4fvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4fvARB =
+      (GdkGLProc_glVertexAttrib4fvARB) gdk_gl_get_proc_address ("glVertexAttrib4fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4fvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4fvARB);
+}
+
+/* glVertexAttrib4ivARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4ivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4ivARB == (GdkGLProc_glVertexAttrib4ivARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4ivARB =
+      (GdkGLProc_glVertexAttrib4ivARB) gdk_gl_get_proc_address ("glVertexAttrib4ivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4ivARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4ivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4ivARB);
+}
+
+/* glVertexAttrib4sARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4sARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4sARB == (GdkGLProc_glVertexAttrib4sARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4sARB =
+      (GdkGLProc_glVertexAttrib4sARB) gdk_gl_get_proc_address ("glVertexAttrib4sARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4sARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4sARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4sARB);
+}
+
+/* glVertexAttrib4svARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4svARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4svARB == (GdkGLProc_glVertexAttrib4svARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4svARB =
+      (GdkGLProc_glVertexAttrib4svARB) gdk_gl_get_proc_address ("glVertexAttrib4svARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4svARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4svARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4svARB);
+}
+
+/* glVertexAttrib4ubvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4ubvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB == (GdkGLProc_glVertexAttrib4ubvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB =
+      (GdkGLProc_glVertexAttrib4ubvARB) gdk_gl_get_proc_address ("glVertexAttrib4ubvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4ubvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4ubvARB);
+}
+
+/* glVertexAttrib4uivARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4uivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4uivARB == (GdkGLProc_glVertexAttrib4uivARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4uivARB =
+      (GdkGLProc_glVertexAttrib4uivARB) gdk_gl_get_proc_address ("glVertexAttrib4uivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4uivARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4uivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4uivARB);
+}
+
+/* glVertexAttrib4usvARB */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4usvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttrib4usvARB == (GdkGLProc_glVertexAttrib4usvARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttrib4usvARB =
+      (GdkGLProc_glVertexAttrib4usvARB) gdk_gl_get_proc_address ("glVertexAttrib4usvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4usvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttrib4usvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttrib4usvARB);
+}
+
+/* glVertexAttribPointerARB */
+GdkGLProc
+gdk_gl_get_glVertexAttribPointerARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glVertexAttribPointerARB == (GdkGLProc_glVertexAttribPointerARB) -1)
+    _procs_GL_ARB_vertex_program.glVertexAttribPointerARB =
+      (GdkGLProc_glVertexAttribPointerARB) gdk_gl_get_proc_address ("glVertexAttribPointerARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribPointerARB () - %s",
+               (_procs_GL_ARB_vertex_program.glVertexAttribPointerARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glVertexAttribPointerARB);
+}
+
+/* glEnableVertexAttribArrayARB */
+GdkGLProc
+gdk_gl_get_glEnableVertexAttribArrayARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB == (GdkGLProc_glEnableVertexAttribArrayARB) -1)
+    _procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB =
+      (GdkGLProc_glEnableVertexAttribArrayARB) gdk_gl_get_proc_address ("glEnableVertexAttribArrayARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glEnableVertexAttribArrayARB () - %s",
+               (_procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glEnableVertexAttribArrayARB);
+}
+
+/* glDisableVertexAttribArrayARB */
+GdkGLProc
+gdk_gl_get_glDisableVertexAttribArrayARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB == (GdkGLProc_glDisableVertexAttribArrayARB) -1)
+    _procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB =
+      (GdkGLProc_glDisableVertexAttribArrayARB) gdk_gl_get_proc_address ("glDisableVertexAttribArrayARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDisableVertexAttribArrayARB () - %s",
+               (_procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glDisableVertexAttribArrayARB);
+}
+
+/* glProgramStringARB */
+GdkGLProc
+gdk_gl_get_glProgramStringARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramStringARB == (GdkGLProc_glProgramStringARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramStringARB =
+      (GdkGLProc_glProgramStringARB) gdk_gl_get_proc_address ("glProgramStringARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramStringARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramStringARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramStringARB);
+}
+
+/* glBindProgramARB */
+GdkGLProc
+gdk_gl_get_glBindProgramARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glBindProgramARB == (GdkGLProc_glBindProgramARB) -1)
+    _procs_GL_ARB_vertex_program.glBindProgramARB =
+      (GdkGLProc_glBindProgramARB) gdk_gl_get_proc_address ("glBindProgramARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindProgramARB () - %s",
+               (_procs_GL_ARB_vertex_program.glBindProgramARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glBindProgramARB);
+}
+
+/* glDeleteProgramsARB */
+GdkGLProc
+gdk_gl_get_glDeleteProgramsARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glDeleteProgramsARB == (GdkGLProc_glDeleteProgramsARB) -1)
+    _procs_GL_ARB_vertex_program.glDeleteProgramsARB =
+      (GdkGLProc_glDeleteProgramsARB) gdk_gl_get_proc_address ("glDeleteProgramsARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteProgramsARB () - %s",
+               (_procs_GL_ARB_vertex_program.glDeleteProgramsARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glDeleteProgramsARB);
+}
+
+/* glGenProgramsARB */
+GdkGLProc
+gdk_gl_get_glGenProgramsARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGenProgramsARB == (GdkGLProc_glGenProgramsARB) -1)
+    _procs_GL_ARB_vertex_program.glGenProgramsARB =
+      (GdkGLProc_glGenProgramsARB) gdk_gl_get_proc_address ("glGenProgramsARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenProgramsARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGenProgramsARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGenProgramsARB);
+}
+
+/* glProgramEnvParameter4dARB */
+GdkGLProc
+gdk_gl_get_glProgramEnvParameter4dARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB == (GdkGLProc_glProgramEnvParameter4dARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB =
+      (GdkGLProc_glProgramEnvParameter4dARB) gdk_gl_get_proc_address ("glProgramEnvParameter4dARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramEnvParameter4dARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dARB);
+}
+
+/* glProgramEnvParameter4dvARB */
+GdkGLProc
+gdk_gl_get_glProgramEnvParameter4dvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB == (GdkGLProc_glProgramEnvParameter4dvARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB =
+      (GdkGLProc_glProgramEnvParameter4dvARB) gdk_gl_get_proc_address ("glProgramEnvParameter4dvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramEnvParameter4dvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4dvARB);
+}
+
+/* glProgramEnvParameter4fARB */
+GdkGLProc
+gdk_gl_get_glProgramEnvParameter4fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB == (GdkGLProc_glProgramEnvParameter4fARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB =
+      (GdkGLProc_glProgramEnvParameter4fARB) gdk_gl_get_proc_address ("glProgramEnvParameter4fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramEnvParameter4fARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fARB);
+}
+
+/* glProgramEnvParameter4fvARB */
+GdkGLProc
+gdk_gl_get_glProgramEnvParameter4fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB == (GdkGLProc_glProgramEnvParameter4fvARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB =
+      (GdkGLProc_glProgramEnvParameter4fvARB) gdk_gl_get_proc_address ("glProgramEnvParameter4fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramEnvParameter4fvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramEnvParameter4fvARB);
+}
+
+/* glProgramLocalParameter4dARB */
+GdkGLProc
+gdk_gl_get_glProgramLocalParameter4dARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB == (GdkGLProc_glProgramLocalParameter4dARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB =
+      (GdkGLProc_glProgramLocalParameter4dARB) gdk_gl_get_proc_address ("glProgramLocalParameter4dARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramLocalParameter4dARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dARB);
+}
+
+/* glProgramLocalParameter4dvARB */
+GdkGLProc
+gdk_gl_get_glProgramLocalParameter4dvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB == (GdkGLProc_glProgramLocalParameter4dvARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB =
+      (GdkGLProc_glProgramLocalParameter4dvARB) gdk_gl_get_proc_address ("glProgramLocalParameter4dvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramLocalParameter4dvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4dvARB);
+}
+
+/* glProgramLocalParameter4fARB */
+GdkGLProc
+gdk_gl_get_glProgramLocalParameter4fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB == (GdkGLProc_glProgramLocalParameter4fARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB =
+      (GdkGLProc_glProgramLocalParameter4fARB) gdk_gl_get_proc_address ("glProgramLocalParameter4fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramLocalParameter4fARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fARB);
+}
+
+/* glProgramLocalParameter4fvARB */
+GdkGLProc
+gdk_gl_get_glProgramLocalParameter4fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB == (GdkGLProc_glProgramLocalParameter4fvARB) -1)
+    _procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB =
+      (GdkGLProc_glProgramLocalParameter4fvARB) gdk_gl_get_proc_address ("glProgramLocalParameter4fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramLocalParameter4fvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glProgramLocalParameter4fvARB);
+}
+
+/* glGetProgramEnvParameterdvARB */
+GdkGLProc
+gdk_gl_get_glGetProgramEnvParameterdvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB == (GdkGLProc_glGetProgramEnvParameterdvARB) -1)
+    _procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB =
+      (GdkGLProc_glGetProgramEnvParameterdvARB) gdk_gl_get_proc_address ("glGetProgramEnvParameterdvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramEnvParameterdvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterdvARB);
+}
+
+/* glGetProgramEnvParameterfvARB */
+GdkGLProc
+gdk_gl_get_glGetProgramEnvParameterfvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB == (GdkGLProc_glGetProgramEnvParameterfvARB) -1)
+    _procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB =
+      (GdkGLProc_glGetProgramEnvParameterfvARB) gdk_gl_get_proc_address ("glGetProgramEnvParameterfvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramEnvParameterfvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramEnvParameterfvARB);
+}
+
+/* glGetProgramLocalParameterdvARB */
+GdkGLProc
+gdk_gl_get_glGetProgramLocalParameterdvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB == (GdkGLProc_glGetProgramLocalParameterdvARB) -1)
+    _procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB =
+      (GdkGLProc_glGetProgramLocalParameterdvARB) gdk_gl_get_proc_address ("glGetProgramLocalParameterdvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramLocalParameterdvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterdvARB);
+}
+
+/* glGetProgramLocalParameterfvARB */
+GdkGLProc
+gdk_gl_get_glGetProgramLocalParameterfvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB == (GdkGLProc_glGetProgramLocalParameterfvARB) -1)
+    _procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB =
+      (GdkGLProc_glGetProgramLocalParameterfvARB) gdk_gl_get_proc_address ("glGetProgramLocalParameterfvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramLocalParameterfvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramLocalParameterfvARB);
+}
+
+/* glGetProgramivARB */
+GdkGLProc
+gdk_gl_get_glGetProgramivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetProgramivARB == (GdkGLProc_glGetProgramivARB) -1)
+    _procs_GL_ARB_vertex_program.glGetProgramivARB =
+      (GdkGLProc_glGetProgramivARB) gdk_gl_get_proc_address ("glGetProgramivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramivARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetProgramivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramivARB);
+}
+
+/* glGetProgramStringARB */
+GdkGLProc
+gdk_gl_get_glGetProgramStringARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetProgramStringARB == (GdkGLProc_glGetProgramStringARB) -1)
+    _procs_GL_ARB_vertex_program.glGetProgramStringARB =
+      (GdkGLProc_glGetProgramStringARB) gdk_gl_get_proc_address ("glGetProgramStringARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramStringARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetProgramStringARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetProgramStringARB);
+}
+
+/* glGetVertexAttribdvARB */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribdvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetVertexAttribdvARB == (GdkGLProc_glGetVertexAttribdvARB) -1)
+    _procs_GL_ARB_vertex_program.glGetVertexAttribdvARB =
+      (GdkGLProc_glGetVertexAttribdvARB) gdk_gl_get_proc_address ("glGetVertexAttribdvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribdvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetVertexAttribdvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribdvARB);
+}
+
+/* glGetVertexAttribfvARB */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribfvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetVertexAttribfvARB == (GdkGLProc_glGetVertexAttribfvARB) -1)
+    _procs_GL_ARB_vertex_program.glGetVertexAttribfvARB =
+      (GdkGLProc_glGetVertexAttribfvARB) gdk_gl_get_proc_address ("glGetVertexAttribfvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribfvARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetVertexAttribfvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribfvARB);
+}
+
+/* glGetVertexAttribivARB */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetVertexAttribivARB == (GdkGLProc_glGetVertexAttribivARB) -1)
+    _procs_GL_ARB_vertex_program.glGetVertexAttribivARB =
+      (GdkGLProc_glGetVertexAttribivARB) gdk_gl_get_proc_address ("glGetVertexAttribivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribivARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetVertexAttribivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribivARB);
+}
+
+/* glGetVertexAttribPointervARB */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribPointervARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB == (GdkGLProc_glGetVertexAttribPointervARB) -1)
+    _procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB =
+      (GdkGLProc_glGetVertexAttribPointervARB) gdk_gl_get_proc_address ("glGetVertexAttribPointervARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribPointervARB () - %s",
+               (_procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glGetVertexAttribPointervARB);
+}
+
+/* glIsProgramARB */
+GdkGLProc
+gdk_gl_get_glIsProgramARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_program.glIsProgramARB == (GdkGLProc_glIsProgramARB) -1)
+    _procs_GL_ARB_vertex_program.glIsProgramARB =
+      (GdkGLProc_glIsProgramARB) gdk_gl_get_proc_address ("glIsProgramARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsProgramARB () - %s",
+               (_procs_GL_ARB_vertex_program.glIsProgramARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_program.glIsProgramARB);
+}
+
+/* Get GL_ARB_vertex_program functions */
+GdkGL_GL_ARB_vertex_program *
+gdk_gl_get_GL_ARB_vertex_program (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_program");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glVertexAttrib1dARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1dvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1fARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1fvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1sARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1svARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2dARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2dvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2fARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2fvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2sARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2svARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3dARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3dvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3fARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3fvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3sARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3svARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4NbvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4NivARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4NsvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4NubARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4NubvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4NuivARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4NusvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4bvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4dARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4dvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4fARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4fvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4ivARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4sARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4svARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4ubvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4uivARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4usvARB () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribPointerARB () != NULL);
+          supported &= (gdk_gl_get_glEnableVertexAttribArrayARB () != NULL);
+          supported &= (gdk_gl_get_glDisableVertexAttribArrayARB () != NULL);
+          supported &= (gdk_gl_get_glProgramStringARB () != NULL);
+          supported &= (gdk_gl_get_glBindProgramARB () != NULL);
+          supported &= (gdk_gl_get_glDeleteProgramsARB () != NULL);
+          supported &= (gdk_gl_get_glGenProgramsARB () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameter4dARB () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameter4dvARB () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameter4fARB () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameter4fvARB () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameter4dARB () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameter4dvARB () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameter4fARB () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameter4fvARB () != NULL);
+          supported &= (gdk_gl_get_glGetProgramEnvParameterdvARB () != NULL);
+          supported &= (gdk_gl_get_glGetProgramEnvParameterfvARB () != NULL);
+          supported &= (gdk_gl_get_glGetProgramLocalParameterdvARB () != NULL);
+          supported &= (gdk_gl_get_glGetProgramLocalParameterfvARB () != NULL);
+          supported &= (gdk_gl_get_glGetProgramivARB () != NULL);
+          supported &= (gdk_gl_get_glGetProgramStringARB () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribdvARB () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribfvARB () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribivARB () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribPointervARB () != NULL);
+          supported &= (gdk_gl_get_glIsProgramARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_vertex_program () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_vertex_program;
+}
+
+/*
+ * GL_ARB_vertex_buffer_object
+ */
+
+static GdkGL_GL_ARB_vertex_buffer_object _procs_GL_ARB_vertex_buffer_object = {
+  (GdkGLProc_glBindBufferARB) -1,
+  (GdkGLProc_glDeleteBuffersARB) -1,
+  (GdkGLProc_glGenBuffersARB) -1,
+  (GdkGLProc_glIsBufferARB) -1,
+  (GdkGLProc_glBufferDataARB) -1,
+  (GdkGLProc_glBufferSubDataARB) -1,
+  (GdkGLProc_glGetBufferSubDataARB) -1,
+  (GdkGLProc_glMapBufferARB) -1,
+  (GdkGLProc_glUnmapBufferARB) -1,
+  (GdkGLProc_glGetBufferParameterivARB) -1,
+  (GdkGLProc_glGetBufferPointervARB) -1
+};
+
+/* glBindBufferARB */
+GdkGLProc
+gdk_gl_get_glBindBufferARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glBindBufferARB == (GdkGLProc_glBindBufferARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glBindBufferARB =
+      (GdkGLProc_glBindBufferARB) gdk_gl_get_proc_address ("glBindBufferARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindBufferARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glBindBufferARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glBindBufferARB);
+}
+
+/* glDeleteBuffersARB */
+GdkGLProc
+gdk_gl_get_glDeleteBuffersARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB == (GdkGLProc_glDeleteBuffersARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB =
+      (GdkGLProc_glDeleteBuffersARB) gdk_gl_get_proc_address ("glDeleteBuffersARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteBuffersARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glDeleteBuffersARB);
+}
+
+/* glGenBuffersARB */
+GdkGLProc
+gdk_gl_get_glGenBuffersARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glGenBuffersARB == (GdkGLProc_glGenBuffersARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glGenBuffersARB =
+      (GdkGLProc_glGenBuffersARB) gdk_gl_get_proc_address ("glGenBuffersARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenBuffersARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glGenBuffersARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGenBuffersARB);
+}
+
+/* glIsBufferARB */
+GdkGLProc
+gdk_gl_get_glIsBufferARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glIsBufferARB == (GdkGLProc_glIsBufferARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glIsBufferARB =
+      (GdkGLProc_glIsBufferARB) gdk_gl_get_proc_address ("glIsBufferARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsBufferARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glIsBufferARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glIsBufferARB);
+}
+
+/* glBufferDataARB */
+GdkGLProc
+gdk_gl_get_glBufferDataARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glBufferDataARB == (GdkGLProc_glBufferDataARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glBufferDataARB =
+      (GdkGLProc_glBufferDataARB) gdk_gl_get_proc_address ("glBufferDataARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBufferDataARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glBufferDataARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glBufferDataARB);
+}
+
+/* glBufferSubDataARB */
+GdkGLProc
+gdk_gl_get_glBufferSubDataARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB == (GdkGLProc_glBufferSubDataARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB =
+      (GdkGLProc_glBufferSubDataARB) gdk_gl_get_proc_address ("glBufferSubDataARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBufferSubDataARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glBufferSubDataARB);
+}
+
+/* glGetBufferSubDataARB */
+GdkGLProc
+gdk_gl_get_glGetBufferSubDataARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB == (GdkGLProc_glGetBufferSubDataARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB =
+      (GdkGLProc_glGetBufferSubDataARB) gdk_gl_get_proc_address ("glGetBufferSubDataARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetBufferSubDataARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGetBufferSubDataARB);
+}
+
+/* glMapBufferARB */
+GdkGLProc
+gdk_gl_get_glMapBufferARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glMapBufferARB == (GdkGLProc_glMapBufferARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glMapBufferARB =
+      (GdkGLProc_glMapBufferARB) gdk_gl_get_proc_address ("glMapBufferARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMapBufferARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glMapBufferARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glMapBufferARB);
+}
+
+/* glUnmapBufferARB */
+GdkGLProc
+gdk_gl_get_glUnmapBufferARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB == (GdkGLProc_glUnmapBufferARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB =
+      (GdkGLProc_glUnmapBufferARB) gdk_gl_get_proc_address ("glUnmapBufferARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUnmapBufferARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glUnmapBufferARB);
+}
+
+/* glGetBufferParameterivARB */
+GdkGLProc
+gdk_gl_get_glGetBufferParameterivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB == (GdkGLProc_glGetBufferParameterivARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB =
+      (GdkGLProc_glGetBufferParameterivARB) gdk_gl_get_proc_address ("glGetBufferParameterivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetBufferParameterivARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGetBufferParameterivARB);
+}
+
+/* glGetBufferPointervARB */
+GdkGLProc
+gdk_gl_get_glGetBufferPointervARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB == (GdkGLProc_glGetBufferPointervARB) -1)
+    _procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB =
+      (GdkGLProc_glGetBufferPointervARB) gdk_gl_get_proc_address ("glGetBufferPointervARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetBufferPointervARB () - %s",
+               (_procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_buffer_object.glGetBufferPointervARB);
+}
+
+/* Get GL_ARB_vertex_buffer_object functions */
+GdkGL_GL_ARB_vertex_buffer_object *
+gdk_gl_get_GL_ARB_vertex_buffer_object (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_buffer_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBindBufferARB () != NULL);
+          supported &= (gdk_gl_get_glDeleteBuffersARB () != NULL);
+          supported &= (gdk_gl_get_glGenBuffersARB () != NULL);
+          supported &= (gdk_gl_get_glIsBufferARB () != NULL);
+          supported &= (gdk_gl_get_glBufferDataARB () != NULL);
+          supported &= (gdk_gl_get_glBufferSubDataARB () != NULL);
+          supported &= (gdk_gl_get_glGetBufferSubDataARB () != NULL);
+          supported &= (gdk_gl_get_glMapBufferARB () != NULL);
+          supported &= (gdk_gl_get_glUnmapBufferARB () != NULL);
+          supported &= (gdk_gl_get_glGetBufferParameterivARB () != NULL);
+          supported &= (gdk_gl_get_glGetBufferPointervARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_vertex_buffer_object () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_vertex_buffer_object;
+}
+
+/*
+ * GL_ARB_occlusion_query
+ */
+
+static GdkGL_GL_ARB_occlusion_query _procs_GL_ARB_occlusion_query = {
+  (GdkGLProc_glGenQueriesARB) -1,
+  (GdkGLProc_glDeleteQueriesARB) -1,
+  (GdkGLProc_glIsQueryARB) -1,
+  (GdkGLProc_glBeginQueryARB) -1,
+  (GdkGLProc_glEndQueryARB) -1,
+  (GdkGLProc_glGetQueryivARB) -1,
+  (GdkGLProc_glGetQueryObjectivARB) -1,
+  (GdkGLProc_glGetQueryObjectuivARB) -1
+};
+
+/* glGenQueriesARB */
+GdkGLProc
+gdk_gl_get_glGenQueriesARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glGenQueriesARB == (GdkGLProc_glGenQueriesARB) -1)
+    _procs_GL_ARB_occlusion_query.glGenQueriesARB =
+      (GdkGLProc_glGenQueriesARB) gdk_gl_get_proc_address ("glGenQueriesARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenQueriesARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glGenQueriesARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glGenQueriesARB);
+}
+
+/* glDeleteQueriesARB */
+GdkGLProc
+gdk_gl_get_glDeleteQueriesARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glDeleteQueriesARB == (GdkGLProc_glDeleteQueriesARB) -1)
+    _procs_GL_ARB_occlusion_query.glDeleteQueriesARB =
+      (GdkGLProc_glDeleteQueriesARB) gdk_gl_get_proc_address ("glDeleteQueriesARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteQueriesARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glDeleteQueriesARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glDeleteQueriesARB);
+}
+
+/* glIsQueryARB */
+GdkGLProc
+gdk_gl_get_glIsQueryARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glIsQueryARB == (GdkGLProc_glIsQueryARB) -1)
+    _procs_GL_ARB_occlusion_query.glIsQueryARB =
+      (GdkGLProc_glIsQueryARB) gdk_gl_get_proc_address ("glIsQueryARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsQueryARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glIsQueryARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glIsQueryARB);
+}
+
+/* glBeginQueryARB */
+GdkGLProc
+gdk_gl_get_glBeginQueryARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glBeginQueryARB == (GdkGLProc_glBeginQueryARB) -1)
+    _procs_GL_ARB_occlusion_query.glBeginQueryARB =
+      (GdkGLProc_glBeginQueryARB) gdk_gl_get_proc_address ("glBeginQueryARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBeginQueryARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glBeginQueryARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glBeginQueryARB);
+}
+
+/* glEndQueryARB */
+GdkGLProc
+gdk_gl_get_glEndQueryARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glEndQueryARB == (GdkGLProc_glEndQueryARB) -1)
+    _procs_GL_ARB_occlusion_query.glEndQueryARB =
+      (GdkGLProc_glEndQueryARB) gdk_gl_get_proc_address ("glEndQueryARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glEndQueryARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glEndQueryARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glEndQueryARB);
+}
+
+/* glGetQueryivARB */
+GdkGLProc
+gdk_gl_get_glGetQueryivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glGetQueryivARB == (GdkGLProc_glGetQueryivARB) -1)
+    _procs_GL_ARB_occlusion_query.glGetQueryivARB =
+      (GdkGLProc_glGetQueryivARB) gdk_gl_get_proc_address ("glGetQueryivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetQueryivARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glGetQueryivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glGetQueryivARB);
+}
+
+/* glGetQueryObjectivARB */
+GdkGLProc
+gdk_gl_get_glGetQueryObjectivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glGetQueryObjectivARB == (GdkGLProc_glGetQueryObjectivARB) -1)
+    _procs_GL_ARB_occlusion_query.glGetQueryObjectivARB =
+      (GdkGLProc_glGetQueryObjectivARB) gdk_gl_get_proc_address ("glGetQueryObjectivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetQueryObjectivARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glGetQueryObjectivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glGetQueryObjectivARB);
+}
+
+/* glGetQueryObjectuivARB */
+GdkGLProc
+gdk_gl_get_glGetQueryObjectuivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_occlusion_query.glGetQueryObjectuivARB == (GdkGLProc_glGetQueryObjectuivARB) -1)
+    _procs_GL_ARB_occlusion_query.glGetQueryObjectuivARB =
+      (GdkGLProc_glGetQueryObjectuivARB) gdk_gl_get_proc_address ("glGetQueryObjectuivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetQueryObjectuivARB () - %s",
+               (_procs_GL_ARB_occlusion_query.glGetQueryObjectuivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_occlusion_query.glGetQueryObjectuivARB);
+}
+
+/* Get GL_ARB_occlusion_query functions */
+GdkGL_GL_ARB_occlusion_query *
+gdk_gl_get_GL_ARB_occlusion_query (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_occlusion_query");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGenQueriesARB () != NULL);
+          supported &= (gdk_gl_get_glDeleteQueriesARB () != NULL);
+          supported &= (gdk_gl_get_glIsQueryARB () != NULL);
+          supported &= (gdk_gl_get_glBeginQueryARB () != NULL);
+          supported &= (gdk_gl_get_glEndQueryARB () != NULL);
+          supported &= (gdk_gl_get_glGetQueryivARB () != NULL);
+          supported &= (gdk_gl_get_glGetQueryObjectivARB () != NULL);
+          supported &= (gdk_gl_get_glGetQueryObjectuivARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_occlusion_query () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_occlusion_query;
+}
+
+/*
+ * GL_ARB_shader_objects
+ */
+
+static GdkGL_GL_ARB_shader_objects _procs_GL_ARB_shader_objects = {
+  (GdkGLProc_glDeleteObjectARB) -1,
+  (GdkGLProc_glGetHandleARB) -1,
+  (GdkGLProc_glDetachObjectARB) -1,
+  (GdkGLProc_glCreateShaderObjectARB) -1,
+  (GdkGLProc_glShaderSourceARB) -1,
+  (GdkGLProc_glCompileShaderARB) -1,
+  (GdkGLProc_glCreateProgramObjectARB) -1,
+  (GdkGLProc_glAttachObjectARB) -1,
+  (GdkGLProc_glLinkProgramARB) -1,
+  (GdkGLProc_glUseProgramObjectARB) -1,
+  (GdkGLProc_glValidateProgramARB) -1,
+  (GdkGLProc_glUniform1fARB) -1,
+  (GdkGLProc_glUniform2fARB) -1,
+  (GdkGLProc_glUniform3fARB) -1,
+  (GdkGLProc_glUniform4fARB) -1,
+  (GdkGLProc_glUniform1iARB) -1,
+  (GdkGLProc_glUniform2iARB) -1,
+  (GdkGLProc_glUniform3iARB) -1,
+  (GdkGLProc_glUniform4iARB) -1,
+  (GdkGLProc_glUniform1fvARB) -1,
+  (GdkGLProc_glUniform2fvARB) -1,
+  (GdkGLProc_glUniform3fvARB) -1,
+  (GdkGLProc_glUniform4fvARB) -1,
+  (GdkGLProc_glUniform1ivARB) -1,
+  (GdkGLProc_glUniform2ivARB) -1,
+  (GdkGLProc_glUniform3ivARB) -1,
+  (GdkGLProc_glUniform4ivARB) -1,
+  (GdkGLProc_glUniformMatrix2fvARB) -1,
+  (GdkGLProc_glUniformMatrix3fvARB) -1,
+  (GdkGLProc_glUniformMatrix4fvARB) -1,
+  (GdkGLProc_glGetObjectParameterfvARB) -1,
+  (GdkGLProc_glGetObjectParameterivARB) -1,
+  (GdkGLProc_glGetInfoLogARB) -1,
+  (GdkGLProc_glGetAttachedObjectsARB) -1,
+  (GdkGLProc_glGetUniformLocationARB) -1,
+  (GdkGLProc_glGetActiveUniformARB) -1,
+  (GdkGLProc_glGetUniformfvARB) -1,
+  (GdkGLProc_glGetUniformivARB) -1,
+  (GdkGLProc_glGetShaderSourceARB) -1
+};
+
+/* glDeleteObjectARB */
+GdkGLProc
+gdk_gl_get_glDeleteObjectARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glDeleteObjectARB == (GdkGLProc_glDeleteObjectARB) -1)
+    _procs_GL_ARB_shader_objects.glDeleteObjectARB =
+      (GdkGLProc_glDeleteObjectARB) gdk_gl_get_proc_address ("glDeleteObjectARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteObjectARB () - %s",
+               (_procs_GL_ARB_shader_objects.glDeleteObjectARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glDeleteObjectARB);
+}
+
+/* glGetHandleARB */
+GdkGLProc
+gdk_gl_get_glGetHandleARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetHandleARB == (GdkGLProc_glGetHandleARB) -1)
+    _procs_GL_ARB_shader_objects.glGetHandleARB =
+      (GdkGLProc_glGetHandleARB) gdk_gl_get_proc_address ("glGetHandleARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetHandleARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetHandleARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetHandleARB);
+}
+
+/* glDetachObjectARB */
+GdkGLProc
+gdk_gl_get_glDetachObjectARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glDetachObjectARB == (GdkGLProc_glDetachObjectARB) -1)
+    _procs_GL_ARB_shader_objects.glDetachObjectARB =
+      (GdkGLProc_glDetachObjectARB) gdk_gl_get_proc_address ("glDetachObjectARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDetachObjectARB () - %s",
+               (_procs_GL_ARB_shader_objects.glDetachObjectARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glDetachObjectARB);
+}
+
+/* glCreateShaderObjectARB */
+GdkGLProc
+gdk_gl_get_glCreateShaderObjectARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glCreateShaderObjectARB == (GdkGLProc_glCreateShaderObjectARB) -1)
+    _procs_GL_ARB_shader_objects.glCreateShaderObjectARB =
+      (GdkGLProc_glCreateShaderObjectARB) gdk_gl_get_proc_address ("glCreateShaderObjectARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCreateShaderObjectARB () - %s",
+               (_procs_GL_ARB_shader_objects.glCreateShaderObjectARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glCreateShaderObjectARB);
+}
+
+/* glShaderSourceARB */
+GdkGLProc
+gdk_gl_get_glShaderSourceARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glShaderSourceARB == (GdkGLProc_glShaderSourceARB) -1)
+    _procs_GL_ARB_shader_objects.glShaderSourceARB =
+      (GdkGLProc_glShaderSourceARB) gdk_gl_get_proc_address ("glShaderSourceARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glShaderSourceARB () - %s",
+               (_procs_GL_ARB_shader_objects.glShaderSourceARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glShaderSourceARB);
+}
+
+/* glCompileShaderARB */
+GdkGLProc
+gdk_gl_get_glCompileShaderARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glCompileShaderARB == (GdkGLProc_glCompileShaderARB) -1)
+    _procs_GL_ARB_shader_objects.glCompileShaderARB =
+      (GdkGLProc_glCompileShaderARB) gdk_gl_get_proc_address ("glCompileShaderARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompileShaderARB () - %s",
+               (_procs_GL_ARB_shader_objects.glCompileShaderARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glCompileShaderARB);
+}
+
+/* glCreateProgramObjectARB */
+GdkGLProc
+gdk_gl_get_glCreateProgramObjectARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glCreateProgramObjectARB == (GdkGLProc_glCreateProgramObjectARB) -1)
+    _procs_GL_ARB_shader_objects.glCreateProgramObjectARB =
+      (GdkGLProc_glCreateProgramObjectARB) gdk_gl_get_proc_address ("glCreateProgramObjectARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCreateProgramObjectARB () - %s",
+               (_procs_GL_ARB_shader_objects.glCreateProgramObjectARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glCreateProgramObjectARB);
+}
+
+/* glAttachObjectARB */
+GdkGLProc
+gdk_gl_get_glAttachObjectARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glAttachObjectARB == (GdkGLProc_glAttachObjectARB) -1)
+    _procs_GL_ARB_shader_objects.glAttachObjectARB =
+      (GdkGLProc_glAttachObjectARB) gdk_gl_get_proc_address ("glAttachObjectARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glAttachObjectARB () - %s",
+               (_procs_GL_ARB_shader_objects.glAttachObjectARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glAttachObjectARB);
+}
+
+/* glLinkProgramARB */
+GdkGLProc
+gdk_gl_get_glLinkProgramARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glLinkProgramARB == (GdkGLProc_glLinkProgramARB) -1)
+    _procs_GL_ARB_shader_objects.glLinkProgramARB =
+      (GdkGLProc_glLinkProgramARB) gdk_gl_get_proc_address ("glLinkProgramARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glLinkProgramARB () - %s",
+               (_procs_GL_ARB_shader_objects.glLinkProgramARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glLinkProgramARB);
+}
+
+/* glUseProgramObjectARB */
+GdkGLProc
+gdk_gl_get_glUseProgramObjectARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUseProgramObjectARB == (GdkGLProc_glUseProgramObjectARB) -1)
+    _procs_GL_ARB_shader_objects.glUseProgramObjectARB =
+      (GdkGLProc_glUseProgramObjectARB) gdk_gl_get_proc_address ("glUseProgramObjectARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUseProgramObjectARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUseProgramObjectARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUseProgramObjectARB);
+}
+
+/* glValidateProgramARB */
+GdkGLProc
+gdk_gl_get_glValidateProgramARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glValidateProgramARB == (GdkGLProc_glValidateProgramARB) -1)
+    _procs_GL_ARB_shader_objects.glValidateProgramARB =
+      (GdkGLProc_glValidateProgramARB) gdk_gl_get_proc_address ("glValidateProgramARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glValidateProgramARB () - %s",
+               (_procs_GL_ARB_shader_objects.glValidateProgramARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glValidateProgramARB);
+}
+
+/* glUniform1fARB */
+GdkGLProc
+gdk_gl_get_glUniform1fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform1fARB == (GdkGLProc_glUniform1fARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform1fARB =
+      (GdkGLProc_glUniform1fARB) gdk_gl_get_proc_address ("glUniform1fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform1fARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform1fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform1fARB);
+}
+
+/* glUniform2fARB */
+GdkGLProc
+gdk_gl_get_glUniform2fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform2fARB == (GdkGLProc_glUniform2fARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform2fARB =
+      (GdkGLProc_glUniform2fARB) gdk_gl_get_proc_address ("glUniform2fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform2fARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform2fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform2fARB);
+}
+
+/* glUniform3fARB */
+GdkGLProc
+gdk_gl_get_glUniform3fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform3fARB == (GdkGLProc_glUniform3fARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform3fARB =
+      (GdkGLProc_glUniform3fARB) gdk_gl_get_proc_address ("glUniform3fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform3fARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform3fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform3fARB);
+}
+
+/* glUniform4fARB */
+GdkGLProc
+gdk_gl_get_glUniform4fARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform4fARB == (GdkGLProc_glUniform4fARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform4fARB =
+      (GdkGLProc_glUniform4fARB) gdk_gl_get_proc_address ("glUniform4fARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform4fARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform4fARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform4fARB);
+}
+
+/* glUniform1iARB */
+GdkGLProc
+gdk_gl_get_glUniform1iARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform1iARB == (GdkGLProc_glUniform1iARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform1iARB =
+      (GdkGLProc_glUniform1iARB) gdk_gl_get_proc_address ("glUniform1iARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform1iARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform1iARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform1iARB);
+}
+
+/* glUniform2iARB */
+GdkGLProc
+gdk_gl_get_glUniform2iARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform2iARB == (GdkGLProc_glUniform2iARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform2iARB =
+      (GdkGLProc_glUniform2iARB) gdk_gl_get_proc_address ("glUniform2iARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform2iARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform2iARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform2iARB);
+}
+
+/* glUniform3iARB */
+GdkGLProc
+gdk_gl_get_glUniform3iARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform3iARB == (GdkGLProc_glUniform3iARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform3iARB =
+      (GdkGLProc_glUniform3iARB) gdk_gl_get_proc_address ("glUniform3iARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform3iARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform3iARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform3iARB);
+}
+
+/* glUniform4iARB */
+GdkGLProc
+gdk_gl_get_glUniform4iARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform4iARB == (GdkGLProc_glUniform4iARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform4iARB =
+      (GdkGLProc_glUniform4iARB) gdk_gl_get_proc_address ("glUniform4iARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform4iARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform4iARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform4iARB);
+}
+
+/* glUniform1fvARB */
+GdkGLProc
+gdk_gl_get_glUniform1fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform1fvARB == (GdkGLProc_glUniform1fvARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform1fvARB =
+      (GdkGLProc_glUniform1fvARB) gdk_gl_get_proc_address ("glUniform1fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform1fvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform1fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform1fvARB);
+}
+
+/* glUniform2fvARB */
+GdkGLProc
+gdk_gl_get_glUniform2fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform2fvARB == (GdkGLProc_glUniform2fvARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform2fvARB =
+      (GdkGLProc_glUniform2fvARB) gdk_gl_get_proc_address ("glUniform2fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform2fvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform2fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform2fvARB);
+}
+
+/* glUniform3fvARB */
+GdkGLProc
+gdk_gl_get_glUniform3fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform3fvARB == (GdkGLProc_glUniform3fvARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform3fvARB =
+      (GdkGLProc_glUniform3fvARB) gdk_gl_get_proc_address ("glUniform3fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform3fvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform3fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform3fvARB);
+}
+
+/* glUniform4fvARB */
+GdkGLProc
+gdk_gl_get_glUniform4fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform4fvARB == (GdkGLProc_glUniform4fvARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform4fvARB =
+      (GdkGLProc_glUniform4fvARB) gdk_gl_get_proc_address ("glUniform4fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform4fvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform4fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform4fvARB);
+}
+
+/* glUniform1ivARB */
+GdkGLProc
+gdk_gl_get_glUniform1ivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform1ivARB == (GdkGLProc_glUniform1ivARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform1ivARB =
+      (GdkGLProc_glUniform1ivARB) gdk_gl_get_proc_address ("glUniform1ivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform1ivARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform1ivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform1ivARB);
+}
+
+/* glUniform2ivARB */
+GdkGLProc
+gdk_gl_get_glUniform2ivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform2ivARB == (GdkGLProc_glUniform2ivARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform2ivARB =
+      (GdkGLProc_glUniform2ivARB) gdk_gl_get_proc_address ("glUniform2ivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform2ivARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform2ivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform2ivARB);
+}
+
+/* glUniform3ivARB */
+GdkGLProc
+gdk_gl_get_glUniform3ivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform3ivARB == (GdkGLProc_glUniform3ivARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform3ivARB =
+      (GdkGLProc_glUniform3ivARB) gdk_gl_get_proc_address ("glUniform3ivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform3ivARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform3ivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform3ivARB);
+}
+
+/* glUniform4ivARB */
+GdkGLProc
+gdk_gl_get_glUniform4ivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniform4ivARB == (GdkGLProc_glUniform4ivARB) -1)
+    _procs_GL_ARB_shader_objects.glUniform4ivARB =
+      (GdkGLProc_glUniform4ivARB) gdk_gl_get_proc_address ("glUniform4ivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform4ivARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniform4ivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniform4ivARB);
+}
+
+/* glUniformMatrix2fvARB */
+GdkGLProc
+gdk_gl_get_glUniformMatrix2fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniformMatrix2fvARB == (GdkGLProc_glUniformMatrix2fvARB) -1)
+    _procs_GL_ARB_shader_objects.glUniformMatrix2fvARB =
+      (GdkGLProc_glUniformMatrix2fvARB) gdk_gl_get_proc_address ("glUniformMatrix2fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniformMatrix2fvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniformMatrix2fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniformMatrix2fvARB);
+}
+
+/* glUniformMatrix3fvARB */
+GdkGLProc
+gdk_gl_get_glUniformMatrix3fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniformMatrix3fvARB == (GdkGLProc_glUniformMatrix3fvARB) -1)
+    _procs_GL_ARB_shader_objects.glUniformMatrix3fvARB =
+      (GdkGLProc_glUniformMatrix3fvARB) gdk_gl_get_proc_address ("glUniformMatrix3fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniformMatrix3fvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniformMatrix3fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniformMatrix3fvARB);
+}
+
+/* glUniformMatrix4fvARB */
+GdkGLProc
+gdk_gl_get_glUniformMatrix4fvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glUniformMatrix4fvARB == (GdkGLProc_glUniformMatrix4fvARB) -1)
+    _procs_GL_ARB_shader_objects.glUniformMatrix4fvARB =
+      (GdkGLProc_glUniformMatrix4fvARB) gdk_gl_get_proc_address ("glUniformMatrix4fvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniformMatrix4fvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glUniformMatrix4fvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glUniformMatrix4fvARB);
+}
+
+/* glGetObjectParameterfvARB */
+GdkGLProc
+gdk_gl_get_glGetObjectParameterfvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetObjectParameterfvARB == (GdkGLProc_glGetObjectParameterfvARB) -1)
+    _procs_GL_ARB_shader_objects.glGetObjectParameterfvARB =
+      (GdkGLProc_glGetObjectParameterfvARB) gdk_gl_get_proc_address ("glGetObjectParameterfvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetObjectParameterfvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetObjectParameterfvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetObjectParameterfvARB);
+}
+
+/* glGetObjectParameterivARB */
+GdkGLProc
+gdk_gl_get_glGetObjectParameterivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetObjectParameterivARB == (GdkGLProc_glGetObjectParameterivARB) -1)
+    _procs_GL_ARB_shader_objects.glGetObjectParameterivARB =
+      (GdkGLProc_glGetObjectParameterivARB) gdk_gl_get_proc_address ("glGetObjectParameterivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetObjectParameterivARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetObjectParameterivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetObjectParameterivARB);
+}
+
+/* glGetInfoLogARB */
+GdkGLProc
+gdk_gl_get_glGetInfoLogARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetInfoLogARB == (GdkGLProc_glGetInfoLogARB) -1)
+    _procs_GL_ARB_shader_objects.glGetInfoLogARB =
+      (GdkGLProc_glGetInfoLogARB) gdk_gl_get_proc_address ("glGetInfoLogARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetInfoLogARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetInfoLogARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetInfoLogARB);
+}
+
+/* glGetAttachedObjectsARB */
+GdkGLProc
+gdk_gl_get_glGetAttachedObjectsARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetAttachedObjectsARB == (GdkGLProc_glGetAttachedObjectsARB) -1)
+    _procs_GL_ARB_shader_objects.glGetAttachedObjectsARB =
+      (GdkGLProc_glGetAttachedObjectsARB) gdk_gl_get_proc_address ("glGetAttachedObjectsARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetAttachedObjectsARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetAttachedObjectsARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetAttachedObjectsARB);
+}
+
+/* glGetUniformLocationARB */
+GdkGLProc
+gdk_gl_get_glGetUniformLocationARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetUniformLocationARB == (GdkGLProc_glGetUniformLocationARB) -1)
+    _procs_GL_ARB_shader_objects.glGetUniformLocationARB =
+      (GdkGLProc_glGetUniformLocationARB) gdk_gl_get_proc_address ("glGetUniformLocationARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetUniformLocationARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetUniformLocationARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetUniformLocationARB);
+}
+
+/* glGetActiveUniformARB */
+GdkGLProc
+gdk_gl_get_glGetActiveUniformARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetActiveUniformARB == (GdkGLProc_glGetActiveUniformARB) -1)
+    _procs_GL_ARB_shader_objects.glGetActiveUniformARB =
+      (GdkGLProc_glGetActiveUniformARB) gdk_gl_get_proc_address ("glGetActiveUniformARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetActiveUniformARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetActiveUniformARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetActiveUniformARB);
+}
+
+/* glGetUniformfvARB */
+GdkGLProc
+gdk_gl_get_glGetUniformfvARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetUniformfvARB == (GdkGLProc_glGetUniformfvARB) -1)
+    _procs_GL_ARB_shader_objects.glGetUniformfvARB =
+      (GdkGLProc_glGetUniformfvARB) gdk_gl_get_proc_address ("glGetUniformfvARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetUniformfvARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetUniformfvARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetUniformfvARB);
+}
+
+/* glGetUniformivARB */
+GdkGLProc
+gdk_gl_get_glGetUniformivARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetUniformivARB == (GdkGLProc_glGetUniformivARB) -1)
+    _procs_GL_ARB_shader_objects.glGetUniformivARB =
+      (GdkGLProc_glGetUniformivARB) gdk_gl_get_proc_address ("glGetUniformivARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetUniformivARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetUniformivARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetUniformivARB);
+}
+
+/* glGetShaderSourceARB */
+GdkGLProc
+gdk_gl_get_glGetShaderSourceARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_shader_objects.glGetShaderSourceARB == (GdkGLProc_glGetShaderSourceARB) -1)
+    _procs_GL_ARB_shader_objects.glGetShaderSourceARB =
+      (GdkGLProc_glGetShaderSourceARB) gdk_gl_get_proc_address ("glGetShaderSourceARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetShaderSourceARB () - %s",
+               (_procs_GL_ARB_shader_objects.glGetShaderSourceARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_shader_objects.glGetShaderSourceARB);
+}
+
+/* Get GL_ARB_shader_objects functions */
+GdkGL_GL_ARB_shader_objects *
+gdk_gl_get_GL_ARB_shader_objects (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_shader_objects");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDeleteObjectARB () != NULL);
+          supported &= (gdk_gl_get_glGetHandleARB () != NULL);
+          supported &= (gdk_gl_get_glDetachObjectARB () != NULL);
+          supported &= (gdk_gl_get_glCreateShaderObjectARB () != NULL);
+          supported &= (gdk_gl_get_glShaderSourceARB () != NULL);
+          supported &= (gdk_gl_get_glCompileShaderARB () != NULL);
+          supported &= (gdk_gl_get_glCreateProgramObjectARB () != NULL);
+          supported &= (gdk_gl_get_glAttachObjectARB () != NULL);
+          supported &= (gdk_gl_get_glLinkProgramARB () != NULL);
+          supported &= (gdk_gl_get_glUseProgramObjectARB () != NULL);
+          supported &= (gdk_gl_get_glValidateProgramARB () != NULL);
+          supported &= (gdk_gl_get_glUniform1fARB () != NULL);
+          supported &= (gdk_gl_get_glUniform2fARB () != NULL);
+          supported &= (gdk_gl_get_glUniform3fARB () != NULL);
+          supported &= (gdk_gl_get_glUniform4fARB () != NULL);
+          supported &= (gdk_gl_get_glUniform1iARB () != NULL);
+          supported &= (gdk_gl_get_glUniform2iARB () != NULL);
+          supported &= (gdk_gl_get_glUniform3iARB () != NULL);
+          supported &= (gdk_gl_get_glUniform4iARB () != NULL);
+          supported &= (gdk_gl_get_glUniform1fvARB () != NULL);
+          supported &= (gdk_gl_get_glUniform2fvARB () != NULL);
+          supported &= (gdk_gl_get_glUniform3fvARB () != NULL);
+          supported &= (gdk_gl_get_glUniform4fvARB () != NULL);
+          supported &= (gdk_gl_get_glUniform1ivARB () != NULL);
+          supported &= (gdk_gl_get_glUniform2ivARB () != NULL);
+          supported &= (gdk_gl_get_glUniform3ivARB () != NULL);
+          supported &= (gdk_gl_get_glUniform4ivARB () != NULL);
+          supported &= (gdk_gl_get_glUniformMatrix2fvARB () != NULL);
+          supported &= (gdk_gl_get_glUniformMatrix3fvARB () != NULL);
+          supported &= (gdk_gl_get_glUniformMatrix4fvARB () != NULL);
+          supported &= (gdk_gl_get_glGetObjectParameterfvARB () != NULL);
+          supported &= (gdk_gl_get_glGetObjectParameterivARB () != NULL);
+          supported &= (gdk_gl_get_glGetInfoLogARB () != NULL);
+          supported &= (gdk_gl_get_glGetAttachedObjectsARB () != NULL);
+          supported &= (gdk_gl_get_glGetUniformLocationARB () != NULL);
+          supported &= (gdk_gl_get_glGetActiveUniformARB () != NULL);
+          supported &= (gdk_gl_get_glGetUniformfvARB () != NULL);
+          supported &= (gdk_gl_get_glGetUniformivARB () != NULL);
+          supported &= (gdk_gl_get_glGetShaderSourceARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_shader_objects () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_shader_objects;
+}
+
+/*
+ * GL_ARB_vertex_shader
+ */
+
+static GdkGL_GL_ARB_vertex_shader _procs_GL_ARB_vertex_shader = {
+  (GdkGLProc_glBindAttribLocationARB) -1,
+  (GdkGLProc_glGetActiveAttribARB) -1,
+  (GdkGLProc_glGetAttribLocationARB) -1
+};
+
+/* glBindAttribLocationARB */
+GdkGLProc
+gdk_gl_get_glBindAttribLocationARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_shader.glBindAttribLocationARB == (GdkGLProc_glBindAttribLocationARB) -1)
+    _procs_GL_ARB_vertex_shader.glBindAttribLocationARB =
+      (GdkGLProc_glBindAttribLocationARB) gdk_gl_get_proc_address ("glBindAttribLocationARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindAttribLocationARB () - %s",
+               (_procs_GL_ARB_vertex_shader.glBindAttribLocationARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_shader.glBindAttribLocationARB);
+}
+
+/* glGetActiveAttribARB */
+GdkGLProc
+gdk_gl_get_glGetActiveAttribARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_shader.glGetActiveAttribARB == (GdkGLProc_glGetActiveAttribARB) -1)
+    _procs_GL_ARB_vertex_shader.glGetActiveAttribARB =
+      (GdkGLProc_glGetActiveAttribARB) gdk_gl_get_proc_address ("glGetActiveAttribARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetActiveAttribARB () - %s",
+               (_procs_GL_ARB_vertex_shader.glGetActiveAttribARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_shader.glGetActiveAttribARB);
+}
+
+/* glGetAttribLocationARB */
+GdkGLProc
+gdk_gl_get_glGetAttribLocationARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_shader.glGetAttribLocationARB == (GdkGLProc_glGetAttribLocationARB) -1)
+    _procs_GL_ARB_vertex_shader.glGetAttribLocationARB =
+      (GdkGLProc_glGetAttribLocationARB) gdk_gl_get_proc_address ("glGetAttribLocationARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetAttribLocationARB () - %s",
+               (_procs_GL_ARB_vertex_shader.glGetAttribLocationARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_shader.glGetAttribLocationARB);
+}
+
+/* Get GL_ARB_vertex_shader functions */
+GdkGL_GL_ARB_vertex_shader *
+gdk_gl_get_GL_ARB_vertex_shader (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_shader");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBindAttribLocationARB () != NULL);
+          supported &= (gdk_gl_get_glGetActiveAttribARB () != NULL);
+          supported &= (gdk_gl_get_glGetAttribLocationARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_vertex_shader () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_vertex_shader;
+}
+
+/*
+ * GL_ARB_draw_buffers
+ */
+
+static GdkGL_GL_ARB_draw_buffers _procs_GL_ARB_draw_buffers = {
+  (GdkGLProc_glDrawBuffersARB) -1
+};
+
+/* glDrawBuffersARB */
+GdkGLProc
+gdk_gl_get_glDrawBuffersARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_buffers.glDrawBuffersARB == (GdkGLProc_glDrawBuffersARB) -1)
+    _procs_GL_ARB_draw_buffers.glDrawBuffersARB =
+      (GdkGLProc_glDrawBuffersARB) gdk_gl_get_proc_address ("glDrawBuffersARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawBuffersARB () - %s",
+               (_procs_GL_ARB_draw_buffers.glDrawBuffersARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_buffers.glDrawBuffersARB);
+}
+
+/* Get GL_ARB_draw_buffers functions */
+GdkGL_GL_ARB_draw_buffers *
+gdk_gl_get_GL_ARB_draw_buffers (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_draw_buffers");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDrawBuffersARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_draw_buffers () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_draw_buffers;
+}
+
+/*
+ * GL_ARB_color_buffer_float
+ */
+
+static GdkGL_GL_ARB_color_buffer_float _procs_GL_ARB_color_buffer_float = {
+  (GdkGLProc_glClampColorARB) -1
+};
+
+/* glClampColorARB */
+GdkGLProc
+gdk_gl_get_glClampColorARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_color_buffer_float.glClampColorARB == (GdkGLProc_glClampColorARB) -1)
+    _procs_GL_ARB_color_buffer_float.glClampColorARB =
+      (GdkGLProc_glClampColorARB) gdk_gl_get_proc_address ("glClampColorARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glClampColorARB () - %s",
+               (_procs_GL_ARB_color_buffer_float.glClampColorARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_color_buffer_float.glClampColorARB);
+}
+
+/* Get GL_ARB_color_buffer_float functions */
+GdkGL_GL_ARB_color_buffer_float *
+gdk_gl_get_GL_ARB_color_buffer_float (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_color_buffer_float");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glClampColorARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_color_buffer_float () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_color_buffer_float;
+}
+
+/*
+ * GL_ARB_draw_instanced
+ */
+
+static GdkGL_GL_ARB_draw_instanced _procs_GL_ARB_draw_instanced = {
+  (GdkGLProc_glDrawArraysInstancedARB) -1,
+  (GdkGLProc_glDrawElementsInstancedARB) -1
+};
+
+/* glDrawArraysInstancedARB */
+GdkGLProc
+gdk_gl_get_glDrawArraysInstancedARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_instanced.glDrawArraysInstancedARB == (GdkGLProc_glDrawArraysInstancedARB) -1)
+    _procs_GL_ARB_draw_instanced.glDrawArraysInstancedARB =
+      (GdkGLProc_glDrawArraysInstancedARB) gdk_gl_get_proc_address ("glDrawArraysInstancedARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawArraysInstancedARB () - %s",
+               (_procs_GL_ARB_draw_instanced.glDrawArraysInstancedARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_instanced.glDrawArraysInstancedARB);
+}
+
+/* glDrawElementsInstancedARB */
+GdkGLProc
+gdk_gl_get_glDrawElementsInstancedARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_instanced.glDrawElementsInstancedARB == (GdkGLProc_glDrawElementsInstancedARB) -1)
+    _procs_GL_ARB_draw_instanced.glDrawElementsInstancedARB =
+      (GdkGLProc_glDrawElementsInstancedARB) gdk_gl_get_proc_address ("glDrawElementsInstancedARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawElementsInstancedARB () - %s",
+               (_procs_GL_ARB_draw_instanced.glDrawElementsInstancedARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_instanced.glDrawElementsInstancedARB);
+}
+
+/* Get GL_ARB_draw_instanced functions */
+GdkGL_GL_ARB_draw_instanced *
+gdk_gl_get_GL_ARB_draw_instanced (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_draw_instanced");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDrawArraysInstancedARB () != NULL);
+          supported &= (gdk_gl_get_glDrawElementsInstancedARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_draw_instanced () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_draw_instanced;
+}
+
+/*
+ * GL_ARB_framebuffer_object
+ */
+
+static GdkGL_GL_ARB_framebuffer_object _procs_GL_ARB_framebuffer_object = {
+  (GdkGLProc_glIsRenderbuffer) -1,
+  (GdkGLProc_glBindRenderbuffer) -1,
+  (GdkGLProc_glDeleteRenderbuffers) -1,
+  (GdkGLProc_glGenRenderbuffers) -1,
+  (GdkGLProc_glRenderbufferStorage) -1,
+  (GdkGLProc_glGetRenderbufferParameteriv) -1,
+  (GdkGLProc_glIsFramebuffer) -1,
+  (GdkGLProc_glBindFramebuffer) -1,
+  (GdkGLProc_glDeleteFramebuffers) -1,
+  (GdkGLProc_glGenFramebuffers) -1,
+  (GdkGLProc_glCheckFramebufferStatus) -1,
+  (GdkGLProc_glFramebufferTexture1D) -1,
+  (GdkGLProc_glFramebufferTexture2D) -1,
+  (GdkGLProc_glFramebufferTexture3D) -1,
+  (GdkGLProc_glFramebufferRenderbuffer) -1,
+  (GdkGLProc_glGetFramebufferAttachmentParameteriv) -1,
+  (GdkGLProc_glGenerateMipmap) -1,
+  (GdkGLProc_glBlitFramebuffer) -1,
+  (GdkGLProc_glRenderbufferStorageMultisample) -1,
+  (GdkGLProc_glFramebufferTextureLayer) -1
+};
+
+/* glIsRenderbuffer */
+GdkGLProc
+gdk_gl_get_glIsRenderbuffer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glIsRenderbuffer == (GdkGLProc_glIsRenderbuffer) -1)
+    _procs_GL_ARB_framebuffer_object.glIsRenderbuffer =
+      (GdkGLProc_glIsRenderbuffer) gdk_gl_get_proc_address ("glIsRenderbuffer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsRenderbuffer () - %s",
+               (_procs_GL_ARB_framebuffer_object.glIsRenderbuffer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glIsRenderbuffer);
+}
+
+/* glBindRenderbuffer */
+GdkGLProc
+gdk_gl_get_glBindRenderbuffer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glBindRenderbuffer == (GdkGLProc_glBindRenderbuffer) -1)
+    _procs_GL_ARB_framebuffer_object.glBindRenderbuffer =
+      (GdkGLProc_glBindRenderbuffer) gdk_gl_get_proc_address ("glBindRenderbuffer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindRenderbuffer () - %s",
+               (_procs_GL_ARB_framebuffer_object.glBindRenderbuffer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glBindRenderbuffer);
+}
+
+/* glDeleteRenderbuffers */
+GdkGLProc
+gdk_gl_get_glDeleteRenderbuffers (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glDeleteRenderbuffers == (GdkGLProc_glDeleteRenderbuffers) -1)
+    _procs_GL_ARB_framebuffer_object.glDeleteRenderbuffers =
+      (GdkGLProc_glDeleteRenderbuffers) gdk_gl_get_proc_address ("glDeleteRenderbuffers");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteRenderbuffers () - %s",
+               (_procs_GL_ARB_framebuffer_object.glDeleteRenderbuffers) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glDeleteRenderbuffers);
+}
+
+/* glGenRenderbuffers */
+GdkGLProc
+gdk_gl_get_glGenRenderbuffers (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glGenRenderbuffers == (GdkGLProc_glGenRenderbuffers) -1)
+    _procs_GL_ARB_framebuffer_object.glGenRenderbuffers =
+      (GdkGLProc_glGenRenderbuffers) gdk_gl_get_proc_address ("glGenRenderbuffers");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenRenderbuffers () - %s",
+               (_procs_GL_ARB_framebuffer_object.glGenRenderbuffers) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glGenRenderbuffers);
+}
+
+/* glRenderbufferStorage */
+GdkGLProc
+gdk_gl_get_glRenderbufferStorage (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glRenderbufferStorage == (GdkGLProc_glRenderbufferStorage) -1)
+    _procs_GL_ARB_framebuffer_object.glRenderbufferStorage =
+      (GdkGLProc_glRenderbufferStorage) gdk_gl_get_proc_address ("glRenderbufferStorage");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glRenderbufferStorage () - %s",
+               (_procs_GL_ARB_framebuffer_object.glRenderbufferStorage) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glRenderbufferStorage);
+}
+
+/* glGetRenderbufferParameteriv */
+GdkGLProc
+gdk_gl_get_glGetRenderbufferParameteriv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glGetRenderbufferParameteriv == (GdkGLProc_glGetRenderbufferParameteriv) -1)
+    _procs_GL_ARB_framebuffer_object.glGetRenderbufferParameteriv =
+      (GdkGLProc_glGetRenderbufferParameteriv) gdk_gl_get_proc_address ("glGetRenderbufferParameteriv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetRenderbufferParameteriv () - %s",
+               (_procs_GL_ARB_framebuffer_object.glGetRenderbufferParameteriv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glGetRenderbufferParameteriv);
+}
+
+/* glIsFramebuffer */
+GdkGLProc
+gdk_gl_get_glIsFramebuffer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glIsFramebuffer == (GdkGLProc_glIsFramebuffer) -1)
+    _procs_GL_ARB_framebuffer_object.glIsFramebuffer =
+      (GdkGLProc_glIsFramebuffer) gdk_gl_get_proc_address ("glIsFramebuffer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsFramebuffer () - %s",
+               (_procs_GL_ARB_framebuffer_object.glIsFramebuffer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glIsFramebuffer);
+}
+
+/* glBindFramebuffer */
+GdkGLProc
+gdk_gl_get_glBindFramebuffer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glBindFramebuffer == (GdkGLProc_glBindFramebuffer) -1)
+    _procs_GL_ARB_framebuffer_object.glBindFramebuffer =
+      (GdkGLProc_glBindFramebuffer) gdk_gl_get_proc_address ("glBindFramebuffer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindFramebuffer () - %s",
+               (_procs_GL_ARB_framebuffer_object.glBindFramebuffer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glBindFramebuffer);
+}
+
+/* glDeleteFramebuffers */
+GdkGLProc
+gdk_gl_get_glDeleteFramebuffers (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glDeleteFramebuffers == (GdkGLProc_glDeleteFramebuffers) -1)
+    _procs_GL_ARB_framebuffer_object.glDeleteFramebuffers =
+      (GdkGLProc_glDeleteFramebuffers) gdk_gl_get_proc_address ("glDeleteFramebuffers");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteFramebuffers () - %s",
+               (_procs_GL_ARB_framebuffer_object.glDeleteFramebuffers) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glDeleteFramebuffers);
+}
+
+/* glGenFramebuffers */
+GdkGLProc
+gdk_gl_get_glGenFramebuffers (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glGenFramebuffers == (GdkGLProc_glGenFramebuffers) -1)
+    _procs_GL_ARB_framebuffer_object.glGenFramebuffers =
+      (GdkGLProc_glGenFramebuffers) gdk_gl_get_proc_address ("glGenFramebuffers");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenFramebuffers () - %s",
+               (_procs_GL_ARB_framebuffer_object.glGenFramebuffers) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glGenFramebuffers);
+}
+
+/* glCheckFramebufferStatus */
+GdkGLProc
+gdk_gl_get_glCheckFramebufferStatus (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glCheckFramebufferStatus == (GdkGLProc_glCheckFramebufferStatus) -1)
+    _procs_GL_ARB_framebuffer_object.glCheckFramebufferStatus =
+      (GdkGLProc_glCheckFramebufferStatus) gdk_gl_get_proc_address ("glCheckFramebufferStatus");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCheckFramebufferStatus () - %s",
+               (_procs_GL_ARB_framebuffer_object.glCheckFramebufferStatus) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glCheckFramebufferStatus);
+}
+
+/* glFramebufferTexture1D */
+GdkGLProc
+gdk_gl_get_glFramebufferTexture1D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glFramebufferTexture1D == (GdkGLProc_glFramebufferTexture1D) -1)
+    _procs_GL_ARB_framebuffer_object.glFramebufferTexture1D =
+      (GdkGLProc_glFramebufferTexture1D) gdk_gl_get_proc_address ("glFramebufferTexture1D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferTexture1D () - %s",
+               (_procs_GL_ARB_framebuffer_object.glFramebufferTexture1D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glFramebufferTexture1D);
+}
+
+/* glFramebufferTexture2D */
+GdkGLProc
+gdk_gl_get_glFramebufferTexture2D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glFramebufferTexture2D == (GdkGLProc_glFramebufferTexture2D) -1)
+    _procs_GL_ARB_framebuffer_object.glFramebufferTexture2D =
+      (GdkGLProc_glFramebufferTexture2D) gdk_gl_get_proc_address ("glFramebufferTexture2D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferTexture2D () - %s",
+               (_procs_GL_ARB_framebuffer_object.glFramebufferTexture2D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glFramebufferTexture2D);
+}
+
+/* glFramebufferTexture3D */
+GdkGLProc
+gdk_gl_get_glFramebufferTexture3D (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glFramebufferTexture3D == (GdkGLProc_glFramebufferTexture3D) -1)
+    _procs_GL_ARB_framebuffer_object.glFramebufferTexture3D =
+      (GdkGLProc_glFramebufferTexture3D) gdk_gl_get_proc_address ("glFramebufferTexture3D");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferTexture3D () - %s",
+               (_procs_GL_ARB_framebuffer_object.glFramebufferTexture3D) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glFramebufferTexture3D);
+}
+
+/* glFramebufferRenderbuffer */
+GdkGLProc
+gdk_gl_get_glFramebufferRenderbuffer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glFramebufferRenderbuffer == (GdkGLProc_glFramebufferRenderbuffer) -1)
+    _procs_GL_ARB_framebuffer_object.glFramebufferRenderbuffer =
+      (GdkGLProc_glFramebufferRenderbuffer) gdk_gl_get_proc_address ("glFramebufferRenderbuffer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferRenderbuffer () - %s",
+               (_procs_GL_ARB_framebuffer_object.glFramebufferRenderbuffer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glFramebufferRenderbuffer);
+}
+
+/* glGetFramebufferAttachmentParameteriv */
+GdkGLProc
+gdk_gl_get_glGetFramebufferAttachmentParameteriv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glGetFramebufferAttachmentParameteriv == (GdkGLProc_glGetFramebufferAttachmentParameteriv) -1)
+    _procs_GL_ARB_framebuffer_object.glGetFramebufferAttachmentParameteriv =
+      (GdkGLProc_glGetFramebufferAttachmentParameteriv) gdk_gl_get_proc_address ("glGetFramebufferAttachmentParameteriv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFramebufferAttachmentParameteriv () - %s",
+               (_procs_GL_ARB_framebuffer_object.glGetFramebufferAttachmentParameteriv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glGetFramebufferAttachmentParameteriv);
+}
+
+/* glGenerateMipmap */
+GdkGLProc
+gdk_gl_get_glGenerateMipmap (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glGenerateMipmap == (GdkGLProc_glGenerateMipmap) -1)
+    _procs_GL_ARB_framebuffer_object.glGenerateMipmap =
+      (GdkGLProc_glGenerateMipmap) gdk_gl_get_proc_address ("glGenerateMipmap");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenerateMipmap () - %s",
+               (_procs_GL_ARB_framebuffer_object.glGenerateMipmap) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glGenerateMipmap);
+}
+
+/* glBlitFramebuffer */
+GdkGLProc
+gdk_gl_get_glBlitFramebuffer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glBlitFramebuffer == (GdkGLProc_glBlitFramebuffer) -1)
+    _procs_GL_ARB_framebuffer_object.glBlitFramebuffer =
+      (GdkGLProc_glBlitFramebuffer) gdk_gl_get_proc_address ("glBlitFramebuffer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlitFramebuffer () - %s",
+               (_procs_GL_ARB_framebuffer_object.glBlitFramebuffer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glBlitFramebuffer);
+}
+
+/* glRenderbufferStorageMultisample */
+GdkGLProc
+gdk_gl_get_glRenderbufferStorageMultisample (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glRenderbufferStorageMultisample == (GdkGLProc_glRenderbufferStorageMultisample) -1)
+    _procs_GL_ARB_framebuffer_object.glRenderbufferStorageMultisample =
+      (GdkGLProc_glRenderbufferStorageMultisample) gdk_gl_get_proc_address ("glRenderbufferStorageMultisample");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glRenderbufferStorageMultisample () - %s",
+               (_procs_GL_ARB_framebuffer_object.glRenderbufferStorageMultisample) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glRenderbufferStorageMultisample);
+}
+
+/* glFramebufferTextureLayer */
+GdkGLProc
+gdk_gl_get_glFramebufferTextureLayer (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_framebuffer_object.glFramebufferTextureLayer == (GdkGLProc_glFramebufferTextureLayer) -1)
+    _procs_GL_ARB_framebuffer_object.glFramebufferTextureLayer =
+      (GdkGLProc_glFramebufferTextureLayer) gdk_gl_get_proc_address ("glFramebufferTextureLayer");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferTextureLayer () - %s",
+               (_procs_GL_ARB_framebuffer_object.glFramebufferTextureLayer) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_framebuffer_object.glFramebufferTextureLayer);
+}
+
+/* Get GL_ARB_framebuffer_object functions */
+GdkGL_GL_ARB_framebuffer_object *
+gdk_gl_get_GL_ARB_framebuffer_object (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_framebuffer_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glIsRenderbuffer () != NULL);
+          supported &= (gdk_gl_get_glBindRenderbuffer () != NULL);
+          supported &= (gdk_gl_get_glDeleteRenderbuffers () != NULL);
+          supported &= (gdk_gl_get_glGenRenderbuffers () != NULL);
+          supported &= (gdk_gl_get_glRenderbufferStorage () != NULL);
+          supported &= (gdk_gl_get_glGetRenderbufferParameteriv () != NULL);
+          supported &= (gdk_gl_get_glIsFramebuffer () != NULL);
+          supported &= (gdk_gl_get_glBindFramebuffer () != NULL);
+          supported &= (gdk_gl_get_glDeleteFramebuffers () != NULL);
+          supported &= (gdk_gl_get_glGenFramebuffers () != NULL);
+          supported &= (gdk_gl_get_glCheckFramebufferStatus () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTexture1D () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTexture2D () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTexture3D () != NULL);
+          supported &= (gdk_gl_get_glFramebufferRenderbuffer () != NULL);
+          supported &= (gdk_gl_get_glGetFramebufferAttachmentParameteriv () != NULL);
+          supported &= (gdk_gl_get_glGenerateMipmap () != NULL);
+          supported &= (gdk_gl_get_glBlitFramebuffer () != NULL);
+          supported &= (gdk_gl_get_glRenderbufferStorageMultisample () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTextureLayer () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_framebuffer_object () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_framebuffer_object;
+}
+
+/*
+ * GL_ARB_geometry_shader4
+ */
+
+static GdkGL_GL_ARB_geometry_shader4 _procs_GL_ARB_geometry_shader4 = {
+  (GdkGLProc_glProgramParameteriARB) -1,
+  (GdkGLProc_glFramebufferTextureARB) -1,
+  (GdkGLProc_glFramebufferTextureLayerARB) -1,
+  (GdkGLProc_glFramebufferTextureFaceARB) -1
+};
+
+/* glProgramParameteriARB */
+GdkGLProc
+gdk_gl_get_glProgramParameteriARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_geometry_shader4.glProgramParameteriARB == (GdkGLProc_glProgramParameteriARB) -1)
+    _procs_GL_ARB_geometry_shader4.glProgramParameteriARB =
+      (GdkGLProc_glProgramParameteriARB) gdk_gl_get_proc_address ("glProgramParameteriARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramParameteriARB () - %s",
+               (_procs_GL_ARB_geometry_shader4.glProgramParameteriARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_geometry_shader4.glProgramParameteriARB);
+}
+
+/* glFramebufferTextureARB */
+GdkGLProc
+gdk_gl_get_glFramebufferTextureARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_geometry_shader4.glFramebufferTextureARB == (GdkGLProc_glFramebufferTextureARB) -1)
+    _procs_GL_ARB_geometry_shader4.glFramebufferTextureARB =
+      (GdkGLProc_glFramebufferTextureARB) gdk_gl_get_proc_address ("glFramebufferTextureARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferTextureARB () - %s",
+               (_procs_GL_ARB_geometry_shader4.glFramebufferTextureARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_geometry_shader4.glFramebufferTextureARB);
+}
+
+/* glFramebufferTextureLayerARB */
+GdkGLProc
+gdk_gl_get_glFramebufferTextureLayerARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_geometry_shader4.glFramebufferTextureLayerARB == (GdkGLProc_glFramebufferTextureLayerARB) -1)
+    _procs_GL_ARB_geometry_shader4.glFramebufferTextureLayerARB =
+      (GdkGLProc_glFramebufferTextureLayerARB) gdk_gl_get_proc_address ("glFramebufferTextureLayerARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferTextureLayerARB () - %s",
+               (_procs_GL_ARB_geometry_shader4.glFramebufferTextureLayerARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_geometry_shader4.glFramebufferTextureLayerARB);
+}
+
+/* glFramebufferTextureFaceARB */
+GdkGLProc
+gdk_gl_get_glFramebufferTextureFaceARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_geometry_shader4.glFramebufferTextureFaceARB == (GdkGLProc_glFramebufferTextureFaceARB) -1)
+    _procs_GL_ARB_geometry_shader4.glFramebufferTextureFaceARB =
+      (GdkGLProc_glFramebufferTextureFaceARB) gdk_gl_get_proc_address ("glFramebufferTextureFaceARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFramebufferTextureFaceARB () - %s",
+               (_procs_GL_ARB_geometry_shader4.glFramebufferTextureFaceARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_geometry_shader4.glFramebufferTextureFaceARB);
+}
+
+/* Get GL_ARB_geometry_shader4 functions */
+GdkGL_GL_ARB_geometry_shader4 *
+gdk_gl_get_GL_ARB_geometry_shader4 (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_geometry_shader4");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glProgramParameteriARB () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTextureARB () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTextureLayerARB () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTextureFaceARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_geometry_shader4 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_geometry_shader4;
+}
+
+/*
+ * GL_ARB_instanced_arrays
+ */
+
+static GdkGL_GL_ARB_instanced_arrays _procs_GL_ARB_instanced_arrays = {
+  (GdkGLProc_glVertexAttribDivisorARB) -1
+};
+
+/* glVertexAttribDivisorARB */
+GdkGLProc
+gdk_gl_get_glVertexAttribDivisorARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_instanced_arrays.glVertexAttribDivisorARB == (GdkGLProc_glVertexAttribDivisorARB) -1)
+    _procs_GL_ARB_instanced_arrays.glVertexAttribDivisorARB =
+      (GdkGLProc_glVertexAttribDivisorARB) gdk_gl_get_proc_address ("glVertexAttribDivisorARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribDivisorARB () - %s",
+               (_procs_GL_ARB_instanced_arrays.glVertexAttribDivisorARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_instanced_arrays.glVertexAttribDivisorARB);
+}
+
+/* Get GL_ARB_instanced_arrays functions */
+GdkGL_GL_ARB_instanced_arrays *
+gdk_gl_get_GL_ARB_instanced_arrays (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_instanced_arrays");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glVertexAttribDivisorARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_instanced_arrays () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_instanced_arrays;
+}
+
+/*
+ * GL_ARB_map_buffer_range
+ */
+
+static GdkGL_GL_ARB_map_buffer_range _procs_GL_ARB_map_buffer_range = {
+  (GdkGLProc_glMapBufferRange) -1,
+  (GdkGLProc_glFlushMappedBufferRange) -1
+};
+
+/* glMapBufferRange */
+GdkGLProc
+gdk_gl_get_glMapBufferRange (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_map_buffer_range.glMapBufferRange == (GdkGLProc_glMapBufferRange) -1)
+    _procs_GL_ARB_map_buffer_range.glMapBufferRange =
+      (GdkGLProc_glMapBufferRange) gdk_gl_get_proc_address ("glMapBufferRange");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMapBufferRange () - %s",
+               (_procs_GL_ARB_map_buffer_range.glMapBufferRange) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_map_buffer_range.glMapBufferRange);
+}
+
+/* glFlushMappedBufferRange */
+GdkGLProc
+gdk_gl_get_glFlushMappedBufferRange (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_map_buffer_range.glFlushMappedBufferRange == (GdkGLProc_glFlushMappedBufferRange) -1)
+    _procs_GL_ARB_map_buffer_range.glFlushMappedBufferRange =
+      (GdkGLProc_glFlushMappedBufferRange) gdk_gl_get_proc_address ("glFlushMappedBufferRange");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFlushMappedBufferRange () - %s",
+               (_procs_GL_ARB_map_buffer_range.glFlushMappedBufferRange) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_map_buffer_range.glFlushMappedBufferRange);
+}
+
+/* Get GL_ARB_map_buffer_range functions */
+GdkGL_GL_ARB_map_buffer_range *
+gdk_gl_get_GL_ARB_map_buffer_range (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_map_buffer_range");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glMapBufferRange () != NULL);
+          supported &= (gdk_gl_get_glFlushMappedBufferRange () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_map_buffer_range () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_map_buffer_range;
+}
+
+/*
+ * GL_ARB_texture_buffer_object
+ */
+
+static GdkGL_GL_ARB_texture_buffer_object _procs_GL_ARB_texture_buffer_object = {
+  (GdkGLProc_glTexBufferARB) -1
+};
+
+/* glTexBufferARB */
+GdkGLProc
+gdk_gl_get_glTexBufferARB (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_texture_buffer_object.glTexBufferARB == (GdkGLProc_glTexBufferARB) -1)
+    _procs_GL_ARB_texture_buffer_object.glTexBufferARB =
+      (GdkGLProc_glTexBufferARB) gdk_gl_get_proc_address ("glTexBufferARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexBufferARB () - %s",
+               (_procs_GL_ARB_texture_buffer_object.glTexBufferARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_texture_buffer_object.glTexBufferARB);
+}
+
+/* Get GL_ARB_texture_buffer_object functions */
+GdkGL_GL_ARB_texture_buffer_object *
+gdk_gl_get_GL_ARB_texture_buffer_object (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_texture_buffer_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexBufferARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_texture_buffer_object () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_texture_buffer_object;
+}
+
+/*
+ * GL_ARB_vertex_array_object
+ */
+
+static GdkGL_GL_ARB_vertex_array_object _procs_GL_ARB_vertex_array_object = {
+  (GdkGLProc_glBindVertexArray) -1,
+  (GdkGLProc_glDeleteVertexArrays) -1,
+  (GdkGLProc_glGenVertexArrays) -1,
+  (GdkGLProc_glIsVertexArray) -1
+};
+
+/* glBindVertexArray */
+GdkGLProc
+gdk_gl_get_glBindVertexArray (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_array_object.glBindVertexArray == (GdkGLProc_glBindVertexArray) -1)
+    _procs_GL_ARB_vertex_array_object.glBindVertexArray =
+      (GdkGLProc_glBindVertexArray) gdk_gl_get_proc_address ("glBindVertexArray");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindVertexArray () - %s",
+               (_procs_GL_ARB_vertex_array_object.glBindVertexArray) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_array_object.glBindVertexArray);
+}
+
+/* glDeleteVertexArrays */
+GdkGLProc
+gdk_gl_get_glDeleteVertexArrays (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_array_object.glDeleteVertexArrays == (GdkGLProc_glDeleteVertexArrays) -1)
+    _procs_GL_ARB_vertex_array_object.glDeleteVertexArrays =
+      (GdkGLProc_glDeleteVertexArrays) gdk_gl_get_proc_address ("glDeleteVertexArrays");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteVertexArrays () - %s",
+               (_procs_GL_ARB_vertex_array_object.glDeleteVertexArrays) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_array_object.glDeleteVertexArrays);
+}
+
+/* glGenVertexArrays */
+GdkGLProc
+gdk_gl_get_glGenVertexArrays (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_array_object.glGenVertexArrays == (GdkGLProc_glGenVertexArrays) -1)
+    _procs_GL_ARB_vertex_array_object.glGenVertexArrays =
+      (GdkGLProc_glGenVertexArrays) gdk_gl_get_proc_address ("glGenVertexArrays");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenVertexArrays () - %s",
+               (_procs_GL_ARB_vertex_array_object.glGenVertexArrays) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_array_object.glGenVertexArrays);
+}
+
+/* glIsVertexArray */
+GdkGLProc
+gdk_gl_get_glIsVertexArray (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_vertex_array_object.glIsVertexArray == (GdkGLProc_glIsVertexArray) -1)
+    _procs_GL_ARB_vertex_array_object.glIsVertexArray =
+      (GdkGLProc_glIsVertexArray) gdk_gl_get_proc_address ("glIsVertexArray");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsVertexArray () - %s",
+               (_procs_GL_ARB_vertex_array_object.glIsVertexArray) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_vertex_array_object.glIsVertexArray);
+}
+
+/* Get GL_ARB_vertex_array_object functions */
+GdkGL_GL_ARB_vertex_array_object *
+gdk_gl_get_GL_ARB_vertex_array_object (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_vertex_array_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBindVertexArray () != NULL);
+          supported &= (gdk_gl_get_glDeleteVertexArrays () != NULL);
+          supported &= (gdk_gl_get_glGenVertexArrays () != NULL);
+          supported &= (gdk_gl_get_glIsVertexArray () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_vertex_array_object () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_vertex_array_object;
+}
+
+/*
+ * GL_ARB_uniform_buffer_object
+ */
+
+static GdkGL_GL_ARB_uniform_buffer_object _procs_GL_ARB_uniform_buffer_object = {
+  (GdkGLProc_glGetUniformIndices) -1,
+  (GdkGLProc_glGetActiveUniformsiv) -1,
+  (GdkGLProc_glGetActiveUniformName) -1,
+  (GdkGLProc_glGetUniformBlockIndex) -1,
+  (GdkGLProc_glGetActiveUniformBlockiv) -1,
+  (GdkGLProc_glGetActiveUniformBlockName) -1,
+  (GdkGLProc_glUniformBlockBinding) -1
+};
+
+/* glGetUniformIndices */
+GdkGLProc
+gdk_gl_get_glGetUniformIndices (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_uniform_buffer_object.glGetUniformIndices == (GdkGLProc_glGetUniformIndices) -1)
+    _procs_GL_ARB_uniform_buffer_object.glGetUniformIndices =
+      (GdkGLProc_glGetUniformIndices) gdk_gl_get_proc_address ("glGetUniformIndices");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetUniformIndices () - %s",
+               (_procs_GL_ARB_uniform_buffer_object.glGetUniformIndices) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_uniform_buffer_object.glGetUniformIndices);
+}
+
+/* glGetActiveUniformsiv */
+GdkGLProc
+gdk_gl_get_glGetActiveUniformsiv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformsiv == (GdkGLProc_glGetActiveUniformsiv) -1)
+    _procs_GL_ARB_uniform_buffer_object.glGetActiveUniformsiv =
+      (GdkGLProc_glGetActiveUniformsiv) gdk_gl_get_proc_address ("glGetActiveUniformsiv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetActiveUniformsiv () - %s",
+               (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformsiv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformsiv);
+}
+
+/* glGetActiveUniformName */
+GdkGLProc
+gdk_gl_get_glGetActiveUniformName (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformName == (GdkGLProc_glGetActiveUniformName) -1)
+    _procs_GL_ARB_uniform_buffer_object.glGetActiveUniformName =
+      (GdkGLProc_glGetActiveUniformName) gdk_gl_get_proc_address ("glGetActiveUniformName");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetActiveUniformName () - %s",
+               (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformName) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformName);
+}
+
+/* glGetUniformBlockIndex */
+GdkGLProc
+gdk_gl_get_glGetUniformBlockIndex (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_uniform_buffer_object.glGetUniformBlockIndex == (GdkGLProc_glGetUniformBlockIndex) -1)
+    _procs_GL_ARB_uniform_buffer_object.glGetUniformBlockIndex =
+      (GdkGLProc_glGetUniformBlockIndex) gdk_gl_get_proc_address ("glGetUniformBlockIndex");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetUniformBlockIndex () - %s",
+               (_procs_GL_ARB_uniform_buffer_object.glGetUniformBlockIndex) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_uniform_buffer_object.glGetUniformBlockIndex);
+}
+
+/* glGetActiveUniformBlockiv */
+GdkGLProc
+gdk_gl_get_glGetActiveUniformBlockiv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockiv == (GdkGLProc_glGetActiveUniformBlockiv) -1)
+    _procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockiv =
+      (GdkGLProc_glGetActiveUniformBlockiv) gdk_gl_get_proc_address ("glGetActiveUniformBlockiv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetActiveUniformBlockiv () - %s",
+               (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockiv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockiv);
+}
+
+/* glGetActiveUniformBlockName */
+GdkGLProc
+gdk_gl_get_glGetActiveUniformBlockName (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockName == (GdkGLProc_glGetActiveUniformBlockName) -1)
+    _procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockName =
+      (GdkGLProc_glGetActiveUniformBlockName) gdk_gl_get_proc_address ("glGetActiveUniformBlockName");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetActiveUniformBlockName () - %s",
+               (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockName) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_uniform_buffer_object.glGetActiveUniformBlockName);
+}
+
+/* glUniformBlockBinding */
+GdkGLProc
+gdk_gl_get_glUniformBlockBinding (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_uniform_buffer_object.glUniformBlockBinding == (GdkGLProc_glUniformBlockBinding) -1)
+    _procs_GL_ARB_uniform_buffer_object.glUniformBlockBinding =
+      (GdkGLProc_glUniformBlockBinding) gdk_gl_get_proc_address ("glUniformBlockBinding");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniformBlockBinding () - %s",
+               (_procs_GL_ARB_uniform_buffer_object.glUniformBlockBinding) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_uniform_buffer_object.glUniformBlockBinding);
+}
+
+/* Get GL_ARB_uniform_buffer_object functions */
+GdkGL_GL_ARB_uniform_buffer_object *
+gdk_gl_get_GL_ARB_uniform_buffer_object (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_uniform_buffer_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetUniformIndices () != NULL);
+          supported &= (gdk_gl_get_glGetActiveUniformsiv () != NULL);
+          supported &= (gdk_gl_get_glGetActiveUniformName () != NULL);
+          supported &= (gdk_gl_get_glGetUniformBlockIndex () != NULL);
+          supported &= (gdk_gl_get_glGetActiveUniformBlockiv () != NULL);
+          supported &= (gdk_gl_get_glGetActiveUniformBlockName () != NULL);
+          supported &= (gdk_gl_get_glUniformBlockBinding () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_uniform_buffer_object () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_uniform_buffer_object;
+}
+
+/*
+ * GL_ARB_copy_buffer
+ */
+
+static GdkGL_GL_ARB_copy_buffer _procs_GL_ARB_copy_buffer = {
+  (GdkGLProc_glCopyBufferSubData) -1
+};
+
+/* glCopyBufferSubData */
+GdkGLProc
+gdk_gl_get_glCopyBufferSubData (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_copy_buffer.glCopyBufferSubData == (GdkGLProc_glCopyBufferSubData) -1)
+    _procs_GL_ARB_copy_buffer.glCopyBufferSubData =
+      (GdkGLProc_glCopyBufferSubData) gdk_gl_get_proc_address ("glCopyBufferSubData");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyBufferSubData () - %s",
+               (_procs_GL_ARB_copy_buffer.glCopyBufferSubData) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_copy_buffer.glCopyBufferSubData);
+}
+
+/* Get GL_ARB_copy_buffer functions */
+GdkGL_GL_ARB_copy_buffer *
+gdk_gl_get_GL_ARB_copy_buffer (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_copy_buffer");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glCopyBufferSubData () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_copy_buffer () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_copy_buffer;
+}
+
+/*
+ * GL_ARB_draw_elements_base_vertex
+ */
+
+static GdkGL_GL_ARB_draw_elements_base_vertex _procs_GL_ARB_draw_elements_base_vertex = {
+  (GdkGLProc_glDrawElementsBaseVertex) -1,
+  (GdkGLProc_glDrawRangeElementsBaseVertex) -1,
+  (GdkGLProc_glDrawElementsInstancedBaseVertex) -1,
+  (GdkGLProc_glMultiDrawElementsBaseVertex) -1
+};
+
+/* glDrawElementsBaseVertex */
+GdkGLProc
+gdk_gl_get_glDrawElementsBaseVertex (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_elements_base_vertex.glDrawElementsBaseVertex == (GdkGLProc_glDrawElementsBaseVertex) -1)
+    _procs_GL_ARB_draw_elements_base_vertex.glDrawElementsBaseVertex =
+      (GdkGLProc_glDrawElementsBaseVertex) gdk_gl_get_proc_address ("glDrawElementsBaseVertex");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawElementsBaseVertex () - %s",
+               (_procs_GL_ARB_draw_elements_base_vertex.glDrawElementsBaseVertex) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_elements_base_vertex.glDrawElementsBaseVertex);
+}
+
+/* glDrawRangeElementsBaseVertex */
+GdkGLProc
+gdk_gl_get_glDrawRangeElementsBaseVertex (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_elements_base_vertex.glDrawRangeElementsBaseVertex == (GdkGLProc_glDrawRangeElementsBaseVertex) -1)
+    _procs_GL_ARB_draw_elements_base_vertex.glDrawRangeElementsBaseVertex =
+      (GdkGLProc_glDrawRangeElementsBaseVertex) gdk_gl_get_proc_address ("glDrawRangeElementsBaseVertex");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawRangeElementsBaseVertex () - %s",
+               (_procs_GL_ARB_draw_elements_base_vertex.glDrawRangeElementsBaseVertex) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_elements_base_vertex.glDrawRangeElementsBaseVertex);
+}
+
+/* glDrawElementsInstancedBaseVertex */
+GdkGLProc
+gdk_gl_get_glDrawElementsInstancedBaseVertex (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_elements_base_vertex.glDrawElementsInstancedBaseVertex == (GdkGLProc_glDrawElementsInstancedBaseVertex) -1)
+    _procs_GL_ARB_draw_elements_base_vertex.glDrawElementsInstancedBaseVertex =
+      (GdkGLProc_glDrawElementsInstancedBaseVertex) gdk_gl_get_proc_address ("glDrawElementsInstancedBaseVertex");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawElementsInstancedBaseVertex () - %s",
+               (_procs_GL_ARB_draw_elements_base_vertex.glDrawElementsInstancedBaseVertex) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_elements_base_vertex.glDrawElementsInstancedBaseVertex);
+}
+
+/* glMultiDrawElementsBaseVertex */
+GdkGLProc
+gdk_gl_get_glMultiDrawElementsBaseVertex (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_elements_base_vertex.glMultiDrawElementsBaseVertex == (GdkGLProc_glMultiDrawElementsBaseVertex) -1)
+    _procs_GL_ARB_draw_elements_base_vertex.glMultiDrawElementsBaseVertex =
+      (GdkGLProc_glMultiDrawElementsBaseVertex) gdk_gl_get_proc_address ("glMultiDrawElementsBaseVertex");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMultiDrawElementsBaseVertex () - %s",
+               (_procs_GL_ARB_draw_elements_base_vertex.glMultiDrawElementsBaseVertex) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_elements_base_vertex.glMultiDrawElementsBaseVertex);
+}
+
+/* Get GL_ARB_draw_elements_base_vertex functions */
+GdkGL_GL_ARB_draw_elements_base_vertex *
+gdk_gl_get_GL_ARB_draw_elements_base_vertex (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_draw_elements_base_vertex");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDrawElementsBaseVertex () != NULL);
+          supported &= (gdk_gl_get_glDrawRangeElementsBaseVertex () != NULL);
+          supported &= (gdk_gl_get_glDrawElementsInstancedBaseVertex () != NULL);
+          supported &= (gdk_gl_get_glMultiDrawElementsBaseVertex () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_draw_elements_base_vertex () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_draw_elements_base_vertex;
+}
+
+/*
+ * GL_ARB_provoking_vertex
+ */
+
+static GdkGL_GL_ARB_provoking_vertex _procs_GL_ARB_provoking_vertex = {
+  (GdkGLProc_glProvokingVertex) -1
+};
+
+/* glProvokingVertex */
+GdkGLProc
+gdk_gl_get_glProvokingVertex (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_provoking_vertex.glProvokingVertex == (GdkGLProc_glProvokingVertex) -1)
+    _procs_GL_ARB_provoking_vertex.glProvokingVertex =
+      (GdkGLProc_glProvokingVertex) gdk_gl_get_proc_address ("glProvokingVertex");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProvokingVertex () - %s",
+               (_procs_GL_ARB_provoking_vertex.glProvokingVertex) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_provoking_vertex.glProvokingVertex);
+}
+
+/* Get GL_ARB_provoking_vertex functions */
+GdkGL_GL_ARB_provoking_vertex *
+gdk_gl_get_GL_ARB_provoking_vertex (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_provoking_vertex");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glProvokingVertex () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_provoking_vertex () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_provoking_vertex;
+}
+
+/*
+ * GL_ARB_sync
+ */
+
+static GdkGL_GL_ARB_sync _procs_GL_ARB_sync = {
+  (GdkGLProc_glFenceSync) -1,
+  (GdkGLProc_glIsSync) -1,
+  (GdkGLProc_glDeleteSync) -1,
+  (GdkGLProc_glClientWaitSync) -1,
+  (GdkGLProc_glWaitSync) -1,
+  (GdkGLProc_glGetInteger64v) -1,
+  (GdkGLProc_glGetSynciv) -1
+};
+
+/* glFenceSync */
+GdkGLProc
+gdk_gl_get_glFenceSync (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sync.glFenceSync == (GdkGLProc_glFenceSync) -1)
+    _procs_GL_ARB_sync.glFenceSync =
+      (GdkGLProc_glFenceSync) gdk_gl_get_proc_address ("glFenceSync");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFenceSync () - %s",
+               (_procs_GL_ARB_sync.glFenceSync) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sync.glFenceSync);
+}
+
+/* glIsSync */
+GdkGLProc
+gdk_gl_get_glIsSync (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sync.glIsSync == (GdkGLProc_glIsSync) -1)
+    _procs_GL_ARB_sync.glIsSync =
+      (GdkGLProc_glIsSync) gdk_gl_get_proc_address ("glIsSync");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsSync () - %s",
+               (_procs_GL_ARB_sync.glIsSync) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sync.glIsSync);
+}
+
+/* glDeleteSync */
+GdkGLProc
+gdk_gl_get_glDeleteSync (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sync.glDeleteSync == (GdkGLProc_glDeleteSync) -1)
+    _procs_GL_ARB_sync.glDeleteSync =
+      (GdkGLProc_glDeleteSync) gdk_gl_get_proc_address ("glDeleteSync");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteSync () - %s",
+               (_procs_GL_ARB_sync.glDeleteSync) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sync.glDeleteSync);
+}
+
+/* glClientWaitSync */
+GdkGLProc
+gdk_gl_get_glClientWaitSync (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sync.glClientWaitSync == (GdkGLProc_glClientWaitSync) -1)
+    _procs_GL_ARB_sync.glClientWaitSync =
+      (GdkGLProc_glClientWaitSync) gdk_gl_get_proc_address ("glClientWaitSync");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glClientWaitSync () - %s",
+               (_procs_GL_ARB_sync.glClientWaitSync) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sync.glClientWaitSync);
+}
+
+/* glWaitSync */
+GdkGLProc
+gdk_gl_get_glWaitSync (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sync.glWaitSync == (GdkGLProc_glWaitSync) -1)
+    _procs_GL_ARB_sync.glWaitSync =
+      (GdkGLProc_glWaitSync) gdk_gl_get_proc_address ("glWaitSync");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWaitSync () - %s",
+               (_procs_GL_ARB_sync.glWaitSync) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sync.glWaitSync);
+}
+
+/* glGetInteger64v */
+GdkGLProc
+gdk_gl_get_glGetInteger64v (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sync.glGetInteger64v == (GdkGLProc_glGetInteger64v) -1)
+    _procs_GL_ARB_sync.glGetInteger64v =
+      (GdkGLProc_glGetInteger64v) gdk_gl_get_proc_address ("glGetInteger64v");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetInteger64v () - %s",
+               (_procs_GL_ARB_sync.glGetInteger64v) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sync.glGetInteger64v);
+}
+
+/* glGetSynciv */
+GdkGLProc
+gdk_gl_get_glGetSynciv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sync.glGetSynciv == (GdkGLProc_glGetSynciv) -1)
+    _procs_GL_ARB_sync.glGetSynciv =
+      (GdkGLProc_glGetSynciv) gdk_gl_get_proc_address ("glGetSynciv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetSynciv () - %s",
+               (_procs_GL_ARB_sync.glGetSynciv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sync.glGetSynciv);
+}
+
+/* Get GL_ARB_sync functions */
+GdkGL_GL_ARB_sync *
+gdk_gl_get_GL_ARB_sync (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_sync");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFenceSync () != NULL);
+          supported &= (gdk_gl_get_glIsSync () != NULL);
+          supported &= (gdk_gl_get_glDeleteSync () != NULL);
+          supported &= (gdk_gl_get_glClientWaitSync () != NULL);
+          supported &= (gdk_gl_get_glWaitSync () != NULL);
+          supported &= (gdk_gl_get_glGetInteger64v () != NULL);
+          supported &= (gdk_gl_get_glGetSynciv () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_sync () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_sync;
+}
+
+/*
+ * GL_ARB_texture_multisample
+ */
+
+static GdkGL_GL_ARB_texture_multisample _procs_GL_ARB_texture_multisample = {
+  (GdkGLProc_glTexImage2DMultisample) -1,
+  (GdkGLProc_glTexImage3DMultisample) -1,
+  (GdkGLProc_glGetMultisamplefv) -1,
+  (GdkGLProc_glSampleMaski) -1
+};
+
+/* glTexImage2DMultisample */
+GdkGLProc
+gdk_gl_get_glTexImage2DMultisample (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_texture_multisample.glTexImage2DMultisample == (GdkGLProc_glTexImage2DMultisample) -1)
+    _procs_GL_ARB_texture_multisample.glTexImage2DMultisample =
+      (GdkGLProc_glTexImage2DMultisample) gdk_gl_get_proc_address ("glTexImage2DMultisample");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexImage2DMultisample () - %s",
+               (_procs_GL_ARB_texture_multisample.glTexImage2DMultisample) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_texture_multisample.glTexImage2DMultisample);
+}
+
+/* glTexImage3DMultisample */
+GdkGLProc
+gdk_gl_get_glTexImage3DMultisample (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_texture_multisample.glTexImage3DMultisample == (GdkGLProc_glTexImage3DMultisample) -1)
+    _procs_GL_ARB_texture_multisample.glTexImage3DMultisample =
+      (GdkGLProc_glTexImage3DMultisample) gdk_gl_get_proc_address ("glTexImage3DMultisample");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexImage3DMultisample () - %s",
+               (_procs_GL_ARB_texture_multisample.glTexImage3DMultisample) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_texture_multisample.glTexImage3DMultisample);
+}
+
+/* glGetMultisamplefv */
+GdkGLProc
+gdk_gl_get_glGetMultisamplefv (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_texture_multisample.glGetMultisamplefv == (GdkGLProc_glGetMultisamplefv) -1)
+    _procs_GL_ARB_texture_multisample.glGetMultisamplefv =
+      (GdkGLProc_glGetMultisamplefv) gdk_gl_get_proc_address ("glGetMultisamplefv");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMultisamplefv () - %s",
+               (_procs_GL_ARB_texture_multisample.glGetMultisamplefv) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_texture_multisample.glGetMultisamplefv);
+}
+
+/* glSampleMaski */
+GdkGLProc
+gdk_gl_get_glSampleMaski (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_texture_multisample.glSampleMaski == (GdkGLProc_glSampleMaski) -1)
+    _procs_GL_ARB_texture_multisample.glSampleMaski =
+      (GdkGLProc_glSampleMaski) gdk_gl_get_proc_address ("glSampleMaski");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSampleMaski () - %s",
+               (_procs_GL_ARB_texture_multisample.glSampleMaski) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_texture_multisample.glSampleMaski);
+}
+
+/* Get GL_ARB_texture_multisample functions */
+GdkGL_GL_ARB_texture_multisample *
+gdk_gl_get_GL_ARB_texture_multisample (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_texture_multisample");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexImage2DMultisample () != NULL);
+          supported &= (gdk_gl_get_glTexImage3DMultisample () != NULL);
+          supported &= (gdk_gl_get_glGetMultisamplefv () != NULL);
+          supported &= (gdk_gl_get_glSampleMaski () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_texture_multisample () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_texture_multisample;
+}
+
+/*
+ * GL_ARB_draw_buffers_blend
+ */
+
+static GdkGL_GL_ARB_draw_buffers_blend _procs_GL_ARB_draw_buffers_blend = {
+  (GdkGLProc_glBlendEquationi) -1,
+  (GdkGLProc_glBlendEquationSeparatei) -1,
+  (GdkGLProc_glBlendFunci) -1,
+  (GdkGLProc_glBlendFuncSeparatei) -1
+};
+
+/* glBlendEquationi */
+GdkGLProc
+gdk_gl_get_glBlendEquationi (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_buffers_blend.glBlendEquationi == (GdkGLProc_glBlendEquationi) -1)
+    _procs_GL_ARB_draw_buffers_blend.glBlendEquationi =
+      (GdkGLProc_glBlendEquationi) gdk_gl_get_proc_address ("glBlendEquationi");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendEquationi () - %s",
+               (_procs_GL_ARB_draw_buffers_blend.glBlendEquationi) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_buffers_blend.glBlendEquationi);
+}
+
+/* glBlendEquationSeparatei */
+GdkGLProc
+gdk_gl_get_glBlendEquationSeparatei (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_buffers_blend.glBlendEquationSeparatei == (GdkGLProc_glBlendEquationSeparatei) -1)
+    _procs_GL_ARB_draw_buffers_blend.glBlendEquationSeparatei =
+      (GdkGLProc_glBlendEquationSeparatei) gdk_gl_get_proc_address ("glBlendEquationSeparatei");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendEquationSeparatei () - %s",
+               (_procs_GL_ARB_draw_buffers_blend.glBlendEquationSeparatei) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_buffers_blend.glBlendEquationSeparatei);
+}
+
+/* glBlendFunci */
+GdkGLProc
+gdk_gl_get_glBlendFunci (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_buffers_blend.glBlendFunci == (GdkGLProc_glBlendFunci) -1)
+    _procs_GL_ARB_draw_buffers_blend.glBlendFunci =
+      (GdkGLProc_glBlendFunci) gdk_gl_get_proc_address ("glBlendFunci");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendFunci () - %s",
+               (_procs_GL_ARB_draw_buffers_blend.glBlendFunci) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_buffers_blend.glBlendFunci);
+}
+
+/* glBlendFuncSeparatei */
+GdkGLProc
+gdk_gl_get_glBlendFuncSeparatei (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_draw_buffers_blend.glBlendFuncSeparatei == (GdkGLProc_glBlendFuncSeparatei) -1)
+    _procs_GL_ARB_draw_buffers_blend.glBlendFuncSeparatei =
+      (GdkGLProc_glBlendFuncSeparatei) gdk_gl_get_proc_address ("glBlendFuncSeparatei");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendFuncSeparatei () - %s",
+               (_procs_GL_ARB_draw_buffers_blend.glBlendFuncSeparatei) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_draw_buffers_blend.glBlendFuncSeparatei);
+}
+
+/* Get GL_ARB_draw_buffers_blend functions */
+GdkGL_GL_ARB_draw_buffers_blend *
+gdk_gl_get_GL_ARB_draw_buffers_blend (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_draw_buffers_blend");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlendEquationi () != NULL);
+          supported &= (gdk_gl_get_glBlendEquationSeparatei () != NULL);
+          supported &= (gdk_gl_get_glBlendFunci () != NULL);
+          supported &= (gdk_gl_get_glBlendFuncSeparatei () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_draw_buffers_blend () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_draw_buffers_blend;
+}
+
+/*
+ * GL_ARB_sample_shading
+ */
+
+static GdkGL_GL_ARB_sample_shading _procs_GL_ARB_sample_shading = {
+  (GdkGLProc_glMinSampleShading) -1
+};
+
+/* glMinSampleShading */
+GdkGLProc
+gdk_gl_get_glMinSampleShading (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ARB_sample_shading.glMinSampleShading == (GdkGLProc_glMinSampleShading) -1)
+    _procs_GL_ARB_sample_shading.glMinSampleShading =
+      (GdkGLProc_glMinSampleShading) gdk_gl_get_proc_address ("glMinSampleShading");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMinSampleShading () - %s",
+               (_procs_GL_ARB_sample_shading.glMinSampleShading) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ARB_sample_shading.glMinSampleShading);
+}
+
+/* Get GL_ARB_sample_shading functions */
+GdkGL_GL_ARB_sample_shading *
+gdk_gl_get_GL_ARB_sample_shading (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ARB_sample_shading");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glMinSampleShading () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ARB_sample_shading () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ARB_sample_shading;
+}
+
+/*
+ * GL_EXT_blend_color
+ */
+
+static GdkGL_GL_EXT_blend_color _procs_GL_EXT_blend_color = {
+  (GdkGLProc_glBlendColorEXT) -1
+};
+
+/* glBlendColorEXT */
+GdkGLProc
+gdk_gl_get_glBlendColorEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_blend_color.glBlendColorEXT == (GdkGLProc_glBlendColorEXT) -1)
+    _procs_GL_EXT_blend_color.glBlendColorEXT =
+      (GdkGLProc_glBlendColorEXT) gdk_gl_get_proc_address ("glBlendColorEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendColorEXT () - %s",
+               (_procs_GL_EXT_blend_color.glBlendColorEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_blend_color.glBlendColorEXT);
+}
+
+/* Get GL_EXT_blend_color functions */
+GdkGL_GL_EXT_blend_color *
+gdk_gl_get_GL_EXT_blend_color (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_blend_color");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlendColorEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_blend_color () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_blend_color;
+}
+
+/*
+ * GL_EXT_polygon_offset
+ */
+
+static GdkGL_GL_EXT_polygon_offset _procs_GL_EXT_polygon_offset = {
+  (GdkGLProc_glPolygonOffsetEXT) -1
+};
+
+/* glPolygonOffsetEXT */
+GdkGLProc
+gdk_gl_get_glPolygonOffsetEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_polygon_offset.glPolygonOffsetEXT == (GdkGLProc_glPolygonOffsetEXT) -1)
+    _procs_GL_EXT_polygon_offset.glPolygonOffsetEXT =
+      (GdkGLProc_glPolygonOffsetEXT) gdk_gl_get_proc_address ("glPolygonOffsetEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPolygonOffsetEXT () - %s",
+               (_procs_GL_EXT_polygon_offset.glPolygonOffsetEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_polygon_offset.glPolygonOffsetEXT);
+}
+
+/* Get GL_EXT_polygon_offset functions */
+GdkGL_GL_EXT_polygon_offset *
+gdk_gl_get_GL_EXT_polygon_offset (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_polygon_offset");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPolygonOffsetEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_polygon_offset () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_polygon_offset;
+}
+
+/*
+ * GL_EXT_texture3D
+ */
+
+static GdkGL_GL_EXT_texture3D _procs_GL_EXT_texture3D = {
+  (GdkGLProc_glTexImage3DEXT) -1,
+  (GdkGLProc_glTexSubImage3DEXT) -1
+};
+
+/* glTexImage3DEXT */
+GdkGLProc
+gdk_gl_get_glTexImage3DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture3D.glTexImage3DEXT == (GdkGLProc_glTexImage3DEXT) -1)
+    _procs_GL_EXT_texture3D.glTexImage3DEXT =
+      (GdkGLProc_glTexImage3DEXT) gdk_gl_get_proc_address ("glTexImage3DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexImage3DEXT () - %s",
+               (_procs_GL_EXT_texture3D.glTexImage3DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture3D.glTexImage3DEXT);
+}
+
+/* glTexSubImage3DEXT */
+GdkGLProc
+gdk_gl_get_glTexSubImage3DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture3D.glTexSubImage3DEXT == (GdkGLProc_glTexSubImage3DEXT) -1)
+    _procs_GL_EXT_texture3D.glTexSubImage3DEXT =
+      (GdkGLProc_glTexSubImage3DEXT) gdk_gl_get_proc_address ("glTexSubImage3DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexSubImage3DEXT () - %s",
+               (_procs_GL_EXT_texture3D.glTexSubImage3DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture3D.glTexSubImage3DEXT);
+}
+
+/* Get GL_EXT_texture3D functions */
+GdkGL_GL_EXT_texture3D *
+gdk_gl_get_GL_EXT_texture3D (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_texture3D");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glTexSubImage3DEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_texture3D () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_texture3D;
+}
+
+/*
+ * GL_SGIS_texture_filter4
+ */
+
+static GdkGL_GL_SGIS_texture_filter4 _procs_GL_SGIS_texture_filter4 = {
+  (GdkGLProc_glGetTexFilterFuncSGIS) -1,
+  (GdkGLProc_glTexFilterFuncSGIS) -1
+};
+
+/* glGetTexFilterFuncSGIS */
+GdkGLProc
+gdk_gl_get_glGetTexFilterFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS == (GdkGLProc_glGetTexFilterFuncSGIS) -1)
+    _procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS =
+      (GdkGLProc_glGetTexFilterFuncSGIS) gdk_gl_get_proc_address ("glGetTexFilterFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetTexFilterFuncSGIS () - %s",
+               (_procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_texture_filter4.glGetTexFilterFuncSGIS);
+}
+
+/* glTexFilterFuncSGIS */
+GdkGLProc
+gdk_gl_get_glTexFilterFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS == (GdkGLProc_glTexFilterFuncSGIS) -1)
+    _procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS =
+      (GdkGLProc_glTexFilterFuncSGIS) gdk_gl_get_proc_address ("glTexFilterFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexFilterFuncSGIS () - %s",
+               (_procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_texture_filter4.glTexFilterFuncSGIS);
+}
+
+/* Get GL_SGIS_texture_filter4 functions */
+GdkGL_GL_SGIS_texture_filter4 *
+gdk_gl_get_GL_SGIS_texture_filter4 (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_texture_filter4");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetTexFilterFuncSGIS () != NULL);
+          supported &= (gdk_gl_get_glTexFilterFuncSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_texture_filter4 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_texture_filter4;
+}
+
+/*
+ * GL_EXT_subtexture
+ */
+
+static GdkGL_GL_EXT_subtexture _procs_GL_EXT_subtexture = {
+  (GdkGLProc_glTexSubImage1DEXT) -1,
+  (GdkGLProc_glTexSubImage2DEXT) -1
+};
+
+/* glTexSubImage1DEXT */
+GdkGLProc
+gdk_gl_get_glTexSubImage1DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_subtexture.glTexSubImage1DEXT == (GdkGLProc_glTexSubImage1DEXT) -1)
+    _procs_GL_EXT_subtexture.glTexSubImage1DEXT =
+      (GdkGLProc_glTexSubImage1DEXT) gdk_gl_get_proc_address ("glTexSubImage1DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexSubImage1DEXT () - %s",
+               (_procs_GL_EXT_subtexture.glTexSubImage1DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_subtexture.glTexSubImage1DEXT);
+}
+
+/* glTexSubImage2DEXT */
+GdkGLProc
+gdk_gl_get_glTexSubImage2DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_subtexture.glTexSubImage2DEXT == (GdkGLProc_glTexSubImage2DEXT) -1)
+    _procs_GL_EXT_subtexture.glTexSubImage2DEXT =
+      (GdkGLProc_glTexSubImage2DEXT) gdk_gl_get_proc_address ("glTexSubImage2DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexSubImage2DEXT () - %s",
+               (_procs_GL_EXT_subtexture.glTexSubImage2DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_subtexture.glTexSubImage2DEXT);
+}
+
+/* Get GL_EXT_subtexture functions */
+GdkGL_GL_EXT_subtexture *
+gdk_gl_get_GL_EXT_subtexture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_subtexture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glTexSubImage2DEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_subtexture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_subtexture;
+}
+
+/*
+ * GL_EXT_copy_texture
+ */
+
+static GdkGL_GL_EXT_copy_texture _procs_GL_EXT_copy_texture = {
+  (GdkGLProc_glCopyTexImage1DEXT) -1,
+  (GdkGLProc_glCopyTexImage2DEXT) -1,
+  (GdkGLProc_glCopyTexSubImage1DEXT) -1,
+  (GdkGLProc_glCopyTexSubImage2DEXT) -1,
+  (GdkGLProc_glCopyTexSubImage3DEXT) -1
+};
+
+/* glCopyTexImage1DEXT */
+GdkGLProc
+gdk_gl_get_glCopyTexImage1DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_copy_texture.glCopyTexImage1DEXT == (GdkGLProc_glCopyTexImage1DEXT) -1)
+    _procs_GL_EXT_copy_texture.glCopyTexImage1DEXT =
+      (GdkGLProc_glCopyTexImage1DEXT) gdk_gl_get_proc_address ("glCopyTexImage1DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyTexImage1DEXT () - %s",
+               (_procs_GL_EXT_copy_texture.glCopyTexImage1DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexImage1DEXT);
+}
+
+/* glCopyTexImage2DEXT */
+GdkGLProc
+gdk_gl_get_glCopyTexImage2DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_copy_texture.glCopyTexImage2DEXT == (GdkGLProc_glCopyTexImage2DEXT) -1)
+    _procs_GL_EXT_copy_texture.glCopyTexImage2DEXT =
+      (GdkGLProc_glCopyTexImage2DEXT) gdk_gl_get_proc_address ("glCopyTexImage2DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyTexImage2DEXT () - %s",
+               (_procs_GL_EXT_copy_texture.glCopyTexImage2DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexImage2DEXT);
+}
+
+/* glCopyTexSubImage1DEXT */
+GdkGLProc
+gdk_gl_get_glCopyTexSubImage1DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT == (GdkGLProc_glCopyTexSubImage1DEXT) -1)
+    _procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT =
+      (GdkGLProc_glCopyTexSubImage1DEXT) gdk_gl_get_proc_address ("glCopyTexSubImage1DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyTexSubImage1DEXT () - %s",
+               (_procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexSubImage1DEXT);
+}
+
+/* glCopyTexSubImage2DEXT */
+GdkGLProc
+gdk_gl_get_glCopyTexSubImage2DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT == (GdkGLProc_glCopyTexSubImage2DEXT) -1)
+    _procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT =
+      (GdkGLProc_glCopyTexSubImage2DEXT) gdk_gl_get_proc_address ("glCopyTexSubImage2DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyTexSubImage2DEXT () - %s",
+               (_procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexSubImage2DEXT);
+}
+
+/* glCopyTexSubImage3DEXT */
+GdkGLProc
+gdk_gl_get_glCopyTexSubImage3DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT == (GdkGLProc_glCopyTexSubImage3DEXT) -1)
+    _procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT =
+      (GdkGLProc_glCopyTexSubImage3DEXT) gdk_gl_get_proc_address ("glCopyTexSubImage3DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyTexSubImage3DEXT () - %s",
+               (_procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_copy_texture.glCopyTexSubImage3DEXT);
+}
+
+/* Get GL_EXT_copy_texture functions */
+GdkGL_GL_EXT_copy_texture *
+gdk_gl_get_GL_EXT_copy_texture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_copy_texture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glCopyTexImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTexImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTexSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTexSubImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTexSubImage3DEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_copy_texture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_copy_texture;
+}
+
+/*
+ * GL_EXT_histogram
+ */
+
+static GdkGL_GL_EXT_histogram _procs_GL_EXT_histogram = {
+  (GdkGLProc_glGetHistogramEXT) -1,
+  (GdkGLProc_glGetHistogramParameterfvEXT) -1,
+  (GdkGLProc_glGetHistogramParameterivEXT) -1,
+  (GdkGLProc_glGetMinmaxEXT) -1,
+  (GdkGLProc_glGetMinmaxParameterfvEXT) -1,
+  (GdkGLProc_glGetMinmaxParameterivEXT) -1,
+  (GdkGLProc_glHistogramEXT) -1,
+  (GdkGLProc_glMinmaxEXT) -1,
+  (GdkGLProc_glResetHistogramEXT) -1,
+  (GdkGLProc_glResetMinmaxEXT) -1
+};
+
+/* glGetHistogramEXT */
+GdkGLProc
+gdk_gl_get_glGetHistogramEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glGetHistogramEXT == (GdkGLProc_glGetHistogramEXT) -1)
+    _procs_GL_EXT_histogram.glGetHistogramEXT =
+      (GdkGLProc_glGetHistogramEXT) gdk_gl_get_proc_address ("glGetHistogramEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetHistogramEXT () - %s",
+               (_procs_GL_EXT_histogram.glGetHistogramEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetHistogramEXT);
+}
+
+/* glGetHistogramParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glGetHistogramParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glGetHistogramParameterfvEXT == (GdkGLProc_glGetHistogramParameterfvEXT) -1)
+    _procs_GL_EXT_histogram.glGetHistogramParameterfvEXT =
+      (GdkGLProc_glGetHistogramParameterfvEXT) gdk_gl_get_proc_address ("glGetHistogramParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetHistogramParameterfvEXT () - %s",
+               (_procs_GL_EXT_histogram.glGetHistogramParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetHistogramParameterfvEXT);
+}
+
+/* glGetHistogramParameterivEXT */
+GdkGLProc
+gdk_gl_get_glGetHistogramParameterivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glGetHistogramParameterivEXT == (GdkGLProc_glGetHistogramParameterivEXT) -1)
+    _procs_GL_EXT_histogram.glGetHistogramParameterivEXT =
+      (GdkGLProc_glGetHistogramParameterivEXT) gdk_gl_get_proc_address ("glGetHistogramParameterivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetHistogramParameterivEXT () - %s",
+               (_procs_GL_EXT_histogram.glGetHistogramParameterivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetHistogramParameterivEXT);
+}
+
+/* glGetMinmaxEXT */
+GdkGLProc
+gdk_gl_get_glGetMinmaxEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glGetMinmaxEXT == (GdkGLProc_glGetMinmaxEXT) -1)
+    _procs_GL_EXT_histogram.glGetMinmaxEXT =
+      (GdkGLProc_glGetMinmaxEXT) gdk_gl_get_proc_address ("glGetMinmaxEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMinmaxEXT () - %s",
+               (_procs_GL_EXT_histogram.glGetMinmaxEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetMinmaxEXT);
+}
+
+/* glGetMinmaxParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glGetMinmaxParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT == (GdkGLProc_glGetMinmaxParameterfvEXT) -1)
+    _procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT =
+      (GdkGLProc_glGetMinmaxParameterfvEXT) gdk_gl_get_proc_address ("glGetMinmaxParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMinmaxParameterfvEXT () - %s",
+               (_procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetMinmaxParameterfvEXT);
+}
+
+/* glGetMinmaxParameterivEXT */
+GdkGLProc
+gdk_gl_get_glGetMinmaxParameterivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glGetMinmaxParameterivEXT == (GdkGLProc_glGetMinmaxParameterivEXT) -1)
+    _procs_GL_EXT_histogram.glGetMinmaxParameterivEXT =
+      (GdkGLProc_glGetMinmaxParameterivEXT) gdk_gl_get_proc_address ("glGetMinmaxParameterivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMinmaxParameterivEXT () - %s",
+               (_procs_GL_EXT_histogram.glGetMinmaxParameterivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glGetMinmaxParameterivEXT);
+}
+
+/* glHistogramEXT */
+GdkGLProc
+gdk_gl_get_glHistogramEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glHistogramEXT == (GdkGLProc_glHistogramEXT) -1)
+    _procs_GL_EXT_histogram.glHistogramEXT =
+      (GdkGLProc_glHistogramEXT) gdk_gl_get_proc_address ("glHistogramEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glHistogramEXT () - %s",
+               (_procs_GL_EXT_histogram.glHistogramEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glHistogramEXT);
+}
+
+/* glMinmaxEXT */
+GdkGLProc
+gdk_gl_get_glMinmaxEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glMinmaxEXT == (GdkGLProc_glMinmaxEXT) -1)
+    _procs_GL_EXT_histogram.glMinmaxEXT =
+      (GdkGLProc_glMinmaxEXT) gdk_gl_get_proc_address ("glMinmaxEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMinmaxEXT () - %s",
+               (_procs_GL_EXT_histogram.glMinmaxEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glMinmaxEXT);
+}
+
+/* glResetHistogramEXT */
+GdkGLProc
+gdk_gl_get_glResetHistogramEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glResetHistogramEXT == (GdkGLProc_glResetHistogramEXT) -1)
+    _procs_GL_EXT_histogram.glResetHistogramEXT =
+      (GdkGLProc_glResetHistogramEXT) gdk_gl_get_proc_address ("glResetHistogramEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glResetHistogramEXT () - %s",
+               (_procs_GL_EXT_histogram.glResetHistogramEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glResetHistogramEXT);
+}
+
+/* glResetMinmaxEXT */
+GdkGLProc
+gdk_gl_get_glResetMinmaxEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_histogram.glResetMinmaxEXT == (GdkGLProc_glResetMinmaxEXT) -1)
+    _procs_GL_EXT_histogram.glResetMinmaxEXT =
+      (GdkGLProc_glResetMinmaxEXT) gdk_gl_get_proc_address ("glResetMinmaxEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glResetMinmaxEXT () - %s",
+               (_procs_GL_EXT_histogram.glResetMinmaxEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_histogram.glResetMinmaxEXT);
+}
+
+/* Get GL_EXT_histogram functions */
+GdkGL_GL_EXT_histogram *
+gdk_gl_get_GL_EXT_histogram (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_histogram");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetHistogramEXT () != NULL);
+          supported &= (gdk_gl_get_glGetHistogramParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetHistogramParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMinmaxEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMinmaxParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMinmaxParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glHistogramEXT () != NULL);
+          supported &= (gdk_gl_get_glMinmaxEXT () != NULL);
+          supported &= (gdk_gl_get_glResetHistogramEXT () != NULL);
+          supported &= (gdk_gl_get_glResetMinmaxEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_histogram () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_histogram;
+}
+
+/*
+ * GL_EXT_convolution
+ */
+
+static GdkGL_GL_EXT_convolution _procs_GL_EXT_convolution = {
+  (GdkGLProc_glConvolutionFilter1DEXT) -1,
+  (GdkGLProc_glConvolutionFilter2DEXT) -1,
+  (GdkGLProc_glConvolutionParameterfEXT) -1,
+  (GdkGLProc_glConvolutionParameterfvEXT) -1,
+  (GdkGLProc_glConvolutionParameteriEXT) -1,
+  (GdkGLProc_glConvolutionParameterivEXT) -1,
+  (GdkGLProc_glCopyConvolutionFilter1DEXT) -1,
+  (GdkGLProc_glCopyConvolutionFilter2DEXT) -1,
+  (GdkGLProc_glGetConvolutionFilterEXT) -1,
+  (GdkGLProc_glGetConvolutionParameterfvEXT) -1,
+  (GdkGLProc_glGetConvolutionParameterivEXT) -1,
+  (GdkGLProc_glGetSeparableFilterEXT) -1,
+  (GdkGLProc_glSeparableFilter2DEXT) -1
+};
+
+/* glConvolutionFilter1DEXT */
+GdkGLProc
+gdk_gl_get_glConvolutionFilter1DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glConvolutionFilter1DEXT == (GdkGLProc_glConvolutionFilter1DEXT) -1)
+    _procs_GL_EXT_convolution.glConvolutionFilter1DEXT =
+      (GdkGLProc_glConvolutionFilter1DEXT) gdk_gl_get_proc_address ("glConvolutionFilter1DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glConvolutionFilter1DEXT () - %s",
+               (_procs_GL_EXT_convolution.glConvolutionFilter1DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionFilter1DEXT);
+}
+
+/* glConvolutionFilter2DEXT */
+GdkGLProc
+gdk_gl_get_glConvolutionFilter2DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glConvolutionFilter2DEXT == (GdkGLProc_glConvolutionFilter2DEXT) -1)
+    _procs_GL_EXT_convolution.glConvolutionFilter2DEXT =
+      (GdkGLProc_glConvolutionFilter2DEXT) gdk_gl_get_proc_address ("glConvolutionFilter2DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glConvolutionFilter2DEXT () - %s",
+               (_procs_GL_EXT_convolution.glConvolutionFilter2DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionFilter2DEXT);
+}
+
+/* glConvolutionParameterfEXT */
+GdkGLProc
+gdk_gl_get_glConvolutionParameterfEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glConvolutionParameterfEXT == (GdkGLProc_glConvolutionParameterfEXT) -1)
+    _procs_GL_EXT_convolution.glConvolutionParameterfEXT =
+      (GdkGLProc_glConvolutionParameterfEXT) gdk_gl_get_proc_address ("glConvolutionParameterfEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glConvolutionParameterfEXT () - %s",
+               (_procs_GL_EXT_convolution.glConvolutionParameterfEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameterfEXT);
+}
+
+/* glConvolutionParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glConvolutionParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glConvolutionParameterfvEXT == (GdkGLProc_glConvolutionParameterfvEXT) -1)
+    _procs_GL_EXT_convolution.glConvolutionParameterfvEXT =
+      (GdkGLProc_glConvolutionParameterfvEXT) gdk_gl_get_proc_address ("glConvolutionParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glConvolutionParameterfvEXT () - %s",
+               (_procs_GL_EXT_convolution.glConvolutionParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameterfvEXT);
+}
+
+/* glConvolutionParameteriEXT */
+GdkGLProc
+gdk_gl_get_glConvolutionParameteriEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glConvolutionParameteriEXT == (GdkGLProc_glConvolutionParameteriEXT) -1)
+    _procs_GL_EXT_convolution.glConvolutionParameteriEXT =
+      (GdkGLProc_glConvolutionParameteriEXT) gdk_gl_get_proc_address ("glConvolutionParameteriEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glConvolutionParameteriEXT () - %s",
+               (_procs_GL_EXT_convolution.glConvolutionParameteriEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameteriEXT);
+}
+
+/* glConvolutionParameterivEXT */
+GdkGLProc
+gdk_gl_get_glConvolutionParameterivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glConvolutionParameterivEXT == (GdkGLProc_glConvolutionParameterivEXT) -1)
+    _procs_GL_EXT_convolution.glConvolutionParameterivEXT =
+      (GdkGLProc_glConvolutionParameterivEXT) gdk_gl_get_proc_address ("glConvolutionParameterivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glConvolutionParameterivEXT () - %s",
+               (_procs_GL_EXT_convolution.glConvolutionParameterivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glConvolutionParameterivEXT);
+}
+
+/* glCopyConvolutionFilter1DEXT */
+GdkGLProc
+gdk_gl_get_glCopyConvolutionFilter1DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT == (GdkGLProc_glCopyConvolutionFilter1DEXT) -1)
+    _procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT =
+      (GdkGLProc_glCopyConvolutionFilter1DEXT) gdk_gl_get_proc_address ("glCopyConvolutionFilter1DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyConvolutionFilter1DEXT () - %s",
+               (_procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glCopyConvolutionFilter1DEXT);
+}
+
+/* glCopyConvolutionFilter2DEXT */
+GdkGLProc
+gdk_gl_get_glCopyConvolutionFilter2DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT == (GdkGLProc_glCopyConvolutionFilter2DEXT) -1)
+    _procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT =
+      (GdkGLProc_glCopyConvolutionFilter2DEXT) gdk_gl_get_proc_address ("glCopyConvolutionFilter2DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyConvolutionFilter2DEXT () - %s",
+               (_procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glCopyConvolutionFilter2DEXT);
+}
+
+/* glGetConvolutionFilterEXT */
+GdkGLProc
+gdk_gl_get_glGetConvolutionFilterEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glGetConvolutionFilterEXT == (GdkGLProc_glGetConvolutionFilterEXT) -1)
+    _procs_GL_EXT_convolution.glGetConvolutionFilterEXT =
+      (GdkGLProc_glGetConvolutionFilterEXT) gdk_gl_get_proc_address ("glGetConvolutionFilterEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetConvolutionFilterEXT () - %s",
+               (_procs_GL_EXT_convolution.glGetConvolutionFilterEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetConvolutionFilterEXT);
+}
+
+/* glGetConvolutionParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glGetConvolutionParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT == (GdkGLProc_glGetConvolutionParameterfvEXT) -1)
+    _procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT =
+      (GdkGLProc_glGetConvolutionParameterfvEXT) gdk_gl_get_proc_address ("glGetConvolutionParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetConvolutionParameterfvEXT () - %s",
+               (_procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetConvolutionParameterfvEXT);
+}
+
+/* glGetConvolutionParameterivEXT */
+GdkGLProc
+gdk_gl_get_glGetConvolutionParameterivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glGetConvolutionParameterivEXT == (GdkGLProc_glGetConvolutionParameterivEXT) -1)
+    _procs_GL_EXT_convolution.glGetConvolutionParameterivEXT =
+      (GdkGLProc_glGetConvolutionParameterivEXT) gdk_gl_get_proc_address ("glGetConvolutionParameterivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetConvolutionParameterivEXT () - %s",
+               (_procs_GL_EXT_convolution.glGetConvolutionParameterivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetConvolutionParameterivEXT);
+}
+
+/* glGetSeparableFilterEXT */
+GdkGLProc
+gdk_gl_get_glGetSeparableFilterEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glGetSeparableFilterEXT == (GdkGLProc_glGetSeparableFilterEXT) -1)
+    _procs_GL_EXT_convolution.glGetSeparableFilterEXT =
+      (GdkGLProc_glGetSeparableFilterEXT) gdk_gl_get_proc_address ("glGetSeparableFilterEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetSeparableFilterEXT () - %s",
+               (_procs_GL_EXT_convolution.glGetSeparableFilterEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glGetSeparableFilterEXT);
+}
+
+/* glSeparableFilter2DEXT */
+GdkGLProc
+gdk_gl_get_glSeparableFilter2DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_convolution.glSeparableFilter2DEXT == (GdkGLProc_glSeparableFilter2DEXT) -1)
+    _procs_GL_EXT_convolution.glSeparableFilter2DEXT =
+      (GdkGLProc_glSeparableFilter2DEXT) gdk_gl_get_proc_address ("glSeparableFilter2DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSeparableFilter2DEXT () - %s",
+               (_procs_GL_EXT_convolution.glSeparableFilter2DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_convolution.glSeparableFilter2DEXT);
+}
+
+/* Get GL_EXT_convolution functions */
+GdkGL_GL_EXT_convolution *
+gdk_gl_get_GL_EXT_convolution (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_convolution");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glConvolutionFilter1DEXT () != NULL);
+          supported &= (gdk_gl_get_glConvolutionFilter2DEXT () != NULL);
+          supported &= (gdk_gl_get_glConvolutionParameterfEXT () != NULL);
+          supported &= (gdk_gl_get_glConvolutionParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glConvolutionParameteriEXT () != NULL);
+          supported &= (gdk_gl_get_glConvolutionParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyConvolutionFilter1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyConvolutionFilter2DEXT () != NULL);
+          supported &= (gdk_gl_get_glGetConvolutionFilterEXT () != NULL);
+          supported &= (gdk_gl_get_glGetConvolutionParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetConvolutionParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetSeparableFilterEXT () != NULL);
+          supported &= (gdk_gl_get_glSeparableFilter2DEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_convolution () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_convolution;
+}
+
+/*
+ * GL_SGI_color_table
+ */
+
+static GdkGL_GL_SGI_color_table _procs_GL_SGI_color_table = {
+  (GdkGLProc_glColorTableSGI) -1,
+  (GdkGLProc_glColorTableParameterfvSGI) -1,
+  (GdkGLProc_glColorTableParameterivSGI) -1,
+  (GdkGLProc_glCopyColorTableSGI) -1,
+  (GdkGLProc_glGetColorTableSGI) -1,
+  (GdkGLProc_glGetColorTableParameterfvSGI) -1,
+  (GdkGLProc_glGetColorTableParameterivSGI) -1
+};
+
+/* glColorTableSGI */
+GdkGLProc
+gdk_gl_get_glColorTableSGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGI_color_table.glColorTableSGI == (GdkGLProc_glColorTableSGI) -1)
+    _procs_GL_SGI_color_table.glColorTableSGI =
+      (GdkGLProc_glColorTableSGI) gdk_gl_get_proc_address ("glColorTableSGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorTableSGI () - %s",
+               (_procs_GL_SGI_color_table.glColorTableSGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGI_color_table.glColorTableSGI);
+}
+
+/* glColorTableParameterfvSGI */
+GdkGLProc
+gdk_gl_get_glColorTableParameterfvSGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGI_color_table.glColorTableParameterfvSGI == (GdkGLProc_glColorTableParameterfvSGI) -1)
+    _procs_GL_SGI_color_table.glColorTableParameterfvSGI =
+      (GdkGLProc_glColorTableParameterfvSGI) gdk_gl_get_proc_address ("glColorTableParameterfvSGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorTableParameterfvSGI () - %s",
+               (_procs_GL_SGI_color_table.glColorTableParameterfvSGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGI_color_table.glColorTableParameterfvSGI);
+}
+
+/* glColorTableParameterivSGI */
+GdkGLProc
+gdk_gl_get_glColorTableParameterivSGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGI_color_table.glColorTableParameterivSGI == (GdkGLProc_glColorTableParameterivSGI) -1)
+    _procs_GL_SGI_color_table.glColorTableParameterivSGI =
+      (GdkGLProc_glColorTableParameterivSGI) gdk_gl_get_proc_address ("glColorTableParameterivSGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorTableParameterivSGI () - %s",
+               (_procs_GL_SGI_color_table.glColorTableParameterivSGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGI_color_table.glColorTableParameterivSGI);
+}
+
+/* glCopyColorTableSGI */
+GdkGLProc
+gdk_gl_get_glCopyColorTableSGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGI_color_table.glCopyColorTableSGI == (GdkGLProc_glCopyColorTableSGI) -1)
+    _procs_GL_SGI_color_table.glCopyColorTableSGI =
+      (GdkGLProc_glCopyColorTableSGI) gdk_gl_get_proc_address ("glCopyColorTableSGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyColorTableSGI () - %s",
+               (_procs_GL_SGI_color_table.glCopyColorTableSGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGI_color_table.glCopyColorTableSGI);
+}
+
+/* glGetColorTableSGI */
+GdkGLProc
+gdk_gl_get_glGetColorTableSGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGI_color_table.glGetColorTableSGI == (GdkGLProc_glGetColorTableSGI) -1)
+    _procs_GL_SGI_color_table.glGetColorTableSGI =
+      (GdkGLProc_glGetColorTableSGI) gdk_gl_get_proc_address ("glGetColorTableSGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetColorTableSGI () - %s",
+               (_procs_GL_SGI_color_table.glGetColorTableSGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGI_color_table.glGetColorTableSGI);
+}
+
+/* glGetColorTableParameterfvSGI */
+GdkGLProc
+gdk_gl_get_glGetColorTableParameterfvSGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGI_color_table.glGetColorTableParameterfvSGI == (GdkGLProc_glGetColorTableParameterfvSGI) -1)
+    _procs_GL_SGI_color_table.glGetColorTableParameterfvSGI =
+      (GdkGLProc_glGetColorTableParameterfvSGI) gdk_gl_get_proc_address ("glGetColorTableParameterfvSGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetColorTableParameterfvSGI () - %s",
+               (_procs_GL_SGI_color_table.glGetColorTableParameterfvSGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGI_color_table.glGetColorTableParameterfvSGI);
+}
+
+/* glGetColorTableParameterivSGI */
+GdkGLProc
+gdk_gl_get_glGetColorTableParameterivSGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGI_color_table.glGetColorTableParameterivSGI == (GdkGLProc_glGetColorTableParameterivSGI) -1)
+    _procs_GL_SGI_color_table.glGetColorTableParameterivSGI =
+      (GdkGLProc_glGetColorTableParameterivSGI) gdk_gl_get_proc_address ("glGetColorTableParameterivSGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetColorTableParameterivSGI () - %s",
+               (_procs_GL_SGI_color_table.glGetColorTableParameterivSGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGI_color_table.glGetColorTableParameterivSGI);
+}
+
+/* Get GL_SGI_color_table functions */
+GdkGL_GL_SGI_color_table *
+gdk_gl_get_GL_SGI_color_table (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGI_color_table");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glColorTableSGI () != NULL);
+          supported &= (gdk_gl_get_glColorTableParameterfvSGI () != NULL);
+          supported &= (gdk_gl_get_glColorTableParameterivSGI () != NULL);
+          supported &= (gdk_gl_get_glCopyColorTableSGI () != NULL);
+          supported &= (gdk_gl_get_glGetColorTableSGI () != NULL);
+          supported &= (gdk_gl_get_glGetColorTableParameterfvSGI () != NULL);
+          supported &= (gdk_gl_get_glGetColorTableParameterivSGI () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGI_color_table () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGI_color_table;
+}
+
+/*
+ * GL_SGIX_pixel_texture
+ */
+
+static GdkGL_GL_SGIX_pixel_texture _procs_GL_SGIX_pixel_texture = {
+  (GdkGLProc_glPixelTexGenSGIX) -1
+};
+
+/* glPixelTexGenSGIX */
+GdkGLProc
+gdk_gl_get_glPixelTexGenSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX == (GdkGLProc_glPixelTexGenSGIX) -1)
+    _procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX =
+      (GdkGLProc_glPixelTexGenSGIX) gdk_gl_get_proc_address ("glPixelTexGenSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTexGenSGIX () - %s",
+               (_procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_pixel_texture.glPixelTexGenSGIX);
+}
+
+/* Get GL_SGIX_pixel_texture functions */
+GdkGL_GL_SGIX_pixel_texture *
+gdk_gl_get_GL_SGIX_pixel_texture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_pixel_texture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPixelTexGenSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_pixel_texture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_pixel_texture;
+}
+
+/*
+ * GL_SGIS_pixel_texture
+ */
+
+static GdkGL_GL_SGIS_pixel_texture _procs_GL_SGIS_pixel_texture = {
+  (GdkGLProc_glPixelTexGenParameteriSGIS) -1,
+  (GdkGLProc_glPixelTexGenParameterivSGIS) -1,
+  (GdkGLProc_glPixelTexGenParameterfSGIS) -1,
+  (GdkGLProc_glPixelTexGenParameterfvSGIS) -1,
+  (GdkGLProc_glGetPixelTexGenParameterivSGIS) -1,
+  (GdkGLProc_glGetPixelTexGenParameterfvSGIS) -1
+};
+
+/* glPixelTexGenParameteriSGIS */
+GdkGLProc
+gdk_gl_get_glPixelTexGenParameteriSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS == (GdkGLProc_glPixelTexGenParameteriSGIS) -1)
+    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS =
+      (GdkGLProc_glPixelTexGenParameteriSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameteriSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTexGenParameteriSGIS () - %s",
+               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameteriSGIS);
+}
+
+/* glPixelTexGenParameterivSGIS */
+GdkGLProc
+gdk_gl_get_glPixelTexGenParameterivSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS == (GdkGLProc_glPixelTexGenParameterivSGIS) -1)
+    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS =
+      (GdkGLProc_glPixelTexGenParameterivSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameterivSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTexGenParameterivSGIS () - %s",
+               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterivSGIS);
+}
+
+/* glPixelTexGenParameterfSGIS */
+GdkGLProc
+gdk_gl_get_glPixelTexGenParameterfSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS == (GdkGLProc_glPixelTexGenParameterfSGIS) -1)
+    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS =
+      (GdkGLProc_glPixelTexGenParameterfSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameterfSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTexGenParameterfSGIS () - %s",
+               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfSGIS);
+}
+
+/* glPixelTexGenParameterfvSGIS */
+GdkGLProc
+gdk_gl_get_glPixelTexGenParameterfvSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS == (GdkGLProc_glPixelTexGenParameterfvSGIS) -1)
+    _procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS =
+      (GdkGLProc_glPixelTexGenParameterfvSGIS) gdk_gl_get_proc_address ("glPixelTexGenParameterfvSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTexGenParameterfvSGIS () - %s",
+               (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glPixelTexGenParameterfvSGIS);
+}
+
+/* glGetPixelTexGenParameterivSGIS */
+GdkGLProc
+gdk_gl_get_glGetPixelTexGenParameterivSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS == (GdkGLProc_glGetPixelTexGenParameterivSGIS) -1)
+    _procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS =
+      (GdkGLProc_glGetPixelTexGenParameterivSGIS) gdk_gl_get_proc_address ("glGetPixelTexGenParameterivSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetPixelTexGenParameterivSGIS () - %s",
+               (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterivSGIS);
+}
+
+/* glGetPixelTexGenParameterfvSGIS */
+GdkGLProc
+gdk_gl_get_glGetPixelTexGenParameterfvSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS == (GdkGLProc_glGetPixelTexGenParameterfvSGIS) -1)
+    _procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS =
+      (GdkGLProc_glGetPixelTexGenParameterfvSGIS) gdk_gl_get_proc_address ("glGetPixelTexGenParameterfvSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetPixelTexGenParameterfvSGIS () - %s",
+               (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_pixel_texture.glGetPixelTexGenParameterfvSGIS);
+}
+
+/* Get GL_SGIS_pixel_texture functions */
+GdkGL_GL_SGIS_pixel_texture *
+gdk_gl_get_GL_SGIS_pixel_texture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_pixel_texture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPixelTexGenParameteriSGIS () != NULL);
+          supported &= (gdk_gl_get_glPixelTexGenParameterivSGIS () != NULL);
+          supported &= (gdk_gl_get_glPixelTexGenParameterfSGIS () != NULL);
+          supported &= (gdk_gl_get_glPixelTexGenParameterfvSGIS () != NULL);
+          supported &= (gdk_gl_get_glGetPixelTexGenParameterivSGIS () != NULL);
+          supported &= (gdk_gl_get_glGetPixelTexGenParameterfvSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_pixel_texture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_pixel_texture;
+}
+
+/*
+ * GL_SGIS_texture4D
+ */
+
+static GdkGL_GL_SGIS_texture4D _procs_GL_SGIS_texture4D = {
+  (GdkGLProc_glTexImage4DSGIS) -1,
+  (GdkGLProc_glTexSubImage4DSGIS) -1
+};
+
+/* glTexImage4DSGIS */
+GdkGLProc
+gdk_gl_get_glTexImage4DSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_texture4D.glTexImage4DSGIS == (GdkGLProc_glTexImage4DSGIS) -1)
+    _procs_GL_SGIS_texture4D.glTexImage4DSGIS =
+      (GdkGLProc_glTexImage4DSGIS) gdk_gl_get_proc_address ("glTexImage4DSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexImage4DSGIS () - %s",
+               (_procs_GL_SGIS_texture4D.glTexImage4DSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_texture4D.glTexImage4DSGIS);
+}
+
+/* glTexSubImage4DSGIS */
+GdkGLProc
+gdk_gl_get_glTexSubImage4DSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_texture4D.glTexSubImage4DSGIS == (GdkGLProc_glTexSubImage4DSGIS) -1)
+    _procs_GL_SGIS_texture4D.glTexSubImage4DSGIS =
+      (GdkGLProc_glTexSubImage4DSGIS) gdk_gl_get_proc_address ("glTexSubImage4DSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexSubImage4DSGIS () - %s",
+               (_procs_GL_SGIS_texture4D.glTexSubImage4DSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_texture4D.glTexSubImage4DSGIS);
+}
+
+/* Get GL_SGIS_texture4D functions */
+GdkGL_GL_SGIS_texture4D *
+gdk_gl_get_GL_SGIS_texture4D (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_texture4D");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexImage4DSGIS () != NULL);
+          supported &= (gdk_gl_get_glTexSubImage4DSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_texture4D () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_texture4D;
+}
+
+/*
+ * GL_EXT_texture_object
+ */
+
+static GdkGL_GL_EXT_texture_object _procs_GL_EXT_texture_object = {
+  (GdkGLProc_glAreTexturesResidentEXT) -1,
+  (GdkGLProc_glBindTextureEXT) -1,
+  (GdkGLProc_glDeleteTexturesEXT) -1,
+  (GdkGLProc_glGenTexturesEXT) -1,
+  (GdkGLProc_glIsTextureEXT) -1,
+  (GdkGLProc_glPrioritizeTexturesEXT) -1
+};
+
+/* glAreTexturesResidentEXT */
+GdkGLProc
+gdk_gl_get_glAreTexturesResidentEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture_object.glAreTexturesResidentEXT == (GdkGLProc_glAreTexturesResidentEXT) -1)
+    _procs_GL_EXT_texture_object.glAreTexturesResidentEXT =
+      (GdkGLProc_glAreTexturesResidentEXT) gdk_gl_get_proc_address ("glAreTexturesResidentEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glAreTexturesResidentEXT () - %s",
+               (_procs_GL_EXT_texture_object.glAreTexturesResidentEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture_object.glAreTexturesResidentEXT);
+}
+
+/* glBindTextureEXT */
+GdkGLProc
+gdk_gl_get_glBindTextureEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture_object.glBindTextureEXT == (GdkGLProc_glBindTextureEXT) -1)
+    _procs_GL_EXT_texture_object.glBindTextureEXT =
+      (GdkGLProc_glBindTextureEXT) gdk_gl_get_proc_address ("glBindTextureEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindTextureEXT () - %s",
+               (_procs_GL_EXT_texture_object.glBindTextureEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture_object.glBindTextureEXT);
+}
+
+/* glDeleteTexturesEXT */
+GdkGLProc
+gdk_gl_get_glDeleteTexturesEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture_object.glDeleteTexturesEXT == (GdkGLProc_glDeleteTexturesEXT) -1)
+    _procs_GL_EXT_texture_object.glDeleteTexturesEXT =
+      (GdkGLProc_glDeleteTexturesEXT) gdk_gl_get_proc_address ("glDeleteTexturesEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteTexturesEXT () - %s",
+               (_procs_GL_EXT_texture_object.glDeleteTexturesEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture_object.glDeleteTexturesEXT);
+}
+
+/* glGenTexturesEXT */
+GdkGLProc
+gdk_gl_get_glGenTexturesEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture_object.glGenTexturesEXT == (GdkGLProc_glGenTexturesEXT) -1)
+    _procs_GL_EXT_texture_object.glGenTexturesEXT =
+      (GdkGLProc_glGenTexturesEXT) gdk_gl_get_proc_address ("glGenTexturesEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenTexturesEXT () - %s",
+               (_procs_GL_EXT_texture_object.glGenTexturesEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture_object.glGenTexturesEXT);
+}
+
+/* glIsTextureEXT */
+GdkGLProc
+gdk_gl_get_glIsTextureEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture_object.glIsTextureEXT == (GdkGLProc_glIsTextureEXT) -1)
+    _procs_GL_EXT_texture_object.glIsTextureEXT =
+      (GdkGLProc_glIsTextureEXT) gdk_gl_get_proc_address ("glIsTextureEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsTextureEXT () - %s",
+               (_procs_GL_EXT_texture_object.glIsTextureEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture_object.glIsTextureEXT);
+}
+
+/* glPrioritizeTexturesEXT */
+GdkGLProc
+gdk_gl_get_glPrioritizeTexturesEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture_object.glPrioritizeTexturesEXT == (GdkGLProc_glPrioritizeTexturesEXT) -1)
+    _procs_GL_EXT_texture_object.glPrioritizeTexturesEXT =
+      (GdkGLProc_glPrioritizeTexturesEXT) gdk_gl_get_proc_address ("glPrioritizeTexturesEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPrioritizeTexturesEXT () - %s",
+               (_procs_GL_EXT_texture_object.glPrioritizeTexturesEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture_object.glPrioritizeTexturesEXT);
+}
+
+/* Get GL_EXT_texture_object functions */
+GdkGL_GL_EXT_texture_object *
+gdk_gl_get_GL_EXT_texture_object (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_texture_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glAreTexturesResidentEXT () != NULL);
+          supported &= (gdk_gl_get_glBindTextureEXT () != NULL);
+          supported &= (gdk_gl_get_glDeleteTexturesEXT () != NULL);
+          supported &= (gdk_gl_get_glGenTexturesEXT () != NULL);
+          supported &= (gdk_gl_get_glIsTextureEXT () != NULL);
+          supported &= (gdk_gl_get_glPrioritizeTexturesEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_texture_object () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_texture_object;
+}
+
+/*
+ * GL_SGIS_detail_texture
+ */
+
+static GdkGL_GL_SGIS_detail_texture _procs_GL_SGIS_detail_texture = {
+  (GdkGLProc_glDetailTexFuncSGIS) -1,
+  (GdkGLProc_glGetDetailTexFuncSGIS) -1
+};
+
+/* glDetailTexFuncSGIS */
+GdkGLProc
+gdk_gl_get_glDetailTexFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS == (GdkGLProc_glDetailTexFuncSGIS) -1)
+    _procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS =
+      (GdkGLProc_glDetailTexFuncSGIS) gdk_gl_get_proc_address ("glDetailTexFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDetailTexFuncSGIS () - %s",
+               (_procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_detail_texture.glDetailTexFuncSGIS);
+}
+
+/* glGetDetailTexFuncSGIS */
+GdkGLProc
+gdk_gl_get_glGetDetailTexFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS == (GdkGLProc_glGetDetailTexFuncSGIS) -1)
+    _procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS =
+      (GdkGLProc_glGetDetailTexFuncSGIS) gdk_gl_get_proc_address ("glGetDetailTexFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetDetailTexFuncSGIS () - %s",
+               (_procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_detail_texture.glGetDetailTexFuncSGIS);
+}
+
+/* Get GL_SGIS_detail_texture functions */
+GdkGL_GL_SGIS_detail_texture *
+gdk_gl_get_GL_SGIS_detail_texture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_detail_texture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDetailTexFuncSGIS () != NULL);
+          supported &= (gdk_gl_get_glGetDetailTexFuncSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_detail_texture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_detail_texture;
+}
+
+/*
+ * GL_SGIS_sharpen_texture
+ */
+
+static GdkGL_GL_SGIS_sharpen_texture _procs_GL_SGIS_sharpen_texture = {
+  (GdkGLProc_glSharpenTexFuncSGIS) -1,
+  (GdkGLProc_glGetSharpenTexFuncSGIS) -1
+};
+
+/* glSharpenTexFuncSGIS */
+GdkGLProc
+gdk_gl_get_glSharpenTexFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS == (GdkGLProc_glSharpenTexFuncSGIS) -1)
+    _procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS =
+      (GdkGLProc_glSharpenTexFuncSGIS) gdk_gl_get_proc_address ("glSharpenTexFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSharpenTexFuncSGIS () - %s",
+               (_procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_sharpen_texture.glSharpenTexFuncSGIS);
+}
+
+/* glGetSharpenTexFuncSGIS */
+GdkGLProc
+gdk_gl_get_glGetSharpenTexFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS == (GdkGLProc_glGetSharpenTexFuncSGIS) -1)
+    _procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS =
+      (GdkGLProc_glGetSharpenTexFuncSGIS) gdk_gl_get_proc_address ("glGetSharpenTexFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetSharpenTexFuncSGIS () - %s",
+               (_procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_sharpen_texture.glGetSharpenTexFuncSGIS);
+}
+
+/* Get GL_SGIS_sharpen_texture functions */
+GdkGL_GL_SGIS_sharpen_texture *
+gdk_gl_get_GL_SGIS_sharpen_texture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_sharpen_texture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glSharpenTexFuncSGIS () != NULL);
+          supported &= (gdk_gl_get_glGetSharpenTexFuncSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_sharpen_texture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_sharpen_texture;
+}
+
+/*
+ * GL_SGIS_multisample
+ */
+
+static GdkGL_GL_SGIS_multisample _procs_GL_SGIS_multisample = {
+  (GdkGLProc_glSampleMaskSGIS) -1,
+  (GdkGLProc_glSamplePatternSGIS) -1
+};
+
+/* glSampleMaskSGIS */
+GdkGLProc
+gdk_gl_get_glSampleMaskSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_multisample.glSampleMaskSGIS == (GdkGLProc_glSampleMaskSGIS) -1)
+    _procs_GL_SGIS_multisample.glSampleMaskSGIS =
+      (GdkGLProc_glSampleMaskSGIS) gdk_gl_get_proc_address ("glSampleMaskSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSampleMaskSGIS () - %s",
+               (_procs_GL_SGIS_multisample.glSampleMaskSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_multisample.glSampleMaskSGIS);
+}
+
+/* glSamplePatternSGIS */
+GdkGLProc
+gdk_gl_get_glSamplePatternSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_multisample.glSamplePatternSGIS == (GdkGLProc_glSamplePatternSGIS) -1)
+    _procs_GL_SGIS_multisample.glSamplePatternSGIS =
+      (GdkGLProc_glSamplePatternSGIS) gdk_gl_get_proc_address ("glSamplePatternSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSamplePatternSGIS () - %s",
+               (_procs_GL_SGIS_multisample.glSamplePatternSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_multisample.glSamplePatternSGIS);
+}
+
+/* Get GL_SGIS_multisample functions */
+GdkGL_GL_SGIS_multisample *
+gdk_gl_get_GL_SGIS_multisample (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_multisample");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glSampleMaskSGIS () != NULL);
+          supported &= (gdk_gl_get_glSamplePatternSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_multisample () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_multisample;
+}
+
+/*
+ * GL_EXT_vertex_array
+ */
+
+static GdkGL_GL_EXT_vertex_array _procs_GL_EXT_vertex_array = {
+  (GdkGLProc_glArrayElementEXT) -1,
+  (GdkGLProc_glColorPointerEXT) -1,
+  (GdkGLProc_glDrawArraysEXT) -1,
+  (GdkGLProc_glEdgeFlagPointerEXT) -1,
+  (GdkGLProc_glGetPointervEXT) -1,
+  (GdkGLProc_glIndexPointerEXT) -1,
+  (GdkGLProc_glNormalPointerEXT) -1,
+  (GdkGLProc_glTexCoordPointerEXT) -1,
+  (GdkGLProc_glVertexPointerEXT) -1
+};
+
+/* glArrayElementEXT */
+GdkGLProc
+gdk_gl_get_glArrayElementEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glArrayElementEXT == (GdkGLProc_glArrayElementEXT) -1)
+    _procs_GL_EXT_vertex_array.glArrayElementEXT =
+      (GdkGLProc_glArrayElementEXT) gdk_gl_get_proc_address ("glArrayElementEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glArrayElementEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glArrayElementEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glArrayElementEXT);
+}
+
+/* glColorPointerEXT */
+GdkGLProc
+gdk_gl_get_glColorPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glColorPointerEXT == (GdkGLProc_glColorPointerEXT) -1)
+    _procs_GL_EXT_vertex_array.glColorPointerEXT =
+      (GdkGLProc_glColorPointerEXT) gdk_gl_get_proc_address ("glColorPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glColorPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glColorPointerEXT);
+}
+
+/* glDrawArraysEXT */
+GdkGLProc
+gdk_gl_get_glDrawArraysEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glDrawArraysEXT == (GdkGLProc_glDrawArraysEXT) -1)
+    _procs_GL_EXT_vertex_array.glDrawArraysEXT =
+      (GdkGLProc_glDrawArraysEXT) gdk_gl_get_proc_address ("glDrawArraysEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawArraysEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glDrawArraysEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glDrawArraysEXT);
+}
+
+/* glEdgeFlagPointerEXT */
+GdkGLProc
+gdk_gl_get_glEdgeFlagPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT == (GdkGLProc_glEdgeFlagPointerEXT) -1)
+    _procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT =
+      (GdkGLProc_glEdgeFlagPointerEXT) gdk_gl_get_proc_address ("glEdgeFlagPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glEdgeFlagPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glEdgeFlagPointerEXT);
+}
+
+/* glGetPointervEXT */
+GdkGLProc
+gdk_gl_get_glGetPointervEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glGetPointervEXT == (GdkGLProc_glGetPointervEXT) -1)
+    _procs_GL_EXT_vertex_array.glGetPointervEXT =
+      (GdkGLProc_glGetPointervEXT) gdk_gl_get_proc_address ("glGetPointervEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetPointervEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glGetPointervEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glGetPointervEXT);
+}
+
+/* glIndexPointerEXT */
+GdkGLProc
+gdk_gl_get_glIndexPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glIndexPointerEXT == (GdkGLProc_glIndexPointerEXT) -1)
+    _procs_GL_EXT_vertex_array.glIndexPointerEXT =
+      (GdkGLProc_glIndexPointerEXT) gdk_gl_get_proc_address ("glIndexPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIndexPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glIndexPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glIndexPointerEXT);
+}
+
+/* glNormalPointerEXT */
+GdkGLProc
+gdk_gl_get_glNormalPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glNormalPointerEXT == (GdkGLProc_glNormalPointerEXT) -1)
+    _procs_GL_EXT_vertex_array.glNormalPointerEXT =
+      (GdkGLProc_glNormalPointerEXT) gdk_gl_get_proc_address ("glNormalPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNormalPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glNormalPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glNormalPointerEXT);
+}
+
+/* glTexCoordPointerEXT */
+GdkGLProc
+gdk_gl_get_glTexCoordPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glTexCoordPointerEXT == (GdkGLProc_glTexCoordPointerEXT) -1)
+    _procs_GL_EXT_vertex_array.glTexCoordPointerEXT =
+      (GdkGLProc_glTexCoordPointerEXT) gdk_gl_get_proc_address ("glTexCoordPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoordPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glTexCoordPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glTexCoordPointerEXT);
+}
+
+/* glVertexPointerEXT */
+GdkGLProc
+gdk_gl_get_glVertexPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_array.glVertexPointerEXT == (GdkGLProc_glVertexPointerEXT) -1)
+    _procs_GL_EXT_vertex_array.glVertexPointerEXT =
+      (GdkGLProc_glVertexPointerEXT) gdk_gl_get_proc_address ("glVertexPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_array.glVertexPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_array.glVertexPointerEXT);
+}
+
+/* Get GL_EXT_vertex_array functions */
+GdkGL_GL_EXT_vertex_array *
+gdk_gl_get_GL_EXT_vertex_array (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_vertex_array");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glArrayElementEXT () != NULL);
+          supported &= (gdk_gl_get_glColorPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glDrawArraysEXT () != NULL);
+          supported &= (gdk_gl_get_glEdgeFlagPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glGetPointervEXT () != NULL);
+          supported &= (gdk_gl_get_glIndexPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glNormalPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glTexCoordPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexPointerEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_vertex_array () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_vertex_array;
+}
+
+/*
+ * GL_EXT_blend_minmax
+ */
+
+static GdkGL_GL_EXT_blend_minmax _procs_GL_EXT_blend_minmax = {
+  (GdkGLProc_glBlendEquationEXT) -1
+};
+
+/* glBlendEquationEXT */
+GdkGLProc
+gdk_gl_get_glBlendEquationEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_blend_minmax.glBlendEquationEXT == (GdkGLProc_glBlendEquationEXT) -1)
+    _procs_GL_EXT_blend_minmax.glBlendEquationEXT =
+      (GdkGLProc_glBlendEquationEXT) gdk_gl_get_proc_address ("glBlendEquationEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendEquationEXT () - %s",
+               (_procs_GL_EXT_blend_minmax.glBlendEquationEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_blend_minmax.glBlendEquationEXT);
+}
+
+/* Get GL_EXT_blend_minmax functions */
+GdkGL_GL_EXT_blend_minmax *
+gdk_gl_get_GL_EXT_blend_minmax (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_blend_minmax");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlendEquationEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_blend_minmax () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_blend_minmax;
+}
+
+/*
+ * GL_SGIX_sprite
+ */
+
+static GdkGL_GL_SGIX_sprite _procs_GL_SGIX_sprite = {
+  (GdkGLProc_glSpriteParameterfSGIX) -1,
+  (GdkGLProc_glSpriteParameterfvSGIX) -1,
+  (GdkGLProc_glSpriteParameteriSGIX) -1,
+  (GdkGLProc_glSpriteParameterivSGIX) -1
+};
+
+/* glSpriteParameterfSGIX */
+GdkGLProc
+gdk_gl_get_glSpriteParameterfSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_sprite.glSpriteParameterfSGIX == (GdkGLProc_glSpriteParameterfSGIX) -1)
+    _procs_GL_SGIX_sprite.glSpriteParameterfSGIX =
+      (GdkGLProc_glSpriteParameterfSGIX) gdk_gl_get_proc_address ("glSpriteParameterfSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSpriteParameterfSGIX () - %s",
+               (_procs_GL_SGIX_sprite.glSpriteParameterfSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameterfSGIX);
+}
+
+/* glSpriteParameterfvSGIX */
+GdkGLProc
+gdk_gl_get_glSpriteParameterfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_sprite.glSpriteParameterfvSGIX == (GdkGLProc_glSpriteParameterfvSGIX) -1)
+    _procs_GL_SGIX_sprite.glSpriteParameterfvSGIX =
+      (GdkGLProc_glSpriteParameterfvSGIX) gdk_gl_get_proc_address ("glSpriteParameterfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSpriteParameterfvSGIX () - %s",
+               (_procs_GL_SGIX_sprite.glSpriteParameterfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameterfvSGIX);
+}
+
+/* glSpriteParameteriSGIX */
+GdkGLProc
+gdk_gl_get_glSpriteParameteriSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_sprite.glSpriteParameteriSGIX == (GdkGLProc_glSpriteParameteriSGIX) -1)
+    _procs_GL_SGIX_sprite.glSpriteParameteriSGIX =
+      (GdkGLProc_glSpriteParameteriSGIX) gdk_gl_get_proc_address ("glSpriteParameteriSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSpriteParameteriSGIX () - %s",
+               (_procs_GL_SGIX_sprite.glSpriteParameteriSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameteriSGIX);
+}
+
+/* glSpriteParameterivSGIX */
+GdkGLProc
+gdk_gl_get_glSpriteParameterivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_sprite.glSpriteParameterivSGIX == (GdkGLProc_glSpriteParameterivSGIX) -1)
+    _procs_GL_SGIX_sprite.glSpriteParameterivSGIX =
+      (GdkGLProc_glSpriteParameterivSGIX) gdk_gl_get_proc_address ("glSpriteParameterivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSpriteParameterivSGIX () - %s",
+               (_procs_GL_SGIX_sprite.glSpriteParameterivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_sprite.glSpriteParameterivSGIX);
+}
+
+/* Get GL_SGIX_sprite functions */
+GdkGL_GL_SGIX_sprite *
+gdk_gl_get_GL_SGIX_sprite (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_sprite");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glSpriteParameterfSGIX () != NULL);
+          supported &= (gdk_gl_get_glSpriteParameterfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glSpriteParameteriSGIX () != NULL);
+          supported &= (gdk_gl_get_glSpriteParameterivSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_sprite () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_sprite;
+}
+
+/*
+ * GL_EXT_point_parameters
+ */
+
+static GdkGL_GL_EXT_point_parameters _procs_GL_EXT_point_parameters = {
+  (GdkGLProc_glPointParameterfEXT) -1,
+  (GdkGLProc_glPointParameterfvEXT) -1
+};
+
+/* glPointParameterfEXT */
+GdkGLProc
+gdk_gl_get_glPointParameterfEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_point_parameters.glPointParameterfEXT == (GdkGLProc_glPointParameterfEXT) -1)
+    _procs_GL_EXT_point_parameters.glPointParameterfEXT =
+      (GdkGLProc_glPointParameterfEXT) gdk_gl_get_proc_address ("glPointParameterfEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPointParameterfEXT () - %s",
+               (_procs_GL_EXT_point_parameters.glPointParameterfEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_point_parameters.glPointParameterfEXT);
+}
+
+/* glPointParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glPointParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_point_parameters.glPointParameterfvEXT == (GdkGLProc_glPointParameterfvEXT) -1)
+    _procs_GL_EXT_point_parameters.glPointParameterfvEXT =
+      (GdkGLProc_glPointParameterfvEXT) gdk_gl_get_proc_address ("glPointParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPointParameterfvEXT () - %s",
+               (_procs_GL_EXT_point_parameters.glPointParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_point_parameters.glPointParameterfvEXT);
+}
+
+/* Get GL_EXT_point_parameters functions */
+GdkGL_GL_EXT_point_parameters *
+gdk_gl_get_GL_EXT_point_parameters (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_point_parameters");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPointParameterfEXT () != NULL);
+          supported &= (gdk_gl_get_glPointParameterfvEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_point_parameters () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_point_parameters;
+}
+
+/*
+ * GL_SGIS_point_parameters
+ */
+
+static GdkGL_GL_SGIS_point_parameters _procs_GL_SGIS_point_parameters = {
+  (GdkGLProc_glPointParameterfSGIS) -1,
+  (GdkGLProc_glPointParameterfvSGIS) -1
+};
+
+/* glPointParameterfSGIS */
+GdkGLProc
+gdk_gl_get_glPointParameterfSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_point_parameters.glPointParameterfSGIS == (GdkGLProc_glPointParameterfSGIS) -1)
+    _procs_GL_SGIS_point_parameters.glPointParameterfSGIS =
+      (GdkGLProc_glPointParameterfSGIS) gdk_gl_get_proc_address ("glPointParameterfSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPointParameterfSGIS () - %s",
+               (_procs_GL_SGIS_point_parameters.glPointParameterfSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_point_parameters.glPointParameterfSGIS);
+}
+
+/* glPointParameterfvSGIS */
+GdkGLProc
+gdk_gl_get_glPointParameterfvSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_point_parameters.glPointParameterfvSGIS == (GdkGLProc_glPointParameterfvSGIS) -1)
+    _procs_GL_SGIS_point_parameters.glPointParameterfvSGIS =
+      (GdkGLProc_glPointParameterfvSGIS) gdk_gl_get_proc_address ("glPointParameterfvSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPointParameterfvSGIS () - %s",
+               (_procs_GL_SGIS_point_parameters.glPointParameterfvSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_point_parameters.glPointParameterfvSGIS);
+}
+
+/* Get GL_SGIS_point_parameters functions */
+GdkGL_GL_SGIS_point_parameters *
+gdk_gl_get_GL_SGIS_point_parameters (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_point_parameters");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPointParameterfSGIS () != NULL);
+          supported &= (gdk_gl_get_glPointParameterfvSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_point_parameters () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_point_parameters;
+}
+
+/*
+ * GL_SGIX_instruments
+ */
+
+static GdkGL_GL_SGIX_instruments _procs_GL_SGIX_instruments = {
+  (GdkGLProc_glGetInstrumentsSGIX) -1,
+  (GdkGLProc_glInstrumentsBufferSGIX) -1,
+  (GdkGLProc_glPollInstrumentsSGIX) -1,
+  (GdkGLProc_glReadInstrumentsSGIX) -1,
+  (GdkGLProc_glStartInstrumentsSGIX) -1,
+  (GdkGLProc_glStopInstrumentsSGIX) -1
+};
+
+/* glGetInstrumentsSGIX */
+GdkGLProc
+gdk_gl_get_glGetInstrumentsSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_instruments.glGetInstrumentsSGIX == (GdkGLProc_glGetInstrumentsSGIX) -1)
+    _procs_GL_SGIX_instruments.glGetInstrumentsSGIX =
+      (GdkGLProc_glGetInstrumentsSGIX) gdk_gl_get_proc_address ("glGetInstrumentsSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetInstrumentsSGIX () - %s",
+               (_procs_GL_SGIX_instruments.glGetInstrumentsSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_instruments.glGetInstrumentsSGIX);
+}
+
+/* glInstrumentsBufferSGIX */
+GdkGLProc
+gdk_gl_get_glInstrumentsBufferSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_instruments.glInstrumentsBufferSGIX == (GdkGLProc_glInstrumentsBufferSGIX) -1)
+    _procs_GL_SGIX_instruments.glInstrumentsBufferSGIX =
+      (GdkGLProc_glInstrumentsBufferSGIX) gdk_gl_get_proc_address ("glInstrumentsBufferSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glInstrumentsBufferSGIX () - %s",
+               (_procs_GL_SGIX_instruments.glInstrumentsBufferSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_instruments.glInstrumentsBufferSGIX);
+}
+
+/* glPollInstrumentsSGIX */
+GdkGLProc
+gdk_gl_get_glPollInstrumentsSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_instruments.glPollInstrumentsSGIX == (GdkGLProc_glPollInstrumentsSGIX) -1)
+    _procs_GL_SGIX_instruments.glPollInstrumentsSGIX =
+      (GdkGLProc_glPollInstrumentsSGIX) gdk_gl_get_proc_address ("glPollInstrumentsSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPollInstrumentsSGIX () - %s",
+               (_procs_GL_SGIX_instruments.glPollInstrumentsSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_instruments.glPollInstrumentsSGIX);
+}
+
+/* glReadInstrumentsSGIX */
+GdkGLProc
+gdk_gl_get_glReadInstrumentsSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_instruments.glReadInstrumentsSGIX == (GdkGLProc_glReadInstrumentsSGIX) -1)
+    _procs_GL_SGIX_instruments.glReadInstrumentsSGIX =
+      (GdkGLProc_glReadInstrumentsSGIX) gdk_gl_get_proc_address ("glReadInstrumentsSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReadInstrumentsSGIX () - %s",
+               (_procs_GL_SGIX_instruments.glReadInstrumentsSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_instruments.glReadInstrumentsSGIX);
+}
+
+/* glStartInstrumentsSGIX */
+GdkGLProc
+gdk_gl_get_glStartInstrumentsSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_instruments.glStartInstrumentsSGIX == (GdkGLProc_glStartInstrumentsSGIX) -1)
+    _procs_GL_SGIX_instruments.glStartInstrumentsSGIX =
+      (GdkGLProc_glStartInstrumentsSGIX) gdk_gl_get_proc_address ("glStartInstrumentsSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glStartInstrumentsSGIX () - %s",
+               (_procs_GL_SGIX_instruments.glStartInstrumentsSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_instruments.glStartInstrumentsSGIX);
+}
+
+/* glStopInstrumentsSGIX */
+GdkGLProc
+gdk_gl_get_glStopInstrumentsSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_instruments.glStopInstrumentsSGIX == (GdkGLProc_glStopInstrumentsSGIX) -1)
+    _procs_GL_SGIX_instruments.glStopInstrumentsSGIX =
+      (GdkGLProc_glStopInstrumentsSGIX) gdk_gl_get_proc_address ("glStopInstrumentsSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glStopInstrumentsSGIX () - %s",
+               (_procs_GL_SGIX_instruments.glStopInstrumentsSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_instruments.glStopInstrumentsSGIX);
+}
+
+/* Get GL_SGIX_instruments functions */
+GdkGL_GL_SGIX_instruments *
+gdk_gl_get_GL_SGIX_instruments (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_instruments");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetInstrumentsSGIX () != NULL);
+          supported &= (gdk_gl_get_glInstrumentsBufferSGIX () != NULL);
+          supported &= (gdk_gl_get_glPollInstrumentsSGIX () != NULL);
+          supported &= (gdk_gl_get_glReadInstrumentsSGIX () != NULL);
+          supported &= (gdk_gl_get_glStartInstrumentsSGIX () != NULL);
+          supported &= (gdk_gl_get_glStopInstrumentsSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_instruments () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_instruments;
+}
+
+/*
+ * GL_SGIX_framezoom
+ */
+
+static GdkGL_GL_SGIX_framezoom _procs_GL_SGIX_framezoom = {
+  (GdkGLProc_glFrameZoomSGIX) -1
+};
+
+/* glFrameZoomSGIX */
+GdkGLProc
+gdk_gl_get_glFrameZoomSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_framezoom.glFrameZoomSGIX == (GdkGLProc_glFrameZoomSGIX) -1)
+    _procs_GL_SGIX_framezoom.glFrameZoomSGIX =
+      (GdkGLProc_glFrameZoomSGIX) gdk_gl_get_proc_address ("glFrameZoomSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFrameZoomSGIX () - %s",
+               (_procs_GL_SGIX_framezoom.glFrameZoomSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_framezoom.glFrameZoomSGIX);
+}
+
+/* Get GL_SGIX_framezoom functions */
+GdkGL_GL_SGIX_framezoom *
 gdk_gl_get_GL_SGIX_framezoom (void)
 {
-  static gint supported = -1;
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_framezoom");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFrameZoomSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_framezoom () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_framezoom;
+}
+
+/*
+ * GL_SGIX_tag_sample_buffer
+ */
+
+static GdkGL_GL_SGIX_tag_sample_buffer _procs_GL_SGIX_tag_sample_buffer = {
+  (GdkGLProc_glTagSampleBufferSGIX) -1
+};
+
+/* glTagSampleBufferSGIX */
+GdkGLProc
+gdk_gl_get_glTagSampleBufferSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX == (GdkGLProc_glTagSampleBufferSGIX) -1)
+    _procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX =
+      (GdkGLProc_glTagSampleBufferSGIX) gdk_gl_get_proc_address ("glTagSampleBufferSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTagSampleBufferSGIX () - %s",
+               (_procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX);
+}
+
+/* Get GL_SGIX_tag_sample_buffer functions */
+GdkGL_GL_SGIX_tag_sample_buffer *
+gdk_gl_get_GL_SGIX_tag_sample_buffer (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_tag_sample_buffer");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTagSampleBufferSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_tag_sample_buffer () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_tag_sample_buffer;
+}
+
+/*
+ * GL_SGIX_polynomial_ffd
+ */
+
+static GdkGL_GL_SGIX_polynomial_ffd _procs_GL_SGIX_polynomial_ffd = {
+  (GdkGLProc_glDeformationMap3dSGIX) -1,
+  (GdkGLProc_glDeformationMap3fSGIX) -1,
+  (GdkGLProc_glDeformSGIX) -1,
+  (GdkGLProc_glLoadIdentityDeformationMapSGIX) -1
+};
+
+/* glDeformationMap3dSGIX */
+GdkGLProc
+gdk_gl_get_glDeformationMap3dSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX == (GdkGLProc_glDeformationMap3dSGIX) -1)
+    _procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX =
+      (GdkGLProc_glDeformationMap3dSGIX) gdk_gl_get_proc_address ("glDeformationMap3dSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeformationMap3dSGIX () - %s",
+               (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX);
+}
+
+/* glDeformationMap3fSGIX */
+GdkGLProc
+gdk_gl_get_glDeformationMap3fSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX == (GdkGLProc_glDeformationMap3fSGIX) -1)
+    _procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX =
+      (GdkGLProc_glDeformationMap3fSGIX) gdk_gl_get_proc_address ("glDeformationMap3fSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeformationMap3fSGIX () - %s",
+               (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX);
+}
+
+/* glDeformSGIX */
+GdkGLProc
+gdk_gl_get_glDeformSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_polynomial_ffd.glDeformSGIX == (GdkGLProc_glDeformSGIX) -1)
+    _procs_GL_SGIX_polynomial_ffd.glDeformSGIX =
+      (GdkGLProc_glDeformSGIX) gdk_gl_get_proc_address ("glDeformSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeformSGIX () - %s",
+               (_procs_GL_SGIX_polynomial_ffd.glDeformSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glDeformSGIX);
+}
+
+/* glLoadIdentityDeformationMapSGIX */
+GdkGLProc
+gdk_gl_get_glLoadIdentityDeformationMapSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX == (GdkGLProc_glLoadIdentityDeformationMapSGIX) -1)
+    _procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX =
+      (GdkGLProc_glLoadIdentityDeformationMapSGIX) gdk_gl_get_proc_address ("glLoadIdentityDeformationMapSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glLoadIdentityDeformationMapSGIX () - %s",
+               (_procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX);
+}
+
+/* Get GL_SGIX_polynomial_ffd functions */
+GdkGL_GL_SGIX_polynomial_ffd *
+gdk_gl_get_GL_SGIX_polynomial_ffd (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_polynomial_ffd");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDeformationMap3dSGIX () != NULL);
+          supported &= (gdk_gl_get_glDeformationMap3fSGIX () != NULL);
+          supported &= (gdk_gl_get_glDeformSGIX () != NULL);
+          supported &= (gdk_gl_get_glLoadIdentityDeformationMapSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_polynomial_ffd () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_polynomial_ffd;
+}
+
+/*
+ * GL_SGIX_reference_plane
+ */
+
+static GdkGL_GL_SGIX_reference_plane _procs_GL_SGIX_reference_plane = {
+  (GdkGLProc_glReferencePlaneSGIX) -1
+};
+
+/* glReferencePlaneSGIX */
+GdkGLProc
+gdk_gl_get_glReferencePlaneSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_reference_plane.glReferencePlaneSGIX == (GdkGLProc_glReferencePlaneSGIX) -1)
+    _procs_GL_SGIX_reference_plane.glReferencePlaneSGIX =
+      (GdkGLProc_glReferencePlaneSGIX) gdk_gl_get_proc_address ("glReferencePlaneSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReferencePlaneSGIX () - %s",
+               (_procs_GL_SGIX_reference_plane.glReferencePlaneSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_reference_plane.glReferencePlaneSGIX);
+}
+
+/* Get GL_SGIX_reference_plane functions */
+GdkGL_GL_SGIX_reference_plane *
+gdk_gl_get_GL_SGIX_reference_plane (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_reference_plane");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glReferencePlaneSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_reference_plane () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_reference_plane;
+}
+
+/*
+ * GL_SGIX_flush_raster
+ */
+
+static GdkGL_GL_SGIX_flush_raster _procs_GL_SGIX_flush_raster = {
+  (GdkGLProc_glFlushRasterSGIX) -1
+};
+
+/* glFlushRasterSGIX */
+GdkGLProc
+gdk_gl_get_glFlushRasterSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_flush_raster.glFlushRasterSGIX == (GdkGLProc_glFlushRasterSGIX) -1)
+    _procs_GL_SGIX_flush_raster.glFlushRasterSGIX =
+      (GdkGLProc_glFlushRasterSGIX) gdk_gl_get_proc_address ("glFlushRasterSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFlushRasterSGIX () - %s",
+               (_procs_GL_SGIX_flush_raster.glFlushRasterSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_flush_raster.glFlushRasterSGIX);
+}
+
+/* Get GL_SGIX_flush_raster functions */
+GdkGL_GL_SGIX_flush_raster *
+gdk_gl_get_GL_SGIX_flush_raster (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_flush_raster");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFlushRasterSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_flush_raster () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_flush_raster;
+}
+
+/*
+ * GL_SGIS_fog_function
+ */
+
+static GdkGL_GL_SGIS_fog_function _procs_GL_SGIS_fog_function = {
+  (GdkGLProc_glFogFuncSGIS) -1,
+  (GdkGLProc_glGetFogFuncSGIS) -1
+};
+
+/* glFogFuncSGIS */
+GdkGLProc
+gdk_gl_get_glFogFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_fog_function.glFogFuncSGIS == (GdkGLProc_glFogFuncSGIS) -1)
+    _procs_GL_SGIS_fog_function.glFogFuncSGIS =
+      (GdkGLProc_glFogFuncSGIS) gdk_gl_get_proc_address ("glFogFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogFuncSGIS () - %s",
+               (_procs_GL_SGIS_fog_function.glFogFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_fog_function.glFogFuncSGIS);
+}
+
+/* glGetFogFuncSGIS */
+GdkGLProc
+gdk_gl_get_glGetFogFuncSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_fog_function.glGetFogFuncSGIS == (GdkGLProc_glGetFogFuncSGIS) -1)
+    _procs_GL_SGIS_fog_function.glGetFogFuncSGIS =
+      (GdkGLProc_glGetFogFuncSGIS) gdk_gl_get_proc_address ("glGetFogFuncSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFogFuncSGIS () - %s",
+               (_procs_GL_SGIS_fog_function.glGetFogFuncSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_fog_function.glGetFogFuncSGIS);
+}
+
+/* Get GL_SGIS_fog_function functions */
+GdkGL_GL_SGIS_fog_function *
+gdk_gl_get_GL_SGIS_fog_function (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_fog_function");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFogFuncSGIS () != NULL);
+          supported &= (gdk_gl_get_glGetFogFuncSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_fog_function () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_fog_function;
+}
+
+/*
+ * GL_HP_image_transform
+ */
+
+static GdkGL_GL_HP_image_transform _procs_GL_HP_image_transform = {
+  (GdkGLProc_glImageTransformParameteriHP) -1,
+  (GdkGLProc_glImageTransformParameterfHP) -1,
+  (GdkGLProc_glImageTransformParameterivHP) -1,
+  (GdkGLProc_glImageTransformParameterfvHP) -1,
+  (GdkGLProc_glGetImageTransformParameterivHP) -1,
+  (GdkGLProc_glGetImageTransformParameterfvHP) -1
+};
+
+/* glImageTransformParameteriHP */
+GdkGLProc
+gdk_gl_get_glImageTransformParameteriHP (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_HP_image_transform.glImageTransformParameteriHP == (GdkGLProc_glImageTransformParameteriHP) -1)
+    _procs_GL_HP_image_transform.glImageTransformParameteriHP =
+      (GdkGLProc_glImageTransformParameteriHP) gdk_gl_get_proc_address ("glImageTransformParameteriHP");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glImageTransformParameteriHP () - %s",
+               (_procs_GL_HP_image_transform.glImageTransformParameteriHP) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameteriHP);
+}
+
+/* glImageTransformParameterfHP */
+GdkGLProc
+gdk_gl_get_glImageTransformParameterfHP (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_HP_image_transform.glImageTransformParameterfHP == (GdkGLProc_glImageTransformParameterfHP) -1)
+    _procs_GL_HP_image_transform.glImageTransformParameterfHP =
+      (GdkGLProc_glImageTransformParameterfHP) gdk_gl_get_proc_address ("glImageTransformParameterfHP");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glImageTransformParameterfHP () - %s",
+               (_procs_GL_HP_image_transform.glImageTransformParameterfHP) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameterfHP);
+}
+
+/* glImageTransformParameterivHP */
+GdkGLProc
+gdk_gl_get_glImageTransformParameterivHP (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_HP_image_transform.glImageTransformParameterivHP == (GdkGLProc_glImageTransformParameterivHP) -1)
+    _procs_GL_HP_image_transform.glImageTransformParameterivHP =
+      (GdkGLProc_glImageTransformParameterivHP) gdk_gl_get_proc_address ("glImageTransformParameterivHP");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glImageTransformParameterivHP () - %s",
+               (_procs_GL_HP_image_transform.glImageTransformParameterivHP) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameterivHP);
+}
+
+/* glImageTransformParameterfvHP */
+GdkGLProc
+gdk_gl_get_glImageTransformParameterfvHP (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_HP_image_transform.glImageTransformParameterfvHP == (GdkGLProc_glImageTransformParameterfvHP) -1)
+    _procs_GL_HP_image_transform.glImageTransformParameterfvHP =
+      (GdkGLProc_glImageTransformParameterfvHP) gdk_gl_get_proc_address ("glImageTransformParameterfvHP");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glImageTransformParameterfvHP () - %s",
+               (_procs_GL_HP_image_transform.glImageTransformParameterfvHP) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameterfvHP);
+}
+
+/* glGetImageTransformParameterivHP */
+GdkGLProc
+gdk_gl_get_glGetImageTransformParameterivHP (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_HP_image_transform.glGetImageTransformParameterivHP == (GdkGLProc_glGetImageTransformParameterivHP) -1)
+    _procs_GL_HP_image_transform.glGetImageTransformParameterivHP =
+      (GdkGLProc_glGetImageTransformParameterivHP) gdk_gl_get_proc_address ("glGetImageTransformParameterivHP");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetImageTransformParameterivHP () - %s",
+               (_procs_GL_HP_image_transform.glGetImageTransformParameterivHP) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_HP_image_transform.glGetImageTransformParameterivHP);
+}
+
+/* glGetImageTransformParameterfvHP */
+GdkGLProc
+gdk_gl_get_glGetImageTransformParameterfvHP (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_HP_image_transform.glGetImageTransformParameterfvHP == (GdkGLProc_glGetImageTransformParameterfvHP) -1)
+    _procs_GL_HP_image_transform.glGetImageTransformParameterfvHP =
+      (GdkGLProc_glGetImageTransformParameterfvHP) gdk_gl_get_proc_address ("glGetImageTransformParameterfvHP");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetImageTransformParameterfvHP () - %s",
+               (_procs_GL_HP_image_transform.glGetImageTransformParameterfvHP) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_HP_image_transform.glGetImageTransformParameterfvHP);
+}
+
+/* Get GL_HP_image_transform functions */
+GdkGL_GL_HP_image_transform *
+gdk_gl_get_GL_HP_image_transform (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_HP_image_transform");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glImageTransformParameteriHP () != NULL);
+          supported &= (gdk_gl_get_glImageTransformParameterfHP () != NULL);
+          supported &= (gdk_gl_get_glImageTransformParameterivHP () != NULL);
+          supported &= (gdk_gl_get_glImageTransformParameterfvHP () != NULL);
+          supported &= (gdk_gl_get_glGetImageTransformParameterivHP () != NULL);
+          supported &= (gdk_gl_get_glGetImageTransformParameterfvHP () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_HP_image_transform () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_HP_image_transform;
+}
+
+/*
+ * GL_EXT_color_subtable
+ */
+
+static GdkGL_GL_EXT_color_subtable _procs_GL_EXT_color_subtable = {
+  (GdkGLProc_glColorSubTableEXT) -1,
+  (GdkGLProc_glCopyColorSubTableEXT) -1
+};
+
+/* glColorSubTableEXT */
+GdkGLProc
+gdk_gl_get_glColorSubTableEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_color_subtable.glColorSubTableEXT == (GdkGLProc_glColorSubTableEXT) -1)
+    _procs_GL_EXT_color_subtable.glColorSubTableEXT =
+      (GdkGLProc_glColorSubTableEXT) gdk_gl_get_proc_address ("glColorSubTableEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorSubTableEXT () - %s",
+               (_procs_GL_EXT_color_subtable.glColorSubTableEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_color_subtable.glColorSubTableEXT);
+}
+
+/* glCopyColorSubTableEXT */
+GdkGLProc
+gdk_gl_get_glCopyColorSubTableEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_color_subtable.glCopyColorSubTableEXT == (GdkGLProc_glCopyColorSubTableEXT) -1)
+    _procs_GL_EXT_color_subtable.glCopyColorSubTableEXT =
+      (GdkGLProc_glCopyColorSubTableEXT) gdk_gl_get_proc_address ("glCopyColorSubTableEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyColorSubTableEXT () - %s",
+               (_procs_GL_EXT_color_subtable.glCopyColorSubTableEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_color_subtable.glCopyColorSubTableEXT);
+}
+
+/* Get GL_EXT_color_subtable functions */
+GdkGL_GL_EXT_color_subtable *
+gdk_gl_get_GL_EXT_color_subtable (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_color_subtable");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glColorSubTableEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyColorSubTableEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_color_subtable () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_color_subtable;
+}
+
+/*
+ * GL_PGI_misc_hints
+ */
+
+static GdkGL_GL_PGI_misc_hints _procs_GL_PGI_misc_hints = {
+  (GdkGLProc_glHintPGI) -1
+};
+
+/* glHintPGI */
+GdkGLProc
+gdk_gl_get_glHintPGI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_PGI_misc_hints.glHintPGI == (GdkGLProc_glHintPGI) -1)
+    _procs_GL_PGI_misc_hints.glHintPGI =
+      (GdkGLProc_glHintPGI) gdk_gl_get_proc_address ("glHintPGI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glHintPGI () - %s",
+               (_procs_GL_PGI_misc_hints.glHintPGI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_PGI_misc_hints.glHintPGI);
+}
+
+/* Get GL_PGI_misc_hints functions */
+GdkGL_GL_PGI_misc_hints *
+gdk_gl_get_GL_PGI_misc_hints (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_PGI_misc_hints");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glHintPGI () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_PGI_misc_hints () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_PGI_misc_hints;
+}
+
+/*
+ * GL_EXT_paletted_texture
+ */
+
+static GdkGL_GL_EXT_paletted_texture _procs_GL_EXT_paletted_texture = {
+  (GdkGLProc_glColorTableEXT) -1,
+  (GdkGLProc_glGetColorTableEXT) -1,
+  (GdkGLProc_glGetColorTableParameterivEXT) -1,
+  (GdkGLProc_glGetColorTableParameterfvEXT) -1
+};
+
+/* glColorTableEXT */
+GdkGLProc
+gdk_gl_get_glColorTableEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_paletted_texture.glColorTableEXT == (GdkGLProc_glColorTableEXT) -1)
+    _procs_GL_EXT_paletted_texture.glColorTableEXT =
+      (GdkGLProc_glColorTableEXT) gdk_gl_get_proc_address ("glColorTableEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorTableEXT () - %s",
+               (_procs_GL_EXT_paletted_texture.glColorTableEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glColorTableEXT);
+}
+
+/* glGetColorTableEXT */
+GdkGLProc
+gdk_gl_get_glGetColorTableEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_paletted_texture.glGetColorTableEXT == (GdkGLProc_glGetColorTableEXT) -1)
+    _procs_GL_EXT_paletted_texture.glGetColorTableEXT =
+      (GdkGLProc_glGetColorTableEXT) gdk_gl_get_proc_address ("glGetColorTableEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetColorTableEXT () - %s",
+               (_procs_GL_EXT_paletted_texture.glGetColorTableEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glGetColorTableEXT);
+}
+
+/* glGetColorTableParameterivEXT */
+GdkGLProc
+gdk_gl_get_glGetColorTableParameterivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT == (GdkGLProc_glGetColorTableParameterivEXT) -1)
+    _procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT =
+      (GdkGLProc_glGetColorTableParameterivEXT) gdk_gl_get_proc_address ("glGetColorTableParameterivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetColorTableParameterivEXT () - %s",
+               (_procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT);
+}
+
+/* glGetColorTableParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glGetColorTableParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT == (GdkGLProc_glGetColorTableParameterfvEXT) -1)
+    _procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT =
+      (GdkGLProc_glGetColorTableParameterfvEXT) gdk_gl_get_proc_address ("glGetColorTableParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetColorTableParameterfvEXT () - %s",
+               (_procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT);
+}
+
+/* Get GL_EXT_paletted_texture functions */
+GdkGL_GL_EXT_paletted_texture *
+gdk_gl_get_GL_EXT_paletted_texture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_paletted_texture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glColorTableEXT () != NULL);
+          supported &= (gdk_gl_get_glGetColorTableEXT () != NULL);
+          supported &= (gdk_gl_get_glGetColorTableParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetColorTableParameterfvEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_paletted_texture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_paletted_texture;
+}
+
+/*
+ * GL_SGIX_list_priority
+ */
+
+static GdkGL_GL_SGIX_list_priority _procs_GL_SGIX_list_priority = {
+  (GdkGLProc_glGetListParameterfvSGIX) -1,
+  (GdkGLProc_glGetListParameterivSGIX) -1,
+  (GdkGLProc_glListParameterfSGIX) -1,
+  (GdkGLProc_glListParameterfvSGIX) -1,
+  (GdkGLProc_glListParameteriSGIX) -1,
+  (GdkGLProc_glListParameterivSGIX) -1
+};
+
+/* glGetListParameterfvSGIX */
+GdkGLProc
+gdk_gl_get_glGetListParameterfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_list_priority.glGetListParameterfvSGIX == (GdkGLProc_glGetListParameterfvSGIX) -1)
+    _procs_GL_SGIX_list_priority.glGetListParameterfvSGIX =
+      (GdkGLProc_glGetListParameterfvSGIX) gdk_gl_get_proc_address ("glGetListParameterfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetListParameterfvSGIX () - %s",
+               (_procs_GL_SGIX_list_priority.glGetListParameterfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glGetListParameterfvSGIX);
+}
+
+/* glGetListParameterivSGIX */
+GdkGLProc
+gdk_gl_get_glGetListParameterivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_list_priority.glGetListParameterivSGIX == (GdkGLProc_glGetListParameterivSGIX) -1)
+    _procs_GL_SGIX_list_priority.glGetListParameterivSGIX =
+      (GdkGLProc_glGetListParameterivSGIX) gdk_gl_get_proc_address ("glGetListParameterivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetListParameterivSGIX () - %s",
+               (_procs_GL_SGIX_list_priority.glGetListParameterivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glGetListParameterivSGIX);
+}
+
+/* glListParameterfSGIX */
+GdkGLProc
+gdk_gl_get_glListParameterfSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_list_priority.glListParameterfSGIX == (GdkGLProc_glListParameterfSGIX) -1)
+    _procs_GL_SGIX_list_priority.glListParameterfSGIX =
+      (GdkGLProc_glListParameterfSGIX) gdk_gl_get_proc_address ("glListParameterfSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glListParameterfSGIX () - %s",
+               (_procs_GL_SGIX_list_priority.glListParameterfSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameterfSGIX);
+}
+
+/* glListParameterfvSGIX */
+GdkGLProc
+gdk_gl_get_glListParameterfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_list_priority.glListParameterfvSGIX == (GdkGLProc_glListParameterfvSGIX) -1)
+    _procs_GL_SGIX_list_priority.glListParameterfvSGIX =
+      (GdkGLProc_glListParameterfvSGIX) gdk_gl_get_proc_address ("glListParameterfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glListParameterfvSGIX () - %s",
+               (_procs_GL_SGIX_list_priority.glListParameterfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameterfvSGIX);
+}
+
+/* glListParameteriSGIX */
+GdkGLProc
+gdk_gl_get_glListParameteriSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_list_priority.glListParameteriSGIX == (GdkGLProc_glListParameteriSGIX) -1)
+    _procs_GL_SGIX_list_priority.glListParameteriSGIX =
+      (GdkGLProc_glListParameteriSGIX) gdk_gl_get_proc_address ("glListParameteriSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glListParameteriSGIX () - %s",
+               (_procs_GL_SGIX_list_priority.glListParameteriSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameteriSGIX);
+}
+
+/* glListParameterivSGIX */
+GdkGLProc
+gdk_gl_get_glListParameterivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_list_priority.glListParameterivSGIX == (GdkGLProc_glListParameterivSGIX) -1)
+    _procs_GL_SGIX_list_priority.glListParameterivSGIX =
+      (GdkGLProc_glListParameterivSGIX) gdk_gl_get_proc_address ("glListParameterivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glListParameterivSGIX () - %s",
+               (_procs_GL_SGIX_list_priority.glListParameterivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameterivSGIX);
+}
+
+/* Get GL_SGIX_list_priority functions */
+GdkGL_GL_SGIX_list_priority *
+gdk_gl_get_GL_SGIX_list_priority (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_list_priority");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetListParameterfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glGetListParameterivSGIX () != NULL);
+          supported &= (gdk_gl_get_glListParameterfSGIX () != NULL);
+          supported &= (gdk_gl_get_glListParameterfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glListParameteriSGIX () != NULL);
+          supported &= (gdk_gl_get_glListParameterivSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_list_priority () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_list_priority;
+}
+
+/*
+ * GL_EXT_index_material
+ */
+
+static GdkGL_GL_EXT_index_material _procs_GL_EXT_index_material = {
+  (GdkGLProc_glIndexMaterialEXT) -1
+};
+
+/* glIndexMaterialEXT */
+GdkGLProc
+gdk_gl_get_glIndexMaterialEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_index_material.glIndexMaterialEXT == (GdkGLProc_glIndexMaterialEXT) -1)
+    _procs_GL_EXT_index_material.glIndexMaterialEXT =
+      (GdkGLProc_glIndexMaterialEXT) gdk_gl_get_proc_address ("glIndexMaterialEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIndexMaterialEXT () - %s",
+               (_procs_GL_EXT_index_material.glIndexMaterialEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_index_material.glIndexMaterialEXT);
+}
+
+/* Get GL_EXT_index_material functions */
+GdkGL_GL_EXT_index_material *
+gdk_gl_get_GL_EXT_index_material (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_index_material");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glIndexMaterialEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_index_material () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_index_material;
+}
+
+/*
+ * GL_EXT_index_func
+ */
+
+static GdkGL_GL_EXT_index_func _procs_GL_EXT_index_func = {
+  (GdkGLProc_glIndexFuncEXT) -1
+};
+
+/* glIndexFuncEXT */
+GdkGLProc
+gdk_gl_get_glIndexFuncEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_index_func.glIndexFuncEXT == (GdkGLProc_glIndexFuncEXT) -1)
+    _procs_GL_EXT_index_func.glIndexFuncEXT =
+      (GdkGLProc_glIndexFuncEXT) gdk_gl_get_proc_address ("glIndexFuncEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIndexFuncEXT () - %s",
+               (_procs_GL_EXT_index_func.glIndexFuncEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_index_func.glIndexFuncEXT);
+}
+
+/* Get GL_EXT_index_func functions */
+GdkGL_GL_EXT_index_func *
+gdk_gl_get_GL_EXT_index_func (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_index_func");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glIndexFuncEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_index_func () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_index_func;
+}
+
+/*
+ * GL_EXT_compiled_vertex_array
+ */
+
+static GdkGL_GL_EXT_compiled_vertex_array _procs_GL_EXT_compiled_vertex_array = {
+  (GdkGLProc_glLockArraysEXT) -1,
+  (GdkGLProc_glUnlockArraysEXT) -1
+};
+
+/* glLockArraysEXT */
+GdkGLProc
+gdk_gl_get_glLockArraysEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_compiled_vertex_array.glLockArraysEXT == (GdkGLProc_glLockArraysEXT) -1)
+    _procs_GL_EXT_compiled_vertex_array.glLockArraysEXT =
+      (GdkGLProc_glLockArraysEXT) gdk_gl_get_proc_address ("glLockArraysEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glLockArraysEXT () - %s",
+               (_procs_GL_EXT_compiled_vertex_array.glLockArraysEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_compiled_vertex_array.glLockArraysEXT);
+}
+
+/* glUnlockArraysEXT */
+GdkGLProc
+gdk_gl_get_glUnlockArraysEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT == (GdkGLProc_glUnlockArraysEXT) -1)
+    _procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT =
+      (GdkGLProc_glUnlockArraysEXT) gdk_gl_get_proc_address ("glUnlockArraysEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUnlockArraysEXT () - %s",
+               (_procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT);
+}
+
+/* Get GL_EXT_compiled_vertex_array functions */
+GdkGL_GL_EXT_compiled_vertex_array *
+gdk_gl_get_GL_EXT_compiled_vertex_array (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_compiled_vertex_array");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glLockArraysEXT () != NULL);
+          supported &= (gdk_gl_get_glUnlockArraysEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_compiled_vertex_array () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_compiled_vertex_array;
+}
+
+/*
+ * GL_EXT_cull_vertex
+ */
+
+static GdkGL_GL_EXT_cull_vertex _procs_GL_EXT_cull_vertex = {
+  (GdkGLProc_glCullParameterdvEXT) -1,
+  (GdkGLProc_glCullParameterfvEXT) -1
+};
+
+/* glCullParameterdvEXT */
+GdkGLProc
+gdk_gl_get_glCullParameterdvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_cull_vertex.glCullParameterdvEXT == (GdkGLProc_glCullParameterdvEXT) -1)
+    _procs_GL_EXT_cull_vertex.glCullParameterdvEXT =
+      (GdkGLProc_glCullParameterdvEXT) gdk_gl_get_proc_address ("glCullParameterdvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCullParameterdvEXT () - %s",
+               (_procs_GL_EXT_cull_vertex.glCullParameterdvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_cull_vertex.glCullParameterdvEXT);
+}
+
+/* glCullParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glCullParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_cull_vertex.glCullParameterfvEXT == (GdkGLProc_glCullParameterfvEXT) -1)
+    _procs_GL_EXT_cull_vertex.glCullParameterfvEXT =
+      (GdkGLProc_glCullParameterfvEXT) gdk_gl_get_proc_address ("glCullParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCullParameterfvEXT () - %s",
+               (_procs_GL_EXT_cull_vertex.glCullParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_cull_vertex.glCullParameterfvEXT);
+}
+
+/* Get GL_EXT_cull_vertex functions */
+GdkGL_GL_EXT_cull_vertex *
+gdk_gl_get_GL_EXT_cull_vertex (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_cull_vertex");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glCullParameterdvEXT () != NULL);
+          supported &= (gdk_gl_get_glCullParameterfvEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_cull_vertex () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_cull_vertex;
+}
+
+/*
+ * GL_SGIX_fragment_lighting
+ */
+
+static GdkGL_GL_SGIX_fragment_lighting _procs_GL_SGIX_fragment_lighting = {
+  (GdkGLProc_glFragmentColorMaterialSGIX) -1,
+  (GdkGLProc_glFragmentLightfSGIX) -1,
+  (GdkGLProc_glFragmentLightfvSGIX) -1,
+  (GdkGLProc_glFragmentLightiSGIX) -1,
+  (GdkGLProc_glFragmentLightivSGIX) -1,
+  (GdkGLProc_glFragmentLightModelfSGIX) -1,
+  (GdkGLProc_glFragmentLightModelfvSGIX) -1,
+  (GdkGLProc_glFragmentLightModeliSGIX) -1,
+  (GdkGLProc_glFragmentLightModelivSGIX) -1,
+  (GdkGLProc_glFragmentMaterialfSGIX) -1,
+  (GdkGLProc_glFragmentMaterialfvSGIX) -1,
+  (GdkGLProc_glFragmentMaterialiSGIX) -1,
+  (GdkGLProc_glFragmentMaterialivSGIX) -1,
+  (GdkGLProc_glGetFragmentLightfvSGIX) -1,
+  (GdkGLProc_glGetFragmentLightivSGIX) -1,
+  (GdkGLProc_glGetFragmentMaterialfvSGIX) -1,
+  (GdkGLProc_glGetFragmentMaterialivSGIX) -1,
+  (GdkGLProc_glLightEnviSGIX) -1
+};
+
+/* glFragmentColorMaterialSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentColorMaterialSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX == (GdkGLProc_glFragmentColorMaterialSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX =
+      (GdkGLProc_glFragmentColorMaterialSGIX) gdk_gl_get_proc_address ("glFragmentColorMaterialSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentColorMaterialSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX);
+}
+
+/* glFragmentLightfSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightfSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX == (GdkGLProc_glFragmentLightfSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX =
+      (GdkGLProc_glFragmentLightfSGIX) gdk_gl_get_proc_address ("glFragmentLightfSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightfSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX);
+}
+
+/* glFragmentLightfvSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX == (GdkGLProc_glFragmentLightfvSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX =
+      (GdkGLProc_glFragmentLightfvSGIX) gdk_gl_get_proc_address ("glFragmentLightfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightfvSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX);
+}
+
+/* glFragmentLightiSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightiSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX == (GdkGLProc_glFragmentLightiSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX =
+      (GdkGLProc_glFragmentLightiSGIX) gdk_gl_get_proc_address ("glFragmentLightiSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightiSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX);
+}
+
+/* glFragmentLightivSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX == (GdkGLProc_glFragmentLightivSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX =
+      (GdkGLProc_glFragmentLightivSGIX) gdk_gl_get_proc_address ("glFragmentLightivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightivSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX);
+}
+
+/* glFragmentLightModelfSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightModelfSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX == (GdkGLProc_glFragmentLightModelfSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX =
+      (GdkGLProc_glFragmentLightModelfSGIX) gdk_gl_get_proc_address ("glFragmentLightModelfSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightModelfSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX);
+}
+
+/* glFragmentLightModelfvSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightModelfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX == (GdkGLProc_glFragmentLightModelfvSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX =
+      (GdkGLProc_glFragmentLightModelfvSGIX) gdk_gl_get_proc_address ("glFragmentLightModelfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightModelfvSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX);
+}
+
+/* glFragmentLightModeliSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightModeliSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX == (GdkGLProc_glFragmentLightModeliSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX =
+      (GdkGLProc_glFragmentLightModeliSGIX) gdk_gl_get_proc_address ("glFragmentLightModeliSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightModeliSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX);
+}
+
+/* glFragmentLightModelivSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentLightModelivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX == (GdkGLProc_glFragmentLightModelivSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX =
+      (GdkGLProc_glFragmentLightModelivSGIX) gdk_gl_get_proc_address ("glFragmentLightModelivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentLightModelivSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX);
+}
+
+/* glFragmentMaterialfSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentMaterialfSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX == (GdkGLProc_glFragmentMaterialfSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX =
+      (GdkGLProc_glFragmentMaterialfSGIX) gdk_gl_get_proc_address ("glFragmentMaterialfSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentMaterialfSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX);
+}
+
+/* glFragmentMaterialfvSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentMaterialfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX == (GdkGLProc_glFragmentMaterialfvSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX =
+      (GdkGLProc_glFragmentMaterialfvSGIX) gdk_gl_get_proc_address ("glFragmentMaterialfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentMaterialfvSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX);
+}
+
+/* glFragmentMaterialiSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentMaterialiSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX == (GdkGLProc_glFragmentMaterialiSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX =
+      (GdkGLProc_glFragmentMaterialiSGIX) gdk_gl_get_proc_address ("glFragmentMaterialiSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentMaterialiSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX);
+}
+
+/* glFragmentMaterialivSGIX */
+GdkGLProc
+gdk_gl_get_glFragmentMaterialivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX == (GdkGLProc_glFragmentMaterialivSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX =
+      (GdkGLProc_glFragmentMaterialivSGIX) gdk_gl_get_proc_address ("glFragmentMaterialivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFragmentMaterialivSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX);
+}
+
+/* glGetFragmentLightfvSGIX */
+GdkGLProc
+gdk_gl_get_glGetFragmentLightfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX == (GdkGLProc_glGetFragmentLightfvSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX =
+      (GdkGLProc_glGetFragmentLightfvSGIX) gdk_gl_get_proc_address ("glGetFragmentLightfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFragmentLightfvSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX);
+}
+
+/* glGetFragmentLightivSGIX */
+GdkGLProc
+gdk_gl_get_glGetFragmentLightivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX == (GdkGLProc_glGetFragmentLightivSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX =
+      (GdkGLProc_glGetFragmentLightivSGIX) gdk_gl_get_proc_address ("glGetFragmentLightivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFragmentLightivSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX);
+}
+
+/* glGetFragmentMaterialfvSGIX */
+GdkGLProc
+gdk_gl_get_glGetFragmentMaterialfvSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX == (GdkGLProc_glGetFragmentMaterialfvSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX =
+      (GdkGLProc_glGetFragmentMaterialfvSGIX) gdk_gl_get_proc_address ("glGetFragmentMaterialfvSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFragmentMaterialfvSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX);
+}
+
+/* glGetFragmentMaterialivSGIX */
+GdkGLProc
+gdk_gl_get_glGetFragmentMaterialivSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX == (GdkGLProc_glGetFragmentMaterialivSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX =
+      (GdkGLProc_glGetFragmentMaterialivSGIX) gdk_gl_get_proc_address ("glGetFragmentMaterialivSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFragmentMaterialivSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX);
+}
+
+/* glLightEnviSGIX */
+GdkGLProc
+gdk_gl_get_glLightEnviSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_fragment_lighting.glLightEnviSGIX == (GdkGLProc_glLightEnviSGIX) -1)
+    _procs_GL_SGIX_fragment_lighting.glLightEnviSGIX =
+      (GdkGLProc_glLightEnviSGIX) gdk_gl_get_proc_address ("glLightEnviSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glLightEnviSGIX () - %s",
+               (_procs_GL_SGIX_fragment_lighting.glLightEnviSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glLightEnviSGIX);
+}
+
+/* Get GL_SGIX_fragment_lighting functions */
+GdkGL_GL_SGIX_fragment_lighting *
+gdk_gl_get_GL_SGIX_fragment_lighting (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_fragment_lighting");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFragmentColorMaterialSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightfSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightiSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightivSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightModelfSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightModelfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightModeliSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentLightModelivSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentMaterialfSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentMaterialfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentMaterialiSGIX () != NULL);
+          supported &= (gdk_gl_get_glFragmentMaterialivSGIX () != NULL);
+          supported &= (gdk_gl_get_glGetFragmentLightfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glGetFragmentLightivSGIX () != NULL);
+          supported &= (gdk_gl_get_glGetFragmentMaterialfvSGIX () != NULL);
+          supported &= (gdk_gl_get_glGetFragmentMaterialivSGIX () != NULL);
+          supported &= (gdk_gl_get_glLightEnviSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_fragment_lighting () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_fragment_lighting;
+}
+
+/*
+ * GL_EXT_draw_range_elements
+ */
+
+static GdkGL_GL_EXT_draw_range_elements _procs_GL_EXT_draw_range_elements = {
+  (GdkGLProc_glDrawRangeElementsEXT) -1
+};
+
+/* glDrawRangeElementsEXT */
+GdkGLProc
+gdk_gl_get_glDrawRangeElementsEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT == (GdkGLProc_glDrawRangeElementsEXT) -1)
+    _procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT =
+      (GdkGLProc_glDrawRangeElementsEXT) gdk_gl_get_proc_address ("glDrawRangeElementsEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDrawRangeElementsEXT () - %s",
+               (_procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT);
+}
+
+/* Get GL_EXT_draw_range_elements functions */
+GdkGL_GL_EXT_draw_range_elements *
+gdk_gl_get_GL_EXT_draw_range_elements (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_draw_range_elements");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDrawRangeElementsEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_draw_range_elements () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_draw_range_elements;
+}
+
+/*
+ * GL_EXT_light_texture
+ */
+
+static GdkGL_GL_EXT_light_texture _procs_GL_EXT_light_texture = {
+  (GdkGLProc_glApplyTextureEXT) -1,
+  (GdkGLProc_glTextureLightEXT) -1,
+  (GdkGLProc_glTextureMaterialEXT) -1
+};
+
+/* glApplyTextureEXT */
+GdkGLProc
+gdk_gl_get_glApplyTextureEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_light_texture.glApplyTextureEXT == (GdkGLProc_glApplyTextureEXT) -1)
+    _procs_GL_EXT_light_texture.glApplyTextureEXT =
+      (GdkGLProc_glApplyTextureEXT) gdk_gl_get_proc_address ("glApplyTextureEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glApplyTextureEXT () - %s",
+               (_procs_GL_EXT_light_texture.glApplyTextureEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_light_texture.glApplyTextureEXT);
+}
+
+/* glTextureLightEXT */
+GdkGLProc
+gdk_gl_get_glTextureLightEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_light_texture.glTextureLightEXT == (GdkGLProc_glTextureLightEXT) -1)
+    _procs_GL_EXT_light_texture.glTextureLightEXT =
+      (GdkGLProc_glTextureLightEXT) gdk_gl_get_proc_address ("glTextureLightEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTextureLightEXT () - %s",
+               (_procs_GL_EXT_light_texture.glTextureLightEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_light_texture.glTextureLightEXT);
+}
+
+/* glTextureMaterialEXT */
+GdkGLProc
+gdk_gl_get_glTextureMaterialEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_light_texture.glTextureMaterialEXT == (GdkGLProc_glTextureMaterialEXT) -1)
+    _procs_GL_EXT_light_texture.glTextureMaterialEXT =
+      (GdkGLProc_glTextureMaterialEXT) gdk_gl_get_proc_address ("glTextureMaterialEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTextureMaterialEXT () - %s",
+               (_procs_GL_EXT_light_texture.glTextureMaterialEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_light_texture.glTextureMaterialEXT);
+}
+
+/* Get GL_EXT_light_texture functions */
+GdkGL_GL_EXT_light_texture *
+gdk_gl_get_GL_EXT_light_texture (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_light_texture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glApplyTextureEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureLightEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureMaterialEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_light_texture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_light_texture;
+}
+
+/*
+ * GL_SGIX_async
+ */
+
+static GdkGL_GL_SGIX_async _procs_GL_SGIX_async = {
+  (GdkGLProc_glAsyncMarkerSGIX) -1,
+  (GdkGLProc_glFinishAsyncSGIX) -1,
+  (GdkGLProc_glPollAsyncSGIX) -1,
+  (GdkGLProc_glGenAsyncMarkersSGIX) -1,
+  (GdkGLProc_glDeleteAsyncMarkersSGIX) -1,
+  (GdkGLProc_glIsAsyncMarkerSGIX) -1
+};
+
+/* glAsyncMarkerSGIX */
+GdkGLProc
+gdk_gl_get_glAsyncMarkerSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_async.glAsyncMarkerSGIX == (GdkGLProc_glAsyncMarkerSGIX) -1)
+    _procs_GL_SGIX_async.glAsyncMarkerSGIX =
+      (GdkGLProc_glAsyncMarkerSGIX) gdk_gl_get_proc_address ("glAsyncMarkerSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glAsyncMarkerSGIX () - %s",
+               (_procs_GL_SGIX_async.glAsyncMarkerSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_async.glAsyncMarkerSGIX);
+}
+
+/* glFinishAsyncSGIX */
+GdkGLProc
+gdk_gl_get_glFinishAsyncSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_async.glFinishAsyncSGIX == (GdkGLProc_glFinishAsyncSGIX) -1)
+    _procs_GL_SGIX_async.glFinishAsyncSGIX =
+      (GdkGLProc_glFinishAsyncSGIX) gdk_gl_get_proc_address ("glFinishAsyncSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFinishAsyncSGIX () - %s",
+               (_procs_GL_SGIX_async.glFinishAsyncSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_async.glFinishAsyncSGIX);
+}
+
+/* glPollAsyncSGIX */
+GdkGLProc
+gdk_gl_get_glPollAsyncSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_async.glPollAsyncSGIX == (GdkGLProc_glPollAsyncSGIX) -1)
+    _procs_GL_SGIX_async.glPollAsyncSGIX =
+      (GdkGLProc_glPollAsyncSGIX) gdk_gl_get_proc_address ("glPollAsyncSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPollAsyncSGIX () - %s",
+               (_procs_GL_SGIX_async.glPollAsyncSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_async.glPollAsyncSGIX);
+}
+
+/* glGenAsyncMarkersSGIX */
+GdkGLProc
+gdk_gl_get_glGenAsyncMarkersSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_async.glGenAsyncMarkersSGIX == (GdkGLProc_glGenAsyncMarkersSGIX) -1)
+    _procs_GL_SGIX_async.glGenAsyncMarkersSGIX =
+      (GdkGLProc_glGenAsyncMarkersSGIX) gdk_gl_get_proc_address ("glGenAsyncMarkersSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenAsyncMarkersSGIX () - %s",
+               (_procs_GL_SGIX_async.glGenAsyncMarkersSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_async.glGenAsyncMarkersSGIX);
+}
+
+/* glDeleteAsyncMarkersSGIX */
+GdkGLProc
+gdk_gl_get_glDeleteAsyncMarkersSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX == (GdkGLProc_glDeleteAsyncMarkersSGIX) -1)
+    _procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX =
+      (GdkGLProc_glDeleteAsyncMarkersSGIX) gdk_gl_get_proc_address ("glDeleteAsyncMarkersSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteAsyncMarkersSGIX () - %s",
+               (_procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX);
+}
+
+/* glIsAsyncMarkerSGIX */
+GdkGLProc
+gdk_gl_get_glIsAsyncMarkerSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_async.glIsAsyncMarkerSGIX == (GdkGLProc_glIsAsyncMarkerSGIX) -1)
+    _procs_GL_SGIX_async.glIsAsyncMarkerSGIX =
+      (GdkGLProc_glIsAsyncMarkerSGIX) gdk_gl_get_proc_address ("glIsAsyncMarkerSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsAsyncMarkerSGIX () - %s",
+               (_procs_GL_SGIX_async.glIsAsyncMarkerSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_async.glIsAsyncMarkerSGIX);
+}
+
+/* Get GL_SGIX_async functions */
+GdkGL_GL_SGIX_async *
+gdk_gl_get_GL_SGIX_async (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_async");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glAsyncMarkerSGIX () != NULL);
+          supported &= (gdk_gl_get_glFinishAsyncSGIX () != NULL);
+          supported &= (gdk_gl_get_glPollAsyncSGIX () != NULL);
+          supported &= (gdk_gl_get_glGenAsyncMarkersSGIX () != NULL);
+          supported &= (gdk_gl_get_glDeleteAsyncMarkersSGIX () != NULL);
+          supported &= (gdk_gl_get_glIsAsyncMarkerSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_async () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_async;
+}
+
+/*
+ * GL_INTEL_parallel_arrays
+ */
+
+static GdkGL_GL_INTEL_parallel_arrays _procs_GL_INTEL_parallel_arrays = {
+  (GdkGLProc_glVertexPointervINTEL) -1,
+  (GdkGLProc_glNormalPointervINTEL) -1,
+  (GdkGLProc_glColorPointervINTEL) -1,
+  (GdkGLProc_glTexCoordPointervINTEL) -1
+};
+
+/* glVertexPointervINTEL */
+GdkGLProc
+gdk_gl_get_glVertexPointervINTEL (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL == (GdkGLProc_glVertexPointervINTEL) -1)
+    _procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL =
+      (GdkGLProc_glVertexPointervINTEL) gdk_gl_get_proc_address ("glVertexPointervINTEL");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexPointervINTEL () - %s",
+               (_procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL);
+}
+
+/* glNormalPointervINTEL */
+GdkGLProc
+gdk_gl_get_glNormalPointervINTEL (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL == (GdkGLProc_glNormalPointervINTEL) -1)
+    _procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL =
+      (GdkGLProc_glNormalPointervINTEL) gdk_gl_get_proc_address ("glNormalPointervINTEL");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNormalPointervINTEL () - %s",
+               (_procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL);
+}
+
+/* glColorPointervINTEL */
+GdkGLProc
+gdk_gl_get_glColorPointervINTEL (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_INTEL_parallel_arrays.glColorPointervINTEL == (GdkGLProc_glColorPointervINTEL) -1)
+    _procs_GL_INTEL_parallel_arrays.glColorPointervINTEL =
+      (GdkGLProc_glColorPointervINTEL) gdk_gl_get_proc_address ("glColorPointervINTEL");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorPointervINTEL () - %s",
+               (_procs_GL_INTEL_parallel_arrays.glColorPointervINTEL) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glColorPointervINTEL);
+}
+
+/* glTexCoordPointervINTEL */
+GdkGLProc
+gdk_gl_get_glTexCoordPointervINTEL (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL == (GdkGLProc_glTexCoordPointervINTEL) -1)
+    _procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL =
+      (GdkGLProc_glTexCoordPointervINTEL) gdk_gl_get_proc_address ("glTexCoordPointervINTEL");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoordPointervINTEL () - %s",
+               (_procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL);
+}
+
+/* Get GL_INTEL_parallel_arrays functions */
+GdkGL_GL_INTEL_parallel_arrays *
+gdk_gl_get_GL_INTEL_parallel_arrays (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_INTEL_parallel_arrays");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glVertexPointervINTEL () != NULL);
+          supported &= (gdk_gl_get_glNormalPointervINTEL () != NULL);
+          supported &= (gdk_gl_get_glColorPointervINTEL () != NULL);
+          supported &= (gdk_gl_get_glTexCoordPointervINTEL () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_INTEL_parallel_arrays () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_INTEL_parallel_arrays;
+}
+
+/*
+ * GL_EXT_pixel_transform
+ */
+
+static GdkGL_GL_EXT_pixel_transform _procs_GL_EXT_pixel_transform = {
+  (GdkGLProc_glPixelTransformParameteriEXT) -1,
+  (GdkGLProc_glPixelTransformParameterfEXT) -1,
+  (GdkGLProc_glPixelTransformParameterivEXT) -1,
+  (GdkGLProc_glPixelTransformParameterfvEXT) -1
+};
+
+/* glPixelTransformParameteriEXT */
+GdkGLProc
+gdk_gl_get_glPixelTransformParameteriEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT == (GdkGLProc_glPixelTransformParameteriEXT) -1)
+    _procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT =
+      (GdkGLProc_glPixelTransformParameteriEXT) gdk_gl_get_proc_address ("glPixelTransformParameteriEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTransformParameteriEXT () - %s",
+               (_procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT);
+}
+
+/* glPixelTransformParameterfEXT */
+GdkGLProc
+gdk_gl_get_glPixelTransformParameterfEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT == (GdkGLProc_glPixelTransformParameterfEXT) -1)
+    _procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT =
+      (GdkGLProc_glPixelTransformParameterfEXT) gdk_gl_get_proc_address ("glPixelTransformParameterfEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTransformParameterfEXT () - %s",
+               (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT);
+}
+
+/* glPixelTransformParameterivEXT */
+GdkGLProc
+gdk_gl_get_glPixelTransformParameterivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT == (GdkGLProc_glPixelTransformParameterivEXT) -1)
+    _procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT =
+      (GdkGLProc_glPixelTransformParameterivEXT) gdk_gl_get_proc_address ("glPixelTransformParameterivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTransformParameterivEXT () - %s",
+               (_procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT);
+}
+
+/* glPixelTransformParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glPixelTransformParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT == (GdkGLProc_glPixelTransformParameterfvEXT) -1)
+    _procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT =
+      (GdkGLProc_glPixelTransformParameterfvEXT) gdk_gl_get_proc_address ("glPixelTransformParameterfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPixelTransformParameterfvEXT () - %s",
+               (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT);
+}
+
+/* Get GL_EXT_pixel_transform functions */
+GdkGL_GL_EXT_pixel_transform *
+gdk_gl_get_GL_EXT_pixel_transform (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_pixel_transform");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPixelTransformParameteriEXT () != NULL);
+          supported &= (gdk_gl_get_glPixelTransformParameterfEXT () != NULL);
+          supported &= (gdk_gl_get_glPixelTransformParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glPixelTransformParameterfvEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_pixel_transform () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_pixel_transform;
+}
+
+/*
+ * GL_EXT_secondary_color
+ */
+
+static GdkGL_GL_EXT_secondary_color _procs_GL_EXT_secondary_color = {
+  (GdkGLProc_glSecondaryColor3bEXT) -1,
+  (GdkGLProc_glSecondaryColor3bvEXT) -1,
+  (GdkGLProc_glSecondaryColor3dEXT) -1,
+  (GdkGLProc_glSecondaryColor3dvEXT) -1,
+  (GdkGLProc_glSecondaryColor3fEXT) -1,
+  (GdkGLProc_glSecondaryColor3fvEXT) -1,
+  (GdkGLProc_glSecondaryColor3iEXT) -1,
+  (GdkGLProc_glSecondaryColor3ivEXT) -1,
+  (GdkGLProc_glSecondaryColor3sEXT) -1,
+  (GdkGLProc_glSecondaryColor3svEXT) -1,
+  (GdkGLProc_glSecondaryColor3ubEXT) -1,
+  (GdkGLProc_glSecondaryColor3ubvEXT) -1,
+  (GdkGLProc_glSecondaryColor3uiEXT) -1,
+  (GdkGLProc_glSecondaryColor3uivEXT) -1,
+  (GdkGLProc_glSecondaryColor3usEXT) -1,
+  (GdkGLProc_glSecondaryColor3usvEXT) -1,
+  (GdkGLProc_glSecondaryColorPointerEXT) -1
+};
+
+/* glSecondaryColor3bEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3bEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3bEXT == (GdkGLProc_glSecondaryColor3bEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3bEXT =
+      (GdkGLProc_glSecondaryColor3bEXT) gdk_gl_get_proc_address ("glSecondaryColor3bEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3bEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3bEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3bEXT);
+}
+
+/* glSecondaryColor3bvEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3bvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT == (GdkGLProc_glSecondaryColor3bvEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT =
+      (GdkGLProc_glSecondaryColor3bvEXT) gdk_gl_get_proc_address ("glSecondaryColor3bvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3bvEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT);
+}
+
+/* glSecondaryColor3dEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3dEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3dEXT == (GdkGLProc_glSecondaryColor3dEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3dEXT =
+      (GdkGLProc_glSecondaryColor3dEXT) gdk_gl_get_proc_address ("glSecondaryColor3dEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3dEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3dEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3dEXT);
+}
+
+/* glSecondaryColor3dvEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3dvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT == (GdkGLProc_glSecondaryColor3dvEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT =
+      (GdkGLProc_glSecondaryColor3dvEXT) gdk_gl_get_proc_address ("glSecondaryColor3dvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3dvEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT);
+}
+
+/* glSecondaryColor3fEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3fEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3fEXT == (GdkGLProc_glSecondaryColor3fEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3fEXT =
+      (GdkGLProc_glSecondaryColor3fEXT) gdk_gl_get_proc_address ("glSecondaryColor3fEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3fEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3fEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3fEXT);
+}
+
+/* glSecondaryColor3fvEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3fvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT == (GdkGLProc_glSecondaryColor3fvEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT =
+      (GdkGLProc_glSecondaryColor3fvEXT) gdk_gl_get_proc_address ("glSecondaryColor3fvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3fvEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT);
+}
+
+/* glSecondaryColor3iEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3iEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3iEXT == (GdkGLProc_glSecondaryColor3iEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3iEXT =
+      (GdkGLProc_glSecondaryColor3iEXT) gdk_gl_get_proc_address ("glSecondaryColor3iEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3iEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3iEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3iEXT);
+}
+
+/* glSecondaryColor3ivEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3ivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT == (GdkGLProc_glSecondaryColor3ivEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT =
+      (GdkGLProc_glSecondaryColor3ivEXT) gdk_gl_get_proc_address ("glSecondaryColor3ivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3ivEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT);
+}
+
+/* glSecondaryColor3sEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3sEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3sEXT == (GdkGLProc_glSecondaryColor3sEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3sEXT =
+      (GdkGLProc_glSecondaryColor3sEXT) gdk_gl_get_proc_address ("glSecondaryColor3sEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3sEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3sEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3sEXT);
+}
+
+/* glSecondaryColor3svEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3svEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3svEXT == (GdkGLProc_glSecondaryColor3svEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3svEXT =
+      (GdkGLProc_glSecondaryColor3svEXT) gdk_gl_get_proc_address ("glSecondaryColor3svEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3svEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3svEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3svEXT);
+}
+
+/* glSecondaryColor3ubEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3ubEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT == (GdkGLProc_glSecondaryColor3ubEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT =
+      (GdkGLProc_glSecondaryColor3ubEXT) gdk_gl_get_proc_address ("glSecondaryColor3ubEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3ubEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT);
+}
+
+/* glSecondaryColor3ubvEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3ubvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT == (GdkGLProc_glSecondaryColor3ubvEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT =
+      (GdkGLProc_glSecondaryColor3ubvEXT) gdk_gl_get_proc_address ("glSecondaryColor3ubvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3ubvEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT);
+}
+
+/* glSecondaryColor3uiEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3uiEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT == (GdkGLProc_glSecondaryColor3uiEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT =
+      (GdkGLProc_glSecondaryColor3uiEXT) gdk_gl_get_proc_address ("glSecondaryColor3uiEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3uiEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT);
+}
+
+/* glSecondaryColor3uivEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3uivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT == (GdkGLProc_glSecondaryColor3uivEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT =
+      (GdkGLProc_glSecondaryColor3uivEXT) gdk_gl_get_proc_address ("glSecondaryColor3uivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3uivEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT);
+}
+
+/* glSecondaryColor3usEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3usEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3usEXT == (GdkGLProc_glSecondaryColor3usEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3usEXT =
+      (GdkGLProc_glSecondaryColor3usEXT) gdk_gl_get_proc_address ("glSecondaryColor3usEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3usEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3usEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3usEXT);
+}
+
+/* glSecondaryColor3usvEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColor3usvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT == (GdkGLProc_glSecondaryColor3usvEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT =
+      (GdkGLProc_glSecondaryColor3usvEXT) gdk_gl_get_proc_address ("glSecondaryColor3usvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColor3usvEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT);
+}
+
+/* glSecondaryColorPointerEXT */
+GdkGLProc
+gdk_gl_get_glSecondaryColorPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT == (GdkGLProc_glSecondaryColorPointerEXT) -1)
+    _procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT =
+      (GdkGLProc_glSecondaryColorPointerEXT) gdk_gl_get_proc_address ("glSecondaryColorPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColorPointerEXT () - %s",
+               (_procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT);
+}
+
+/* Get GL_EXT_secondary_color functions */
+GdkGL_GL_EXT_secondary_color *
+gdk_gl_get_GL_EXT_secondary_color (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_secondary_color");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glSecondaryColor3bEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3bvEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3dEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3dvEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3fEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3fvEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3iEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3ivEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3sEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3svEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3ubEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3ubvEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3uiEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3uivEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3usEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3usvEXT () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColorPointerEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_secondary_color () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_secondary_color;
+}
+
+/*
+ * GL_EXT_texture_perturb_normal
+ */
+
+static GdkGL_GL_EXT_texture_perturb_normal _procs_GL_EXT_texture_perturb_normal = {
+  (GdkGLProc_glTextureNormalEXT) -1
+};
+
+/* glTextureNormalEXT */
+GdkGLProc
+gdk_gl_get_glTextureNormalEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT == (GdkGLProc_glTextureNormalEXT) -1)
+    _procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT =
+      (GdkGLProc_glTextureNormalEXT) gdk_gl_get_proc_address ("glTextureNormalEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTextureNormalEXT () - %s",
+               (_procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT);
+}
+
+/* Get GL_EXT_texture_perturb_normal functions */
+GdkGL_GL_EXT_texture_perturb_normal *
+gdk_gl_get_GL_EXT_texture_perturb_normal (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_texture_perturb_normal");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTextureNormalEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_texture_perturb_normal () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_texture_perturb_normal;
+}
+
+/*
+ * GL_EXT_multi_draw_arrays
+ */
+
+static GdkGL_GL_EXT_multi_draw_arrays _procs_GL_EXT_multi_draw_arrays = {
+  (GdkGLProc_glMultiDrawArraysEXT) -1,
+  (GdkGLProc_glMultiDrawElementsEXT) -1
+};
+
+/* glMultiDrawArraysEXT */
+GdkGLProc
+gdk_gl_get_glMultiDrawArraysEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT == (GdkGLProc_glMultiDrawArraysEXT) -1)
+    _procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT =
+      (GdkGLProc_glMultiDrawArraysEXT) gdk_gl_get_proc_address ("glMultiDrawArraysEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMultiDrawArraysEXT () - %s",
+               (_procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT);
+}
+
+/* glMultiDrawElementsEXT */
+GdkGLProc
+gdk_gl_get_glMultiDrawElementsEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT == (GdkGLProc_glMultiDrawElementsEXT) -1)
+    _procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT =
+      (GdkGLProc_glMultiDrawElementsEXT) gdk_gl_get_proc_address ("glMultiDrawElementsEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMultiDrawElementsEXT () - %s",
+               (_procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT);
+}
+
+/* Get GL_EXT_multi_draw_arrays functions */
+GdkGL_GL_EXT_multi_draw_arrays *
+gdk_gl_get_GL_EXT_multi_draw_arrays (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_multi_draw_arrays");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glMultiDrawArraysEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiDrawElementsEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_multi_draw_arrays () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_multi_draw_arrays;
+}
+
+/*
+ * GL_EXT_fog_coord
+ */
+
+static GdkGL_GL_EXT_fog_coord _procs_GL_EXT_fog_coord = {
+  (GdkGLProc_glFogCoordfEXT) -1,
+  (GdkGLProc_glFogCoordfvEXT) -1,
+  (GdkGLProc_glFogCoorddEXT) -1,
+  (GdkGLProc_glFogCoorddvEXT) -1,
+  (GdkGLProc_glFogCoordPointerEXT) -1
+};
+
+/* glFogCoordfEXT */
+GdkGLProc
+gdk_gl_get_glFogCoordfEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_fog_coord.glFogCoordfEXT == (GdkGLProc_glFogCoordfEXT) -1)
+    _procs_GL_EXT_fog_coord.glFogCoordfEXT =
+      (GdkGLProc_glFogCoordfEXT) gdk_gl_get_proc_address ("glFogCoordfEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordfEXT () - %s",
+               (_procs_GL_EXT_fog_coord.glFogCoordfEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoordfEXT);
+}
+
+/* glFogCoordfvEXT */
+GdkGLProc
+gdk_gl_get_glFogCoordfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_fog_coord.glFogCoordfvEXT == (GdkGLProc_glFogCoordfvEXT) -1)
+    _procs_GL_EXT_fog_coord.glFogCoordfvEXT =
+      (GdkGLProc_glFogCoordfvEXT) gdk_gl_get_proc_address ("glFogCoordfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordfvEXT () - %s",
+               (_procs_GL_EXT_fog_coord.glFogCoordfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoordfvEXT);
+}
+
+/* glFogCoorddEXT */
+GdkGLProc
+gdk_gl_get_glFogCoorddEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_fog_coord.glFogCoorddEXT == (GdkGLProc_glFogCoorddEXT) -1)
+    _procs_GL_EXT_fog_coord.glFogCoorddEXT =
+      (GdkGLProc_glFogCoorddEXT) gdk_gl_get_proc_address ("glFogCoorddEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoorddEXT () - %s",
+               (_procs_GL_EXT_fog_coord.glFogCoorddEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoorddEXT);
+}
+
+/* glFogCoorddvEXT */
+GdkGLProc
+gdk_gl_get_glFogCoorddvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_fog_coord.glFogCoorddvEXT == (GdkGLProc_glFogCoorddvEXT) -1)
+    _procs_GL_EXT_fog_coord.glFogCoorddvEXT =
+      (GdkGLProc_glFogCoorddvEXT) gdk_gl_get_proc_address ("glFogCoorddvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoorddvEXT () - %s",
+               (_procs_GL_EXT_fog_coord.glFogCoorddvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoorddvEXT);
+}
+
+/* glFogCoordPointerEXT */
+GdkGLProc
+gdk_gl_get_glFogCoordPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_fog_coord.glFogCoordPointerEXT == (GdkGLProc_glFogCoordPointerEXT) -1)
+    _procs_GL_EXT_fog_coord.glFogCoordPointerEXT =
+      (GdkGLProc_glFogCoordPointerEXT) gdk_gl_get_proc_address ("glFogCoordPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordPointerEXT () - %s",
+               (_procs_GL_EXT_fog_coord.glFogCoordPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoordPointerEXT);
+}
+
+/* Get GL_EXT_fog_coord functions */
+GdkGL_GL_EXT_fog_coord *
+gdk_gl_get_GL_EXT_fog_coord (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_fog_coord");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFogCoordfEXT () != NULL);
+          supported &= (gdk_gl_get_glFogCoordfvEXT () != NULL);
+          supported &= (gdk_gl_get_glFogCoorddEXT () != NULL);
+          supported &= (gdk_gl_get_glFogCoorddvEXT () != NULL);
+          supported &= (gdk_gl_get_glFogCoordPointerEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_fog_coord () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_fog_coord;
+}
+
+/*
+ * GL_EXT_coordinate_frame
+ */
+
+static GdkGL_GL_EXT_coordinate_frame _procs_GL_EXT_coordinate_frame = {
+  (GdkGLProc_glTangent3bEXT) -1,
+  (GdkGLProc_glTangent3bvEXT) -1,
+  (GdkGLProc_glTangent3dEXT) -1,
+  (GdkGLProc_glTangent3dvEXT) -1,
+  (GdkGLProc_glTangent3fEXT) -1,
+  (GdkGLProc_glTangent3fvEXT) -1,
+  (GdkGLProc_glTangent3iEXT) -1,
+  (GdkGLProc_glTangent3ivEXT) -1,
+  (GdkGLProc_glTangent3sEXT) -1,
+  (GdkGLProc_glTangent3svEXT) -1,
+  (GdkGLProc_glBinormal3bEXT) -1,
+  (GdkGLProc_glBinormal3bvEXT) -1,
+  (GdkGLProc_glBinormal3dEXT) -1,
+  (GdkGLProc_glBinormal3dvEXT) -1,
+  (GdkGLProc_glBinormal3fEXT) -1,
+  (GdkGLProc_glBinormal3fvEXT) -1,
+  (GdkGLProc_glBinormal3iEXT) -1,
+  (GdkGLProc_glBinormal3ivEXT) -1,
+  (GdkGLProc_glBinormal3sEXT) -1,
+  (GdkGLProc_glBinormal3svEXT) -1,
+  (GdkGLProc_glTangentPointerEXT) -1,
+  (GdkGLProc_glBinormalPointerEXT) -1
+};
+
+/* glTangent3bEXT */
+GdkGLProc
+gdk_gl_get_glTangent3bEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3bEXT == (GdkGLProc_glTangent3bEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3bEXT =
+      (GdkGLProc_glTangent3bEXT) gdk_gl_get_proc_address ("glTangent3bEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3bEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3bEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3bEXT);
+}
+
+/* glTangent3bvEXT */
+GdkGLProc
+gdk_gl_get_glTangent3bvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3bvEXT == (GdkGLProc_glTangent3bvEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3bvEXT =
+      (GdkGLProc_glTangent3bvEXT) gdk_gl_get_proc_address ("glTangent3bvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3bvEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3bvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3bvEXT);
+}
+
+/* glTangent3dEXT */
+GdkGLProc
+gdk_gl_get_glTangent3dEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3dEXT == (GdkGLProc_glTangent3dEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3dEXT =
+      (GdkGLProc_glTangent3dEXT) gdk_gl_get_proc_address ("glTangent3dEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3dEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3dEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3dEXT);
+}
+
+/* glTangent3dvEXT */
+GdkGLProc
+gdk_gl_get_glTangent3dvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3dvEXT == (GdkGLProc_glTangent3dvEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3dvEXT =
+      (GdkGLProc_glTangent3dvEXT) gdk_gl_get_proc_address ("glTangent3dvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3dvEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3dvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3dvEXT);
+}
+
+/* glTangent3fEXT */
+GdkGLProc
+gdk_gl_get_glTangent3fEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3fEXT == (GdkGLProc_glTangent3fEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3fEXT =
+      (GdkGLProc_glTangent3fEXT) gdk_gl_get_proc_address ("glTangent3fEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3fEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3fEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3fEXT);
+}
+
+/* glTangent3fvEXT */
+GdkGLProc
+gdk_gl_get_glTangent3fvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3fvEXT == (GdkGLProc_glTangent3fvEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3fvEXT =
+      (GdkGLProc_glTangent3fvEXT) gdk_gl_get_proc_address ("glTangent3fvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3fvEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3fvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3fvEXT);
+}
+
+/* glTangent3iEXT */
+GdkGLProc
+gdk_gl_get_glTangent3iEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3iEXT == (GdkGLProc_glTangent3iEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3iEXT =
+      (GdkGLProc_glTangent3iEXT) gdk_gl_get_proc_address ("glTangent3iEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3iEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3iEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3iEXT);
+}
+
+/* glTangent3ivEXT */
+GdkGLProc
+gdk_gl_get_glTangent3ivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3ivEXT == (GdkGLProc_glTangent3ivEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3ivEXT =
+      (GdkGLProc_glTangent3ivEXT) gdk_gl_get_proc_address ("glTangent3ivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3ivEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3ivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3ivEXT);
+}
+
+/* glTangent3sEXT */
+GdkGLProc
+gdk_gl_get_glTangent3sEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3sEXT == (GdkGLProc_glTangent3sEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3sEXT =
+      (GdkGLProc_glTangent3sEXT) gdk_gl_get_proc_address ("glTangent3sEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3sEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3sEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3sEXT);
+}
+
+/* glTangent3svEXT */
+GdkGLProc
+gdk_gl_get_glTangent3svEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangent3svEXT == (GdkGLProc_glTangent3svEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangent3svEXT =
+      (GdkGLProc_glTangent3svEXT) gdk_gl_get_proc_address ("glTangent3svEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangent3svEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangent3svEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3svEXT);
+}
+
+/* glBinormal3bEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3bEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3bEXT == (GdkGLProc_glBinormal3bEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3bEXT =
+      (GdkGLProc_glBinormal3bEXT) gdk_gl_get_proc_address ("glBinormal3bEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3bEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3bEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3bEXT);
+}
+
+/* glBinormal3bvEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3bvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3bvEXT == (GdkGLProc_glBinormal3bvEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3bvEXT =
+      (GdkGLProc_glBinormal3bvEXT) gdk_gl_get_proc_address ("glBinormal3bvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3bvEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3bvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3bvEXT);
+}
+
+/* glBinormal3dEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3dEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3dEXT == (GdkGLProc_glBinormal3dEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3dEXT =
+      (GdkGLProc_glBinormal3dEXT) gdk_gl_get_proc_address ("glBinormal3dEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3dEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3dEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3dEXT);
+}
+
+/* glBinormal3dvEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3dvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3dvEXT == (GdkGLProc_glBinormal3dvEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3dvEXT =
+      (GdkGLProc_glBinormal3dvEXT) gdk_gl_get_proc_address ("glBinormal3dvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3dvEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3dvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3dvEXT);
+}
+
+/* glBinormal3fEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3fEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3fEXT == (GdkGLProc_glBinormal3fEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3fEXT =
+      (GdkGLProc_glBinormal3fEXT) gdk_gl_get_proc_address ("glBinormal3fEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3fEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3fEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3fEXT);
+}
+
+/* glBinormal3fvEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3fvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3fvEXT == (GdkGLProc_glBinormal3fvEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3fvEXT =
+      (GdkGLProc_glBinormal3fvEXT) gdk_gl_get_proc_address ("glBinormal3fvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3fvEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3fvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3fvEXT);
+}
+
+/* glBinormal3iEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3iEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3iEXT == (GdkGLProc_glBinormal3iEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3iEXT =
+      (GdkGLProc_glBinormal3iEXT) gdk_gl_get_proc_address ("glBinormal3iEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3iEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3iEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3iEXT);
+}
+
+/* glBinormal3ivEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3ivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3ivEXT == (GdkGLProc_glBinormal3ivEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3ivEXT =
+      (GdkGLProc_glBinormal3ivEXT) gdk_gl_get_proc_address ("glBinormal3ivEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3ivEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3ivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3ivEXT);
+}
+
+/* glBinormal3sEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3sEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3sEXT == (GdkGLProc_glBinormal3sEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3sEXT =
+      (GdkGLProc_glBinormal3sEXT) gdk_gl_get_proc_address ("glBinormal3sEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3sEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3sEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3sEXT);
+}
+
+/* glBinormal3svEXT */
+GdkGLProc
+gdk_gl_get_glBinormal3svEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormal3svEXT == (GdkGLProc_glBinormal3svEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormal3svEXT =
+      (GdkGLProc_glBinormal3svEXT) gdk_gl_get_proc_address ("glBinormal3svEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormal3svEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormal3svEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3svEXT);
+}
+
+/* glTangentPointerEXT */
+GdkGLProc
+gdk_gl_get_glTangentPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glTangentPointerEXT == (GdkGLProc_glTangentPointerEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glTangentPointerEXT =
+      (GdkGLProc_glTangentPointerEXT) gdk_gl_get_proc_address ("glTangentPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTangentPointerEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glTangentPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangentPointerEXT);
+}
+
+/* glBinormalPointerEXT */
+GdkGLProc
+gdk_gl_get_glBinormalPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_coordinate_frame.glBinormalPointerEXT == (GdkGLProc_glBinormalPointerEXT) -1)
+    _procs_GL_EXT_coordinate_frame.glBinormalPointerEXT =
+      (GdkGLProc_glBinormalPointerEXT) gdk_gl_get_proc_address ("glBinormalPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBinormalPointerEXT () - %s",
+               (_procs_GL_EXT_coordinate_frame.glBinormalPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormalPointerEXT);
+}
+
+/* Get GL_EXT_coordinate_frame functions */
+GdkGL_GL_EXT_coordinate_frame *
+gdk_gl_get_GL_EXT_coordinate_frame (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_coordinate_frame");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTangent3bEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3bvEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3dEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3dvEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3fEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3fvEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3iEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3ivEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3sEXT () != NULL);
+          supported &= (gdk_gl_get_glTangent3svEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3bEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3bvEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3dEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3dvEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3fEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3fvEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3iEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3ivEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3sEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormal3svEXT () != NULL);
+          supported &= (gdk_gl_get_glTangentPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glBinormalPointerEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_coordinate_frame () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_coordinate_frame;
+}
+
+/*
+ * GL_SUNX_constant_data
+ */
+
+static GdkGL_GL_SUNX_constant_data _procs_GL_SUNX_constant_data = {
+  (GdkGLProc_glFinishTextureSUNX) -1
+};
+
+/* glFinishTextureSUNX */
+GdkGLProc
+gdk_gl_get_glFinishTextureSUNX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUNX_constant_data.glFinishTextureSUNX == (GdkGLProc_glFinishTextureSUNX) -1)
+    _procs_GL_SUNX_constant_data.glFinishTextureSUNX =
+      (GdkGLProc_glFinishTextureSUNX) gdk_gl_get_proc_address ("glFinishTextureSUNX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFinishTextureSUNX () - %s",
+               (_procs_GL_SUNX_constant_data.glFinishTextureSUNX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUNX_constant_data.glFinishTextureSUNX);
+}
+
+/* Get GL_SUNX_constant_data functions */
+GdkGL_GL_SUNX_constant_data *
+gdk_gl_get_GL_SUNX_constant_data (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SUNX_constant_data");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFinishTextureSUNX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SUNX_constant_data () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SUNX_constant_data;
+}
+
+/*
+ * GL_SUN_global_alpha
+ */
+
+static GdkGL_GL_SUN_global_alpha _procs_GL_SUN_global_alpha = {
+  (GdkGLProc_glGlobalAlphaFactorbSUN) -1,
+  (GdkGLProc_glGlobalAlphaFactorsSUN) -1,
+  (GdkGLProc_glGlobalAlphaFactoriSUN) -1,
+  (GdkGLProc_glGlobalAlphaFactorfSUN) -1,
+  (GdkGLProc_glGlobalAlphaFactordSUN) -1,
+  (GdkGLProc_glGlobalAlphaFactorubSUN) -1,
+  (GdkGLProc_glGlobalAlphaFactorusSUN) -1,
+  (GdkGLProc_glGlobalAlphaFactoruiSUN) -1
+};
+
+/* glGlobalAlphaFactorbSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactorbSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN == (GdkGLProc_glGlobalAlphaFactorbSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN =
+      (GdkGLProc_glGlobalAlphaFactorbSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorbSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactorbSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN);
+}
+
+/* glGlobalAlphaFactorsSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactorsSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN == (GdkGLProc_glGlobalAlphaFactorsSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN =
+      (GdkGLProc_glGlobalAlphaFactorsSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorsSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactorsSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN);
+}
+
+/* glGlobalAlphaFactoriSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactoriSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN == (GdkGLProc_glGlobalAlphaFactoriSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN =
+      (GdkGLProc_glGlobalAlphaFactoriSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactoriSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactoriSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN);
+}
+
+/* glGlobalAlphaFactorfSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactorfSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN == (GdkGLProc_glGlobalAlphaFactorfSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN =
+      (GdkGLProc_glGlobalAlphaFactorfSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorfSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactorfSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN);
+}
+
+/* glGlobalAlphaFactordSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactordSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN == (GdkGLProc_glGlobalAlphaFactordSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN =
+      (GdkGLProc_glGlobalAlphaFactordSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactordSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactordSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN);
+}
+
+/* glGlobalAlphaFactorubSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactorubSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN == (GdkGLProc_glGlobalAlphaFactorubSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN =
+      (GdkGLProc_glGlobalAlphaFactorubSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorubSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactorubSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN);
+}
+
+/* glGlobalAlphaFactorusSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactorusSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN == (GdkGLProc_glGlobalAlphaFactorusSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN =
+      (GdkGLProc_glGlobalAlphaFactorusSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorusSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactorusSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN);
+}
+
+/* glGlobalAlphaFactoruiSUN */
+GdkGLProc
+gdk_gl_get_glGlobalAlphaFactoruiSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN == (GdkGLProc_glGlobalAlphaFactoruiSUN) -1)
+    _procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN =
+      (GdkGLProc_glGlobalAlphaFactoruiSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactoruiSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGlobalAlphaFactoruiSUN () - %s",
+               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN);
+}
+
+/* Get GL_SUN_global_alpha functions */
+GdkGL_GL_SUN_global_alpha *
+gdk_gl_get_GL_SUN_global_alpha (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SUN_global_alpha");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGlobalAlphaFactorbSUN () != NULL);
+          supported &= (gdk_gl_get_glGlobalAlphaFactorsSUN () != NULL);
+          supported &= (gdk_gl_get_glGlobalAlphaFactoriSUN () != NULL);
+          supported &= (gdk_gl_get_glGlobalAlphaFactorfSUN () != NULL);
+          supported &= (gdk_gl_get_glGlobalAlphaFactordSUN () != NULL);
+          supported &= (gdk_gl_get_glGlobalAlphaFactorubSUN () != NULL);
+          supported &= (gdk_gl_get_glGlobalAlphaFactorusSUN () != NULL);
+          supported &= (gdk_gl_get_glGlobalAlphaFactoruiSUN () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SUN_global_alpha () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SUN_global_alpha;
+}
+
+/*
+ * GL_SUN_triangle_list
+ */
+
+static GdkGL_GL_SUN_triangle_list _procs_GL_SUN_triangle_list = {
+  (GdkGLProc_glReplacementCodeuiSUN) -1,
+  (GdkGLProc_glReplacementCodeusSUN) -1,
+  (GdkGLProc_glReplacementCodeubSUN) -1,
+  (GdkGLProc_glReplacementCodeuivSUN) -1,
+  (GdkGLProc_glReplacementCodeusvSUN) -1,
+  (GdkGLProc_glReplacementCodeubvSUN) -1,
+  (GdkGLProc_glReplacementCodePointerSUN) -1
+};
+
+/* glReplacementCodeuiSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_triangle_list.glReplacementCodeuiSUN == (GdkGLProc_glReplacementCodeuiSUN) -1)
+    _procs_GL_SUN_triangle_list.glReplacementCodeuiSUN =
+      (GdkGLProc_glReplacementCodeuiSUN) gdk_gl_get_proc_address ("glReplacementCodeuiSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiSUN () - %s",
+               (_procs_GL_SUN_triangle_list.glReplacementCodeuiSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeuiSUN);
+}
+
+/* glReplacementCodeusSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeusSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_triangle_list.glReplacementCodeusSUN == (GdkGLProc_glReplacementCodeusSUN) -1)
+    _procs_GL_SUN_triangle_list.glReplacementCodeusSUN =
+      (GdkGLProc_glReplacementCodeusSUN) gdk_gl_get_proc_address ("glReplacementCodeusSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeusSUN () - %s",
+               (_procs_GL_SUN_triangle_list.glReplacementCodeusSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeusSUN);
+}
+
+/* glReplacementCodeubSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeubSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_triangle_list.glReplacementCodeubSUN == (GdkGLProc_glReplacementCodeubSUN) -1)
+    _procs_GL_SUN_triangle_list.glReplacementCodeubSUN =
+      (GdkGLProc_glReplacementCodeubSUN) gdk_gl_get_proc_address ("glReplacementCodeubSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeubSUN () - %s",
+               (_procs_GL_SUN_triangle_list.glReplacementCodeubSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeubSUN);
+}
+
+/* glReplacementCodeuivSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuivSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_triangle_list.glReplacementCodeuivSUN == (GdkGLProc_glReplacementCodeuivSUN) -1)
+    _procs_GL_SUN_triangle_list.glReplacementCodeuivSUN =
+      (GdkGLProc_glReplacementCodeuivSUN) gdk_gl_get_proc_address ("glReplacementCodeuivSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuivSUN () - %s",
+               (_procs_GL_SUN_triangle_list.glReplacementCodeuivSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeuivSUN);
+}
+
+/* glReplacementCodeusvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeusvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_triangle_list.glReplacementCodeusvSUN == (GdkGLProc_glReplacementCodeusvSUN) -1)
+    _procs_GL_SUN_triangle_list.glReplacementCodeusvSUN =
+      (GdkGLProc_glReplacementCodeusvSUN) gdk_gl_get_proc_address ("glReplacementCodeusvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeusvSUN () - %s",
+               (_procs_GL_SUN_triangle_list.glReplacementCodeusvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeusvSUN);
+}
+
+/* glReplacementCodeubvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeubvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_triangle_list.glReplacementCodeubvSUN == (GdkGLProc_glReplacementCodeubvSUN) -1)
+    _procs_GL_SUN_triangle_list.glReplacementCodeubvSUN =
+      (GdkGLProc_glReplacementCodeubvSUN) gdk_gl_get_proc_address ("glReplacementCodeubvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeubvSUN () - %s",
+               (_procs_GL_SUN_triangle_list.glReplacementCodeubvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeubvSUN);
+}
+
+/* glReplacementCodePointerSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodePointerSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_triangle_list.glReplacementCodePointerSUN == (GdkGLProc_glReplacementCodePointerSUN) -1)
+    _procs_GL_SUN_triangle_list.glReplacementCodePointerSUN =
+      (GdkGLProc_glReplacementCodePointerSUN) gdk_gl_get_proc_address ("glReplacementCodePointerSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodePointerSUN () - %s",
+               (_procs_GL_SUN_triangle_list.glReplacementCodePointerSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodePointerSUN);
+}
+
+/* Get GL_SUN_triangle_list functions */
+GdkGL_GL_SUN_triangle_list *
+gdk_gl_get_GL_SUN_triangle_list (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SUN_triangle_list");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glReplacementCodeuiSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeusSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeubSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuivSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeusvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeubvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodePointerSUN () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SUN_triangle_list () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SUN_triangle_list;
+}
+
+/*
+ * GL_SUN_vertex
+ */
+
+static GdkGL_GL_SUN_vertex _procs_GL_SUN_vertex = {
+  (GdkGLProc_glColor4ubVertex2fSUN) -1,
+  (GdkGLProc_glColor4ubVertex2fvSUN) -1,
+  (GdkGLProc_glColor4ubVertex3fSUN) -1,
+  (GdkGLProc_glColor4ubVertex3fvSUN) -1,
+  (GdkGLProc_glColor3fVertex3fSUN) -1,
+  (GdkGLProc_glColor3fVertex3fvSUN) -1,
+  (GdkGLProc_glNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glNormal3fVertex3fvSUN) -1,
+  (GdkGLProc_glColor4fNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glColor4fNormal3fVertex3fvSUN) -1,
+  (GdkGLProc_glTexCoord2fVertex3fSUN) -1,
+  (GdkGLProc_glTexCoord2fVertex3fvSUN) -1,
+  (GdkGLProc_glTexCoord4fVertex4fSUN) -1,
+  (GdkGLProc_glTexCoord4fVertex4fvSUN) -1,
+  (GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) -1,
+  (GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) -1,
+  (GdkGLProc_glTexCoord2fColor3fVertex3fSUN) -1,
+  (GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) -1,
+  (GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) -1,
+  (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) -1,
+  (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) -1,
+  (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiVertex3fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) -1,
+  (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) -1,
+  (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) -1
+};
+
+/* glColor4ubVertex2fSUN */
+GdkGLProc
+gdk_gl_get_glColor4ubVertex2fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor4ubVertex2fSUN == (GdkGLProc_glColor4ubVertex2fSUN) -1)
+    _procs_GL_SUN_vertex.glColor4ubVertex2fSUN =
+      (GdkGLProc_glColor4ubVertex2fSUN) gdk_gl_get_proc_address ("glColor4ubVertex2fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor4ubVertex2fSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor4ubVertex2fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex2fSUN);
+}
+
+/* glColor4ubVertex2fvSUN */
+GdkGLProc
+gdk_gl_get_glColor4ubVertex2fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor4ubVertex2fvSUN == (GdkGLProc_glColor4ubVertex2fvSUN) -1)
+    _procs_GL_SUN_vertex.glColor4ubVertex2fvSUN =
+      (GdkGLProc_glColor4ubVertex2fvSUN) gdk_gl_get_proc_address ("glColor4ubVertex2fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor4ubVertex2fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor4ubVertex2fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex2fvSUN);
+}
+
+/* glColor4ubVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glColor4ubVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor4ubVertex3fSUN == (GdkGLProc_glColor4ubVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glColor4ubVertex3fSUN =
+      (GdkGLProc_glColor4ubVertex3fSUN) gdk_gl_get_proc_address ("glColor4ubVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor4ubVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor4ubVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex3fSUN);
+}
+
+/* glColor4ubVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glColor4ubVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor4ubVertex3fvSUN == (GdkGLProc_glColor4ubVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glColor4ubVertex3fvSUN =
+      (GdkGLProc_glColor4ubVertex3fvSUN) gdk_gl_get_proc_address ("glColor4ubVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor4ubVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor4ubVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex3fvSUN);
+}
+
+/* glColor3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glColor3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor3fVertex3fSUN == (GdkGLProc_glColor3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glColor3fVertex3fSUN =
+      (GdkGLProc_glColor3fVertex3fSUN) gdk_gl_get_proc_address ("glColor3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor3fVertex3fSUN);
+}
+
+/* glColor3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glColor3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor3fVertex3fvSUN == (GdkGLProc_glColor3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glColor3fVertex3fvSUN =
+      (GdkGLProc_glColor3fVertex3fvSUN) gdk_gl_get_proc_address ("glColor3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor3fVertex3fvSUN);
+}
+
+/* glNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glNormal3fVertex3fSUN == (GdkGLProc_glNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glNormal3fVertex3fSUN =
+      (GdkGLProc_glNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glNormal3fVertex3fSUN);
+}
+
+/* glNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glNormal3fVertex3fvSUN == (GdkGLProc_glNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glNormal3fVertex3fvSUN =
+      (GdkGLProc_glNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glNormal3fVertex3fvSUN);
+}
+
+/* glColor4fNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glColor4fNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN == (GdkGLProc_glColor4fNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN =
+      (GdkGLProc_glColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glColor4fNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor4fNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN);
+}
+
+/* glColor4fNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glColor4fNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN == (GdkGLProc_glColor4fNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN =
+      (GdkGLProc_glColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glColor4fNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColor4fNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN);
+}
+
+/* glTexCoord2fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN == (GdkGLProc_glTexCoord2fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN =
+      (GdkGLProc_glTexCoord2fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN);
+}
+
+/* glTexCoord2fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN == (GdkGLProc_glTexCoord2fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN =
+      (GdkGLProc_glTexCoord2fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN);
+}
+
+/* glTexCoord4fVertex4fSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord4fVertex4fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN == (GdkGLProc_glTexCoord4fVertex4fSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN =
+      (GdkGLProc_glTexCoord4fVertex4fSUN) gdk_gl_get_proc_address ("glTexCoord4fVertex4fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord4fVertex4fSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN);
+}
+
+/* glTexCoord4fVertex4fvSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord4fVertex4fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN == (GdkGLProc_glTexCoord4fVertex4fvSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN =
+      (GdkGLProc_glTexCoord4fVertex4fvSUN) gdk_gl_get_proc_address ("glTexCoord4fVertex4fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord4fVertex4fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN);
+}
+
+/* glTexCoord2fColor4ubVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN == (GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN =
+      (GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4ubVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN);
+}
+
+/* glTexCoord2fColor4ubVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN == (GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN =
+      (GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4ubVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN);
+}
+
+/* glTexCoord2fColor3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fColor3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN == (GdkGLProc_glTexCoord2fColor3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN =
+      (GdkGLProc_glTexCoord2fColor3fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fColor3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fColor3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN);
+}
+
+/* glTexCoord2fColor3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN == (GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN =
+      (GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fColor3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN);
+}
+
+/* glTexCoord2fNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN == (GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN =
+      (GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN);
+}
+
+/* glTexCoord2fNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN == (GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN =
+      (GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN);
+}
+
+/* glTexCoord2fColor4fNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN == (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN =
+      (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4fNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN);
+}
+
+/* glTexCoord2fColor4fNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN == (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN =
+      (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4fNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN);
+}
+
+/* glTexCoord4fColor4fNormal3fVertex4fSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN == (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN =
+      (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) gdk_gl_get_proc_address ("glTexCoord4fColor4fNormal3fVertex4fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN);
+}
+
+/* glTexCoord4fColor4fNormal3fVertex4fvSUN */
+GdkGLProc
+gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN == (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) -1)
+    _procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN =
+      (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) gdk_gl_get_proc_address ("glTexCoord4fColor4fNormal3fVertex4fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN);
+}
+
+/* glReplacementCodeuiVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN == (GdkGLProc_glReplacementCodeuiVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN);
+}
+
+/* glReplacementCodeuiVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN == (GdkGLProc_glReplacementCodeuiVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN);
+}
+
+/* glReplacementCodeuiColor4ubVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN == (GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4ubVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN);
+}
+
+/* glReplacementCodeuiColor4ubVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN == (GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4ubVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN);
+}
+
+/* glReplacementCodeuiColor3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN);
+}
+
+/* glReplacementCodeuiColor3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN);
+}
+
+/* glReplacementCodeuiNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN);
+}
+
+/* glReplacementCodeuiNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN);
+}
+
+/* glReplacementCodeuiColor4fNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN);
+}
+
+/* glReplacementCodeuiColor4fNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN);
+}
+
+/* glReplacementCodeuiTexCoord2fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN);
+}
+
+/* glReplacementCodeuiTexCoord2fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN);
+}
+
+/* glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
+}
+
+/* glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
+}
+
+/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN =
+      (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
+}
+
+/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN */
+GdkGLProc
+gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) -1)
+    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN =
+      (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN () - %s",
+               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
+}
+
+/* Get GL_SUN_vertex functions */
+GdkGL_GL_SUN_vertex *
+gdk_gl_get_GL_SUN_vertex (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SUN_vertex");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glColor4ubVertex2fSUN () != NULL);
+          supported &= (gdk_gl_get_glColor4ubVertex2fvSUN () != NULL);
+          supported &= (gdk_gl_get_glColor4ubVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glColor4ubVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glColor3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glColor3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glNormal3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glColor4fNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glColor4fNormal3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord4fVertex4fSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord4fVertex4fvSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fColor3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN () != NULL);
+          supported &= (gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN () != NULL);
+          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SUN_vertex () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SUN_vertex;
+}
+
+/*
+ * GL_EXT_blend_func_separate
+ */
+
+static GdkGL_GL_EXT_blend_func_separate _procs_GL_EXT_blend_func_separate = {
+  (GdkGLProc_glBlendFuncSeparateEXT) -1
+};
+
+/* glBlendFuncSeparateEXT */
+GdkGLProc
+gdk_gl_get_glBlendFuncSeparateEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT == (GdkGLProc_glBlendFuncSeparateEXT) -1)
+    _procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT =
+      (GdkGLProc_glBlendFuncSeparateEXT) gdk_gl_get_proc_address ("glBlendFuncSeparateEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendFuncSeparateEXT () - %s",
+               (_procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT);
+}
+
+/* Get GL_EXT_blend_func_separate functions */
+GdkGL_GL_EXT_blend_func_separate *
+gdk_gl_get_GL_EXT_blend_func_separate (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_blend_func_separate");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlendFuncSeparateEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_blend_func_separate () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_blend_func_separate;
+}
+
+/*
+ * GL_INGR_blend_func_separate
+ */
+
+static GdkGL_GL_INGR_blend_func_separate _procs_GL_INGR_blend_func_separate = {
+  (GdkGLProc_glBlendFuncSeparateINGR) -1
+};
+
+/* glBlendFuncSeparateINGR */
+GdkGLProc
+gdk_gl_get_glBlendFuncSeparateINGR (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR == (GdkGLProc_glBlendFuncSeparateINGR) -1)
+    _procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR =
+      (GdkGLProc_glBlendFuncSeparateINGR) gdk_gl_get_proc_address ("glBlendFuncSeparateINGR");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBlendFuncSeparateINGR () - %s",
+               (_procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR);
+}
+
+/* Get GL_INGR_blend_func_separate functions */
+GdkGL_GL_INGR_blend_func_separate *
+gdk_gl_get_GL_INGR_blend_func_separate (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_INGR_blend_func_separate");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlendFuncSeparateINGR () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_INGR_blend_func_separate () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_INGR_blend_func_separate;
+}
+
+/*
+ * GL_EXT_vertex_weighting
+ */
+
+static GdkGL_GL_EXT_vertex_weighting _procs_GL_EXT_vertex_weighting = {
+  (GdkGLProc_glVertexWeightfEXT) -1,
+  (GdkGLProc_glVertexWeightfvEXT) -1,
+  (GdkGLProc_glVertexWeightPointerEXT) -1
+};
+
+/* glVertexWeightfEXT */
+GdkGLProc
+gdk_gl_get_glVertexWeightfEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_weighting.glVertexWeightfEXT == (GdkGLProc_glVertexWeightfEXT) -1)
+    _procs_GL_EXT_vertex_weighting.glVertexWeightfEXT =
+      (GdkGLProc_glVertexWeightfEXT) gdk_gl_get_proc_address ("glVertexWeightfEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexWeightfEXT () - %s",
+               (_procs_GL_EXT_vertex_weighting.glVertexWeightfEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_weighting.glVertexWeightfEXT);
+}
+
+/* glVertexWeightfvEXT */
+GdkGLProc
+gdk_gl_get_glVertexWeightfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT == (GdkGLProc_glVertexWeightfvEXT) -1)
+    _procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT =
+      (GdkGLProc_glVertexWeightfvEXT) gdk_gl_get_proc_address ("glVertexWeightfvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexWeightfvEXT () - %s",
+               (_procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT);
+}
+
+/* glVertexWeightPointerEXT */
+GdkGLProc
+gdk_gl_get_glVertexWeightPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT == (GdkGLProc_glVertexWeightPointerEXT) -1)
+    _procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT =
+      (GdkGLProc_glVertexWeightPointerEXT) gdk_gl_get_proc_address ("glVertexWeightPointerEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexWeightPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT);
+}
+
+/* Get GL_EXT_vertex_weighting functions */
+GdkGL_GL_EXT_vertex_weighting *
+gdk_gl_get_GL_EXT_vertex_weighting (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_vertex_weighting");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glVertexWeightfEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexWeightfvEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexWeightPointerEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_vertex_weighting () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_vertex_weighting;
+}
+
+/*
+ * GL_NV_vertex_array_range
+ */
+
+static GdkGL_GL_NV_vertex_array_range _procs_GL_NV_vertex_array_range = {
+  (GdkGLProc_glFlushVertexArrayRangeNV) -1,
+  (GdkGLProc_glVertexArrayRangeNV) -1
+};
+
+/* glFlushVertexArrayRangeNV */
+GdkGLProc
+gdk_gl_get_glFlushVertexArrayRangeNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV == (GdkGLProc_glFlushVertexArrayRangeNV) -1)
+    _procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV =
+      (GdkGLProc_glFlushVertexArrayRangeNV) gdk_gl_get_proc_address ("glFlushVertexArrayRangeNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFlushVertexArrayRangeNV () - %s",
+               (_procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV);
+}
+
+/* glVertexArrayRangeNV */
+GdkGLProc
+gdk_gl_get_glVertexArrayRangeNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_array_range.glVertexArrayRangeNV == (GdkGLProc_glVertexArrayRangeNV) -1)
+    _procs_GL_NV_vertex_array_range.glVertexArrayRangeNV =
+      (GdkGLProc_glVertexArrayRangeNV) gdk_gl_get_proc_address ("glVertexArrayRangeNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexArrayRangeNV () - %s",
+               (_procs_GL_NV_vertex_array_range.glVertexArrayRangeNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_array_range.glVertexArrayRangeNV);
+}
+
+/* Get GL_NV_vertex_array_range functions */
+GdkGL_GL_NV_vertex_array_range *
+gdk_gl_get_GL_NV_vertex_array_range (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_vertex_array_range");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFlushVertexArrayRangeNV () != NULL);
+          supported &= (gdk_gl_get_glVertexArrayRangeNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_vertex_array_range () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_vertex_array_range;
+}
+
+/*
+ * GL_NV_register_combiners
+ */
+
+static GdkGL_GL_NV_register_combiners _procs_GL_NV_register_combiners = {
+  (GdkGLProc_glCombinerParameterfvNV) -1,
+  (GdkGLProc_glCombinerParameterfNV) -1,
+  (GdkGLProc_glCombinerParameterivNV) -1,
+  (GdkGLProc_glCombinerParameteriNV) -1,
+  (GdkGLProc_glCombinerInputNV) -1,
+  (GdkGLProc_glCombinerOutputNV) -1,
+  (GdkGLProc_glFinalCombinerInputNV) -1,
+  (GdkGLProc_glGetCombinerInputParameterfvNV) -1,
+  (GdkGLProc_glGetCombinerInputParameterivNV) -1,
+  (GdkGLProc_glGetCombinerOutputParameterfvNV) -1,
+  (GdkGLProc_glGetCombinerOutputParameterivNV) -1,
+  (GdkGLProc_glGetFinalCombinerInputParameterfvNV) -1,
+  (GdkGLProc_glGetFinalCombinerInputParameterivNV) -1
+};
+
+/* glCombinerParameterfvNV */
+GdkGLProc
+gdk_gl_get_glCombinerParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glCombinerParameterfvNV == (GdkGLProc_glCombinerParameterfvNV) -1)
+    _procs_GL_NV_register_combiners.glCombinerParameterfvNV =
+      (GdkGLProc_glCombinerParameterfvNV) gdk_gl_get_proc_address ("glCombinerParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCombinerParameterfvNV () - %s",
+               (_procs_GL_NV_register_combiners.glCombinerParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameterfvNV);
+}
+
+/* glCombinerParameterfNV */
+GdkGLProc
+gdk_gl_get_glCombinerParameterfNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glCombinerParameterfNV == (GdkGLProc_glCombinerParameterfNV) -1)
+    _procs_GL_NV_register_combiners.glCombinerParameterfNV =
+      (GdkGLProc_glCombinerParameterfNV) gdk_gl_get_proc_address ("glCombinerParameterfNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCombinerParameterfNV () - %s",
+               (_procs_GL_NV_register_combiners.glCombinerParameterfNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameterfNV);
+}
+
+/* glCombinerParameterivNV */
+GdkGLProc
+gdk_gl_get_glCombinerParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glCombinerParameterivNV == (GdkGLProc_glCombinerParameterivNV) -1)
+    _procs_GL_NV_register_combiners.glCombinerParameterivNV =
+      (GdkGLProc_glCombinerParameterivNV) gdk_gl_get_proc_address ("glCombinerParameterivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCombinerParameterivNV () - %s",
+               (_procs_GL_NV_register_combiners.glCombinerParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameterivNV);
+}
+
+/* glCombinerParameteriNV */
+GdkGLProc
+gdk_gl_get_glCombinerParameteriNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glCombinerParameteriNV == (GdkGLProc_glCombinerParameteriNV) -1)
+    _procs_GL_NV_register_combiners.glCombinerParameteriNV =
+      (GdkGLProc_glCombinerParameteriNV) gdk_gl_get_proc_address ("glCombinerParameteriNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCombinerParameteriNV () - %s",
+               (_procs_GL_NV_register_combiners.glCombinerParameteriNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameteriNV);
+}
+
+/* glCombinerInputNV */
+GdkGLProc
+gdk_gl_get_glCombinerInputNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glCombinerInputNV == (GdkGLProc_glCombinerInputNV) -1)
+    _procs_GL_NV_register_combiners.glCombinerInputNV =
+      (GdkGLProc_glCombinerInputNV) gdk_gl_get_proc_address ("glCombinerInputNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCombinerInputNV () - %s",
+               (_procs_GL_NV_register_combiners.glCombinerInputNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerInputNV);
+}
+
+/* glCombinerOutputNV */
+GdkGLProc
+gdk_gl_get_glCombinerOutputNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glCombinerOutputNV == (GdkGLProc_glCombinerOutputNV) -1)
+    _procs_GL_NV_register_combiners.glCombinerOutputNV =
+      (GdkGLProc_glCombinerOutputNV) gdk_gl_get_proc_address ("glCombinerOutputNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCombinerOutputNV () - %s",
+               (_procs_GL_NV_register_combiners.glCombinerOutputNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerOutputNV);
+}
+
+/* glFinalCombinerInputNV */
+GdkGLProc
+gdk_gl_get_glFinalCombinerInputNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glFinalCombinerInputNV == (GdkGLProc_glFinalCombinerInputNV) -1)
+    _procs_GL_NV_register_combiners.glFinalCombinerInputNV =
+      (GdkGLProc_glFinalCombinerInputNV) gdk_gl_get_proc_address ("glFinalCombinerInputNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFinalCombinerInputNV () - %s",
+               (_procs_GL_NV_register_combiners.glFinalCombinerInputNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glFinalCombinerInputNV);
+}
+
+/* glGetCombinerInputParameterfvNV */
+GdkGLProc
+gdk_gl_get_glGetCombinerInputParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV == (GdkGLProc_glGetCombinerInputParameterfvNV) -1)
+    _procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV =
+      (GdkGLProc_glGetCombinerInputParameterfvNV) gdk_gl_get_proc_address ("glGetCombinerInputParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetCombinerInputParameterfvNV () - %s",
+               (_procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV);
+}
+
+/* glGetCombinerInputParameterivNV */
+GdkGLProc
+gdk_gl_get_glGetCombinerInputParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV == (GdkGLProc_glGetCombinerInputParameterivNV) -1)
+    _procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV =
+      (GdkGLProc_glGetCombinerInputParameterivNV) gdk_gl_get_proc_address ("glGetCombinerInputParameterivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetCombinerInputParameterivNV () - %s",
+               (_procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV);
+}
+
+/* glGetCombinerOutputParameterfvNV */
+GdkGLProc
+gdk_gl_get_glGetCombinerOutputParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV == (GdkGLProc_glGetCombinerOutputParameterfvNV) -1)
+    _procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV =
+      (GdkGLProc_glGetCombinerOutputParameterfvNV) gdk_gl_get_proc_address ("glGetCombinerOutputParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetCombinerOutputParameterfvNV () - %s",
+               (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV);
+}
+
+/* glGetCombinerOutputParameterivNV */
+GdkGLProc
+gdk_gl_get_glGetCombinerOutputParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV == (GdkGLProc_glGetCombinerOutputParameterivNV) -1)
+    _procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV =
+      (GdkGLProc_glGetCombinerOutputParameterivNV) gdk_gl_get_proc_address ("glGetCombinerOutputParameterivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetCombinerOutputParameterivNV () - %s",
+               (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV);
+}
+
+/* glGetFinalCombinerInputParameterfvNV */
+GdkGLProc
+gdk_gl_get_glGetFinalCombinerInputParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV == (GdkGLProc_glGetFinalCombinerInputParameterfvNV) -1)
+    _procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV =
+      (GdkGLProc_glGetFinalCombinerInputParameterfvNV) gdk_gl_get_proc_address ("glGetFinalCombinerInputParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFinalCombinerInputParameterfvNV () - %s",
+               (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV);
+}
+
+/* glGetFinalCombinerInputParameterivNV */
+GdkGLProc
+gdk_gl_get_glGetFinalCombinerInputParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV == (GdkGLProc_glGetFinalCombinerInputParameterivNV) -1)
+    _procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV =
+      (GdkGLProc_glGetFinalCombinerInputParameterivNV) gdk_gl_get_proc_address ("glGetFinalCombinerInputParameterivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFinalCombinerInputParameterivNV () - %s",
+               (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV);
+}
+
+/* Get GL_NV_register_combiners functions */
+GdkGL_GL_NV_register_combiners *
+gdk_gl_get_GL_NV_register_combiners (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_register_combiners");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glCombinerParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glCombinerParameterfNV () != NULL);
+          supported &= (gdk_gl_get_glCombinerParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glCombinerParameteriNV () != NULL);
+          supported &= (gdk_gl_get_glCombinerInputNV () != NULL);
+          supported &= (gdk_gl_get_glCombinerOutputNV () != NULL);
+          supported &= (gdk_gl_get_glFinalCombinerInputNV () != NULL);
+          supported &= (gdk_gl_get_glGetCombinerInputParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetCombinerInputParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glGetCombinerOutputParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetCombinerOutputParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glGetFinalCombinerInputParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetFinalCombinerInputParameterivNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_register_combiners () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_register_combiners;
+}
+
+/*
+ * GL_MESA_resize_buffers
+ */
+
+static GdkGL_GL_MESA_resize_buffers _procs_GL_MESA_resize_buffers = {
+  (GdkGLProc_glResizeBuffersMESA) -1
+};
+
+/* glResizeBuffersMESA */
+GdkGLProc
+gdk_gl_get_glResizeBuffersMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_resize_buffers.glResizeBuffersMESA == (GdkGLProc_glResizeBuffersMESA) -1)
+    _procs_GL_MESA_resize_buffers.glResizeBuffersMESA =
+      (GdkGLProc_glResizeBuffersMESA) gdk_gl_get_proc_address ("glResizeBuffersMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glResizeBuffersMESA () - %s",
+               (_procs_GL_MESA_resize_buffers.glResizeBuffersMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_resize_buffers.glResizeBuffersMESA);
+}
+
+/* Get GL_MESA_resize_buffers functions */
+GdkGL_GL_MESA_resize_buffers *
+gdk_gl_get_GL_MESA_resize_buffers (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_MESA_resize_buffers");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glResizeBuffersMESA () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_MESA_resize_buffers () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_MESA_resize_buffers;
+}
+
+/*
+ * GL_MESA_window_pos
+ */
+
+static GdkGL_GL_MESA_window_pos _procs_GL_MESA_window_pos = {
+  (GdkGLProc_glWindowPos2dMESA) -1,
+  (GdkGLProc_glWindowPos2dvMESA) -1,
+  (GdkGLProc_glWindowPos2fMESA) -1,
+  (GdkGLProc_glWindowPos2fvMESA) -1,
+  (GdkGLProc_glWindowPos2iMESA) -1,
+  (GdkGLProc_glWindowPos2ivMESA) -1,
+  (GdkGLProc_glWindowPos2sMESA) -1,
+  (GdkGLProc_glWindowPos2svMESA) -1,
+  (GdkGLProc_glWindowPos3dMESA) -1,
+  (GdkGLProc_glWindowPos3dvMESA) -1,
+  (GdkGLProc_glWindowPos3fMESA) -1,
+  (GdkGLProc_glWindowPos3fvMESA) -1,
+  (GdkGLProc_glWindowPos3iMESA) -1,
+  (GdkGLProc_glWindowPos3ivMESA) -1,
+  (GdkGLProc_glWindowPos3sMESA) -1,
+  (GdkGLProc_glWindowPos3svMESA) -1,
+  (GdkGLProc_glWindowPos4dMESA) -1,
+  (GdkGLProc_glWindowPos4dvMESA) -1,
+  (GdkGLProc_glWindowPos4fMESA) -1,
+  (GdkGLProc_glWindowPos4fvMESA) -1,
+  (GdkGLProc_glWindowPos4iMESA) -1,
+  (GdkGLProc_glWindowPos4ivMESA) -1,
+  (GdkGLProc_glWindowPos4sMESA) -1,
+  (GdkGLProc_glWindowPos4svMESA) -1
+};
+
+/* glWindowPos2dMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2dMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2dMESA == (GdkGLProc_glWindowPos2dMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2dMESA =
+      (GdkGLProc_glWindowPos2dMESA) gdk_gl_get_proc_address ("glWindowPos2dMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2dMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2dMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2dMESA);
+}
+
+/* glWindowPos2dvMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2dvMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2dvMESA == (GdkGLProc_glWindowPos2dvMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2dvMESA =
+      (GdkGLProc_glWindowPos2dvMESA) gdk_gl_get_proc_address ("glWindowPos2dvMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2dvMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2dvMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2dvMESA);
+}
+
+/* glWindowPos2fMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2fMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2fMESA == (GdkGLProc_glWindowPos2fMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2fMESA =
+      (GdkGLProc_glWindowPos2fMESA) gdk_gl_get_proc_address ("glWindowPos2fMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2fMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2fMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2fMESA);
+}
+
+/* glWindowPos2fvMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2fvMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2fvMESA == (GdkGLProc_glWindowPos2fvMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2fvMESA =
+      (GdkGLProc_glWindowPos2fvMESA) gdk_gl_get_proc_address ("glWindowPos2fvMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2fvMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2fvMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2fvMESA);
+}
+
+/* glWindowPos2iMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2iMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2iMESA == (GdkGLProc_glWindowPos2iMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2iMESA =
+      (GdkGLProc_glWindowPos2iMESA) gdk_gl_get_proc_address ("glWindowPos2iMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2iMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2iMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2iMESA);
+}
+
+/* glWindowPos2ivMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2ivMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2ivMESA == (GdkGLProc_glWindowPos2ivMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2ivMESA =
+      (GdkGLProc_glWindowPos2ivMESA) gdk_gl_get_proc_address ("glWindowPos2ivMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2ivMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2ivMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2ivMESA);
+}
+
+/* glWindowPos2sMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2sMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2sMESA == (GdkGLProc_glWindowPos2sMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2sMESA =
+      (GdkGLProc_glWindowPos2sMESA) gdk_gl_get_proc_address ("glWindowPos2sMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2sMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2sMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2sMESA);
+}
+
+/* glWindowPos2svMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos2svMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos2svMESA == (GdkGLProc_glWindowPos2svMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos2svMESA =
+      (GdkGLProc_glWindowPos2svMESA) gdk_gl_get_proc_address ("glWindowPos2svMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos2svMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos2svMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2svMESA);
+}
+
+/* glWindowPos3dMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3dMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3dMESA == (GdkGLProc_glWindowPos3dMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3dMESA =
+      (GdkGLProc_glWindowPos3dMESA) gdk_gl_get_proc_address ("glWindowPos3dMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3dMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3dMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3dMESA);
+}
+
+/* glWindowPos3dvMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3dvMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3dvMESA == (GdkGLProc_glWindowPos3dvMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3dvMESA =
+      (GdkGLProc_glWindowPos3dvMESA) gdk_gl_get_proc_address ("glWindowPos3dvMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3dvMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3dvMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3dvMESA);
+}
+
+/* glWindowPos3fMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3fMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3fMESA == (GdkGLProc_glWindowPos3fMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3fMESA =
+      (GdkGLProc_glWindowPos3fMESA) gdk_gl_get_proc_address ("glWindowPos3fMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3fMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3fMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3fMESA);
+}
+
+/* glWindowPos3fvMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3fvMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3fvMESA == (GdkGLProc_glWindowPos3fvMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3fvMESA =
+      (GdkGLProc_glWindowPos3fvMESA) gdk_gl_get_proc_address ("glWindowPos3fvMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3fvMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3fvMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3fvMESA);
+}
+
+/* glWindowPos3iMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3iMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3iMESA == (GdkGLProc_glWindowPos3iMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3iMESA =
+      (GdkGLProc_glWindowPos3iMESA) gdk_gl_get_proc_address ("glWindowPos3iMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3iMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3iMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3iMESA);
+}
+
+/* glWindowPos3ivMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3ivMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3ivMESA == (GdkGLProc_glWindowPos3ivMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3ivMESA =
+      (GdkGLProc_glWindowPos3ivMESA) gdk_gl_get_proc_address ("glWindowPos3ivMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3ivMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3ivMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3ivMESA);
+}
+
+/* glWindowPos3sMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3sMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3sMESA == (GdkGLProc_glWindowPos3sMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3sMESA =
+      (GdkGLProc_glWindowPos3sMESA) gdk_gl_get_proc_address ("glWindowPos3sMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3sMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3sMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3sMESA);
+}
+
+/* glWindowPos3svMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos3svMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos3svMESA == (GdkGLProc_glWindowPos3svMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos3svMESA =
+      (GdkGLProc_glWindowPos3svMESA) gdk_gl_get_proc_address ("glWindowPos3svMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos3svMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos3svMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3svMESA);
+}
+
+/* glWindowPos4dMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4dMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4dMESA == (GdkGLProc_glWindowPos4dMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4dMESA =
+      (GdkGLProc_glWindowPos4dMESA) gdk_gl_get_proc_address ("glWindowPos4dMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4dMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4dMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4dMESA);
+}
+
+/* glWindowPos4dvMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4dvMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4dvMESA == (GdkGLProc_glWindowPos4dvMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4dvMESA =
+      (GdkGLProc_glWindowPos4dvMESA) gdk_gl_get_proc_address ("glWindowPos4dvMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4dvMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4dvMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4dvMESA);
+}
+
+/* glWindowPos4fMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4fMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4fMESA == (GdkGLProc_glWindowPos4fMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4fMESA =
+      (GdkGLProc_glWindowPos4fMESA) gdk_gl_get_proc_address ("glWindowPos4fMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4fMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4fMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4fMESA);
+}
+
+/* glWindowPos4fvMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4fvMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4fvMESA == (GdkGLProc_glWindowPos4fvMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4fvMESA =
+      (GdkGLProc_glWindowPos4fvMESA) gdk_gl_get_proc_address ("glWindowPos4fvMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4fvMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4fvMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4fvMESA);
+}
+
+/* glWindowPos4iMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4iMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4iMESA == (GdkGLProc_glWindowPos4iMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4iMESA =
+      (GdkGLProc_glWindowPos4iMESA) gdk_gl_get_proc_address ("glWindowPos4iMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4iMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4iMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4iMESA);
+}
+
+/* glWindowPos4ivMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4ivMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4ivMESA == (GdkGLProc_glWindowPos4ivMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4ivMESA =
+      (GdkGLProc_glWindowPos4ivMESA) gdk_gl_get_proc_address ("glWindowPos4ivMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4ivMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4ivMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4ivMESA);
+}
+
+/* glWindowPos4sMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4sMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4sMESA == (GdkGLProc_glWindowPos4sMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4sMESA =
+      (GdkGLProc_glWindowPos4sMESA) gdk_gl_get_proc_address ("glWindowPos4sMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4sMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4sMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4sMESA);
+}
+
+/* glWindowPos4svMESA */
+GdkGLProc
+gdk_gl_get_glWindowPos4svMESA (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_MESA_window_pos.glWindowPos4svMESA == (GdkGLProc_glWindowPos4svMESA) -1)
+    _procs_GL_MESA_window_pos.glWindowPos4svMESA =
+      (GdkGLProc_glWindowPos4svMESA) gdk_gl_get_proc_address ("glWindowPos4svMESA");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWindowPos4svMESA () - %s",
+               (_procs_GL_MESA_window_pos.glWindowPos4svMESA) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4svMESA);
+}
+
+/* Get GL_MESA_window_pos functions */
+GdkGL_GL_MESA_window_pos *
+gdk_gl_get_GL_MESA_window_pos (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_MESA_window_pos");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glWindowPos2dMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2dvMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2fMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2fvMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2iMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2ivMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2sMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos2svMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3dMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3dvMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3fMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3fvMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3iMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3ivMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3sMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos3svMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4dMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4dvMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4fMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4fvMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4iMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4ivMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4sMESA () != NULL);
+          supported &= (gdk_gl_get_glWindowPos4svMESA () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_MESA_window_pos () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_MESA_window_pos;
+}
+
+/*
+ * GL_IBM_multimode_draw_arrays
+ */
+
+static GdkGL_GL_IBM_multimode_draw_arrays _procs_GL_IBM_multimode_draw_arrays = {
+  (GdkGLProc_glMultiModeDrawArraysIBM) -1,
+  (GdkGLProc_glMultiModeDrawElementsIBM) -1
+};
+
+/* glMultiModeDrawArraysIBM */
+GdkGLProc
+gdk_gl_get_glMultiModeDrawArraysIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM == (GdkGLProc_glMultiModeDrawArraysIBM) -1)
+    _procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM =
+      (GdkGLProc_glMultiModeDrawArraysIBM) gdk_gl_get_proc_address ("glMultiModeDrawArraysIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMultiModeDrawArraysIBM () - %s",
+               (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM);
+}
+
+/* glMultiModeDrawElementsIBM */
+GdkGLProc
+gdk_gl_get_glMultiModeDrawElementsIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM == (GdkGLProc_glMultiModeDrawElementsIBM) -1)
+    _procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM =
+      (GdkGLProc_glMultiModeDrawElementsIBM) gdk_gl_get_proc_address ("glMultiModeDrawElementsIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMultiModeDrawElementsIBM () - %s",
+               (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM);
+}
+
+/* Get GL_IBM_multimode_draw_arrays functions */
+GdkGL_GL_IBM_multimode_draw_arrays *
+gdk_gl_get_GL_IBM_multimode_draw_arrays (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_IBM_multimode_draw_arrays");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glMultiModeDrawArraysIBM () != NULL);
+          supported &= (gdk_gl_get_glMultiModeDrawElementsIBM () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_IBM_multimode_draw_arrays () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_IBM_multimode_draw_arrays;
+}
+
+/*
+ * GL_IBM_vertex_array_lists
+ */
+
+static GdkGL_GL_IBM_vertex_array_lists _procs_GL_IBM_vertex_array_lists = {
+  (GdkGLProc_glColorPointerListIBM) -1,
+  (GdkGLProc_glSecondaryColorPointerListIBM) -1,
+  (GdkGLProc_glEdgeFlagPointerListIBM) -1,
+  (GdkGLProc_glFogCoordPointerListIBM) -1,
+  (GdkGLProc_glIndexPointerListIBM) -1,
+  (GdkGLProc_glNormalPointerListIBM) -1,
+  (GdkGLProc_glTexCoordPointerListIBM) -1,
+  (GdkGLProc_glVertexPointerListIBM) -1
+};
+
+/* glColorPointerListIBM */
+GdkGLProc
+gdk_gl_get_glColorPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glColorPointerListIBM == (GdkGLProc_glColorPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glColorPointerListIBM =
+      (GdkGLProc_glColorPointerListIBM) gdk_gl_get_proc_address ("glColorPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glColorPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glColorPointerListIBM);
+}
+
+/* glSecondaryColorPointerListIBM */
+GdkGLProc
+gdk_gl_get_glSecondaryColorPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM == (GdkGLProc_glSecondaryColorPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM =
+      (GdkGLProc_glSecondaryColorPointerListIBM) gdk_gl_get_proc_address ("glSecondaryColorPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSecondaryColorPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM);
+}
+
+/* glEdgeFlagPointerListIBM */
+GdkGLProc
+gdk_gl_get_glEdgeFlagPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM == (GdkGLProc_glEdgeFlagPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM =
+      (GdkGLProc_glEdgeFlagPointerListIBM) gdk_gl_get_proc_address ("glEdgeFlagPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glEdgeFlagPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM);
+}
+
+/* glFogCoordPointerListIBM */
+GdkGLProc
+gdk_gl_get_glFogCoordPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM == (GdkGLProc_glFogCoordPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM =
+      (GdkGLProc_glFogCoordPointerListIBM) gdk_gl_get_proc_address ("glFogCoordPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFogCoordPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM);
+}
+
+/* glIndexPointerListIBM */
+GdkGLProc
+gdk_gl_get_glIndexPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM == (GdkGLProc_glIndexPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM =
+      (GdkGLProc_glIndexPointerListIBM) gdk_gl_get_proc_address ("glIndexPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIndexPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM);
+}
+
+/* glNormalPointerListIBM */
+GdkGLProc
+gdk_gl_get_glNormalPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM == (GdkGLProc_glNormalPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM =
+      (GdkGLProc_glNormalPointerListIBM) gdk_gl_get_proc_address ("glNormalPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNormalPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM);
+}
+
+/* glTexCoordPointerListIBM */
+GdkGLProc
+gdk_gl_get_glTexCoordPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM == (GdkGLProc_glTexCoordPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM =
+      (GdkGLProc_glTexCoordPointerListIBM) gdk_gl_get_proc_address ("glTexCoordPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoordPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM);
+}
+
+/* glVertexPointerListIBM */
+GdkGLProc
+gdk_gl_get_glVertexPointerListIBM (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM == (GdkGLProc_glVertexPointerListIBM) -1)
+    _procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM =
+      (GdkGLProc_glVertexPointerListIBM) gdk_gl_get_proc_address ("glVertexPointerListIBM");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexPointerListIBM () - %s",
+               (_procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM);
+}
+
+/* Get GL_IBM_vertex_array_lists functions */
+GdkGL_GL_IBM_vertex_array_lists *
+gdk_gl_get_GL_IBM_vertex_array_lists (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_IBM_vertex_array_lists");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glColorPointerListIBM () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColorPointerListIBM () != NULL);
+          supported &= (gdk_gl_get_glEdgeFlagPointerListIBM () != NULL);
+          supported &= (gdk_gl_get_glFogCoordPointerListIBM () != NULL);
+          supported &= (gdk_gl_get_glIndexPointerListIBM () != NULL);
+          supported &= (gdk_gl_get_glNormalPointerListIBM () != NULL);
+          supported &= (gdk_gl_get_glTexCoordPointerListIBM () != NULL);
+          supported &= (gdk_gl_get_glVertexPointerListIBM () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_IBM_vertex_array_lists () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_IBM_vertex_array_lists;
+}
+
+/*
+ * GL_3DFX_tbuffer
+ */
+
+static GdkGL_GL_3DFX_tbuffer _procs_GL_3DFX_tbuffer = {
+  (GdkGLProc_glTbufferMask3DFX) -1
+};
+
+/* glTbufferMask3DFX */
+GdkGLProc
+gdk_gl_get_glTbufferMask3DFX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_3DFX_tbuffer.glTbufferMask3DFX == (GdkGLProc_glTbufferMask3DFX) -1)
+    _procs_GL_3DFX_tbuffer.glTbufferMask3DFX =
+      (GdkGLProc_glTbufferMask3DFX) gdk_gl_get_proc_address ("glTbufferMask3DFX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTbufferMask3DFX () - %s",
+               (_procs_GL_3DFX_tbuffer.glTbufferMask3DFX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_3DFX_tbuffer.glTbufferMask3DFX);
+}
+
+/* Get GL_3DFX_tbuffer functions */
+GdkGL_GL_3DFX_tbuffer *
+gdk_gl_get_GL_3DFX_tbuffer (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_3DFX_tbuffer");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTbufferMask3DFX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_3DFX_tbuffer () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_3DFX_tbuffer;
+}
+
+/*
+ * GL_EXT_multisample
+ */
+
+static GdkGL_GL_EXT_multisample _procs_GL_EXT_multisample = {
+  (GdkGLProc_glSampleMaskEXT) -1,
+  (GdkGLProc_glSamplePatternEXT) -1
+};
+
+/* glSampleMaskEXT */
+GdkGLProc
+gdk_gl_get_glSampleMaskEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_multisample.glSampleMaskEXT == (GdkGLProc_glSampleMaskEXT) -1)
+    _procs_GL_EXT_multisample.glSampleMaskEXT =
+      (GdkGLProc_glSampleMaskEXT) gdk_gl_get_proc_address ("glSampleMaskEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSampleMaskEXT () - %s",
+               (_procs_GL_EXT_multisample.glSampleMaskEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_multisample.glSampleMaskEXT);
+}
+
+/* glSamplePatternEXT */
+GdkGLProc
+gdk_gl_get_glSamplePatternEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_multisample.glSamplePatternEXT == (GdkGLProc_glSamplePatternEXT) -1)
+    _procs_GL_EXT_multisample.glSamplePatternEXT =
+      (GdkGLProc_glSamplePatternEXT) gdk_gl_get_proc_address ("glSamplePatternEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSamplePatternEXT () - %s",
+               (_procs_GL_EXT_multisample.glSamplePatternEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_multisample.glSamplePatternEXT);
+}
+
+/* Get GL_EXT_multisample functions */
+GdkGL_GL_EXT_multisample *
+gdk_gl_get_GL_EXT_multisample (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_multisample");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glSampleMaskEXT () != NULL);
+          supported &= (gdk_gl_get_glSamplePatternEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_multisample () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_multisample;
+}
+
+/*
+ * GL_SGIS_texture_color_mask
+ */
+
+static GdkGL_GL_SGIS_texture_color_mask _procs_GL_SGIS_texture_color_mask = {
+  (GdkGLProc_glTextureColorMaskSGIS) -1
+};
+
+/* glTextureColorMaskSGIS */
+GdkGLProc
+gdk_gl_get_glTextureColorMaskSGIS (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS == (GdkGLProc_glTextureColorMaskSGIS) -1)
+    _procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS =
+      (GdkGLProc_glTextureColorMaskSGIS) gdk_gl_get_proc_address ("glTextureColorMaskSGIS");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTextureColorMaskSGIS () - %s",
+               (_procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS);
+}
+
+/* Get GL_SGIS_texture_color_mask functions */
+GdkGL_GL_SGIS_texture_color_mask *
+gdk_gl_get_GL_SGIS_texture_color_mask (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIS_texture_color_mask");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTextureColorMaskSGIS () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIS_texture_color_mask () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIS_texture_color_mask;
+}
+
+/*
+ * GL_SGIX_igloo_interface
+ */
+
+static GdkGL_GL_SGIX_igloo_interface _procs_GL_SGIX_igloo_interface = {
+  (GdkGLProc_glIglooInterfaceSGIX) -1
+};
+
+/* glIglooInterfaceSGIX */
+GdkGLProc
+gdk_gl_get_glIglooInterfaceSGIX (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX == (GdkGLProc_glIglooInterfaceSGIX) -1)
+    _procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX =
+      (GdkGLProc_glIglooInterfaceSGIX) gdk_gl_get_proc_address ("glIglooInterfaceSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIglooInterfaceSGIX () - %s",
+               (_procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX);
+}
+
+/* Get GL_SGIX_igloo_interface functions */
+GdkGL_GL_SGIX_igloo_interface *
+gdk_gl_get_GL_SGIX_igloo_interface (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SGIX_igloo_interface");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glIglooInterfaceSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SGIX_igloo_interface () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_SGIX_igloo_interface;
+}
+
+/*
+ * GL_NV_fence
+ */
+
+static GdkGL_GL_NV_fence _procs_GL_NV_fence = {
+  (GdkGLProc_glDeleteFencesNV) -1,
+  (GdkGLProc_glGenFencesNV) -1,
+  (GdkGLProc_glIsFenceNV) -1,
+  (GdkGLProc_glTestFenceNV) -1,
+  (GdkGLProc_glGetFenceivNV) -1,
+  (GdkGLProc_glFinishFenceNV) -1,
+  (GdkGLProc_glSetFenceNV) -1
+};
+
+/* glDeleteFencesNV */
+GdkGLProc
+gdk_gl_get_glDeleteFencesNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fence.glDeleteFencesNV == (GdkGLProc_glDeleteFencesNV) -1)
+    _procs_GL_NV_fence.glDeleteFencesNV =
+      (GdkGLProc_glDeleteFencesNV) gdk_gl_get_proc_address ("glDeleteFencesNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteFencesNV () - %s",
+               (_procs_GL_NV_fence.glDeleteFencesNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fence.glDeleteFencesNV);
+}
+
+/* glGenFencesNV */
+GdkGLProc
+gdk_gl_get_glGenFencesNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fence.glGenFencesNV == (GdkGLProc_glGenFencesNV) -1)
+    _procs_GL_NV_fence.glGenFencesNV =
+      (GdkGLProc_glGenFencesNV) gdk_gl_get_proc_address ("glGenFencesNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenFencesNV () - %s",
+               (_procs_GL_NV_fence.glGenFencesNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fence.glGenFencesNV);
+}
+
+/* glIsFenceNV */
+GdkGLProc
+gdk_gl_get_glIsFenceNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fence.glIsFenceNV == (GdkGLProc_glIsFenceNV) -1)
+    _procs_GL_NV_fence.glIsFenceNV =
+      (GdkGLProc_glIsFenceNV) gdk_gl_get_proc_address ("glIsFenceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsFenceNV () - %s",
+               (_procs_GL_NV_fence.glIsFenceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fence.glIsFenceNV);
+}
+
+/* glTestFenceNV */
+GdkGLProc
+gdk_gl_get_glTestFenceNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fence.glTestFenceNV == (GdkGLProc_glTestFenceNV) -1)
+    _procs_GL_NV_fence.glTestFenceNV =
+      (GdkGLProc_glTestFenceNV) gdk_gl_get_proc_address ("glTestFenceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTestFenceNV () - %s",
+               (_procs_GL_NV_fence.glTestFenceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fence.glTestFenceNV);
+}
+
+/* glGetFenceivNV */
+GdkGLProc
+gdk_gl_get_glGetFenceivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fence.glGetFenceivNV == (GdkGLProc_glGetFenceivNV) -1)
+    _procs_GL_NV_fence.glGetFenceivNV =
+      (GdkGLProc_glGetFenceivNV) gdk_gl_get_proc_address ("glGetFenceivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFenceivNV () - %s",
+               (_procs_GL_NV_fence.glGetFenceivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fence.glGetFenceivNV);
+}
+
+/* glFinishFenceNV */
+GdkGLProc
+gdk_gl_get_glFinishFenceNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fence.glFinishFenceNV == (GdkGLProc_glFinishFenceNV) -1)
+    _procs_GL_NV_fence.glFinishFenceNV =
+      (GdkGLProc_glFinishFenceNV) gdk_gl_get_proc_address ("glFinishFenceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFinishFenceNV () - %s",
+               (_procs_GL_NV_fence.glFinishFenceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fence.glFinishFenceNV);
+}
+
+/* glSetFenceNV */
+GdkGLProc
+gdk_gl_get_glSetFenceNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fence.glSetFenceNV == (GdkGLProc_glSetFenceNV) -1)
+    _procs_GL_NV_fence.glSetFenceNV =
+      (GdkGLProc_glSetFenceNV) gdk_gl_get_proc_address ("glSetFenceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSetFenceNV () - %s",
+               (_procs_GL_NV_fence.glSetFenceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fence.glSetFenceNV);
+}
+
+/* Get GL_NV_fence functions */
+GdkGL_GL_NV_fence *
+gdk_gl_get_GL_NV_fence (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_fence");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDeleteFencesNV () != NULL);
+          supported &= (gdk_gl_get_glGenFencesNV () != NULL);
+          supported &= (gdk_gl_get_glIsFenceNV () != NULL);
+          supported &= (gdk_gl_get_glTestFenceNV () != NULL);
+          supported &= (gdk_gl_get_glGetFenceivNV () != NULL);
+          supported &= (gdk_gl_get_glFinishFenceNV () != NULL);
+          supported &= (gdk_gl_get_glSetFenceNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_fence () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_fence;
+}
+
+/*
+ * GL_NV_evaluators
+ */
+
+static GdkGL_GL_NV_evaluators _procs_GL_NV_evaluators = {
+  (GdkGLProc_glMapControlPointsNV) -1,
+  (GdkGLProc_glMapParameterivNV) -1,
+  (GdkGLProc_glMapParameterfvNV) -1,
+  (GdkGLProc_glGetMapControlPointsNV) -1,
+  (GdkGLProc_glGetMapParameterivNV) -1,
+  (GdkGLProc_glGetMapParameterfvNV) -1,
+  (GdkGLProc_glGetMapAttribParameterivNV) -1,
+  (GdkGLProc_glGetMapAttribParameterfvNV) -1,
+  (GdkGLProc_glEvalMapsNV) -1
+};
+
+/* glMapControlPointsNV */
+GdkGLProc
+gdk_gl_get_glMapControlPointsNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glMapControlPointsNV == (GdkGLProc_glMapControlPointsNV) -1)
+    _procs_GL_NV_evaluators.glMapControlPointsNV =
+      (GdkGLProc_glMapControlPointsNV) gdk_gl_get_proc_address ("glMapControlPointsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMapControlPointsNV () - %s",
+               (_procs_GL_NV_evaluators.glMapControlPointsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glMapControlPointsNV);
+}
+
+/* glMapParameterivNV */
+GdkGLProc
+gdk_gl_get_glMapParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glMapParameterivNV == (GdkGLProc_glMapParameterivNV) -1)
+    _procs_GL_NV_evaluators.glMapParameterivNV =
+      (GdkGLProc_glMapParameterivNV) gdk_gl_get_proc_address ("glMapParameterivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMapParameterivNV () - %s",
+               (_procs_GL_NV_evaluators.glMapParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glMapParameterivNV);
+}
+
+/* glMapParameterfvNV */
+GdkGLProc
+gdk_gl_get_glMapParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glMapParameterfvNV == (GdkGLProc_glMapParameterfvNV) -1)
+    _procs_GL_NV_evaluators.glMapParameterfvNV =
+      (GdkGLProc_glMapParameterfvNV) gdk_gl_get_proc_address ("glMapParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMapParameterfvNV () - %s",
+               (_procs_GL_NV_evaluators.glMapParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glMapParameterfvNV);
+}
+
+/* glGetMapControlPointsNV */
+GdkGLProc
+gdk_gl_get_glGetMapControlPointsNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glGetMapControlPointsNV == (GdkGLProc_glGetMapControlPointsNV) -1)
+    _procs_GL_NV_evaluators.glGetMapControlPointsNV =
+      (GdkGLProc_glGetMapControlPointsNV) gdk_gl_get_proc_address ("glGetMapControlPointsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMapControlPointsNV () - %s",
+               (_procs_GL_NV_evaluators.glGetMapControlPointsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapControlPointsNV);
+}
+
+/* glGetMapParameterivNV */
+GdkGLProc
+gdk_gl_get_glGetMapParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glGetMapParameterivNV == (GdkGLProc_glGetMapParameterivNV) -1)
+    _procs_GL_NV_evaluators.glGetMapParameterivNV =
+      (GdkGLProc_glGetMapParameterivNV) gdk_gl_get_proc_address ("glGetMapParameterivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMapParameterivNV () - %s",
+               (_procs_GL_NV_evaluators.glGetMapParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapParameterivNV);
+}
+
+/* glGetMapParameterfvNV */
+GdkGLProc
+gdk_gl_get_glGetMapParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glGetMapParameterfvNV == (GdkGLProc_glGetMapParameterfvNV) -1)
+    _procs_GL_NV_evaluators.glGetMapParameterfvNV =
+      (GdkGLProc_glGetMapParameterfvNV) gdk_gl_get_proc_address ("glGetMapParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMapParameterfvNV () - %s",
+               (_procs_GL_NV_evaluators.glGetMapParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapParameterfvNV);
+}
+
+/* glGetMapAttribParameterivNV */
+GdkGLProc
+gdk_gl_get_glGetMapAttribParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glGetMapAttribParameterivNV == (GdkGLProc_glGetMapAttribParameterivNV) -1)
+    _procs_GL_NV_evaluators.glGetMapAttribParameterivNV =
+      (GdkGLProc_glGetMapAttribParameterivNV) gdk_gl_get_proc_address ("glGetMapAttribParameterivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMapAttribParameterivNV () - %s",
+               (_procs_GL_NV_evaluators.glGetMapAttribParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapAttribParameterivNV);
+}
+
+/* glGetMapAttribParameterfvNV */
+GdkGLProc
+gdk_gl_get_glGetMapAttribParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glGetMapAttribParameterfvNV == (GdkGLProc_glGetMapAttribParameterfvNV) -1)
+    _procs_GL_NV_evaluators.glGetMapAttribParameterfvNV =
+      (GdkGLProc_glGetMapAttribParameterfvNV) gdk_gl_get_proc_address ("glGetMapAttribParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMapAttribParameterfvNV () - %s",
+               (_procs_GL_NV_evaluators.glGetMapAttribParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapAttribParameterfvNV);
+}
+
+/* glEvalMapsNV */
+GdkGLProc
+gdk_gl_get_glEvalMapsNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_evaluators.glEvalMapsNV == (GdkGLProc_glEvalMapsNV) -1)
+    _procs_GL_NV_evaluators.glEvalMapsNV =
+      (GdkGLProc_glEvalMapsNV) gdk_gl_get_proc_address ("glEvalMapsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glEvalMapsNV () - %s",
+               (_procs_GL_NV_evaluators.glEvalMapsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_evaluators.glEvalMapsNV);
+}
+
+/* Get GL_NV_evaluators functions */
+GdkGL_GL_NV_evaluators *
+gdk_gl_get_GL_NV_evaluators (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_evaluators");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glMapControlPointsNV () != NULL);
+          supported &= (gdk_gl_get_glMapParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glMapParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetMapControlPointsNV () != NULL);
+          supported &= (gdk_gl_get_glGetMapParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glGetMapParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetMapAttribParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glGetMapAttribParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glEvalMapsNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_evaluators () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_evaluators;
+}
+
+/*
+ * GL_NV_register_combiners2
+ */
+
+static GdkGL_GL_NV_register_combiners2 _procs_GL_NV_register_combiners2 = {
+  (GdkGLProc_glCombinerStageParameterfvNV) -1,
+  (GdkGLProc_glGetCombinerStageParameterfvNV) -1
+};
+
+/* glCombinerStageParameterfvNV */
+GdkGLProc
+gdk_gl_get_glCombinerStageParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV == (GdkGLProc_glCombinerStageParameterfvNV) -1)
+    _procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV =
+      (GdkGLProc_glCombinerStageParameterfvNV) gdk_gl_get_proc_address ("glCombinerStageParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCombinerStageParameterfvNV () - %s",
+               (_procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV);
+}
+
+/* glGetCombinerStageParameterfvNV */
+GdkGLProc
+gdk_gl_get_glGetCombinerStageParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV == (GdkGLProc_glGetCombinerStageParameterfvNV) -1)
+    _procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV =
+      (GdkGLProc_glGetCombinerStageParameterfvNV) gdk_gl_get_proc_address ("glGetCombinerStageParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetCombinerStageParameterfvNV () - %s",
+               (_procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV);
+}
+
+/* Get GL_NV_register_combiners2 functions */
+GdkGL_GL_NV_register_combiners2 *
+gdk_gl_get_GL_NV_register_combiners2 (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_register_combiners2");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glCombinerStageParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetCombinerStageParameterfvNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_register_combiners2 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_register_combiners2;
+}
+
+/*
+ * GL_NV_vertex_program
+ */
+
+static GdkGL_GL_NV_vertex_program _procs_GL_NV_vertex_program = {
+  (GdkGLProc_glAreProgramsResidentNV) -1,
+  (GdkGLProc_glBindProgramNV) -1,
+  (GdkGLProc_glDeleteProgramsNV) -1,
+  (GdkGLProc_glExecuteProgramNV) -1,
+  (GdkGLProc_glGenProgramsNV) -1,
+  (GdkGLProc_glGetProgramParameterdvNV) -1,
+  (GdkGLProc_glGetProgramParameterfvNV) -1,
+  (GdkGLProc_glGetProgramivNV) -1,
+  (GdkGLProc_glGetProgramStringNV) -1,
+  (GdkGLProc_glGetTrackMatrixivNV) -1,
+  (GdkGLProc_glGetVertexAttribdvNV) -1,
+  (GdkGLProc_glGetVertexAttribfvNV) -1,
+  (GdkGLProc_glGetVertexAttribivNV) -1,
+  (GdkGLProc_glGetVertexAttribPointervNV) -1,
+  (GdkGLProc_glIsProgramNV) -1,
+  (GdkGLProc_glLoadProgramNV) -1,
+  (GdkGLProc_glProgramParameter4dNV) -1,
+  (GdkGLProc_glProgramParameter4dvNV) -1,
+  (GdkGLProc_glProgramParameter4fNV) -1,
+  (GdkGLProc_glProgramParameter4fvNV) -1,
+  (GdkGLProc_glProgramParameters4dvNV) -1,
+  (GdkGLProc_glProgramParameters4fvNV) -1,
+  (GdkGLProc_glRequestResidentProgramsNV) -1,
+  (GdkGLProc_glTrackMatrixNV) -1,
+  (GdkGLProc_glVertexAttribPointerNV) -1,
+  (GdkGLProc_glVertexAttrib1dNV) -1,
+  (GdkGLProc_glVertexAttrib1dvNV) -1,
+  (GdkGLProc_glVertexAttrib1fNV) -1,
+  (GdkGLProc_glVertexAttrib1fvNV) -1,
+  (GdkGLProc_glVertexAttrib1sNV) -1,
+  (GdkGLProc_glVertexAttrib1svNV) -1,
+  (GdkGLProc_glVertexAttrib2dNV) -1,
+  (GdkGLProc_glVertexAttrib2dvNV) -1,
+  (GdkGLProc_glVertexAttrib2fNV) -1,
+  (GdkGLProc_glVertexAttrib2fvNV) -1,
+  (GdkGLProc_glVertexAttrib2sNV) -1,
+  (GdkGLProc_glVertexAttrib2svNV) -1,
+  (GdkGLProc_glVertexAttrib3dNV) -1,
+  (GdkGLProc_glVertexAttrib3dvNV) -1,
+  (GdkGLProc_glVertexAttrib3fNV) -1,
+  (GdkGLProc_glVertexAttrib3fvNV) -1,
+  (GdkGLProc_glVertexAttrib3sNV) -1,
+  (GdkGLProc_glVertexAttrib3svNV) -1,
+  (GdkGLProc_glVertexAttrib4dNV) -1,
+  (GdkGLProc_glVertexAttrib4dvNV) -1,
+  (GdkGLProc_glVertexAttrib4fNV) -1,
+  (GdkGLProc_glVertexAttrib4fvNV) -1,
+  (GdkGLProc_glVertexAttrib4sNV) -1,
+  (GdkGLProc_glVertexAttrib4svNV) -1,
+  (GdkGLProc_glVertexAttrib4ubNV) -1,
+  (GdkGLProc_glVertexAttrib4ubvNV) -1,
+  (GdkGLProc_glVertexAttribs1dvNV) -1,
+  (GdkGLProc_glVertexAttribs1fvNV) -1,
+  (GdkGLProc_glVertexAttribs1svNV) -1,
+  (GdkGLProc_glVertexAttribs2dvNV) -1,
+  (GdkGLProc_glVertexAttribs2fvNV) -1,
+  (GdkGLProc_glVertexAttribs2svNV) -1,
+  (GdkGLProc_glVertexAttribs3dvNV) -1,
+  (GdkGLProc_glVertexAttribs3fvNV) -1,
+  (GdkGLProc_glVertexAttribs3svNV) -1,
+  (GdkGLProc_glVertexAttribs4dvNV) -1,
+  (GdkGLProc_glVertexAttribs4fvNV) -1,
+  (GdkGLProc_glVertexAttribs4svNV) -1,
+  (GdkGLProc_glVertexAttribs4ubvNV) -1
+};
+
+/* glAreProgramsResidentNV */
+GdkGLProc
+gdk_gl_get_glAreProgramsResidentNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glAreProgramsResidentNV == (GdkGLProc_glAreProgramsResidentNV) -1)
+    _procs_GL_NV_vertex_program.glAreProgramsResidentNV =
+      (GdkGLProc_glAreProgramsResidentNV) gdk_gl_get_proc_address ("glAreProgramsResidentNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glAreProgramsResidentNV () - %s",
+               (_procs_GL_NV_vertex_program.glAreProgramsResidentNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glAreProgramsResidentNV);
+}
+
+/* glBindProgramNV */
+GdkGLProc
+gdk_gl_get_glBindProgramNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glBindProgramNV == (GdkGLProc_glBindProgramNV) -1)
+    _procs_GL_NV_vertex_program.glBindProgramNV =
+      (GdkGLProc_glBindProgramNV) gdk_gl_get_proc_address ("glBindProgramNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindProgramNV () - %s",
+               (_procs_GL_NV_vertex_program.glBindProgramNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glBindProgramNV);
+}
+
+/* glDeleteProgramsNV */
+GdkGLProc
+gdk_gl_get_glDeleteProgramsNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glDeleteProgramsNV == (GdkGLProc_glDeleteProgramsNV) -1)
+    _procs_GL_NV_vertex_program.glDeleteProgramsNV =
+      (GdkGLProc_glDeleteProgramsNV) gdk_gl_get_proc_address ("glDeleteProgramsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteProgramsNV () - %s",
+               (_procs_GL_NV_vertex_program.glDeleteProgramsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glDeleteProgramsNV);
+}
+
+/* glExecuteProgramNV */
+GdkGLProc
+gdk_gl_get_glExecuteProgramNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glExecuteProgramNV == (GdkGLProc_glExecuteProgramNV) -1)
+    _procs_GL_NV_vertex_program.glExecuteProgramNV =
+      (GdkGLProc_glExecuteProgramNV) gdk_gl_get_proc_address ("glExecuteProgramNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glExecuteProgramNV () - %s",
+               (_procs_GL_NV_vertex_program.glExecuteProgramNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glExecuteProgramNV);
+}
+
+/* glGenProgramsNV */
+GdkGLProc
+gdk_gl_get_glGenProgramsNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGenProgramsNV == (GdkGLProc_glGenProgramsNV) -1)
+    _procs_GL_NV_vertex_program.glGenProgramsNV =
+      (GdkGLProc_glGenProgramsNV) gdk_gl_get_proc_address ("glGenProgramsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenProgramsNV () - %s",
+               (_procs_GL_NV_vertex_program.glGenProgramsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGenProgramsNV);
+}
+
+/* glGetProgramParameterdvNV */
+GdkGLProc
+gdk_gl_get_glGetProgramParameterdvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetProgramParameterdvNV == (GdkGLProc_glGetProgramParameterdvNV) -1)
+    _procs_GL_NV_vertex_program.glGetProgramParameterdvNV =
+      (GdkGLProc_glGetProgramParameterdvNV) gdk_gl_get_proc_address ("glGetProgramParameterdvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramParameterdvNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetProgramParameterdvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramParameterdvNV);
+}
+
+/* glGetProgramParameterfvNV */
+GdkGLProc
+gdk_gl_get_glGetProgramParameterfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetProgramParameterfvNV == (GdkGLProc_glGetProgramParameterfvNV) -1)
+    _procs_GL_NV_vertex_program.glGetProgramParameterfvNV =
+      (GdkGLProc_glGetProgramParameterfvNV) gdk_gl_get_proc_address ("glGetProgramParameterfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramParameterfvNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetProgramParameterfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramParameterfvNV);
+}
+
+/* glGetProgramivNV */
+GdkGLProc
+gdk_gl_get_glGetProgramivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetProgramivNV == (GdkGLProc_glGetProgramivNV) -1)
+    _procs_GL_NV_vertex_program.glGetProgramivNV =
+      (GdkGLProc_glGetProgramivNV) gdk_gl_get_proc_address ("glGetProgramivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramivNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetProgramivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramivNV);
+}
+
+/* glGetProgramStringNV */
+GdkGLProc
+gdk_gl_get_glGetProgramStringNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetProgramStringNV == (GdkGLProc_glGetProgramStringNV) -1)
+    _procs_GL_NV_vertex_program.glGetProgramStringNV =
+      (GdkGLProc_glGetProgramStringNV) gdk_gl_get_proc_address ("glGetProgramStringNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramStringNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetProgramStringNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramStringNV);
+}
+
+/* glGetTrackMatrixivNV */
+GdkGLProc
+gdk_gl_get_glGetTrackMatrixivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetTrackMatrixivNV == (GdkGLProc_glGetTrackMatrixivNV) -1)
+    _procs_GL_NV_vertex_program.glGetTrackMatrixivNV =
+      (GdkGLProc_glGetTrackMatrixivNV) gdk_gl_get_proc_address ("glGetTrackMatrixivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetTrackMatrixivNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetTrackMatrixivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetTrackMatrixivNV);
+}
+
+/* glGetVertexAttribdvNV */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribdvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetVertexAttribdvNV == (GdkGLProc_glGetVertexAttribdvNV) -1)
+    _procs_GL_NV_vertex_program.glGetVertexAttribdvNV =
+      (GdkGLProc_glGetVertexAttribdvNV) gdk_gl_get_proc_address ("glGetVertexAttribdvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribdvNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetVertexAttribdvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribdvNV);
+}
+
+/* glGetVertexAttribfvNV */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetVertexAttribfvNV == (GdkGLProc_glGetVertexAttribfvNV) -1)
+    _procs_GL_NV_vertex_program.glGetVertexAttribfvNV =
+      (GdkGLProc_glGetVertexAttribfvNV) gdk_gl_get_proc_address ("glGetVertexAttribfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribfvNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetVertexAttribfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribfvNV);
+}
+
+/* glGetVertexAttribivNV */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetVertexAttribivNV == (GdkGLProc_glGetVertexAttribivNV) -1)
+    _procs_GL_NV_vertex_program.glGetVertexAttribivNV =
+      (GdkGLProc_glGetVertexAttribivNV) gdk_gl_get_proc_address ("glGetVertexAttribivNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribivNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetVertexAttribivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribivNV);
+}
+
+/* glGetVertexAttribPointervNV */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribPointervNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glGetVertexAttribPointervNV == (GdkGLProc_glGetVertexAttribPointervNV) -1)
+    _procs_GL_NV_vertex_program.glGetVertexAttribPointervNV =
+      (GdkGLProc_glGetVertexAttribPointervNV) gdk_gl_get_proc_address ("glGetVertexAttribPointervNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribPointervNV () - %s",
+               (_procs_GL_NV_vertex_program.glGetVertexAttribPointervNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribPointervNV);
+}
+
+/* glIsProgramNV */
+GdkGLProc
+gdk_gl_get_glIsProgramNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glIsProgramNV == (GdkGLProc_glIsProgramNV) -1)
+    _procs_GL_NV_vertex_program.glIsProgramNV =
+      (GdkGLProc_glIsProgramNV) gdk_gl_get_proc_address ("glIsProgramNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsProgramNV () - %s",
+               (_procs_GL_NV_vertex_program.glIsProgramNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glIsProgramNV);
+}
+
+/* glLoadProgramNV */
+GdkGLProc
+gdk_gl_get_glLoadProgramNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glLoadProgramNV == (GdkGLProc_glLoadProgramNV) -1)
+    _procs_GL_NV_vertex_program.glLoadProgramNV =
+      (GdkGLProc_glLoadProgramNV) gdk_gl_get_proc_address ("glLoadProgramNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glLoadProgramNV () - %s",
+               (_procs_GL_NV_vertex_program.glLoadProgramNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glLoadProgramNV);
+}
+
+/* glProgramParameter4dNV */
+GdkGLProc
+gdk_gl_get_glProgramParameter4dNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glProgramParameter4dNV == (GdkGLProc_glProgramParameter4dNV) -1)
+    _procs_GL_NV_vertex_program.glProgramParameter4dNV =
+      (GdkGLProc_glProgramParameter4dNV) gdk_gl_get_proc_address ("glProgramParameter4dNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramParameter4dNV () - %s",
+               (_procs_GL_NV_vertex_program.glProgramParameter4dNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4dNV);
+}
+
+/* glProgramParameter4dvNV */
+GdkGLProc
+gdk_gl_get_glProgramParameter4dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glProgramParameter4dvNV == (GdkGLProc_glProgramParameter4dvNV) -1)
+    _procs_GL_NV_vertex_program.glProgramParameter4dvNV =
+      (GdkGLProc_glProgramParameter4dvNV) gdk_gl_get_proc_address ("glProgramParameter4dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramParameter4dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glProgramParameter4dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4dvNV);
+}
+
+/* glProgramParameter4fNV */
+GdkGLProc
+gdk_gl_get_glProgramParameter4fNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glProgramParameter4fNV == (GdkGLProc_glProgramParameter4fNV) -1)
+    _procs_GL_NV_vertex_program.glProgramParameter4fNV =
+      (GdkGLProc_glProgramParameter4fNV) gdk_gl_get_proc_address ("glProgramParameter4fNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramParameter4fNV () - %s",
+               (_procs_GL_NV_vertex_program.glProgramParameter4fNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4fNV);
+}
+
+/* glProgramParameter4fvNV */
+GdkGLProc
+gdk_gl_get_glProgramParameter4fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glProgramParameter4fvNV == (GdkGLProc_glProgramParameter4fvNV) -1)
+    _procs_GL_NV_vertex_program.glProgramParameter4fvNV =
+      (GdkGLProc_glProgramParameter4fvNV) gdk_gl_get_proc_address ("glProgramParameter4fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramParameter4fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glProgramParameter4fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4fvNV);
+}
+
+/* glProgramParameters4dvNV */
+GdkGLProc
+gdk_gl_get_glProgramParameters4dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glProgramParameters4dvNV == (GdkGLProc_glProgramParameters4dvNV) -1)
+    _procs_GL_NV_vertex_program.glProgramParameters4dvNV =
+      (GdkGLProc_glProgramParameters4dvNV) gdk_gl_get_proc_address ("glProgramParameters4dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramParameters4dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glProgramParameters4dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameters4dvNV);
+}
+
+/* glProgramParameters4fvNV */
+GdkGLProc
+gdk_gl_get_glProgramParameters4fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glProgramParameters4fvNV == (GdkGLProc_glProgramParameters4fvNV) -1)
+    _procs_GL_NV_vertex_program.glProgramParameters4fvNV =
+      (GdkGLProc_glProgramParameters4fvNV) gdk_gl_get_proc_address ("glProgramParameters4fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramParameters4fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glProgramParameters4fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameters4fvNV);
+}
+
+/* glRequestResidentProgramsNV */
+GdkGLProc
+gdk_gl_get_glRequestResidentProgramsNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glRequestResidentProgramsNV == (GdkGLProc_glRequestResidentProgramsNV) -1)
+    _procs_GL_NV_vertex_program.glRequestResidentProgramsNV =
+      (GdkGLProc_glRequestResidentProgramsNV) gdk_gl_get_proc_address ("glRequestResidentProgramsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glRequestResidentProgramsNV () - %s",
+               (_procs_GL_NV_vertex_program.glRequestResidentProgramsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glRequestResidentProgramsNV);
+}
+
+/* glTrackMatrixNV */
+GdkGLProc
+gdk_gl_get_glTrackMatrixNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glTrackMatrixNV == (GdkGLProc_glTrackMatrixNV) -1)
+    _procs_GL_NV_vertex_program.glTrackMatrixNV =
+      (GdkGLProc_glTrackMatrixNV) gdk_gl_get_proc_address ("glTrackMatrixNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTrackMatrixNV () - %s",
+               (_procs_GL_NV_vertex_program.glTrackMatrixNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glTrackMatrixNV);
+}
+
+/* glVertexAttribPointerNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribPointerNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribPointerNV == (GdkGLProc_glVertexAttribPointerNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribPointerNV =
+      (GdkGLProc_glVertexAttribPointerNV) gdk_gl_get_proc_address ("glVertexAttribPointerNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribPointerNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribPointerNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribPointerNV);
+}
+
+/* glVertexAttrib1dNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1dNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib1dNV == (GdkGLProc_glVertexAttrib1dNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib1dNV =
+      (GdkGLProc_glVertexAttrib1dNV) gdk_gl_get_proc_address ("glVertexAttrib1dNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1dNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib1dNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1dNV);
+}
+
+/* glVertexAttrib1dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib1dvNV == (GdkGLProc_glVertexAttrib1dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib1dvNV =
+      (GdkGLProc_glVertexAttrib1dvNV) gdk_gl_get_proc_address ("glVertexAttrib1dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib1dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1dvNV);
+}
+
+/* glVertexAttrib1fNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1fNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib1fNV == (GdkGLProc_glVertexAttrib1fNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib1fNV =
+      (GdkGLProc_glVertexAttrib1fNV) gdk_gl_get_proc_address ("glVertexAttrib1fNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1fNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib1fNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1fNV);
+}
+
+/* glVertexAttrib1fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib1fvNV == (GdkGLProc_glVertexAttrib1fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib1fvNV =
+      (GdkGLProc_glVertexAttrib1fvNV) gdk_gl_get_proc_address ("glVertexAttrib1fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib1fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1fvNV);
+}
+
+/* glVertexAttrib1sNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1sNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib1sNV == (GdkGLProc_glVertexAttrib1sNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib1sNV =
+      (GdkGLProc_glVertexAttrib1sNV) gdk_gl_get_proc_address ("glVertexAttrib1sNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1sNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib1sNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1sNV);
+}
+
+/* glVertexAttrib1svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib1svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib1svNV == (GdkGLProc_glVertexAttrib1svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib1svNV =
+      (GdkGLProc_glVertexAttrib1svNV) gdk_gl_get_proc_address ("glVertexAttrib1svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib1svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib1svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1svNV);
+}
+
+/* glVertexAttrib2dNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2dNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib2dNV == (GdkGLProc_glVertexAttrib2dNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib2dNV =
+      (GdkGLProc_glVertexAttrib2dNV) gdk_gl_get_proc_address ("glVertexAttrib2dNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2dNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib2dNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2dNV);
+}
+
+/* glVertexAttrib2dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib2dvNV == (GdkGLProc_glVertexAttrib2dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib2dvNV =
+      (GdkGLProc_glVertexAttrib2dvNV) gdk_gl_get_proc_address ("glVertexAttrib2dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib2dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2dvNV);
+}
+
+/* glVertexAttrib2fNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2fNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib2fNV == (GdkGLProc_glVertexAttrib2fNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib2fNV =
+      (GdkGLProc_glVertexAttrib2fNV) gdk_gl_get_proc_address ("glVertexAttrib2fNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2fNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib2fNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2fNV);
+}
+
+/* glVertexAttrib2fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib2fvNV == (GdkGLProc_glVertexAttrib2fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib2fvNV =
+      (GdkGLProc_glVertexAttrib2fvNV) gdk_gl_get_proc_address ("glVertexAttrib2fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib2fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2fvNV);
+}
+
+/* glVertexAttrib2sNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2sNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib2sNV == (GdkGLProc_glVertexAttrib2sNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib2sNV =
+      (GdkGLProc_glVertexAttrib2sNV) gdk_gl_get_proc_address ("glVertexAttrib2sNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2sNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib2sNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2sNV);
+}
+
+/* glVertexAttrib2svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib2svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib2svNV == (GdkGLProc_glVertexAttrib2svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib2svNV =
+      (GdkGLProc_glVertexAttrib2svNV) gdk_gl_get_proc_address ("glVertexAttrib2svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib2svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib2svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2svNV);
+}
+
+/* glVertexAttrib3dNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3dNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib3dNV == (GdkGLProc_glVertexAttrib3dNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib3dNV =
+      (GdkGLProc_glVertexAttrib3dNV) gdk_gl_get_proc_address ("glVertexAttrib3dNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3dNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib3dNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3dNV);
+}
+
+/* glVertexAttrib3dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib3dvNV == (GdkGLProc_glVertexAttrib3dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib3dvNV =
+      (GdkGLProc_glVertexAttrib3dvNV) gdk_gl_get_proc_address ("glVertexAttrib3dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib3dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3dvNV);
+}
+
+/* glVertexAttrib3fNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3fNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib3fNV == (GdkGLProc_glVertexAttrib3fNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib3fNV =
+      (GdkGLProc_glVertexAttrib3fNV) gdk_gl_get_proc_address ("glVertexAttrib3fNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3fNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib3fNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3fNV);
+}
+
+/* glVertexAttrib3fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib3fvNV == (GdkGLProc_glVertexAttrib3fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib3fvNV =
+      (GdkGLProc_glVertexAttrib3fvNV) gdk_gl_get_proc_address ("glVertexAttrib3fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib3fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3fvNV);
+}
+
+/* glVertexAttrib3sNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3sNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib3sNV == (GdkGLProc_glVertexAttrib3sNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib3sNV =
+      (GdkGLProc_glVertexAttrib3sNV) gdk_gl_get_proc_address ("glVertexAttrib3sNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3sNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib3sNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3sNV);
+}
+
+/* glVertexAttrib3svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib3svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib3svNV == (GdkGLProc_glVertexAttrib3svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib3svNV =
+      (GdkGLProc_glVertexAttrib3svNV) gdk_gl_get_proc_address ("glVertexAttrib3svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib3svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib3svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3svNV);
+}
+
+/* glVertexAttrib4dNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4dNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4dNV == (GdkGLProc_glVertexAttrib4dNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4dNV =
+      (GdkGLProc_glVertexAttrib4dNV) gdk_gl_get_proc_address ("glVertexAttrib4dNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4dNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4dNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4dNV);
+}
+
+/* glVertexAttrib4dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4dvNV == (GdkGLProc_glVertexAttrib4dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4dvNV =
+      (GdkGLProc_glVertexAttrib4dvNV) gdk_gl_get_proc_address ("glVertexAttrib4dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4dvNV);
+}
+
+/* glVertexAttrib4fNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4fNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4fNV == (GdkGLProc_glVertexAttrib4fNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4fNV =
+      (GdkGLProc_glVertexAttrib4fNV) gdk_gl_get_proc_address ("glVertexAttrib4fNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4fNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4fNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4fNV);
+}
+
+/* glVertexAttrib4fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4fvNV == (GdkGLProc_glVertexAttrib4fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4fvNV =
+      (GdkGLProc_glVertexAttrib4fvNV) gdk_gl_get_proc_address ("glVertexAttrib4fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4fvNV);
+}
+
+/* glVertexAttrib4sNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4sNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4sNV == (GdkGLProc_glVertexAttrib4sNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4sNV =
+      (GdkGLProc_glVertexAttrib4sNV) gdk_gl_get_proc_address ("glVertexAttrib4sNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4sNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4sNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4sNV);
+}
+
+/* glVertexAttrib4svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4svNV == (GdkGLProc_glVertexAttrib4svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4svNV =
+      (GdkGLProc_glVertexAttrib4svNV) gdk_gl_get_proc_address ("glVertexAttrib4svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4svNV);
+}
+
+/* glVertexAttrib4ubNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4ubNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4ubNV == (GdkGLProc_glVertexAttrib4ubNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4ubNV =
+      (GdkGLProc_glVertexAttrib4ubNV) gdk_gl_get_proc_address ("glVertexAttrib4ubNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4ubNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4ubNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4ubNV);
+}
+
+/* glVertexAttrib4ubvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4ubvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttrib4ubvNV == (GdkGLProc_glVertexAttrib4ubvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttrib4ubvNV =
+      (GdkGLProc_glVertexAttrib4ubvNV) gdk_gl_get_proc_address ("glVertexAttrib4ubvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttrib4ubvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttrib4ubvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4ubvNV);
+}
+
+/* glVertexAttribs1dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs1dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs1dvNV == (GdkGLProc_glVertexAttribs1dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs1dvNV =
+      (GdkGLProc_glVertexAttribs1dvNV) gdk_gl_get_proc_address ("glVertexAttribs1dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs1dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs1dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs1dvNV);
+}
+
+/* glVertexAttribs1fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs1fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs1fvNV == (GdkGLProc_glVertexAttribs1fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs1fvNV =
+      (GdkGLProc_glVertexAttribs1fvNV) gdk_gl_get_proc_address ("glVertexAttribs1fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs1fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs1fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs1fvNV);
+}
+
+/* glVertexAttribs1svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs1svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs1svNV == (GdkGLProc_glVertexAttribs1svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs1svNV =
+      (GdkGLProc_glVertexAttribs1svNV) gdk_gl_get_proc_address ("glVertexAttribs1svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs1svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs1svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs1svNV);
+}
+
+/* glVertexAttribs2dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs2dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs2dvNV == (GdkGLProc_glVertexAttribs2dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs2dvNV =
+      (GdkGLProc_glVertexAttribs2dvNV) gdk_gl_get_proc_address ("glVertexAttribs2dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs2dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs2dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs2dvNV);
+}
+
+/* glVertexAttribs2fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs2fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs2fvNV == (GdkGLProc_glVertexAttribs2fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs2fvNV =
+      (GdkGLProc_glVertexAttribs2fvNV) gdk_gl_get_proc_address ("glVertexAttribs2fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs2fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs2fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs2fvNV);
+}
+
+/* glVertexAttribs2svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs2svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs2svNV == (GdkGLProc_glVertexAttribs2svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs2svNV =
+      (GdkGLProc_glVertexAttribs2svNV) gdk_gl_get_proc_address ("glVertexAttribs2svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs2svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs2svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs2svNV);
+}
+
+/* glVertexAttribs3dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs3dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs3dvNV == (GdkGLProc_glVertexAttribs3dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs3dvNV =
+      (GdkGLProc_glVertexAttribs3dvNV) gdk_gl_get_proc_address ("glVertexAttribs3dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs3dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs3dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs3dvNV);
+}
+
+/* glVertexAttribs3fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs3fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs3fvNV == (GdkGLProc_glVertexAttribs3fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs3fvNV =
+      (GdkGLProc_glVertexAttribs3fvNV) gdk_gl_get_proc_address ("glVertexAttribs3fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs3fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs3fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs3fvNV);
+}
+
+/* glVertexAttribs3svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs3svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs3svNV == (GdkGLProc_glVertexAttribs3svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs3svNV =
+      (GdkGLProc_glVertexAttribs3svNV) gdk_gl_get_proc_address ("glVertexAttribs3svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs3svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs3svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs3svNV);
+}
+
+/* glVertexAttribs4dvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs4dvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs4dvNV == (GdkGLProc_glVertexAttribs4dvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs4dvNV =
+      (GdkGLProc_glVertexAttribs4dvNV) gdk_gl_get_proc_address ("glVertexAttribs4dvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs4dvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs4dvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4dvNV);
+}
+
+/* glVertexAttribs4fvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs4fvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs4fvNV == (GdkGLProc_glVertexAttribs4fvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs4fvNV =
+      (GdkGLProc_glVertexAttribs4fvNV) gdk_gl_get_proc_address ("glVertexAttribs4fvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs4fvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs4fvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4fvNV);
+}
+
+/* glVertexAttribs4svNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs4svNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs4svNV == (GdkGLProc_glVertexAttribs4svNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs4svNV =
+      (GdkGLProc_glVertexAttribs4svNV) gdk_gl_get_proc_address ("glVertexAttribs4svNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs4svNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs4svNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4svNV);
+}
+
+/* glVertexAttribs4ubvNV */
+GdkGLProc
+gdk_gl_get_glVertexAttribs4ubvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program.glVertexAttribs4ubvNV == (GdkGLProc_glVertexAttribs4ubvNV) -1)
+    _procs_GL_NV_vertex_program.glVertexAttribs4ubvNV =
+      (GdkGLProc_glVertexAttribs4ubvNV) gdk_gl_get_proc_address ("glVertexAttribs4ubvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribs4ubvNV () - %s",
+               (_procs_GL_NV_vertex_program.glVertexAttribs4ubvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4ubvNV);
+}
+
+/* Get GL_NV_vertex_program functions */
+GdkGL_GL_NV_vertex_program *
+gdk_gl_get_GL_NV_vertex_program (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_vertex_program");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glAreProgramsResidentNV () != NULL);
+          supported &= (gdk_gl_get_glBindProgramNV () != NULL);
+          supported &= (gdk_gl_get_glDeleteProgramsNV () != NULL);
+          supported &= (gdk_gl_get_glExecuteProgramNV () != NULL);
+          supported &= (gdk_gl_get_glGenProgramsNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramParameterdvNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramivNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramStringNV () != NULL);
+          supported &= (gdk_gl_get_glGetTrackMatrixivNV () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribdvNV () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribivNV () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribPointervNV () != NULL);
+          supported &= (gdk_gl_get_glIsProgramNV () != NULL);
+          supported &= (gdk_gl_get_glLoadProgramNV () != NULL);
+          supported &= (gdk_gl_get_glProgramParameter4dNV () != NULL);
+          supported &= (gdk_gl_get_glProgramParameter4dvNV () != NULL);
+          supported &= (gdk_gl_get_glProgramParameter4fNV () != NULL);
+          supported &= (gdk_gl_get_glProgramParameter4fvNV () != NULL);
+          supported &= (gdk_gl_get_glProgramParameters4dvNV () != NULL);
+          supported &= (gdk_gl_get_glProgramParameters4fvNV () != NULL);
+          supported &= (gdk_gl_get_glRequestResidentProgramsNV () != NULL);
+          supported &= (gdk_gl_get_glTrackMatrixNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribPointerNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1dNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1fNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1sNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2dNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2fNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2sNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3dNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3fNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3sNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4dNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4fNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4sNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4ubNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4ubvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs1dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs1fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs1svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs2dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs2fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs2svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs3dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs3fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs3svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs4dvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs4fvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs4svNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs4ubvNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_vertex_program () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_vertex_program;
+}
+
+/*
+ * GL_ATI_envmap_bumpmap
+ */
+
+static GdkGL_GL_ATI_envmap_bumpmap _procs_GL_ATI_envmap_bumpmap = {
+  (GdkGLProc_glTexBumpParameterivATI) -1,
+  (GdkGLProc_glTexBumpParameterfvATI) -1,
+  (GdkGLProc_glGetTexBumpParameterivATI) -1,
+  (GdkGLProc_glGetTexBumpParameterfvATI) -1
+};
+
+/* glTexBumpParameterivATI */
+GdkGLProc
+gdk_gl_get_glTexBumpParameterivATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI == (GdkGLProc_glTexBumpParameterivATI) -1)
+    _procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI =
+      (GdkGLProc_glTexBumpParameterivATI) gdk_gl_get_proc_address ("glTexBumpParameterivATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexBumpParameterivATI () - %s",
+               (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI);
+}
+
+/* glTexBumpParameterfvATI */
+GdkGLProc
+gdk_gl_get_glTexBumpParameterfvATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI == (GdkGLProc_glTexBumpParameterfvATI) -1)
+    _procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI =
+      (GdkGLProc_glTexBumpParameterfvATI) gdk_gl_get_proc_address ("glTexBumpParameterfvATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexBumpParameterfvATI () - %s",
+               (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI);
+}
+
+/* glGetTexBumpParameterivATI */
+GdkGLProc
+gdk_gl_get_glGetTexBumpParameterivATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI == (GdkGLProc_glGetTexBumpParameterivATI) -1)
+    _procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI =
+      (GdkGLProc_glGetTexBumpParameterivATI) gdk_gl_get_proc_address ("glGetTexBumpParameterivATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetTexBumpParameterivATI () - %s",
+               (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI);
+}
+
+/* glGetTexBumpParameterfvATI */
+GdkGLProc
+gdk_gl_get_glGetTexBumpParameterfvATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI == (GdkGLProc_glGetTexBumpParameterfvATI) -1)
+    _procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI =
+      (GdkGLProc_glGetTexBumpParameterfvATI) gdk_gl_get_proc_address ("glGetTexBumpParameterfvATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetTexBumpParameterfvATI () - %s",
+               (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI);
+}
+
+/* Get GL_ATI_envmap_bumpmap functions */
+GdkGL_GL_ATI_envmap_bumpmap *
+gdk_gl_get_GL_ATI_envmap_bumpmap (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ATI_envmap_bumpmap");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexBumpParameterivATI () != NULL);
+          supported &= (gdk_gl_get_glTexBumpParameterfvATI () != NULL);
+          supported &= (gdk_gl_get_glGetTexBumpParameterivATI () != NULL);
+          supported &= (gdk_gl_get_glGetTexBumpParameterfvATI () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ATI_envmap_bumpmap () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ATI_envmap_bumpmap;
+}
+
+/*
+ * GL_ATI_fragment_shader
+ */
+
+static GdkGL_GL_ATI_fragment_shader _procs_GL_ATI_fragment_shader = {
+  (GdkGLProc_glGenFragmentShadersATI) -1,
+  (GdkGLProc_glBindFragmentShaderATI) -1,
+  (GdkGLProc_glDeleteFragmentShaderATI) -1,
+  (GdkGLProc_glBeginFragmentShaderATI) -1,
+  (GdkGLProc_glEndFragmentShaderATI) -1,
+  (GdkGLProc_glPassTexCoordATI) -1,
+  (GdkGLProc_glSampleMapATI) -1,
+  (GdkGLProc_glColorFragmentOp1ATI) -1,
+  (GdkGLProc_glColorFragmentOp2ATI) -1,
+  (GdkGLProc_glColorFragmentOp3ATI) -1,
+  (GdkGLProc_glAlphaFragmentOp1ATI) -1,
+  (GdkGLProc_glAlphaFragmentOp2ATI) -1,
+  (GdkGLProc_glAlphaFragmentOp3ATI) -1,
+  (GdkGLProc_glSetFragmentShaderConstantATI) -1
+};
+
+/* glGenFragmentShadersATI */
+GdkGLProc
+gdk_gl_get_glGenFragmentShadersATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glGenFragmentShadersATI == (GdkGLProc_glGenFragmentShadersATI) -1)
+    _procs_GL_ATI_fragment_shader.glGenFragmentShadersATI =
+      (GdkGLProc_glGenFragmentShadersATI) gdk_gl_get_proc_address ("glGenFragmentShadersATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenFragmentShadersATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glGenFragmentShadersATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glGenFragmentShadersATI);
+}
+
+/* glBindFragmentShaderATI */
+GdkGLProc
+gdk_gl_get_glBindFragmentShaderATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glBindFragmentShaderATI == (GdkGLProc_glBindFragmentShaderATI) -1)
+    _procs_GL_ATI_fragment_shader.glBindFragmentShaderATI =
+      (GdkGLProc_glBindFragmentShaderATI) gdk_gl_get_proc_address ("glBindFragmentShaderATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindFragmentShaderATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glBindFragmentShaderATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glBindFragmentShaderATI);
+}
+
+/* glDeleteFragmentShaderATI */
+GdkGLProc
+gdk_gl_get_glDeleteFragmentShaderATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI == (GdkGLProc_glDeleteFragmentShaderATI) -1)
+    _procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI =
+      (GdkGLProc_glDeleteFragmentShaderATI) gdk_gl_get_proc_address ("glDeleteFragmentShaderATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteFragmentShaderATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI);
+}
+
+/* glBeginFragmentShaderATI */
+GdkGLProc
+gdk_gl_get_glBeginFragmentShaderATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI == (GdkGLProc_glBeginFragmentShaderATI) -1)
+    _procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI =
+      (GdkGLProc_glBeginFragmentShaderATI) gdk_gl_get_proc_address ("glBeginFragmentShaderATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBeginFragmentShaderATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI);
+}
+
+/* glEndFragmentShaderATI */
+GdkGLProc
+gdk_gl_get_glEndFragmentShaderATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glEndFragmentShaderATI == (GdkGLProc_glEndFragmentShaderATI) -1)
+    _procs_GL_ATI_fragment_shader.glEndFragmentShaderATI =
+      (GdkGLProc_glEndFragmentShaderATI) gdk_gl_get_proc_address ("glEndFragmentShaderATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glEndFragmentShaderATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glEndFragmentShaderATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glEndFragmentShaderATI);
+}
+
+/* glPassTexCoordATI */
+GdkGLProc
+gdk_gl_get_glPassTexCoordATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glPassTexCoordATI == (GdkGLProc_glPassTexCoordATI) -1)
+    _procs_GL_ATI_fragment_shader.glPassTexCoordATI =
+      (GdkGLProc_glPassTexCoordATI) gdk_gl_get_proc_address ("glPassTexCoordATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPassTexCoordATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glPassTexCoordATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glPassTexCoordATI);
+}
+
+/* glSampleMapATI */
+GdkGLProc
+gdk_gl_get_glSampleMapATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glSampleMapATI == (GdkGLProc_glSampleMapATI) -1)
+    _procs_GL_ATI_fragment_shader.glSampleMapATI =
+      (GdkGLProc_glSampleMapATI) gdk_gl_get_proc_address ("glSampleMapATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSampleMapATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glSampleMapATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glSampleMapATI);
+}
+
+/* glColorFragmentOp1ATI */
+GdkGLProc
+gdk_gl_get_glColorFragmentOp1ATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI == (GdkGLProc_glColorFragmentOp1ATI) -1)
+    _procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI =
+      (GdkGLProc_glColorFragmentOp1ATI) gdk_gl_get_proc_address ("glColorFragmentOp1ATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorFragmentOp1ATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI);
+}
+
+/* glColorFragmentOp2ATI */
+GdkGLProc
+gdk_gl_get_glColorFragmentOp2ATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI == (GdkGLProc_glColorFragmentOp2ATI) -1)
+    _procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI =
+      (GdkGLProc_glColorFragmentOp2ATI) gdk_gl_get_proc_address ("glColorFragmentOp2ATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorFragmentOp2ATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI);
+}
+
+/* glColorFragmentOp3ATI */
+GdkGLProc
+gdk_gl_get_glColorFragmentOp3ATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI == (GdkGLProc_glColorFragmentOp3ATI) -1)
+    _procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI =
+      (GdkGLProc_glColorFragmentOp3ATI) gdk_gl_get_proc_address ("glColorFragmentOp3ATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glColorFragmentOp3ATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI);
+}
+
+/* glAlphaFragmentOp1ATI */
+GdkGLProc
+gdk_gl_get_glAlphaFragmentOp1ATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI == (GdkGLProc_glAlphaFragmentOp1ATI) -1)
+    _procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI =
+      (GdkGLProc_glAlphaFragmentOp1ATI) gdk_gl_get_proc_address ("glAlphaFragmentOp1ATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glAlphaFragmentOp1ATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI);
+}
+
+/* glAlphaFragmentOp2ATI */
+GdkGLProc
+gdk_gl_get_glAlphaFragmentOp2ATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI == (GdkGLProc_glAlphaFragmentOp2ATI) -1)
+    _procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI =
+      (GdkGLProc_glAlphaFragmentOp2ATI) gdk_gl_get_proc_address ("glAlphaFragmentOp2ATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glAlphaFragmentOp2ATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI);
+}
+
+/* glAlphaFragmentOp3ATI */
+GdkGLProc
+gdk_gl_get_glAlphaFragmentOp3ATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI == (GdkGLProc_glAlphaFragmentOp3ATI) -1)
+    _procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI =
+      (GdkGLProc_glAlphaFragmentOp3ATI) gdk_gl_get_proc_address ("glAlphaFragmentOp3ATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glAlphaFragmentOp3ATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI);
+}
+
+/* glSetFragmentShaderConstantATI */
+GdkGLProc
+gdk_gl_get_glSetFragmentShaderConstantATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI == (GdkGLProc_glSetFragmentShaderConstantATI) -1)
+    _procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI =
+      (GdkGLProc_glSetFragmentShaderConstantATI) gdk_gl_get_proc_address ("glSetFragmentShaderConstantATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSetFragmentShaderConstantATI () - %s",
+               (_procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI);
+}
+
+/* Get GL_ATI_fragment_shader functions */
+GdkGL_GL_ATI_fragment_shader *
+gdk_gl_get_GL_ATI_fragment_shader (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ATI_fragment_shader");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGenFragmentShadersATI () != NULL);
+          supported &= (gdk_gl_get_glBindFragmentShaderATI () != NULL);
+          supported &= (gdk_gl_get_glDeleteFragmentShaderATI () != NULL);
+          supported &= (gdk_gl_get_glBeginFragmentShaderATI () != NULL);
+          supported &= (gdk_gl_get_glEndFragmentShaderATI () != NULL);
+          supported &= (gdk_gl_get_glPassTexCoordATI () != NULL);
+          supported &= (gdk_gl_get_glSampleMapATI () != NULL);
+          supported &= (gdk_gl_get_glColorFragmentOp1ATI () != NULL);
+          supported &= (gdk_gl_get_glColorFragmentOp2ATI () != NULL);
+          supported &= (gdk_gl_get_glColorFragmentOp3ATI () != NULL);
+          supported &= (gdk_gl_get_glAlphaFragmentOp1ATI () != NULL);
+          supported &= (gdk_gl_get_glAlphaFragmentOp2ATI () != NULL);
+          supported &= (gdk_gl_get_glAlphaFragmentOp3ATI () != NULL);
+          supported &= (gdk_gl_get_glSetFragmentShaderConstantATI () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ATI_fragment_shader () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ATI_fragment_shader;
+}
+
+/*
+ * GL_ATI_pn_triangles
+ */
+
+static GdkGL_GL_ATI_pn_triangles _procs_GL_ATI_pn_triangles = {
+  (GdkGLProc_glPNTrianglesiATI) -1,
+  (GdkGLProc_glPNTrianglesfATI) -1
+};
+
+/* glPNTrianglesiATI */
+GdkGLProc
+gdk_gl_get_glPNTrianglesiATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_pn_triangles.glPNTrianglesiATI == (GdkGLProc_glPNTrianglesiATI) -1)
+    _procs_GL_ATI_pn_triangles.glPNTrianglesiATI =
+      (GdkGLProc_glPNTrianglesiATI) gdk_gl_get_proc_address ("glPNTrianglesiATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPNTrianglesiATI () - %s",
+               (_procs_GL_ATI_pn_triangles.glPNTrianglesiATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_pn_triangles.glPNTrianglesiATI);
+}
+
+/* glPNTrianglesfATI */
+GdkGLProc
+gdk_gl_get_glPNTrianglesfATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_pn_triangles.glPNTrianglesfATI == (GdkGLProc_glPNTrianglesfATI) -1)
+    _procs_GL_ATI_pn_triangles.glPNTrianglesfATI =
+      (GdkGLProc_glPNTrianglesfATI) gdk_gl_get_proc_address ("glPNTrianglesfATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPNTrianglesfATI () - %s",
+               (_procs_GL_ATI_pn_triangles.glPNTrianglesfATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_pn_triangles.glPNTrianglesfATI);
+}
+
+/* Get GL_ATI_pn_triangles functions */
+GdkGL_GL_ATI_pn_triangles *
+gdk_gl_get_GL_ATI_pn_triangles (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ATI_pn_triangles");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPNTrianglesiATI () != NULL);
+          supported &= (gdk_gl_get_glPNTrianglesfATI () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ATI_pn_triangles () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ATI_pn_triangles;
+}
+
+/*
+ * GL_ATI_vertex_array_object
+ */
+
+static GdkGL_GL_ATI_vertex_array_object _procs_GL_ATI_vertex_array_object = {
+  (GdkGLProc_glNewObjectBufferATI) -1,
+  (GdkGLProc_glIsObjectBufferATI) -1,
+  (GdkGLProc_glUpdateObjectBufferATI) -1,
+  (GdkGLProc_glGetObjectBufferfvATI) -1,
+  (GdkGLProc_glGetObjectBufferivATI) -1,
+  (GdkGLProc_glFreeObjectBufferATI) -1,
+  (GdkGLProc_glArrayObjectATI) -1,
+  (GdkGLProc_glGetArrayObjectfvATI) -1,
+  (GdkGLProc_glGetArrayObjectivATI) -1,
+  (GdkGLProc_glVariantArrayObjectATI) -1,
+  (GdkGLProc_glGetVariantArrayObjectfvATI) -1,
+  (GdkGLProc_glGetVariantArrayObjectivATI) -1
+};
+
+/* glNewObjectBufferATI */
+GdkGLProc
+gdk_gl_get_glNewObjectBufferATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glNewObjectBufferATI == (GdkGLProc_glNewObjectBufferATI) -1)
+    _procs_GL_ATI_vertex_array_object.glNewObjectBufferATI =
+      (GdkGLProc_glNewObjectBufferATI) gdk_gl_get_proc_address ("glNewObjectBufferATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNewObjectBufferATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glNewObjectBufferATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glNewObjectBufferATI);
+}
+
+/* glIsObjectBufferATI */
+GdkGLProc
+gdk_gl_get_glIsObjectBufferATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glIsObjectBufferATI == (GdkGLProc_glIsObjectBufferATI) -1)
+    _procs_GL_ATI_vertex_array_object.glIsObjectBufferATI =
+      (GdkGLProc_glIsObjectBufferATI) gdk_gl_get_proc_address ("glIsObjectBufferATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsObjectBufferATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glIsObjectBufferATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glIsObjectBufferATI);
+}
+
+/* glUpdateObjectBufferATI */
+GdkGLProc
+gdk_gl_get_glUpdateObjectBufferATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI == (GdkGLProc_glUpdateObjectBufferATI) -1)
+    _procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI =
+      (GdkGLProc_glUpdateObjectBufferATI) gdk_gl_get_proc_address ("glUpdateObjectBufferATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUpdateObjectBufferATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI);
+}
+
+/* glGetObjectBufferfvATI */
+GdkGLProc
+gdk_gl_get_glGetObjectBufferfvATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI == (GdkGLProc_glGetObjectBufferfvATI) -1)
+    _procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI =
+      (GdkGLProc_glGetObjectBufferfvATI) gdk_gl_get_proc_address ("glGetObjectBufferfvATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetObjectBufferfvATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI);
+}
+
+/* glGetObjectBufferivATI */
+GdkGLProc
+gdk_gl_get_glGetObjectBufferivATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI == (GdkGLProc_glGetObjectBufferivATI) -1)
+    _procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI =
+      (GdkGLProc_glGetObjectBufferivATI) gdk_gl_get_proc_address ("glGetObjectBufferivATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetObjectBufferivATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI);
+}
+
+/* glFreeObjectBufferATI */
+GdkGLProc
+gdk_gl_get_glFreeObjectBufferATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI == (GdkGLProc_glFreeObjectBufferATI) -1)
+    _procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI =
+      (GdkGLProc_glFreeObjectBufferATI) gdk_gl_get_proc_address ("glFreeObjectBufferATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFreeObjectBufferATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI);
+}
+
+/* glArrayObjectATI */
+GdkGLProc
+gdk_gl_get_glArrayObjectATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glArrayObjectATI == (GdkGLProc_glArrayObjectATI) -1)
+    _procs_GL_ATI_vertex_array_object.glArrayObjectATI =
+      (GdkGLProc_glArrayObjectATI) gdk_gl_get_proc_address ("glArrayObjectATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glArrayObjectATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glArrayObjectATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glArrayObjectATI);
+}
+
+/* glGetArrayObjectfvATI */
+GdkGLProc
+gdk_gl_get_glGetArrayObjectfvATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI == (GdkGLProc_glGetArrayObjectfvATI) -1)
+    _procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI =
+      (GdkGLProc_glGetArrayObjectfvATI) gdk_gl_get_proc_address ("glGetArrayObjectfvATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetArrayObjectfvATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI);
+}
+
+/* glGetArrayObjectivATI */
+GdkGLProc
+gdk_gl_get_glGetArrayObjectivATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI == (GdkGLProc_glGetArrayObjectivATI) -1)
+    _procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI =
+      (GdkGLProc_glGetArrayObjectivATI) gdk_gl_get_proc_address ("glGetArrayObjectivATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetArrayObjectivATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI);
+}
+
+/* glVariantArrayObjectATI */
+GdkGLProc
+gdk_gl_get_glVariantArrayObjectATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI == (GdkGLProc_glVariantArrayObjectATI) -1)
+    _procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI =
+      (GdkGLProc_glVariantArrayObjectATI) gdk_gl_get_proc_address ("glVariantArrayObjectATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVariantArrayObjectATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI);
+}
+
+/* glGetVariantArrayObjectfvATI */
+GdkGLProc
+gdk_gl_get_glGetVariantArrayObjectfvATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI == (GdkGLProc_glGetVariantArrayObjectfvATI) -1)
+    _procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI =
+      (GdkGLProc_glGetVariantArrayObjectfvATI) gdk_gl_get_proc_address ("glGetVariantArrayObjectfvATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVariantArrayObjectfvATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI);
+}
+
+/* glGetVariantArrayObjectivATI */
+GdkGLProc
+gdk_gl_get_glGetVariantArrayObjectivATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI == (GdkGLProc_glGetVariantArrayObjectivATI) -1)
+    _procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI =
+      (GdkGLProc_glGetVariantArrayObjectivATI) gdk_gl_get_proc_address ("glGetVariantArrayObjectivATI");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVariantArrayObjectivATI () - %s",
+               (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI);
+}
+
+/* Get GL_ATI_vertex_array_object functions */
+GdkGL_GL_ATI_vertex_array_object *
+gdk_gl_get_GL_ATI_vertex_array_object (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ATI_vertex_array_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glNewObjectBufferATI () != NULL);
+          supported &= (gdk_gl_get_glIsObjectBufferATI () != NULL);
+          supported &= (gdk_gl_get_glUpdateObjectBufferATI () != NULL);
+          supported &= (gdk_gl_get_glGetObjectBufferfvATI () != NULL);
+          supported &= (gdk_gl_get_glGetObjectBufferivATI () != NULL);
+          supported &= (gdk_gl_get_glFreeObjectBufferATI () != NULL);
+          supported &= (gdk_gl_get_glArrayObjectATI () != NULL);
+          supported &= (gdk_gl_get_glGetArrayObjectfvATI () != NULL);
+          supported &= (gdk_gl_get_glGetArrayObjectivATI () != NULL);
+          supported &= (gdk_gl_get_glVariantArrayObjectATI () != NULL);
+          supported &= (gdk_gl_get_glGetVariantArrayObjectfvATI () != NULL);
+          supported &= (gdk_gl_get_glGetVariantArrayObjectivATI () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_ATI_vertex_array_object () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ATI_vertex_array_object;
+}
+
+/*
+ * GL_EXT_vertex_shader
+ */
+
+static GdkGL_GL_EXT_vertex_shader _procs_GL_EXT_vertex_shader = {
+  (GdkGLProc_glBeginVertexShaderEXT) -1,
+  (GdkGLProc_glEndVertexShaderEXT) -1,
+  (GdkGLProc_glBindVertexShaderEXT) -1,
+  (GdkGLProc_glGenVertexShadersEXT) -1,
+  (GdkGLProc_glDeleteVertexShaderEXT) -1,
+  (GdkGLProc_glShaderOp1EXT) -1,
+  (GdkGLProc_glShaderOp2EXT) -1,
+  (GdkGLProc_glShaderOp3EXT) -1,
+  (GdkGLProc_glSwizzleEXT) -1,
+  (GdkGLProc_glWriteMaskEXT) -1,
+  (GdkGLProc_glInsertComponentEXT) -1,
+  (GdkGLProc_glExtractComponentEXT) -1,
+  (GdkGLProc_glGenSymbolsEXT) -1,
+  (GdkGLProc_glSetInvariantEXT) -1,
+  (GdkGLProc_glSetLocalConstantEXT) -1,
+  (GdkGLProc_glVariantbvEXT) -1,
+  (GdkGLProc_glVariantsvEXT) -1,
+  (GdkGLProc_glVariantivEXT) -1,
+  (GdkGLProc_glVariantfvEXT) -1,
+  (GdkGLProc_glVariantdvEXT) -1,
+  (GdkGLProc_glVariantubvEXT) -1,
+  (GdkGLProc_glVariantusvEXT) -1,
+  (GdkGLProc_glVariantuivEXT) -1,
+  (GdkGLProc_glVariantPointerEXT) -1,
+  (GdkGLProc_glEnableVariantClientStateEXT) -1,
+  (GdkGLProc_glDisableVariantClientStateEXT) -1,
+  (GdkGLProc_glBindLightParameterEXT) -1,
+  (GdkGLProc_glBindMaterialParameterEXT) -1,
+  (GdkGLProc_glBindTexGenParameterEXT) -1,
+  (GdkGLProc_glBindTextureUnitParameterEXT) -1,
+  (GdkGLProc_glBindParameterEXT) -1,
+  (GdkGLProc_glIsVariantEnabledEXT) -1,
+  (GdkGLProc_glGetVariantBooleanvEXT) -1,
+  (GdkGLProc_glGetVariantIntegervEXT) -1,
+  (GdkGLProc_glGetVariantFloatvEXT) -1,
+  (GdkGLProc_glGetVariantPointervEXT) -1,
+  (GdkGLProc_glGetInvariantBooleanvEXT) -1,
+  (GdkGLProc_glGetInvariantIntegervEXT) -1,
+  (GdkGLProc_glGetInvariantFloatvEXT) -1,
+  (GdkGLProc_glGetLocalConstantBooleanvEXT) -1,
+  (GdkGLProc_glGetLocalConstantIntegervEXT) -1,
+  (GdkGLProc_glGetLocalConstantFloatvEXT) -1
+};
+
+/* glBeginVertexShaderEXT */
+GdkGLProc
+gdk_gl_get_glBeginVertexShaderEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT == (GdkGLProc_glBeginVertexShaderEXT) -1)
+    _procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT =
+      (GdkGLProc_glBeginVertexShaderEXT) gdk_gl_get_proc_address ("glBeginVertexShaderEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBeginVertexShaderEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT);
+}
+
+/* glEndVertexShaderEXT */
+GdkGLProc
+gdk_gl_get_glEndVertexShaderEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glEndVertexShaderEXT == (GdkGLProc_glEndVertexShaderEXT) -1)
+    _procs_GL_EXT_vertex_shader.glEndVertexShaderEXT =
+      (GdkGLProc_glEndVertexShaderEXT) gdk_gl_get_proc_address ("glEndVertexShaderEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glEndVertexShaderEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glEndVertexShaderEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glEndVertexShaderEXT);
+}
+
+/* glBindVertexShaderEXT */
+GdkGLProc
+gdk_gl_get_glBindVertexShaderEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glBindVertexShaderEXT == (GdkGLProc_glBindVertexShaderEXT) -1)
+    _procs_GL_EXT_vertex_shader.glBindVertexShaderEXT =
+      (GdkGLProc_glBindVertexShaderEXT) gdk_gl_get_proc_address ("glBindVertexShaderEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindVertexShaderEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glBindVertexShaderEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindVertexShaderEXT);
+}
+
+/* glGenVertexShadersEXT */
+GdkGLProc
+gdk_gl_get_glGenVertexShadersEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glGenVertexShadersEXT == (GdkGLProc_glGenVertexShadersEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGenVertexShadersEXT =
+      (GdkGLProc_glGenVertexShadersEXT) gdk_gl_get_proc_address ("glGenVertexShadersEXT");
 
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenVertexShadersEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGenVertexShadersEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGenVertexShadersEXT);
+}
+
+/* glDeleteVertexShaderEXT */
+GdkGLProc
+gdk_gl_get_glDeleteVertexShaderEXT (void)
+{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_framezoom");
+  if (_procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT == (GdkGLProc_glDeleteVertexShaderEXT) -1)
+    _procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT =
+      (GdkGLProc_glDeleteVertexShaderEXT) gdk_gl_get_proc_address ("glDeleteVertexShaderEXT");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glFrameZoomSGIX () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glDeleteVertexShaderEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT);
+}
+
+/* glShaderOp1EXT */
+GdkGLProc
+gdk_gl_get_glShaderOp1EXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glShaderOp1EXT == (GdkGLProc_glShaderOp1EXT) -1)
+    _procs_GL_EXT_vertex_shader.glShaderOp1EXT =
+      (GdkGLProc_glShaderOp1EXT) gdk_gl_get_proc_address ("glShaderOp1EXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_framezoom () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glShaderOp1EXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glShaderOp1EXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glShaderOp1EXT);
+}
+
+/* glShaderOp2EXT */
+GdkGLProc
+gdk_gl_get_glShaderOp2EXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_SGIX_framezoom;
+  if (_procs_GL_EXT_vertex_shader.glShaderOp2EXT == (GdkGLProc_glShaderOp2EXT) -1)
+    _procs_GL_EXT_vertex_shader.glShaderOp2EXT =
+      (GdkGLProc_glShaderOp2EXT) gdk_gl_get_proc_address ("glShaderOp2EXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glShaderOp2EXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glShaderOp2EXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glShaderOp2EXT);
 }
 
-/*
- * GL_SGIX_tag_sample_buffer
- */
+/* glShaderOp3EXT */
+GdkGLProc
+gdk_gl_get_glShaderOp3EXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_SGIX_tag_sample_buffer _procs_GL_SGIX_tag_sample_buffer = {
-  (GdkGLProc_glTagSampleBufferSGIX) -1
-};
+  if (_procs_GL_EXT_vertex_shader.glShaderOp3EXT == (GdkGLProc_glShaderOp3EXT) -1)
+    _procs_GL_EXT_vertex_shader.glShaderOp3EXT =
+      (GdkGLProc_glShaderOp3EXT) gdk_gl_get_proc_address ("glShaderOp3EXT");
 
-/* glTagSampleBufferSGIX */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glShaderOp3EXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glShaderOp3EXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glShaderOp3EXT);
+}
+
+/* glSwizzleEXT */
 GdkGLProc
-gdk_gl_get_glTagSampleBufferSGIX (void)
+gdk_gl_get_glSwizzleEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX == (GdkGLProc_glTagSampleBufferSGIX) -1)
-    _procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX =
-      (GdkGLProc_glTagSampleBufferSGIX) gdk_gl_get_proc_address ("glTagSampleBufferSGIX");
+  if (_procs_GL_EXT_vertex_shader.glSwizzleEXT == (GdkGLProc_glSwizzleEXT) -1)
+    _procs_GL_EXT_vertex_shader.glSwizzleEXT =
+      (GdkGLProc_glSwizzleEXT) gdk_gl_get_proc_address ("glSwizzleEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTagSampleBufferSGIX () - %s",
-               (_procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSwizzleEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glSwizzleEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_tag_sample_buffer.glTagSampleBufferSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glSwizzleEXT);
 }
 
-/* Get GL_SGIX_tag_sample_buffer functions */
-GdkGL_GL_SGIX_tag_sample_buffer *
-gdk_gl_get_GL_SGIX_tag_sample_buffer (void)
+/* glWriteMaskEXT */
+GdkGLProc
+gdk_gl_get_glWriteMaskEXT (void)
 {
-  static gint supported = -1;
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glWriteMaskEXT == (GdkGLProc_glWriteMaskEXT) -1)
+    _procs_GL_EXT_vertex_shader.glWriteMaskEXT =
+      (GdkGLProc_glWriteMaskEXT) gdk_gl_get_proc_address ("glWriteMaskEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glWriteMaskEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glWriteMaskEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glWriteMaskEXT);
+}
 
+/* glInsertComponentEXT */
+GdkGLProc
+gdk_gl_get_glInsertComponentEXT (void)
+{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_tag_sample_buffer");
+  if (_procs_GL_EXT_vertex_shader.glInsertComponentEXT == (GdkGLProc_glInsertComponentEXT) -1)
+    _procs_GL_EXT_vertex_shader.glInsertComponentEXT =
+      (GdkGLProc_glInsertComponentEXT) gdk_gl_get_proc_address ("glInsertComponentEXT");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTagSampleBufferSGIX () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glInsertComponentEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glInsertComponentEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glInsertComponentEXT);
+}
+
+/* glExtractComponentEXT */
+GdkGLProc
+gdk_gl_get_glExtractComponentEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glExtractComponentEXT == (GdkGLProc_glExtractComponentEXT) -1)
+    _procs_GL_EXT_vertex_shader.glExtractComponentEXT =
+      (GdkGLProc_glExtractComponentEXT) gdk_gl_get_proc_address ("glExtractComponentEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_tag_sample_buffer () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glExtractComponentEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glExtractComponentEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glExtractComponentEXT);
+}
+
+/* glGenSymbolsEXT */
+GdkGLProc
+gdk_gl_get_glGenSymbolsEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_SGIX_tag_sample_buffer;
+  if (_procs_GL_EXT_vertex_shader.glGenSymbolsEXT == (GdkGLProc_glGenSymbolsEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGenSymbolsEXT =
+      (GdkGLProc_glGenSymbolsEXT) gdk_gl_get_proc_address ("glGenSymbolsEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGenSymbolsEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGenSymbolsEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGenSymbolsEXT);
 }
 
-/*
- * GL_SGIX_polynomial_ffd
- */
+/* glSetInvariantEXT */
+GdkGLProc
+gdk_gl_get_glSetInvariantEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_SGIX_polynomial_ffd _procs_GL_SGIX_polynomial_ffd = {
-  (GdkGLProc_glDeformationMap3dSGIX) -1,
-  (GdkGLProc_glDeformationMap3fSGIX) -1,
-  (GdkGLProc_glDeformSGIX) -1,
-  (GdkGLProc_glLoadIdentityDeformationMapSGIX) -1
-};
+  if (_procs_GL_EXT_vertex_shader.glSetInvariantEXT == (GdkGLProc_glSetInvariantEXT) -1)
+    _procs_GL_EXT_vertex_shader.glSetInvariantEXT =
+      (GdkGLProc_glSetInvariantEXT) gdk_gl_get_proc_address ("glSetInvariantEXT");
 
-/* glDeformationMap3dSGIX */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSetInvariantEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glSetInvariantEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glSetInvariantEXT);
+}
+
+/* glSetLocalConstantEXT */
 GdkGLProc
-gdk_gl_get_glDeformationMap3dSGIX (void)
+gdk_gl_get_glSetLocalConstantEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glSetLocalConstantEXT == (GdkGLProc_glSetLocalConstantEXT) -1)
+    _procs_GL_EXT_vertex_shader.glSetLocalConstantEXT =
+      (GdkGLProc_glSetLocalConstantEXT) gdk_gl_get_proc_address ("glSetLocalConstantEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glSetLocalConstantEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glSetLocalConstantEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glSetLocalConstantEXT);
+}
+
+/* glVariantbvEXT */
+GdkGLProc
+gdk_gl_get_glVariantbvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glVariantbvEXT == (GdkGLProc_glVariantbvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantbvEXT =
+      (GdkGLProc_glVariantbvEXT) gdk_gl_get_proc_address ("glVariantbvEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVariantbvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantbvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantbvEXT);
+}
+
+/* glVariantsvEXT */
+GdkGLProc
+gdk_gl_get_glVariantsvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX == (GdkGLProc_glDeformationMap3dSGIX) -1)
-    _procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX =
-      (GdkGLProc_glDeformationMap3dSGIX) gdk_gl_get_proc_address ("glDeformationMap3dSGIX");
+  if (_procs_GL_EXT_vertex_shader.glVariantsvEXT == (GdkGLProc_glVariantsvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantsvEXT =
+      (GdkGLProc_glVariantsvEXT) gdk_gl_get_proc_address ("glVariantsvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeformationMap3dSGIX () - %s",
-               (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVariantsvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantsvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3dSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantsvEXT);
 }
 
-/* glDeformationMap3fSGIX */
+/* glVariantivEXT */
 GdkGLProc
-gdk_gl_get_glDeformationMap3fSGIX (void)
+gdk_gl_get_glVariantivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX == (GdkGLProc_glDeformationMap3fSGIX) -1)
-    _procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX =
-      (GdkGLProc_glDeformationMap3fSGIX) gdk_gl_get_proc_address ("glDeformationMap3fSGIX");
+  if (_procs_GL_EXT_vertex_shader.glVariantivEXT == (GdkGLProc_glVariantivEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantivEXT =
+      (GdkGLProc_glVariantivEXT) gdk_gl_get_proc_address ("glVariantivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeformationMap3fSGIX () - %s",
-               (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVariantivEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glDeformationMap3fSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantivEXT);
 }
 
-/* glDeformSGIX */
+/* glVariantfvEXT */
 GdkGLProc
-gdk_gl_get_glDeformSGIX (void)
+gdk_gl_get_glVariantfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_polynomial_ffd.glDeformSGIX == (GdkGLProc_glDeformSGIX) -1)
-    _procs_GL_SGIX_polynomial_ffd.glDeformSGIX =
-      (GdkGLProc_glDeformSGIX) gdk_gl_get_proc_address ("glDeformSGIX");
+  if (_procs_GL_EXT_vertex_shader.glVariantfvEXT == (GdkGLProc_glVariantfvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantfvEXT =
+      (GdkGLProc_glVariantfvEXT) gdk_gl_get_proc_address ("glVariantfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeformSGIX () - %s",
-               (_procs_GL_SGIX_polynomial_ffd.glDeformSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVariantfvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glDeformSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantfvEXT);
 }
 
-/* glLoadIdentityDeformationMapSGIX */
+/* glVariantdvEXT */
 GdkGLProc
-gdk_gl_get_glLoadIdentityDeformationMapSGIX (void)
+gdk_gl_get_glVariantdvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX == (GdkGLProc_glLoadIdentityDeformationMapSGIX) -1)
-    _procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX =
-      (GdkGLProc_glLoadIdentityDeformationMapSGIX) gdk_gl_get_proc_address ("glLoadIdentityDeformationMapSGIX");
+  if (_procs_GL_EXT_vertex_shader.glVariantdvEXT == (GdkGLProc_glVariantdvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantdvEXT =
+      (GdkGLProc_glVariantdvEXT) gdk_gl_get_proc_address ("glVariantdvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glLoadIdentityDeformationMapSGIX () - %s",
-               (_procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVariantdvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantdvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_polynomial_ffd.glLoadIdentityDeformationMapSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantdvEXT);
 }
 
-/* Get GL_SGIX_polynomial_ffd functions */
-GdkGL_GL_SGIX_polynomial_ffd *
-gdk_gl_get_GL_SGIX_polynomial_ffd (void)
+/* glVariantubvEXT */
+GdkGLProc
+gdk_gl_get_glVariantubvEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_polynomial_ffd");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glDeformationMap3dSGIX () != NULL);
-          supported &= (gdk_gl_get_glDeformationMap3fSGIX () != NULL);
-          supported &= (gdk_gl_get_glDeformSGIX () != NULL);
-          supported &= (gdk_gl_get_glLoadIdentityDeformationMapSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_vertex_shader.glVariantubvEXT == (GdkGLProc_glVariantubvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantubvEXT =
+      (GdkGLProc_glVariantubvEXT) gdk_gl_get_proc_address ("glVariantubvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_polynomial_ffd () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glVariantubvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantubvEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIX_polynomial_ffd;
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantubvEXT);
 }
 
-/*
- * GL_SGIX_reference_plane
- */
-
-static GdkGL_GL_SGIX_reference_plane _procs_GL_SGIX_reference_plane = {
-  (GdkGLProc_glReferencePlaneSGIX) -1
-};
-
-/* glReferencePlaneSGIX */
+/* glVariantusvEXT */
 GdkGLProc
-gdk_gl_get_glReferencePlaneSGIX (void)
+gdk_gl_get_glVariantusvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_reference_plane.glReferencePlaneSGIX == (GdkGLProc_glReferencePlaneSGIX) -1)
-    _procs_GL_SGIX_reference_plane.glReferencePlaneSGIX =
-      (GdkGLProc_glReferencePlaneSGIX) gdk_gl_get_proc_address ("glReferencePlaneSGIX");
+  if (_procs_GL_EXT_vertex_shader.glVariantusvEXT == (GdkGLProc_glVariantusvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantusvEXT =
+      (GdkGLProc_glVariantusvEXT) gdk_gl_get_proc_address ("glVariantusvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReferencePlaneSGIX () - %s",
-               (_procs_GL_SGIX_reference_plane.glReferencePlaneSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVariantusvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantusvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_reference_plane.glReferencePlaneSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantusvEXT);
 }
 
-/* Get GL_SGIX_reference_plane functions */
-GdkGL_GL_SGIX_reference_plane *
-gdk_gl_get_GL_SGIX_reference_plane (void)
+/* glVariantuivEXT */
+GdkGLProc
+gdk_gl_get_glVariantuivEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_reference_plane");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glReferencePlaneSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_vertex_shader.glVariantuivEXT == (GdkGLProc_glVariantuivEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantuivEXT =
+      (GdkGLProc_glVariantuivEXT) gdk_gl_get_proc_address ("glVariantuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_reference_plane () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVariantuivEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantuivEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantuivEXT);
+}
+
+/* glVariantPointerEXT */
+GdkGLProc
+gdk_gl_get_glVariantPointerEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_SGIX_reference_plane;
-}
+  if (_procs_GL_EXT_vertex_shader.glVariantPointerEXT == (GdkGLProc_glVariantPointerEXT) -1)
+    _procs_GL_EXT_vertex_shader.glVariantPointerEXT =
+      (GdkGLProc_glVariantPointerEXT) gdk_gl_get_proc_address ("glVariantPointerEXT");
 
-/*
- * GL_SGIX_flush_raster
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVariantPointerEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glVariantPointerEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_SGIX_flush_raster _procs_GL_SGIX_flush_raster = {
-  (GdkGLProc_glFlushRasterSGIX) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantPointerEXT);
+}
 
-/* glFlushRasterSGIX */
+/* glEnableVariantClientStateEXT */
 GdkGLProc
-gdk_gl_get_glFlushRasterSGIX (void)
+gdk_gl_get_glEnableVariantClientStateEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_flush_raster.glFlushRasterSGIX == (GdkGLProc_glFlushRasterSGIX) -1)
-    _procs_GL_SGIX_flush_raster.glFlushRasterSGIX =
-      (GdkGLProc_glFlushRasterSGIX) gdk_gl_get_proc_address ("glFlushRasterSGIX");
+  if (_procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT == (GdkGLProc_glEnableVariantClientStateEXT) -1)
+    _procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT =
+      (GdkGLProc_glEnableVariantClientStateEXT) gdk_gl_get_proc_address ("glEnableVariantClientStateEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFlushRasterSGIX () - %s",
-               (_procs_GL_SGIX_flush_raster.glFlushRasterSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEnableVariantClientStateEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_flush_raster.glFlushRasterSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT);
 }
 
-/* Get GL_SGIX_flush_raster functions */
-GdkGL_GL_SGIX_flush_raster *
-gdk_gl_get_GL_SGIX_flush_raster (void)
+/* glDisableVariantClientStateEXT */
+GdkGLProc
+gdk_gl_get_glDisableVariantClientStateEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_flush_raster");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glFlushRasterSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT == (GdkGLProc_glDisableVariantClientStateEXT) -1)
+    _procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT =
+      (GdkGLProc_glDisableVariantClientStateEXT) gdk_gl_get_proc_address ("glDisableVariantClientStateEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_flush_raster () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDisableVariantClientStateEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT);
+}
+
+/* glBindLightParameterEXT */
+GdkGLProc
+gdk_gl_get_glBindLightParameterEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_SGIX_flush_raster;
-}
+  if (_procs_GL_EXT_vertex_shader.glBindLightParameterEXT == (GdkGLProc_glBindLightParameterEXT) -1)
+    _procs_GL_EXT_vertex_shader.glBindLightParameterEXT =
+      (GdkGLProc_glBindLightParameterEXT) gdk_gl_get_proc_address ("glBindLightParameterEXT");
 
-/*
- * GL_SGIS_fog_function
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glBindLightParameterEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glBindLightParameterEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_SGIS_fog_function _procs_GL_SGIS_fog_function = {
-  (GdkGLProc_glFogFuncSGIS) -1,
-  (GdkGLProc_glGetFogFuncSGIS) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindLightParameterEXT);
+}
 
-/* glFogFuncSGIS */
+/* glBindMaterialParameterEXT */
 GdkGLProc
-gdk_gl_get_glFogFuncSGIS (void)
+gdk_gl_get_glBindMaterialParameterEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_fog_function.glFogFuncSGIS == (GdkGLProc_glFogFuncSGIS) -1)
-    _procs_GL_SGIS_fog_function.glFogFuncSGIS =
-      (GdkGLProc_glFogFuncSGIS) gdk_gl_get_proc_address ("glFogFuncSGIS");
+  if (_procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT == (GdkGLProc_glBindMaterialParameterEXT) -1)
+    _procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT =
+      (GdkGLProc_glBindMaterialParameterEXT) gdk_gl_get_proc_address ("glBindMaterialParameterEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogFuncSGIS () - %s",
-               (_procs_GL_SGIS_fog_function.glFogFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindMaterialParameterEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_fog_function.glFogFuncSGIS);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT);
 }
 
-/* glGetFogFuncSGIS */
+/* glBindTexGenParameterEXT */
 GdkGLProc
-gdk_gl_get_glGetFogFuncSGIS (void)
+gdk_gl_get_glBindTexGenParameterEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SGIS_fog_function.glGetFogFuncSGIS == (GdkGLProc_glGetFogFuncSGIS) -1)
-    _procs_GL_SGIS_fog_function.glGetFogFuncSGIS =
-      (GdkGLProc_glGetFogFuncSGIS) gdk_gl_get_proc_address ("glGetFogFuncSGIS");
+    return NULL;
+
+  if (_procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT == (GdkGLProc_glBindTexGenParameterEXT) -1)
+    _procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT =
+      (GdkGLProc_glBindTexGenParameterEXT) gdk_gl_get_proc_address ("glBindTexGenParameterEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFogFuncSGIS () - %s",
-               (_procs_GL_SGIS_fog_function.glGetFogFuncSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindTexGenParameterEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_fog_function.glGetFogFuncSGIS);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT);
 }
 
-/* Get GL_SGIS_fog_function functions */
-GdkGL_GL_SGIS_fog_function *
-gdk_gl_get_GL_SGIS_fog_function (void)
+/* glBindTextureUnitParameterEXT */
+GdkGLProc
+gdk_gl_get_glBindTextureUnitParameterEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_fog_function");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glFogFuncSGIS () != NULL);
-          supported &= (gdk_gl_get_glGetFogFuncSGIS () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT == (GdkGLProc_glBindTextureUnitParameterEXT) -1)
+    _procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT =
+      (GdkGLProc_glBindTextureUnitParameterEXT) gdk_gl_get_proc_address ("glBindTextureUnitParameterEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_fog_function () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glBindTextureUnitParameterEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIS_fog_function;
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT);
 }
 
-/*
- * GL_HP_image_transform
- */
-
-static GdkGL_GL_HP_image_transform _procs_GL_HP_image_transform = {
-  (GdkGLProc_glImageTransformParameteriHP) -1,
-  (GdkGLProc_glImageTransformParameterfHP) -1,
-  (GdkGLProc_glImageTransformParameterivHP) -1,
-  (GdkGLProc_glImageTransformParameterfvHP) -1,
-  (GdkGLProc_glGetImageTransformParameterivHP) -1,
-  (GdkGLProc_glGetImageTransformParameterfvHP) -1
-};
-
-/* glImageTransformParameteriHP */
+/* glBindParameterEXT */
 GdkGLProc
-gdk_gl_get_glImageTransformParameteriHP (void)
+gdk_gl_get_glBindParameterEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_HP_image_transform.glImageTransformParameteriHP == (GdkGLProc_glImageTransformParameteriHP) -1)
-    _procs_GL_HP_image_transform.glImageTransformParameteriHP =
-      (GdkGLProc_glImageTransformParameteriHP) gdk_gl_get_proc_address ("glImageTransformParameteriHP");
+  if (_procs_GL_EXT_vertex_shader.glBindParameterEXT == (GdkGLProc_glBindParameterEXT) -1)
+    _procs_GL_EXT_vertex_shader.glBindParameterEXT =
+      (GdkGLProc_glBindParameterEXT) gdk_gl_get_proc_address ("glBindParameterEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glImageTransformParameteriHP () - %s",
-               (_procs_GL_HP_image_transform.glImageTransformParameteriHP) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindParameterEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glBindParameterEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameteriHP);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindParameterEXT);
 }
 
-/* glImageTransformParameterfHP */
+/* glIsVariantEnabledEXT */
 GdkGLProc
-gdk_gl_get_glImageTransformParameterfHP (void)
+gdk_gl_get_glIsVariantEnabledEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_HP_image_transform.glImageTransformParameterfHP == (GdkGLProc_glImageTransformParameterfHP) -1)
-    _procs_GL_HP_image_transform.glImageTransformParameterfHP =
-      (GdkGLProc_glImageTransformParameterfHP) gdk_gl_get_proc_address ("glImageTransformParameterfHP");
+  if (_procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT == (GdkGLProc_glIsVariantEnabledEXT) -1)
+    _procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT =
+      (GdkGLProc_glIsVariantEnabledEXT) gdk_gl_get_proc_address ("glIsVariantEnabledEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glImageTransformParameterfHP () - %s",
-               (_procs_GL_HP_image_transform.glImageTransformParameterfHP) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsVariantEnabledEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameterfHP);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT);
 }
 
-/* glImageTransformParameterivHP */
+/* glGetVariantBooleanvEXT */
 GdkGLProc
-gdk_gl_get_glImageTransformParameterivHP (void)
+gdk_gl_get_glGetVariantBooleanvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_HP_image_transform.glImageTransformParameterivHP == (GdkGLProc_glImageTransformParameterivHP) -1)
-    _procs_GL_HP_image_transform.glImageTransformParameterivHP =
-      (GdkGLProc_glImageTransformParameterivHP) gdk_gl_get_proc_address ("glImageTransformParameterivHP");
+  if (_procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT == (GdkGLProc_glGetVariantBooleanvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT =
+      (GdkGLProc_glGetVariantBooleanvEXT) gdk_gl_get_proc_address ("glGetVariantBooleanvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glImageTransformParameterivHP () - %s",
-               (_procs_GL_HP_image_transform.glImageTransformParameterivHP) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVariantBooleanvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameterivHP);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT);
 }
 
-/* glImageTransformParameterfvHP */
+/* glGetVariantIntegervEXT */
 GdkGLProc
-gdk_gl_get_glImageTransformParameterfvHP (void)
+gdk_gl_get_glGetVariantIntegervEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_HP_image_transform.glImageTransformParameterfvHP == (GdkGLProc_glImageTransformParameterfvHP) -1)
-    _procs_GL_HP_image_transform.glImageTransformParameterfvHP =
-      (GdkGLProc_glImageTransformParameterfvHP) gdk_gl_get_proc_address ("glImageTransformParameterfvHP");
+  if (_procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT == (GdkGLProc_glGetVariantIntegervEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT =
+      (GdkGLProc_glGetVariantIntegervEXT) gdk_gl_get_proc_address ("glGetVariantIntegervEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glImageTransformParameterfvHP () - %s",
-               (_procs_GL_HP_image_transform.glImageTransformParameterfvHP) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVariantIntegervEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_HP_image_transform.glImageTransformParameterfvHP);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT);
 }
 
-/* glGetImageTransformParameterivHP */
+/* glGetVariantFloatvEXT */
 GdkGLProc
-gdk_gl_get_glGetImageTransformParameterivHP (void)
+gdk_gl_get_glGetVariantFloatvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_HP_image_transform.glGetImageTransformParameterivHP == (GdkGLProc_glGetImageTransformParameterivHP) -1)
-    _procs_GL_HP_image_transform.glGetImageTransformParameterivHP =
-      (GdkGLProc_glGetImageTransformParameterivHP) gdk_gl_get_proc_address ("glGetImageTransformParameterivHP");
+  if (_procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT == (GdkGLProc_glGetVariantFloatvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT =
+      (GdkGLProc_glGetVariantFloatvEXT) gdk_gl_get_proc_address ("glGetVariantFloatvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetImageTransformParameterivHP () - %s",
-               (_procs_GL_HP_image_transform.glGetImageTransformParameterivHP) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVariantFloatvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_HP_image_transform.glGetImageTransformParameterivHP);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT);
 }
 
-/* glGetImageTransformParameterfvHP */
+/* glGetVariantPointervEXT */
 GdkGLProc
-gdk_gl_get_glGetImageTransformParameterfvHP (void)
+gdk_gl_get_glGetVariantPointervEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_HP_image_transform.glGetImageTransformParameterfvHP == (GdkGLProc_glGetImageTransformParameterfvHP) -1)
-    _procs_GL_HP_image_transform.glGetImageTransformParameterfvHP =
-      (GdkGLProc_glGetImageTransformParameterfvHP) gdk_gl_get_proc_address ("glGetImageTransformParameterfvHP");
+  if (_procs_GL_EXT_vertex_shader.glGetVariantPointervEXT == (GdkGLProc_glGetVariantPointervEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetVariantPointervEXT =
+      (GdkGLProc_glGetVariantPointervEXT) gdk_gl_get_proc_address ("glGetVariantPointervEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetImageTransformParameterfvHP () - %s",
-               (_procs_GL_HP_image_transform.glGetImageTransformParameterfvHP) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVariantPointervEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetVariantPointervEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_HP_image_transform.glGetImageTransformParameterfvHP);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantPointervEXT);
 }
 
-/* Get GL_HP_image_transform functions */
-GdkGL_GL_HP_image_transform *
-gdk_gl_get_GL_HP_image_transform (void)
+/* glGetInvariantBooleanvEXT */
+GdkGLProc
+gdk_gl_get_glGetInvariantBooleanvEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_HP_image_transform");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glImageTransformParameteriHP () != NULL);
-          supported &= (gdk_gl_get_glImageTransformParameterfHP () != NULL);
-          supported &= (gdk_gl_get_glImageTransformParameterivHP () != NULL);
-          supported &= (gdk_gl_get_glImageTransformParameterfvHP () != NULL);
-          supported &= (gdk_gl_get_glGetImageTransformParameterivHP () != NULL);
-          supported &= (gdk_gl_get_glGetImageTransformParameterfvHP () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT == (GdkGLProc_glGetInvariantBooleanvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT =
+      (GdkGLProc_glGetInvariantBooleanvEXT) gdk_gl_get_proc_address ("glGetInvariantBooleanvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_HP_image_transform () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glGetInvariantBooleanvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_HP_image_transform;
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT);
 }
 
-/*
- * GL_EXT_color_subtable
- */
-
-static GdkGL_GL_EXT_color_subtable _procs_GL_EXT_color_subtable = {
-  (GdkGLProc_glColorSubTableEXT) -1,
-  (GdkGLProc_glCopyColorSubTableEXT) -1
-};
-
-/* glColorSubTableEXT */
+/* glGetInvariantIntegervEXT */
 GdkGLProc
-gdk_gl_get_glColorSubTableEXT (void)
+gdk_gl_get_glGetInvariantIntegervEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_color_subtable.glColorSubTableEXT == (GdkGLProc_glColorSubTableEXT) -1)
-    _procs_GL_EXT_color_subtable.glColorSubTableEXT =
-      (GdkGLProc_glColorSubTableEXT) gdk_gl_get_proc_address ("glColorSubTableEXT");
+  if (_procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT == (GdkGLProc_glGetInvariantIntegervEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT =
+      (GdkGLProc_glGetInvariantIntegervEXT) gdk_gl_get_proc_address ("glGetInvariantIntegervEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorSubTableEXT () - %s",
-               (_procs_GL_EXT_color_subtable.glColorSubTableEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetInvariantIntegervEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_color_subtable.glColorSubTableEXT);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT);
 }
 
-/* glCopyColorSubTableEXT */
+/* glGetInvariantFloatvEXT */
 GdkGLProc
-gdk_gl_get_glCopyColorSubTableEXT (void)
+gdk_gl_get_glGetInvariantFloatvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_color_subtable.glCopyColorSubTableEXT == (GdkGLProc_glCopyColorSubTableEXT) -1)
-    _procs_GL_EXT_color_subtable.glCopyColorSubTableEXT =
-      (GdkGLProc_glCopyColorSubTableEXT) gdk_gl_get_proc_address ("glCopyColorSubTableEXT");
+  if (_procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT == (GdkGLProc_glGetInvariantFloatvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT =
+      (GdkGLProc_glGetInvariantFloatvEXT) gdk_gl_get_proc_address ("glGetInvariantFloatvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCopyColorSubTableEXT () - %s",
-               (_procs_GL_EXT_color_subtable.glCopyColorSubTableEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetInvariantFloatvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_color_subtable.glCopyColorSubTableEXT);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT);
 }
 
-/* Get GL_EXT_color_subtable functions */
-GdkGL_GL_EXT_color_subtable *
-gdk_gl_get_GL_EXT_color_subtable (void)
+/* glGetLocalConstantBooleanvEXT */
+GdkGLProc
+gdk_gl_get_glGetLocalConstantBooleanvEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_color_subtable");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glColorSubTableEXT () != NULL);
-          supported &= (gdk_gl_get_glCopyColorSubTableEXT () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT == (GdkGLProc_glGetLocalConstantBooleanvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT =
+      (GdkGLProc_glGetLocalConstantBooleanvEXT) gdk_gl_get_proc_address ("glGetLocalConstantBooleanvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_color_subtable () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetLocalConstantBooleanvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT);
+}
+
+/* glGetLocalConstantIntegervEXT */
+GdkGLProc
+gdk_gl_get_glGetLocalConstantIntegervEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_EXT_color_subtable;
-}
+  if (_procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT == (GdkGLProc_glGetLocalConstantIntegervEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT =
+      (GdkGLProc_glGetLocalConstantIntegervEXT) gdk_gl_get_proc_address ("glGetLocalConstantIntegervEXT");
 
-/*
- * GL_PGI_misc_hints
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetLocalConstantIntegervEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_PGI_misc_hints _procs_GL_PGI_misc_hints = {
-  (GdkGLProc_glHintPGI) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT);
+}
 
-/* glHintPGI */
+/* glGetLocalConstantFloatvEXT */
 GdkGLProc
-gdk_gl_get_glHintPGI (void)
+gdk_gl_get_glGetLocalConstantFloatvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_PGI_misc_hints.glHintPGI == (GdkGLProc_glHintPGI) -1)
-    _procs_GL_PGI_misc_hints.glHintPGI =
-      (GdkGLProc_glHintPGI) gdk_gl_get_proc_address ("glHintPGI");
+  if (_procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT == (GdkGLProc_glGetLocalConstantFloatvEXT) -1)
+    _procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT =
+      (GdkGLProc_glGetLocalConstantFloatvEXT) gdk_gl_get_proc_address ("glGetLocalConstantFloatvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glHintPGI () - %s",
-               (_procs_GL_PGI_misc_hints.glHintPGI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetLocalConstantFloatvEXT () - %s",
+               (_procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_PGI_misc_hints.glHintPGI);
+  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT);
 }
 
-/* Get GL_PGI_misc_hints functions */
-GdkGL_GL_PGI_misc_hints *
-gdk_gl_get_GL_PGI_misc_hints (void)
+/* Get GL_EXT_vertex_shader functions */
+GdkGL_GL_EXT_vertex_shader *
+gdk_gl_get_GL_EXT_vertex_shader (void)
 {
   static gint supported = -1;
 
@@ -9292,978 +25150,930 @@ gdk_gl_get_GL_PGI_misc_hints (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_PGI_misc_hints");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_vertex_shader");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glHintPGI () != NULL);
+          supported &= (gdk_gl_get_glBeginVertexShaderEXT () != NULL);
+          supported &= (gdk_gl_get_glEndVertexShaderEXT () != NULL);
+          supported &= (gdk_gl_get_glBindVertexShaderEXT () != NULL);
+          supported &= (gdk_gl_get_glGenVertexShadersEXT () != NULL);
+          supported &= (gdk_gl_get_glDeleteVertexShaderEXT () != NULL);
+          supported &= (gdk_gl_get_glShaderOp1EXT () != NULL);
+          supported &= (gdk_gl_get_glShaderOp2EXT () != NULL);
+          supported &= (gdk_gl_get_glShaderOp3EXT () != NULL);
+          supported &= (gdk_gl_get_glSwizzleEXT () != NULL);
+          supported &= (gdk_gl_get_glWriteMaskEXT () != NULL);
+          supported &= (gdk_gl_get_glInsertComponentEXT () != NULL);
+          supported &= (gdk_gl_get_glExtractComponentEXT () != NULL);
+          supported &= (gdk_gl_get_glGenSymbolsEXT () != NULL);
+          supported &= (gdk_gl_get_glSetInvariantEXT () != NULL);
+          supported &= (gdk_gl_get_glSetLocalConstantEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantbvEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantsvEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantivEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantfvEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantdvEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantubvEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantusvEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantuivEXT () != NULL);
+          supported &= (gdk_gl_get_glVariantPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glEnableVariantClientStateEXT () != NULL);
+          supported &= (gdk_gl_get_glDisableVariantClientStateEXT () != NULL);
+          supported &= (gdk_gl_get_glBindLightParameterEXT () != NULL);
+          supported &= (gdk_gl_get_glBindMaterialParameterEXT () != NULL);
+          supported &= (gdk_gl_get_glBindTexGenParameterEXT () != NULL);
+          supported &= (gdk_gl_get_glBindTextureUnitParameterEXT () != NULL);
+          supported &= (gdk_gl_get_glBindParameterEXT () != NULL);
+          supported &= (gdk_gl_get_glIsVariantEnabledEXT () != NULL);
+          supported &= (gdk_gl_get_glGetVariantBooleanvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetVariantIntegervEXT () != NULL);
+          supported &= (gdk_gl_get_glGetVariantFloatvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetVariantPointervEXT () != NULL);
+          supported &= (gdk_gl_get_glGetInvariantBooleanvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetInvariantIntegervEXT () != NULL);
+          supported &= (gdk_gl_get_glGetInvariantFloatvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetLocalConstantBooleanvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetLocalConstantIntegervEXT () != NULL);
+          supported &= (gdk_gl_get_glGetLocalConstantFloatvEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_PGI_misc_hints () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_vertex_shader () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_PGI_misc_hints;
+  return &_procs_GL_EXT_vertex_shader;
 }
 
 /*
- * GL_EXT_paletted_texture
+ * GL_ATI_vertex_streams
  */
 
-static GdkGL_GL_EXT_paletted_texture _procs_GL_EXT_paletted_texture = {
-  (GdkGLProc_glColorTableEXT) -1,
-  (GdkGLProc_glGetColorTableEXT) -1,
-  (GdkGLProc_glGetColorTableParameterivEXT) -1,
-  (GdkGLProc_glGetColorTableParameterfvEXT) -1
+static GdkGL_GL_ATI_vertex_streams _procs_GL_ATI_vertex_streams = {
+  (GdkGLProc_glVertexStream1sATI) -1,
+  (GdkGLProc_glVertexStream1svATI) -1,
+  (GdkGLProc_glVertexStream1iATI) -1,
+  (GdkGLProc_glVertexStream1ivATI) -1,
+  (GdkGLProc_glVertexStream1fATI) -1,
+  (GdkGLProc_glVertexStream1fvATI) -1,
+  (GdkGLProc_glVertexStream1dATI) -1,
+  (GdkGLProc_glVertexStream1dvATI) -1,
+  (GdkGLProc_glVertexStream2sATI) -1,
+  (GdkGLProc_glVertexStream2svATI) -1,
+  (GdkGLProc_glVertexStream2iATI) -1,
+  (GdkGLProc_glVertexStream2ivATI) -1,
+  (GdkGLProc_glVertexStream2fATI) -1,
+  (GdkGLProc_glVertexStream2fvATI) -1,
+  (GdkGLProc_glVertexStream2dATI) -1,
+  (GdkGLProc_glVertexStream2dvATI) -1,
+  (GdkGLProc_glVertexStream3sATI) -1,
+  (GdkGLProc_glVertexStream3svATI) -1,
+  (GdkGLProc_glVertexStream3iATI) -1,
+  (GdkGLProc_glVertexStream3ivATI) -1,
+  (GdkGLProc_glVertexStream3fATI) -1,
+  (GdkGLProc_glVertexStream3fvATI) -1,
+  (GdkGLProc_glVertexStream3dATI) -1,
+  (GdkGLProc_glVertexStream3dvATI) -1,
+  (GdkGLProc_glVertexStream4sATI) -1,
+  (GdkGLProc_glVertexStream4svATI) -1,
+  (GdkGLProc_glVertexStream4iATI) -1,
+  (GdkGLProc_glVertexStream4ivATI) -1,
+  (GdkGLProc_glVertexStream4fATI) -1,
+  (GdkGLProc_glVertexStream4fvATI) -1,
+  (GdkGLProc_glVertexStream4dATI) -1,
+  (GdkGLProc_glVertexStream4dvATI) -1,
+  (GdkGLProc_glNormalStream3bATI) -1,
+  (GdkGLProc_glNormalStream3bvATI) -1,
+  (GdkGLProc_glNormalStream3sATI) -1,
+  (GdkGLProc_glNormalStream3svATI) -1,
+  (GdkGLProc_glNormalStream3iATI) -1,
+  (GdkGLProc_glNormalStream3ivATI) -1,
+  (GdkGLProc_glNormalStream3fATI) -1,
+  (GdkGLProc_glNormalStream3fvATI) -1,
+  (GdkGLProc_glNormalStream3dATI) -1,
+  (GdkGLProc_glNormalStream3dvATI) -1,
+  (GdkGLProc_glClientActiveVertexStreamATI) -1,
+  (GdkGLProc_glVertexBlendEnviATI) -1,
+  (GdkGLProc_glVertexBlendEnvfATI) -1
 };
 
-/* glColorTableEXT */
+/* glVertexStream1sATI */
 GdkGLProc
-gdk_gl_get_glColorTableEXT (void)
+gdk_gl_get_glVertexStream1sATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_paletted_texture.glColorTableEXT == (GdkGLProc_glColorTableEXT) -1)
-    _procs_GL_EXT_paletted_texture.glColorTableEXT =
-      (GdkGLProc_glColorTableEXT) gdk_gl_get_proc_address ("glColorTableEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1sATI == (GdkGLProc_glVertexStream1sATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1sATI =
+      (GdkGLProc_glVertexStream1sATI) gdk_gl_get_proc_address ("glVertexStream1sATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorTableEXT () - %s",
-               (_procs_GL_EXT_paletted_texture.glColorTableEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream1sATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1sATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glColorTableEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1sATI);
 }
 
-/* glGetColorTableEXT */
+/* glVertexStream1svATI */
 GdkGLProc
-gdk_gl_get_glGetColorTableEXT (void)
+gdk_gl_get_glVertexStream1svATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_paletted_texture.glGetColorTableEXT == (GdkGLProc_glGetColorTableEXT) -1)
-    _procs_GL_EXT_paletted_texture.glGetColorTableEXT =
-      (GdkGLProc_glGetColorTableEXT) gdk_gl_get_proc_address ("glGetColorTableEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1svATI == (GdkGLProc_glVertexStream1svATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1svATI =
+      (GdkGLProc_glVertexStream1svATI) gdk_gl_get_proc_address ("glVertexStream1svATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetColorTableEXT () - %s",
-               (_procs_GL_EXT_paletted_texture.glGetColorTableEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream1svATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1svATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glGetColorTableEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1svATI);
 }
 
-/* glGetColorTableParameterivEXT */
+/* glVertexStream1iATI */
 GdkGLProc
-gdk_gl_get_glGetColorTableParameterivEXT (void)
+gdk_gl_get_glVertexStream1iATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT == (GdkGLProc_glGetColorTableParameterivEXT) -1)
-    _procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT =
-      (GdkGLProc_glGetColorTableParameterivEXT) gdk_gl_get_proc_address ("glGetColorTableParameterivEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1iATI == (GdkGLProc_glVertexStream1iATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1iATI =
+      (GdkGLProc_glVertexStream1iATI) gdk_gl_get_proc_address ("glVertexStream1iATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetColorTableParameterivEXT () - %s",
-               (_procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream1iATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1iATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glGetColorTableParameterivEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1iATI);
 }
 
-/* glGetColorTableParameterfvEXT */
+/* glVertexStream1ivATI */
 GdkGLProc
-gdk_gl_get_glGetColorTableParameterfvEXT (void)
+gdk_gl_get_glVertexStream1ivATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT == (GdkGLProc_glGetColorTableParameterfvEXT) -1)
-    _procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT =
-      (GdkGLProc_glGetColorTableParameterfvEXT) gdk_gl_get_proc_address ("glGetColorTableParameterfvEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1ivATI == (GdkGLProc_glVertexStream1ivATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1ivATI =
+      (GdkGLProc_glVertexStream1ivATI) gdk_gl_get_proc_address ("glVertexStream1ivATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetColorTableParameterfvEXT () - %s",
-               (_procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream1ivATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1ivATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_paletted_texture.glGetColorTableParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1ivATI);
 }
 
-/* Get GL_EXT_paletted_texture functions */
-GdkGL_GL_EXT_paletted_texture *
-gdk_gl_get_GL_EXT_paletted_texture (void)
+/* glVertexStream1fATI */
+GdkGLProc
+gdk_gl_get_glVertexStream1fATI (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_paletted_texture");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glColorTableEXT () != NULL);
-          supported &= (gdk_gl_get_glGetColorTableEXT () != NULL);
-          supported &= (gdk_gl_get_glGetColorTableParameterivEXT () != NULL);
-          supported &= (gdk_gl_get_glGetColorTableParameterfvEXT () != NULL);
-        }
-    }
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1fATI == (GdkGLProc_glVertexStream1fATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1fATI =
+      (GdkGLProc_glVertexStream1fATI) gdk_gl_get_proc_address ("glVertexStream1fATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_paletted_texture () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glVertexStream1fATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1fATI) ? "supported" : "not supported"));
 
-  return &_procs_GL_EXT_paletted_texture;
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1fATI);
 }
 
-/*
- * GL_SGIX_list_priority
- */
-
-static GdkGL_GL_SGIX_list_priority _procs_GL_SGIX_list_priority = {
-  (GdkGLProc_glGetListParameterfvSGIX) -1,
-  (GdkGLProc_glGetListParameterivSGIX) -1,
-  (GdkGLProc_glListParameterfSGIX) -1,
-  (GdkGLProc_glListParameterfvSGIX) -1,
-  (GdkGLProc_glListParameteriSGIX) -1,
-  (GdkGLProc_glListParameterivSGIX) -1
-};
-
-/* glGetListParameterfvSGIX */
+/* glVertexStream1fvATI */
 GdkGLProc
-gdk_gl_get_glGetListParameterfvSGIX (void)
+gdk_gl_get_glVertexStream1fvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_list_priority.glGetListParameterfvSGIX == (GdkGLProc_glGetListParameterfvSGIX) -1)
-    _procs_GL_SGIX_list_priority.glGetListParameterfvSGIX =
-      (GdkGLProc_glGetListParameterfvSGIX) gdk_gl_get_proc_address ("glGetListParameterfvSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1fvATI == (GdkGLProc_glVertexStream1fvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1fvATI =
+      (GdkGLProc_glVertexStream1fvATI) gdk_gl_get_proc_address ("glVertexStream1fvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetListParameterfvSGIX () - %s",
-               (_procs_GL_SGIX_list_priority.glGetListParameterfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream1fvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1fvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glGetListParameterfvSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1fvATI);
 }
 
-/* glGetListParameterivSGIX */
+/* glVertexStream1dATI */
 GdkGLProc
-gdk_gl_get_glGetListParameterivSGIX (void)
+gdk_gl_get_glVertexStream1dATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_list_priority.glGetListParameterivSGIX == (GdkGLProc_glGetListParameterivSGIX) -1)
-    _procs_GL_SGIX_list_priority.glGetListParameterivSGIX =
-      (GdkGLProc_glGetListParameterivSGIX) gdk_gl_get_proc_address ("glGetListParameterivSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1dATI == (GdkGLProc_glVertexStream1dATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1dATI =
+      (GdkGLProc_glVertexStream1dATI) gdk_gl_get_proc_address ("glVertexStream1dATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetListParameterivSGIX () - %s",
-               (_procs_GL_SGIX_list_priority.glGetListParameterivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream1dATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1dATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glGetListParameterivSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1dATI);
 }
 
-/* glListParameterfSGIX */
+/* glVertexStream1dvATI */
 GdkGLProc
-gdk_gl_get_glListParameterfSGIX (void)
+gdk_gl_get_glVertexStream1dvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_list_priority.glListParameterfSGIX == (GdkGLProc_glListParameterfSGIX) -1)
-    _procs_GL_SGIX_list_priority.glListParameterfSGIX =
-      (GdkGLProc_glListParameterfSGIX) gdk_gl_get_proc_address ("glListParameterfSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream1dvATI == (GdkGLProc_glVertexStream1dvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream1dvATI =
+      (GdkGLProc_glVertexStream1dvATI) gdk_gl_get_proc_address ("glVertexStream1dvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glListParameterfSGIX () - %s",
-               (_procs_GL_SGIX_list_priority.glListParameterfSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream1dvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream1dvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameterfSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1dvATI);
 }
 
-/* glListParameterfvSGIX */
+/* glVertexStream2sATI */
 GdkGLProc
-gdk_gl_get_glListParameterfvSGIX (void)
+gdk_gl_get_glVertexStream2sATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_list_priority.glListParameterfvSGIX == (GdkGLProc_glListParameterfvSGIX) -1)
-    _procs_GL_SGIX_list_priority.glListParameterfvSGIX =
-      (GdkGLProc_glListParameterfvSGIX) gdk_gl_get_proc_address ("glListParameterfvSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2sATI == (GdkGLProc_glVertexStream2sATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2sATI =
+      (GdkGLProc_glVertexStream2sATI) gdk_gl_get_proc_address ("glVertexStream2sATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glListParameterfvSGIX () - %s",
-               (_procs_GL_SGIX_list_priority.glListParameterfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream2sATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2sATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameterfvSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2sATI);
 }
 
-/* glListParameteriSGIX */
+/* glVertexStream2svATI */
 GdkGLProc
-gdk_gl_get_glListParameteriSGIX (void)
+gdk_gl_get_glVertexStream2svATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_list_priority.glListParameteriSGIX == (GdkGLProc_glListParameteriSGIX) -1)
-    _procs_GL_SGIX_list_priority.glListParameteriSGIX =
-      (GdkGLProc_glListParameteriSGIX) gdk_gl_get_proc_address ("glListParameteriSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2svATI == (GdkGLProc_glVertexStream2svATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2svATI =
+      (GdkGLProc_glVertexStream2svATI) gdk_gl_get_proc_address ("glVertexStream2svATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glListParameteriSGIX () - %s",
-               (_procs_GL_SGIX_list_priority.glListParameteriSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream2svATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2svATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameteriSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2svATI);
 }
 
-/* glListParameterivSGIX */
+/* glVertexStream2iATI */
 GdkGLProc
-gdk_gl_get_glListParameterivSGIX (void)
+gdk_gl_get_glVertexStream2iATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_list_priority.glListParameterivSGIX == (GdkGLProc_glListParameterivSGIX) -1)
-    _procs_GL_SGIX_list_priority.glListParameterivSGIX =
-      (GdkGLProc_glListParameterivSGIX) gdk_gl_get_proc_address ("glListParameterivSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2iATI == (GdkGLProc_glVertexStream2iATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2iATI =
+      (GdkGLProc_glVertexStream2iATI) gdk_gl_get_proc_address ("glVertexStream2iATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glListParameterivSGIX () - %s",
-               (_procs_GL_SGIX_list_priority.glListParameterivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream2iATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2iATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_list_priority.glListParameterivSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2iATI);
 }
 
-/* Get GL_SGIX_list_priority functions */
-GdkGL_GL_SGIX_list_priority *
-gdk_gl_get_GL_SGIX_list_priority (void)
+/* glVertexStream2ivATI */
+GdkGLProc
+gdk_gl_get_glVertexStream2ivATI (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_list_priority");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glGetListParameterfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glGetListParameterivSGIX () != NULL);
-          supported &= (gdk_gl_get_glListParameterfSGIX () != NULL);
-          supported &= (gdk_gl_get_glListParameterfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glListParameteriSGIX () != NULL);
-          supported &= (gdk_gl_get_glListParameterivSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2ivATI == (GdkGLProc_glVertexStream2ivATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2ivATI =
+      (GdkGLProc_glVertexStream2ivATI) gdk_gl_get_proc_address ("glVertexStream2ivATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_list_priority () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glVertexStream2ivATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2ivATI) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIX_list_priority;
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2ivATI);
 }
 
-/*
- * GL_EXT_index_material
- */
-
-static GdkGL_GL_EXT_index_material _procs_GL_EXT_index_material = {
-  (GdkGLProc_glIndexMaterialEXT) -1
-};
-
-/* glIndexMaterialEXT */
+/* glVertexStream2fATI */
 GdkGLProc
-gdk_gl_get_glIndexMaterialEXT (void)
+gdk_gl_get_glVertexStream2fATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_index_material.glIndexMaterialEXT == (GdkGLProc_glIndexMaterialEXT) -1)
-    _procs_GL_EXT_index_material.glIndexMaterialEXT =
-      (GdkGLProc_glIndexMaterialEXT) gdk_gl_get_proc_address ("glIndexMaterialEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2fATI == (GdkGLProc_glVertexStream2fATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2fATI =
+      (GdkGLProc_glVertexStream2fATI) gdk_gl_get_proc_address ("glVertexStream2fATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIndexMaterialEXT () - %s",
-               (_procs_GL_EXT_index_material.glIndexMaterialEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream2fATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2fATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_index_material.glIndexMaterialEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2fATI);
 }
 
-/* Get GL_EXT_index_material functions */
-GdkGL_GL_EXT_index_material *
-gdk_gl_get_GL_EXT_index_material (void)
+/* glVertexStream2fvATI */
+GdkGLProc
+gdk_gl_get_glVertexStream2fvATI (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_index_material");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glIndexMaterialEXT () != NULL);
-        }
-    }
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2fvATI == (GdkGLProc_glVertexStream2fvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2fvATI =
+      (GdkGLProc_glVertexStream2fvATI) gdk_gl_get_proc_address ("glVertexStream2fvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_index_material () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glVertexStream2fvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2fvATI) ? "supported" : "not supported"));
 
-  return &_procs_GL_EXT_index_material;
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2fvATI);
 }
 
-/*
- * GL_EXT_index_func
- */
-
-static GdkGL_GL_EXT_index_func _procs_GL_EXT_index_func = {
-  (GdkGLProc_glIndexFuncEXT) -1
-};
-
-/* glIndexFuncEXT */
+/* glVertexStream2dATI */
 GdkGLProc
-gdk_gl_get_glIndexFuncEXT (void)
+gdk_gl_get_glVertexStream2dATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_index_func.glIndexFuncEXT == (GdkGLProc_glIndexFuncEXT) -1)
-    _procs_GL_EXT_index_func.glIndexFuncEXT =
-      (GdkGLProc_glIndexFuncEXT) gdk_gl_get_proc_address ("glIndexFuncEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2dATI == (GdkGLProc_glVertexStream2dATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2dATI =
+      (GdkGLProc_glVertexStream2dATI) gdk_gl_get_proc_address ("glVertexStream2dATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIndexFuncEXT () - %s",
-               (_procs_GL_EXT_index_func.glIndexFuncEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream2dATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2dATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_index_func.glIndexFuncEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2dATI);
 }
 
-/* Get GL_EXT_index_func functions */
-GdkGL_GL_EXT_index_func *
-gdk_gl_get_GL_EXT_index_func (void)
+/* glVertexStream2dvATI */
+GdkGLProc
+gdk_gl_get_glVertexStream2dvATI (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_index_func");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glIndexFuncEXT () != NULL);
-        }
-    }
+  if (_procs_GL_ATI_vertex_streams.glVertexStream2dvATI == (GdkGLProc_glVertexStream2dvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream2dvATI =
+      (GdkGLProc_glVertexStream2dvATI) gdk_gl_get_proc_address ("glVertexStream2dvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_index_func () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream2dvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream2dvATI) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2dvATI);
+}
+
+/* glVertexStream3sATI */
+GdkGLProc
+gdk_gl_get_glVertexStream3sATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_EXT_index_func;
-}
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3sATI == (GdkGLProc_glVertexStream3sATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3sATI =
+      (GdkGLProc_glVertexStream3sATI) gdk_gl_get_proc_address ("glVertexStream3sATI");
 
-/*
- * GL_EXT_compiled_vertex_array
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexStream3sATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3sATI) ? "supported" : "not supported"));
 
-static GdkGL_GL_EXT_compiled_vertex_array _procs_GL_EXT_compiled_vertex_array = {
-  (GdkGLProc_glLockArraysEXT) -1,
-  (GdkGLProc_glUnlockArraysEXT) -1
-};
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3sATI);
+}
 
-/* glLockArraysEXT */
+/* glVertexStream3svATI */
 GdkGLProc
-gdk_gl_get_glLockArraysEXT (void)
+gdk_gl_get_glVertexStream3svATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_compiled_vertex_array.glLockArraysEXT == (GdkGLProc_glLockArraysEXT) -1)
-    _procs_GL_EXT_compiled_vertex_array.glLockArraysEXT =
-      (GdkGLProc_glLockArraysEXT) gdk_gl_get_proc_address ("glLockArraysEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3svATI == (GdkGLProc_glVertexStream3svATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3svATI =
+      (GdkGLProc_glVertexStream3svATI) gdk_gl_get_proc_address ("glVertexStream3svATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glLockArraysEXT () - %s",
-               (_procs_GL_EXT_compiled_vertex_array.glLockArraysEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream3svATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3svATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_compiled_vertex_array.glLockArraysEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3svATI);
 }
 
-/* glUnlockArraysEXT */
+/* glVertexStream3iATI */
 GdkGLProc
-gdk_gl_get_glUnlockArraysEXT (void)
+gdk_gl_get_glVertexStream3iATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT == (GdkGLProc_glUnlockArraysEXT) -1)
-    _procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT =
-      (GdkGLProc_glUnlockArraysEXT) gdk_gl_get_proc_address ("glUnlockArraysEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3iATI == (GdkGLProc_glVertexStream3iATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3iATI =
+      (GdkGLProc_glVertexStream3iATI) gdk_gl_get_proc_address ("glVertexStream3iATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glUnlockArraysEXT () - %s",
-               (_procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream3iATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3iATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_compiled_vertex_array.glUnlockArraysEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3iATI);
 }
 
-/* Get GL_EXT_compiled_vertex_array functions */
-GdkGL_GL_EXT_compiled_vertex_array *
-gdk_gl_get_GL_EXT_compiled_vertex_array (void)
+/* glVertexStream3ivATI */
+GdkGLProc
+gdk_gl_get_glVertexStream3ivATI (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_compiled_vertex_array");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glLockArraysEXT () != NULL);
-          supported &= (gdk_gl_get_glUnlockArraysEXT () != NULL);
-        }
-    }
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3ivATI == (GdkGLProc_glVertexStream3ivATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3ivATI =
+      (GdkGLProc_glVertexStream3ivATI) gdk_gl_get_proc_address ("glVertexStream3ivATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_compiled_vertex_array () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream3ivATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3ivATI) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3ivATI);
+}
+
+/* glVertexStream3fATI */
+GdkGLProc
+gdk_gl_get_glVertexStream3fATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_EXT_compiled_vertex_array;
-}
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3fATI == (GdkGLProc_glVertexStream3fATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3fATI =
+      (GdkGLProc_glVertexStream3fATI) gdk_gl_get_proc_address ("glVertexStream3fATI");
 
-/*
- * GL_EXT_cull_vertex
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexStream3fATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3fATI) ? "supported" : "not supported"));
 
-static GdkGL_GL_EXT_cull_vertex _procs_GL_EXT_cull_vertex = {
-  (GdkGLProc_glCullParameterdvEXT) -1,
-  (GdkGLProc_glCullParameterfvEXT) -1
-};
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3fATI);
+}
 
-/* glCullParameterdvEXT */
+/* glVertexStream3fvATI */
 GdkGLProc
-gdk_gl_get_glCullParameterdvEXT (void)
+gdk_gl_get_glVertexStream3fvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_cull_vertex.glCullParameterdvEXT == (GdkGLProc_glCullParameterdvEXT) -1)
-    _procs_GL_EXT_cull_vertex.glCullParameterdvEXT =
-      (GdkGLProc_glCullParameterdvEXT) gdk_gl_get_proc_address ("glCullParameterdvEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3fvATI == (GdkGLProc_glVertexStream3fvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3fvATI =
+      (GdkGLProc_glVertexStream3fvATI) gdk_gl_get_proc_address ("glVertexStream3fvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCullParameterdvEXT () - %s",
-               (_procs_GL_EXT_cull_vertex.glCullParameterdvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream3fvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3fvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_cull_vertex.glCullParameterdvEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3fvATI);
 }
 
-/* glCullParameterfvEXT */
+/* glVertexStream3dATI */
 GdkGLProc
-gdk_gl_get_glCullParameterfvEXT (void)
+gdk_gl_get_glVertexStream3dATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_cull_vertex.glCullParameterfvEXT == (GdkGLProc_glCullParameterfvEXT) -1)
-    _procs_GL_EXT_cull_vertex.glCullParameterfvEXT =
-      (GdkGLProc_glCullParameterfvEXT) gdk_gl_get_proc_address ("glCullParameterfvEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3dATI == (GdkGLProc_glVertexStream3dATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3dATI =
+      (GdkGLProc_glVertexStream3dATI) gdk_gl_get_proc_address ("glVertexStream3dATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCullParameterfvEXT () - %s",
-               (_procs_GL_EXT_cull_vertex.glCullParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream3dATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3dATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_cull_vertex.glCullParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3dATI);
 }
 
-/* Get GL_EXT_cull_vertex functions */
-GdkGL_GL_EXT_cull_vertex *
-gdk_gl_get_GL_EXT_cull_vertex (void)
+/* glVertexStream3dvATI */
+GdkGLProc
+gdk_gl_get_glVertexStream3dvATI (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_cull_vertex");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glCullParameterdvEXT () != NULL);
-          supported &= (gdk_gl_get_glCullParameterfvEXT () != NULL);
-        }
-    }
+  if (_procs_GL_ATI_vertex_streams.glVertexStream3dvATI == (GdkGLProc_glVertexStream3dvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream3dvATI =
+      (GdkGLProc_glVertexStream3dvATI) gdk_gl_get_proc_address ("glVertexStream3dvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_cull_vertex () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream3dvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream3dvATI) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3dvATI);
+}
+
+/* glVertexStream4sATI */
+GdkGLProc
+gdk_gl_get_glVertexStream4sATI (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_EXT_cull_vertex;
-}
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4sATI == (GdkGLProc_glVertexStream4sATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4sATI =
+      (GdkGLProc_glVertexStream4sATI) gdk_gl_get_proc_address ("glVertexStream4sATI");
 
-/*
- * GL_SGIX_fragment_lighting
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexStream4sATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4sATI) ? "supported" : "not supported"));
 
-static GdkGL_GL_SGIX_fragment_lighting _procs_GL_SGIX_fragment_lighting = {
-  (GdkGLProc_glFragmentColorMaterialSGIX) -1,
-  (GdkGLProc_glFragmentLightfSGIX) -1,
-  (GdkGLProc_glFragmentLightfvSGIX) -1,
-  (GdkGLProc_glFragmentLightiSGIX) -1,
-  (GdkGLProc_glFragmentLightivSGIX) -1,
-  (GdkGLProc_glFragmentLightModelfSGIX) -1,
-  (GdkGLProc_glFragmentLightModelfvSGIX) -1,
-  (GdkGLProc_glFragmentLightModeliSGIX) -1,
-  (GdkGLProc_glFragmentLightModelivSGIX) -1,
-  (GdkGLProc_glFragmentMaterialfSGIX) -1,
-  (GdkGLProc_glFragmentMaterialfvSGIX) -1,
-  (GdkGLProc_glFragmentMaterialiSGIX) -1,
-  (GdkGLProc_glFragmentMaterialivSGIX) -1,
-  (GdkGLProc_glGetFragmentLightfvSGIX) -1,
-  (GdkGLProc_glGetFragmentLightivSGIX) -1,
-  (GdkGLProc_glGetFragmentMaterialfvSGIX) -1,
-  (GdkGLProc_glGetFragmentMaterialivSGIX) -1,
-  (GdkGLProc_glLightEnviSGIX) -1
-};
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4sATI);
+}
 
-/* glFragmentColorMaterialSGIX */
+/* glVertexStream4svATI */
 GdkGLProc
-gdk_gl_get_glFragmentColorMaterialSGIX (void)
+gdk_gl_get_glVertexStream4svATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX == (GdkGLProc_glFragmentColorMaterialSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX =
-      (GdkGLProc_glFragmentColorMaterialSGIX) gdk_gl_get_proc_address ("glFragmentColorMaterialSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4svATI == (GdkGLProc_glVertexStream4svATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4svATI =
+      (GdkGLProc_glVertexStream4svATI) gdk_gl_get_proc_address ("glVertexStream4svATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentColorMaterialSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream4svATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4svATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentColorMaterialSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4svATI);
 }
 
-/* glFragmentLightfSGIX */
+/* glVertexStream4iATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightfSGIX (void)
+gdk_gl_get_glVertexStream4iATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX == (GdkGLProc_glFragmentLightfSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX =
-      (GdkGLProc_glFragmentLightfSGIX) gdk_gl_get_proc_address ("glFragmentLightfSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4iATI == (GdkGLProc_glVertexStream4iATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4iATI =
+      (GdkGLProc_glVertexStream4iATI) gdk_gl_get_proc_address ("glVertexStream4iATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightfSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream4iATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4iATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightfSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4iATI);
 }
 
-/* glFragmentLightfvSGIX */
+/* glVertexStream4ivATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightfvSGIX (void)
+gdk_gl_get_glVertexStream4ivATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX == (GdkGLProc_glFragmentLightfvSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX =
-      (GdkGLProc_glFragmentLightfvSGIX) gdk_gl_get_proc_address ("glFragmentLightfvSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4ivATI == (GdkGLProc_glVertexStream4ivATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4ivATI =
+      (GdkGLProc_glVertexStream4ivATI) gdk_gl_get_proc_address ("glVertexStream4ivATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightfvSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream4ivATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4ivATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightfvSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4ivATI);
 }
 
-/* glFragmentLightiSGIX */
+/* glVertexStream4fATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightiSGIX (void)
+gdk_gl_get_glVertexStream4fATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX == (GdkGLProc_glFragmentLightiSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX =
-      (GdkGLProc_glFragmentLightiSGIX) gdk_gl_get_proc_address ("glFragmentLightiSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4fATI == (GdkGLProc_glVertexStream4fATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4fATI =
+      (GdkGLProc_glVertexStream4fATI) gdk_gl_get_proc_address ("glVertexStream4fATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightiSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream4fATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4fATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightiSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4fATI);
 }
 
-/* glFragmentLightivSGIX */
+/* glVertexStream4fvATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightivSGIX (void)
+gdk_gl_get_glVertexStream4fvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX == (GdkGLProc_glFragmentLightivSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX =
-      (GdkGLProc_glFragmentLightivSGIX) gdk_gl_get_proc_address ("glFragmentLightivSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4fvATI == (GdkGLProc_glVertexStream4fvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4fvATI =
+      (GdkGLProc_glVertexStream4fvATI) gdk_gl_get_proc_address ("glVertexStream4fvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightivSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream4fvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4fvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightivSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4fvATI);
 }
 
-/* glFragmentLightModelfSGIX */
+/* glVertexStream4dATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightModelfSGIX (void)
+gdk_gl_get_glVertexStream4dATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX == (GdkGLProc_glFragmentLightModelfSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX =
-      (GdkGLProc_glFragmentLightModelfSGIX) gdk_gl_get_proc_address ("glFragmentLightModelfSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4dATI == (GdkGLProc_glVertexStream4dATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4dATI =
+      (GdkGLProc_glVertexStream4dATI) gdk_gl_get_proc_address ("glVertexStream4dATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightModelfSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream4dATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4dATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4dATI);
 }
 
-/* glFragmentLightModelfvSGIX */
+/* glVertexStream4dvATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightModelfvSGIX (void)
+gdk_gl_get_glVertexStream4dvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX == (GdkGLProc_glFragmentLightModelfvSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX =
-      (GdkGLProc_glFragmentLightModelfvSGIX) gdk_gl_get_proc_address ("glFragmentLightModelfvSGIX");
+  if (_procs_GL_ATI_vertex_streams.glVertexStream4dvATI == (GdkGLProc_glVertexStream4dvATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexStream4dvATI =
+      (GdkGLProc_glVertexStream4dvATI) gdk_gl_get_proc_address ("glVertexStream4dvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightModelfvSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexStream4dvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexStream4dvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelfvSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4dvATI);
 }
 
-/* glFragmentLightModeliSGIX */
+/* glNormalStream3bATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightModeliSGIX (void)
+gdk_gl_get_glNormalStream3bATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX == (GdkGLProc_glFragmentLightModeliSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX =
-      (GdkGLProc_glFragmentLightModeliSGIX) gdk_gl_get_proc_address ("glFragmentLightModeliSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3bATI == (GdkGLProc_glNormalStream3bATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3bATI =
+      (GdkGLProc_glNormalStream3bATI) gdk_gl_get_proc_address ("glNormalStream3bATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightModeliSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3bATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3bATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModeliSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3bATI);
 }
 
-/* glFragmentLightModelivSGIX */
+/* glNormalStream3bvATI */
 GdkGLProc
-gdk_gl_get_glFragmentLightModelivSGIX (void)
+gdk_gl_get_glNormalStream3bvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX == (GdkGLProc_glFragmentLightModelivSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX =
-      (GdkGLProc_glFragmentLightModelivSGIX) gdk_gl_get_proc_address ("glFragmentLightModelivSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3bvATI == (GdkGLProc_glNormalStream3bvATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3bvATI =
+      (GdkGLProc_glNormalStream3bvATI) gdk_gl_get_proc_address ("glNormalStream3bvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentLightModelivSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3bvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3bvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentLightModelivSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3bvATI);
 }
 
-/* glFragmentMaterialfSGIX */
+/* glNormalStream3sATI */
 GdkGLProc
-gdk_gl_get_glFragmentMaterialfSGIX (void)
+gdk_gl_get_glNormalStream3sATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX == (GdkGLProc_glFragmentMaterialfSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX =
-      (GdkGLProc_glFragmentMaterialfSGIX) gdk_gl_get_proc_address ("glFragmentMaterialfSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3sATI == (GdkGLProc_glNormalStream3sATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3sATI =
+      (GdkGLProc_glNormalStream3sATI) gdk_gl_get_proc_address ("glNormalStream3sATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentMaterialfSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3sATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3sATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3sATI);
 }
 
-/* glFragmentMaterialfvSGIX */
+/* glNormalStream3svATI */
 GdkGLProc
-gdk_gl_get_glFragmentMaterialfvSGIX (void)
+gdk_gl_get_glNormalStream3svATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX == (GdkGLProc_glFragmentMaterialfvSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX =
-      (GdkGLProc_glFragmentMaterialfvSGIX) gdk_gl_get_proc_address ("glFragmentMaterialfvSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3svATI == (GdkGLProc_glNormalStream3svATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3svATI =
+      (GdkGLProc_glNormalStream3svATI) gdk_gl_get_proc_address ("glNormalStream3svATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentMaterialfvSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3svATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3svATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialfvSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3svATI);
 }
 
-/* glFragmentMaterialiSGIX */
+/* glNormalStream3iATI */
 GdkGLProc
-gdk_gl_get_glFragmentMaterialiSGIX (void)
+gdk_gl_get_glNormalStream3iATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX == (GdkGLProc_glFragmentMaterialiSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX =
-      (GdkGLProc_glFragmentMaterialiSGIX) gdk_gl_get_proc_address ("glFragmentMaterialiSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3iATI == (GdkGLProc_glNormalStream3iATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3iATI =
+      (GdkGLProc_glNormalStream3iATI) gdk_gl_get_proc_address ("glNormalStream3iATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentMaterialiSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3iATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3iATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialiSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3iATI);
 }
 
-/* glFragmentMaterialivSGIX */
+/* glNormalStream3ivATI */
 GdkGLProc
-gdk_gl_get_glFragmentMaterialivSGIX (void)
+gdk_gl_get_glNormalStream3ivATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX == (GdkGLProc_glFragmentMaterialivSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX =
-      (GdkGLProc_glFragmentMaterialivSGIX) gdk_gl_get_proc_address ("glFragmentMaterialivSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3ivATI == (GdkGLProc_glNormalStream3ivATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3ivATI =
+      (GdkGLProc_glNormalStream3ivATI) gdk_gl_get_proc_address ("glNormalStream3ivATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFragmentMaterialivSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3ivATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3ivATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glFragmentMaterialivSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3ivATI);
 }
 
-/* glGetFragmentLightfvSGIX */
+/* glNormalStream3fATI */
 GdkGLProc
-gdk_gl_get_glGetFragmentLightfvSGIX (void)
+gdk_gl_get_glNormalStream3fATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX == (GdkGLProc_glGetFragmentLightfvSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX =
-      (GdkGLProc_glGetFragmentLightfvSGIX) gdk_gl_get_proc_address ("glGetFragmentLightfvSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3fATI == (GdkGLProc_glNormalStream3fATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3fATI =
+      (GdkGLProc_glNormalStream3fATI) gdk_gl_get_proc_address ("glNormalStream3fATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFragmentLightfvSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3fATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3fATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightfvSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3fATI);
 }
 
-/* glGetFragmentLightivSGIX */
+/* glNormalStream3fvATI */
 GdkGLProc
-gdk_gl_get_glGetFragmentLightivSGIX (void)
+gdk_gl_get_glNormalStream3fvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX == (GdkGLProc_glGetFragmentLightivSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX =
-      (GdkGLProc_glGetFragmentLightivSGIX) gdk_gl_get_proc_address ("glGetFragmentLightivSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3fvATI == (GdkGLProc_glNormalStream3fvATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3fvATI =
+      (GdkGLProc_glNormalStream3fvATI) gdk_gl_get_proc_address ("glNormalStream3fvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFragmentLightivSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3fvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3fvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentLightivSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3fvATI);
 }
 
-/* glGetFragmentMaterialfvSGIX */
+/* glNormalStream3dATI */
 GdkGLProc
-gdk_gl_get_glGetFragmentMaterialfvSGIX (void)
+gdk_gl_get_glNormalStream3dATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX == (GdkGLProc_glGetFragmentMaterialfvSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX =
-      (GdkGLProc_glGetFragmentMaterialfvSGIX) gdk_gl_get_proc_address ("glGetFragmentMaterialfvSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3dATI == (GdkGLProc_glNormalStream3dATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3dATI =
+      (GdkGLProc_glNormalStream3dATI) gdk_gl_get_proc_address ("glNormalStream3dATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFragmentMaterialfvSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3dATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3dATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialfvSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3dATI);
 }
 
-/* glGetFragmentMaterialivSGIX */
+/* glNormalStream3dvATI */
 GdkGLProc
-gdk_gl_get_glGetFragmentMaterialivSGIX (void)
+gdk_gl_get_glNormalStream3dvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX == (GdkGLProc_glGetFragmentMaterialivSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX =
-      (GdkGLProc_glGetFragmentMaterialivSGIX) gdk_gl_get_proc_address ("glGetFragmentMaterialivSGIX");
+  if (_procs_GL_ATI_vertex_streams.glNormalStream3dvATI == (GdkGLProc_glNormalStream3dvATI) -1)
+    _procs_GL_ATI_vertex_streams.glNormalStream3dvATI =
+      (GdkGLProc_glNormalStream3dvATI) gdk_gl_get_proc_address ("glNormalStream3dvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFragmentMaterialivSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormalStream3dvATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glNormalStream3dvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glGetFragmentMaterialivSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3dvATI);
 }
 
-/* glLightEnviSGIX */
+/* glClientActiveVertexStreamATI */
 GdkGLProc
-gdk_gl_get_glLightEnviSGIX (void)
+gdk_gl_get_glClientActiveVertexStreamATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_fragment_lighting.glLightEnviSGIX == (GdkGLProc_glLightEnviSGIX) -1)
-    _procs_GL_SGIX_fragment_lighting.glLightEnviSGIX =
-      (GdkGLProc_glLightEnviSGIX) gdk_gl_get_proc_address ("glLightEnviSGIX");
+  if (_procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI == (GdkGLProc_glClientActiveVertexStreamATI) -1)
+    _procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI =
+      (GdkGLProc_glClientActiveVertexStreamATI) gdk_gl_get_proc_address ("glClientActiveVertexStreamATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glLightEnviSGIX () - %s",
-               (_procs_GL_SGIX_fragment_lighting.glLightEnviSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClientActiveVertexStreamATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_fragment_lighting.glLightEnviSGIX);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI);
 }
 
-/* Get GL_SGIX_fragment_lighting functions */
-GdkGL_GL_SGIX_fragment_lighting *
-gdk_gl_get_GL_SGIX_fragment_lighting (void)
+/* glVertexBlendEnviATI */
+GdkGLProc
+gdk_gl_get_glVertexBlendEnviATI (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_fragment_lighting");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glFragmentColorMaterialSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightfSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightiSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightivSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightModelfSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightModelfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightModeliSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentLightModelivSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentMaterialfSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentMaterialfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentMaterialiSGIX () != NULL);
-          supported &= (gdk_gl_get_glFragmentMaterialivSGIX () != NULL);
-          supported &= (gdk_gl_get_glGetFragmentLightfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glGetFragmentLightivSGIX () != NULL);
-          supported &= (gdk_gl_get_glGetFragmentMaterialfvSGIX () != NULL);
-          supported &= (gdk_gl_get_glGetFragmentMaterialivSGIX () != NULL);
-          supported &= (gdk_gl_get_glLightEnviSGIX () != NULL);
-        }
-    }
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_fragment_lighting () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_SGIX_fragment_lighting;
-}
+  if (_procs_GL_ATI_vertex_streams.glVertexBlendEnviATI == (GdkGLProc_glVertexBlendEnviATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexBlendEnviATI =
+      (GdkGLProc_glVertexBlendEnviATI) gdk_gl_get_proc_address ("glVertexBlendEnviATI");
 
-/*
- * GL_EXT_draw_range_elements
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexBlendEnviATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexBlendEnviATI) ? "supported" : "not supported"));
 
-static GdkGL_GL_EXT_draw_range_elements _procs_GL_EXT_draw_range_elements = {
-  (GdkGLProc_glDrawRangeElementsEXT) -1
-};
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexBlendEnviATI);
+}
 
-/* glDrawRangeElementsEXT */
+/* glVertexBlendEnvfATI */
 GdkGLProc
-gdk_gl_get_glDrawRangeElementsEXT (void)
+gdk_gl_get_glVertexBlendEnvfATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT == (GdkGLProc_glDrawRangeElementsEXT) -1)
-    _procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT =
-      (GdkGLProc_glDrawRangeElementsEXT) gdk_gl_get_proc_address ("glDrawRangeElementsEXT");
+  if (_procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI == (GdkGLProc_glVertexBlendEnvfATI) -1)
+    _procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI =
+      (GdkGLProc_glVertexBlendEnvfATI) gdk_gl_get_proc_address ("glVertexBlendEnvfATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawRangeElementsEXT () - %s",
-               (_procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexBlendEnvfATI () - %s",
+               (_procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_draw_range_elements.glDrawRangeElementsEXT);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI);
 }
 
-/* Get GL_EXT_draw_range_elements functions */
-GdkGL_GL_EXT_draw_range_elements *
-gdk_gl_get_GL_EXT_draw_range_elements (void)
+/* Get GL_ATI_vertex_streams functions */
+GdkGL_GL_ATI_vertex_streams *
+gdk_gl_get_GL_ATI_vertex_streams (void)
 {
   static gint supported = -1;
 
@@ -10272,91 +26082,135 @@ gdk_gl_get_GL_EXT_draw_range_elements (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_draw_range_elements");
+      supported = gdk_gl_query_gl_extension ("GL_ATI_vertex_streams");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glDrawRangeElementsEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1sATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1svATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1iATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1ivATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1fATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1fvATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1dATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream1dvATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2sATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2svATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2iATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2ivATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2fATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2fvATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2dATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream2dvATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3sATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3svATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3iATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3ivATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3fATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3fvATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3dATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream3dvATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4sATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4svATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4iATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4ivATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4fATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4fvATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4dATI () != NULL);
+          supported &= (gdk_gl_get_glVertexStream4dvATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3bATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3bvATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3sATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3svATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3iATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3ivATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3fATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3fvATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3dATI () != NULL);
+          supported &= (gdk_gl_get_glNormalStream3dvATI () != NULL);
+          supported &= (gdk_gl_get_glClientActiveVertexStreamATI () != NULL);
+          supported &= (gdk_gl_get_glVertexBlendEnviATI () != NULL);
+          supported &= (gdk_gl_get_glVertexBlendEnvfATI () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_draw_range_elements () - %s",
+    g_message (" - gdk_gl_get_GL_ATI_vertex_streams () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_draw_range_elements;
+  return &_procs_GL_ATI_vertex_streams;
 }
 
 /*
- * GL_EXT_light_texture
+ * GL_ATI_element_array
  */
 
-static GdkGL_GL_EXT_light_texture _procs_GL_EXT_light_texture = {
-  (GdkGLProc_glApplyTextureEXT) -1,
-  (GdkGLProc_glTextureLightEXT) -1,
-  (GdkGLProc_glTextureMaterialEXT) -1
+static GdkGL_GL_ATI_element_array _procs_GL_ATI_element_array = {
+  (GdkGLProc_glElementPointerATI) -1,
+  (GdkGLProc_glDrawElementArrayATI) -1,
+  (GdkGLProc_glDrawRangeElementArrayATI) -1
 };
 
-/* glApplyTextureEXT */
+/* glElementPointerATI */
 GdkGLProc
-gdk_gl_get_glApplyTextureEXT (void)
+gdk_gl_get_glElementPointerATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_light_texture.glApplyTextureEXT == (GdkGLProc_glApplyTextureEXT) -1)
-    _procs_GL_EXT_light_texture.glApplyTextureEXT =
-      (GdkGLProc_glApplyTextureEXT) gdk_gl_get_proc_address ("glApplyTextureEXT");
+  if (_procs_GL_ATI_element_array.glElementPointerATI == (GdkGLProc_glElementPointerATI) -1)
+    _procs_GL_ATI_element_array.glElementPointerATI =
+      (GdkGLProc_glElementPointerATI) gdk_gl_get_proc_address ("glElementPointerATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glApplyTextureEXT () - %s",
-               (_procs_GL_EXT_light_texture.glApplyTextureEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glElementPointerATI () - %s",
+               (_procs_GL_ATI_element_array.glElementPointerATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_light_texture.glApplyTextureEXT);
+  return (GdkGLProc) (_procs_GL_ATI_element_array.glElementPointerATI);
 }
 
-/* glTextureLightEXT */
+/* glDrawElementArrayATI */
 GdkGLProc
-gdk_gl_get_glTextureLightEXT (void)
+gdk_gl_get_glDrawElementArrayATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_light_texture.glTextureLightEXT == (GdkGLProc_glTextureLightEXT) -1)
-    _procs_GL_EXT_light_texture.glTextureLightEXT =
-      (GdkGLProc_glTextureLightEXT) gdk_gl_get_proc_address ("glTextureLightEXT");
+  if (_procs_GL_ATI_element_array.glDrawElementArrayATI == (GdkGLProc_glDrawElementArrayATI) -1)
+    _procs_GL_ATI_element_array.glDrawElementArrayATI =
+      (GdkGLProc_glDrawElementArrayATI) gdk_gl_get_proc_address ("glDrawElementArrayATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTextureLightEXT () - %s",
-               (_procs_GL_EXT_light_texture.glTextureLightEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawElementArrayATI () - %s",
+               (_procs_GL_ATI_element_array.glDrawElementArrayATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_light_texture.glTextureLightEXT);
+  return (GdkGLProc) (_procs_GL_ATI_element_array.glDrawElementArrayATI);
 }
 
-/* glTextureMaterialEXT */
+/* glDrawRangeElementArrayATI */
 GdkGLProc
-gdk_gl_get_glTextureMaterialEXT (void)
+gdk_gl_get_glDrawRangeElementArrayATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_light_texture.glTextureMaterialEXT == (GdkGLProc_glTextureMaterialEXT) -1)
-    _procs_GL_EXT_light_texture.glTextureMaterialEXT =
-      (GdkGLProc_glTextureMaterialEXT) gdk_gl_get_proc_address ("glTextureMaterialEXT");
+  if (_procs_GL_ATI_element_array.glDrawRangeElementArrayATI == (GdkGLProc_glDrawRangeElementArrayATI) -1)
+    _procs_GL_ATI_element_array.glDrawRangeElementArrayATI =
+      (GdkGLProc_glDrawRangeElementArrayATI) gdk_gl_get_proc_address ("glDrawRangeElementArrayATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTextureMaterialEXT () - %s",
-               (_procs_GL_EXT_light_texture.glTextureMaterialEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawRangeElementArrayATI () - %s",
+               (_procs_GL_ATI_element_array.glDrawRangeElementArrayATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_light_texture.glTextureMaterialEXT);
+  return (GdkGLProc) (_procs_GL_ATI_element_array.glDrawRangeElementArrayATI);
 }
 
-/* Get GL_EXT_light_texture functions */
-GdkGL_GL_EXT_light_texture *
-gdk_gl_get_GL_EXT_light_texture (void)
+/* Get GL_ATI_element_array functions */
+GdkGL_GL_ATI_element_array *
+gdk_gl_get_GL_ATI_element_array (void)
 {
   static gint supported = -1;
 
@@ -10365,267 +26219,224 @@ gdk_gl_get_GL_EXT_light_texture (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_light_texture");
+      supported = gdk_gl_query_gl_extension ("GL_ATI_element_array");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glApplyTextureEXT () != NULL);
-          supported &= (gdk_gl_get_glTextureLightEXT () != NULL);
-          supported &= (gdk_gl_get_glTextureMaterialEXT () != NULL);
+          supported &= (gdk_gl_get_glElementPointerATI () != NULL);
+          supported &= (gdk_gl_get_glDrawElementArrayATI () != NULL);
+          supported &= (gdk_gl_get_glDrawRangeElementArrayATI () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_light_texture () - %s",
+    g_message (" - gdk_gl_get_GL_ATI_element_array () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_light_texture;
+  return &_procs_GL_ATI_element_array;
 }
 
 /*
- * GL_SGIX_async
+ * GL_SUN_mesh_array
  */
 
-static GdkGL_GL_SGIX_async _procs_GL_SGIX_async = {
-  (GdkGLProc_glAsyncMarkerSGIX) -1,
-  (GdkGLProc_glFinishAsyncSGIX) -1,
-  (GdkGLProc_glPollAsyncSGIX) -1,
-  (GdkGLProc_glGenAsyncMarkersSGIX) -1,
-  (GdkGLProc_glDeleteAsyncMarkersSGIX) -1,
-  (GdkGLProc_glIsAsyncMarkerSGIX) -1
+static GdkGL_GL_SUN_mesh_array _procs_GL_SUN_mesh_array = {
+  (GdkGLProc_glDrawMeshArraysSUN) -1
 };
 
-/* glAsyncMarkerSGIX */
+/* glDrawMeshArraysSUN */
 GdkGLProc
-gdk_gl_get_glAsyncMarkerSGIX (void)
+gdk_gl_get_glDrawMeshArraysSUN (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_async.glAsyncMarkerSGIX == (GdkGLProc_glAsyncMarkerSGIX) -1)
-    _procs_GL_SGIX_async.glAsyncMarkerSGIX =
-      (GdkGLProc_glAsyncMarkerSGIX) gdk_gl_get_proc_address ("glAsyncMarkerSGIX");
+  if (_procs_GL_SUN_mesh_array.glDrawMeshArraysSUN == (GdkGLProc_glDrawMeshArraysSUN) -1)
+    _procs_GL_SUN_mesh_array.glDrawMeshArraysSUN =
+      (GdkGLProc_glDrawMeshArraysSUN) gdk_gl_get_proc_address ("glDrawMeshArraysSUN");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glAsyncMarkerSGIX () - %s",
-               (_procs_GL_SGIX_async.glAsyncMarkerSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawMeshArraysSUN () - %s",
+               (_procs_GL_SUN_mesh_array.glDrawMeshArraysSUN) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_async.glAsyncMarkerSGIX);
+  return (GdkGLProc) (_procs_GL_SUN_mesh_array.glDrawMeshArraysSUN);
 }
 
-/* glFinishAsyncSGIX */
-GdkGLProc
-gdk_gl_get_glFinishAsyncSGIX (void)
+/* Get GL_SUN_mesh_array functions */
+GdkGL_GL_SUN_mesh_array *
+gdk_gl_get_GL_SUN_mesh_array (void)
 {
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SGIX_async.glFinishAsyncSGIX == (GdkGLProc_glFinishAsyncSGIX) -1)
-    _procs_GL_SGIX_async.glFinishAsyncSGIX =
-      (GdkGLProc_glFinishAsyncSGIX) gdk_gl_get_proc_address ("glFinishAsyncSGIX");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFinishAsyncSGIX () - %s",
-               (_procs_GL_SGIX_async.glFinishAsyncSGIX) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_SGIX_async.glFinishAsyncSGIX);
-}
+  static gint supported = -1;
 
-/* glPollAsyncSGIX */
-GdkGLProc
-gdk_gl_get_glPollAsyncSGIX (void)
-{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_async.glPollAsyncSGIX == (GdkGLProc_glPollAsyncSGIX) -1)
-    _procs_GL_SGIX_async.glPollAsyncSGIX =
-      (GdkGLProc_glPollAsyncSGIX) gdk_gl_get_proc_address ("glPollAsyncSGIX");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_SUN_mesh_array");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPollAsyncSGIX () - %s",
-               (_procs_GL_SGIX_async.glPollAsyncSGIX) ? "supported" : "not supported"));
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDrawMeshArraysSUN () != NULL);
+        }
+    }
 
-  return (GdkGLProc) (_procs_GL_SGIX_async.glPollAsyncSGIX);
-}
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_SUN_mesh_array () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glGenAsyncMarkersSGIX */
-GdkGLProc
-gdk_gl_get_glGenAsyncMarkersSGIX (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_SGIX_async.glGenAsyncMarkersSGIX == (GdkGLProc_glGenAsyncMarkersSGIX) -1)
-    _procs_GL_SGIX_async.glGenAsyncMarkersSGIX =
-      (GdkGLProc_glGenAsyncMarkersSGIX) gdk_gl_get_proc_address ("glGenAsyncMarkersSGIX");
+  return &_procs_GL_SUN_mesh_array;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenAsyncMarkersSGIX () - %s",
-               (_procs_GL_SGIX_async.glGenAsyncMarkersSGIX) ? "supported" : "not supported"));
+/*
+ * GL_NV_occlusion_query
+ */
 
-  return (GdkGLProc) (_procs_GL_SGIX_async.glGenAsyncMarkersSGIX);
-}
+static GdkGL_GL_NV_occlusion_query _procs_GL_NV_occlusion_query = {
+  (GdkGLProc_glGenOcclusionQueriesNV) -1,
+  (GdkGLProc_glDeleteOcclusionQueriesNV) -1,
+  (GdkGLProc_glIsOcclusionQueryNV) -1,
+  (GdkGLProc_glBeginOcclusionQueryNV) -1,
+  (GdkGLProc_glEndOcclusionQueryNV) -1,
+  (GdkGLProc_glGetOcclusionQueryivNV) -1,
+  (GdkGLProc_glGetOcclusionQueryuivNV) -1
+};
 
-/* glDeleteAsyncMarkersSGIX */
+/* glGenOcclusionQueriesNV */
 GdkGLProc
-gdk_gl_get_glDeleteAsyncMarkersSGIX (void)
+gdk_gl_get_glGenOcclusionQueriesNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX == (GdkGLProc_glDeleteAsyncMarkersSGIX) -1)
-    _procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX =
-      (GdkGLProc_glDeleteAsyncMarkersSGIX) gdk_gl_get_proc_address ("glDeleteAsyncMarkersSGIX");
+  if (_procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV == (GdkGLProc_glGenOcclusionQueriesNV) -1)
+    _procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV =
+      (GdkGLProc_glGenOcclusionQueriesNV) gdk_gl_get_proc_address ("glGenOcclusionQueriesNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteAsyncMarkersSGIX () - %s",
-               (_procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenOcclusionQueriesNV () - %s",
+               (_procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_async.glDeleteAsyncMarkersSGIX);
+  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV);
 }
 
-/* glIsAsyncMarkerSGIX */
+/* glDeleteOcclusionQueriesNV */
 GdkGLProc
-gdk_gl_get_glIsAsyncMarkerSGIX (void)
+gdk_gl_get_glDeleteOcclusionQueriesNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_async.glIsAsyncMarkerSGIX == (GdkGLProc_glIsAsyncMarkerSGIX) -1)
-    _procs_GL_SGIX_async.glIsAsyncMarkerSGIX =
-      (GdkGLProc_glIsAsyncMarkerSGIX) gdk_gl_get_proc_address ("glIsAsyncMarkerSGIX");
+  if (_procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV == (GdkGLProc_glDeleteOcclusionQueriesNV) -1)
+    _procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV =
+      (GdkGLProc_glDeleteOcclusionQueriesNV) gdk_gl_get_proc_address ("glDeleteOcclusionQueriesNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsAsyncMarkerSGIX () - %s",
-               (_procs_GL_SGIX_async.glIsAsyncMarkerSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteOcclusionQueriesNV () - %s",
+               (_procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_async.glIsAsyncMarkerSGIX);
+  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV);
 }
 
-/* Get GL_SGIX_async functions */
-GdkGL_GL_SGIX_async *
-gdk_gl_get_GL_SGIX_async (void)
+/* glIsOcclusionQueryNV */
+GdkGLProc
+gdk_gl_get_glIsOcclusionQueryNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_async");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glAsyncMarkerSGIX () != NULL);
-          supported &= (gdk_gl_get_glFinishAsyncSGIX () != NULL);
-          supported &= (gdk_gl_get_glPollAsyncSGIX () != NULL);
-          supported &= (gdk_gl_get_glGenAsyncMarkersSGIX () != NULL);
-          supported &= (gdk_gl_get_glDeleteAsyncMarkersSGIX () != NULL);
-          supported &= (gdk_gl_get_glIsAsyncMarkerSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_NV_occlusion_query.glIsOcclusionQueryNV == (GdkGLProc_glIsOcclusionQueryNV) -1)
+    _procs_GL_NV_occlusion_query.glIsOcclusionQueryNV =
+      (GdkGLProc_glIsOcclusionQueryNV) gdk_gl_get_proc_address ("glIsOcclusionQueryNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_async () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glIsOcclusionQueryNV () - %s",
+               (_procs_GL_NV_occlusion_query.glIsOcclusionQueryNV) ? "supported" : "not supported"));
 
-  return &_procs_GL_SGIX_async;
+  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glIsOcclusionQueryNV);
 }
 
-/*
- * GL_INTEL_parallel_arrays
- */
-
-static GdkGL_GL_INTEL_parallel_arrays _procs_GL_INTEL_parallel_arrays = {
-  (GdkGLProc_glVertexPointervINTEL) -1,
-  (GdkGLProc_glNormalPointervINTEL) -1,
-  (GdkGLProc_glColorPointervINTEL) -1,
-  (GdkGLProc_glTexCoordPointervINTEL) -1
-};
-
-/* glVertexPointervINTEL */
+/* glBeginOcclusionQueryNV */
 GdkGLProc
-gdk_gl_get_glVertexPointervINTEL (void)
+gdk_gl_get_glBeginOcclusionQueryNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL == (GdkGLProc_glVertexPointervINTEL) -1)
-    _procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL =
-      (GdkGLProc_glVertexPointervINTEL) gdk_gl_get_proc_address ("glVertexPointervINTEL");
+  if (_procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV == (GdkGLProc_glBeginOcclusionQueryNV) -1)
+    _procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV =
+      (GdkGLProc_glBeginOcclusionQueryNV) gdk_gl_get_proc_address ("glBeginOcclusionQueryNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexPointervINTEL () - %s",
-               (_procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginOcclusionQueryNV () - %s",
+               (_procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glVertexPointervINTEL);
+  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV);
 }
 
-/* glNormalPointervINTEL */
+/* glEndOcclusionQueryNV */
 GdkGLProc
-gdk_gl_get_glNormalPointervINTEL (void)
+gdk_gl_get_glEndOcclusionQueryNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL == (GdkGLProc_glNormalPointervINTEL) -1)
-    _procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL =
-      (GdkGLProc_glNormalPointervINTEL) gdk_gl_get_proc_address ("glNormalPointervINTEL");
+  if (_procs_GL_NV_occlusion_query.glEndOcclusionQueryNV == (GdkGLProc_glEndOcclusionQueryNV) -1)
+    _procs_GL_NV_occlusion_query.glEndOcclusionQueryNV =
+      (GdkGLProc_glEndOcclusionQueryNV) gdk_gl_get_proc_address ("glEndOcclusionQueryNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalPointervINTEL () - %s",
-               (_procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndOcclusionQueryNV () - %s",
+               (_procs_GL_NV_occlusion_query.glEndOcclusionQueryNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glNormalPointervINTEL);
+  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glEndOcclusionQueryNV);
 }
 
-/* glColorPointervINTEL */
+/* glGetOcclusionQueryivNV */
 GdkGLProc
-gdk_gl_get_glColorPointervINTEL (void)
+gdk_gl_get_glGetOcclusionQueryivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_INTEL_parallel_arrays.glColorPointervINTEL == (GdkGLProc_glColorPointervINTEL) -1)
-    _procs_GL_INTEL_parallel_arrays.glColorPointervINTEL =
-      (GdkGLProc_glColorPointervINTEL) gdk_gl_get_proc_address ("glColorPointervINTEL");
+  if (_procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV == (GdkGLProc_glGetOcclusionQueryivNV) -1)
+    _procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV =
+      (GdkGLProc_glGetOcclusionQueryivNV) gdk_gl_get_proc_address ("glGetOcclusionQueryivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorPointervINTEL () - %s",
-               (_procs_GL_INTEL_parallel_arrays.glColorPointervINTEL) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetOcclusionQueryivNV () - %s",
+               (_procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glColorPointervINTEL);
+  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV);
 }
 
-/* glTexCoordPointervINTEL */
+/* glGetOcclusionQueryuivNV */
 GdkGLProc
-gdk_gl_get_glTexCoordPointervINTEL (void)
+gdk_gl_get_glGetOcclusionQueryuivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL == (GdkGLProc_glTexCoordPointervINTEL) -1)
-    _procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL =
-      (GdkGLProc_glTexCoordPointervINTEL) gdk_gl_get_proc_address ("glTexCoordPointervINTEL");
+  if (_procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV == (GdkGLProc_glGetOcclusionQueryuivNV) -1)
+    _procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV =
+      (GdkGLProc_glGetOcclusionQueryuivNV) gdk_gl_get_proc_address ("glGetOcclusionQueryuivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoordPointervINTEL () - %s",
-               (_procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetOcclusionQueryuivNV () - %s",
+               (_procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_INTEL_parallel_arrays.glTexCoordPointervINTEL);
+  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV);
 }
 
-/* Get GL_INTEL_parallel_arrays functions */
-GdkGL_GL_INTEL_parallel_arrays *
-gdk_gl_get_GL_INTEL_parallel_arrays (void)
+/* Get GL_NV_occlusion_query functions */
+GdkGL_GL_NV_occlusion_query *
+gdk_gl_get_GL_NV_occlusion_query (void)
 {
   static gint supported = -1;
 
@@ -10634,113 +26445,134 @@ gdk_gl_get_GL_INTEL_parallel_arrays (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_INTEL_parallel_arrays");
+      supported = gdk_gl_query_gl_extension ("GL_NV_occlusion_query");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glVertexPointervINTEL () != NULL);
-          supported &= (gdk_gl_get_glNormalPointervINTEL () != NULL);
-          supported &= (gdk_gl_get_glColorPointervINTEL () != NULL);
-          supported &= (gdk_gl_get_glTexCoordPointervINTEL () != NULL);
+          supported &= (gdk_gl_get_glGenOcclusionQueriesNV () != NULL);
+          supported &= (gdk_gl_get_glDeleteOcclusionQueriesNV () != NULL);
+          supported &= (gdk_gl_get_glIsOcclusionQueryNV () != NULL);
+          supported &= (gdk_gl_get_glBeginOcclusionQueryNV () != NULL);
+          supported &= (gdk_gl_get_glEndOcclusionQueryNV () != NULL);
+          supported &= (gdk_gl_get_glGetOcclusionQueryivNV () != NULL);
+          supported &= (gdk_gl_get_glGetOcclusionQueryuivNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_INTEL_parallel_arrays () - %s",
+    g_message (" - gdk_gl_get_GL_NV_occlusion_query () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_INTEL_parallel_arrays;
+  return &_procs_GL_NV_occlusion_query;
 }
 
 /*
- * GL_EXT_pixel_transform
+ * GL_NV_point_sprite
  */
 
-static GdkGL_GL_EXT_pixel_transform _procs_GL_EXT_pixel_transform = {
-  (GdkGLProc_glPixelTransformParameteriEXT) -1,
-  (GdkGLProc_glPixelTransformParameterfEXT) -1,
-  (GdkGLProc_glPixelTransformParameterivEXT) -1,
-  (GdkGLProc_glPixelTransformParameterfvEXT) -1
+static GdkGL_GL_NV_point_sprite _procs_GL_NV_point_sprite = {
+  (GdkGLProc_glPointParameteriNV) -1,
+  (GdkGLProc_glPointParameterivNV) -1
 };
 
-/* glPixelTransformParameteriEXT */
+/* glPointParameteriNV */
 GdkGLProc
-gdk_gl_get_glPixelTransformParameteriEXT (void)
+gdk_gl_get_glPointParameteriNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT == (GdkGLProc_glPixelTransformParameteriEXT) -1)
-    _procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT =
-      (GdkGLProc_glPixelTransformParameteriEXT) gdk_gl_get_proc_address ("glPixelTransformParameteriEXT");
+  if (_procs_GL_NV_point_sprite.glPointParameteriNV == (GdkGLProc_glPointParameteriNV) -1)
+    _procs_GL_NV_point_sprite.glPointParameteriNV =
+      (GdkGLProc_glPointParameteriNV) gdk_gl_get_proc_address ("glPointParameteriNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTransformParameteriEXT () - %s",
-               (_procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPointParameteriNV () - %s",
+               (_procs_GL_NV_point_sprite.glPointParameteriNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameteriEXT);
+  return (GdkGLProc) (_procs_GL_NV_point_sprite.glPointParameteriNV);
 }
 
-/* glPixelTransformParameterfEXT */
+/* glPointParameterivNV */
 GdkGLProc
-gdk_gl_get_glPixelTransformParameterfEXT (void)
+gdk_gl_get_glPointParameterivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT == (GdkGLProc_glPixelTransformParameterfEXT) -1)
-    _procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT =
-      (GdkGLProc_glPixelTransformParameterfEXT) gdk_gl_get_proc_address ("glPixelTransformParameterfEXT");
+  if (_procs_GL_NV_point_sprite.glPointParameterivNV == (GdkGLProc_glPointParameterivNV) -1)
+    _procs_GL_NV_point_sprite.glPointParameterivNV =
+      (GdkGLProc_glPointParameterivNV) gdk_gl_get_proc_address ("glPointParameterivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTransformParameterfEXT () - %s",
-               (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPointParameterivNV () - %s",
+               (_procs_GL_NV_point_sprite.glPointParameterivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfEXT);
+  return (GdkGLProc) (_procs_GL_NV_point_sprite.glPointParameterivNV);
 }
 
-/* glPixelTransformParameterivEXT */
-GdkGLProc
-gdk_gl_get_glPixelTransformParameterivEXT (void)
+/* Get GL_NV_point_sprite functions */
+GdkGL_GL_NV_point_sprite *
+gdk_gl_get_GL_NV_point_sprite (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT == (GdkGLProc_glPixelTransformParameterivEXT) -1)
-    _procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT =
-      (GdkGLProc_glPixelTransformParameterivEXT) gdk_gl_get_proc_address ("glPixelTransformParameterivEXT");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_point_sprite");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPointParameteriNV () != NULL);
+          supported &= (gdk_gl_get_glPointParameterivNV () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTransformParameterivEXT () - %s",
-               (_procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_NV_point_sprite () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameterivEXT);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_point_sprite;
 }
 
-/* glPixelTransformParameterfvEXT */
+/*
+ * GL_EXT_stencil_two_side
+ */
+
+static GdkGL_GL_EXT_stencil_two_side _procs_GL_EXT_stencil_two_side = {
+  (GdkGLProc_glActiveStencilFaceEXT) -1
+};
+
+/* glActiveStencilFaceEXT */
 GdkGLProc
-gdk_gl_get_glPixelTransformParameterfvEXT (void)
+gdk_gl_get_glActiveStencilFaceEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT == (GdkGLProc_glPixelTransformParameterfvEXT) -1)
-    _procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT =
-      (GdkGLProc_glPixelTransformParameterfvEXT) gdk_gl_get_proc_address ("glPixelTransformParameterfvEXT");
+  if (_procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT == (GdkGLProc_glActiveStencilFaceEXT) -1)
+    _procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT =
+      (GdkGLProc_glActiveStencilFaceEXT) gdk_gl_get_proc_address ("glActiveStencilFaceEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelTransformParameterfvEXT () - %s",
-               (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glActiveStencilFaceEXT () - %s",
+               (_procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_pixel_transform.glPixelTransformParameterfvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT);
 }
 
-/* Get GL_EXT_pixel_transform functions */
-GdkGL_GL_EXT_pixel_transform *
-gdk_gl_get_GL_EXT_pixel_transform (void)
+/* Get GL_EXT_stencil_two_side functions */
+GdkGL_GL_EXT_stencil_two_side *
+gdk_gl_get_GL_EXT_stencil_two_side (void)
 {
   static gint supported = -1;
 
@@ -10749,360 +26581,440 @@ gdk_gl_get_GL_EXT_pixel_transform (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_pixel_transform");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_stencil_two_side");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glPixelTransformParameteriEXT () != NULL);
-          supported &= (gdk_gl_get_glPixelTransformParameterfEXT () != NULL);
-          supported &= (gdk_gl_get_glPixelTransformParameterivEXT () != NULL);
-          supported &= (gdk_gl_get_glPixelTransformParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glActiveStencilFaceEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_pixel_transform () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_stencil_two_side () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_pixel_transform;
+  return &_procs_GL_EXT_stencil_two_side;
 }
 
 /*
- * GL_EXT_secondary_color
+ * GL_APPLE_element_array
  */
 
-static GdkGL_GL_EXT_secondary_color _procs_GL_EXT_secondary_color = {
-  (GdkGLProc_glSecondaryColor3bEXT) -1,
-  (GdkGLProc_glSecondaryColor3bvEXT) -1,
-  (GdkGLProc_glSecondaryColor3dEXT) -1,
-  (GdkGLProc_glSecondaryColor3dvEXT) -1,
-  (GdkGLProc_glSecondaryColor3fEXT) -1,
-  (GdkGLProc_glSecondaryColor3fvEXT) -1,
-  (GdkGLProc_glSecondaryColor3iEXT) -1,
-  (GdkGLProc_glSecondaryColor3ivEXT) -1,
-  (GdkGLProc_glSecondaryColor3sEXT) -1,
-  (GdkGLProc_glSecondaryColor3svEXT) -1,
-  (GdkGLProc_glSecondaryColor3ubEXT) -1,
-  (GdkGLProc_glSecondaryColor3ubvEXT) -1,
-  (GdkGLProc_glSecondaryColor3uiEXT) -1,
-  (GdkGLProc_glSecondaryColor3uivEXT) -1,
-  (GdkGLProc_glSecondaryColor3usEXT) -1,
-  (GdkGLProc_glSecondaryColor3usvEXT) -1,
-  (GdkGLProc_glSecondaryColorPointerEXT) -1
+static GdkGL_GL_APPLE_element_array _procs_GL_APPLE_element_array = {
+  (GdkGLProc_glElementPointerAPPLE) -1,
+  (GdkGLProc_glDrawElementArrayAPPLE) -1,
+  (GdkGLProc_glDrawRangeElementArrayAPPLE) -1,
+  (GdkGLProc_glMultiDrawElementArrayAPPLE) -1,
+  (GdkGLProc_glMultiDrawRangeElementArrayAPPLE) -1
 };
 
-/* glSecondaryColor3bEXT */
+/* glElementPointerAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3bEXT (void)
+gdk_gl_get_glElementPointerAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3bEXT == (GdkGLProc_glSecondaryColor3bEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3bEXT =
-      (GdkGLProc_glSecondaryColor3bEXT) gdk_gl_get_proc_address ("glSecondaryColor3bEXT");
+  if (_procs_GL_APPLE_element_array.glElementPointerAPPLE == (GdkGLProc_glElementPointerAPPLE) -1)
+    _procs_GL_APPLE_element_array.glElementPointerAPPLE =
+      (GdkGLProc_glElementPointerAPPLE) gdk_gl_get_proc_address ("glElementPointerAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3bEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3bEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glElementPointerAPPLE () - %s",
+               (_procs_GL_APPLE_element_array.glElementPointerAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3bEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_element_array.glElementPointerAPPLE);
 }
 
-/* glSecondaryColor3bvEXT */
+/* glDrawElementArrayAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3bvEXT (void)
+gdk_gl_get_glDrawElementArrayAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT == (GdkGLProc_glSecondaryColor3bvEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT =
-      (GdkGLProc_glSecondaryColor3bvEXT) gdk_gl_get_proc_address ("glSecondaryColor3bvEXT");
+  if (_procs_GL_APPLE_element_array.glDrawElementArrayAPPLE == (GdkGLProc_glDrawElementArrayAPPLE) -1)
+    _procs_GL_APPLE_element_array.glDrawElementArrayAPPLE =
+      (GdkGLProc_glDrawElementArrayAPPLE) gdk_gl_get_proc_address ("glDrawElementArrayAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3bvEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawElementArrayAPPLE () - %s",
+               (_procs_GL_APPLE_element_array.glDrawElementArrayAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3bvEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_element_array.glDrawElementArrayAPPLE);
 }
 
-/* glSecondaryColor3dEXT */
+/* glDrawRangeElementArrayAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3dEXT (void)
+gdk_gl_get_glDrawRangeElementArrayAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3dEXT == (GdkGLProc_glSecondaryColor3dEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3dEXT =
-      (GdkGLProc_glSecondaryColor3dEXT) gdk_gl_get_proc_address ("glSecondaryColor3dEXT");
+  if (_procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE == (GdkGLProc_glDrawRangeElementArrayAPPLE) -1)
+    _procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE =
+      (GdkGLProc_glDrawRangeElementArrayAPPLE) gdk_gl_get_proc_address ("glDrawRangeElementArrayAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3dEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3dEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawRangeElementArrayAPPLE () - %s",
+               (_procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3dEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE);
 }
 
-/* glSecondaryColor3dvEXT */
+/* glMultiDrawElementArrayAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3dvEXT (void)
+gdk_gl_get_glMultiDrawElementArrayAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT == (GdkGLProc_glSecondaryColor3dvEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT =
-      (GdkGLProc_glSecondaryColor3dvEXT) gdk_gl_get_proc_address ("glSecondaryColor3dvEXT");
+  if (_procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE == (GdkGLProc_glMultiDrawElementArrayAPPLE) -1)
+    _procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE =
+      (GdkGLProc_glMultiDrawElementArrayAPPLE) gdk_gl_get_proc_address ("glMultiDrawElementArrayAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3dvEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiDrawElementArrayAPPLE () - %s",
+               (_procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3dvEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE);
 }
 
-/* glSecondaryColor3fEXT */
+/* glMultiDrawRangeElementArrayAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3fEXT (void)
+gdk_gl_get_glMultiDrawRangeElementArrayAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3fEXT == (GdkGLProc_glSecondaryColor3fEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3fEXT =
-      (GdkGLProc_glSecondaryColor3fEXT) gdk_gl_get_proc_address ("glSecondaryColor3fEXT");
+  if (_procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE == (GdkGLProc_glMultiDrawRangeElementArrayAPPLE) -1)
+    _procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE =
+      (GdkGLProc_glMultiDrawRangeElementArrayAPPLE) gdk_gl_get_proc_address ("glMultiDrawRangeElementArrayAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3fEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3fEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiDrawRangeElementArrayAPPLE () - %s",
+               (_procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3fEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE);
 }
 
-/* glSecondaryColor3fvEXT */
+/* Get GL_APPLE_element_array functions */
+GdkGL_GL_APPLE_element_array *
+gdk_gl_get_GL_APPLE_element_array (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_element_array");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glElementPointerAPPLE () != NULL);
+          supported &= (gdk_gl_get_glDrawElementArrayAPPLE () != NULL);
+          supported &= (gdk_gl_get_glDrawRangeElementArrayAPPLE () != NULL);
+          supported &= (gdk_gl_get_glMultiDrawElementArrayAPPLE () != NULL);
+          supported &= (gdk_gl_get_glMultiDrawRangeElementArrayAPPLE () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_APPLE_element_array () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_APPLE_element_array;
+}
+
+/*
+ * GL_APPLE_fence
+ */
+
+static GdkGL_GL_APPLE_fence _procs_GL_APPLE_fence = {
+  (GdkGLProc_glGenFencesAPPLE) -1,
+  (GdkGLProc_glDeleteFencesAPPLE) -1,
+  (GdkGLProc_glSetFenceAPPLE) -1,
+  (GdkGLProc_glIsFenceAPPLE) -1,
+  (GdkGLProc_glTestFenceAPPLE) -1,
+  (GdkGLProc_glFinishFenceAPPLE) -1,
+  (GdkGLProc_glTestObjectAPPLE) -1,
+  (GdkGLProc_glFinishObjectAPPLE) -1
+};
+
+/* glGenFencesAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3fvEXT (void)
+gdk_gl_get_glGenFencesAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT == (GdkGLProc_glSecondaryColor3fvEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT =
-      (GdkGLProc_glSecondaryColor3fvEXT) gdk_gl_get_proc_address ("glSecondaryColor3fvEXT");
+  if (_procs_GL_APPLE_fence.glGenFencesAPPLE == (GdkGLProc_glGenFencesAPPLE) -1)
+    _procs_GL_APPLE_fence.glGenFencesAPPLE =
+      (GdkGLProc_glGenFencesAPPLE) gdk_gl_get_proc_address ("glGenFencesAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3fvEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenFencesAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glGenFencesAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3fvEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glGenFencesAPPLE);
 }
 
-/* glSecondaryColor3iEXT */
+/* glDeleteFencesAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3iEXT (void)
+gdk_gl_get_glDeleteFencesAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3iEXT == (GdkGLProc_glSecondaryColor3iEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3iEXT =
-      (GdkGLProc_glSecondaryColor3iEXT) gdk_gl_get_proc_address ("glSecondaryColor3iEXT");
+  if (_procs_GL_APPLE_fence.glDeleteFencesAPPLE == (GdkGLProc_glDeleteFencesAPPLE) -1)
+    _procs_GL_APPLE_fence.glDeleteFencesAPPLE =
+      (GdkGLProc_glDeleteFencesAPPLE) gdk_gl_get_proc_address ("glDeleteFencesAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3iEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3iEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteFencesAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glDeleteFencesAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3iEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glDeleteFencesAPPLE);
 }
 
-/* glSecondaryColor3ivEXT */
+/* glSetFenceAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3ivEXT (void)
+gdk_gl_get_glSetFenceAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT == (GdkGLProc_glSecondaryColor3ivEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT =
-      (GdkGLProc_glSecondaryColor3ivEXT) gdk_gl_get_proc_address ("glSecondaryColor3ivEXT");
+  if (_procs_GL_APPLE_fence.glSetFenceAPPLE == (GdkGLProc_glSetFenceAPPLE) -1)
+    _procs_GL_APPLE_fence.glSetFenceAPPLE =
+      (GdkGLProc_glSetFenceAPPLE) gdk_gl_get_proc_address ("glSetFenceAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3ivEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSetFenceAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glSetFenceAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3ivEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glSetFenceAPPLE);
 }
 
-/* glSecondaryColor3sEXT */
+/* glIsFenceAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3sEXT (void)
+gdk_gl_get_glIsFenceAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3sEXT == (GdkGLProc_glSecondaryColor3sEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3sEXT =
-      (GdkGLProc_glSecondaryColor3sEXT) gdk_gl_get_proc_address ("glSecondaryColor3sEXT");
+  if (_procs_GL_APPLE_fence.glIsFenceAPPLE == (GdkGLProc_glIsFenceAPPLE) -1)
+    _procs_GL_APPLE_fence.glIsFenceAPPLE =
+      (GdkGLProc_glIsFenceAPPLE) gdk_gl_get_proc_address ("glIsFenceAPPLE");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsFenceAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glIsFenceAPPLE) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glIsFenceAPPLE);
+}
+
+/* glTestFenceAPPLE */
+GdkGLProc
+gdk_gl_get_glTestFenceAPPLE (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_APPLE_fence.glTestFenceAPPLE == (GdkGLProc_glTestFenceAPPLE) -1)
+    _procs_GL_APPLE_fence.glTestFenceAPPLE =
+      (GdkGLProc_glTestFenceAPPLE) gdk_gl_get_proc_address ("glTestFenceAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3sEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3sEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTestFenceAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glTestFenceAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3sEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glTestFenceAPPLE);
 }
 
-/* glSecondaryColor3svEXT */
+/* glFinishFenceAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3svEXT (void)
+gdk_gl_get_glFinishFenceAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3svEXT == (GdkGLProc_glSecondaryColor3svEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3svEXT =
-      (GdkGLProc_glSecondaryColor3svEXT) gdk_gl_get_proc_address ("glSecondaryColor3svEXT");
+  if (_procs_GL_APPLE_fence.glFinishFenceAPPLE == (GdkGLProc_glFinishFenceAPPLE) -1)
+    _procs_GL_APPLE_fence.glFinishFenceAPPLE =
+      (GdkGLProc_glFinishFenceAPPLE) gdk_gl_get_proc_address ("glFinishFenceAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3svEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3svEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFinishFenceAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glFinishFenceAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3svEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glFinishFenceAPPLE);
 }
 
-/* glSecondaryColor3ubEXT */
+/* glTestObjectAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3ubEXT (void)
+gdk_gl_get_glTestObjectAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT == (GdkGLProc_glSecondaryColor3ubEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT =
-      (GdkGLProc_glSecondaryColor3ubEXT) gdk_gl_get_proc_address ("glSecondaryColor3ubEXT");
+  if (_procs_GL_APPLE_fence.glTestObjectAPPLE == (GdkGLProc_glTestObjectAPPLE) -1)
+    _procs_GL_APPLE_fence.glTestObjectAPPLE =
+      (GdkGLProc_glTestObjectAPPLE) gdk_gl_get_proc_address ("glTestObjectAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3ubEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTestObjectAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glTestObjectAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3ubEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glTestObjectAPPLE);
 }
 
-/* glSecondaryColor3ubvEXT */
+/* glFinishObjectAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3ubvEXT (void)
+gdk_gl_get_glFinishObjectAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT == (GdkGLProc_glSecondaryColor3ubvEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT =
-      (GdkGLProc_glSecondaryColor3ubvEXT) gdk_gl_get_proc_address ("glSecondaryColor3ubvEXT");
+  if (_procs_GL_APPLE_fence.glFinishObjectAPPLE == (GdkGLProc_glFinishObjectAPPLE) -1)
+    _procs_GL_APPLE_fence.glFinishObjectAPPLE =
+      (GdkGLProc_glFinishObjectAPPLE) gdk_gl_get_proc_address ("glFinishObjectAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3ubvEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFinishObjectAPPLE () - %s",
+               (_procs_GL_APPLE_fence.glFinishObjectAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3ubvEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_fence.glFinishObjectAPPLE);
 }
 
-/* glSecondaryColor3uiEXT */
-GdkGLProc
-gdk_gl_get_glSecondaryColor3uiEXT (void)
+/* Get GL_APPLE_fence functions */
+GdkGL_GL_APPLE_fence *
+gdk_gl_get_GL_APPLE_fence (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT == (GdkGLProc_glSecondaryColor3uiEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT =
-      (GdkGLProc_glSecondaryColor3uiEXT) gdk_gl_get_proc_address ("glSecondaryColor3uiEXT");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_fence");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGenFencesAPPLE () != NULL);
+          supported &= (gdk_gl_get_glDeleteFencesAPPLE () != NULL);
+          supported &= (gdk_gl_get_glSetFenceAPPLE () != NULL);
+          supported &= (gdk_gl_get_glIsFenceAPPLE () != NULL);
+          supported &= (gdk_gl_get_glTestFenceAPPLE () != NULL);
+          supported &= (gdk_gl_get_glFinishFenceAPPLE () != NULL);
+          supported &= (gdk_gl_get_glTestObjectAPPLE () != NULL);
+          supported &= (gdk_gl_get_glFinishObjectAPPLE () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3uiEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_APPLE_fence () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3uiEXT);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_APPLE_fence;
 }
 
-/* glSecondaryColor3uivEXT */
+/*
+ * GL_APPLE_vertex_array_object
+ */
+
+static GdkGL_GL_APPLE_vertex_array_object _procs_GL_APPLE_vertex_array_object = {
+  (GdkGLProc_glBindVertexArrayAPPLE) -1,
+  (GdkGLProc_glDeleteVertexArraysAPPLE) -1,
+  (GdkGLProc_glGenVertexArraysAPPLE) -1,
+  (GdkGLProc_glIsVertexArrayAPPLE) -1
+};
+
+/* glBindVertexArrayAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3uivEXT (void)
+gdk_gl_get_glBindVertexArrayAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT == (GdkGLProc_glSecondaryColor3uivEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT =
-      (GdkGLProc_glSecondaryColor3uivEXT) gdk_gl_get_proc_address ("glSecondaryColor3uivEXT");
+  if (_procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE == (GdkGLProc_glBindVertexArrayAPPLE) -1)
+    _procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE =
+      (GdkGLProc_glBindVertexArrayAPPLE) gdk_gl_get_proc_address ("glBindVertexArrayAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3uivEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindVertexArrayAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3uivEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE);
 }
 
-/* glSecondaryColor3usEXT */
+/* glDeleteVertexArraysAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3usEXT (void)
+gdk_gl_get_glDeleteVertexArraysAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3usEXT == (GdkGLProc_glSecondaryColor3usEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3usEXT =
-      (GdkGLProc_glSecondaryColor3usEXT) gdk_gl_get_proc_address ("glSecondaryColor3usEXT");
+  if (_procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE == (GdkGLProc_glDeleteVertexArraysAPPLE) -1)
+    _procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE =
+      (GdkGLProc_glDeleteVertexArraysAPPLE) gdk_gl_get_proc_address ("glDeleteVertexArraysAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3usEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3usEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteVertexArraysAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3usEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE);
 }
 
-/* glSecondaryColor3usvEXT */
+/* glGenVertexArraysAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3usvEXT (void)
+gdk_gl_get_glGenVertexArraysAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT == (GdkGLProc_glSecondaryColor3usvEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT =
-      (GdkGLProc_glSecondaryColor3usvEXT) gdk_gl_get_proc_address ("glSecondaryColor3usvEXT");
+  if (_procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE == (GdkGLProc_glGenVertexArraysAPPLE) -1)
+    _procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE =
+      (GdkGLProc_glGenVertexArraysAPPLE) gdk_gl_get_proc_address ("glGenVertexArraysAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3usvEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenVertexArraysAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColor3usvEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE);
 }
 
-/* glSecondaryColorPointerEXT */
+/* glIsVertexArrayAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColorPointerEXT (void)
+gdk_gl_get_glIsVertexArrayAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT == (GdkGLProc_glSecondaryColorPointerEXT) -1)
-    _procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT =
-      (GdkGLProc_glSecondaryColorPointerEXT) gdk_gl_get_proc_address ("glSecondaryColorPointerEXT");
+  if (_procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE == (GdkGLProc_glIsVertexArrayAPPLE) -1)
+    _procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE =
+      (GdkGLProc_glIsVertexArrayAPPLE) gdk_gl_get_proc_address ("glIsVertexArrayAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColorPointerEXT () - %s",
-               (_procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsVertexArrayAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_secondary_color.glSecondaryColorPointerEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE);
 }
 
-/* Get GL_EXT_secondary_color functions */
-GdkGL_GL_EXT_secondary_color *
-gdk_gl_get_GL_EXT_secondary_color (void)
+/* Get GL_APPLE_vertex_array_object functions */
+GdkGL_GL_APPLE_vertex_array_object *
+gdk_gl_get_GL_APPLE_vertex_array_object (void)
 {
   static gint supported = -1;
 
@@ -11111,69 +27023,94 @@ gdk_gl_get_GL_EXT_secondary_color (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_secondary_color");
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_vertex_array_object");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glSecondaryColor3bEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3bvEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3dEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3dvEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3fEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3fvEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3iEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3ivEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3sEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3svEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3ubEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3ubvEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3uiEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3uivEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3usEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3usvEXT () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColorPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glBindVertexArrayAPPLE () != NULL);
+          supported &= (gdk_gl_get_glDeleteVertexArraysAPPLE () != NULL);
+          supported &= (gdk_gl_get_glGenVertexArraysAPPLE () != NULL);
+          supported &= (gdk_gl_get_glIsVertexArrayAPPLE () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_secondary_color () - %s",
+    g_message (" - gdk_gl_get_GL_APPLE_vertex_array_object () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_secondary_color;
+  return &_procs_GL_APPLE_vertex_array_object;
 }
 
 /*
- * GL_EXT_texture_perturb_normal
+ * GL_APPLE_vertex_array_range
  */
 
-static GdkGL_GL_EXT_texture_perturb_normal _procs_GL_EXT_texture_perturb_normal = {
-  (GdkGLProc_glTextureNormalEXT) -1
+static GdkGL_GL_APPLE_vertex_array_range _procs_GL_APPLE_vertex_array_range = {
+  (GdkGLProc_glVertexArrayRangeAPPLE) -1,
+  (GdkGLProc_glFlushVertexArrayRangeAPPLE) -1,
+  (GdkGLProc_glVertexArrayParameteriAPPLE) -1
 };
 
-/* glTextureNormalEXT */
+/* glVertexArrayRangeAPPLE */
 GdkGLProc
-gdk_gl_get_glTextureNormalEXT (void)
+gdk_gl_get_glVertexArrayRangeAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT == (GdkGLProc_glTextureNormalEXT) -1)
-    _procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT =
-      (GdkGLProc_glTextureNormalEXT) gdk_gl_get_proc_address ("glTextureNormalEXT");
+  if (_procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE == (GdkGLProc_glVertexArrayRangeAPPLE) -1)
+    _procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE =
+      (GdkGLProc_glVertexArrayRangeAPPLE) gdk_gl_get_proc_address ("glVertexArrayRangeAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTextureNormalEXT () - %s",
-               (_procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexArrayRangeAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE);
+}
+
+/* glFlushVertexArrayRangeAPPLE */
+GdkGLProc
+gdk_gl_get_glFlushVertexArrayRangeAPPLE (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE == (GdkGLProc_glFlushVertexArrayRangeAPPLE) -1)
+    _procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE =
+      (GdkGLProc_glFlushVertexArrayRangeAPPLE) gdk_gl_get_proc_address ("glFlushVertexArrayRangeAPPLE");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFlushVertexArrayRangeAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE);
+}
+
+/* glVertexArrayParameteriAPPLE */
+GdkGLProc
+gdk_gl_get_glVertexArrayParameteriAPPLE (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE == (GdkGLProc_glVertexArrayParameteriAPPLE) -1)
+    _procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE =
+      (GdkGLProc_glVertexArrayParameteriAPPLE) gdk_gl_get_proc_address ("glVertexArrayParameteriAPPLE");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexArrayParameteriAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_texture_perturb_normal.glTextureNormalEXT);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE);
 }
 
-/* Get GL_EXT_texture_perturb_normal functions */
-GdkGL_GL_EXT_texture_perturb_normal *
-gdk_gl_get_GL_EXT_texture_perturb_normal (void)
+/* Get GL_APPLE_vertex_array_range functions */
+GdkGL_GL_APPLE_vertex_array_range *
+gdk_gl_get_GL_APPLE_vertex_array_range (void)
 {
   static gint supported = -1;
 
@@ -11182,72 +27119,55 @@ gdk_gl_get_GL_EXT_texture_perturb_normal (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_texture_perturb_normal");
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_vertex_array_range");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glTextureNormalEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexArrayRangeAPPLE () != NULL);
+          supported &= (gdk_gl_get_glFlushVertexArrayRangeAPPLE () != NULL);
+          supported &= (gdk_gl_get_glVertexArrayParameteriAPPLE () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_texture_perturb_normal () - %s",
+    g_message (" - gdk_gl_get_GL_APPLE_vertex_array_range () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_texture_perturb_normal;
+  return &_procs_GL_APPLE_vertex_array_range;
 }
 
 /*
- * GL_EXT_multi_draw_arrays
+ * GL_ATI_draw_buffers
  */
 
-static GdkGL_GL_EXT_multi_draw_arrays _procs_GL_EXT_multi_draw_arrays = {
-  (GdkGLProc_glMultiDrawArraysEXT) -1,
-  (GdkGLProc_glMultiDrawElementsEXT) -1
+static GdkGL_GL_ATI_draw_buffers _procs_GL_ATI_draw_buffers = {
+  (GdkGLProc_glDrawBuffersATI) -1
 };
 
-/* glMultiDrawArraysEXT */
-GdkGLProc
-gdk_gl_get_glMultiDrawArraysEXT (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT == (GdkGLProc_glMultiDrawArraysEXT) -1)
-    _procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT =
-      (GdkGLProc_glMultiDrawArraysEXT) gdk_gl_get_proc_address ("glMultiDrawArraysEXT");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiDrawArraysEXT () - %s",
-               (_procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_EXT_multi_draw_arrays.glMultiDrawArraysEXT);
-}
-
-/* glMultiDrawElementsEXT */
+/* glDrawBuffersATI */
 GdkGLProc
-gdk_gl_get_glMultiDrawElementsEXT (void)
+gdk_gl_get_glDrawBuffersATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT == (GdkGLProc_glMultiDrawElementsEXT) -1)
-    _procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT =
-      (GdkGLProc_glMultiDrawElementsEXT) gdk_gl_get_proc_address ("glMultiDrawElementsEXT");
+  if (_procs_GL_ATI_draw_buffers.glDrawBuffersATI == (GdkGLProc_glDrawBuffersATI) -1)
+    _procs_GL_ATI_draw_buffers.glDrawBuffersATI =
+      (GdkGLProc_glDrawBuffersATI) gdk_gl_get_proc_address ("glDrawBuffersATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiDrawElementsEXT () - %s",
-               (_procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawBuffersATI () - %s",
+               (_procs_GL_ATI_draw_buffers.glDrawBuffersATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_multi_draw_arrays.glMultiDrawElementsEXT);
+  return (GdkGLProc) (_procs_GL_ATI_draw_buffers.glDrawBuffersATI);
 }
 
-/* Get GL_EXT_multi_draw_arrays functions */
-GdkGL_GL_EXT_multi_draw_arrays *
-gdk_gl_get_GL_EXT_multi_draw_arrays (void)
+/* Get GL_ATI_draw_buffers functions */
+GdkGL_GL_ATI_draw_buffers *
+gdk_gl_get_GL_ATI_draw_buffers (void)
 {
   static gint supported = -1;
 
@@ -11256,130 +27176,148 @@ gdk_gl_get_GL_EXT_multi_draw_arrays (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_multi_draw_arrays");
+      supported = gdk_gl_query_gl_extension ("GL_ATI_draw_buffers");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glMultiDrawArraysEXT () != NULL);
-          supported &= (gdk_gl_get_glMultiDrawElementsEXT () != NULL);
+          supported &= (gdk_gl_get_glDrawBuffersATI () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_multi_draw_arrays () - %s",
+    g_message (" - gdk_gl_get_GL_ATI_draw_buffers () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_multi_draw_arrays;
+  return &_procs_GL_ATI_draw_buffers;
 }
 
 /*
- * GL_EXT_fog_coord
+ * GL_NV_fragment_program
  */
 
-static GdkGL_GL_EXT_fog_coord _procs_GL_EXT_fog_coord = {
-  (GdkGLProc_glFogCoordfEXT) -1,
-  (GdkGLProc_glFogCoordfvEXT) -1,
-  (GdkGLProc_glFogCoorddEXT) -1,
-  (GdkGLProc_glFogCoorddvEXT) -1,
-  (GdkGLProc_glFogCoordPointerEXT) -1
+static GdkGL_GL_NV_fragment_program _procs_GL_NV_fragment_program = {
+  (GdkGLProc_glProgramNamedParameter4fNV) -1,
+  (GdkGLProc_glProgramNamedParameter4dNV) -1,
+  (GdkGLProc_glProgramNamedParameter4fvNV) -1,
+  (GdkGLProc_glProgramNamedParameter4dvNV) -1,
+  (GdkGLProc_glGetProgramNamedParameterfvNV) -1,
+  (GdkGLProc_glGetProgramNamedParameterdvNV) -1
 };
 
-/* glFogCoordfEXT */
+/* glProgramNamedParameter4fNV */
 GdkGLProc
-gdk_gl_get_glFogCoordfEXT (void)
+gdk_gl_get_glProgramNamedParameter4fNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_fog_coord.glFogCoordfEXT == (GdkGLProc_glFogCoordfEXT) -1)
-    _procs_GL_EXT_fog_coord.glFogCoordfEXT =
-      (GdkGLProc_glFogCoordfEXT) gdk_gl_get_proc_address ("glFogCoordfEXT");
+  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4fNV == (GdkGLProc_glProgramNamedParameter4fNV) -1)
+    _procs_GL_NV_fragment_program.glProgramNamedParameter4fNV =
+      (GdkGLProc_glProgramNamedParameter4fNV) gdk_gl_get_proc_address ("glProgramNamedParameter4fNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordfEXT () - %s",
-               (_procs_GL_EXT_fog_coord.glFogCoordfEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramNamedParameter4fNV () - %s",
+               (_procs_GL_NV_fragment_program.glProgramNamedParameter4fNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoordfEXT);
+  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4fNV);
 }
 
-/* glFogCoordfvEXT */
+/* glProgramNamedParameter4dNV */
 GdkGLProc
-gdk_gl_get_glFogCoordfvEXT (void)
+gdk_gl_get_glProgramNamedParameter4dNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_fog_coord.glFogCoordfvEXT == (GdkGLProc_glFogCoordfvEXT) -1)
-    _procs_GL_EXT_fog_coord.glFogCoordfvEXT =
-      (GdkGLProc_glFogCoordfvEXT) gdk_gl_get_proc_address ("glFogCoordfvEXT");
+  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4dNV == (GdkGLProc_glProgramNamedParameter4dNV) -1)
+    _procs_GL_NV_fragment_program.glProgramNamedParameter4dNV =
+      (GdkGLProc_glProgramNamedParameter4dNV) gdk_gl_get_proc_address ("glProgramNamedParameter4dNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordfvEXT () - %s",
-               (_procs_GL_EXT_fog_coord.glFogCoordfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramNamedParameter4dNV () - %s",
+               (_procs_GL_NV_fragment_program.glProgramNamedParameter4dNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoordfvEXT);
+  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4dNV);
 }
 
-/* glFogCoorddEXT */
+/* glProgramNamedParameter4fvNV */
 GdkGLProc
-gdk_gl_get_glFogCoorddEXT (void)
+gdk_gl_get_glProgramNamedParameter4fvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_fog_coord.glFogCoorddEXT == (GdkGLProc_glFogCoorddEXT) -1)
-    _procs_GL_EXT_fog_coord.glFogCoorddEXT =
-      (GdkGLProc_glFogCoorddEXT) gdk_gl_get_proc_address ("glFogCoorddEXT");
+  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV == (GdkGLProc_glProgramNamedParameter4fvNV) -1)
+    _procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV =
+      (GdkGLProc_glProgramNamedParameter4fvNV) gdk_gl_get_proc_address ("glProgramNamedParameter4fvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoorddEXT () - %s",
-               (_procs_GL_EXT_fog_coord.glFogCoorddEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramNamedParameter4fvNV () - %s",
+               (_procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoorddEXT);
+  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV);
 }
 
-/* glFogCoorddvEXT */
+/* glProgramNamedParameter4dvNV */
 GdkGLProc
-gdk_gl_get_glFogCoorddvEXT (void)
+gdk_gl_get_glProgramNamedParameter4dvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_fog_coord.glFogCoorddvEXT == (GdkGLProc_glFogCoorddvEXT) -1)
-    _procs_GL_EXT_fog_coord.glFogCoorddvEXT =
-      (GdkGLProc_glFogCoorddvEXT) gdk_gl_get_proc_address ("glFogCoorddvEXT");
+  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV == (GdkGLProc_glProgramNamedParameter4dvNV) -1)
+    _procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV =
+      (GdkGLProc_glProgramNamedParameter4dvNV) gdk_gl_get_proc_address ("glProgramNamedParameter4dvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoorddvEXT () - %s",
-               (_procs_GL_EXT_fog_coord.glFogCoorddvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramNamedParameter4dvNV () - %s",
+               (_procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoorddvEXT);
+  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV);
 }
 
-/* glFogCoordPointerEXT */
+/* glGetProgramNamedParameterfvNV */
 GdkGLProc
-gdk_gl_get_glFogCoordPointerEXT (void)
+gdk_gl_get_glGetProgramNamedParameterfvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_fog_coord.glFogCoordPointerEXT == (GdkGLProc_glFogCoordPointerEXT) -1)
-    _procs_GL_EXT_fog_coord.glFogCoordPointerEXT =
-      (GdkGLProc_glFogCoordPointerEXT) gdk_gl_get_proc_address ("glFogCoordPointerEXT");
+  if (_procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV == (GdkGLProc_glGetProgramNamedParameterfvNV) -1)
+    _procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV =
+      (GdkGLProc_glGetProgramNamedParameterfvNV) gdk_gl_get_proc_address ("glGetProgramNamedParameterfvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordPointerEXT () - %s",
-               (_procs_GL_EXT_fog_coord.glFogCoordPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetProgramNamedParameterfvNV () - %s",
+               (_procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_fog_coord.glFogCoordPointerEXT);
+  return (GdkGLProc) (_procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV);
 }
 
-/* Get GL_EXT_fog_coord functions */
-GdkGL_GL_EXT_fog_coord *
-gdk_gl_get_GL_EXT_fog_coord (void)
+/* glGetProgramNamedParameterdvNV */
+GdkGLProc
+gdk_gl_get_glGetProgramNamedParameterdvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV == (GdkGLProc_glGetProgramNamedParameterdvNV) -1)
+    _procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV =
+      (GdkGLProc_glGetProgramNamedParameterdvNV) gdk_gl_get_proc_address ("glGetProgramNamedParameterdvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetProgramNamedParameterdvNV () - %s",
+               (_procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV);
+}
+
+/* Get GL_NV_fragment_program functions */
+GdkGL_GL_NV_fragment_program *
+gdk_gl_get_GL_NV_fragment_program (void)
 {
   static gint supported = -1;
 
@@ -11388,1940 +27326,1822 @@ gdk_gl_get_GL_EXT_fog_coord (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_fog_coord");
+      supported = gdk_gl_query_gl_extension ("GL_NV_fragment_program");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glFogCoordfEXT () != NULL);
-          supported &= (gdk_gl_get_glFogCoordfvEXT () != NULL);
-          supported &= (gdk_gl_get_glFogCoorddEXT () != NULL);
-          supported &= (gdk_gl_get_glFogCoorddvEXT () != NULL);
-          supported &= (gdk_gl_get_glFogCoordPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramNamedParameter4fNV () != NULL);
+          supported &= (gdk_gl_get_glProgramNamedParameter4dNV () != NULL);
+          supported &= (gdk_gl_get_glProgramNamedParameter4fvNV () != NULL);
+          supported &= (gdk_gl_get_glProgramNamedParameter4dvNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramNamedParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramNamedParameterdvNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_fog_coord () - %s",
+    g_message (" - gdk_gl_get_GL_NV_fragment_program () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_fog_coord;
-}
-
-/*
- * GL_EXT_coordinate_frame
- */
-
-static GdkGL_GL_EXT_coordinate_frame _procs_GL_EXT_coordinate_frame = {
-  (GdkGLProc_glTangent3bEXT) -1,
-  (GdkGLProc_glTangent3bvEXT) -1,
-  (GdkGLProc_glTangent3dEXT) -1,
-  (GdkGLProc_glTangent3dvEXT) -1,
-  (GdkGLProc_glTangent3fEXT) -1,
-  (GdkGLProc_glTangent3fvEXT) -1,
-  (GdkGLProc_glTangent3iEXT) -1,
-  (GdkGLProc_glTangent3ivEXT) -1,
-  (GdkGLProc_glTangent3sEXT) -1,
-  (GdkGLProc_glTangent3svEXT) -1,
-  (GdkGLProc_glBinormal3bEXT) -1,
-  (GdkGLProc_glBinormal3bvEXT) -1,
-  (GdkGLProc_glBinormal3dEXT) -1,
-  (GdkGLProc_glBinormal3dvEXT) -1,
-  (GdkGLProc_glBinormal3fEXT) -1,
-  (GdkGLProc_glBinormal3fvEXT) -1,
-  (GdkGLProc_glBinormal3iEXT) -1,
-  (GdkGLProc_glBinormal3ivEXT) -1,
-  (GdkGLProc_glBinormal3sEXT) -1,
-  (GdkGLProc_glBinormal3svEXT) -1,
-  (GdkGLProc_glTangentPointerEXT) -1,
-  (GdkGLProc_glBinormalPointerEXT) -1
-};
-
-/* glTangent3bEXT */
-GdkGLProc
-gdk_gl_get_glTangent3bEXT (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_EXT_coordinate_frame.glTangent3bEXT == (GdkGLProc_glTangent3bEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3bEXT =
-      (GdkGLProc_glTangent3bEXT) gdk_gl_get_proc_address ("glTangent3bEXT");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3bEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3bEXT) ? "supported" : "not supported"));
+    return NULL;
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3bEXT);
+  return &_procs_GL_NV_fragment_program;
 }
 
-/* glTangent3bvEXT */
+/*
+ * GL_NV_half_float
+ */
+
+static GdkGL_GL_NV_half_float _procs_GL_NV_half_float = {
+  (GdkGLProc_glVertex2hNV) -1,
+  (GdkGLProc_glVertex2hvNV) -1,
+  (GdkGLProc_glVertex3hNV) -1,
+  (GdkGLProc_glVertex3hvNV) -1,
+  (GdkGLProc_glVertex4hNV) -1,
+  (GdkGLProc_glVertex4hvNV) -1,
+  (GdkGLProc_glNormal3hNV) -1,
+  (GdkGLProc_glNormal3hvNV) -1,
+  (GdkGLProc_glColor3hNV) -1,
+  (GdkGLProc_glColor3hvNV) -1,
+  (GdkGLProc_glColor4hNV) -1,
+  (GdkGLProc_glColor4hvNV) -1,
+  (GdkGLProc_glTexCoord1hNV) -1,
+  (GdkGLProc_glTexCoord1hvNV) -1,
+  (GdkGLProc_glTexCoord2hNV) -1,
+  (GdkGLProc_glTexCoord2hvNV) -1,
+  (GdkGLProc_glTexCoord3hNV) -1,
+  (GdkGLProc_glTexCoord3hvNV) -1,
+  (GdkGLProc_glTexCoord4hNV) -1,
+  (GdkGLProc_glTexCoord4hvNV) -1,
+  (GdkGLProc_glMultiTexCoord1hNV) -1,
+  (GdkGLProc_glMultiTexCoord1hvNV) -1,
+  (GdkGLProc_glMultiTexCoord2hNV) -1,
+  (GdkGLProc_glMultiTexCoord2hvNV) -1,
+  (GdkGLProc_glMultiTexCoord3hNV) -1,
+  (GdkGLProc_glMultiTexCoord3hvNV) -1,
+  (GdkGLProc_glMultiTexCoord4hNV) -1,
+  (GdkGLProc_glMultiTexCoord4hvNV) -1,
+  (GdkGLProc_glFogCoordhNV) -1,
+  (GdkGLProc_glFogCoordhvNV) -1,
+  (GdkGLProc_glSecondaryColor3hNV) -1,
+  (GdkGLProc_glSecondaryColor3hvNV) -1,
+  (GdkGLProc_glVertexWeighthNV) -1,
+  (GdkGLProc_glVertexWeighthvNV) -1,
+  (GdkGLProc_glVertexAttrib1hNV) -1,
+  (GdkGLProc_glVertexAttrib1hvNV) -1,
+  (GdkGLProc_glVertexAttrib2hNV) -1,
+  (GdkGLProc_glVertexAttrib2hvNV) -1,
+  (GdkGLProc_glVertexAttrib3hNV) -1,
+  (GdkGLProc_glVertexAttrib3hvNV) -1,
+  (GdkGLProc_glVertexAttrib4hNV) -1,
+  (GdkGLProc_glVertexAttrib4hvNV) -1,
+  (GdkGLProc_glVertexAttribs1hvNV) -1,
+  (GdkGLProc_glVertexAttribs2hvNV) -1,
+  (GdkGLProc_glVertexAttribs3hvNV) -1,
+  (GdkGLProc_glVertexAttribs4hvNV) -1
+};
+
+/* glVertex2hNV */
 GdkGLProc
-gdk_gl_get_glTangent3bvEXT (void)
+gdk_gl_get_glVertex2hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3bvEXT == (GdkGLProc_glTangent3bvEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3bvEXT =
-      (GdkGLProc_glTangent3bvEXT) gdk_gl_get_proc_address ("glTangent3bvEXT");
+  if (_procs_GL_NV_half_float.glVertex2hNV == (GdkGLProc_glVertex2hNV) -1)
+    _procs_GL_NV_half_float.glVertex2hNV =
+      (GdkGLProc_glVertex2hNV) gdk_gl_get_proc_address ("glVertex2hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3bvEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3bvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertex2hNV () - %s",
+               (_procs_GL_NV_half_float.glVertex2hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3bvEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex2hNV);
 }
 
-/* glTangent3dEXT */
+/* glVertex2hvNV */
 GdkGLProc
-gdk_gl_get_glTangent3dEXT (void)
+gdk_gl_get_glVertex2hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3dEXT == (GdkGLProc_glTangent3dEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3dEXT =
-      (GdkGLProc_glTangent3dEXT) gdk_gl_get_proc_address ("glTangent3dEXT");
+  if (_procs_GL_NV_half_float.glVertex2hvNV == (GdkGLProc_glVertex2hvNV) -1)
+    _procs_GL_NV_half_float.glVertex2hvNV =
+      (GdkGLProc_glVertex2hvNV) gdk_gl_get_proc_address ("glVertex2hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3dEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3dEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertex2hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertex2hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3dEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex2hvNV);
 }
 
-/* glTangent3dvEXT */
+/* glVertex3hNV */
 GdkGLProc
-gdk_gl_get_glTangent3dvEXT (void)
+gdk_gl_get_glVertex3hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3dvEXT == (GdkGLProc_glTangent3dvEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3dvEXT =
-      (GdkGLProc_glTangent3dvEXT) gdk_gl_get_proc_address ("glTangent3dvEXT");
+  if (_procs_GL_NV_half_float.glVertex3hNV == (GdkGLProc_glVertex3hNV) -1)
+    _procs_GL_NV_half_float.glVertex3hNV =
+      (GdkGLProc_glVertex3hNV) gdk_gl_get_proc_address ("glVertex3hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3dvEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3dvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertex3hNV () - %s",
+               (_procs_GL_NV_half_float.glVertex3hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3dvEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex3hNV);
 }
 
-/* glTangent3fEXT */
+/* glVertex3hvNV */
 GdkGLProc
-gdk_gl_get_glTangent3fEXT (void)
+gdk_gl_get_glVertex3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3fEXT == (GdkGLProc_glTangent3fEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3fEXT =
-      (GdkGLProc_glTangent3fEXT) gdk_gl_get_proc_address ("glTangent3fEXT");
+  if (_procs_GL_NV_half_float.glVertex3hvNV == (GdkGLProc_glVertex3hvNV) -1)
+    _procs_GL_NV_half_float.glVertex3hvNV =
+      (GdkGLProc_glVertex3hvNV) gdk_gl_get_proc_address ("glVertex3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3fEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3fEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertex3hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertex3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3fEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex3hvNV);
 }
 
-/* glTangent3fvEXT */
+/* glVertex4hNV */
 GdkGLProc
-gdk_gl_get_glTangent3fvEXT (void)
+gdk_gl_get_glVertex4hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3fvEXT == (GdkGLProc_glTangent3fvEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3fvEXT =
-      (GdkGLProc_glTangent3fvEXT) gdk_gl_get_proc_address ("glTangent3fvEXT");
+  if (_procs_GL_NV_half_float.glVertex4hNV == (GdkGLProc_glVertex4hNV) -1)
+    _procs_GL_NV_half_float.glVertex4hNV =
+      (GdkGLProc_glVertex4hNV) gdk_gl_get_proc_address ("glVertex4hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3fvEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3fvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertex4hNV () - %s",
+               (_procs_GL_NV_half_float.glVertex4hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3fvEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex4hNV);
 }
 
-/* glTangent3iEXT */
+/* glVertex4hvNV */
 GdkGLProc
-gdk_gl_get_glTangent3iEXT (void)
+gdk_gl_get_glVertex4hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3iEXT == (GdkGLProc_glTangent3iEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3iEXT =
-      (GdkGLProc_glTangent3iEXT) gdk_gl_get_proc_address ("glTangent3iEXT");
+  if (_procs_GL_NV_half_float.glVertex4hvNV == (GdkGLProc_glVertex4hvNV) -1)
+    _procs_GL_NV_half_float.glVertex4hvNV =
+      (GdkGLProc_glVertex4hvNV) gdk_gl_get_proc_address ("glVertex4hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3iEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3iEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertex4hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertex4hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3iEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex4hvNV);
 }
 
-/* glTangent3ivEXT */
+/* glNormal3hNV */
 GdkGLProc
-gdk_gl_get_glTangent3ivEXT (void)
+gdk_gl_get_glNormal3hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3ivEXT == (GdkGLProc_glTangent3ivEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3ivEXT =
-      (GdkGLProc_glTangent3ivEXT) gdk_gl_get_proc_address ("glTangent3ivEXT");
+  if (_procs_GL_NV_half_float.glNormal3hNV == (GdkGLProc_glNormal3hNV) -1)
+    _procs_GL_NV_half_float.glNormal3hNV =
+      (GdkGLProc_glNormal3hNV) gdk_gl_get_proc_address ("glNormal3hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3ivEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3ivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormal3hNV () - %s",
+               (_procs_GL_NV_half_float.glNormal3hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3ivEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glNormal3hNV);
 }
 
-/* glTangent3sEXT */
+/* glNormal3hvNV */
 GdkGLProc
-gdk_gl_get_glTangent3sEXT (void)
+gdk_gl_get_glNormal3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3sEXT == (GdkGLProc_glTangent3sEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3sEXT =
-      (GdkGLProc_glTangent3sEXT) gdk_gl_get_proc_address ("glTangent3sEXT");
+  if (_procs_GL_NV_half_float.glNormal3hvNV == (GdkGLProc_glNormal3hvNV) -1)
+    _procs_GL_NV_half_float.glNormal3hvNV =
+      (GdkGLProc_glNormal3hvNV) gdk_gl_get_proc_address ("glNormal3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3sEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3sEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNormal3hvNV () - %s",
+               (_procs_GL_NV_half_float.glNormal3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3sEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glNormal3hvNV);
 }
 
-/* glTangent3svEXT */
+/* glColor3hNV */
 GdkGLProc
-gdk_gl_get_glTangent3svEXT (void)
+gdk_gl_get_glColor3hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangent3svEXT == (GdkGLProc_glTangent3svEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangent3svEXT =
-      (GdkGLProc_glTangent3svEXT) gdk_gl_get_proc_address ("glTangent3svEXT");
+  if (_procs_GL_NV_half_float.glColor3hNV == (GdkGLProc_glColor3hNV) -1)
+    _procs_GL_NV_half_float.glColor3hNV =
+      (GdkGLProc_glColor3hNV) gdk_gl_get_proc_address ("glColor3hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangent3svEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangent3svEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glColor3hNV () - %s",
+               (_procs_GL_NV_half_float.glColor3hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangent3svEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glColor3hNV);
 }
 
-/* glBinormal3bEXT */
+/* glColor3hvNV */
 GdkGLProc
-gdk_gl_get_glBinormal3bEXT (void)
+gdk_gl_get_glColor3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3bEXT == (GdkGLProc_glBinormal3bEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3bEXT =
-      (GdkGLProc_glBinormal3bEXT) gdk_gl_get_proc_address ("glBinormal3bEXT");
+  if (_procs_GL_NV_half_float.glColor3hvNV == (GdkGLProc_glColor3hvNV) -1)
+    _procs_GL_NV_half_float.glColor3hvNV =
+      (GdkGLProc_glColor3hvNV) gdk_gl_get_proc_address ("glColor3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3bEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3bEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glColor3hvNV () - %s",
+               (_procs_GL_NV_half_float.glColor3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3bEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glColor3hvNV);
 }
 
-/* glBinormal3bvEXT */
+/* glColor4hNV */
 GdkGLProc
-gdk_gl_get_glBinormal3bvEXT (void)
+gdk_gl_get_glColor4hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3bvEXT == (GdkGLProc_glBinormal3bvEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3bvEXT =
-      (GdkGLProc_glBinormal3bvEXT) gdk_gl_get_proc_address ("glBinormal3bvEXT");
+  if (_procs_GL_NV_half_float.glColor4hNV == (GdkGLProc_glColor4hNV) -1)
+    _procs_GL_NV_half_float.glColor4hNV =
+      (GdkGLProc_glColor4hNV) gdk_gl_get_proc_address ("glColor4hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3bvEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3bvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glColor4hNV () - %s",
+               (_procs_GL_NV_half_float.glColor4hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3bvEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glColor4hNV);
 }
 
-/* glBinormal3dEXT */
+/* glColor4hvNV */
 GdkGLProc
-gdk_gl_get_glBinormal3dEXT (void)
+gdk_gl_get_glColor4hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3dEXT == (GdkGLProc_glBinormal3dEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3dEXT =
-      (GdkGLProc_glBinormal3dEXT) gdk_gl_get_proc_address ("glBinormal3dEXT");
+  if (_procs_GL_NV_half_float.glColor4hvNV == (GdkGLProc_glColor4hvNV) -1)
+    _procs_GL_NV_half_float.glColor4hvNV =
+      (GdkGLProc_glColor4hvNV) gdk_gl_get_proc_address ("glColor4hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3dEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3dEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glColor4hvNV () - %s",
+               (_procs_GL_NV_half_float.glColor4hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3dEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glColor4hvNV);
 }
 
-/* glBinormal3dvEXT */
+/* glTexCoord1hNV */
 GdkGLProc
-gdk_gl_get_glBinormal3dvEXT (void)
+gdk_gl_get_glTexCoord1hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3dvEXT == (GdkGLProc_glBinormal3dvEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3dvEXT =
-      (GdkGLProc_glBinormal3dvEXT) gdk_gl_get_proc_address ("glBinormal3dvEXT");
-
+  if (_procs_GL_NV_half_float.glTexCoord1hNV == (GdkGLProc_glTexCoord1hNV) -1)
+    _procs_GL_NV_half_float.glTexCoord1hNV =
+      (GdkGLProc_glTexCoord1hNV) gdk_gl_get_proc_address ("glTexCoord1hNV");
+
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3dvEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3dvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord1hNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord1hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3dvEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord1hNV);
 }
 
-/* glBinormal3fEXT */
+/* glTexCoord1hvNV */
 GdkGLProc
-gdk_gl_get_glBinormal3fEXT (void)
+gdk_gl_get_glTexCoord1hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3fEXT == (GdkGLProc_glBinormal3fEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3fEXT =
-      (GdkGLProc_glBinormal3fEXT) gdk_gl_get_proc_address ("glBinormal3fEXT");
+  if (_procs_GL_NV_half_float.glTexCoord1hvNV == (GdkGLProc_glTexCoord1hvNV) -1)
+    _procs_GL_NV_half_float.glTexCoord1hvNV =
+      (GdkGLProc_glTexCoord1hvNV) gdk_gl_get_proc_address ("glTexCoord1hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3fEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3fEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord1hvNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord1hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3fEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord1hvNV);
 }
 
-/* glBinormal3fvEXT */
+/* glTexCoord2hNV */
 GdkGLProc
-gdk_gl_get_glBinormal3fvEXT (void)
+gdk_gl_get_glTexCoord2hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3fvEXT == (GdkGLProc_glBinormal3fvEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3fvEXT =
-      (GdkGLProc_glBinormal3fvEXT) gdk_gl_get_proc_address ("glBinormal3fvEXT");
+  if (_procs_GL_NV_half_float.glTexCoord2hNV == (GdkGLProc_glTexCoord2hNV) -1)
+    _procs_GL_NV_half_float.glTexCoord2hNV =
+      (GdkGLProc_glTexCoord2hNV) gdk_gl_get_proc_address ("glTexCoord2hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3fvEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3fvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord2hNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord2hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3fvEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord2hNV);
 }
 
-/* glBinormal3iEXT */
+/* glTexCoord2hvNV */
 GdkGLProc
-gdk_gl_get_glBinormal3iEXT (void)
+gdk_gl_get_glTexCoord2hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3iEXT == (GdkGLProc_glBinormal3iEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3iEXT =
-      (GdkGLProc_glBinormal3iEXT) gdk_gl_get_proc_address ("glBinormal3iEXT");
+  if (_procs_GL_NV_half_float.glTexCoord2hvNV == (GdkGLProc_glTexCoord2hvNV) -1)
+    _procs_GL_NV_half_float.glTexCoord2hvNV =
+      (GdkGLProc_glTexCoord2hvNV) gdk_gl_get_proc_address ("glTexCoord2hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3iEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3iEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord2hvNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord2hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3iEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord2hvNV);
 }
 
-/* glBinormal3ivEXT */
+/* glTexCoord3hNV */
 GdkGLProc
-gdk_gl_get_glBinormal3ivEXT (void)
+gdk_gl_get_glTexCoord3hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3ivEXT == (GdkGLProc_glBinormal3ivEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3ivEXT =
-      (GdkGLProc_glBinormal3ivEXT) gdk_gl_get_proc_address ("glBinormal3ivEXT");
+  if (_procs_GL_NV_half_float.glTexCoord3hNV == (GdkGLProc_glTexCoord3hNV) -1)
+    _procs_GL_NV_half_float.glTexCoord3hNV =
+      (GdkGLProc_glTexCoord3hNV) gdk_gl_get_proc_address ("glTexCoord3hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3ivEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3ivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord3hNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord3hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3ivEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord3hNV);
 }
 
-/* glBinormal3sEXT */
+/* glTexCoord3hvNV */
 GdkGLProc
-gdk_gl_get_glBinormal3sEXT (void)
+gdk_gl_get_glTexCoord3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3sEXT == (GdkGLProc_glBinormal3sEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3sEXT =
-      (GdkGLProc_glBinormal3sEXT) gdk_gl_get_proc_address ("glBinormal3sEXT");
+  if (_procs_GL_NV_half_float.glTexCoord3hvNV == (GdkGLProc_glTexCoord3hvNV) -1)
+    _procs_GL_NV_half_float.glTexCoord3hvNV =
+      (GdkGLProc_glTexCoord3hvNV) gdk_gl_get_proc_address ("glTexCoord3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3sEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3sEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord3hvNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3sEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord3hvNV);
 }
 
-/* glBinormal3svEXT */
+/* glTexCoord4hNV */
 GdkGLProc
-gdk_gl_get_glBinormal3svEXT (void)
+gdk_gl_get_glTexCoord4hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormal3svEXT == (GdkGLProc_glBinormal3svEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormal3svEXT =
-      (GdkGLProc_glBinormal3svEXT) gdk_gl_get_proc_address ("glBinormal3svEXT");
+  if (_procs_GL_NV_half_float.glTexCoord4hNV == (GdkGLProc_glTexCoord4hNV) -1)
+    _procs_GL_NV_half_float.glTexCoord4hNV =
+      (GdkGLProc_glTexCoord4hNV) gdk_gl_get_proc_address ("glTexCoord4hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormal3svEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormal3svEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord4hNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord4hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormal3svEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord4hNV);
 }
 
-/* glTangentPointerEXT */
+/* glTexCoord4hvNV */
 GdkGLProc
-gdk_gl_get_glTangentPointerEXT (void)
+gdk_gl_get_glTexCoord4hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glTangentPointerEXT == (GdkGLProc_glTangentPointerEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glTangentPointerEXT =
-      (GdkGLProc_glTangentPointerEXT) gdk_gl_get_proc_address ("glTangentPointerEXT");
+  if (_procs_GL_NV_half_float.glTexCoord4hvNV == (GdkGLProc_glTexCoord4hvNV) -1)
+    _procs_GL_NV_half_float.glTexCoord4hvNV =
+      (GdkGLProc_glTexCoord4hvNV) gdk_gl_get_proc_address ("glTexCoord4hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTangentPointerEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glTangentPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexCoord4hvNV () - %s",
+               (_procs_GL_NV_half_float.glTexCoord4hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glTangentPointerEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord4hvNV);
 }
 
-/* glBinormalPointerEXT */
+/* glMultiTexCoord1hNV */
 GdkGLProc
-gdk_gl_get_glBinormalPointerEXT (void)
+gdk_gl_get_glMultiTexCoord1hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_coordinate_frame.glBinormalPointerEXT == (GdkGLProc_glBinormalPointerEXT) -1)
-    _procs_GL_EXT_coordinate_frame.glBinormalPointerEXT =
-      (GdkGLProc_glBinormalPointerEXT) gdk_gl_get_proc_address ("glBinormalPointerEXT");
+  if (_procs_GL_NV_half_float.glMultiTexCoord1hNV == (GdkGLProc_glMultiTexCoord1hNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord1hNV =
+      (GdkGLProc_glMultiTexCoord1hNV) gdk_gl_get_proc_address ("glMultiTexCoord1hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBinormalPointerEXT () - %s",
-               (_procs_GL_EXT_coordinate_frame.glBinormalPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord1hNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord1hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_coordinate_frame.glBinormalPointerEXT);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord1hNV);
 }
 
-/* Get GL_EXT_coordinate_frame functions */
-GdkGL_GL_EXT_coordinate_frame *
-gdk_gl_get_GL_EXT_coordinate_frame (void)
+/* glMultiTexCoord1hvNV */
+GdkGLProc
+gdk_gl_get_glMultiTexCoord1hvNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_coordinate_frame");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTangent3bEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3bvEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3dEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3dvEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3fEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3fvEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3iEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3ivEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3sEXT () != NULL);
-          supported &= (gdk_gl_get_glTangent3svEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3bEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3bvEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3dEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3dvEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3fEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3fvEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3iEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3ivEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3sEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormal3svEXT () != NULL);
-          supported &= (gdk_gl_get_glTangentPointerEXT () != NULL);
-          supported &= (gdk_gl_get_glBinormalPointerEXT () != NULL);
-        }
-    }
+  if (_procs_GL_NV_half_float.glMultiTexCoord1hvNV == (GdkGLProc_glMultiTexCoord1hvNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord1hvNV =
+      (GdkGLProc_glMultiTexCoord1hvNV) gdk_gl_get_proc_address ("glMultiTexCoord1hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_coordinate_frame () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glMultiTexCoord1hvNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord1hvNV) ? "supported" : "not supported"));
 
-  return &_procs_GL_EXT_coordinate_frame;
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord1hvNV);
 }
 
-/*
- * GL_SUNX_constant_data
- */
-
-static GdkGL_GL_SUNX_constant_data _procs_GL_SUNX_constant_data = {
-  (GdkGLProc_glFinishTextureSUNX) -1
-};
-
-/* glFinishTextureSUNX */
+/* glMultiTexCoord2hNV */
 GdkGLProc
-gdk_gl_get_glFinishTextureSUNX (void)
+gdk_gl_get_glMultiTexCoord2hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUNX_constant_data.glFinishTextureSUNX == (GdkGLProc_glFinishTextureSUNX) -1)
-    _procs_GL_SUNX_constant_data.glFinishTextureSUNX =
-      (GdkGLProc_glFinishTextureSUNX) gdk_gl_get_proc_address ("glFinishTextureSUNX");
+  if (_procs_GL_NV_half_float.glMultiTexCoord2hNV == (GdkGLProc_glMultiTexCoord2hNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord2hNV =
+      (GdkGLProc_glMultiTexCoord2hNV) gdk_gl_get_proc_address ("glMultiTexCoord2hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFinishTextureSUNX () - %s",
-               (_procs_GL_SUNX_constant_data.glFinishTextureSUNX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord2hNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord2hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUNX_constant_data.glFinishTextureSUNX);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord2hNV);
 }
 
-/* Get GL_SUNX_constant_data functions */
-GdkGL_GL_SUNX_constant_data *
-gdk_gl_get_GL_SUNX_constant_data (void)
+/* glMultiTexCoord2hvNV */
+GdkGLProc
+gdk_gl_get_glMultiTexCoord2hvNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SUNX_constant_data");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glFinishTextureSUNX () != NULL);
-        }
-    }
+  if (_procs_GL_NV_half_float.glMultiTexCoord2hvNV == (GdkGLProc_glMultiTexCoord2hvNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord2hvNV =
+      (GdkGLProc_glMultiTexCoord2hvNV) gdk_gl_get_proc_address ("glMultiTexCoord2hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SUNX_constant_data () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glMultiTexCoord2hvNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord2hvNV) ? "supported" : "not supported"));
 
-  return &_procs_GL_SUNX_constant_data;
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord2hvNV);
 }
 
-/*
- * GL_SUN_global_alpha
- */
-
-static GdkGL_GL_SUN_global_alpha _procs_GL_SUN_global_alpha = {
-  (GdkGLProc_glGlobalAlphaFactorbSUN) -1,
-  (GdkGLProc_glGlobalAlphaFactorsSUN) -1,
-  (GdkGLProc_glGlobalAlphaFactoriSUN) -1,
-  (GdkGLProc_glGlobalAlphaFactorfSUN) -1,
-  (GdkGLProc_glGlobalAlphaFactordSUN) -1,
-  (GdkGLProc_glGlobalAlphaFactorubSUN) -1,
-  (GdkGLProc_glGlobalAlphaFactorusSUN) -1,
-  (GdkGLProc_glGlobalAlphaFactoruiSUN) -1
-};
-
-/* glGlobalAlphaFactorbSUN */
+/* glMultiTexCoord3hNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactorbSUN (void)
+gdk_gl_get_glMultiTexCoord3hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN == (GdkGLProc_glGlobalAlphaFactorbSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN =
-      (GdkGLProc_glGlobalAlphaFactorbSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorbSUN");
+  if (_procs_GL_NV_half_float.glMultiTexCoord3hNV == (GdkGLProc_glMultiTexCoord3hNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord3hNV =
+      (GdkGLProc_glMultiTexCoord3hNV) gdk_gl_get_proc_address ("glMultiTexCoord3hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactorbSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3hNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord3hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorbSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord3hNV);
 }
 
-/* glGlobalAlphaFactorsSUN */
+/* glMultiTexCoord3hvNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactorsSUN (void)
+gdk_gl_get_glMultiTexCoord3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN == (GdkGLProc_glGlobalAlphaFactorsSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN =
-      (GdkGLProc_glGlobalAlphaFactorsSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorsSUN");
+  if (_procs_GL_NV_half_float.glMultiTexCoord3hvNV == (GdkGLProc_glMultiTexCoord3hvNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord3hvNV =
+      (GdkGLProc_glMultiTexCoord3hvNV) gdk_gl_get_proc_address ("glMultiTexCoord3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactorsSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord3hvNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorsSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord3hvNV);
 }
 
-/* glGlobalAlphaFactoriSUN */
+/* glMultiTexCoord4hNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactoriSUN (void)
+gdk_gl_get_glMultiTexCoord4hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN == (GdkGLProc_glGlobalAlphaFactoriSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN =
-      (GdkGLProc_glGlobalAlphaFactoriSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactoriSUN");
+  if (_procs_GL_NV_half_float.glMultiTexCoord4hNV == (GdkGLProc_glMultiTexCoord4hNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord4hNV =
+      (GdkGLProc_glMultiTexCoord4hNV) gdk_gl_get_proc_address ("glMultiTexCoord4hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactoriSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4hNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord4hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoriSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord4hNV);
 }
 
-/* glGlobalAlphaFactorfSUN */
+/* glMultiTexCoord4hvNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactorfSUN (void)
+gdk_gl_get_glMultiTexCoord4hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN == (GdkGLProc_glGlobalAlphaFactorfSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN =
-      (GdkGLProc_glGlobalAlphaFactorfSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorfSUN");
+  if (_procs_GL_NV_half_float.glMultiTexCoord4hvNV == (GdkGLProc_glMultiTexCoord4hvNV) -1)
+    _procs_GL_NV_half_float.glMultiTexCoord4hvNV =
+      (GdkGLProc_glMultiTexCoord4hvNV) gdk_gl_get_proc_address ("glMultiTexCoord4hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactorfSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoord4hvNV () - %s",
+               (_procs_GL_NV_half_float.glMultiTexCoord4hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorfSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord4hvNV);
 }
 
-/* glGlobalAlphaFactordSUN */
+/* glFogCoordhNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactordSUN (void)
+gdk_gl_get_glFogCoordhNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN == (GdkGLProc_glGlobalAlphaFactordSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN =
-      (GdkGLProc_glGlobalAlphaFactordSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactordSUN");
+  if (_procs_GL_NV_half_float.glFogCoordhNV == (GdkGLProc_glFogCoordhNV) -1)
+    _procs_GL_NV_half_float.glFogCoordhNV =
+      (GdkGLProc_glFogCoordhNV) gdk_gl_get_proc_address ("glFogCoordhNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactordSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFogCoordhNV () - %s",
+               (_procs_GL_NV_half_float.glFogCoordhNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactordSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glFogCoordhNV);
 }
 
-/* glGlobalAlphaFactorubSUN */
+/* glFogCoordhvNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactorubSUN (void)
+gdk_gl_get_glFogCoordhvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN == (GdkGLProc_glGlobalAlphaFactorubSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN =
-      (GdkGLProc_glGlobalAlphaFactorubSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorubSUN");
+  if (_procs_GL_NV_half_float.glFogCoordhvNV == (GdkGLProc_glFogCoordhvNV) -1)
+    _procs_GL_NV_half_float.glFogCoordhvNV =
+      (GdkGLProc_glFogCoordhvNV) gdk_gl_get_proc_address ("glFogCoordhvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactorubSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFogCoordhvNV () - %s",
+               (_procs_GL_NV_half_float.glFogCoordhvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorubSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glFogCoordhvNV);
 }
 
-/* glGlobalAlphaFactorusSUN */
+/* glSecondaryColor3hNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactorusSUN (void)
+gdk_gl_get_glSecondaryColor3hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN == (GdkGLProc_glGlobalAlphaFactorusSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN =
-      (GdkGLProc_glGlobalAlphaFactorusSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactorusSUN");
+  if (_procs_GL_NV_half_float.glSecondaryColor3hNV == (GdkGLProc_glSecondaryColor3hNV) -1)
+    _procs_GL_NV_half_float.glSecondaryColor3hNV =
+      (GdkGLProc_glSecondaryColor3hNV) gdk_gl_get_proc_address ("glSecondaryColor3hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactorusSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSecondaryColor3hNV () - %s",
+               (_procs_GL_NV_half_float.glSecondaryColor3hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactorusSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glSecondaryColor3hNV);
 }
 
-/* glGlobalAlphaFactoruiSUN */
+/* glSecondaryColor3hvNV */
 GdkGLProc
-gdk_gl_get_glGlobalAlphaFactoruiSUN (void)
+gdk_gl_get_glSecondaryColor3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN == (GdkGLProc_glGlobalAlphaFactoruiSUN) -1)
-    _procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN =
-      (GdkGLProc_glGlobalAlphaFactoruiSUN) gdk_gl_get_proc_address ("glGlobalAlphaFactoruiSUN");
+  if (_procs_GL_NV_half_float.glSecondaryColor3hvNV == (GdkGLProc_glSecondaryColor3hvNV) -1)
+    _procs_GL_NV_half_float.glSecondaryColor3hvNV =
+      (GdkGLProc_glSecondaryColor3hvNV) gdk_gl_get_proc_address ("glSecondaryColor3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGlobalAlphaFactoruiSUN () - %s",
-               (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSecondaryColor3hvNV () - %s",
+               (_procs_GL_NV_half_float.glSecondaryColor3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_global_alpha.glGlobalAlphaFactoruiSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glSecondaryColor3hvNV);
 }
 
-/* Get GL_SUN_global_alpha functions */
-GdkGL_GL_SUN_global_alpha *
-gdk_gl_get_GL_SUN_global_alpha (void)
+/* glVertexWeighthNV */
+GdkGLProc
+gdk_gl_get_glVertexWeighthNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SUN_global_alpha");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glGlobalAlphaFactorbSUN () != NULL);
-          supported &= (gdk_gl_get_glGlobalAlphaFactorsSUN () != NULL);
-          supported &= (gdk_gl_get_glGlobalAlphaFactoriSUN () != NULL);
-          supported &= (gdk_gl_get_glGlobalAlphaFactorfSUN () != NULL);
-          supported &= (gdk_gl_get_glGlobalAlphaFactordSUN () != NULL);
-          supported &= (gdk_gl_get_glGlobalAlphaFactorubSUN () != NULL);
-          supported &= (gdk_gl_get_glGlobalAlphaFactorusSUN () != NULL);
-          supported &= (gdk_gl_get_glGlobalAlphaFactoruiSUN () != NULL);
-        }
-    }
+  if (_procs_GL_NV_half_float.glVertexWeighthNV == (GdkGLProc_glVertexWeighthNV) -1)
+    _procs_GL_NV_half_float.glVertexWeighthNV =
+      (GdkGLProc_glVertexWeighthNV) gdk_gl_get_proc_address ("glVertexWeighthNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SUN_global_alpha () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glVertexWeighthNV () - %s",
+               (_procs_GL_NV_half_float.glVertexWeighthNV) ? "supported" : "not supported"));
 
-  return &_procs_GL_SUN_global_alpha;
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexWeighthNV);
 }
 
-/*
- * GL_SUN_triangle_list
- */
-
-static GdkGL_GL_SUN_triangle_list _procs_GL_SUN_triangle_list = {
-  (GdkGLProc_glReplacementCodeuiSUN) -1,
-  (GdkGLProc_glReplacementCodeusSUN) -1,
-  (GdkGLProc_glReplacementCodeubSUN) -1,
-  (GdkGLProc_glReplacementCodeuivSUN) -1,
-  (GdkGLProc_glReplacementCodeusvSUN) -1,
-  (GdkGLProc_glReplacementCodeubvSUN) -1,
-  (GdkGLProc_glReplacementCodePointerSUN) -1
-};
-
-/* glReplacementCodeuiSUN */
+/* glVertexWeighthvNV */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiSUN (void)
+gdk_gl_get_glVertexWeighthvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_triangle_list.glReplacementCodeuiSUN == (GdkGLProc_glReplacementCodeuiSUN) -1)
-    _procs_GL_SUN_triangle_list.glReplacementCodeuiSUN =
-      (GdkGLProc_glReplacementCodeuiSUN) gdk_gl_get_proc_address ("glReplacementCodeuiSUN");
+  if (_procs_GL_NV_half_float.glVertexWeighthvNV == (GdkGLProc_glVertexWeighthvNV) -1)
+    _procs_GL_NV_half_float.glVertexWeighthvNV =
+      (GdkGLProc_glVertexWeighthvNV) gdk_gl_get_proc_address ("glVertexWeighthvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiSUN () - %s",
-               (_procs_GL_SUN_triangle_list.glReplacementCodeuiSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexWeighthvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexWeighthvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeuiSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexWeighthvNV);
 }
 
-/* glReplacementCodeusSUN */
+/* glVertexAttrib1hNV */
 GdkGLProc
-gdk_gl_get_glReplacementCodeusSUN (void)
+gdk_gl_get_glVertexAttrib1hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_triangle_list.glReplacementCodeusSUN == (GdkGLProc_glReplacementCodeusSUN) -1)
-    _procs_GL_SUN_triangle_list.glReplacementCodeusSUN =
-      (GdkGLProc_glReplacementCodeusSUN) gdk_gl_get_proc_address ("glReplacementCodeusSUN");
+  if (_procs_GL_NV_half_float.glVertexAttrib1hNV == (GdkGLProc_glVertexAttrib1hNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib1hNV =
+      (GdkGLProc_glVertexAttrib1hNV) gdk_gl_get_proc_address ("glVertexAttrib1hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeusSUN () - %s",
-               (_procs_GL_SUN_triangle_list.glReplacementCodeusSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1hNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib1hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeusSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib1hNV);
 }
 
-/* glReplacementCodeubSUN */
+/* glVertexAttrib1hvNV */
 GdkGLProc
-gdk_gl_get_glReplacementCodeubSUN (void)
+gdk_gl_get_glVertexAttrib1hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_triangle_list.glReplacementCodeubSUN == (GdkGLProc_glReplacementCodeubSUN) -1)
-    _procs_GL_SUN_triangle_list.glReplacementCodeubSUN =
-      (GdkGLProc_glReplacementCodeubSUN) gdk_gl_get_proc_address ("glReplacementCodeubSUN");
+  if (_procs_GL_NV_half_float.glVertexAttrib1hvNV == (GdkGLProc_glVertexAttrib1hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib1hvNV =
+      (GdkGLProc_glVertexAttrib1hvNV) gdk_gl_get_proc_address ("glVertexAttrib1hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeubSUN () - %s",
-               (_procs_GL_SUN_triangle_list.glReplacementCodeubSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib1hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib1hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeubSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib1hvNV);
 }
 
-/* glReplacementCodeuivSUN */
+/* glVertexAttrib2hNV */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuivSUN (void)
+gdk_gl_get_glVertexAttrib2hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_triangle_list.glReplacementCodeuivSUN == (GdkGLProc_glReplacementCodeuivSUN) -1)
-    _procs_GL_SUN_triangle_list.glReplacementCodeuivSUN =
-      (GdkGLProc_glReplacementCodeuivSUN) gdk_gl_get_proc_address ("glReplacementCodeuivSUN");
+  if (_procs_GL_NV_half_float.glVertexAttrib2hNV == (GdkGLProc_glVertexAttrib2hNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib2hNV =
+      (GdkGLProc_glVertexAttrib2hNV) gdk_gl_get_proc_address ("glVertexAttrib2hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuivSUN () - %s",
-               (_procs_GL_SUN_triangle_list.glReplacementCodeuivSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2hNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib2hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeuivSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib2hNV);
 }
 
-/* glReplacementCodeusvSUN */
+/* glVertexAttrib2hvNV */
 GdkGLProc
-gdk_gl_get_glReplacementCodeusvSUN (void)
+gdk_gl_get_glVertexAttrib2hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_triangle_list.glReplacementCodeusvSUN == (GdkGLProc_glReplacementCodeusvSUN) -1)
-    _procs_GL_SUN_triangle_list.glReplacementCodeusvSUN =
-      (GdkGLProc_glReplacementCodeusvSUN) gdk_gl_get_proc_address ("glReplacementCodeusvSUN");
+  if (_procs_GL_NV_half_float.glVertexAttrib2hvNV == (GdkGLProc_glVertexAttrib2hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib2hvNV =
+      (GdkGLProc_glVertexAttrib2hvNV) gdk_gl_get_proc_address ("glVertexAttrib2hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeusvSUN () - %s",
-               (_procs_GL_SUN_triangle_list.glReplacementCodeusvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib2hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib2hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeusvSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib2hvNV);
 }
 
-/* glReplacementCodeubvSUN */
+/* glVertexAttrib3hNV */
 GdkGLProc
-gdk_gl_get_glReplacementCodeubvSUN (void)
+gdk_gl_get_glVertexAttrib3hNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_triangle_list.glReplacementCodeubvSUN == (GdkGLProc_glReplacementCodeubvSUN) -1)
-    _procs_GL_SUN_triangle_list.glReplacementCodeubvSUN =
-      (GdkGLProc_glReplacementCodeubvSUN) gdk_gl_get_proc_address ("glReplacementCodeubvSUN");
+  if (_procs_GL_NV_half_float.glVertexAttrib3hNV == (GdkGLProc_glVertexAttrib3hNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib3hNV =
+      (GdkGLProc_glVertexAttrib3hNV) gdk_gl_get_proc_address ("glVertexAttrib3hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeubvSUN () - %s",
-               (_procs_GL_SUN_triangle_list.glReplacementCodeubvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3hNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib3hNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodeubvSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib3hNV);
 }
 
-/* glReplacementCodePointerSUN */
+/* glVertexAttrib3hvNV */
 GdkGLProc
-gdk_gl_get_glReplacementCodePointerSUN (void)
+gdk_gl_get_glVertexAttrib3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_triangle_list.glReplacementCodePointerSUN == (GdkGLProc_glReplacementCodePointerSUN) -1)
-    _procs_GL_SUN_triangle_list.glReplacementCodePointerSUN =
-      (GdkGLProc_glReplacementCodePointerSUN) gdk_gl_get_proc_address ("glReplacementCodePointerSUN");
+  if (_procs_GL_NV_half_float.glVertexAttrib3hvNV == (GdkGLProc_glVertexAttrib3hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib3hvNV =
+      (GdkGLProc_glVertexAttrib3hvNV) gdk_gl_get_proc_address ("glVertexAttrib3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodePointerSUN () - %s",
-               (_procs_GL_SUN_triangle_list.glReplacementCodePointerSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib3hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_triangle_list.glReplacementCodePointerSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib3hvNV);
 }
 
-/* Get GL_SUN_triangle_list functions */
-GdkGL_GL_SUN_triangle_list *
-gdk_gl_get_GL_SUN_triangle_list (void)
+/* glVertexAttrib4hNV */
+GdkGLProc
+gdk_gl_get_glVertexAttrib4hNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SUN_triangle_list");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glReplacementCodeuiSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeusSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeubSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuivSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeusvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeubvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodePointerSUN () != NULL);
-        }
-    }
+  if (_procs_GL_NV_half_float.glVertexAttrib4hNV == (GdkGLProc_glVertexAttrib4hNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib4hNV =
+      (GdkGLProc_glVertexAttrib4hNV) gdk_gl_get_proc_address ("glVertexAttrib4hNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SUN_triangle_list () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glVertexAttrib4hNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib4hNV) ? "supported" : "not supported"));
 
-  return &_procs_GL_SUN_triangle_list;
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib4hNV);
 }
 
-/*
- * GL_SUN_vertex
- */
-
-static GdkGL_GL_SUN_vertex _procs_GL_SUN_vertex = {
-  (GdkGLProc_glColor4ubVertex2fSUN) -1,
-  (GdkGLProc_glColor4ubVertex2fvSUN) -1,
-  (GdkGLProc_glColor4ubVertex3fSUN) -1,
-  (GdkGLProc_glColor4ubVertex3fvSUN) -1,
-  (GdkGLProc_glColor3fVertex3fSUN) -1,
-  (GdkGLProc_glColor3fVertex3fvSUN) -1,
-  (GdkGLProc_glNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glNormal3fVertex3fvSUN) -1,
-  (GdkGLProc_glColor4fNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glColor4fNormal3fVertex3fvSUN) -1,
-  (GdkGLProc_glTexCoord2fVertex3fSUN) -1,
-  (GdkGLProc_glTexCoord2fVertex3fvSUN) -1,
-  (GdkGLProc_glTexCoord4fVertex4fSUN) -1,
-  (GdkGLProc_glTexCoord4fVertex4fvSUN) -1,
-  (GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) -1,
-  (GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) -1,
-  (GdkGLProc_glTexCoord2fColor3fVertex3fSUN) -1,
-  (GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) -1,
-  (GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) -1,
-  (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) -1,
-  (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) -1,
-  (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiVertex3fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) -1,
-  (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) -1,
-  (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) -1
-};
-
-/* glColor4ubVertex2fSUN */
+/* glVertexAttrib4hvNV */
 GdkGLProc
-gdk_gl_get_glColor4ubVertex2fSUN (void)
+gdk_gl_get_glVertexAttrib4hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor4ubVertex2fSUN == (GdkGLProc_glColor4ubVertex2fSUN) -1)
-    _procs_GL_SUN_vertex.glColor4ubVertex2fSUN =
-      (GdkGLProc_glColor4ubVertex2fSUN) gdk_gl_get_proc_address ("glColor4ubVertex2fSUN");
+  if (_procs_GL_NV_half_float.glVertexAttrib4hvNV == (GdkGLProc_glVertexAttrib4hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttrib4hvNV =
+      (GdkGLProc_glVertexAttrib4hvNV) gdk_gl_get_proc_address ("glVertexAttrib4hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4ubVertex2fSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor4ubVertex2fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttrib4hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttrib4hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex2fSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib4hvNV);
 }
 
-/* glColor4ubVertex2fvSUN */
+/* glVertexAttribs1hvNV */
 GdkGLProc
-gdk_gl_get_glColor4ubVertex2fvSUN (void)
+gdk_gl_get_glVertexAttribs1hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor4ubVertex2fvSUN == (GdkGLProc_glColor4ubVertex2fvSUN) -1)
-    _procs_GL_SUN_vertex.glColor4ubVertex2fvSUN =
-      (GdkGLProc_glColor4ubVertex2fvSUN) gdk_gl_get_proc_address ("glColor4ubVertex2fvSUN");
+  if (_procs_GL_NV_half_float.glVertexAttribs1hvNV == (GdkGLProc_glVertexAttribs1hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttribs1hvNV =
+      (GdkGLProc_glVertexAttribs1hvNV) gdk_gl_get_proc_address ("glVertexAttribs1hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4ubVertex2fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor4ubVertex2fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribs1hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttribs1hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex2fvSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs1hvNV);
 }
 
-/* glColor4ubVertex3fSUN */
+/* glVertexAttribs2hvNV */
 GdkGLProc
-gdk_gl_get_glColor4ubVertex3fSUN (void)
+gdk_gl_get_glVertexAttribs2hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor4ubVertex3fSUN == (GdkGLProc_glColor4ubVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glColor4ubVertex3fSUN =
-      (GdkGLProc_glColor4ubVertex3fSUN) gdk_gl_get_proc_address ("glColor4ubVertex3fSUN");
+  if (_procs_GL_NV_half_float.glVertexAttribs2hvNV == (GdkGLProc_glVertexAttribs2hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttribs2hvNV =
+      (GdkGLProc_glVertexAttribs2hvNV) gdk_gl_get_proc_address ("glVertexAttribs2hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4ubVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor4ubVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribs2hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttribs2hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs2hvNV);
 }
 
-/* glColor4ubVertex3fvSUN */
+/* glVertexAttribs3hvNV */
 GdkGLProc
-gdk_gl_get_glColor4ubVertex3fvSUN (void)
+gdk_gl_get_glVertexAttribs3hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor4ubVertex3fvSUN == (GdkGLProc_glColor4ubVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glColor4ubVertex3fvSUN =
-      (GdkGLProc_glColor4ubVertex3fvSUN) gdk_gl_get_proc_address ("glColor4ubVertex3fvSUN");
+  if (_procs_GL_NV_half_float.glVertexAttribs3hvNV == (GdkGLProc_glVertexAttribs3hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttribs3hvNV =
+      (GdkGLProc_glVertexAttribs3hvNV) gdk_gl_get_proc_address ("glVertexAttribs3hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4ubVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor4ubVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribs3hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttribs3hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4ubVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs3hvNV);
 }
 
-/* glColor3fVertex3fSUN */
+/* glVertexAttribs4hvNV */
 GdkGLProc
-gdk_gl_get_glColor3fVertex3fSUN (void)
+gdk_gl_get_glVertexAttribs4hvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor3fVertex3fSUN == (GdkGLProc_glColor3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glColor3fVertex3fSUN =
-      (GdkGLProc_glColor3fVertex3fSUN) gdk_gl_get_proc_address ("glColor3fVertex3fSUN");
+  if (_procs_GL_NV_half_float.glVertexAttribs4hvNV == (GdkGLProc_glVertexAttribs4hvNV) -1)
+    _procs_GL_NV_half_float.glVertexAttribs4hvNV =
+      (GdkGLProc_glVertexAttribs4hvNV) gdk_gl_get_proc_address ("glVertexAttribs4hvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribs4hvNV () - %s",
+               (_procs_GL_NV_half_float.glVertexAttribs4hvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor3fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs4hvNV);
 }
 
-/* glColor3fVertex3fvSUN */
-GdkGLProc
-gdk_gl_get_glColor3fVertex3fvSUN (void)
+/* Get GL_NV_half_float functions */
+GdkGL_GL_NV_half_float *
+gdk_gl_get_GL_NV_half_float (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor3fVertex3fvSUN == (GdkGLProc_glColor3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glColor3fVertex3fvSUN =
-      (GdkGLProc_glColor3fVertex3fvSUN) gdk_gl_get_proc_address ("glColor3fVertex3fvSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_half_float");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glVertex2hNV () != NULL);
+          supported &= (gdk_gl_get_glVertex2hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertex3hNV () != NULL);
+          supported &= (gdk_gl_get_glVertex3hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertex4hNV () != NULL);
+          supported &= (gdk_gl_get_glVertex4hvNV () != NULL);
+          supported &= (gdk_gl_get_glNormal3hNV () != NULL);
+          supported &= (gdk_gl_get_glNormal3hvNV () != NULL);
+          supported &= (gdk_gl_get_glColor3hNV () != NULL);
+          supported &= (gdk_gl_get_glColor3hvNV () != NULL);
+          supported &= (gdk_gl_get_glColor4hNV () != NULL);
+          supported &= (gdk_gl_get_glColor4hvNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord1hNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord1hvNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2hNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord2hvNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord3hNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord3hvNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord4hNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoord4hvNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1hNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord1hvNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2hNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord2hvNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3hNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord3hvNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4hNV () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoord4hvNV () != NULL);
+          supported &= (gdk_gl_get_glFogCoordhNV () != NULL);
+          supported &= (gdk_gl_get_glFogCoordhvNV () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3hNV () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColor3hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexWeighthNV () != NULL);
+          supported &= (gdk_gl_get_glVertexWeighthvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1hNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib1hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2hNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib2hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3hNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib3hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4hNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttrib4hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs1hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs2hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs3hvNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribs4hvNV () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor3fVertex3fvSUN) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor3fVertex3fvSUN);
-}
+    g_message (" - gdk_gl_get_GL_NV_half_float () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glNormal3fVertex3fSUN */
-GdkGLProc
-gdk_gl_get_glNormal3fVertex3fSUN (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glNormal3fVertex3fSUN == (GdkGLProc_glNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glNormal3fVertex3fSUN =
-      (GdkGLProc_glNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glNormal3fVertex3fSUN");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glNormal3fVertex3fSUN) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glNormal3fVertex3fSUN);
+  return &_procs_GL_NV_half_float;
 }
 
-/* glNormal3fVertex3fvSUN */
-GdkGLProc
-gdk_gl_get_glNormal3fVertex3fvSUN (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SUN_vertex.glNormal3fVertex3fvSUN == (GdkGLProc_glNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glNormal3fVertex3fvSUN =
-      (GdkGLProc_glNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glNormal3fVertex3fvSUN");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+/*
+ * GL_NV_pixel_data_range
+ */
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glNormal3fVertex3fvSUN);
-}
+static GdkGL_GL_NV_pixel_data_range _procs_GL_NV_pixel_data_range = {
+  (GdkGLProc_glPixelDataRangeNV) -1,
+  (GdkGLProc_glFlushPixelDataRangeNV) -1
+};
 
-/* glColor4fNormal3fVertex3fSUN */
+/* glPixelDataRangeNV */
 GdkGLProc
-gdk_gl_get_glColor4fNormal3fVertex3fSUN (void)
+gdk_gl_get_glPixelDataRangeNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN == (GdkGLProc_glColor4fNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN =
-      (GdkGLProc_glColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glColor4fNormal3fVertex3fSUN");
+  if (_procs_GL_NV_pixel_data_range.glPixelDataRangeNV == (GdkGLProc_glPixelDataRangeNV) -1)
+    _procs_GL_NV_pixel_data_range.glPixelDataRangeNV =
+      (GdkGLProc_glPixelDataRangeNV) gdk_gl_get_proc_address ("glPixelDataRangeNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4fNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPixelDataRangeNV () - %s",
+               (_procs_GL_NV_pixel_data_range.glPixelDataRangeNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_NV_pixel_data_range.glPixelDataRangeNV);
 }
 
-/* glColor4fNormal3fVertex3fvSUN */
+/* glFlushPixelDataRangeNV */
 GdkGLProc
-gdk_gl_get_glColor4fNormal3fVertex3fvSUN (void)
+gdk_gl_get_glFlushPixelDataRangeNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN == (GdkGLProc_glColor4fNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN =
-      (GdkGLProc_glColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glColor4fNormal3fVertex3fvSUN");
+  if (_procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV == (GdkGLProc_glFlushPixelDataRangeNV) -1)
+    _procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV =
+      (GdkGLProc_glFlushPixelDataRangeNV) gdk_gl_get_proc_address ("glFlushPixelDataRangeNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4fNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFlushPixelDataRangeNV () - %s",
+               (_procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glColor4fNormal3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV);
 }
 
-/* glTexCoord2fVertex3fSUN */
-GdkGLProc
-gdk_gl_get_glTexCoord2fVertex3fSUN (void)
+/* Get GL_NV_pixel_data_range functions */
+GdkGL_GL_NV_pixel_data_range *
+gdk_gl_get_GL_NV_pixel_data_range (void)
 {
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN == (GdkGLProc_glTexCoord2fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN =
-      (GdkGLProc_glTexCoord2fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fVertex3fSUN");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fVertex3fSUN);
-}
+  static gint supported = -1;
 
-/* glTexCoord2fVertex3fvSUN */
-GdkGLProc
-gdk_gl_get_glTexCoord2fVertex3fvSUN (void)
-{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN == (GdkGLProc_glTexCoord2fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN =
-      (GdkGLProc_glTexCoord2fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fVertex3fvSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_pixel_data_range");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN) ? "supported" : "not supported"));
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPixelDataRangeNV () != NULL);
+          supported &= (gdk_gl_get_glFlushPixelDataRangeNV () != NULL);
+        }
+    }
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fVertex3fvSUN);
-}
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_pixel_data_range () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glTexCoord4fVertex4fSUN */
-GdkGLProc
-gdk_gl_get_glTexCoord4fVertex4fSUN (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN == (GdkGLProc_glTexCoord4fVertex4fSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN =
-      (GdkGLProc_glTexCoord4fVertex4fSUN) gdk_gl_get_proc_address ("glTexCoord4fVertex4fSUN");
+  return &_procs_GL_NV_pixel_data_range;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord4fVertex4fSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN) ? "supported" : "not supported"));
+/*
+ * GL_NV_primitive_restart
+ */
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fVertex4fSUN);
-}
+static GdkGL_GL_NV_primitive_restart _procs_GL_NV_primitive_restart = {
+  (GdkGLProc_glPrimitiveRestartNV) -1,
+  (GdkGLProc_glPrimitiveRestartIndexNV) -1
+};
 
-/* glTexCoord4fVertex4fvSUN */
+/* glPrimitiveRestartNV */
 GdkGLProc
-gdk_gl_get_glTexCoord4fVertex4fvSUN (void)
+gdk_gl_get_glPrimitiveRestartNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN == (GdkGLProc_glTexCoord4fVertex4fvSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN =
-      (GdkGLProc_glTexCoord4fVertex4fvSUN) gdk_gl_get_proc_address ("glTexCoord4fVertex4fvSUN");
+  if (_procs_GL_NV_primitive_restart.glPrimitiveRestartNV == (GdkGLProc_glPrimitiveRestartNV) -1)
+    _procs_GL_NV_primitive_restart.glPrimitiveRestartNV =
+      (GdkGLProc_glPrimitiveRestartNV) gdk_gl_get_proc_address ("glPrimitiveRestartNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord4fVertex4fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPrimitiveRestartNV () - %s",
+               (_procs_GL_NV_primitive_restart.glPrimitiveRestartNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fVertex4fvSUN);
+  return (GdkGLProc) (_procs_GL_NV_primitive_restart.glPrimitiveRestartNV);
 }
 
-/* glTexCoord2fColor4ubVertex3fSUN */
+/* glPrimitiveRestartIndexNV */
 GdkGLProc
-gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN (void)
+gdk_gl_get_glPrimitiveRestartIndexNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN == (GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN =
-      (GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4ubVertex3fSUN");
+  if (_procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV == (GdkGLProc_glPrimitiveRestartIndexNV) -1)
+    _procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV =
+      (GdkGLProc_glPrimitiveRestartIndexNV) gdk_gl_get_proc_address ("glPrimitiveRestartIndexNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPrimitiveRestartIndexNV () - %s",
+               (_procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV);
 }
 
-/* glTexCoord2fColor4ubVertex3fvSUN */
-GdkGLProc
-gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN (void)
+/* Get GL_NV_primitive_restart functions */
+GdkGL_GL_NV_primitive_restart *
+gdk_gl_get_GL_NV_primitive_restart (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN == (GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN =
-      (GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4ubVertex3fvSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_primitive_restart");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN) ? "supported" : "not supported"));
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPrimitiveRestartNV () != NULL);
+          supported &= (gdk_gl_get_glPrimitiveRestartIndexNV () != NULL);
+        }
+    }
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4ubVertex3fvSUN);
-}
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_primitive_restart () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glTexCoord2fColor3fVertex3fSUN */
-GdkGLProc
-gdk_gl_get_glTexCoord2fColor3fVertex3fSUN (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN == (GdkGLProc_glTexCoord2fColor3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN =
-      (GdkGLProc_glTexCoord2fColor3fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fColor3fVertex3fSUN");
+  return &_procs_GL_NV_primitive_restart;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fColor3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN) ? "supported" : "not supported"));
+/*
+ * GL_ATI_map_object_buffer
+ */
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fSUN);
-}
+static GdkGL_GL_ATI_map_object_buffer _procs_GL_ATI_map_object_buffer = {
+  (GdkGLProc_glMapObjectBufferATI) -1,
+  (GdkGLProc_glUnmapObjectBufferATI) -1
+};
 
-/* glTexCoord2fColor3fVertex3fvSUN */
+/* glMapObjectBufferATI */
 GdkGLProc
-gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN (void)
+gdk_gl_get_glMapObjectBufferATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN == (GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN =
-      (GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fColor3fVertex3fvSUN");
+  if (_procs_GL_ATI_map_object_buffer.glMapObjectBufferATI == (GdkGLProc_glMapObjectBufferATI) -1)
+    _procs_GL_ATI_map_object_buffer.glMapObjectBufferATI =
+      (GdkGLProc_glMapObjectBufferATI) gdk_gl_get_proc_address ("glMapObjectBufferATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMapObjectBufferATI () - %s",
+               (_procs_GL_ATI_map_object_buffer.glMapObjectBufferATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_ATI_map_object_buffer.glMapObjectBufferATI);
 }
 
-/* glTexCoord2fNormal3fVertex3fSUN */
+/* glUnmapObjectBufferATI */
 GdkGLProc
-gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN (void)
+gdk_gl_get_glUnmapObjectBufferATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN == (GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN =
-      (GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fNormal3fVertex3fSUN");
+  if (_procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI == (GdkGLProc_glUnmapObjectBufferATI) -1)
+    _procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI =
+      (GdkGLProc_glUnmapObjectBufferATI) gdk_gl_get_proc_address ("glUnmapObjectBufferATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUnmapObjectBufferATI () - %s",
+               (_procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI);
 }
 
-/* glTexCoord2fNormal3fVertex3fvSUN */
-GdkGLProc
-gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN (void)
+/* Get GL_ATI_map_object_buffer functions */
+GdkGL_GL_ATI_map_object_buffer *
+gdk_gl_get_GL_ATI_map_object_buffer (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN == (GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN =
-      (GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fNormal3fVertex3fvSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ATI_map_object_buffer");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glMapObjectBufferATI () != NULL);
+          supported &= (gdk_gl_get_glUnmapObjectBufferATI () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_ATI_map_object_buffer () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fNormal3fVertex3fvSUN);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ATI_map_object_buffer;
 }
 
-/* glTexCoord2fColor4fNormal3fVertex3fSUN */
+/*
+ * GL_ATI_separate_stencil
+ */
+
+static GdkGL_GL_ATI_separate_stencil _procs_GL_ATI_separate_stencil = {
+  (GdkGLProc_glStencilOpSeparateATI) -1,
+  (GdkGLProc_glStencilFuncSeparateATI) -1
+};
+
+/* glStencilOpSeparateATI */
 GdkGLProc
-gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN (void)
+gdk_gl_get_glStencilOpSeparateATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN == (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN =
-      (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4fNormal3fVertex3fSUN");
+  if (_procs_GL_ATI_separate_stencil.glStencilOpSeparateATI == (GdkGLProc_glStencilOpSeparateATI) -1)
+    _procs_GL_ATI_separate_stencil.glStencilOpSeparateATI =
+      (GdkGLProc_glStencilOpSeparateATI) gdk_gl_get_proc_address ("glStencilOpSeparateATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glStencilOpSeparateATI () - %s",
+               (_procs_GL_ATI_separate_stencil.glStencilOpSeparateATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_ATI_separate_stencil.glStencilOpSeparateATI);
 }
 
-/* glTexCoord2fColor4fNormal3fVertex3fvSUN */
+/* glStencilFuncSeparateATI */
 GdkGLProc
-gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN (void)
+gdk_gl_get_glStencilFuncSeparateATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN == (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN =
-      (GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glTexCoord2fColor4fNormal3fVertex3fvSUN");
+  if (_procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI == (GdkGLProc_glStencilFuncSeparateATI) -1)
+    _procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI =
+      (GdkGLProc_glStencilFuncSeparateATI) gdk_gl_get_proc_address ("glStencilFuncSeparateATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glStencilFuncSeparateATI () - %s",
+               (_procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord2fColor4fNormal3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI);
 }
 
-/* glTexCoord4fColor4fNormal3fVertex4fSUN */
-GdkGLProc
-gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN (void)
+/* Get GL_ATI_separate_stencil functions */
+GdkGL_GL_ATI_separate_stencil *
+gdk_gl_get_GL_ATI_separate_stencil (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN == (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN =
-      (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) gdk_gl_get_proc_address ("glTexCoord4fColor4fNormal3fVertex4fSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ATI_separate_stencil");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glStencilOpSeparateATI () != NULL);
+          supported &= (gdk_gl_get_glStencilFuncSeparateATI () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_ATI_separate_stencil () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fSUN);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ATI_separate_stencil;
 }
 
-/* glTexCoord4fColor4fNormal3fVertex4fvSUN */
+/*
+ * GL_ATI_vertex_attrib_array_object
+ */
+
+static GdkGL_GL_ATI_vertex_attrib_array_object _procs_GL_ATI_vertex_attrib_array_object = {
+  (GdkGLProc_glVertexAttribArrayObjectATI) -1,
+  (GdkGLProc_glGetVertexAttribArrayObjectfvATI) -1,
+  (GdkGLProc_glGetVertexAttribArrayObjectivATI) -1
+};
+
+/* glVertexAttribArrayObjectATI */
 GdkGLProc
-gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN (void)
+gdk_gl_get_glVertexAttribArrayObjectATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN == (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) -1)
-    _procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN =
-      (GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) gdk_gl_get_proc_address ("glTexCoord4fColor4fNormal3fVertex4fvSUN");
+  if (_procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI == (GdkGLProc_glVertexAttribArrayObjectATI) -1)
+    _procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI =
+      (GdkGLProc_glVertexAttribArrayObjectATI) gdk_gl_get_proc_address ("glVertexAttribArrayObjectATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribArrayObjectATI () - %s",
+               (_procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glTexCoord4fColor4fNormal3fVertex4fvSUN);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI);
 }
 
-/* glReplacementCodeuiVertex3fSUN */
+/* glGetVertexAttribArrayObjectfvATI */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiVertex3fSUN (void)
+gdk_gl_get_glGetVertexAttribArrayObjectfvATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN == (GdkGLProc_glReplacementCodeuiVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiVertex3fSUN");
+  if (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI == (GdkGLProc_glGetVertexAttribArrayObjectfvATI) -1)
+    _procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI =
+      (GdkGLProc_glGetVertexAttribArrayObjectfvATI) gdk_gl_get_proc_address ("glGetVertexAttribArrayObjectfvATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribArrayObjectfvATI () - %s",
+               (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI);
 }
 
-/* glReplacementCodeuiVertex3fvSUN */
+/* glGetVertexAttribArrayObjectivATI */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiVertex3fvSUN (void)
+gdk_gl_get_glGetVertexAttribArrayObjectivATI (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN == (GdkGLProc_glReplacementCodeuiVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiVertex3fvSUN");
+  if (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI == (GdkGLProc_glGetVertexAttribArrayObjectivATI) -1)
+    _procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI =
+      (GdkGLProc_glGetVertexAttribArrayObjectivATI) gdk_gl_get_proc_address ("glGetVertexAttribArrayObjectivATI");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribArrayObjectivATI () - %s",
+               (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI);
 }
 
-/* glReplacementCodeuiColor4ubVertex3fSUN */
-GdkGLProc
-gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN (void)
+/* Get GL_ATI_vertex_attrib_array_object functions */
+GdkGL_GL_ATI_vertex_attrib_array_object *
+gdk_gl_get_GL_ATI_vertex_attrib_array_object (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN == (GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4ubVertex3fSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_ATI_vertex_attrib_array_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glVertexAttribArrayObjectATI () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribArrayObjectfvATI () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribArrayObjectivATI () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_ATI_vertex_attrib_array_object () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fSUN);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_ATI_vertex_attrib_array_object;
 }
 
-/* glReplacementCodeuiColor4ubVertex3fvSUN */
+/*
+ * GL_EXT_depth_bounds_test
+ */
+
+static GdkGL_GL_EXT_depth_bounds_test _procs_GL_EXT_depth_bounds_test = {
+  (GdkGLProc_glDepthBoundsEXT) -1
+};
+
+/* glDepthBoundsEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN (void)
+gdk_gl_get_glDepthBoundsEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN == (GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4ubVertex3fvSUN");
+  if (_procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT == (GdkGLProc_glDepthBoundsEXT) -1)
+    _procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT =
+      (GdkGLProc_glDepthBoundsEXT) gdk_gl_get_proc_address ("glDepthBoundsEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDepthBoundsEXT () - %s",
+               (_procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4ubVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT);
 }
 
-/* glReplacementCodeuiColor3fVertex3fSUN */
-GdkGLProc
-gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN (void)
+/* Get GL_EXT_depth_bounds_test functions */
+GdkGL_GL_EXT_depth_bounds_test *
+gdk_gl_get_GL_EXT_depth_bounds_test (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor3fVertex3fSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_depth_bounds_test");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDepthBoundsEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_depth_bounds_test () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_depth_bounds_test;
+}
+
+/*
+ * GL_EXT_blend_equation_separate
+ */
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fSUN);
-}
+static GdkGL_GL_EXT_blend_equation_separate _procs_GL_EXT_blend_equation_separate = {
+  (GdkGLProc_glBlendEquationSeparateEXT) -1
+};
 
-/* glReplacementCodeuiColor3fVertex3fvSUN */
+/* glBlendEquationSeparateEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN (void)
+gdk_gl_get_glBlendEquationSeparateEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor3fVertex3fvSUN");
+  if (_procs_GL_EXT_blend_equation_separate.glBlendEquationSeparateEXT == (GdkGLProc_glBlendEquationSeparateEXT) -1)
+    _procs_GL_EXT_blend_equation_separate.glBlendEquationSeparateEXT =
+      (GdkGLProc_glBlendEquationSeparateEXT) gdk_gl_get_proc_address ("glBlendEquationSeparateEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBlendEquationSeparateEXT () - %s",
+               (_procs_GL_EXT_blend_equation_separate.glBlendEquationSeparateEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_EXT_blend_equation_separate.glBlendEquationSeparateEXT);
 }
 
-/* glReplacementCodeuiNormal3fVertex3fSUN */
-GdkGLProc
-gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN (void)
+/* Get GL_EXT_blend_equation_separate functions */
+GdkGL_GL_EXT_blend_equation_separate *
+gdk_gl_get_GL_EXT_blend_equation_separate (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiNormal3fVertex3fSUN");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_blend_equation_separate");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlendEquationSeparateEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_blend_equation_separate () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fSUN);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_blend_equation_separate;
 }
 
-/* glReplacementCodeuiNormal3fVertex3fvSUN */
+/*
+ * GL_EXT_framebuffer_object
+ */
+
+static GdkGL_GL_EXT_framebuffer_object _procs_GL_EXT_framebuffer_object = {
+  (GdkGLProc_glIsRenderbufferEXT) -1,
+  (GdkGLProc_glBindRenderbufferEXT) -1,
+  (GdkGLProc_glDeleteRenderbuffersEXT) -1,
+  (GdkGLProc_glGenRenderbuffersEXT) -1,
+  (GdkGLProc_glRenderbufferStorageEXT) -1,
+  (GdkGLProc_glGetRenderbufferParameterivEXT) -1,
+  (GdkGLProc_glIsFramebufferEXT) -1,
+  (GdkGLProc_glBindFramebufferEXT) -1,
+  (GdkGLProc_glDeleteFramebuffersEXT) -1,
+  (GdkGLProc_glGenFramebuffersEXT) -1,
+  (GdkGLProc_glCheckFramebufferStatusEXT) -1,
+  (GdkGLProc_glFramebufferTexture1DEXT) -1,
+  (GdkGLProc_glFramebufferTexture2DEXT) -1,
+  (GdkGLProc_glFramebufferTexture3DEXT) -1,
+  (GdkGLProc_glFramebufferRenderbufferEXT) -1,
+  (GdkGLProc_glGetFramebufferAttachmentParameterivEXT) -1,
+  (GdkGLProc_glGenerateMipmapEXT) -1
+};
+
+/* glIsRenderbufferEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN (void)
+gdk_gl_get_glIsRenderbufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiNormal3fVertex3fvSUN");
+  if (_procs_GL_EXT_framebuffer_object.glIsRenderbufferEXT == (GdkGLProc_glIsRenderbufferEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glIsRenderbufferEXT =
+      (GdkGLProc_glIsRenderbufferEXT) gdk_gl_get_proc_address ("glIsRenderbufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsRenderbufferEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glIsRenderbufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiNormal3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glIsRenderbufferEXT);
 }
 
-/* glReplacementCodeuiColor4fNormal3fVertex3fSUN */
+/* glBindRenderbufferEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN (void)
+gdk_gl_get_glBindRenderbufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
+  if (_procs_GL_EXT_framebuffer_object.glBindRenderbufferEXT == (GdkGLProc_glBindRenderbufferEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glBindRenderbufferEXT =
+      (GdkGLProc_glBindRenderbufferEXT) gdk_gl_get_proc_address ("glBindRenderbufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindRenderbufferEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glBindRenderbufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glBindRenderbufferEXT);
 }
 
-/* glReplacementCodeuiColor4fNormal3fVertex3fvSUN */
+/* glDeleteRenderbuffersEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN (void)
+gdk_gl_get_glDeleteRenderbuffersEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
+  if (_procs_GL_EXT_framebuffer_object.glDeleteRenderbuffersEXT == (GdkGLProc_glDeleteRenderbuffersEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glDeleteRenderbuffersEXT =
+      (GdkGLProc_glDeleteRenderbuffersEXT) gdk_gl_get_proc_address ("glDeleteRenderbuffersEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteRenderbuffersEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glDeleteRenderbuffersEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiColor4fNormal3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glDeleteRenderbuffersEXT);
 }
 
-/* glReplacementCodeuiTexCoord2fVertex3fSUN */
+/* glGenRenderbuffersEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN (void)
+gdk_gl_get_glGenRenderbuffersEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fVertex3fSUN");
+  if (_procs_GL_EXT_framebuffer_object.glGenRenderbuffersEXT == (GdkGLProc_glGenRenderbuffersEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glGenRenderbuffersEXT =
+      (GdkGLProc_glGenRenderbuffersEXT) gdk_gl_get_proc_address ("glGenRenderbuffersEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenRenderbuffersEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glGenRenderbuffersEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glGenRenderbuffersEXT);
 }
 
-/* glReplacementCodeuiTexCoord2fVertex3fvSUN */
+/* glRenderbufferStorageEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN (void)
+gdk_gl_get_glRenderbufferStorageEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fVertex3fvSUN");
+  if (_procs_GL_EXT_framebuffer_object.glRenderbufferStorageEXT == (GdkGLProc_glRenderbufferStorageEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glRenderbufferStorageEXT =
+      (GdkGLProc_glRenderbufferStorageEXT) gdk_gl_get_proc_address ("glRenderbufferStorageEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glRenderbufferStorageEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glRenderbufferStorageEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glRenderbufferStorageEXT);
 }
 
-/* glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN */
+/* glGetRenderbufferParameterivEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (void)
+gdk_gl_get_glGetRenderbufferParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
+  if (_procs_GL_EXT_framebuffer_object.glGetRenderbufferParameterivEXT == (GdkGLProc_glGetRenderbufferParameterivEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glGetRenderbufferParameterivEXT =
+      (GdkGLProc_glGetRenderbufferParameterivEXT) gdk_gl_get_proc_address ("glGetRenderbufferParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetRenderbufferParameterivEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glGetRenderbufferParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glGetRenderbufferParameterivEXT);
 }
 
-/* glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN */
+/* glIsFramebufferEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (void)
+gdk_gl_get_glIsFramebufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
+  if (_procs_GL_EXT_framebuffer_object.glIsFramebufferEXT == (GdkGLProc_glIsFramebufferEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glIsFramebufferEXT =
+      (GdkGLProc_glIsFramebufferEXT) gdk_gl_get_proc_address ("glIsFramebufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsFramebufferEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glIsFramebufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glIsFramebufferEXT);
 }
 
-/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN */
+/* glBindFramebufferEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (void)
+gdk_gl_get_glBindFramebufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN =
-      (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
+  if (_procs_GL_EXT_framebuffer_object.glBindFramebufferEXT == (GdkGLProc_glBindFramebufferEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glBindFramebufferEXT =
+      (GdkGLProc_glBindFramebufferEXT) gdk_gl_get_proc_address ("glBindFramebufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindFramebufferEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glBindFramebufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glBindFramebufferEXT);
 }
 
-/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN */
+/* glDeleteFramebuffersEXT */
 GdkGLProc
-gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (void)
+gdk_gl_get_glDeleteFramebuffersEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) -1)
-    _procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN =
-      (GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) gdk_gl_get_proc_address ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
+  if (_procs_GL_EXT_framebuffer_object.glDeleteFramebuffersEXT == (GdkGLProc_glDeleteFramebuffersEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glDeleteFramebuffersEXT =
+      (GdkGLProc_glDeleteFramebuffersEXT) gdk_gl_get_proc_address ("glDeleteFramebuffersEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN () - %s",
-               (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteFramebuffersEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glDeleteFramebuffersEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_vertex.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glDeleteFramebuffersEXT);
 }
 
-/* Get GL_SUN_vertex functions */
-GdkGL_GL_SUN_vertex *
-gdk_gl_get_GL_SUN_vertex (void)
+/* glGenFramebuffersEXT */
+GdkGLProc
+gdk_gl_get_glGenFramebuffersEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SUN_vertex");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glColor4ubVertex2fSUN () != NULL);
-          supported &= (gdk_gl_get_glColor4ubVertex2fvSUN () != NULL);
-          supported &= (gdk_gl_get_glColor4ubVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glColor4ubVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glColor3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glColor3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glNormal3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glColor4fNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glColor4fNormal3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord4fVertex4fSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord4fVertex4fvSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fColor3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN () != NULL);
-          supported &= (gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN () != NULL);
-          supported &= (gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_framebuffer_object.glGenFramebuffersEXT == (GdkGLProc_glGenFramebuffersEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glGenFramebuffersEXT =
+      (GdkGLProc_glGenFramebuffersEXT) gdk_gl_get_proc_address ("glGenFramebuffersEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SUN_vertex () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glGenFramebuffersEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glGenFramebuffersEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_SUN_vertex;
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glGenFramebuffersEXT);
 }
 
-/*
- * GL_EXT_blend_func_separate
- */
-
-static GdkGL_GL_EXT_blend_func_separate _procs_GL_EXT_blend_func_separate = {
-  (GdkGLProc_glBlendFuncSeparateEXT) -1
-};
-
-/* glBlendFuncSeparateEXT */
+/* glCheckFramebufferStatusEXT */
 GdkGLProc
-gdk_gl_get_glBlendFuncSeparateEXT (void)
+gdk_gl_get_glCheckFramebufferStatusEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT == (GdkGLProc_glBlendFuncSeparateEXT) -1)
-    _procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT =
-      (GdkGLProc_glBlendFuncSeparateEXT) gdk_gl_get_proc_address ("glBlendFuncSeparateEXT");
+  if (_procs_GL_EXT_framebuffer_object.glCheckFramebufferStatusEXT == (GdkGLProc_glCheckFramebufferStatusEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glCheckFramebufferStatusEXT =
+      (GdkGLProc_glCheckFramebufferStatusEXT) gdk_gl_get_proc_address ("glCheckFramebufferStatusEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBlendFuncSeparateEXT () - %s",
-               (_procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCheckFramebufferStatusEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glCheckFramebufferStatusEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_blend_func_separate.glBlendFuncSeparateEXT);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glCheckFramebufferStatusEXT);
 }
 
-/* Get GL_EXT_blend_func_separate functions */
-GdkGL_GL_EXT_blend_func_separate *
-gdk_gl_get_GL_EXT_blend_func_separate (void)
+/* glFramebufferTexture1DEXT */
+GdkGLProc
+gdk_gl_get_glFramebufferTexture1DEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_blend_func_separate");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glBlendFuncSeparateEXT () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_framebuffer_object.glFramebufferTexture1DEXT == (GdkGLProc_glFramebufferTexture1DEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glFramebufferTexture1DEXT =
+      (GdkGLProc_glFramebufferTexture1DEXT) gdk_gl_get_proc_address ("glFramebufferTexture1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_blend_func_separate () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glFramebufferTexture1DEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glFramebufferTexture1DEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_EXT_blend_func_separate;
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glFramebufferTexture1DEXT);
 }
 
-/*
- * GL_INGR_blend_func_separate
- */
-
-static GdkGL_GL_INGR_blend_func_separate _procs_GL_INGR_blend_func_separate = {
-  (GdkGLProc_glBlendFuncSeparateINGR) -1
-};
-
-/* glBlendFuncSeparateINGR */
+/* glFramebufferTexture2DEXT */
 GdkGLProc
-gdk_gl_get_glBlendFuncSeparateINGR (void)
+gdk_gl_get_glFramebufferTexture2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR == (GdkGLProc_glBlendFuncSeparateINGR) -1)
-    _procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR =
-      (GdkGLProc_glBlendFuncSeparateINGR) gdk_gl_get_proc_address ("glBlendFuncSeparateINGR");
+  if (_procs_GL_EXT_framebuffer_object.glFramebufferTexture2DEXT == (GdkGLProc_glFramebufferTexture2DEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glFramebufferTexture2DEXT =
+      (GdkGLProc_glFramebufferTexture2DEXT) gdk_gl_get_proc_address ("glFramebufferTexture2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBlendFuncSeparateINGR () - %s",
-               (_procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferTexture2DEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glFramebufferTexture2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_INGR_blend_func_separate.glBlendFuncSeparateINGR);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glFramebufferTexture2DEXT);
 }
 
-/* Get GL_INGR_blend_func_separate functions */
-GdkGL_GL_INGR_blend_func_separate *
-gdk_gl_get_GL_INGR_blend_func_separate (void)
+/* glFramebufferTexture3DEXT */
+GdkGLProc
+gdk_gl_get_glFramebufferTexture3DEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_INGR_blend_func_separate");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glBlendFuncSeparateINGR () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_framebuffer_object.glFramebufferTexture3DEXT == (GdkGLProc_glFramebufferTexture3DEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glFramebufferTexture3DEXT =
+      (GdkGLProc_glFramebufferTexture3DEXT) gdk_gl_get_proc_address ("glFramebufferTexture3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_INGR_blend_func_separate () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_INGR_blend_func_separate;
-}
-
-/*
- * GL_EXT_vertex_weighting
- */
-
-static GdkGL_GL_EXT_vertex_weighting _procs_GL_EXT_vertex_weighting = {
-  (GdkGLProc_glVertexWeightfEXT) -1,
-  (GdkGLProc_glVertexWeightfvEXT) -1,
-  (GdkGLProc_glVertexWeightPointerEXT) -1
-};
+    g_message (" - gdk_gl_get_glFramebufferTexture3DEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glFramebufferTexture3DEXT) ? "supported" : "not supported"));
 
-/* glVertexWeightfEXT */
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glFramebufferTexture3DEXT);
+}
+
+/* glFramebufferRenderbufferEXT */
 GdkGLProc
-gdk_gl_get_glVertexWeightfEXT (void)
+gdk_gl_get_glFramebufferRenderbufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_weighting.glVertexWeightfEXT == (GdkGLProc_glVertexWeightfEXT) -1)
-    _procs_GL_EXT_vertex_weighting.glVertexWeightfEXT =
-      (GdkGLProc_glVertexWeightfEXT) gdk_gl_get_proc_address ("glVertexWeightfEXT");
+  if (_procs_GL_EXT_framebuffer_object.glFramebufferRenderbufferEXT == (GdkGLProc_glFramebufferRenderbufferEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glFramebufferRenderbufferEXT =
+      (GdkGLProc_glFramebufferRenderbufferEXT) gdk_gl_get_proc_address ("glFramebufferRenderbufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexWeightfEXT () - %s",
-               (_procs_GL_EXT_vertex_weighting.glVertexWeightfEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferRenderbufferEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glFramebufferRenderbufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_weighting.glVertexWeightfEXT);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glFramebufferRenderbufferEXT);
 }
 
-/* glVertexWeightfvEXT */
+/* glGetFramebufferAttachmentParameterivEXT */
 GdkGLProc
-gdk_gl_get_glVertexWeightfvEXT (void)
+gdk_gl_get_glGetFramebufferAttachmentParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT == (GdkGLProc_glVertexWeightfvEXT) -1)
-    _procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT =
-      (GdkGLProc_glVertexWeightfvEXT) gdk_gl_get_proc_address ("glVertexWeightfvEXT");
+  if (_procs_GL_EXT_framebuffer_object.glGetFramebufferAttachmentParameterivEXT == (GdkGLProc_glGetFramebufferAttachmentParameterivEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glGetFramebufferAttachmentParameterivEXT =
+      (GdkGLProc_glGetFramebufferAttachmentParameterivEXT) gdk_gl_get_proc_address ("glGetFramebufferAttachmentParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexWeightfvEXT () - %s",
-               (_procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetFramebufferAttachmentParameterivEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glGetFramebufferAttachmentParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_weighting.glVertexWeightfvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glGetFramebufferAttachmentParameterivEXT);
 }
 
-/* glVertexWeightPointerEXT */
+/* glGenerateMipmapEXT */
 GdkGLProc
-gdk_gl_get_glVertexWeightPointerEXT (void)
+gdk_gl_get_glGenerateMipmapEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT == (GdkGLProc_glVertexWeightPointerEXT) -1)
-    _procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT =
-      (GdkGLProc_glVertexWeightPointerEXT) gdk_gl_get_proc_address ("glVertexWeightPointerEXT");
+  if (_procs_GL_EXT_framebuffer_object.glGenerateMipmapEXT == (GdkGLProc_glGenerateMipmapEXT) -1)
+    _procs_GL_EXT_framebuffer_object.glGenerateMipmapEXT =
+      (GdkGLProc_glGenerateMipmapEXT) gdk_gl_get_proc_address ("glGenerateMipmapEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexWeightPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenerateMipmapEXT () - %s",
+               (_procs_GL_EXT_framebuffer_object.glGenerateMipmapEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_weighting.glVertexWeightPointerEXT);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_object.glGenerateMipmapEXT);
 }
 
-/* Get GL_EXT_vertex_weighting functions */
-GdkGL_GL_EXT_vertex_weighting *
-gdk_gl_get_GL_EXT_vertex_weighting (void)
+/* Get GL_EXT_framebuffer_object functions */
+GdkGL_GL_EXT_framebuffer_object *
+gdk_gl_get_GL_EXT_framebuffer_object (void)
 {
   static gint supported = -1;
 
@@ -13330,74 +29150,69 @@ gdk_gl_get_GL_EXT_vertex_weighting (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_vertex_weighting");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_framebuffer_object");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glVertexWeightfEXT () != NULL);
-          supported &= (gdk_gl_get_glVertexWeightfvEXT () != NULL);
-          supported &= (gdk_gl_get_glVertexWeightPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glIsRenderbufferEXT () != NULL);
+          supported &= (gdk_gl_get_glBindRenderbufferEXT () != NULL);
+          supported &= (gdk_gl_get_glDeleteRenderbuffersEXT () != NULL);
+          supported &= (gdk_gl_get_glGenRenderbuffersEXT () != NULL);
+          supported &= (gdk_gl_get_glRenderbufferStorageEXT () != NULL);
+          supported &= (gdk_gl_get_glGetRenderbufferParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glIsFramebufferEXT () != NULL);
+          supported &= (gdk_gl_get_glBindFramebufferEXT () != NULL);
+          supported &= (gdk_gl_get_glDeleteFramebuffersEXT () != NULL);
+          supported &= (gdk_gl_get_glGenFramebuffersEXT () != NULL);
+          supported &= (gdk_gl_get_glCheckFramebufferStatusEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTexture1DEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTexture2DEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTexture3DEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferRenderbufferEXT () != NULL);
+          supported &= (gdk_gl_get_glGetFramebufferAttachmentParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGenerateMipmapEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_vertex_weighting () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_framebuffer_object () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_EXT_vertex_weighting;
+  return &_procs_GL_EXT_framebuffer_object;
 }
 
 /*
- * GL_NV_vertex_array_range
+ * GL_GREMEDY_string_marker
  */
 
-static GdkGL_GL_NV_vertex_array_range _procs_GL_NV_vertex_array_range = {
-  (GdkGLProc_glFlushVertexArrayRangeNV) -1,
-  (GdkGLProc_glVertexArrayRangeNV) -1
+static GdkGL_GL_GREMEDY_string_marker _procs_GL_GREMEDY_string_marker = {
+  (GdkGLProc_glStringMarkerGREMEDY) -1
 };
 
-/* glFlushVertexArrayRangeNV */
-GdkGLProc
-gdk_gl_get_glFlushVertexArrayRangeNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV == (GdkGLProc_glFlushVertexArrayRangeNV) -1)
-    _procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV =
-      (GdkGLProc_glFlushVertexArrayRangeNV) gdk_gl_get_proc_address ("glFlushVertexArrayRangeNV");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFlushVertexArrayRangeNV () - %s",
-               (_procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_NV_vertex_array_range.glFlushVertexArrayRangeNV);
-}
-
-/* glVertexArrayRangeNV */
+/* glStringMarkerGREMEDY */
 GdkGLProc
-gdk_gl_get_glVertexArrayRangeNV (void)
+gdk_gl_get_glStringMarkerGREMEDY (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_array_range.glVertexArrayRangeNV == (GdkGLProc_glVertexArrayRangeNV) -1)
-    _procs_GL_NV_vertex_array_range.glVertexArrayRangeNV =
-      (GdkGLProc_glVertexArrayRangeNV) gdk_gl_get_proc_address ("glVertexArrayRangeNV");
+  if (_procs_GL_GREMEDY_string_marker.glStringMarkerGREMEDY == (GdkGLProc_glStringMarkerGREMEDY) -1)
+    _procs_GL_GREMEDY_string_marker.glStringMarkerGREMEDY =
+      (GdkGLProc_glStringMarkerGREMEDY) gdk_gl_get_proc_address ("glStringMarkerGREMEDY");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexArrayRangeNV () - %s",
-               (_procs_GL_NV_vertex_array_range.glVertexArrayRangeNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glStringMarkerGREMEDY () - %s",
+               (_procs_GL_GREMEDY_string_marker.glStringMarkerGREMEDY) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_array_range.glVertexArrayRangeNV);
+  return (GdkGLProc) (_procs_GL_GREMEDY_string_marker.glStringMarkerGREMEDY);
 }
 
-/* Get GL_NV_vertex_array_range functions */
-GdkGL_GL_NV_vertex_array_range *
-gdk_gl_get_GL_NV_vertex_array_range (void)
+/* Get GL_GREMEDY_string_marker functions */
+GdkGL_GL_GREMEDY_string_marker *
+gdk_gl_get_GL_GREMEDY_string_marker (void)
 {
   static gint supported = -1;
 
@@ -13406,282 +29221,312 @@ gdk_gl_get_GL_NV_vertex_array_range (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_vertex_array_range");
+      supported = gdk_gl_query_gl_extension ("GL_GREMEDY_string_marker");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glFlushVertexArrayRangeNV () != NULL);
-          supported &= (gdk_gl_get_glVertexArrayRangeNV () != NULL);
+          supported &= (gdk_gl_get_glStringMarkerGREMEDY () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_vertex_array_range () - %s",
+    g_message (" - gdk_gl_get_GL_GREMEDY_string_marker () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_vertex_array_range;
+  return &_procs_GL_GREMEDY_string_marker;
 }
 
 /*
- * GL_NV_register_combiners
+ * GL_EXT_stencil_clear_tag
  */
 
-static GdkGL_GL_NV_register_combiners _procs_GL_NV_register_combiners = {
-  (GdkGLProc_glCombinerParameterfvNV) -1,
-  (GdkGLProc_glCombinerParameterfNV) -1,
-  (GdkGLProc_glCombinerParameterivNV) -1,
-  (GdkGLProc_glCombinerParameteriNV) -1,
-  (GdkGLProc_glCombinerInputNV) -1,
-  (GdkGLProc_glCombinerOutputNV) -1,
-  (GdkGLProc_glFinalCombinerInputNV) -1,
-  (GdkGLProc_glGetCombinerInputParameterfvNV) -1,
-  (GdkGLProc_glGetCombinerInputParameterivNV) -1,
-  (GdkGLProc_glGetCombinerOutputParameterfvNV) -1,
-  (GdkGLProc_glGetCombinerOutputParameterivNV) -1,
-  (GdkGLProc_glGetFinalCombinerInputParameterfvNV) -1,
-  (GdkGLProc_glGetFinalCombinerInputParameterivNV) -1
+static GdkGL_GL_EXT_stencil_clear_tag _procs_GL_EXT_stencil_clear_tag = {
+  (GdkGLProc_glStencilClearTagEXT) -1
 };
 
-/* glCombinerParameterfvNV */
+/* glStencilClearTagEXT */
 GdkGLProc
-gdk_gl_get_glCombinerParameterfvNV (void)
+gdk_gl_get_glStencilClearTagEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glCombinerParameterfvNV == (GdkGLProc_glCombinerParameterfvNV) -1)
-    _procs_GL_NV_register_combiners.glCombinerParameterfvNV =
-      (GdkGLProc_glCombinerParameterfvNV) gdk_gl_get_proc_address ("glCombinerParameterfvNV");
+  if (_procs_GL_EXT_stencil_clear_tag.glStencilClearTagEXT == (GdkGLProc_glStencilClearTagEXT) -1)
+    _procs_GL_EXT_stencil_clear_tag.glStencilClearTagEXT =
+      (GdkGLProc_glStencilClearTagEXT) gdk_gl_get_proc_address ("glStencilClearTagEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCombinerParameterfvNV () - %s",
-               (_procs_GL_NV_register_combiners.glCombinerParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glStencilClearTagEXT () - %s",
+               (_procs_GL_EXT_stencil_clear_tag.glStencilClearTagEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameterfvNV);
+  return (GdkGLProc) (_procs_GL_EXT_stencil_clear_tag.glStencilClearTagEXT);
 }
 
-/* glCombinerParameterfNV */
-GdkGLProc
-gdk_gl_get_glCombinerParameterfNV (void)
+/* Get GL_EXT_stencil_clear_tag functions */
+GdkGL_GL_EXT_stencil_clear_tag *
+gdk_gl_get_GL_EXT_stencil_clear_tag (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glCombinerParameterfNV == (GdkGLProc_glCombinerParameterfNV) -1)
-    _procs_GL_NV_register_combiners.glCombinerParameterfNV =
-      (GdkGLProc_glCombinerParameterfNV) gdk_gl_get_proc_address ("glCombinerParameterfNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_stencil_clear_tag");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCombinerParameterfNV () - %s",
-               (_procs_GL_NV_register_combiners.glCombinerParameterfNV) ? "supported" : "not supported"));
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glStencilClearTagEXT () != NULL);
+        }
+    }
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameterfNV);
-}
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_stencil_clear_tag () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glCombinerParameterivNV */
-GdkGLProc
-gdk_gl_get_glCombinerParameterivNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glCombinerParameterivNV == (GdkGLProc_glCombinerParameterivNV) -1)
-    _procs_GL_NV_register_combiners.glCombinerParameterivNV =
-      (GdkGLProc_glCombinerParameterivNV) gdk_gl_get_proc_address ("glCombinerParameterivNV");
+  return &_procs_GL_EXT_stencil_clear_tag;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCombinerParameterivNV () - %s",
-               (_procs_GL_NV_register_combiners.glCombinerParameterivNV) ? "supported" : "not supported"));
+/*
+ * GL_EXT_framebuffer_blit
+ */
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameterivNV);
-}
+static GdkGL_GL_EXT_framebuffer_blit _procs_GL_EXT_framebuffer_blit = {
+  (GdkGLProc_glBlitFramebufferEXT) -1
+};
 
-/* glCombinerParameteriNV */
+/* glBlitFramebufferEXT */
 GdkGLProc
-gdk_gl_get_glCombinerParameteriNV (void)
+gdk_gl_get_glBlitFramebufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glCombinerParameteriNV == (GdkGLProc_glCombinerParameteriNV) -1)
-    _procs_GL_NV_register_combiners.glCombinerParameteriNV =
-      (GdkGLProc_glCombinerParameteriNV) gdk_gl_get_proc_address ("glCombinerParameteriNV");
+  if (_procs_GL_EXT_framebuffer_blit.glBlitFramebufferEXT == (GdkGLProc_glBlitFramebufferEXT) -1)
+    _procs_GL_EXT_framebuffer_blit.glBlitFramebufferEXT =
+      (GdkGLProc_glBlitFramebufferEXT) gdk_gl_get_proc_address ("glBlitFramebufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCombinerParameteriNV () - %s",
-               (_procs_GL_NV_register_combiners.glCombinerParameteriNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBlitFramebufferEXT () - %s",
+               (_procs_GL_EXT_framebuffer_blit.glBlitFramebufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerParameteriNV);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_blit.glBlitFramebufferEXT);
 }
 
-/* glCombinerInputNV */
-GdkGLProc
-gdk_gl_get_glCombinerInputNV (void)
+/* Get GL_EXT_framebuffer_blit functions */
+GdkGL_GL_EXT_framebuffer_blit *
+gdk_gl_get_GL_EXT_framebuffer_blit (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glCombinerInputNV == (GdkGLProc_glCombinerInputNV) -1)
-    _procs_GL_NV_register_combiners.glCombinerInputNV =
-      (GdkGLProc_glCombinerInputNV) gdk_gl_get_proc_address ("glCombinerInputNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_framebuffer_blit");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlitFramebufferEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCombinerInputNV () - %s",
-               (_procs_GL_NV_register_combiners.glCombinerInputNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_framebuffer_blit () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerInputNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_framebuffer_blit;
 }
 
-/* glCombinerOutputNV */
+/*
+ * GL_EXT_framebuffer_multisample
+ */
+
+static GdkGL_GL_EXT_framebuffer_multisample _procs_GL_EXT_framebuffer_multisample = {
+  (GdkGLProc_glRenderbufferStorageMultisampleEXT) -1
+};
+
+/* glRenderbufferStorageMultisampleEXT */
 GdkGLProc
-gdk_gl_get_glCombinerOutputNV (void)
+gdk_gl_get_glRenderbufferStorageMultisampleEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glCombinerOutputNV == (GdkGLProc_glCombinerOutputNV) -1)
-    _procs_GL_NV_register_combiners.glCombinerOutputNV =
-      (GdkGLProc_glCombinerOutputNV) gdk_gl_get_proc_address ("glCombinerOutputNV");
+  if (_procs_GL_EXT_framebuffer_multisample.glRenderbufferStorageMultisampleEXT == (GdkGLProc_glRenderbufferStorageMultisampleEXT) -1)
+    _procs_GL_EXT_framebuffer_multisample.glRenderbufferStorageMultisampleEXT =
+      (GdkGLProc_glRenderbufferStorageMultisampleEXT) gdk_gl_get_proc_address ("glRenderbufferStorageMultisampleEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCombinerOutputNV () - %s",
-               (_procs_GL_NV_register_combiners.glCombinerOutputNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glRenderbufferStorageMultisampleEXT () - %s",
+               (_procs_GL_EXT_framebuffer_multisample.glRenderbufferStorageMultisampleEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glCombinerOutputNV);
+  return (GdkGLProc) (_procs_GL_EXT_framebuffer_multisample.glRenderbufferStorageMultisampleEXT);
 }
 
-/* glFinalCombinerInputNV */
-GdkGLProc
-gdk_gl_get_glFinalCombinerInputNV (void)
+/* Get GL_EXT_framebuffer_multisample functions */
+GdkGL_GL_EXT_framebuffer_multisample *
+gdk_gl_get_GL_EXT_framebuffer_multisample (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glFinalCombinerInputNV == (GdkGLProc_glFinalCombinerInputNV) -1)
-    _procs_GL_NV_register_combiners.glFinalCombinerInputNV =
-      (GdkGLProc_glFinalCombinerInputNV) gdk_gl_get_proc_address ("glFinalCombinerInputNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_framebuffer_multisample");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glRenderbufferStorageMultisampleEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFinalCombinerInputNV () - %s",
-               (_procs_GL_NV_register_combiners.glFinalCombinerInputNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_framebuffer_multisample () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glFinalCombinerInputNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_framebuffer_multisample;
 }
 
-/* glGetCombinerInputParameterfvNV */
+/*
+ * GL_EXT_timer_query
+ */
+
+static GdkGL_GL_EXT_timer_query _procs_GL_EXT_timer_query = {
+  (GdkGLProc_glGetQueryObjecti64vEXT) -1,
+  (GdkGLProc_glGetQueryObjectui64vEXT) -1
+};
+
+/* glGetQueryObjecti64vEXT */
 GdkGLProc
-gdk_gl_get_glGetCombinerInputParameterfvNV (void)
+gdk_gl_get_glGetQueryObjecti64vEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV == (GdkGLProc_glGetCombinerInputParameterfvNV) -1)
-    _procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV =
-      (GdkGLProc_glGetCombinerInputParameterfvNV) gdk_gl_get_proc_address ("glGetCombinerInputParameterfvNV");
+  if (_procs_GL_EXT_timer_query.glGetQueryObjecti64vEXT == (GdkGLProc_glGetQueryObjecti64vEXT) -1)
+    _procs_GL_EXT_timer_query.glGetQueryObjecti64vEXT =
+      (GdkGLProc_glGetQueryObjecti64vEXT) gdk_gl_get_proc_address ("glGetQueryObjecti64vEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetCombinerInputParameterfvNV () - %s",
-               (_procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetQueryObjecti64vEXT () - %s",
+               (_procs_GL_EXT_timer_query.glGetQueryObjecti64vEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerInputParameterfvNV);
+  return (GdkGLProc) (_procs_GL_EXT_timer_query.glGetQueryObjecti64vEXT);
 }
 
-/* glGetCombinerInputParameterivNV */
+/* glGetQueryObjectui64vEXT */
 GdkGLProc
-gdk_gl_get_glGetCombinerInputParameterivNV (void)
+gdk_gl_get_glGetQueryObjectui64vEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV == (GdkGLProc_glGetCombinerInputParameterivNV) -1)
-    _procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV =
-      (GdkGLProc_glGetCombinerInputParameterivNV) gdk_gl_get_proc_address ("glGetCombinerInputParameterivNV");
+  if (_procs_GL_EXT_timer_query.glGetQueryObjectui64vEXT == (GdkGLProc_glGetQueryObjectui64vEXT) -1)
+    _procs_GL_EXT_timer_query.glGetQueryObjectui64vEXT =
+      (GdkGLProc_glGetQueryObjectui64vEXT) gdk_gl_get_proc_address ("glGetQueryObjectui64vEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetCombinerInputParameterivNV () - %s",
-               (_procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetQueryObjectui64vEXT () - %s",
+               (_procs_GL_EXT_timer_query.glGetQueryObjectui64vEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerInputParameterivNV);
+  return (GdkGLProc) (_procs_GL_EXT_timer_query.glGetQueryObjectui64vEXT);
 }
 
-/* glGetCombinerOutputParameterfvNV */
-GdkGLProc
-gdk_gl_get_glGetCombinerOutputParameterfvNV (void)
+/* Get GL_EXT_timer_query functions */
+GdkGL_GL_EXT_timer_query *
+gdk_gl_get_GL_EXT_timer_query (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV == (GdkGLProc_glGetCombinerOutputParameterfvNV) -1)
-    _procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV =
-      (GdkGLProc_glGetCombinerOutputParameterfvNV) gdk_gl_get_proc_address ("glGetCombinerOutputParameterfvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_timer_query");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetCombinerOutputParameterfvNV () - %s",
-               (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV) ? "supported" : "not supported"));
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetQueryObjecti64vEXT () != NULL);
+          supported &= (gdk_gl_get_glGetQueryObjectui64vEXT () != NULL);
+        }
+    }
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterfvNV);
-}
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_timer_query () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glGetCombinerOutputParameterivNV */
-GdkGLProc
-gdk_gl_get_glGetCombinerOutputParameterivNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV == (GdkGLProc_glGetCombinerOutputParameterivNV) -1)
-    _procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV =
-      (GdkGLProc_glGetCombinerOutputParameterivNV) gdk_gl_get_proc_address ("glGetCombinerOutputParameterivNV");
+  return &_procs_GL_EXT_timer_query;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetCombinerOutputParameterivNV () - %s",
-               (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV) ? "supported" : "not supported"));
+/*
+ * GL_EXT_gpu_program_parameters
+ */
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetCombinerOutputParameterivNV);
-}
+static GdkGL_GL_EXT_gpu_program_parameters _procs_GL_EXT_gpu_program_parameters = {
+  (GdkGLProc_glProgramEnvParameters4fvEXT) -1,
+  (GdkGLProc_glProgramLocalParameters4fvEXT) -1
+};
 
-/* glGetFinalCombinerInputParameterfvNV */
+/* glProgramEnvParameters4fvEXT */
 GdkGLProc
-gdk_gl_get_glGetFinalCombinerInputParameterfvNV (void)
+gdk_gl_get_glProgramEnvParameters4fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV == (GdkGLProc_glGetFinalCombinerInputParameterfvNV) -1)
-    _procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV =
-      (GdkGLProc_glGetFinalCombinerInputParameterfvNV) gdk_gl_get_proc_address ("glGetFinalCombinerInputParameterfvNV");
+  if (_procs_GL_EXT_gpu_program_parameters.glProgramEnvParameters4fvEXT == (GdkGLProc_glProgramEnvParameters4fvEXT) -1)
+    _procs_GL_EXT_gpu_program_parameters.glProgramEnvParameters4fvEXT =
+      (GdkGLProc_glProgramEnvParameters4fvEXT) gdk_gl_get_proc_address ("glProgramEnvParameters4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFinalCombinerInputParameterfvNV () - %s",
-               (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramEnvParameters4fvEXT () - %s",
+               (_procs_GL_EXT_gpu_program_parameters.glProgramEnvParameters4fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterfvNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_program_parameters.glProgramEnvParameters4fvEXT);
 }
 
-/* glGetFinalCombinerInputParameterivNV */
+/* glProgramLocalParameters4fvEXT */
 GdkGLProc
-gdk_gl_get_glGetFinalCombinerInputParameterivNV (void)
+gdk_gl_get_glProgramLocalParameters4fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV == (GdkGLProc_glGetFinalCombinerInputParameterivNV) -1)
-    _procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV =
-      (GdkGLProc_glGetFinalCombinerInputParameterivNV) gdk_gl_get_proc_address ("glGetFinalCombinerInputParameterivNV");
+  if (_procs_GL_EXT_gpu_program_parameters.glProgramLocalParameters4fvEXT == (GdkGLProc_glProgramLocalParameters4fvEXT) -1)
+    _procs_GL_EXT_gpu_program_parameters.glProgramLocalParameters4fvEXT =
+      (GdkGLProc_glProgramLocalParameters4fvEXT) gdk_gl_get_proc_address ("glProgramLocalParameters4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFinalCombinerInputParameterivNV () - %s",
-               (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramLocalParameters4fvEXT () - %s",
+               (_procs_GL_EXT_gpu_program_parameters.glProgramLocalParameters4fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners.glGetFinalCombinerInputParameterivNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_program_parameters.glProgramLocalParameters4fvEXT);
 }
 
-/* Get GL_NV_register_combiners functions */
-GdkGL_GL_NV_register_combiners *
-gdk_gl_get_GL_NV_register_combiners (void)
+/* Get GL_EXT_gpu_program_parameters functions */
+GdkGL_GL_EXT_gpu_program_parameters *
+gdk_gl_get_GL_EXT_gpu_program_parameters (void)
 {
   static gint supported = -1;
 
@@ -13690,65 +29535,73 @@ gdk_gl_get_GL_NV_register_combiners (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_register_combiners");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_gpu_program_parameters");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glCombinerParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glCombinerParameterfNV () != NULL);
-          supported &= (gdk_gl_get_glCombinerParameterivNV () != NULL);
-          supported &= (gdk_gl_get_glCombinerParameteriNV () != NULL);
-          supported &= (gdk_gl_get_glCombinerInputNV () != NULL);
-          supported &= (gdk_gl_get_glCombinerOutputNV () != NULL);
-          supported &= (gdk_gl_get_glFinalCombinerInputNV () != NULL);
-          supported &= (gdk_gl_get_glGetCombinerInputParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetCombinerInputParameterivNV () != NULL);
-          supported &= (gdk_gl_get_glGetCombinerOutputParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetCombinerOutputParameterivNV () != NULL);
-          supported &= (gdk_gl_get_glGetFinalCombinerInputParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetFinalCombinerInputParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameters4fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameters4fvEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_register_combiners () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_gpu_program_parameters () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_register_combiners;
+  return &_procs_GL_EXT_gpu_program_parameters;
 }
 
 /*
- * GL_MESA_resize_buffers
+ * GL_APPLE_flush_buffer_range
  */
 
-static GdkGL_GL_MESA_resize_buffers _procs_GL_MESA_resize_buffers = {
-  (GdkGLProc_glResizeBuffersMESA) -1
+static GdkGL_GL_APPLE_flush_buffer_range _procs_GL_APPLE_flush_buffer_range = {
+  (GdkGLProc_glBufferParameteriAPPLE) -1,
+  (GdkGLProc_glFlushMappedBufferRangeAPPLE) -1
 };
 
-/* glResizeBuffersMESA */
+/* glBufferParameteriAPPLE */
 GdkGLProc
-gdk_gl_get_glResizeBuffersMESA (void)
+gdk_gl_get_glBufferParameteriAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_resize_buffers.glResizeBuffersMESA == (GdkGLProc_glResizeBuffersMESA) -1)
-    _procs_GL_MESA_resize_buffers.glResizeBuffersMESA =
-      (GdkGLProc_glResizeBuffersMESA) gdk_gl_get_proc_address ("glResizeBuffersMESA");
+  if (_procs_GL_APPLE_flush_buffer_range.glBufferParameteriAPPLE == (GdkGLProc_glBufferParameteriAPPLE) -1)
+    _procs_GL_APPLE_flush_buffer_range.glBufferParameteriAPPLE =
+      (GdkGLProc_glBufferParameteriAPPLE) gdk_gl_get_proc_address ("glBufferParameteriAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glResizeBuffersMESA () - %s",
-               (_procs_GL_MESA_resize_buffers.glResizeBuffersMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBufferParameteriAPPLE () - %s",
+               (_procs_GL_APPLE_flush_buffer_range.glBufferParameteriAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_resize_buffers.glResizeBuffersMESA);
+  return (GdkGLProc) (_procs_GL_APPLE_flush_buffer_range.glBufferParameteriAPPLE);
 }
 
-/* Get GL_MESA_resize_buffers functions */
-GdkGL_GL_MESA_resize_buffers *
-gdk_gl_get_GL_MESA_resize_buffers (void)
+/* glFlushMappedBufferRangeAPPLE */
+GdkGLProc
+gdk_gl_get_glFlushMappedBufferRangeAPPLE (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_APPLE_flush_buffer_range.glFlushMappedBufferRangeAPPLE == (GdkGLProc_glFlushMappedBufferRangeAPPLE) -1)
+    _procs_GL_APPLE_flush_buffer_range.glFlushMappedBufferRangeAPPLE =
+      (GdkGLProc_glFlushMappedBufferRangeAPPLE) gdk_gl_get_proc_address ("glFlushMappedBufferRangeAPPLE");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glFlushMappedBufferRangeAPPLE () - %s",
+               (_procs_GL_APPLE_flush_buffer_range.glFlushMappedBufferRangeAPPLE) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_APPLE_flush_buffer_range.glFlushMappedBufferRangeAPPLE);
+}
+
+/* Get GL_APPLE_flush_buffer_range functions */
+GdkGL_GL_APPLE_flush_buffer_range *
+gdk_gl_get_GL_APPLE_flush_buffer_range (void)
 {
   static gint supported = -1;
 
@@ -13757,490 +29610,524 @@ gdk_gl_get_GL_MESA_resize_buffers (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_MESA_resize_buffers");
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_flush_buffer_range");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glResizeBuffersMESA () != NULL);
+          supported &= (gdk_gl_get_glBufferParameteriAPPLE () != NULL);
+          supported &= (gdk_gl_get_glFlushMappedBufferRangeAPPLE () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_MESA_resize_buffers () - %s",
+    g_message (" - gdk_gl_get_GL_APPLE_flush_buffer_range () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_MESA_resize_buffers;
+  return &_procs_GL_APPLE_flush_buffer_range;
 }
 
 /*
- * GL_MESA_window_pos
+ * GL_NV_gpu_program4
  */
 
-static GdkGL_GL_MESA_window_pos _procs_GL_MESA_window_pos = {
-  (GdkGLProc_glWindowPos2dMESA) -1,
-  (GdkGLProc_glWindowPos2dvMESA) -1,
-  (GdkGLProc_glWindowPos2fMESA) -1,
-  (GdkGLProc_glWindowPos2fvMESA) -1,
-  (GdkGLProc_glWindowPos2iMESA) -1,
-  (GdkGLProc_glWindowPos2ivMESA) -1,
-  (GdkGLProc_glWindowPos2sMESA) -1,
-  (GdkGLProc_glWindowPos2svMESA) -1,
-  (GdkGLProc_glWindowPos3dMESA) -1,
-  (GdkGLProc_glWindowPos3dvMESA) -1,
-  (GdkGLProc_glWindowPos3fMESA) -1,
-  (GdkGLProc_glWindowPos3fvMESA) -1,
-  (GdkGLProc_glWindowPos3iMESA) -1,
-  (GdkGLProc_glWindowPos3ivMESA) -1,
-  (GdkGLProc_glWindowPos3sMESA) -1,
-  (GdkGLProc_glWindowPos3svMESA) -1,
-  (GdkGLProc_glWindowPos4dMESA) -1,
-  (GdkGLProc_glWindowPos4dvMESA) -1,
-  (GdkGLProc_glWindowPos4fMESA) -1,
-  (GdkGLProc_glWindowPos4fvMESA) -1,
-  (GdkGLProc_glWindowPos4iMESA) -1,
-  (GdkGLProc_glWindowPos4ivMESA) -1,
-  (GdkGLProc_glWindowPos4sMESA) -1,
-  (GdkGLProc_glWindowPos4svMESA) -1
+static GdkGL_GL_NV_gpu_program4 _procs_GL_NV_gpu_program4 = {
+  (GdkGLProc_glProgramLocalParameterI4iNV) -1,
+  (GdkGLProc_glProgramLocalParameterI4ivNV) -1,
+  (GdkGLProc_glProgramLocalParametersI4ivNV) -1,
+  (GdkGLProc_glProgramLocalParameterI4uiNV) -1,
+  (GdkGLProc_glProgramLocalParameterI4uivNV) -1,
+  (GdkGLProc_glProgramLocalParametersI4uivNV) -1,
+  (GdkGLProc_glProgramEnvParameterI4iNV) -1,
+  (GdkGLProc_glProgramEnvParameterI4ivNV) -1,
+  (GdkGLProc_glProgramEnvParametersI4ivNV) -1,
+  (GdkGLProc_glProgramEnvParameterI4uiNV) -1,
+  (GdkGLProc_glProgramEnvParameterI4uivNV) -1,
+  (GdkGLProc_glProgramEnvParametersI4uivNV) -1,
+  (GdkGLProc_glGetProgramLocalParameterIivNV) -1,
+  (GdkGLProc_glGetProgramLocalParameterIuivNV) -1,
+  (GdkGLProc_glGetProgramEnvParameterIivNV) -1,
+  (GdkGLProc_glGetProgramEnvParameterIuivNV) -1
 };
 
-/* glWindowPos2dMESA */
+/* glProgramLocalParameterI4iNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2dMESA (void)
+gdk_gl_get_glProgramLocalParameterI4iNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2dMESA == (GdkGLProc_glWindowPos2dMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2dMESA =
-      (GdkGLProc_glWindowPos2dMESA) gdk_gl_get_proc_address ("glWindowPos2dMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4iNV == (GdkGLProc_glProgramLocalParameterI4iNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramLocalParameterI4iNV =
+      (GdkGLProc_glProgramLocalParameterI4iNV) gdk_gl_get_proc_address ("glProgramLocalParameterI4iNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2dMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2dMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramLocalParameterI4iNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4iNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2dMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4iNV);
 }
 
-/* glWindowPos2dvMESA */
+/* glProgramLocalParameterI4ivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2dvMESA (void)
+gdk_gl_get_glProgramLocalParameterI4ivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2dvMESA == (GdkGLProc_glWindowPos2dvMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2dvMESA =
-      (GdkGLProc_glWindowPos2dvMESA) gdk_gl_get_proc_address ("glWindowPos2dvMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4ivNV == (GdkGLProc_glProgramLocalParameterI4ivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramLocalParameterI4ivNV =
+      (GdkGLProc_glProgramLocalParameterI4ivNV) gdk_gl_get_proc_address ("glProgramLocalParameterI4ivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2dvMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2dvMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramLocalParameterI4ivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4ivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2dvMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4ivNV);
 }
 
-/* glWindowPos2fMESA */
+/* glProgramLocalParametersI4ivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2fMESA (void)
+gdk_gl_get_glProgramLocalParametersI4ivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2fMESA == (GdkGLProc_glWindowPos2fMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2fMESA =
-      (GdkGLProc_glWindowPos2fMESA) gdk_gl_get_proc_address ("glWindowPos2fMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramLocalParametersI4ivNV == (GdkGLProc_glProgramLocalParametersI4ivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramLocalParametersI4ivNV =
+      (GdkGLProc_glProgramLocalParametersI4ivNV) gdk_gl_get_proc_address ("glProgramLocalParametersI4ivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2fMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2fMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramLocalParametersI4ivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramLocalParametersI4ivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2fMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramLocalParametersI4ivNV);
 }
 
-/* glWindowPos2fvMESA */
+/* glProgramLocalParameterI4uiNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2fvMESA (void)
+gdk_gl_get_glProgramLocalParameterI4uiNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2fvMESA == (GdkGLProc_glWindowPos2fvMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2fvMESA =
-      (GdkGLProc_glWindowPos2fvMESA) gdk_gl_get_proc_address ("glWindowPos2fvMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4uiNV == (GdkGLProc_glProgramLocalParameterI4uiNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramLocalParameterI4uiNV =
+      (GdkGLProc_glProgramLocalParameterI4uiNV) gdk_gl_get_proc_address ("glProgramLocalParameterI4uiNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2fvMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2fvMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramLocalParameterI4uiNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4uiNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2fvMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4uiNV);
 }
 
-/* glWindowPos2iMESA */
+/* glProgramLocalParameterI4uivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2iMESA (void)
+gdk_gl_get_glProgramLocalParameterI4uivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2iMESA == (GdkGLProc_glWindowPos2iMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2iMESA =
-      (GdkGLProc_glWindowPos2iMESA) gdk_gl_get_proc_address ("glWindowPos2iMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4uivNV == (GdkGLProc_glProgramLocalParameterI4uivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramLocalParameterI4uivNV =
+      (GdkGLProc_glProgramLocalParameterI4uivNV) gdk_gl_get_proc_address ("glProgramLocalParameterI4uivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2iMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2iMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramLocalParameterI4uivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4uivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2iMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramLocalParameterI4uivNV);
 }
 
-/* glWindowPos2ivMESA */
+/* glProgramLocalParametersI4uivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2ivMESA (void)
+gdk_gl_get_glProgramLocalParametersI4uivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2ivMESA == (GdkGLProc_glWindowPos2ivMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2ivMESA =
-      (GdkGLProc_glWindowPos2ivMESA) gdk_gl_get_proc_address ("glWindowPos2ivMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramLocalParametersI4uivNV == (GdkGLProc_glProgramLocalParametersI4uivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramLocalParametersI4uivNV =
+      (GdkGLProc_glProgramLocalParametersI4uivNV) gdk_gl_get_proc_address ("glProgramLocalParametersI4uivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2ivMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2ivMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramLocalParametersI4uivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramLocalParametersI4uivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2ivMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramLocalParametersI4uivNV);
 }
 
-/* glWindowPos2sMESA */
+/* glProgramEnvParameterI4iNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2sMESA (void)
+gdk_gl_get_glProgramEnvParameterI4iNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2sMESA == (GdkGLProc_glWindowPos2sMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2sMESA =
-      (GdkGLProc_glWindowPos2sMESA) gdk_gl_get_proc_address ("glWindowPos2sMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4iNV == (GdkGLProc_glProgramEnvParameterI4iNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramEnvParameterI4iNV =
+      (GdkGLProc_glProgramEnvParameterI4iNV) gdk_gl_get_proc_address ("glProgramEnvParameterI4iNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2sMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2sMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramEnvParameterI4iNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4iNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2sMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4iNV);
 }
 
-/* glWindowPos2svMESA */
+/* glProgramEnvParameterI4ivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos2svMESA (void)
+gdk_gl_get_glProgramEnvParameterI4ivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos2svMESA == (GdkGLProc_glWindowPos2svMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos2svMESA =
-      (GdkGLProc_glWindowPos2svMESA) gdk_gl_get_proc_address ("glWindowPos2svMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4ivNV == (GdkGLProc_glProgramEnvParameterI4ivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramEnvParameterI4ivNV =
+      (GdkGLProc_glProgramEnvParameterI4ivNV) gdk_gl_get_proc_address ("glProgramEnvParameterI4ivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos2svMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos2svMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramEnvParameterI4ivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4ivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos2svMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4ivNV);
 }
 
-/* glWindowPos3dMESA */
+/* glProgramEnvParametersI4ivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3dMESA (void)
+gdk_gl_get_glProgramEnvParametersI4ivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3dMESA == (GdkGLProc_glWindowPos3dMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3dMESA =
-      (GdkGLProc_glWindowPos3dMESA) gdk_gl_get_proc_address ("glWindowPos3dMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramEnvParametersI4ivNV == (GdkGLProc_glProgramEnvParametersI4ivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramEnvParametersI4ivNV =
+      (GdkGLProc_glProgramEnvParametersI4ivNV) gdk_gl_get_proc_address ("glProgramEnvParametersI4ivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3dMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3dMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramEnvParametersI4ivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramEnvParametersI4ivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3dMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramEnvParametersI4ivNV);
 }
 
-/* glWindowPos3dvMESA */
+/* glProgramEnvParameterI4uiNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3dvMESA (void)
+gdk_gl_get_glProgramEnvParameterI4uiNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3dvMESA == (GdkGLProc_glWindowPos3dvMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3dvMESA =
-      (GdkGLProc_glWindowPos3dvMESA) gdk_gl_get_proc_address ("glWindowPos3dvMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4uiNV == (GdkGLProc_glProgramEnvParameterI4uiNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramEnvParameterI4uiNV =
+      (GdkGLProc_glProgramEnvParameterI4uiNV) gdk_gl_get_proc_address ("glProgramEnvParameterI4uiNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3dvMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3dvMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramEnvParameterI4uiNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4uiNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3dvMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4uiNV);
 }
 
-/* glWindowPos3fMESA */
+/* glProgramEnvParameterI4uivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3fMESA (void)
+gdk_gl_get_glProgramEnvParameterI4uivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3fMESA == (GdkGLProc_glWindowPos3fMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3fMESA =
-      (GdkGLProc_glWindowPos3fMESA) gdk_gl_get_proc_address ("glWindowPos3fMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4uivNV == (GdkGLProc_glProgramEnvParameterI4uivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramEnvParameterI4uivNV =
+      (GdkGLProc_glProgramEnvParameterI4uivNV) gdk_gl_get_proc_address ("glProgramEnvParameterI4uivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3fMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3fMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramEnvParameterI4uivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4uivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3fMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramEnvParameterI4uivNV);
 }
 
-/* glWindowPos3fvMESA */
+/* glProgramEnvParametersI4uivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3fvMESA (void)
+gdk_gl_get_glProgramEnvParametersI4uivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3fvMESA == (GdkGLProc_glWindowPos3fvMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3fvMESA =
-      (GdkGLProc_glWindowPos3fvMESA) gdk_gl_get_proc_address ("glWindowPos3fvMESA");
+  if (_procs_GL_NV_gpu_program4.glProgramEnvParametersI4uivNV == (GdkGLProc_glProgramEnvParametersI4uivNV) -1)
+    _procs_GL_NV_gpu_program4.glProgramEnvParametersI4uivNV =
+      (GdkGLProc_glProgramEnvParametersI4uivNV) gdk_gl_get_proc_address ("glProgramEnvParametersI4uivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3fvMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3fvMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramEnvParametersI4uivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glProgramEnvParametersI4uivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3fvMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glProgramEnvParametersI4uivNV);
 }
 
-/* glWindowPos3iMESA */
+/* glGetProgramLocalParameterIivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3iMESA (void)
+gdk_gl_get_glGetProgramLocalParameterIivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3iMESA == (GdkGLProc_glWindowPos3iMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3iMESA =
-      (GdkGLProc_glWindowPos3iMESA) gdk_gl_get_proc_address ("glWindowPos3iMESA");
+  if (_procs_GL_NV_gpu_program4.glGetProgramLocalParameterIivNV == (GdkGLProc_glGetProgramLocalParameterIivNV) -1)
+    _procs_GL_NV_gpu_program4.glGetProgramLocalParameterIivNV =
+      (GdkGLProc_glGetProgramLocalParameterIivNV) gdk_gl_get_proc_address ("glGetProgramLocalParameterIivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3iMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3iMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetProgramLocalParameterIivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glGetProgramLocalParameterIivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3iMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glGetProgramLocalParameterIivNV);
 }
 
-/* glWindowPos3ivMESA */
+/* glGetProgramLocalParameterIuivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3ivMESA (void)
+gdk_gl_get_glGetProgramLocalParameterIuivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3ivMESA == (GdkGLProc_glWindowPos3ivMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3ivMESA =
-      (GdkGLProc_glWindowPos3ivMESA) gdk_gl_get_proc_address ("glWindowPos3ivMESA");
+  if (_procs_GL_NV_gpu_program4.glGetProgramLocalParameterIuivNV == (GdkGLProc_glGetProgramLocalParameterIuivNV) -1)
+    _procs_GL_NV_gpu_program4.glGetProgramLocalParameterIuivNV =
+      (GdkGLProc_glGetProgramLocalParameterIuivNV) gdk_gl_get_proc_address ("glGetProgramLocalParameterIuivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3ivMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3ivMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetProgramLocalParameterIuivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glGetProgramLocalParameterIuivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3ivMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glGetProgramLocalParameterIuivNV);
 }
 
-/* glWindowPos3sMESA */
+/* glGetProgramEnvParameterIivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3sMESA (void)
+gdk_gl_get_glGetProgramEnvParameterIivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3sMESA == (GdkGLProc_glWindowPos3sMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3sMESA =
-      (GdkGLProc_glWindowPos3sMESA) gdk_gl_get_proc_address ("glWindowPos3sMESA");
+  if (_procs_GL_NV_gpu_program4.glGetProgramEnvParameterIivNV == (GdkGLProc_glGetProgramEnvParameterIivNV) -1)
+    _procs_GL_NV_gpu_program4.glGetProgramEnvParameterIivNV =
+      (GdkGLProc_glGetProgramEnvParameterIivNV) gdk_gl_get_proc_address ("glGetProgramEnvParameterIivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3sMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3sMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetProgramEnvParameterIivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glGetProgramEnvParameterIivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3sMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glGetProgramEnvParameterIivNV);
 }
 
-/* glWindowPos3svMESA */
+/* glGetProgramEnvParameterIuivNV */
 GdkGLProc
-gdk_gl_get_glWindowPos3svMESA (void)
+gdk_gl_get_glGetProgramEnvParameterIuivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos3svMESA == (GdkGLProc_glWindowPos3svMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos3svMESA =
-      (GdkGLProc_glWindowPos3svMESA) gdk_gl_get_proc_address ("glWindowPos3svMESA");
+  if (_procs_GL_NV_gpu_program4.glGetProgramEnvParameterIuivNV == (GdkGLProc_glGetProgramEnvParameterIuivNV) -1)
+    _procs_GL_NV_gpu_program4.glGetProgramEnvParameterIuivNV =
+      (GdkGLProc_glGetProgramEnvParameterIuivNV) gdk_gl_get_proc_address ("glGetProgramEnvParameterIuivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos3svMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos3svMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetProgramEnvParameterIuivNV () - %s",
+               (_procs_GL_NV_gpu_program4.glGetProgramEnvParameterIuivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos3svMESA);
+  return (GdkGLProc) (_procs_GL_NV_gpu_program4.glGetProgramEnvParameterIuivNV);
 }
 
-/* glWindowPos4dMESA */
-GdkGLProc
-gdk_gl_get_glWindowPos4dMESA (void)
+/* Get GL_NV_gpu_program4 functions */
+GdkGL_GL_NV_gpu_program4 *
+gdk_gl_get_GL_NV_gpu_program4 (void)
 {
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_MESA_window_pos.glWindowPos4dMESA == (GdkGLProc_glWindowPos4dMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4dMESA =
-      (GdkGLProc_glWindowPos4dMESA) gdk_gl_get_proc_address ("glWindowPos4dMESA");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4dMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4dMESA) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4dMESA);
-}
+  static gint supported = -1;
 
-/* glWindowPos4dvMESA */
-GdkGLProc
-gdk_gl_get_glWindowPos4dvMESA (void)
-{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos4dvMESA == (GdkGLProc_glWindowPos4dvMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4dvMESA =
-      (GdkGLProc_glWindowPos4dvMESA) gdk_gl_get_proc_address ("glWindowPos4dvMESA");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_gpu_program4");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glProgramLocalParameterI4iNV () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameterI4ivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParametersI4ivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameterI4uiNV () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParameterI4uivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramLocalParametersI4uivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameterI4iNV () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameterI4ivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParametersI4ivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameterI4uiNV () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParameterI4uivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramEnvParametersI4uivNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramLocalParameterIivNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramLocalParameterIuivNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramEnvParameterIivNV () != NULL);
+          supported &= (gdk_gl_get_glGetProgramEnvParameterIuivNV () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4dvMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4dvMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_NV_gpu_program4 () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4dvMESA);
+  return &_procs_GL_NV_gpu_program4;
 }
 
-/* glWindowPos4fMESA */
+/*
+ * GL_NV_geometry_program4
+ */
+
+static GdkGL_GL_NV_geometry_program4 _procs_GL_NV_geometry_program4 = {
+  (GdkGLProc_glProgramVertexLimitNV) -1,
+  (GdkGLProc_glFramebufferTextureEXT) -1,
+  (GdkGLProc_glFramebufferTextureLayerEXT) -1,
+  (GdkGLProc_glFramebufferTextureFaceEXT) -1
+};
+
+/* glProgramVertexLimitNV */
 GdkGLProc
-gdk_gl_get_glWindowPos4fMESA (void)
+gdk_gl_get_glProgramVertexLimitNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos4fMESA == (GdkGLProc_glWindowPos4fMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4fMESA =
-      (GdkGLProc_glWindowPos4fMESA) gdk_gl_get_proc_address ("glWindowPos4fMESA");
+  if (_procs_GL_NV_geometry_program4.glProgramVertexLimitNV == (GdkGLProc_glProgramVertexLimitNV) -1)
+    _procs_GL_NV_geometry_program4.glProgramVertexLimitNV =
+      (GdkGLProc_glProgramVertexLimitNV) gdk_gl_get_proc_address ("glProgramVertexLimitNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4fMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4fMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramVertexLimitNV () - %s",
+               (_procs_GL_NV_geometry_program4.glProgramVertexLimitNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4fMESA);
+  return (GdkGLProc) (_procs_GL_NV_geometry_program4.glProgramVertexLimitNV);
 }
 
-/* glWindowPos4fvMESA */
+/* glFramebufferTextureEXT */
 GdkGLProc
-gdk_gl_get_glWindowPos4fvMESA (void)
+gdk_gl_get_glFramebufferTextureEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos4fvMESA == (GdkGLProc_glWindowPos4fvMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4fvMESA =
-      (GdkGLProc_glWindowPos4fvMESA) gdk_gl_get_proc_address ("glWindowPos4fvMESA");
+  if (_procs_GL_NV_geometry_program4.glFramebufferTextureEXT == (GdkGLProc_glFramebufferTextureEXT) -1)
+    _procs_GL_NV_geometry_program4.glFramebufferTextureEXT =
+      (GdkGLProc_glFramebufferTextureEXT) gdk_gl_get_proc_address ("glFramebufferTextureEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4fvMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4fvMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferTextureEXT () - %s",
+               (_procs_GL_NV_geometry_program4.glFramebufferTextureEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4fvMESA);
+  return (GdkGLProc) (_procs_GL_NV_geometry_program4.glFramebufferTextureEXT);
 }
 
-/* glWindowPos4iMESA */
+/* glFramebufferTextureLayerEXT */
 GdkGLProc
-gdk_gl_get_glWindowPos4iMESA (void)
+gdk_gl_get_glFramebufferTextureLayerEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos4iMESA == (GdkGLProc_glWindowPos4iMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4iMESA =
-      (GdkGLProc_glWindowPos4iMESA) gdk_gl_get_proc_address ("glWindowPos4iMESA");
+  if (_procs_GL_NV_geometry_program4.glFramebufferTextureLayerEXT == (GdkGLProc_glFramebufferTextureLayerEXT) -1)
+    _procs_GL_NV_geometry_program4.glFramebufferTextureLayerEXT =
+      (GdkGLProc_glFramebufferTextureLayerEXT) gdk_gl_get_proc_address ("glFramebufferTextureLayerEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4iMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4iMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferTextureLayerEXT () - %s",
+               (_procs_GL_NV_geometry_program4.glFramebufferTextureLayerEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4iMESA);
+  return (GdkGLProc) (_procs_GL_NV_geometry_program4.glFramebufferTextureLayerEXT);
 }
 
-/* glWindowPos4ivMESA */
+/* glFramebufferTextureFaceEXT */
 GdkGLProc
-gdk_gl_get_glWindowPos4ivMESA (void)
+gdk_gl_get_glFramebufferTextureFaceEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos4ivMESA == (GdkGLProc_glWindowPos4ivMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4ivMESA =
-      (GdkGLProc_glWindowPos4ivMESA) gdk_gl_get_proc_address ("glWindowPos4ivMESA");
+  if (_procs_GL_NV_geometry_program4.glFramebufferTextureFaceEXT == (GdkGLProc_glFramebufferTextureFaceEXT) -1)
+    _procs_GL_NV_geometry_program4.glFramebufferTextureFaceEXT =
+      (GdkGLProc_glFramebufferTextureFaceEXT) gdk_gl_get_proc_address ("glFramebufferTextureFaceEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4ivMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4ivMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferTextureFaceEXT () - %s",
+               (_procs_GL_NV_geometry_program4.glFramebufferTextureFaceEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4ivMESA);
+  return (GdkGLProc) (_procs_GL_NV_geometry_program4.glFramebufferTextureFaceEXT);
 }
 
-/* glWindowPos4sMESA */
-GdkGLProc
-gdk_gl_get_glWindowPos4sMESA (void)
+/* Get GL_NV_geometry_program4 functions */
+GdkGL_GL_NV_geometry_program4 *
+gdk_gl_get_GL_NV_geometry_program4 (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos4sMESA == (GdkGLProc_glWindowPos4sMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4sMESA =
-      (GdkGLProc_glWindowPos4sMESA) gdk_gl_get_proc_address ("glWindowPos4sMESA");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_geometry_program4");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glProgramVertexLimitNV () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTextureEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTextureLayerEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferTextureFaceEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4sMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4sMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_NV_geometry_program4 () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4sMESA);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_geometry_program4;
 }
 
-/* glWindowPos4svMESA */
+/*
+ * GL_EXT_geometry_shader4
+ */
+
+static GdkGL_GL_EXT_geometry_shader4 _procs_GL_EXT_geometry_shader4 = {
+  (GdkGLProc_glProgramParameteriEXT) -1
+};
+
+/* glProgramParameteriEXT */
 GdkGLProc
-gdk_gl_get_glWindowPos4svMESA (void)
+gdk_gl_get_glProgramParameteriEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_MESA_window_pos.glWindowPos4svMESA == (GdkGLProc_glWindowPos4svMESA) -1)
-    _procs_GL_MESA_window_pos.glWindowPos4svMESA =
-      (GdkGLProc_glWindowPos4svMESA) gdk_gl_get_proc_address ("glWindowPos4svMESA");
+  if (_procs_GL_EXT_geometry_shader4.glProgramParameteriEXT == (GdkGLProc_glProgramParameteriEXT) -1)
+    _procs_GL_EXT_geometry_shader4.glProgramParameteriEXT =
+      (GdkGLProc_glProgramParameteriEXT) gdk_gl_get_proc_address ("glProgramParameteriEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWindowPos4svMESA () - %s",
-               (_procs_GL_MESA_window_pos.glWindowPos4svMESA) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramParameteriEXT () - %s",
+               (_procs_GL_EXT_geometry_shader4.glProgramParameteriEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_MESA_window_pos.glWindowPos4svMESA);
+  return (GdkGLProc) (_procs_GL_EXT_geometry_shader4.glProgramParameteriEXT);
 }
 
-/* Get GL_MESA_window_pos functions */
-GdkGL_GL_MESA_window_pos *
-gdk_gl_get_GL_MESA_window_pos (void)
+/* Get GL_EXT_geometry_shader4 functions */
+GdkGL_GL_EXT_geometry_shader4 *
+gdk_gl_get_GL_EXT_geometry_shader4 (void)
 {
   static gint supported = -1;
 
@@ -14249,476 +30136,471 @@ gdk_gl_get_GL_MESA_window_pos (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_MESA_window_pos");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_geometry_shader4");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glWindowPos2dMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2dvMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2fMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2fvMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2iMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2ivMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2sMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos2svMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3dMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3dvMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3fMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3fvMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3iMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3ivMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3sMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos3svMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4dMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4dvMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4fMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4fvMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4iMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4ivMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4sMESA () != NULL);
-          supported &= (gdk_gl_get_glWindowPos4svMESA () != NULL);
+          supported &= (gdk_gl_get_glProgramParameteriEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_MESA_window_pos () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_geometry_shader4 () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_MESA_window_pos;
+  return &_procs_GL_EXT_geometry_shader4;
 }
 
 /*
- * GL_IBM_multimode_draw_arrays
+ * GL_NV_vertex_program4
  */
 
-static GdkGL_GL_IBM_multimode_draw_arrays _procs_GL_IBM_multimode_draw_arrays = {
-  (GdkGLProc_glMultiModeDrawArraysIBM) -1,
-  (GdkGLProc_glMultiModeDrawElementsIBM) -1
+static GdkGL_GL_NV_vertex_program4 _procs_GL_NV_vertex_program4 = {
+  (GdkGLProc_glVertexAttribI1iEXT) -1,
+  (GdkGLProc_glVertexAttribI2iEXT) -1,
+  (GdkGLProc_glVertexAttribI3iEXT) -1,
+  (GdkGLProc_glVertexAttribI4iEXT) -1,
+  (GdkGLProc_glVertexAttribI1uiEXT) -1,
+  (GdkGLProc_glVertexAttribI2uiEXT) -1,
+  (GdkGLProc_glVertexAttribI3uiEXT) -1,
+  (GdkGLProc_glVertexAttribI4uiEXT) -1,
+  (GdkGLProc_glVertexAttribI1ivEXT) -1,
+  (GdkGLProc_glVertexAttribI2ivEXT) -1,
+  (GdkGLProc_glVertexAttribI3ivEXT) -1,
+  (GdkGLProc_glVertexAttribI4ivEXT) -1,
+  (GdkGLProc_glVertexAttribI1uivEXT) -1,
+  (GdkGLProc_glVertexAttribI2uivEXT) -1,
+  (GdkGLProc_glVertexAttribI3uivEXT) -1,
+  (GdkGLProc_glVertexAttribI4uivEXT) -1,
+  (GdkGLProc_glVertexAttribI4bvEXT) -1,
+  (GdkGLProc_glVertexAttribI4svEXT) -1,
+  (GdkGLProc_glVertexAttribI4ubvEXT) -1,
+  (GdkGLProc_glVertexAttribI4usvEXT) -1,
+  (GdkGLProc_glVertexAttribIPointerEXT) -1,
+  (GdkGLProc_glGetVertexAttribIivEXT) -1,
+  (GdkGLProc_glGetVertexAttribIuivEXT) -1
 };
 
-/* glMultiModeDrawArraysIBM */
+/* glVertexAttribI1iEXT */
 GdkGLProc
-gdk_gl_get_glMultiModeDrawArraysIBM (void)
+gdk_gl_get_glVertexAttribI1iEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM == (GdkGLProc_glMultiModeDrawArraysIBM) -1)
-    _procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM =
-      (GdkGLProc_glMultiModeDrawArraysIBM) gdk_gl_get_proc_address ("glMultiModeDrawArraysIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI1iEXT == (GdkGLProc_glVertexAttribI1iEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI1iEXT =
+      (GdkGLProc_glVertexAttribI1iEXT) gdk_gl_get_proc_address ("glVertexAttribI1iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiModeDrawArraysIBM () - %s",
-               (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI1iEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI1iEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawArraysIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI1iEXT);
 }
 
-/* glMultiModeDrawElementsIBM */
+/* glVertexAttribI2iEXT */
 GdkGLProc
-gdk_gl_get_glMultiModeDrawElementsIBM (void)
+gdk_gl_get_glVertexAttribI2iEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM == (GdkGLProc_glMultiModeDrawElementsIBM) -1)
-    _procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM =
-      (GdkGLProc_glMultiModeDrawElementsIBM) gdk_gl_get_proc_address ("glMultiModeDrawElementsIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI2iEXT == (GdkGLProc_glVertexAttribI2iEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI2iEXT =
+      (GdkGLProc_glVertexAttribI2iEXT) gdk_gl_get_proc_address ("glVertexAttribI2iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiModeDrawElementsIBM () - %s",
-               (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2iEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI2iEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_multimode_draw_arrays.glMultiModeDrawElementsIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI2iEXT);
 }
 
-/* Get GL_IBM_multimode_draw_arrays functions */
-GdkGL_GL_IBM_multimode_draw_arrays *
-gdk_gl_get_GL_IBM_multimode_draw_arrays (void)
+/* glVertexAttribI3iEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribI3iEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_IBM_multimode_draw_arrays");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glMultiModeDrawArraysIBM () != NULL);
-          supported &= (gdk_gl_get_glMultiModeDrawElementsIBM () != NULL);
-        }
-    }
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI3iEXT == (GdkGLProc_glVertexAttribI3iEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI3iEXT =
+      (GdkGLProc_glVertexAttribI3iEXT) gdk_gl_get_proc_address ("glVertexAttribI3iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_IBM_multimode_draw_arrays () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI3iEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI3iEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI3iEXT);
+}
+
+/* glVertexAttribI4iEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribI4iEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_IBM_multimode_draw_arrays;
-}
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4iEXT == (GdkGLProc_glVertexAttribI4iEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4iEXT =
+      (GdkGLProc_glVertexAttribI4iEXT) gdk_gl_get_proc_address ("glVertexAttribI4iEXT");
 
-/*
- * GL_IBM_vertex_array_lists
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribI4iEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4iEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_IBM_vertex_array_lists _procs_GL_IBM_vertex_array_lists = {
-  (GdkGLProc_glColorPointerListIBM) -1,
-  (GdkGLProc_glSecondaryColorPointerListIBM) -1,
-  (GdkGLProc_glEdgeFlagPointerListIBM) -1,
-  (GdkGLProc_glFogCoordPointerListIBM) -1,
-  (GdkGLProc_glIndexPointerListIBM) -1,
-  (GdkGLProc_glNormalPointerListIBM) -1,
-  (GdkGLProc_glTexCoordPointerListIBM) -1,
-  (GdkGLProc_glVertexPointerListIBM) -1
-};
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4iEXT);
+}
 
-/* glColorPointerListIBM */
+/* glVertexAttribI1uiEXT */
 GdkGLProc
-gdk_gl_get_glColorPointerListIBM (void)
+gdk_gl_get_glVertexAttribI1uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glColorPointerListIBM == (GdkGLProc_glColorPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glColorPointerListIBM =
-      (GdkGLProc_glColorPointerListIBM) gdk_gl_get_proc_address ("glColorPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI1uiEXT == (GdkGLProc_glVertexAttribI1uiEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI1uiEXT =
+      (GdkGLProc_glVertexAttribI1uiEXT) gdk_gl_get_proc_address ("glVertexAttribI1uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glColorPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI1uiEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI1uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glColorPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI1uiEXT);
 }
 
-/* glSecondaryColorPointerListIBM */
+/* glVertexAttribI2uiEXT */
 GdkGLProc
-gdk_gl_get_glSecondaryColorPointerListIBM (void)
+gdk_gl_get_glVertexAttribI2uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM == (GdkGLProc_glSecondaryColorPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM =
-      (GdkGLProc_glSecondaryColorPointerListIBM) gdk_gl_get_proc_address ("glSecondaryColorPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI2uiEXT == (GdkGLProc_glVertexAttribI2uiEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI2uiEXT =
+      (GdkGLProc_glVertexAttribI2uiEXT) gdk_gl_get_proc_address ("glVertexAttribI2uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColorPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2uiEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI2uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glSecondaryColorPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI2uiEXT);
 }
 
-/* glEdgeFlagPointerListIBM */
+/* glVertexAttribI3uiEXT */
 GdkGLProc
-gdk_gl_get_glEdgeFlagPointerListIBM (void)
+gdk_gl_get_glVertexAttribI3uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM == (GdkGLProc_glEdgeFlagPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM =
-      (GdkGLProc_glEdgeFlagPointerListIBM) gdk_gl_get_proc_address ("glEdgeFlagPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI3uiEXT == (GdkGLProc_glVertexAttribI3uiEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI3uiEXT =
+      (GdkGLProc_glVertexAttribI3uiEXT) gdk_gl_get_proc_address ("glVertexAttribI3uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEdgeFlagPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI3uiEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI3uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glEdgeFlagPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI3uiEXT);
 }
 
-/* glFogCoordPointerListIBM */
+/* glVertexAttribI4uiEXT */
 GdkGLProc
-gdk_gl_get_glFogCoordPointerListIBM (void)
+gdk_gl_get_glVertexAttribI4uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM == (GdkGLProc_glFogCoordPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM =
-      (GdkGLProc_glFogCoordPointerListIBM) gdk_gl_get_proc_address ("glFogCoordPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4uiEXT == (GdkGLProc_glVertexAttribI4uiEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4uiEXT =
+      (GdkGLProc_glVertexAttribI4uiEXT) gdk_gl_get_proc_address ("glVertexAttribI4uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4uiEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glFogCoordPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4uiEXT);
 }
 
-/* glIndexPointerListIBM */
+/* glVertexAttribI1ivEXT */
 GdkGLProc
-gdk_gl_get_glIndexPointerListIBM (void)
+gdk_gl_get_glVertexAttribI1ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM == (GdkGLProc_glIndexPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM =
-      (GdkGLProc_glIndexPointerListIBM) gdk_gl_get_proc_address ("glIndexPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI1ivEXT == (GdkGLProc_glVertexAttribI1ivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI1ivEXT =
+      (GdkGLProc_glVertexAttribI1ivEXT) gdk_gl_get_proc_address ("glVertexAttribI1ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIndexPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI1ivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI1ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glIndexPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI1ivEXT);
 }
 
-/* glNormalPointerListIBM */
+/* glVertexAttribI2ivEXT */
 GdkGLProc
-gdk_gl_get_glNormalPointerListIBM (void)
+gdk_gl_get_glVertexAttribI2ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM == (GdkGLProc_glNormalPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM =
-      (GdkGLProc_glNormalPointerListIBM) gdk_gl_get_proc_address ("glNormalPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI2ivEXT == (GdkGLProc_glVertexAttribI2ivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI2ivEXT =
+      (GdkGLProc_glVertexAttribI2ivEXT) gdk_gl_get_proc_address ("glVertexAttribI2ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2ivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI2ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glNormalPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI2ivEXT);
 }
 
-/* glTexCoordPointerListIBM */
+/* glVertexAttribI3ivEXT */
 GdkGLProc
-gdk_gl_get_glTexCoordPointerListIBM (void)
+gdk_gl_get_glVertexAttribI3ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM == (GdkGLProc_glTexCoordPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM =
-      (GdkGLProc_glTexCoordPointerListIBM) gdk_gl_get_proc_address ("glTexCoordPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI3ivEXT == (GdkGLProc_glVertexAttribI3ivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI3ivEXT =
+      (GdkGLProc_glVertexAttribI3ivEXT) gdk_gl_get_proc_address ("glVertexAttribI3ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoordPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI3ivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI3ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glTexCoordPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI3ivEXT);
 }
 
-/* glVertexPointerListIBM */
+/* glVertexAttribI4ivEXT */
 GdkGLProc
-gdk_gl_get_glVertexPointerListIBM (void)
+gdk_gl_get_glVertexAttribI4ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM == (GdkGLProc_glVertexPointerListIBM) -1)
-    _procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM =
-      (GdkGLProc_glVertexPointerListIBM) gdk_gl_get_proc_address ("glVertexPointerListIBM");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4ivEXT == (GdkGLProc_glVertexAttribI4ivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4ivEXT =
+      (GdkGLProc_glVertexAttribI4ivEXT) gdk_gl_get_proc_address ("glVertexAttribI4ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexPointerListIBM () - %s",
-               (_procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4ivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_IBM_vertex_array_lists.glVertexPointerListIBM);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4ivEXT);
 }
 
-/* Get GL_IBM_vertex_array_lists functions */
-GdkGL_GL_IBM_vertex_array_lists *
-gdk_gl_get_GL_IBM_vertex_array_lists (void)
+/* glVertexAttribI1uivEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribI1uivEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_IBM_vertex_array_lists");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI1uivEXT == (GdkGLProc_glVertexAttribI1uivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI1uivEXT =
+      (GdkGLProc_glVertexAttribI1uivEXT) gdk_gl_get_proc_address ("glVertexAttribI1uivEXT");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glColorPointerListIBM () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColorPointerListIBM () != NULL);
-          supported &= (gdk_gl_get_glEdgeFlagPointerListIBM () != NULL);
-          supported &= (gdk_gl_get_glFogCoordPointerListIBM () != NULL);
-          supported &= (gdk_gl_get_glIndexPointerListIBM () != NULL);
-          supported &= (gdk_gl_get_glNormalPointerListIBM () != NULL);
-          supported &= (gdk_gl_get_glTexCoordPointerListIBM () != NULL);
-          supported &= (gdk_gl_get_glVertexPointerListIBM () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribI1uivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI1uivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI1uivEXT);
+}
+
+/* glVertexAttribI2uivEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribI2uivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI2uivEXT == (GdkGLProc_glVertexAttribI2uivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI2uivEXT =
+      (GdkGLProc_glVertexAttribI2uivEXT) gdk_gl_get_proc_address ("glVertexAttribI2uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_IBM_vertex_array_lists () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI2uivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI2uivEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI2uivEXT);
+}
+
+/* glVertexAttribI3uivEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribI3uivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_IBM_vertex_array_lists;
-}
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI3uivEXT == (GdkGLProc_glVertexAttribI3uivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI3uivEXT =
+      (GdkGLProc_glVertexAttribI3uivEXT) gdk_gl_get_proc_address ("glVertexAttribI3uivEXT");
 
-/*
- * GL_3DFX_tbuffer
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribI3uivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI3uivEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_3DFX_tbuffer _procs_GL_3DFX_tbuffer = {
-  (GdkGLProc_glTbufferMask3DFX) -1
-};
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI3uivEXT);
+}
 
-/* glTbufferMask3DFX */
+/* glVertexAttribI4uivEXT */
 GdkGLProc
-gdk_gl_get_glTbufferMask3DFX (void)
+gdk_gl_get_glVertexAttribI4uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_3DFX_tbuffer.glTbufferMask3DFX == (GdkGLProc_glTbufferMask3DFX) -1)
-    _procs_GL_3DFX_tbuffer.glTbufferMask3DFX =
-      (GdkGLProc_glTbufferMask3DFX) gdk_gl_get_proc_address ("glTbufferMask3DFX");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4uivEXT == (GdkGLProc_glVertexAttribI4uivEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4uivEXT =
+      (GdkGLProc_glVertexAttribI4uivEXT) gdk_gl_get_proc_address ("glVertexAttribI4uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTbufferMask3DFX () - %s",
-               (_procs_GL_3DFX_tbuffer.glTbufferMask3DFX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4uivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_3DFX_tbuffer.glTbufferMask3DFX);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4uivEXT);
 }
 
-/* Get GL_3DFX_tbuffer functions */
-GdkGL_GL_3DFX_tbuffer *
-gdk_gl_get_GL_3DFX_tbuffer (void)
+/* glVertexAttribI4bvEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribI4bvEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_3DFX_tbuffer");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTbufferMask3DFX () != NULL);
-        }
-    }
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4bvEXT == (GdkGLProc_glVertexAttribI4bvEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4bvEXT =
+      (GdkGLProc_glVertexAttribI4bvEXT) gdk_gl_get_proc_address ("glVertexAttribI4bvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_3DFX_tbuffer () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4bvEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4bvEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4bvEXT);
+}
+
+/* glVertexAttribI4svEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribI4svEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_3DFX_tbuffer;
-}
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4svEXT == (GdkGLProc_glVertexAttribI4svEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4svEXT =
+      (GdkGLProc_glVertexAttribI4svEXT) gdk_gl_get_proc_address ("glVertexAttribI4svEXT");
 
-/*
- * GL_EXT_multisample
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVertexAttribI4svEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4svEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_EXT_multisample _procs_GL_EXT_multisample = {
-  (GdkGLProc_glSampleMaskEXT) -1,
-  (GdkGLProc_glSamplePatternEXT) -1
-};
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4svEXT);
+}
 
-/* glSampleMaskEXT */
+/* glVertexAttribI4ubvEXT */
 GdkGLProc
-gdk_gl_get_glSampleMaskEXT (void)
+gdk_gl_get_glVertexAttribI4ubvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_multisample.glSampleMaskEXT == (GdkGLProc_glSampleMaskEXT) -1)
-    _procs_GL_EXT_multisample.glSampleMaskEXT =
-      (GdkGLProc_glSampleMaskEXT) gdk_gl_get_proc_address ("glSampleMaskEXT");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4ubvEXT == (GdkGLProc_glVertexAttribI4ubvEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4ubvEXT =
+      (GdkGLProc_glVertexAttribI4ubvEXT) gdk_gl_get_proc_address ("glVertexAttribI4ubvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSampleMaskEXT () - %s",
-               (_procs_GL_EXT_multisample.glSampleMaskEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4ubvEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4ubvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_multisample.glSampleMaskEXT);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4ubvEXT);
 }
 
-/* glSamplePatternEXT */
+/* glVertexAttribI4usvEXT */
 GdkGLProc
-gdk_gl_get_glSamplePatternEXT (void)
+gdk_gl_get_glVertexAttribI4usvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_multisample.glSamplePatternEXT == (GdkGLProc_glSamplePatternEXT) -1)
-    _procs_GL_EXT_multisample.glSamplePatternEXT =
-      (GdkGLProc_glSamplePatternEXT) gdk_gl_get_proc_address ("glSamplePatternEXT");
+  if (_procs_GL_NV_vertex_program4.glVertexAttribI4usvEXT == (GdkGLProc_glVertexAttribI4usvEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribI4usvEXT =
+      (GdkGLProc_glVertexAttribI4usvEXT) gdk_gl_get_proc_address ("glVertexAttribI4usvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSamplePatternEXT () - %s",
-               (_procs_GL_EXT_multisample.glSamplePatternEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribI4usvEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribI4usvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_multisample.glSamplePatternEXT);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribI4usvEXT);
 }
 
-/* Get GL_EXT_multisample functions */
-GdkGL_GL_EXT_multisample *
-gdk_gl_get_GL_EXT_multisample (void)
+/* glVertexAttribIPointerEXT */
+GdkGLProc
+gdk_gl_get_glVertexAttribIPointerEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_multisample");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glSampleMaskEXT () != NULL);
-          supported &= (gdk_gl_get_glSamplePatternEXT () != NULL);
-        }
-    }
+  if (_procs_GL_NV_vertex_program4.glVertexAttribIPointerEXT == (GdkGLProc_glVertexAttribIPointerEXT) -1)
+    _procs_GL_NV_vertex_program4.glVertexAttribIPointerEXT =
+      (GdkGLProc_glVertexAttribIPointerEXT) gdk_gl_get_proc_address ("glVertexAttribIPointerEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_multisample () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribIPointerEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glVertexAttribIPointerEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glVertexAttribIPointerEXT);
+}
+
+/* glGetVertexAttribIivEXT */
+GdkGLProc
+gdk_gl_get_glGetVertexAttribIivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_EXT_multisample;
-}
+  if (_procs_GL_NV_vertex_program4.glGetVertexAttribIivEXT == (GdkGLProc_glGetVertexAttribIivEXT) -1)
+    _procs_GL_NV_vertex_program4.glGetVertexAttribIivEXT =
+      (GdkGLProc_glGetVertexAttribIivEXT) gdk_gl_get_proc_address ("glGetVertexAttribIivEXT");
 
-/*
- * GL_SGIS_texture_color_mask
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVertexAttribIivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glGetVertexAttribIivEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_SGIS_texture_color_mask _procs_GL_SGIS_texture_color_mask = {
-  (GdkGLProc_glTextureColorMaskSGIS) -1
-};
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glGetVertexAttribIivEXT);
+}
 
-/* glTextureColorMaskSGIS */
+/* glGetVertexAttribIuivEXT */
 GdkGLProc
-gdk_gl_get_glTextureColorMaskSGIS (void)
+gdk_gl_get_glGetVertexAttribIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS == (GdkGLProc_glTextureColorMaskSGIS) -1)
-    _procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS =
-      (GdkGLProc_glTextureColorMaskSGIS) gdk_gl_get_proc_address ("glTextureColorMaskSGIS");
+  if (_procs_GL_NV_vertex_program4.glGetVertexAttribIuivEXT == (GdkGLProc_glGetVertexAttribIuivEXT) -1)
+    _procs_GL_NV_vertex_program4.glGetVertexAttribIuivEXT =
+      (GdkGLProc_glGetVertexAttribIuivEXT) gdk_gl_get_proc_address ("glGetVertexAttribIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTextureColorMaskSGIS () - %s",
-               (_procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVertexAttribIuivEXT () - %s",
+               (_procs_GL_NV_vertex_program4.glGetVertexAttribIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIS_texture_color_mask.glTextureColorMaskSGIS);
+  return (GdkGLProc) (_procs_GL_NV_vertex_program4.glGetVertexAttribIuivEXT);
 }
 
-/* Get GL_SGIS_texture_color_mask functions */
-GdkGL_GL_SGIS_texture_color_mask *
-gdk_gl_get_GL_SGIS_texture_color_mask (void)
+/* Get GL_NV_vertex_program4 functions */
+GdkGL_GL_NV_vertex_program4 *
+gdk_gl_get_GL_NV_vertex_program4 (void)
 {
   static gint supported = -1;
 
@@ -14727,222 +30609,265 @@ gdk_gl_get_GL_SGIS_texture_color_mask (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_SGIS_texture_color_mask");
+      supported = gdk_gl_query_gl_extension ("GL_NV_vertex_program4");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glTextureColorMaskSGIS () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI1iEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI2iEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI3iEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4iEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI1uiEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI2uiEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI3uiEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4uiEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI1ivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI2ivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI3ivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4ivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI1uivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI2uivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI3uivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4uivEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4bvEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4svEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4ubvEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribI4usvEXT () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribIPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribIivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetVertexAttribIuivEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIS_texture_color_mask () - %s",
+    g_message (" - gdk_gl_get_GL_NV_vertex_program4 () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_SGIS_texture_color_mask;
+  return &_procs_GL_NV_vertex_program4;
 }
 
 /*
- * GL_SGIX_igloo_interface
+ * GL_EXT_gpu_shader4
  */
 
-static GdkGL_GL_SGIX_igloo_interface _procs_GL_SGIX_igloo_interface = {
-  (GdkGLProc_glIglooInterfaceSGIX) -1
+static GdkGL_GL_EXT_gpu_shader4 _procs_GL_EXT_gpu_shader4 = {
+  (GdkGLProc_glGetUniformuivEXT) -1,
+  (GdkGLProc_glBindFragDataLocationEXT) -1,
+  (GdkGLProc_glGetFragDataLocationEXT) -1,
+  (GdkGLProc_glUniform1uiEXT) -1,
+  (GdkGLProc_glUniform2uiEXT) -1,
+  (GdkGLProc_glUniform3uiEXT) -1,
+  (GdkGLProc_glUniform4uiEXT) -1,
+  (GdkGLProc_glUniform1uivEXT) -1,
+  (GdkGLProc_glUniform2uivEXT) -1,
+  (GdkGLProc_glUniform3uivEXT) -1,
+  (GdkGLProc_glUniform4uivEXT) -1
 };
 
-/* glIglooInterfaceSGIX */
+/* glGetUniformuivEXT */
 GdkGLProc
-gdk_gl_get_glIglooInterfaceSGIX (void)
+gdk_gl_get_glGetUniformuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX == (GdkGLProc_glIglooInterfaceSGIX) -1)
-    _procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX =
-      (GdkGLProc_glIglooInterfaceSGIX) gdk_gl_get_proc_address ("glIglooInterfaceSGIX");
+  if (_procs_GL_EXT_gpu_shader4.glGetUniformuivEXT == (GdkGLProc_glGetUniformuivEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glGetUniformuivEXT =
+      (GdkGLProc_glGetUniformuivEXT) gdk_gl_get_proc_address ("glGetUniformuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIglooInterfaceSGIX () - %s",
-               (_procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetUniformuivEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glGetUniformuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SGIX_igloo_interface.glIglooInterfaceSGIX);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glGetUniformuivEXT);
 }
 
-/* Get GL_SGIX_igloo_interface functions */
-GdkGL_GL_SGIX_igloo_interface *
-gdk_gl_get_GL_SGIX_igloo_interface (void)
+/* glBindFragDataLocationEXT */
+GdkGLProc
+gdk_gl_get_glBindFragDataLocationEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SGIX_igloo_interface");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glIglooInterfaceSGIX () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_gpu_shader4.glBindFragDataLocationEXT == (GdkGLProc_glBindFragDataLocationEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glBindFragDataLocationEXT =
+      (GdkGLProc_glBindFragDataLocationEXT) gdk_gl_get_proc_address ("glBindFragDataLocationEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SGIX_igloo_interface () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindFragDataLocationEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glBindFragDataLocationEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glBindFragDataLocationEXT);
+}
+
+/* glGetFragDataLocationEXT */
+GdkGLProc
+gdk_gl_get_glGetFragDataLocationEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_SGIX_igloo_interface;
+  if (_procs_GL_EXT_gpu_shader4.glGetFragDataLocationEXT == (GdkGLProc_glGetFragDataLocationEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glGetFragDataLocationEXT =
+      (GdkGLProc_glGetFragDataLocationEXT) gdk_gl_get_proc_address ("glGetFragDataLocationEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetFragDataLocationEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glGetFragDataLocationEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glGetFragDataLocationEXT);
 }
 
-/*
- * GL_NV_fence
- */
+/* glUniform1uiEXT */
+GdkGLProc
+gdk_gl_get_glUniform1uiEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_NV_fence _procs_GL_NV_fence = {
-  (GdkGLProc_glDeleteFencesNV) -1,
-  (GdkGLProc_glGenFencesNV) -1,
-  (GdkGLProc_glIsFenceNV) -1,
-  (GdkGLProc_glTestFenceNV) -1,
-  (GdkGLProc_glGetFenceivNV) -1,
-  (GdkGLProc_glFinishFenceNV) -1,
-  (GdkGLProc_glSetFenceNV) -1
-};
+  if (_procs_GL_EXT_gpu_shader4.glUniform1uiEXT == (GdkGLProc_glUniform1uiEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform1uiEXT =
+      (GdkGLProc_glUniform1uiEXT) gdk_gl_get_proc_address ("glUniform1uiEXT");
 
-/* glDeleteFencesNV */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniform1uiEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform1uiEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform1uiEXT);
+}
+
+/* glUniform2uiEXT */
 GdkGLProc
-gdk_gl_get_glDeleteFencesNV (void)
+gdk_gl_get_glUniform2uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fence.glDeleteFencesNV == (GdkGLProc_glDeleteFencesNV) -1)
-    _procs_GL_NV_fence.glDeleteFencesNV =
-      (GdkGLProc_glDeleteFencesNV) gdk_gl_get_proc_address ("glDeleteFencesNV");
+  if (_procs_GL_EXT_gpu_shader4.glUniform2uiEXT == (GdkGLProc_glUniform2uiEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform2uiEXT =
+      (GdkGLProc_glUniform2uiEXT) gdk_gl_get_proc_address ("glUniform2uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteFencesNV () - %s",
-               (_procs_GL_NV_fence.glDeleteFencesNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2uiEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform2uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fence.glDeleteFencesNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform2uiEXT);
 }
 
-/* glGenFencesNV */
+/* glUniform3uiEXT */
 GdkGLProc
-gdk_gl_get_glGenFencesNV (void)
+gdk_gl_get_glUniform3uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fence.glGenFencesNV == (GdkGLProc_glGenFencesNV) -1)
-    _procs_GL_NV_fence.glGenFencesNV =
-      (GdkGLProc_glGenFencesNV) gdk_gl_get_proc_address ("glGenFencesNV");
+  if (_procs_GL_EXT_gpu_shader4.glUniform3uiEXT == (GdkGLProc_glUniform3uiEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform3uiEXT =
+      (GdkGLProc_glUniform3uiEXT) gdk_gl_get_proc_address ("glUniform3uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenFencesNV () - %s",
-               (_procs_GL_NV_fence.glGenFencesNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform3uiEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform3uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fence.glGenFencesNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform3uiEXT);
 }
 
-/* glIsFenceNV */
+/* glUniform4uiEXT */
 GdkGLProc
-gdk_gl_get_glIsFenceNV (void)
+gdk_gl_get_glUniform4uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fence.glIsFenceNV == (GdkGLProc_glIsFenceNV) -1)
-    _procs_GL_NV_fence.glIsFenceNV =
-      (GdkGLProc_glIsFenceNV) gdk_gl_get_proc_address ("glIsFenceNV");
+  if (_procs_GL_EXT_gpu_shader4.glUniform4uiEXT == (GdkGLProc_glUniform4uiEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform4uiEXT =
+      (GdkGLProc_glUniform4uiEXT) gdk_gl_get_proc_address ("glUniform4uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsFenceNV () - %s",
-               (_procs_GL_NV_fence.glIsFenceNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4uiEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform4uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fence.glIsFenceNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform4uiEXT);
 }
 
-/* glTestFenceNV */
+/* glUniform1uivEXT */
 GdkGLProc
-gdk_gl_get_glTestFenceNV (void)
+gdk_gl_get_glUniform1uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fence.glTestFenceNV == (GdkGLProc_glTestFenceNV) -1)
-    _procs_GL_NV_fence.glTestFenceNV =
-      (GdkGLProc_glTestFenceNV) gdk_gl_get_proc_address ("glTestFenceNV");
+  if (_procs_GL_EXT_gpu_shader4.glUniform1uivEXT == (GdkGLProc_glUniform1uivEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform1uivEXT =
+      (GdkGLProc_glUniform1uivEXT) gdk_gl_get_proc_address ("glUniform1uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTestFenceNV () - %s",
-               (_procs_GL_NV_fence.glTestFenceNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform1uivEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform1uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fence.glTestFenceNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform1uivEXT);
 }
 
-/* glGetFenceivNV */
+/* glUniform2uivEXT */
 GdkGLProc
-gdk_gl_get_glGetFenceivNV (void)
+gdk_gl_get_glUniform2uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fence.glGetFenceivNV == (GdkGLProc_glGetFenceivNV) -1)
-    _procs_GL_NV_fence.glGetFenceivNV =
-      (GdkGLProc_glGetFenceivNV) gdk_gl_get_proc_address ("glGetFenceivNV");
+  if (_procs_GL_EXT_gpu_shader4.glUniform2uivEXT == (GdkGLProc_glUniform2uivEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform2uivEXT =
+      (GdkGLProc_glUniform2uivEXT) gdk_gl_get_proc_address ("glUniform2uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetFenceivNV () - %s",
-               (_procs_GL_NV_fence.glGetFenceivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform2uivEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform2uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fence.glGetFenceivNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform2uivEXT);
 }
 
-/* glFinishFenceNV */
+/* glUniform3uivEXT */
 GdkGLProc
-gdk_gl_get_glFinishFenceNV (void)
+gdk_gl_get_glUniform3uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fence.glFinishFenceNV == (GdkGLProc_glFinishFenceNV) -1)
-    _procs_GL_NV_fence.glFinishFenceNV =
-      (GdkGLProc_glFinishFenceNV) gdk_gl_get_proc_address ("glFinishFenceNV");
+  if (_procs_GL_EXT_gpu_shader4.glUniform3uivEXT == (GdkGLProc_glUniform3uivEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform3uivEXT =
+      (GdkGLProc_glUniform3uivEXT) gdk_gl_get_proc_address ("glUniform3uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFinishFenceNV () - %s",
-               (_procs_GL_NV_fence.glFinishFenceNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform3uivEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform3uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fence.glFinishFenceNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform3uivEXT);
 }
 
-/* glSetFenceNV */
+/* glUniform4uivEXT */
 GdkGLProc
-gdk_gl_get_glSetFenceNV (void)
+gdk_gl_get_glUniform4uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fence.glSetFenceNV == (GdkGLProc_glSetFenceNV) -1)
-    _procs_GL_NV_fence.glSetFenceNV =
-      (GdkGLProc_glSetFenceNV) gdk_gl_get_proc_address ("glSetFenceNV");
+  if (_procs_GL_EXT_gpu_shader4.glUniform4uivEXT == (GdkGLProc_glUniform4uivEXT) -1)
+    _procs_GL_EXT_gpu_shader4.glUniform4uivEXT =
+      (GdkGLProc_glUniform4uivEXT) gdk_gl_get_proc_address ("glUniform4uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSetFenceNV () - %s",
-               (_procs_GL_NV_fence.glSetFenceNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniform4uivEXT () - %s",
+               (_procs_GL_EXT_gpu_shader4.glUniform4uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fence.glSetFenceNV);
+  return (GdkGLProc) (_procs_GL_EXT_gpu_shader4.glUniform4uivEXT);
 }
 
-/* Get GL_NV_fence functions */
-GdkGL_GL_NV_fence *
-gdk_gl_get_GL_NV_fence (void)
+/* Get GL_EXT_gpu_shader4 functions */
+GdkGL_GL_EXT_gpu_shader4 *
+gdk_gl_get_GL_EXT_gpu_shader4 (void)
 {
   static gint supported = -1;
 
@@ -14951,211 +30876,231 @@ gdk_gl_get_GL_NV_fence (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_fence");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_gpu_shader4");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glDeleteFencesNV () != NULL);
-          supported &= (gdk_gl_get_glGenFencesNV () != NULL);
-          supported &= (gdk_gl_get_glIsFenceNV () != NULL);
-          supported &= (gdk_gl_get_glTestFenceNV () != NULL);
-          supported &= (gdk_gl_get_glGetFenceivNV () != NULL);
-          supported &= (gdk_gl_get_glFinishFenceNV () != NULL);
-          supported &= (gdk_gl_get_glSetFenceNV () != NULL);
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetUniformuivEXT () != NULL);
+          supported &= (gdk_gl_get_glBindFragDataLocationEXT () != NULL);
+          supported &= (gdk_gl_get_glGetFragDataLocationEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform1uiEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform2uiEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform3uiEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform4uiEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform1uivEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform2uivEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform3uivEXT () != NULL);
+          supported &= (gdk_gl_get_glUniform4uivEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_fence () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_gpu_shader4 () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_fence;
+  return &_procs_GL_EXT_gpu_shader4;
 }
 
 /*
- * GL_NV_evaluators
+ * GL_EXT_draw_instanced
  */
 
-static GdkGL_GL_NV_evaluators _procs_GL_NV_evaluators = {
-  (GdkGLProc_glMapControlPointsNV) -1,
-  (GdkGLProc_glMapParameterivNV) -1,
-  (GdkGLProc_glMapParameterfvNV) -1,
-  (GdkGLProc_glGetMapControlPointsNV) -1,
-  (GdkGLProc_glGetMapParameterivNV) -1,
-  (GdkGLProc_glGetMapParameterfvNV) -1,
-  (GdkGLProc_glGetMapAttribParameterivNV) -1,
-  (GdkGLProc_glGetMapAttribParameterfvNV) -1,
-  (GdkGLProc_glEvalMapsNV) -1
+static GdkGL_GL_EXT_draw_instanced _procs_GL_EXT_draw_instanced = {
+  (GdkGLProc_glDrawArraysInstancedEXT) -1,
+  (GdkGLProc_glDrawElementsInstancedEXT) -1
 };
 
-/* glMapControlPointsNV */
+/* glDrawArraysInstancedEXT */
 GdkGLProc
-gdk_gl_get_glMapControlPointsNV (void)
+gdk_gl_get_glDrawArraysInstancedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glMapControlPointsNV == (GdkGLProc_glMapControlPointsNV) -1)
-    _procs_GL_NV_evaluators.glMapControlPointsNV =
-      (GdkGLProc_glMapControlPointsNV) gdk_gl_get_proc_address ("glMapControlPointsNV");
+  if (_procs_GL_EXT_draw_instanced.glDrawArraysInstancedEXT == (GdkGLProc_glDrawArraysInstancedEXT) -1)
+    _procs_GL_EXT_draw_instanced.glDrawArraysInstancedEXT =
+      (GdkGLProc_glDrawArraysInstancedEXT) gdk_gl_get_proc_address ("glDrawArraysInstancedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapControlPointsNV () - %s",
-               (_procs_GL_NV_evaluators.glMapControlPointsNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawArraysInstancedEXT () - %s",
+               (_procs_GL_EXT_draw_instanced.glDrawArraysInstancedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glMapControlPointsNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_instanced.glDrawArraysInstancedEXT);
 }
 
-/* glMapParameterivNV */
+/* glDrawElementsInstancedEXT */
 GdkGLProc
-gdk_gl_get_glMapParameterivNV (void)
+gdk_gl_get_glDrawElementsInstancedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glMapParameterivNV == (GdkGLProc_glMapParameterivNV) -1)
-    _procs_GL_NV_evaluators.glMapParameterivNV =
-      (GdkGLProc_glMapParameterivNV) gdk_gl_get_proc_address ("glMapParameterivNV");
+  if (_procs_GL_EXT_draw_instanced.glDrawElementsInstancedEXT == (GdkGLProc_glDrawElementsInstancedEXT) -1)
+    _procs_GL_EXT_draw_instanced.glDrawElementsInstancedEXT =
+      (GdkGLProc_glDrawElementsInstancedEXT) gdk_gl_get_proc_address ("glDrawElementsInstancedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapParameterivNV () - %s",
-               (_procs_GL_NV_evaluators.glMapParameterivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawElementsInstancedEXT () - %s",
+               (_procs_GL_EXT_draw_instanced.glDrawElementsInstancedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glMapParameterivNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_instanced.glDrawElementsInstancedEXT);
 }
 
-/* glMapParameterfvNV */
-GdkGLProc
-gdk_gl_get_glMapParameterfvNV (void)
+/* Get GL_EXT_draw_instanced functions */
+GdkGL_GL_EXT_draw_instanced *
+gdk_gl_get_GL_EXT_draw_instanced (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glMapParameterfvNV == (GdkGLProc_glMapParameterfvNV) -1)
-    _procs_GL_NV_evaluators.glMapParameterfvNV =
-      (GdkGLProc_glMapParameterfvNV) gdk_gl_get_proc_address ("glMapParameterfvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_draw_instanced");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapParameterfvNV () - %s",
-               (_procs_GL_NV_evaluators.glMapParameterfvNV) ? "supported" : "not supported"));
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glDrawArraysInstancedEXT () != NULL);
+          supported &= (gdk_gl_get_glDrawElementsInstancedEXT () != NULL);
+        }
+    }
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glMapParameterfvNV);
-}
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_EXT_draw_instanced () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glGetMapControlPointsNV */
-GdkGLProc
-gdk_gl_get_glGetMapControlPointsNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glGetMapControlPointsNV == (GdkGLProc_glGetMapControlPointsNV) -1)
-    _procs_GL_NV_evaluators.glGetMapControlPointsNV =
-      (GdkGLProc_glGetMapControlPointsNV) gdk_gl_get_proc_address ("glGetMapControlPointsNV");
+  return &_procs_GL_EXT_draw_instanced;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMapControlPointsNV () - %s",
-               (_procs_GL_NV_evaluators.glGetMapControlPointsNV) ? "supported" : "not supported"));
+/*
+ * GL_EXT_texture_buffer_object
+ */
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapControlPointsNV);
-}
+static GdkGL_GL_EXT_texture_buffer_object _procs_GL_EXT_texture_buffer_object = {
+  (GdkGLProc_glTexBufferEXT) -1
+};
 
-/* glGetMapParameterivNV */
+/* glTexBufferEXT */
 GdkGLProc
-gdk_gl_get_glGetMapParameterivNV (void)
+gdk_gl_get_glTexBufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glGetMapParameterivNV == (GdkGLProc_glGetMapParameterivNV) -1)
-    _procs_GL_NV_evaluators.glGetMapParameterivNV =
-      (GdkGLProc_glGetMapParameterivNV) gdk_gl_get_proc_address ("glGetMapParameterivNV");
+  if (_procs_GL_EXT_texture_buffer_object.glTexBufferEXT == (GdkGLProc_glTexBufferEXT) -1)
+    _procs_GL_EXT_texture_buffer_object.glTexBufferEXT =
+      (GdkGLProc_glTexBufferEXT) gdk_gl_get_proc_address ("glTexBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMapParameterivNV () - %s",
-               (_procs_GL_NV_evaluators.glGetMapParameterivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexBufferEXT () - %s",
+               (_procs_GL_EXT_texture_buffer_object.glTexBufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapParameterivNV);
+  return (GdkGLProc) (_procs_GL_EXT_texture_buffer_object.glTexBufferEXT);
 }
 
-/* glGetMapParameterfvNV */
-GdkGLProc
-gdk_gl_get_glGetMapParameterfvNV (void)
+/* Get GL_EXT_texture_buffer_object functions */
+GdkGL_GL_EXT_texture_buffer_object *
+gdk_gl_get_GL_EXT_texture_buffer_object (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glGetMapParameterfvNV == (GdkGLProc_glGetMapParameterfvNV) -1)
-    _procs_GL_NV_evaluators.glGetMapParameterfvNV =
-      (GdkGLProc_glGetMapParameterfvNV) gdk_gl_get_proc_address ("glGetMapParameterfvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_texture_buffer_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexBufferEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMapParameterfvNV () - %s",
-               (_procs_GL_NV_evaluators.glGetMapParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_texture_buffer_object () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapParameterfvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_texture_buffer_object;
 }
 
-/* glGetMapAttribParameterivNV */
+/*
+ * GL_NV_depth_buffer_float
+ */
+
+static GdkGL_GL_NV_depth_buffer_float _procs_GL_NV_depth_buffer_float = {
+  (GdkGLProc_glDepthRangedNV) -1,
+  (GdkGLProc_glClearDepthdNV) -1,
+  (GdkGLProc_glDepthBoundsdNV) -1
+};
+
+/* glDepthRangedNV */
 GdkGLProc
-gdk_gl_get_glGetMapAttribParameterivNV (void)
+gdk_gl_get_glDepthRangedNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glGetMapAttribParameterivNV == (GdkGLProc_glGetMapAttribParameterivNV) -1)
-    _procs_GL_NV_evaluators.glGetMapAttribParameterivNV =
-      (GdkGLProc_glGetMapAttribParameterivNV) gdk_gl_get_proc_address ("glGetMapAttribParameterivNV");
+  if (_procs_GL_NV_depth_buffer_float.glDepthRangedNV == (GdkGLProc_glDepthRangedNV) -1)
+    _procs_GL_NV_depth_buffer_float.glDepthRangedNV =
+      (GdkGLProc_glDepthRangedNV) gdk_gl_get_proc_address ("glDepthRangedNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMapAttribParameterivNV () - %s",
-               (_procs_GL_NV_evaluators.glGetMapAttribParameterivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDepthRangedNV () - %s",
+               (_procs_GL_NV_depth_buffer_float.glDepthRangedNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapAttribParameterivNV);
+  return (GdkGLProc) (_procs_GL_NV_depth_buffer_float.glDepthRangedNV);
 }
 
-/* glGetMapAttribParameterfvNV */
+/* glClearDepthdNV */
 GdkGLProc
-gdk_gl_get_glGetMapAttribParameterfvNV (void)
+gdk_gl_get_glClearDepthdNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glGetMapAttribParameterfvNV == (GdkGLProc_glGetMapAttribParameterfvNV) -1)
-    _procs_GL_NV_evaluators.glGetMapAttribParameterfvNV =
-      (GdkGLProc_glGetMapAttribParameterfvNV) gdk_gl_get_proc_address ("glGetMapAttribParameterfvNV");
+  if (_procs_GL_NV_depth_buffer_float.glClearDepthdNV == (GdkGLProc_glClearDepthdNV) -1)
+    _procs_GL_NV_depth_buffer_float.glClearDepthdNV =
+      (GdkGLProc_glClearDepthdNV) gdk_gl_get_proc_address ("glClearDepthdNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetMapAttribParameterfvNV () - %s",
-               (_procs_GL_NV_evaluators.glGetMapAttribParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClearDepthdNV () - %s",
+               (_procs_GL_NV_depth_buffer_float.glClearDepthdNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glGetMapAttribParameterfvNV);
+  return (GdkGLProc) (_procs_GL_NV_depth_buffer_float.glClearDepthdNV);
 }
 
-/* glEvalMapsNV */
+/* glDepthBoundsdNV */
 GdkGLProc
-gdk_gl_get_glEvalMapsNV (void)
+gdk_gl_get_glDepthBoundsdNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_evaluators.glEvalMapsNV == (GdkGLProc_glEvalMapsNV) -1)
-    _procs_GL_NV_evaluators.glEvalMapsNV =
-      (GdkGLProc_glEvalMapsNV) gdk_gl_get_proc_address ("glEvalMapsNV");
+  if (_procs_GL_NV_depth_buffer_float.glDepthBoundsdNV == (GdkGLProc_glDepthBoundsdNV) -1)
+    _procs_GL_NV_depth_buffer_float.glDepthBoundsdNV =
+      (GdkGLProc_glDepthBoundsdNV) gdk_gl_get_proc_address ("glDepthBoundsdNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEvalMapsNV () - %s",
-               (_procs_GL_NV_evaluators.glEvalMapsNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDepthBoundsdNV () - %s",
+               (_procs_GL_NV_depth_buffer_float.glDepthBoundsdNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_evaluators.glEvalMapsNV);
+  return (GdkGLProc) (_procs_GL_NV_depth_buffer_float.glDepthBoundsdNV);
 }
 
-/* Get GL_NV_evaluators functions */
-GdkGL_GL_NV_evaluators *
-gdk_gl_get_GL_NV_evaluators (void)
+/* Get GL_NV_depth_buffer_float functions */
+GdkGL_GL_NV_depth_buffer_float *
+gdk_gl_get_GL_NV_depth_buffer_float (void)
 {
   static gint supported = -1;
 
@@ -15164,80 +31109,55 @@ gdk_gl_get_GL_NV_evaluators (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_evaluators");
+      supported = gdk_gl_query_gl_extension ("GL_NV_depth_buffer_float");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glMapControlPointsNV () != NULL);
-          supported &= (gdk_gl_get_glMapParameterivNV () != NULL);
-          supported &= (gdk_gl_get_glMapParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetMapControlPointsNV () != NULL);
-          supported &= (gdk_gl_get_glGetMapParameterivNV () != NULL);
-          supported &= (gdk_gl_get_glGetMapParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetMapAttribParameterivNV () != NULL);
-          supported &= (gdk_gl_get_glGetMapAttribParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glEvalMapsNV () != NULL);
+          supported &= (gdk_gl_get_glDepthRangedNV () != NULL);
+          supported &= (gdk_gl_get_glClearDepthdNV () != NULL);
+          supported &= (gdk_gl_get_glDepthBoundsdNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_evaluators () - %s",
+    g_message (" - gdk_gl_get_GL_NV_depth_buffer_float () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_evaluators;
+  return &_procs_GL_NV_depth_buffer_float;
 }
 
 /*
- * GL_NV_register_combiners2
+ * GL_NV_framebuffer_multisample_coverage
  */
 
-static GdkGL_GL_NV_register_combiners2 _procs_GL_NV_register_combiners2 = {
-  (GdkGLProc_glCombinerStageParameterfvNV) -1,
-  (GdkGLProc_glGetCombinerStageParameterfvNV) -1
+static GdkGL_GL_NV_framebuffer_multisample_coverage _procs_GL_NV_framebuffer_multisample_coverage = {
+  (GdkGLProc_glRenderbufferStorageMultisampleCoverageNV) -1
 };
 
-/* glCombinerStageParameterfvNV */
-GdkGLProc
-gdk_gl_get_glCombinerStageParameterfvNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV == (GdkGLProc_glCombinerStageParameterfvNV) -1)
-    _procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV =
-      (GdkGLProc_glCombinerStageParameterfvNV) gdk_gl_get_proc_address ("glCombinerStageParameterfvNV");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glCombinerStageParameterfvNV () - %s",
-               (_procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_NV_register_combiners2.glCombinerStageParameterfvNV);
-}
-
-/* glGetCombinerStageParameterfvNV */
+/* glRenderbufferStorageMultisampleCoverageNV */
 GdkGLProc
-gdk_gl_get_glGetCombinerStageParameterfvNV (void)
+gdk_gl_get_glRenderbufferStorageMultisampleCoverageNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV == (GdkGLProc_glGetCombinerStageParameterfvNV) -1)
-    _procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV =
-      (GdkGLProc_glGetCombinerStageParameterfvNV) gdk_gl_get_proc_address ("glGetCombinerStageParameterfvNV");
+  if (_procs_GL_NV_framebuffer_multisample_coverage.glRenderbufferStorageMultisampleCoverageNV == (GdkGLProc_glRenderbufferStorageMultisampleCoverageNV) -1)
+    _procs_GL_NV_framebuffer_multisample_coverage.glRenderbufferStorageMultisampleCoverageNV =
+      (GdkGLProc_glRenderbufferStorageMultisampleCoverageNV) gdk_gl_get_proc_address ("glRenderbufferStorageMultisampleCoverageNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetCombinerStageParameterfvNV () - %s",
-               (_procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glRenderbufferStorageMultisampleCoverageNV () - %s",
+               (_procs_GL_NV_framebuffer_multisample_coverage.glRenderbufferStorageMultisampleCoverageNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_register_combiners2.glGetCombinerStageParameterfvNV);
+  return (GdkGLProc) (_procs_GL_NV_framebuffer_multisample_coverage.glRenderbufferStorageMultisampleCoverageNV);
 }
 
-/* Get GL_NV_register_combiners2 functions */
-GdkGL_GL_NV_register_combiners2 *
-gdk_gl_get_GL_NV_register_combiners2 (void)
+/* Get GL_NV_framebuffer_multisample_coverage functions */
+GdkGL_GL_NV_framebuffer_multisample_coverage *
+gdk_gl_get_GL_NV_framebuffer_multisample_coverage (void)
 {
   static gint supported = -1;
 
@@ -15246,4801 +31166,4783 @@ gdk_gl_get_GL_NV_register_combiners2 (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_register_combiners2");
+      supported = gdk_gl_query_gl_extension ("GL_NV_framebuffer_multisample_coverage");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glCombinerStageParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetCombinerStageParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glRenderbufferStorageMultisampleCoverageNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_register_combiners2 () - %s",
+    g_message (" - gdk_gl_get_GL_NV_framebuffer_multisample_coverage () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_register_combiners2;
+  return &_procs_GL_NV_framebuffer_multisample_coverage;
 }
 
 /*
- * GL_NV_vertex_program
+ * GL_NV_parameter_buffer_object
  */
 
-static GdkGL_GL_NV_vertex_program _procs_GL_NV_vertex_program = {
-  (GdkGLProc_glAreProgramsResidentNV) -1,
-  (GdkGLProc_glBindProgramNV) -1,
-  (GdkGLProc_glDeleteProgramsNV) -1,
-  (GdkGLProc_glExecuteProgramNV) -1,
-  (GdkGLProc_glGenProgramsNV) -1,
-  (GdkGLProc_glGetProgramParameterdvNV) -1,
-  (GdkGLProc_glGetProgramParameterfvNV) -1,
-  (GdkGLProc_glGetProgramivNV) -1,
-  (GdkGLProc_glGetProgramStringNV) -1,
-  (GdkGLProc_glGetTrackMatrixivNV) -1,
-  (GdkGLProc_glGetVertexAttribdvNV) -1,
-  (GdkGLProc_glGetVertexAttribfvNV) -1,
-  (GdkGLProc_glGetVertexAttribivNV) -1,
-  (GdkGLProc_glGetVertexAttribPointervNV) -1,
-  (GdkGLProc_glIsProgramNV) -1,
-  (GdkGLProc_glLoadProgramNV) -1,
-  (GdkGLProc_glProgramParameter4dNV) -1,
-  (GdkGLProc_glProgramParameter4dvNV) -1,
-  (GdkGLProc_glProgramParameter4fNV) -1,
-  (GdkGLProc_glProgramParameter4fvNV) -1,
-  (GdkGLProc_glProgramParameters4dvNV) -1,
-  (GdkGLProc_glProgramParameters4fvNV) -1,
-  (GdkGLProc_glRequestResidentProgramsNV) -1,
-  (GdkGLProc_glTrackMatrixNV) -1,
-  (GdkGLProc_glVertexAttribPointerNV) -1,
-  (GdkGLProc_glVertexAttrib1dNV) -1,
-  (GdkGLProc_glVertexAttrib1dvNV) -1,
-  (GdkGLProc_glVertexAttrib1fNV) -1,
-  (GdkGLProc_glVertexAttrib1fvNV) -1,
-  (GdkGLProc_glVertexAttrib1sNV) -1,
-  (GdkGLProc_glVertexAttrib1svNV) -1,
-  (GdkGLProc_glVertexAttrib2dNV) -1,
-  (GdkGLProc_glVertexAttrib2dvNV) -1,
-  (GdkGLProc_glVertexAttrib2fNV) -1,
-  (GdkGLProc_glVertexAttrib2fvNV) -1,
-  (GdkGLProc_glVertexAttrib2sNV) -1,
-  (GdkGLProc_glVertexAttrib2svNV) -1,
-  (GdkGLProc_glVertexAttrib3dNV) -1,
-  (GdkGLProc_glVertexAttrib3dvNV) -1,
-  (GdkGLProc_glVertexAttrib3fNV) -1,
-  (GdkGLProc_glVertexAttrib3fvNV) -1,
-  (GdkGLProc_glVertexAttrib3sNV) -1,
-  (GdkGLProc_glVertexAttrib3svNV) -1,
-  (GdkGLProc_glVertexAttrib4dNV) -1,
-  (GdkGLProc_glVertexAttrib4dvNV) -1,
-  (GdkGLProc_glVertexAttrib4fNV) -1,
-  (GdkGLProc_glVertexAttrib4fvNV) -1,
-  (GdkGLProc_glVertexAttrib4sNV) -1,
-  (GdkGLProc_glVertexAttrib4svNV) -1,
-  (GdkGLProc_glVertexAttrib4ubNV) -1,
-  (GdkGLProc_glVertexAttrib4ubvNV) -1,
-  (GdkGLProc_glVertexAttribs1dvNV) -1,
-  (GdkGLProc_glVertexAttribs1fvNV) -1,
-  (GdkGLProc_glVertexAttribs1svNV) -1,
-  (GdkGLProc_glVertexAttribs2dvNV) -1,
-  (GdkGLProc_glVertexAttribs2fvNV) -1,
-  (GdkGLProc_glVertexAttribs2svNV) -1,
-  (GdkGLProc_glVertexAttribs3dvNV) -1,
-  (GdkGLProc_glVertexAttribs3fvNV) -1,
-  (GdkGLProc_glVertexAttribs3svNV) -1,
-  (GdkGLProc_glVertexAttribs4dvNV) -1,
-  (GdkGLProc_glVertexAttribs4fvNV) -1,
-  (GdkGLProc_glVertexAttribs4svNV) -1,
-  (GdkGLProc_glVertexAttribs4ubvNV) -1
+static GdkGL_GL_NV_parameter_buffer_object _procs_GL_NV_parameter_buffer_object = {
+  (GdkGLProc_glProgramBufferParametersfvNV) -1,
+  (GdkGLProc_glProgramBufferParametersIivNV) -1,
+  (GdkGLProc_glProgramBufferParametersIuivNV) -1
 };
 
-/* glAreProgramsResidentNV */
+/* glProgramBufferParametersfvNV */
+GdkGLProc
+gdk_gl_get_glProgramBufferParametersfvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersfvNV == (GdkGLProc_glProgramBufferParametersfvNV) -1)
+    _procs_GL_NV_parameter_buffer_object.glProgramBufferParametersfvNV =
+      (GdkGLProc_glProgramBufferParametersfvNV) gdk_gl_get_proc_address ("glProgramBufferParametersfvNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramBufferParametersfvNV () - %s",
+               (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersfvNV);
+}
+
+/* glProgramBufferParametersIivNV */
 GdkGLProc
-gdk_gl_get_glAreProgramsResidentNV (void)
+gdk_gl_get_glProgramBufferParametersIivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glAreProgramsResidentNV == (GdkGLProc_glAreProgramsResidentNV) -1)
-    _procs_GL_NV_vertex_program.glAreProgramsResidentNV =
-      (GdkGLProc_glAreProgramsResidentNV) gdk_gl_get_proc_address ("glAreProgramsResidentNV");
+  if (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIivNV == (GdkGLProc_glProgramBufferParametersIivNV) -1)
+    _procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIivNV =
+      (GdkGLProc_glProgramBufferParametersIivNV) gdk_gl_get_proc_address ("glProgramBufferParametersIivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glAreProgramsResidentNV () - %s",
-               (_procs_GL_NV_vertex_program.glAreProgramsResidentNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramBufferParametersIivNV () - %s",
+               (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glAreProgramsResidentNV);
+  return (GdkGLProc) (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIivNV);
 }
 
-/* glBindProgramNV */
+/* glProgramBufferParametersIuivNV */
 GdkGLProc
-gdk_gl_get_glBindProgramNV (void)
+gdk_gl_get_glProgramBufferParametersIuivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glBindProgramNV == (GdkGLProc_glBindProgramNV) -1)
-    _procs_GL_NV_vertex_program.glBindProgramNV =
-      (GdkGLProc_glBindProgramNV) gdk_gl_get_proc_address ("glBindProgramNV");
+  if (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIuivNV == (GdkGLProc_glProgramBufferParametersIuivNV) -1)
+    _procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIuivNV =
+      (GdkGLProc_glProgramBufferParametersIuivNV) gdk_gl_get_proc_address ("glProgramBufferParametersIuivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindProgramNV () - %s",
-               (_procs_GL_NV_vertex_program.glBindProgramNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramBufferParametersIuivNV () - %s",
+               (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIuivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glBindProgramNV);
+  return (GdkGLProc) (_procs_GL_NV_parameter_buffer_object.glProgramBufferParametersIuivNV);
 }
 
-/* glDeleteProgramsNV */
-GdkGLProc
-gdk_gl_get_glDeleteProgramsNV (void)
+/* Get GL_NV_parameter_buffer_object functions */
+GdkGL_GL_NV_parameter_buffer_object *
+gdk_gl_get_GL_NV_parameter_buffer_object (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glDeleteProgramsNV == (GdkGLProc_glDeleteProgramsNV) -1)
-    _procs_GL_NV_vertex_program.glDeleteProgramsNV =
-      (GdkGLProc_glDeleteProgramsNV) gdk_gl_get_proc_address ("glDeleteProgramsNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_parameter_buffer_object");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glProgramBufferParametersfvNV () != NULL);
+          supported &= (gdk_gl_get_glProgramBufferParametersIivNV () != NULL);
+          supported &= (gdk_gl_get_glProgramBufferParametersIuivNV () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteProgramsNV () - %s",
-               (_procs_GL_NV_vertex_program.glDeleteProgramsNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_NV_parameter_buffer_object () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glDeleteProgramsNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_parameter_buffer_object;
 }
 
-/* glExecuteProgramNV */
+/*
+ * GL_EXT_draw_buffers2
+ */
+
+static GdkGL_GL_EXT_draw_buffers2 _procs_GL_EXT_draw_buffers2 = {
+  (GdkGLProc_glColorMaskIndexedEXT) -1,
+  (GdkGLProc_glGetBooleanIndexedvEXT) -1,
+  (GdkGLProc_glGetIntegerIndexedvEXT) -1,
+  (GdkGLProc_glEnableIndexedEXT) -1,
+  (GdkGLProc_glDisableIndexedEXT) -1,
+  (GdkGLProc_glIsEnabledIndexedEXT) -1
+};
+
+/* glColorMaskIndexedEXT */
 GdkGLProc
-gdk_gl_get_glExecuteProgramNV (void)
+gdk_gl_get_glColorMaskIndexedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glExecuteProgramNV == (GdkGLProc_glExecuteProgramNV) -1)
-    _procs_GL_NV_vertex_program.glExecuteProgramNV =
-      (GdkGLProc_glExecuteProgramNV) gdk_gl_get_proc_address ("glExecuteProgramNV");
+  if (_procs_GL_EXT_draw_buffers2.glColorMaskIndexedEXT == (GdkGLProc_glColorMaskIndexedEXT) -1)
+    _procs_GL_EXT_draw_buffers2.glColorMaskIndexedEXT =
+      (GdkGLProc_glColorMaskIndexedEXT) gdk_gl_get_proc_address ("glColorMaskIndexedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glExecuteProgramNV () - %s",
-               (_procs_GL_NV_vertex_program.glExecuteProgramNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glColorMaskIndexedEXT () - %s",
+               (_procs_GL_EXT_draw_buffers2.glColorMaskIndexedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glExecuteProgramNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_buffers2.glColorMaskIndexedEXT);
 }
 
-/* glGenProgramsNV */
+/* glGetBooleanIndexedvEXT */
 GdkGLProc
-gdk_gl_get_glGenProgramsNV (void)
+gdk_gl_get_glGetBooleanIndexedvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGenProgramsNV == (GdkGLProc_glGenProgramsNV) -1)
-    _procs_GL_NV_vertex_program.glGenProgramsNV =
-      (GdkGLProc_glGenProgramsNV) gdk_gl_get_proc_address ("glGenProgramsNV");
+  if (_procs_GL_EXT_draw_buffers2.glGetBooleanIndexedvEXT == (GdkGLProc_glGetBooleanIndexedvEXT) -1)
+    _procs_GL_EXT_draw_buffers2.glGetBooleanIndexedvEXT =
+      (GdkGLProc_glGetBooleanIndexedvEXT) gdk_gl_get_proc_address ("glGetBooleanIndexedvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenProgramsNV () - %s",
-               (_procs_GL_NV_vertex_program.glGenProgramsNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetBooleanIndexedvEXT () - %s",
+               (_procs_GL_EXT_draw_buffers2.glGetBooleanIndexedvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGenProgramsNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_buffers2.glGetBooleanIndexedvEXT);
 }
 
-/* glGetProgramParameterdvNV */
+/* glGetIntegerIndexedvEXT */
 GdkGLProc
-gdk_gl_get_glGetProgramParameterdvNV (void)
+gdk_gl_get_glGetIntegerIndexedvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetProgramParameterdvNV == (GdkGLProc_glGetProgramParameterdvNV) -1)
-    _procs_GL_NV_vertex_program.glGetProgramParameterdvNV =
-      (GdkGLProc_glGetProgramParameterdvNV) gdk_gl_get_proc_address ("glGetProgramParameterdvNV");
+  if (_procs_GL_EXT_draw_buffers2.glGetIntegerIndexedvEXT == (GdkGLProc_glGetIntegerIndexedvEXT) -1)
+    _procs_GL_EXT_draw_buffers2.glGetIntegerIndexedvEXT =
+      (GdkGLProc_glGetIntegerIndexedvEXT) gdk_gl_get_proc_address ("glGetIntegerIndexedvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramParameterdvNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetProgramParameterdvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetIntegerIndexedvEXT () - %s",
+               (_procs_GL_EXT_draw_buffers2.glGetIntegerIndexedvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramParameterdvNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_buffers2.glGetIntegerIndexedvEXT);
 }
 
-/* glGetProgramParameterfvNV */
+/* glEnableIndexedEXT */
 GdkGLProc
-gdk_gl_get_glGetProgramParameterfvNV (void)
+gdk_gl_get_glEnableIndexedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetProgramParameterfvNV == (GdkGLProc_glGetProgramParameterfvNV) -1)
-    _procs_GL_NV_vertex_program.glGetProgramParameterfvNV =
-      (GdkGLProc_glGetProgramParameterfvNV) gdk_gl_get_proc_address ("glGetProgramParameterfvNV");
+  if (_procs_GL_EXT_draw_buffers2.glEnableIndexedEXT == (GdkGLProc_glEnableIndexedEXT) -1)
+    _procs_GL_EXT_draw_buffers2.glEnableIndexedEXT =
+      (GdkGLProc_glEnableIndexedEXT) gdk_gl_get_proc_address ("glEnableIndexedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramParameterfvNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetProgramParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEnableIndexedEXT () - %s",
+               (_procs_GL_EXT_draw_buffers2.glEnableIndexedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramParameterfvNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_buffers2.glEnableIndexedEXT);
 }
 
-/* glGetProgramivNV */
+/* glDisableIndexedEXT */
 GdkGLProc
-gdk_gl_get_glGetProgramivNV (void)
+gdk_gl_get_glDisableIndexedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetProgramivNV == (GdkGLProc_glGetProgramivNV) -1)
-    _procs_GL_NV_vertex_program.glGetProgramivNV =
-      (GdkGLProc_glGetProgramivNV) gdk_gl_get_proc_address ("glGetProgramivNV");
+  if (_procs_GL_EXT_draw_buffers2.glDisableIndexedEXT == (GdkGLProc_glDisableIndexedEXT) -1)
+    _procs_GL_EXT_draw_buffers2.glDisableIndexedEXT =
+      (GdkGLProc_glDisableIndexedEXT) gdk_gl_get_proc_address ("glDisableIndexedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramivNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetProgramivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDisableIndexedEXT () - %s",
+               (_procs_GL_EXT_draw_buffers2.glDisableIndexedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramivNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_buffers2.glDisableIndexedEXT);
 }
 
-/* glGetProgramStringNV */
+/* glIsEnabledIndexedEXT */
 GdkGLProc
-gdk_gl_get_glGetProgramStringNV (void)
+gdk_gl_get_glIsEnabledIndexedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetProgramStringNV == (GdkGLProc_glGetProgramStringNV) -1)
-    _procs_GL_NV_vertex_program.glGetProgramStringNV =
-      (GdkGLProc_glGetProgramStringNV) gdk_gl_get_proc_address ("glGetProgramStringNV");
+  if (_procs_GL_EXT_draw_buffers2.glIsEnabledIndexedEXT == (GdkGLProc_glIsEnabledIndexedEXT) -1)
+    _procs_GL_EXT_draw_buffers2.glIsEnabledIndexedEXT =
+      (GdkGLProc_glIsEnabledIndexedEXT) gdk_gl_get_proc_address ("glIsEnabledIndexedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramStringNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetProgramStringNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsEnabledIndexedEXT () - %s",
+               (_procs_GL_EXT_draw_buffers2.glIsEnabledIndexedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetProgramStringNV);
+  return (GdkGLProc) (_procs_GL_EXT_draw_buffers2.glIsEnabledIndexedEXT);
 }
 
-/* glGetTrackMatrixivNV */
-GdkGLProc
-gdk_gl_get_glGetTrackMatrixivNV (void)
+/* Get GL_EXT_draw_buffers2 functions */
+GdkGL_GL_EXT_draw_buffers2 *
+gdk_gl_get_GL_EXT_draw_buffers2 (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetTrackMatrixivNV == (GdkGLProc_glGetTrackMatrixivNV) -1)
-    _procs_GL_NV_vertex_program.glGetTrackMatrixivNV =
-      (GdkGLProc_glGetTrackMatrixivNV) gdk_gl_get_proc_address ("glGetTrackMatrixivNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_draw_buffers2");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glColorMaskIndexedEXT () != NULL);
+          supported &= (gdk_gl_get_glGetBooleanIndexedvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetIntegerIndexedvEXT () != NULL);
+          supported &= (gdk_gl_get_glEnableIndexedEXT () != NULL);
+          supported &= (gdk_gl_get_glDisableIndexedEXT () != NULL);
+          supported &= (gdk_gl_get_glIsEnabledIndexedEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetTrackMatrixivNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetTrackMatrixivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_draw_buffers2 () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetTrackMatrixivNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_draw_buffers2;
 }
 
-/* glGetVertexAttribdvNV */
+/*
+ * GL_NV_transform_feedback
+ */
+
+static GdkGL_GL_NV_transform_feedback _procs_GL_NV_transform_feedback = {
+  (GdkGLProc_glBeginTransformFeedbackNV) -1,
+  (GdkGLProc_glEndTransformFeedbackNV) -1,
+  (GdkGLProc_glTransformFeedbackAttribsNV) -1,
+  (GdkGLProc_glBindBufferRangeNV) -1,
+  (GdkGLProc_glBindBufferOffsetNV) -1,
+  (GdkGLProc_glBindBufferBaseNV) -1,
+  (GdkGLProc_glTransformFeedbackVaryingsNV) -1,
+  (GdkGLProc_glActiveVaryingNV) -1,
+  (GdkGLProc_glGetVaryingLocationNV) -1,
+  (GdkGLProc_glGetActiveVaryingNV) -1,
+  (GdkGLProc_glGetTransformFeedbackVaryingNV) -1
+};
+
+/* glBeginTransformFeedbackNV */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribdvNV (void)
+gdk_gl_get_glBeginTransformFeedbackNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetVertexAttribdvNV == (GdkGLProc_glGetVertexAttribdvNV) -1)
-    _procs_GL_NV_vertex_program.glGetVertexAttribdvNV =
-      (GdkGLProc_glGetVertexAttribdvNV) gdk_gl_get_proc_address ("glGetVertexAttribdvNV");
+  if (_procs_GL_NV_transform_feedback.glBeginTransformFeedbackNV == (GdkGLProc_glBeginTransformFeedbackNV) -1)
+    _procs_GL_NV_transform_feedback.glBeginTransformFeedbackNV =
+      (GdkGLProc_glBeginTransformFeedbackNV) gdk_gl_get_proc_address ("glBeginTransformFeedbackNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribdvNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetVertexAttribdvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginTransformFeedbackNV () - %s",
+               (_procs_GL_NV_transform_feedback.glBeginTransformFeedbackNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribdvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glBeginTransformFeedbackNV);
 }
 
-/* glGetVertexAttribfvNV */
+/* glEndTransformFeedbackNV */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribfvNV (void)
+gdk_gl_get_glEndTransformFeedbackNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetVertexAttribfvNV == (GdkGLProc_glGetVertexAttribfvNV) -1)
-    _procs_GL_NV_vertex_program.glGetVertexAttribfvNV =
-      (GdkGLProc_glGetVertexAttribfvNV) gdk_gl_get_proc_address ("glGetVertexAttribfvNV");
+  if (_procs_GL_NV_transform_feedback.glEndTransformFeedbackNV == (GdkGLProc_glEndTransformFeedbackNV) -1)
+    _procs_GL_NV_transform_feedback.glEndTransformFeedbackNV =
+      (GdkGLProc_glEndTransformFeedbackNV) gdk_gl_get_proc_address ("glEndTransformFeedbackNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribfvNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetVertexAttribfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndTransformFeedbackNV () - %s",
+               (_procs_GL_NV_transform_feedback.glEndTransformFeedbackNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribfvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glEndTransformFeedbackNV);
 }
 
-/* glGetVertexAttribivNV */
+/* glTransformFeedbackAttribsNV */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribivNV (void)
+gdk_gl_get_glTransformFeedbackAttribsNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetVertexAttribivNV == (GdkGLProc_glGetVertexAttribivNV) -1)
-    _procs_GL_NV_vertex_program.glGetVertexAttribivNV =
-      (GdkGLProc_glGetVertexAttribivNV) gdk_gl_get_proc_address ("glGetVertexAttribivNV");
+  if (_procs_GL_NV_transform_feedback.glTransformFeedbackAttribsNV == (GdkGLProc_glTransformFeedbackAttribsNV) -1)
+    _procs_GL_NV_transform_feedback.glTransformFeedbackAttribsNV =
+      (GdkGLProc_glTransformFeedbackAttribsNV) gdk_gl_get_proc_address ("glTransformFeedbackAttribsNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribivNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetVertexAttribivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTransformFeedbackAttribsNV () - %s",
+               (_procs_GL_NV_transform_feedback.glTransformFeedbackAttribsNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribivNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glTransformFeedbackAttribsNV);
 }
 
-/* glGetVertexAttribPointervNV */
+/* glBindBufferRangeNV */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribPointervNV (void)
+gdk_gl_get_glBindBufferRangeNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glGetVertexAttribPointervNV == (GdkGLProc_glGetVertexAttribPointervNV) -1)
-    _procs_GL_NV_vertex_program.glGetVertexAttribPointervNV =
-      (GdkGLProc_glGetVertexAttribPointervNV) gdk_gl_get_proc_address ("glGetVertexAttribPointervNV");
+  if (_procs_GL_NV_transform_feedback.glBindBufferRangeNV == (GdkGLProc_glBindBufferRangeNV) -1)
+    _procs_GL_NV_transform_feedback.glBindBufferRangeNV =
+      (GdkGLProc_glBindBufferRangeNV) gdk_gl_get_proc_address ("glBindBufferRangeNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribPointervNV () - %s",
-               (_procs_GL_NV_vertex_program.glGetVertexAttribPointervNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferRangeNV () - %s",
+               (_procs_GL_NV_transform_feedback.glBindBufferRangeNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glGetVertexAttribPointervNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glBindBufferRangeNV);
 }
 
-/* glIsProgramNV */
+/* glBindBufferOffsetNV */
 GdkGLProc
-gdk_gl_get_glIsProgramNV (void)
+gdk_gl_get_glBindBufferOffsetNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glIsProgramNV == (GdkGLProc_glIsProgramNV) -1)
-    _procs_GL_NV_vertex_program.glIsProgramNV =
-      (GdkGLProc_glIsProgramNV) gdk_gl_get_proc_address ("glIsProgramNV");
+  if (_procs_GL_NV_transform_feedback.glBindBufferOffsetNV == (GdkGLProc_glBindBufferOffsetNV) -1)
+    _procs_GL_NV_transform_feedback.glBindBufferOffsetNV =
+      (GdkGLProc_glBindBufferOffsetNV) gdk_gl_get_proc_address ("glBindBufferOffsetNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsProgramNV () - %s",
-               (_procs_GL_NV_vertex_program.glIsProgramNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferOffsetNV () - %s",
+               (_procs_GL_NV_transform_feedback.glBindBufferOffsetNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glIsProgramNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glBindBufferOffsetNV);
 }
 
-/* glLoadProgramNV */
+/* glBindBufferBaseNV */
 GdkGLProc
-gdk_gl_get_glLoadProgramNV (void)
+gdk_gl_get_glBindBufferBaseNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glLoadProgramNV == (GdkGLProc_glLoadProgramNV) -1)
-    _procs_GL_NV_vertex_program.glLoadProgramNV =
-      (GdkGLProc_glLoadProgramNV) gdk_gl_get_proc_address ("glLoadProgramNV");
+  if (_procs_GL_NV_transform_feedback.glBindBufferBaseNV == (GdkGLProc_glBindBufferBaseNV) -1)
+    _procs_GL_NV_transform_feedback.glBindBufferBaseNV =
+      (GdkGLProc_glBindBufferBaseNV) gdk_gl_get_proc_address ("glBindBufferBaseNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glLoadProgramNV () - %s",
-               (_procs_GL_NV_vertex_program.glLoadProgramNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferBaseNV () - %s",
+               (_procs_GL_NV_transform_feedback.glBindBufferBaseNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glLoadProgramNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glBindBufferBaseNV);
 }
 
-/* glProgramParameter4dNV */
+/* glTransformFeedbackVaryingsNV */
 GdkGLProc
-gdk_gl_get_glProgramParameter4dNV (void)
+gdk_gl_get_glTransformFeedbackVaryingsNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glProgramParameter4dNV == (GdkGLProc_glProgramParameter4dNV) -1)
-    _procs_GL_NV_vertex_program.glProgramParameter4dNV =
-      (GdkGLProc_glProgramParameter4dNV) gdk_gl_get_proc_address ("glProgramParameter4dNV");
+  if (_procs_GL_NV_transform_feedback.glTransformFeedbackVaryingsNV == (GdkGLProc_glTransformFeedbackVaryingsNV) -1)
+    _procs_GL_NV_transform_feedback.glTransformFeedbackVaryingsNV =
+      (GdkGLProc_glTransformFeedbackVaryingsNV) gdk_gl_get_proc_address ("glTransformFeedbackVaryingsNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramParameter4dNV () - %s",
-               (_procs_GL_NV_vertex_program.glProgramParameter4dNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTransformFeedbackVaryingsNV () - %s",
+               (_procs_GL_NV_transform_feedback.glTransformFeedbackVaryingsNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4dNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glTransformFeedbackVaryingsNV);
 }
 
-/* glProgramParameter4dvNV */
+/* glActiveVaryingNV */
 GdkGLProc
-gdk_gl_get_glProgramParameter4dvNV (void)
+gdk_gl_get_glActiveVaryingNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glProgramParameter4dvNV == (GdkGLProc_glProgramParameter4dvNV) -1)
-    _procs_GL_NV_vertex_program.glProgramParameter4dvNV =
-      (GdkGLProc_glProgramParameter4dvNV) gdk_gl_get_proc_address ("glProgramParameter4dvNV");
+  if (_procs_GL_NV_transform_feedback.glActiveVaryingNV == (GdkGLProc_glActiveVaryingNV) -1)
+    _procs_GL_NV_transform_feedback.glActiveVaryingNV =
+      (GdkGLProc_glActiveVaryingNV) gdk_gl_get_proc_address ("glActiveVaryingNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramParameter4dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glProgramParameter4dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glActiveVaryingNV () - %s",
+               (_procs_GL_NV_transform_feedback.glActiveVaryingNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4dvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glActiveVaryingNV);
 }
 
-/* glProgramParameter4fNV */
+/* glGetVaryingLocationNV */
 GdkGLProc
-gdk_gl_get_glProgramParameter4fNV (void)
+gdk_gl_get_glGetVaryingLocationNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glProgramParameter4fNV == (GdkGLProc_glProgramParameter4fNV) -1)
-    _procs_GL_NV_vertex_program.glProgramParameter4fNV =
-      (GdkGLProc_glProgramParameter4fNV) gdk_gl_get_proc_address ("glProgramParameter4fNV");
+  if (_procs_GL_NV_transform_feedback.glGetVaryingLocationNV == (GdkGLProc_glGetVaryingLocationNV) -1)
+    _procs_GL_NV_transform_feedback.glGetVaryingLocationNV =
+      (GdkGLProc_glGetVaryingLocationNV) gdk_gl_get_proc_address ("glGetVaryingLocationNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramParameter4fNV () - %s",
-               (_procs_GL_NV_vertex_program.glProgramParameter4fNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVaryingLocationNV () - %s",
+               (_procs_GL_NV_transform_feedback.glGetVaryingLocationNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4fNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glGetVaryingLocationNV);
 }
 
-/* glProgramParameter4fvNV */
+/* glGetActiveVaryingNV */
 GdkGLProc
-gdk_gl_get_glProgramParameter4fvNV (void)
+gdk_gl_get_glGetActiveVaryingNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glProgramParameter4fvNV == (GdkGLProc_glProgramParameter4fvNV) -1)
-    _procs_GL_NV_vertex_program.glProgramParameter4fvNV =
-      (GdkGLProc_glProgramParameter4fvNV) gdk_gl_get_proc_address ("glProgramParameter4fvNV");
+  if (_procs_GL_NV_transform_feedback.glGetActiveVaryingNV == (GdkGLProc_glGetActiveVaryingNV) -1)
+    _procs_GL_NV_transform_feedback.glGetActiveVaryingNV =
+      (GdkGLProc_glGetActiveVaryingNV) gdk_gl_get_proc_address ("glGetActiveVaryingNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramParameter4fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glProgramParameter4fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetActiveVaryingNV () - %s",
+               (_procs_GL_NV_transform_feedback.glGetActiveVaryingNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameter4fvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glGetActiveVaryingNV);
 }
 
-/* glProgramParameters4dvNV */
+/* glGetTransformFeedbackVaryingNV */
 GdkGLProc
-gdk_gl_get_glProgramParameters4dvNV (void)
+gdk_gl_get_glGetTransformFeedbackVaryingNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glProgramParameters4dvNV == (GdkGLProc_glProgramParameters4dvNV) -1)
-    _procs_GL_NV_vertex_program.glProgramParameters4dvNV =
-      (GdkGLProc_glProgramParameters4dvNV) gdk_gl_get_proc_address ("glProgramParameters4dvNV");
+  if (_procs_GL_NV_transform_feedback.glGetTransformFeedbackVaryingNV == (GdkGLProc_glGetTransformFeedbackVaryingNV) -1)
+    _procs_GL_NV_transform_feedback.glGetTransformFeedbackVaryingNV =
+      (GdkGLProc_glGetTransformFeedbackVaryingNV) gdk_gl_get_proc_address ("glGetTransformFeedbackVaryingNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramParameters4dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glProgramParameters4dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTransformFeedbackVaryingNV () - %s",
+               (_procs_GL_NV_transform_feedback.glGetTransformFeedbackVaryingNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameters4dvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback.glGetTransformFeedbackVaryingNV);
 }
 
-/* glProgramParameters4fvNV */
-GdkGLProc
-gdk_gl_get_glProgramParameters4fvNV (void)
+/* Get GL_NV_transform_feedback functions */
+GdkGL_GL_NV_transform_feedback *
+gdk_gl_get_GL_NV_transform_feedback (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glProgramParameters4fvNV == (GdkGLProc_glProgramParameters4fvNV) -1)
-    _procs_GL_NV_vertex_program.glProgramParameters4fvNV =
-      (GdkGLProc_glProgramParameters4fvNV) gdk_gl_get_proc_address ("glProgramParameters4fvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_transform_feedback");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBeginTransformFeedbackNV () != NULL);
+          supported &= (gdk_gl_get_glEndTransformFeedbackNV () != NULL);
+          supported &= (gdk_gl_get_glTransformFeedbackAttribsNV () != NULL);
+          supported &= (gdk_gl_get_glBindBufferRangeNV () != NULL);
+          supported &= (gdk_gl_get_glBindBufferOffsetNV () != NULL);
+          supported &= (gdk_gl_get_glBindBufferBaseNV () != NULL);
+          supported &= (gdk_gl_get_glTransformFeedbackVaryingsNV () != NULL);
+          supported &= (gdk_gl_get_glActiveVaryingNV () != NULL);
+          supported &= (gdk_gl_get_glGetVaryingLocationNV () != NULL);
+          supported &= (gdk_gl_get_glGetActiveVaryingNV () != NULL);
+          supported &= (gdk_gl_get_glGetTransformFeedbackVaryingNV () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramParameters4fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glProgramParameters4fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_NV_transform_feedback () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glProgramParameters4fvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_transform_feedback;
 }
 
-/* glRequestResidentProgramsNV */
+/*
+ * GL_EXT_bindable_uniform
+ */
+
+static GdkGL_GL_EXT_bindable_uniform _procs_GL_EXT_bindable_uniform = {
+  (GdkGLProc_glUniformBufferEXT) -1,
+  (GdkGLProc_glGetUniformBufferSizeEXT) -1,
+  (GdkGLProc_glGetUniformOffsetEXT) -1
+};
+
+/* glUniformBufferEXT */
 GdkGLProc
-gdk_gl_get_glRequestResidentProgramsNV (void)
+gdk_gl_get_glUniformBufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glRequestResidentProgramsNV == (GdkGLProc_glRequestResidentProgramsNV) -1)
-    _procs_GL_NV_vertex_program.glRequestResidentProgramsNV =
-      (GdkGLProc_glRequestResidentProgramsNV) gdk_gl_get_proc_address ("glRequestResidentProgramsNV");
+  if (_procs_GL_EXT_bindable_uniform.glUniformBufferEXT == (GdkGLProc_glUniformBufferEXT) -1)
+    _procs_GL_EXT_bindable_uniform.glUniformBufferEXT =
+      (GdkGLProc_glUniformBufferEXT) gdk_gl_get_proc_address ("glUniformBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glRequestResidentProgramsNV () - %s",
-               (_procs_GL_NV_vertex_program.glRequestResidentProgramsNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUniformBufferEXT () - %s",
+               (_procs_GL_EXT_bindable_uniform.glUniformBufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glRequestResidentProgramsNV);
+  return (GdkGLProc) (_procs_GL_EXT_bindable_uniform.glUniformBufferEXT);
 }
 
-/* glTrackMatrixNV */
+/* glGetUniformBufferSizeEXT */
 GdkGLProc
-gdk_gl_get_glTrackMatrixNV (void)
+gdk_gl_get_glGetUniformBufferSizeEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glTrackMatrixNV == (GdkGLProc_glTrackMatrixNV) -1)
-    _procs_GL_NV_vertex_program.glTrackMatrixNV =
-      (GdkGLProc_glTrackMatrixNV) gdk_gl_get_proc_address ("glTrackMatrixNV");
+  if (_procs_GL_EXT_bindable_uniform.glGetUniformBufferSizeEXT == (GdkGLProc_glGetUniformBufferSizeEXT) -1)
+    _procs_GL_EXT_bindable_uniform.glGetUniformBufferSizeEXT =
+      (GdkGLProc_glGetUniformBufferSizeEXT) gdk_gl_get_proc_address ("glGetUniformBufferSizeEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTrackMatrixNV () - %s",
-               (_procs_GL_NV_vertex_program.glTrackMatrixNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetUniformBufferSizeEXT () - %s",
+               (_procs_GL_EXT_bindable_uniform.glGetUniformBufferSizeEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glTrackMatrixNV);
+  return (GdkGLProc) (_procs_GL_EXT_bindable_uniform.glGetUniformBufferSizeEXT);
 }
 
-/* glVertexAttribPointerNV */
+/* glGetUniformOffsetEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribPointerNV (void)
+gdk_gl_get_glGetUniformOffsetEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribPointerNV == (GdkGLProc_glVertexAttribPointerNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribPointerNV =
-      (GdkGLProc_glVertexAttribPointerNV) gdk_gl_get_proc_address ("glVertexAttribPointerNV");
+  if (_procs_GL_EXT_bindable_uniform.glGetUniformOffsetEXT == (GdkGLProc_glGetUniformOffsetEXT) -1)
+    _procs_GL_EXT_bindable_uniform.glGetUniformOffsetEXT =
+      (GdkGLProc_glGetUniformOffsetEXT) gdk_gl_get_proc_address ("glGetUniformOffsetEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribPointerNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribPointerNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetUniformOffsetEXT () - %s",
+               (_procs_GL_EXT_bindable_uniform.glGetUniformOffsetEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribPointerNV);
+  return (GdkGLProc) (_procs_GL_EXT_bindable_uniform.glGetUniformOffsetEXT);
 }
 
-/* glVertexAttrib1dNV */
-GdkGLProc
-gdk_gl_get_glVertexAttrib1dNV (void)
+/* Get GL_EXT_bindable_uniform functions */
+GdkGL_GL_EXT_bindable_uniform *
+gdk_gl_get_GL_EXT_bindable_uniform (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib1dNV == (GdkGLProc_glVertexAttrib1dNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib1dNV =
-      (GdkGLProc_glVertexAttrib1dNV) gdk_gl_get_proc_address ("glVertexAttrib1dNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_bindable_uniform");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glUniformBufferEXT () != NULL);
+          supported &= (gdk_gl_get_glGetUniformBufferSizeEXT () != NULL);
+          supported &= (gdk_gl_get_glGetUniformOffsetEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1dNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib1dNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_bindable_uniform () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1dNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_bindable_uniform;
 }
 
-/* glVertexAttrib1dvNV */
+/*
+ * GL_EXT_texture_integer
+ */
+
+static GdkGL_GL_EXT_texture_integer _procs_GL_EXT_texture_integer = {
+  (GdkGLProc_glTexParameterIivEXT) -1,
+  (GdkGLProc_glTexParameterIuivEXT) -1,
+  (GdkGLProc_glGetTexParameterIivEXT) -1,
+  (GdkGLProc_glGetTexParameterIuivEXT) -1,
+  (GdkGLProc_glClearColorIiEXT) -1,
+  (GdkGLProc_glClearColorIuiEXT) -1
+};
+
+/* glTexParameterIivEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1dvNV (void)
+gdk_gl_get_glTexParameterIivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib1dvNV == (GdkGLProc_glVertexAttrib1dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib1dvNV =
-      (GdkGLProc_glVertexAttrib1dvNV) gdk_gl_get_proc_address ("glVertexAttrib1dvNV");
+  if (_procs_GL_EXT_texture_integer.glTexParameterIivEXT == (GdkGLProc_glTexParameterIivEXT) -1)
+    _procs_GL_EXT_texture_integer.glTexParameterIivEXT =
+      (GdkGLProc_glTexParameterIivEXT) gdk_gl_get_proc_address ("glTexParameterIivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib1dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexParameterIivEXT () - %s",
+               (_procs_GL_EXT_texture_integer.glTexParameterIivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1dvNV);
+  return (GdkGLProc) (_procs_GL_EXT_texture_integer.glTexParameterIivEXT);
 }
 
-/* glVertexAttrib1fNV */
+/* glTexParameterIuivEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1fNV (void)
+gdk_gl_get_glTexParameterIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib1fNV == (GdkGLProc_glVertexAttrib1fNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib1fNV =
-      (GdkGLProc_glVertexAttrib1fNV) gdk_gl_get_proc_address ("glVertexAttrib1fNV");
+  if (_procs_GL_EXT_texture_integer.glTexParameterIuivEXT == (GdkGLProc_glTexParameterIuivEXT) -1)
+    _procs_GL_EXT_texture_integer.glTexParameterIuivEXT =
+      (GdkGLProc_glTexParameterIuivEXT) gdk_gl_get_proc_address ("glTexParameterIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1fNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib1fNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexParameterIuivEXT () - %s",
+               (_procs_GL_EXT_texture_integer.glTexParameterIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1fNV);
+  return (GdkGLProc) (_procs_GL_EXT_texture_integer.glTexParameterIuivEXT);
 }
 
-/* glVertexAttrib1fvNV */
+/* glGetTexParameterIivEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1fvNV (void)
+gdk_gl_get_glGetTexParameterIivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib1fvNV == (GdkGLProc_glVertexAttrib1fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib1fvNV =
-      (GdkGLProc_glVertexAttrib1fvNV) gdk_gl_get_proc_address ("glVertexAttrib1fvNV");
+  if (_procs_GL_EXT_texture_integer.glGetTexParameterIivEXT == (GdkGLProc_glGetTexParameterIivEXT) -1)
+    _procs_GL_EXT_texture_integer.glGetTexParameterIivEXT =
+      (GdkGLProc_glGetTexParameterIivEXT) gdk_gl_get_proc_address ("glGetTexParameterIivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib1fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTexParameterIivEXT () - %s",
+               (_procs_GL_EXT_texture_integer.glGetTexParameterIivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1fvNV);
+  return (GdkGLProc) (_procs_GL_EXT_texture_integer.glGetTexParameterIivEXT);
 }
 
-/* glVertexAttrib1sNV */
+/* glGetTexParameterIuivEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1sNV (void)
+gdk_gl_get_glGetTexParameterIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib1sNV == (GdkGLProc_glVertexAttrib1sNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib1sNV =
-      (GdkGLProc_glVertexAttrib1sNV) gdk_gl_get_proc_address ("glVertexAttrib1sNV");
+  if (_procs_GL_EXT_texture_integer.glGetTexParameterIuivEXT == (GdkGLProc_glGetTexParameterIuivEXT) -1)
+    _procs_GL_EXT_texture_integer.glGetTexParameterIuivEXT =
+      (GdkGLProc_glGetTexParameterIuivEXT) gdk_gl_get_proc_address ("glGetTexParameterIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1sNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib1sNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTexParameterIuivEXT () - %s",
+               (_procs_GL_EXT_texture_integer.glGetTexParameterIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1sNV);
+  return (GdkGLProc) (_procs_GL_EXT_texture_integer.glGetTexParameterIuivEXT);
 }
 
-/* glVertexAttrib1svNV */
+/* glClearColorIiEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1svNV (void)
+gdk_gl_get_glClearColorIiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib1svNV == (GdkGLProc_glVertexAttrib1svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib1svNV =
-      (GdkGLProc_glVertexAttrib1svNV) gdk_gl_get_proc_address ("glVertexAttrib1svNV");
+  if (_procs_GL_EXT_texture_integer.glClearColorIiEXT == (GdkGLProc_glClearColorIiEXT) -1)
+    _procs_GL_EXT_texture_integer.glClearColorIiEXT =
+      (GdkGLProc_glClearColorIiEXT) gdk_gl_get_proc_address ("glClearColorIiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib1svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClearColorIiEXT () - %s",
+               (_procs_GL_EXT_texture_integer.glClearColorIiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib1svNV);
+  return (GdkGLProc) (_procs_GL_EXT_texture_integer.glClearColorIiEXT);
 }
 
-/* glVertexAttrib2dNV */
+/* glClearColorIuiEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2dNV (void)
+gdk_gl_get_glClearColorIuiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib2dNV == (GdkGLProc_glVertexAttrib2dNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib2dNV =
-      (GdkGLProc_glVertexAttrib2dNV) gdk_gl_get_proc_address ("glVertexAttrib2dNV");
+  if (_procs_GL_EXT_texture_integer.glClearColorIuiEXT == (GdkGLProc_glClearColorIuiEXT) -1)
+    _procs_GL_EXT_texture_integer.glClearColorIuiEXT =
+      (GdkGLProc_glClearColorIuiEXT) gdk_gl_get_proc_address ("glClearColorIuiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2dNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib2dNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClearColorIuiEXT () - %s",
+               (_procs_GL_EXT_texture_integer.glClearColorIuiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2dNV);
+  return (GdkGLProc) (_procs_GL_EXT_texture_integer.glClearColorIuiEXT);
 }
 
-/* glVertexAttrib2dvNV */
-GdkGLProc
-gdk_gl_get_glVertexAttrib2dvNV (void)
+/* Get GL_EXT_texture_integer functions */
+GdkGL_GL_EXT_texture_integer *
+gdk_gl_get_GL_EXT_texture_integer (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib2dvNV == (GdkGLProc_glVertexAttrib2dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib2dvNV =
-      (GdkGLProc_glVertexAttrib2dvNV) gdk_gl_get_proc_address ("glVertexAttrib2dvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_texture_integer");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTexParameterIivEXT () != NULL);
+          supported &= (gdk_gl_get_glTexParameterIuivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTexParameterIivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTexParameterIuivEXT () != NULL);
+          supported &= (gdk_gl_get_glClearColorIiEXT () != NULL);
+          supported &= (gdk_gl_get_glClearColorIuiEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib2dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_texture_integer () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2dvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_texture_integer;
 }
 
-/* glVertexAttrib2fNV */
+/*
+ * GL_GREMEDY_frame_terminator
+ */
+
+static GdkGL_GL_GREMEDY_frame_terminator _procs_GL_GREMEDY_frame_terminator = {
+  (GdkGLProc_glFrameTerminatorGREMEDY) -1
+};
+
+/* glFrameTerminatorGREMEDY */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2fNV (void)
+gdk_gl_get_glFrameTerminatorGREMEDY (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib2fNV == (GdkGLProc_glVertexAttrib2fNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib2fNV =
-      (GdkGLProc_glVertexAttrib2fNV) gdk_gl_get_proc_address ("glVertexAttrib2fNV");
+  if (_procs_GL_GREMEDY_frame_terminator.glFrameTerminatorGREMEDY == (GdkGLProc_glFrameTerminatorGREMEDY) -1)
+    _procs_GL_GREMEDY_frame_terminator.glFrameTerminatorGREMEDY =
+      (GdkGLProc_glFrameTerminatorGREMEDY) gdk_gl_get_proc_address ("glFrameTerminatorGREMEDY");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2fNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib2fNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFrameTerminatorGREMEDY () - %s",
+               (_procs_GL_GREMEDY_frame_terminator.glFrameTerminatorGREMEDY) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2fNV);
+  return (GdkGLProc) (_procs_GL_GREMEDY_frame_terminator.glFrameTerminatorGREMEDY);
 }
 
-/* glVertexAttrib2fvNV */
-GdkGLProc
-gdk_gl_get_glVertexAttrib2fvNV (void)
+/* Get GL_GREMEDY_frame_terminator functions */
+GdkGL_GL_GREMEDY_frame_terminator *
+gdk_gl_get_GL_GREMEDY_frame_terminator (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib2fvNV == (GdkGLProc_glVertexAttrib2fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib2fvNV =
-      (GdkGLProc_glVertexAttrib2fvNV) gdk_gl_get_proc_address ("glVertexAttrib2fvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_GREMEDY_frame_terminator");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glFrameTerminatorGREMEDY () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib2fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_GREMEDY_frame_terminator () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2fvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_GREMEDY_frame_terminator;
 }
 
-/* glVertexAttrib2sNV */
+/*
+ * GL_NV_conditional_render
+ */
+
+static GdkGL_GL_NV_conditional_render _procs_GL_NV_conditional_render = {
+  (GdkGLProc_glBeginConditionalRenderNV) -1,
+  (GdkGLProc_glEndConditionalRenderNV) -1
+};
+
+/* glBeginConditionalRenderNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2sNV (void)
+gdk_gl_get_glBeginConditionalRenderNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib2sNV == (GdkGLProc_glVertexAttrib2sNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib2sNV =
-      (GdkGLProc_glVertexAttrib2sNV) gdk_gl_get_proc_address ("glVertexAttrib2sNV");
+  if (_procs_GL_NV_conditional_render.glBeginConditionalRenderNV == (GdkGLProc_glBeginConditionalRenderNV) -1)
+    _procs_GL_NV_conditional_render.glBeginConditionalRenderNV =
+      (GdkGLProc_glBeginConditionalRenderNV) gdk_gl_get_proc_address ("glBeginConditionalRenderNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2sNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib2sNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginConditionalRenderNV () - %s",
+               (_procs_GL_NV_conditional_render.glBeginConditionalRenderNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2sNV);
+  return (GdkGLProc) (_procs_GL_NV_conditional_render.glBeginConditionalRenderNV);
 }
 
-/* glVertexAttrib2svNV */
+/* glEndConditionalRenderNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2svNV (void)
+gdk_gl_get_glEndConditionalRenderNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib2svNV == (GdkGLProc_glVertexAttrib2svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib2svNV =
-      (GdkGLProc_glVertexAttrib2svNV) gdk_gl_get_proc_address ("glVertexAttrib2svNV");
+  if (_procs_GL_NV_conditional_render.glEndConditionalRenderNV == (GdkGLProc_glEndConditionalRenderNV) -1)
+    _procs_GL_NV_conditional_render.glEndConditionalRenderNV =
+      (GdkGLProc_glEndConditionalRenderNV) gdk_gl_get_proc_address ("glEndConditionalRenderNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib2svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndConditionalRenderNV () - %s",
+               (_procs_GL_NV_conditional_render.glEndConditionalRenderNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib2svNV);
+  return (GdkGLProc) (_procs_GL_NV_conditional_render.glEndConditionalRenderNV);
 }
 
-/* glVertexAttrib3dNV */
-GdkGLProc
-gdk_gl_get_glVertexAttrib3dNV (void)
+/* Get GL_NV_conditional_render functions */
+GdkGL_GL_NV_conditional_render *
+gdk_gl_get_GL_NV_conditional_render (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib3dNV == (GdkGLProc_glVertexAttrib3dNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib3dNV =
-      (GdkGLProc_glVertexAttrib3dNV) gdk_gl_get_proc_address ("glVertexAttrib3dNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_conditional_render");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBeginConditionalRenderNV () != NULL);
+          supported &= (gdk_gl_get_glEndConditionalRenderNV () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3dNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib3dNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_NV_conditional_render () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3dNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_conditional_render;
 }
 
-/* glVertexAttrib3dvNV */
+/*
+ * GL_NV_present_video
+ */
+
+static GdkGL_GL_NV_present_video _procs_GL_NV_present_video = {
+  (GdkGLProc_glPresentFrameKeyedNV) -1,
+  (GdkGLProc_glPresentFrameDualFillNV) -1,
+  (GdkGLProc_glGetVideoivNV) -1,
+  (GdkGLProc_glGetVideouivNV) -1,
+  (GdkGLProc_glGetVideoi64vNV) -1,
+  (GdkGLProc_glGetVideoui64vNV) -1
+};
+
+/* glPresentFrameKeyedNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3dvNV (void)
+gdk_gl_get_glPresentFrameKeyedNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib3dvNV == (GdkGLProc_glVertexAttrib3dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib3dvNV =
-      (GdkGLProc_glVertexAttrib3dvNV) gdk_gl_get_proc_address ("glVertexAttrib3dvNV");
+  if (_procs_GL_NV_present_video.glPresentFrameKeyedNV == (GdkGLProc_glPresentFrameKeyedNV) -1)
+    _procs_GL_NV_present_video.glPresentFrameKeyedNV =
+      (GdkGLProc_glPresentFrameKeyedNV) gdk_gl_get_proc_address ("glPresentFrameKeyedNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib3dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPresentFrameKeyedNV () - %s",
+               (_procs_GL_NV_present_video.glPresentFrameKeyedNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3dvNV);
+  return (GdkGLProc) (_procs_GL_NV_present_video.glPresentFrameKeyedNV);
 }
 
-/* glVertexAttrib3fNV */
+/* glPresentFrameDualFillNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3fNV (void)
+gdk_gl_get_glPresentFrameDualFillNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib3fNV == (GdkGLProc_glVertexAttrib3fNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib3fNV =
-      (GdkGLProc_glVertexAttrib3fNV) gdk_gl_get_proc_address ("glVertexAttrib3fNV");
+  if (_procs_GL_NV_present_video.glPresentFrameDualFillNV == (GdkGLProc_glPresentFrameDualFillNV) -1)
+    _procs_GL_NV_present_video.glPresentFrameDualFillNV =
+      (GdkGLProc_glPresentFrameDualFillNV) gdk_gl_get_proc_address ("glPresentFrameDualFillNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3fNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib3fNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPresentFrameDualFillNV () - %s",
+               (_procs_GL_NV_present_video.glPresentFrameDualFillNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3fNV);
+  return (GdkGLProc) (_procs_GL_NV_present_video.glPresentFrameDualFillNV);
 }
 
-/* glVertexAttrib3fvNV */
+/* glGetVideoivNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3fvNV (void)
+gdk_gl_get_glGetVideoivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib3fvNV == (GdkGLProc_glVertexAttrib3fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib3fvNV =
-      (GdkGLProc_glVertexAttrib3fvNV) gdk_gl_get_proc_address ("glVertexAttrib3fvNV");
+  if (_procs_GL_NV_present_video.glGetVideoivNV == (GdkGLProc_glGetVideoivNV) -1)
+    _procs_GL_NV_present_video.glGetVideoivNV =
+      (GdkGLProc_glGetVideoivNV) gdk_gl_get_proc_address ("glGetVideoivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib3fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVideoivNV () - %s",
+               (_procs_GL_NV_present_video.glGetVideoivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3fvNV);
+  return (GdkGLProc) (_procs_GL_NV_present_video.glGetVideoivNV);
 }
 
-/* glVertexAttrib3sNV */
+/* glGetVideouivNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3sNV (void)
+gdk_gl_get_glGetVideouivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib3sNV == (GdkGLProc_glVertexAttrib3sNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib3sNV =
-      (GdkGLProc_glVertexAttrib3sNV) gdk_gl_get_proc_address ("glVertexAttrib3sNV");
+  if (_procs_GL_NV_present_video.glGetVideouivNV == (GdkGLProc_glGetVideouivNV) -1)
+    _procs_GL_NV_present_video.glGetVideouivNV =
+      (GdkGLProc_glGetVideouivNV) gdk_gl_get_proc_address ("glGetVideouivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3sNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib3sNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVideouivNV () - %s",
+               (_procs_GL_NV_present_video.glGetVideouivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3sNV);
+  return (GdkGLProc) (_procs_GL_NV_present_video.glGetVideouivNV);
 }
 
-/* glVertexAttrib3svNV */
+/* glGetVideoi64vNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3svNV (void)
+gdk_gl_get_glGetVideoi64vNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib3svNV == (GdkGLProc_glVertexAttrib3svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib3svNV =
-      (GdkGLProc_glVertexAttrib3svNV) gdk_gl_get_proc_address ("glVertexAttrib3svNV");
+  if (_procs_GL_NV_present_video.glGetVideoi64vNV == (GdkGLProc_glGetVideoi64vNV) -1)
+    _procs_GL_NV_present_video.glGetVideoi64vNV =
+      (GdkGLProc_glGetVideoi64vNV) gdk_gl_get_proc_address ("glGetVideoi64vNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib3svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVideoi64vNV () - %s",
+               (_procs_GL_NV_present_video.glGetVideoi64vNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib3svNV);
+  return (GdkGLProc) (_procs_GL_NV_present_video.glGetVideoi64vNV);
 }
 
-/* glVertexAttrib4dNV */
+/* glGetVideoui64vNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4dNV (void)
+gdk_gl_get_glGetVideoui64vNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4dNV == (GdkGLProc_glVertexAttrib4dNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4dNV =
-      (GdkGLProc_glVertexAttrib4dNV) gdk_gl_get_proc_address ("glVertexAttrib4dNV");
+  if (_procs_GL_NV_present_video.glGetVideoui64vNV == (GdkGLProc_glGetVideoui64vNV) -1)
+    _procs_GL_NV_present_video.glGetVideoui64vNV =
+      (GdkGLProc_glGetVideoui64vNV) gdk_gl_get_proc_address ("glGetVideoui64vNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4dNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4dNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVideoui64vNV () - %s",
+               (_procs_GL_NV_present_video.glGetVideoui64vNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4dNV);
+  return (GdkGLProc) (_procs_GL_NV_present_video.glGetVideoui64vNV);
 }
 
-/* glVertexAttrib4dvNV */
-GdkGLProc
-gdk_gl_get_glVertexAttrib4dvNV (void)
+/* Get GL_NV_present_video functions */
+GdkGL_GL_NV_present_video *
+gdk_gl_get_GL_NV_present_video (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4dvNV == (GdkGLProc_glVertexAttrib4dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4dvNV =
-      (GdkGLProc_glVertexAttrib4dvNV) gdk_gl_get_proc_address ("glVertexAttrib4dvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_present_video");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glPresentFrameKeyedNV () != NULL);
+          supported &= (gdk_gl_get_glPresentFrameDualFillNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideoivNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideouivNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideoi64vNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideoui64vNV () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_NV_present_video () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4dvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_present_video;
 }
 
-/* glVertexAttrib4fNV */
+/*
+ * GL_EXT_transform_feedback
+ */
+
+static GdkGL_GL_EXT_transform_feedback _procs_GL_EXT_transform_feedback = {
+  (GdkGLProc_glBeginTransformFeedbackEXT) -1,
+  (GdkGLProc_glEndTransformFeedbackEXT) -1,
+  (GdkGLProc_glBindBufferRangeEXT) -1,
+  (GdkGLProc_glBindBufferOffsetEXT) -1,
+  (GdkGLProc_glBindBufferBaseEXT) -1,
+  (GdkGLProc_glTransformFeedbackVaryingsEXT) -1,
+  (GdkGLProc_glGetTransformFeedbackVaryingEXT) -1
+};
+
+/* glBeginTransformFeedbackEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4fNV (void)
+gdk_gl_get_glBeginTransformFeedbackEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4fNV == (GdkGLProc_glVertexAttrib4fNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4fNV =
-      (GdkGLProc_glVertexAttrib4fNV) gdk_gl_get_proc_address ("glVertexAttrib4fNV");
+  if (_procs_GL_EXT_transform_feedback.glBeginTransformFeedbackEXT == (GdkGLProc_glBeginTransformFeedbackEXT) -1)
+    _procs_GL_EXT_transform_feedback.glBeginTransformFeedbackEXT =
+      (GdkGLProc_glBeginTransformFeedbackEXT) gdk_gl_get_proc_address ("glBeginTransformFeedbackEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4fNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4fNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginTransformFeedbackEXT () - %s",
+               (_procs_GL_EXT_transform_feedback.glBeginTransformFeedbackEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4fNV);
+  return (GdkGLProc) (_procs_GL_EXT_transform_feedback.glBeginTransformFeedbackEXT);
 }
 
-/* glVertexAttrib4fvNV */
+/* glEndTransformFeedbackEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4fvNV (void)
+gdk_gl_get_glEndTransformFeedbackEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4fvNV == (GdkGLProc_glVertexAttrib4fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4fvNV =
-      (GdkGLProc_glVertexAttrib4fvNV) gdk_gl_get_proc_address ("glVertexAttrib4fvNV");
+  if (_procs_GL_EXT_transform_feedback.glEndTransformFeedbackEXT == (GdkGLProc_glEndTransformFeedbackEXT) -1)
+    _procs_GL_EXT_transform_feedback.glEndTransformFeedbackEXT =
+      (GdkGLProc_glEndTransformFeedbackEXT) gdk_gl_get_proc_address ("glEndTransformFeedbackEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndTransformFeedbackEXT () - %s",
+               (_procs_GL_EXT_transform_feedback.glEndTransformFeedbackEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4fvNV);
+  return (GdkGLProc) (_procs_GL_EXT_transform_feedback.glEndTransformFeedbackEXT);
 }
 
-/* glVertexAttrib4sNV */
+/* glBindBufferRangeEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4sNV (void)
+gdk_gl_get_glBindBufferRangeEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4sNV == (GdkGLProc_glVertexAttrib4sNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4sNV =
-      (GdkGLProc_glVertexAttrib4sNV) gdk_gl_get_proc_address ("glVertexAttrib4sNV");
+  if (_procs_GL_EXT_transform_feedback.glBindBufferRangeEXT == (GdkGLProc_glBindBufferRangeEXT) -1)
+    _procs_GL_EXT_transform_feedback.glBindBufferRangeEXT =
+      (GdkGLProc_glBindBufferRangeEXT) gdk_gl_get_proc_address ("glBindBufferRangeEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4sNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4sNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferRangeEXT () - %s",
+               (_procs_GL_EXT_transform_feedback.glBindBufferRangeEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4sNV);
+  return (GdkGLProc) (_procs_GL_EXT_transform_feedback.glBindBufferRangeEXT);
 }
 
-/* glVertexAttrib4svNV */
+/* glBindBufferOffsetEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4svNV (void)
+gdk_gl_get_glBindBufferOffsetEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4svNV == (GdkGLProc_glVertexAttrib4svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4svNV =
-      (GdkGLProc_glVertexAttrib4svNV) gdk_gl_get_proc_address ("glVertexAttrib4svNV");
+  if (_procs_GL_EXT_transform_feedback.glBindBufferOffsetEXT == (GdkGLProc_glBindBufferOffsetEXT) -1)
+    _procs_GL_EXT_transform_feedback.glBindBufferOffsetEXT =
+      (GdkGLProc_glBindBufferOffsetEXT) gdk_gl_get_proc_address ("glBindBufferOffsetEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferOffsetEXT () - %s",
+               (_procs_GL_EXT_transform_feedback.glBindBufferOffsetEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4svNV);
+  return (GdkGLProc) (_procs_GL_EXT_transform_feedback.glBindBufferOffsetEXT);
 }
 
-/* glVertexAttrib4ubNV */
+/* glBindBufferBaseEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4ubNV (void)
+gdk_gl_get_glBindBufferBaseEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4ubNV == (GdkGLProc_glVertexAttrib4ubNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4ubNV =
-      (GdkGLProc_glVertexAttrib4ubNV) gdk_gl_get_proc_address ("glVertexAttrib4ubNV");
+  if (_procs_GL_EXT_transform_feedback.glBindBufferBaseEXT == (GdkGLProc_glBindBufferBaseEXT) -1)
+    _procs_GL_EXT_transform_feedback.glBindBufferBaseEXT =
+      (GdkGLProc_glBindBufferBaseEXT) gdk_gl_get_proc_address ("glBindBufferBaseEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4ubNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4ubNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindBufferBaseEXT () - %s",
+               (_procs_GL_EXT_transform_feedback.glBindBufferBaseEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4ubNV);
+  return (GdkGLProc) (_procs_GL_EXT_transform_feedback.glBindBufferBaseEXT);
 }
 
-/* glVertexAttrib4ubvNV */
+/* glTransformFeedbackVaryingsEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4ubvNV (void)
+gdk_gl_get_glTransformFeedbackVaryingsEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttrib4ubvNV == (GdkGLProc_glVertexAttrib4ubvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttrib4ubvNV =
-      (GdkGLProc_glVertexAttrib4ubvNV) gdk_gl_get_proc_address ("glVertexAttrib4ubvNV");
+  if (_procs_GL_EXT_transform_feedback.glTransformFeedbackVaryingsEXT == (GdkGLProc_glTransformFeedbackVaryingsEXT) -1)
+    _procs_GL_EXT_transform_feedback.glTransformFeedbackVaryingsEXT =
+      (GdkGLProc_glTransformFeedbackVaryingsEXT) gdk_gl_get_proc_address ("glTransformFeedbackVaryingsEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4ubvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttrib4ubvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTransformFeedbackVaryingsEXT () - %s",
+               (_procs_GL_EXT_transform_feedback.glTransformFeedbackVaryingsEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttrib4ubvNV);
+  return (GdkGLProc) (_procs_GL_EXT_transform_feedback.glTransformFeedbackVaryingsEXT);
 }
 
-/* glVertexAttribs1dvNV */
+/* glGetTransformFeedbackVaryingEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs1dvNV (void)
+gdk_gl_get_glGetTransformFeedbackVaryingEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs1dvNV == (GdkGLProc_glVertexAttribs1dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs1dvNV =
-      (GdkGLProc_glVertexAttribs1dvNV) gdk_gl_get_proc_address ("glVertexAttribs1dvNV");
+  if (_procs_GL_EXT_transform_feedback.glGetTransformFeedbackVaryingEXT == (GdkGLProc_glGetTransformFeedbackVaryingEXT) -1)
+    _procs_GL_EXT_transform_feedback.glGetTransformFeedbackVaryingEXT =
+      (GdkGLProc_glGetTransformFeedbackVaryingEXT) gdk_gl_get_proc_address ("glGetTransformFeedbackVaryingEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs1dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs1dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTransformFeedbackVaryingEXT () - %s",
+               (_procs_GL_EXT_transform_feedback.glGetTransformFeedbackVaryingEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs1dvNV);
+  return (GdkGLProc) (_procs_GL_EXT_transform_feedback.glGetTransformFeedbackVaryingEXT);
 }
 
-/* glVertexAttribs1fvNV */
-GdkGLProc
-gdk_gl_get_glVertexAttribs1fvNV (void)
+/* Get GL_EXT_transform_feedback functions */
+GdkGL_GL_EXT_transform_feedback *
+gdk_gl_get_GL_EXT_transform_feedback (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs1fvNV == (GdkGLProc_glVertexAttribs1fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs1fvNV =
-      (GdkGLProc_glVertexAttribs1fvNV) gdk_gl_get_proc_address ("glVertexAttribs1fvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_transform_feedback");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBeginTransformFeedbackEXT () != NULL);
+          supported &= (gdk_gl_get_glEndTransformFeedbackEXT () != NULL);
+          supported &= (gdk_gl_get_glBindBufferRangeEXT () != NULL);
+          supported &= (gdk_gl_get_glBindBufferOffsetEXT () != NULL);
+          supported &= (gdk_gl_get_glBindBufferBaseEXT () != NULL);
+          supported &= (gdk_gl_get_glTransformFeedbackVaryingsEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTransformFeedbackVaryingEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs1fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs1fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_transform_feedback () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs1fvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_transform_feedback;
 }
 
-/* glVertexAttribs1svNV */
+/*
+ * GL_EXT_direct_state_access
+ */
+
+static GdkGL_GL_EXT_direct_state_access _procs_GL_EXT_direct_state_access = {
+  (GdkGLProc_glClientAttribDefaultEXT) -1,
+  (GdkGLProc_glPushClientAttribDefaultEXT) -1,
+  (GdkGLProc_glMatrixLoadfEXT) -1,
+  (GdkGLProc_glMatrixLoaddEXT) -1,
+  (GdkGLProc_glMatrixMultfEXT) -1,
+  (GdkGLProc_glMatrixMultdEXT) -1,
+  (GdkGLProc_glMatrixLoadIdentityEXT) -1,
+  (GdkGLProc_glMatrixRotatefEXT) -1,
+  (GdkGLProc_glMatrixRotatedEXT) -1,
+  (GdkGLProc_glMatrixScalefEXT) -1,
+  (GdkGLProc_glMatrixScaledEXT) -1,
+  (GdkGLProc_glMatrixTranslatefEXT) -1,
+  (GdkGLProc_glMatrixTranslatedEXT) -1,
+  (GdkGLProc_glMatrixFrustumEXT) -1,
+  (GdkGLProc_glMatrixOrthoEXT) -1,
+  (GdkGLProc_glMatrixPopEXT) -1,
+  (GdkGLProc_glMatrixPushEXT) -1,
+  (GdkGLProc_glMatrixLoadTransposefEXT) -1,
+  (GdkGLProc_glMatrixLoadTransposedEXT) -1,
+  (GdkGLProc_glMatrixMultTransposefEXT) -1,
+  (GdkGLProc_glMatrixMultTransposedEXT) -1,
+  (GdkGLProc_glTextureParameterfEXT) -1,
+  (GdkGLProc_glTextureParameterfvEXT) -1,
+  (GdkGLProc_glTextureParameteriEXT) -1,
+  (GdkGLProc_glTextureParameterivEXT) -1,
+  (GdkGLProc_glTextureImage1DEXT) -1,
+  (GdkGLProc_glTextureImage2DEXT) -1,
+  (GdkGLProc_glTextureSubImage1DEXT) -1,
+  (GdkGLProc_glTextureSubImage2DEXT) -1,
+  (GdkGLProc_glCopyTextureImage1DEXT) -1,
+  (GdkGLProc_glCopyTextureImage2DEXT) -1,
+  (GdkGLProc_glCopyTextureSubImage1DEXT) -1,
+  (GdkGLProc_glCopyTextureSubImage2DEXT) -1,
+  (GdkGLProc_glGetTextureImageEXT) -1,
+  (GdkGLProc_glGetTextureParameterfvEXT) -1,
+  (GdkGLProc_glGetTextureParameterivEXT) -1,
+  (GdkGLProc_glGetTextureLevelParameterfvEXT) -1,
+  (GdkGLProc_glGetTextureLevelParameterivEXT) -1,
+  (GdkGLProc_glTextureImage3DEXT) -1,
+  (GdkGLProc_glTextureSubImage3DEXT) -1,
+  (GdkGLProc_glCopyTextureSubImage3DEXT) -1,
+  (GdkGLProc_glMultiTexParameterfEXT) -1,
+  (GdkGLProc_glMultiTexParameterfvEXT) -1,
+  (GdkGLProc_glMultiTexParameteriEXT) -1,
+  (GdkGLProc_glMultiTexParameterivEXT) -1,
+  (GdkGLProc_glMultiTexImage1DEXT) -1,
+  (GdkGLProc_glMultiTexImage2DEXT) -1,
+  (GdkGLProc_glMultiTexSubImage1DEXT) -1,
+  (GdkGLProc_glMultiTexSubImage2DEXT) -1,
+  (GdkGLProc_glCopyMultiTexImage1DEXT) -1,
+  (GdkGLProc_glCopyMultiTexImage2DEXT) -1,
+  (GdkGLProc_glCopyMultiTexSubImage1DEXT) -1,
+  (GdkGLProc_glCopyMultiTexSubImage2DEXT) -1,
+  (GdkGLProc_glGetMultiTexImageEXT) -1,
+  (GdkGLProc_glGetMultiTexParameterfvEXT) -1,
+  (GdkGLProc_glGetMultiTexParameterivEXT) -1,
+  (GdkGLProc_glGetMultiTexLevelParameterfvEXT) -1,
+  (GdkGLProc_glGetMultiTexLevelParameterivEXT) -1,
+  (GdkGLProc_glMultiTexImage3DEXT) -1,
+  (GdkGLProc_glMultiTexSubImage3DEXT) -1,
+  (GdkGLProc_glCopyMultiTexSubImage3DEXT) -1,
+  (GdkGLProc_glBindMultiTextureEXT) -1,
+  (GdkGLProc_glEnableClientStateIndexedEXT) -1,
+  (GdkGLProc_glDisableClientStateIndexedEXT) -1,
+  (GdkGLProc_glMultiTexCoordPointerEXT) -1,
+  (GdkGLProc_glMultiTexEnvfEXT) -1,
+  (GdkGLProc_glMultiTexEnvfvEXT) -1,
+  (GdkGLProc_glMultiTexEnviEXT) -1,
+  (GdkGLProc_glMultiTexEnvivEXT) -1,
+  (GdkGLProc_glMultiTexGendEXT) -1,
+  (GdkGLProc_glMultiTexGendvEXT) -1,
+  (GdkGLProc_glMultiTexGenfEXT) -1,
+  (GdkGLProc_glMultiTexGenfvEXT) -1,
+  (GdkGLProc_glMultiTexGeniEXT) -1,
+  (GdkGLProc_glMultiTexGenivEXT) -1,
+  (GdkGLProc_glGetMultiTexEnvfvEXT) -1,
+  (GdkGLProc_glGetMultiTexEnvivEXT) -1,
+  (GdkGLProc_glGetMultiTexGendvEXT) -1,
+  (GdkGLProc_glGetMultiTexGenfvEXT) -1,
+  (GdkGLProc_glGetMultiTexGenivEXT) -1,
+  (GdkGLProc_glGetFloatIndexedvEXT) -1,
+  (GdkGLProc_glGetDoubleIndexedvEXT) -1,
+  (GdkGLProc_glGetPointerIndexedvEXT) -1,
+  (GdkGLProc_glCompressedTextureImage3DEXT) -1,
+  (GdkGLProc_glCompressedTextureImage2DEXT) -1,
+  (GdkGLProc_glCompressedTextureImage1DEXT) -1,
+  (GdkGLProc_glCompressedTextureSubImage3DEXT) -1,
+  (GdkGLProc_glCompressedTextureSubImage2DEXT) -1,
+  (GdkGLProc_glCompressedTextureSubImage1DEXT) -1,
+  (GdkGLProc_glGetCompressedTextureImageEXT) -1,
+  (GdkGLProc_glCompressedMultiTexImage3DEXT) -1,
+  (GdkGLProc_glCompressedMultiTexImage2DEXT) -1,
+  (GdkGLProc_glCompressedMultiTexImage1DEXT) -1,
+  (GdkGLProc_glCompressedMultiTexSubImage3DEXT) -1,
+  (GdkGLProc_glCompressedMultiTexSubImage2DEXT) -1,
+  (GdkGLProc_glCompressedMultiTexSubImage1DEXT) -1,
+  (GdkGLProc_glGetCompressedMultiTexImageEXT) -1,
+  (GdkGLProc_glNamedProgramStringEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameter4dEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameter4dvEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameter4fEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameter4fvEXT) -1,
+  (GdkGLProc_glGetNamedProgramLocalParameterdvEXT) -1,
+  (GdkGLProc_glGetNamedProgramLocalParameterfvEXT) -1,
+  (GdkGLProc_glGetNamedProgramivEXT) -1,
+  (GdkGLProc_glGetNamedProgramStringEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameters4fvEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameterI4iEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameterI4ivEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParametersI4ivEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameterI4uiEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParameterI4uivEXT) -1,
+  (GdkGLProc_glNamedProgramLocalParametersI4uivEXT) -1,
+  (GdkGLProc_glGetNamedProgramLocalParameterIivEXT) -1,
+  (GdkGLProc_glGetNamedProgramLocalParameterIuivEXT) -1,
+  (GdkGLProc_glTextureParameterIivEXT) -1,
+  (GdkGLProc_glTextureParameterIuivEXT) -1,
+  (GdkGLProc_glGetTextureParameterIivEXT) -1,
+  (GdkGLProc_glGetTextureParameterIuivEXT) -1,
+  (GdkGLProc_glMultiTexParameterIivEXT) -1,
+  (GdkGLProc_glMultiTexParameterIuivEXT) -1,
+  (GdkGLProc_glGetMultiTexParameterIivEXT) -1,
+  (GdkGLProc_glGetMultiTexParameterIuivEXT) -1,
+  (GdkGLProc_glProgramUniform1fEXT) -1,
+  (GdkGLProc_glProgramUniform2fEXT) -1,
+  (GdkGLProc_glProgramUniform3fEXT) -1,
+  (GdkGLProc_glProgramUniform4fEXT) -1,
+  (GdkGLProc_glProgramUniform1iEXT) -1,
+  (GdkGLProc_glProgramUniform2iEXT) -1,
+  (GdkGLProc_glProgramUniform3iEXT) -1,
+  (GdkGLProc_glProgramUniform4iEXT) -1,
+  (GdkGLProc_glProgramUniform1fvEXT) -1,
+  (GdkGLProc_glProgramUniform2fvEXT) -1,
+  (GdkGLProc_glProgramUniform3fvEXT) -1,
+  (GdkGLProc_glProgramUniform4fvEXT) -1,
+  (GdkGLProc_glProgramUniform1ivEXT) -1,
+  (GdkGLProc_glProgramUniform2ivEXT) -1,
+  (GdkGLProc_glProgramUniform3ivEXT) -1,
+  (GdkGLProc_glProgramUniform4ivEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix2fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix3fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix4fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix2x3fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix3x2fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix2x4fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix4x2fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix3x4fvEXT) -1,
+  (GdkGLProc_glProgramUniformMatrix4x3fvEXT) -1,
+  (GdkGLProc_glProgramUniform1uiEXT) -1,
+  (GdkGLProc_glProgramUniform2uiEXT) -1,
+  (GdkGLProc_glProgramUniform3uiEXT) -1,
+  (GdkGLProc_glProgramUniform4uiEXT) -1,
+  (GdkGLProc_glProgramUniform1uivEXT) -1,
+  (GdkGLProc_glProgramUniform2uivEXT) -1,
+  (GdkGLProc_glProgramUniform3uivEXT) -1,
+  (GdkGLProc_glProgramUniform4uivEXT) -1,
+  (GdkGLProc_glNamedBufferDataEXT) -1,
+  (GdkGLProc_glNamedBufferSubDataEXT) -1,
+  (GdkGLProc_glMapNamedBufferEXT) -1,
+  (GdkGLProc_glUnmapNamedBufferEXT) -1,
+  (GdkGLProc_glGetNamedBufferParameterivEXT) -1,
+  (GdkGLProc_glGetNamedBufferPointervEXT) -1,
+  (GdkGLProc_glGetNamedBufferSubDataEXT) -1,
+  (GdkGLProc_glTextureBufferEXT) -1,
+  (GdkGLProc_glMultiTexBufferEXT) -1,
+  (GdkGLProc_glNamedRenderbufferStorageEXT) -1,
+  (GdkGLProc_glGetNamedRenderbufferParameterivEXT) -1,
+  (GdkGLProc_glCheckNamedFramebufferStatusEXT) -1,
+  (GdkGLProc_glNamedFramebufferTexture1DEXT) -1,
+  (GdkGLProc_glNamedFramebufferTexture2DEXT) -1,
+  (GdkGLProc_glNamedFramebufferTexture3DEXT) -1,
+  (GdkGLProc_glNamedFramebufferRenderbufferEXT) -1,
+  (GdkGLProc_glGetNamedFramebufferAttachmentParameterivEXT) -1,
+  (GdkGLProc_glGenerateTextureMipmapEXT) -1,
+  (GdkGLProc_glGenerateMultiTexMipmapEXT) -1,
+  (GdkGLProc_glFramebufferDrawBufferEXT) -1,
+  (GdkGLProc_glFramebufferDrawBuffersEXT) -1,
+  (GdkGLProc_glFramebufferReadBufferEXT) -1,
+  (GdkGLProc_glGetFramebufferParameterivEXT) -1,
+  (GdkGLProc_glNamedRenderbufferStorageMultisampleEXT) -1,
+  (GdkGLProc_glNamedRenderbufferStorageMultisampleCoverageEXT) -1,
+  (GdkGLProc_glNamedFramebufferTextureEXT) -1,
+  (GdkGLProc_glNamedFramebufferTextureLayerEXT) -1,
+  (GdkGLProc_glNamedFramebufferTextureFaceEXT) -1,
+  (GdkGLProc_glTextureRenderbufferEXT) -1,
+  (GdkGLProc_glMultiTexRenderbufferEXT) -1
+};
+
+/* glClientAttribDefaultEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs1svNV (void)
+gdk_gl_get_glClientAttribDefaultEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs1svNV == (GdkGLProc_glVertexAttribs1svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs1svNV =
-      (GdkGLProc_glVertexAttribs1svNV) gdk_gl_get_proc_address ("glVertexAttribs1svNV");
+  if (_procs_GL_EXT_direct_state_access.glClientAttribDefaultEXT == (GdkGLProc_glClientAttribDefaultEXT) -1)
+    _procs_GL_EXT_direct_state_access.glClientAttribDefaultEXT =
+      (GdkGLProc_glClientAttribDefaultEXT) gdk_gl_get_proc_address ("glClientAttribDefaultEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs1svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs1svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glClientAttribDefaultEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glClientAttribDefaultEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs1svNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glClientAttribDefaultEXT);
 }
 
-/* glVertexAttribs2dvNV */
+/* glPushClientAttribDefaultEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs2dvNV (void)
+gdk_gl_get_glPushClientAttribDefaultEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs2dvNV == (GdkGLProc_glVertexAttribs2dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs2dvNV =
-      (GdkGLProc_glVertexAttribs2dvNV) gdk_gl_get_proc_address ("glVertexAttribs2dvNV");
+  if (_procs_GL_EXT_direct_state_access.glPushClientAttribDefaultEXT == (GdkGLProc_glPushClientAttribDefaultEXT) -1)
+    _procs_GL_EXT_direct_state_access.glPushClientAttribDefaultEXT =
+      (GdkGLProc_glPushClientAttribDefaultEXT) gdk_gl_get_proc_address ("glPushClientAttribDefaultEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs2dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs2dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glPushClientAttribDefaultEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glPushClientAttribDefaultEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs2dvNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glPushClientAttribDefaultEXT);
 }
 
-/* glVertexAttribs2fvNV */
+/* glMatrixLoadfEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs2fvNV (void)
+gdk_gl_get_glMatrixLoadfEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs2fvNV == (GdkGLProc_glVertexAttribs2fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs2fvNV =
-      (GdkGLProc_glVertexAttribs2fvNV) gdk_gl_get_proc_address ("glVertexAttribs2fvNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixLoadfEXT == (GdkGLProc_glMatrixLoadfEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixLoadfEXT =
+      (GdkGLProc_glMatrixLoadfEXT) gdk_gl_get_proc_address ("glMatrixLoadfEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs2fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs2fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixLoadfEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixLoadfEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs2fvNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixLoadfEXT);
 }
 
-/* glVertexAttribs2svNV */
+/* glMatrixLoaddEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs2svNV (void)
+gdk_gl_get_glMatrixLoaddEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs2svNV == (GdkGLProc_glVertexAttribs2svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs2svNV =
-      (GdkGLProc_glVertexAttribs2svNV) gdk_gl_get_proc_address ("glVertexAttribs2svNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixLoaddEXT == (GdkGLProc_glMatrixLoaddEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixLoaddEXT =
+      (GdkGLProc_glMatrixLoaddEXT) gdk_gl_get_proc_address ("glMatrixLoaddEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs2svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs2svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixLoaddEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixLoaddEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs2svNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixLoaddEXT);
 }
 
-/* glVertexAttribs3dvNV */
+/* glMatrixMultfEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs3dvNV (void)
+gdk_gl_get_glMatrixMultfEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs3dvNV == (GdkGLProc_glVertexAttribs3dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs3dvNV =
-      (GdkGLProc_glVertexAttribs3dvNV) gdk_gl_get_proc_address ("glVertexAttribs3dvNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixMultfEXT == (GdkGLProc_glMatrixMultfEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixMultfEXT =
+      (GdkGLProc_glMatrixMultfEXT) gdk_gl_get_proc_address ("glMatrixMultfEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs3dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs3dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixMultfEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixMultfEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs3dvNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixMultfEXT);
 }
 
-/* glVertexAttribs3fvNV */
+/* glMatrixMultdEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs3fvNV (void)
+gdk_gl_get_glMatrixMultdEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs3fvNV == (GdkGLProc_glVertexAttribs3fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs3fvNV =
-      (GdkGLProc_glVertexAttribs3fvNV) gdk_gl_get_proc_address ("glVertexAttribs3fvNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixMultdEXT == (GdkGLProc_glMatrixMultdEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixMultdEXT =
+      (GdkGLProc_glMatrixMultdEXT) gdk_gl_get_proc_address ("glMatrixMultdEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs3fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs3fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixMultdEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixMultdEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs3fvNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixMultdEXT);
 }
 
-/* glVertexAttribs3svNV */
+/* glMatrixLoadIdentityEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs3svNV (void)
+gdk_gl_get_glMatrixLoadIdentityEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs3svNV == (GdkGLProc_glVertexAttribs3svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs3svNV =
-      (GdkGLProc_glVertexAttribs3svNV) gdk_gl_get_proc_address ("glVertexAttribs3svNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixLoadIdentityEXT == (GdkGLProc_glMatrixLoadIdentityEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixLoadIdentityEXT =
+      (GdkGLProc_glMatrixLoadIdentityEXT) gdk_gl_get_proc_address ("glMatrixLoadIdentityEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs3svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs3svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixLoadIdentityEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixLoadIdentityEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs3svNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixLoadIdentityEXT);
 }
 
-/* glVertexAttribs4dvNV */
+/* glMatrixRotatefEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs4dvNV (void)
+gdk_gl_get_glMatrixRotatefEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs4dvNV == (GdkGLProc_glVertexAttribs4dvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs4dvNV =
-      (GdkGLProc_glVertexAttribs4dvNV) gdk_gl_get_proc_address ("glVertexAttribs4dvNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixRotatefEXT == (GdkGLProc_glMatrixRotatefEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixRotatefEXT =
+      (GdkGLProc_glMatrixRotatefEXT) gdk_gl_get_proc_address ("glMatrixRotatefEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs4dvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs4dvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixRotatefEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixRotatefEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4dvNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixRotatefEXT);
 }
 
-/* glVertexAttribs4fvNV */
+/* glMatrixRotatedEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs4fvNV (void)
+gdk_gl_get_glMatrixRotatedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs4fvNV == (GdkGLProc_glVertexAttribs4fvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs4fvNV =
-      (GdkGLProc_glVertexAttribs4fvNV) gdk_gl_get_proc_address ("glVertexAttribs4fvNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixRotatedEXT == (GdkGLProc_glMatrixRotatedEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixRotatedEXT =
+      (GdkGLProc_glMatrixRotatedEXT) gdk_gl_get_proc_address ("glMatrixRotatedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs4fvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs4fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixRotatedEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixRotatedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4fvNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixRotatedEXT);
 }
 
-/* glVertexAttribs4svNV */
+/* glMatrixScalefEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs4svNV (void)
+gdk_gl_get_glMatrixScalefEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs4svNV == (GdkGLProc_glVertexAttribs4svNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs4svNV =
-      (GdkGLProc_glVertexAttribs4svNV) gdk_gl_get_proc_address ("glVertexAttribs4svNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixScalefEXT == (GdkGLProc_glMatrixScalefEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixScalefEXT =
+      (GdkGLProc_glMatrixScalefEXT) gdk_gl_get_proc_address ("glMatrixScalefEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs4svNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs4svNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixScalefEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixScalefEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4svNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixScalefEXT);
 }
 
-/* glVertexAttribs4ubvNV */
+/* glMatrixScaledEXT */
 GdkGLProc
-gdk_gl_get_glVertexAttribs4ubvNV (void)
+gdk_gl_get_glMatrixScaledEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_vertex_program.glVertexAttribs4ubvNV == (GdkGLProc_glVertexAttribs4ubvNV) -1)
-    _procs_GL_NV_vertex_program.glVertexAttribs4ubvNV =
-      (GdkGLProc_glVertexAttribs4ubvNV) gdk_gl_get_proc_address ("glVertexAttribs4ubvNV");
+  if (_procs_GL_EXT_direct_state_access.glMatrixScaledEXT == (GdkGLProc_glMatrixScaledEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixScaledEXT =
+      (GdkGLProc_glMatrixScaledEXT) gdk_gl_get_proc_address ("glMatrixScaledEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs4ubvNV () - %s",
-               (_procs_GL_NV_vertex_program.glVertexAttribs4ubvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixScaledEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixScaledEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_vertex_program.glVertexAttribs4ubvNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixScaledEXT);
 }
 
-/* Get GL_NV_vertex_program functions */
-GdkGL_GL_NV_vertex_program *
-gdk_gl_get_GL_NV_vertex_program (void)
+/* glMatrixTranslatefEXT */
+GdkGLProc
+gdk_gl_get_glMatrixTranslatefEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_NV_vertex_program");
+  if (_procs_GL_EXT_direct_state_access.glMatrixTranslatefEXT == (GdkGLProc_glMatrixTranslatefEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixTranslatefEXT =
+      (GdkGLProc_glMatrixTranslatefEXT) gdk_gl_get_proc_address ("glMatrixTranslatefEXT");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glAreProgramsResidentNV () != NULL);
-          supported &= (gdk_gl_get_glBindProgramNV () != NULL);
-          supported &= (gdk_gl_get_glDeleteProgramsNV () != NULL);
-          supported &= (gdk_gl_get_glExecuteProgramNV () != NULL);
-          supported &= (gdk_gl_get_glGenProgramsNV () != NULL);
-          supported &= (gdk_gl_get_glGetProgramParameterdvNV () != NULL);
-          supported &= (gdk_gl_get_glGetProgramParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetProgramivNV () != NULL);
-          supported &= (gdk_gl_get_glGetProgramStringNV () != NULL);
-          supported &= (gdk_gl_get_glGetTrackMatrixivNV () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribdvNV () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribivNV () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribPointervNV () != NULL);
-          supported &= (gdk_gl_get_glIsProgramNV () != NULL);
-          supported &= (gdk_gl_get_glLoadProgramNV () != NULL);
-          supported &= (gdk_gl_get_glProgramParameter4dNV () != NULL);
-          supported &= (gdk_gl_get_glProgramParameter4dvNV () != NULL);
-          supported &= (gdk_gl_get_glProgramParameter4fNV () != NULL);
-          supported &= (gdk_gl_get_glProgramParameter4fvNV () != NULL);
-          supported &= (gdk_gl_get_glProgramParameters4dvNV () != NULL);
-          supported &= (gdk_gl_get_glProgramParameters4fvNV () != NULL);
-          supported &= (gdk_gl_get_glRequestResidentProgramsNV () != NULL);
-          supported &= (gdk_gl_get_glTrackMatrixNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribPointerNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1dNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1fNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1sNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2dNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2fNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2sNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3dNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3fNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3sNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4dNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4fNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4sNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4ubNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4ubvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs1dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs1fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs1svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs2dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs2fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs2svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs3dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs3fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs3svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs4dvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs4fvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs4svNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs4ubvNV () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMatrixTranslatefEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixTranslatefEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixTranslatefEXT);
+}
+
+/* glMatrixTranslatedEXT */
+GdkGLProc
+gdk_gl_get_glMatrixTranslatedEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_direct_state_access.glMatrixTranslatedEXT == (GdkGLProc_glMatrixTranslatedEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixTranslatedEXT =
+      (GdkGLProc_glMatrixTranslatedEXT) gdk_gl_get_proc_address ("glMatrixTranslatedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_vertex_program () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixTranslatedEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixTranslatedEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixTranslatedEXT);
+}
+
+/* glMatrixFrustumEXT */
+GdkGLProc
+gdk_gl_get_glMatrixFrustumEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_NV_vertex_program;
-}
+  if (_procs_GL_EXT_direct_state_access.glMatrixFrustumEXT == (GdkGLProc_glMatrixFrustumEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixFrustumEXT =
+      (GdkGLProc_glMatrixFrustumEXT) gdk_gl_get_proc_address ("glMatrixFrustumEXT");
 
-/*
- * GL_ATI_envmap_bumpmap
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMatrixFrustumEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixFrustumEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_ATI_envmap_bumpmap _procs_GL_ATI_envmap_bumpmap = {
-  (GdkGLProc_glTexBumpParameterivATI) -1,
-  (GdkGLProc_glTexBumpParameterfvATI) -1,
-  (GdkGLProc_glGetTexBumpParameterivATI) -1,
-  (GdkGLProc_glGetTexBumpParameterfvATI) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixFrustumEXT);
+}
 
-/* glTexBumpParameterivATI */
+/* glMatrixOrthoEXT */
 GdkGLProc
-gdk_gl_get_glTexBumpParameterivATI (void)
+gdk_gl_get_glMatrixOrthoEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI == (GdkGLProc_glTexBumpParameterivATI) -1)
-    _procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI =
-      (GdkGLProc_glTexBumpParameterivATI) gdk_gl_get_proc_address ("glTexBumpParameterivATI");
+  if (_procs_GL_EXT_direct_state_access.glMatrixOrthoEXT == (GdkGLProc_glMatrixOrthoEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixOrthoEXT =
+      (GdkGLProc_glMatrixOrthoEXT) gdk_gl_get_proc_address ("glMatrixOrthoEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexBumpParameterivATI () - %s",
-               (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixOrthoEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixOrthoEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixOrthoEXT);
 }
 
-/* glTexBumpParameterfvATI */
+/* glMatrixPopEXT */
 GdkGLProc
-gdk_gl_get_glTexBumpParameterfvATI (void)
+gdk_gl_get_glMatrixPopEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI == (GdkGLProc_glTexBumpParameterfvATI) -1)
-    _procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI =
-      (GdkGLProc_glTexBumpParameterfvATI) gdk_gl_get_proc_address ("glTexBumpParameterfvATI");
+  if (_procs_GL_EXT_direct_state_access.glMatrixPopEXT == (GdkGLProc_glMatrixPopEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixPopEXT =
+      (GdkGLProc_glMatrixPopEXT) gdk_gl_get_proc_address ("glMatrixPopEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexBumpParameterfvATI () - %s",
-               (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixPopEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixPopEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glTexBumpParameterfvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixPopEXT);
 }
 
-/* glGetTexBumpParameterivATI */
+/* glMatrixPushEXT */
 GdkGLProc
-gdk_gl_get_glGetTexBumpParameterivATI (void)
+gdk_gl_get_glMatrixPushEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI == (GdkGLProc_glGetTexBumpParameterivATI) -1)
-    _procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI =
-      (GdkGLProc_glGetTexBumpParameterivATI) gdk_gl_get_proc_address ("glGetTexBumpParameterivATI");
+  if (_procs_GL_EXT_direct_state_access.glMatrixPushEXT == (GdkGLProc_glMatrixPushEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixPushEXT =
+      (GdkGLProc_glMatrixPushEXT) gdk_gl_get_proc_address ("glMatrixPushEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetTexBumpParameterivATI () - %s",
-               (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixPushEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixPushEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixPushEXT);
 }
 
-/* glGetTexBumpParameterfvATI */
+/* glMatrixLoadTransposefEXT */
 GdkGLProc
-gdk_gl_get_glGetTexBumpParameterfvATI (void)
+gdk_gl_get_glMatrixLoadTransposefEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI == (GdkGLProc_glGetTexBumpParameterfvATI) -1)
-    _procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI =
-      (GdkGLProc_glGetTexBumpParameterfvATI) gdk_gl_get_proc_address ("glGetTexBumpParameterfvATI");
+  if (_procs_GL_EXT_direct_state_access.glMatrixLoadTransposefEXT == (GdkGLProc_glMatrixLoadTransposefEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixLoadTransposefEXT =
+      (GdkGLProc_glMatrixLoadTransposefEXT) gdk_gl_get_proc_address ("glMatrixLoadTransposefEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetTexBumpParameterfvATI () - %s",
-               (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixLoadTransposefEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixLoadTransposefEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_envmap_bumpmap.glGetTexBumpParameterfvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixLoadTransposefEXT);
 }
 
-/* Get GL_ATI_envmap_bumpmap functions */
-GdkGL_GL_ATI_envmap_bumpmap *
-gdk_gl_get_GL_ATI_envmap_bumpmap (void)
+/* glMatrixLoadTransposedEXT */
+GdkGLProc
+gdk_gl_get_glMatrixLoadTransposedEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_envmap_bumpmap");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTexBumpParameterivATI () != NULL);
-          supported &= (gdk_gl_get_glTexBumpParameterfvATI () != NULL);
-          supported &= (gdk_gl_get_glGetTexBumpParameterivATI () != NULL);
-          supported &= (gdk_gl_get_glGetTexBumpParameterfvATI () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glMatrixLoadTransposedEXT == (GdkGLProc_glMatrixLoadTransposedEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixLoadTransposedEXT =
+      (GdkGLProc_glMatrixLoadTransposedEXT) gdk_gl_get_proc_address ("glMatrixLoadTransposedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_envmap_bumpmap () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixLoadTransposedEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixLoadTransposedEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixLoadTransposedEXT);
+}
+
+/* glMatrixMultTransposefEXT */
+GdkGLProc
+gdk_gl_get_glMatrixMultTransposefEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ATI_envmap_bumpmap;
-}
+  if (_procs_GL_EXT_direct_state_access.glMatrixMultTransposefEXT == (GdkGLProc_glMatrixMultTransposefEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixMultTransposefEXT =
+      (GdkGLProc_glMatrixMultTransposefEXT) gdk_gl_get_proc_address ("glMatrixMultTransposefEXT");
 
-/*
- * GL_ATI_fragment_shader
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glMatrixMultTransposefEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixMultTransposefEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_ATI_fragment_shader _procs_GL_ATI_fragment_shader = {
-  (GdkGLProc_glGenFragmentShadersATI) -1,
-  (GdkGLProc_glBindFragmentShaderATI) -1,
-  (GdkGLProc_glDeleteFragmentShaderATI) -1,
-  (GdkGLProc_glBeginFragmentShaderATI) -1,
-  (GdkGLProc_glEndFragmentShaderATI) -1,
-  (GdkGLProc_glPassTexCoordATI) -1,
-  (GdkGLProc_glSampleMapATI) -1,
-  (GdkGLProc_glColorFragmentOp1ATI) -1,
-  (GdkGLProc_glColorFragmentOp2ATI) -1,
-  (GdkGLProc_glColorFragmentOp3ATI) -1,
-  (GdkGLProc_glAlphaFragmentOp1ATI) -1,
-  (GdkGLProc_glAlphaFragmentOp2ATI) -1,
-  (GdkGLProc_glAlphaFragmentOp3ATI) -1,
-  (GdkGLProc_glSetFragmentShaderConstantATI) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixMultTransposefEXT);
+}
 
-/* glGenFragmentShadersATI */
+/* glMatrixMultTransposedEXT */
 GdkGLProc
-gdk_gl_get_glGenFragmentShadersATI (void)
+gdk_gl_get_glMatrixMultTransposedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glGenFragmentShadersATI == (GdkGLProc_glGenFragmentShadersATI) -1)
-    _procs_GL_ATI_fragment_shader.glGenFragmentShadersATI =
-      (GdkGLProc_glGenFragmentShadersATI) gdk_gl_get_proc_address ("glGenFragmentShadersATI");
+  if (_procs_GL_EXT_direct_state_access.glMatrixMultTransposedEXT == (GdkGLProc_glMatrixMultTransposedEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMatrixMultTransposedEXT =
+      (GdkGLProc_glMatrixMultTransposedEXT) gdk_gl_get_proc_address ("glMatrixMultTransposedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenFragmentShadersATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glGenFragmentShadersATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMatrixMultTransposedEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMatrixMultTransposedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glGenFragmentShadersATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMatrixMultTransposedEXT);
 }
 
-/* glBindFragmentShaderATI */
+/* glTextureParameterfEXT */
 GdkGLProc
-gdk_gl_get_glBindFragmentShaderATI (void)
+gdk_gl_get_glTextureParameterfEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glBindFragmentShaderATI == (GdkGLProc_glBindFragmentShaderATI) -1)
-    _procs_GL_ATI_fragment_shader.glBindFragmentShaderATI =
-      (GdkGLProc_glBindFragmentShaderATI) gdk_gl_get_proc_address ("glBindFragmentShaderATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureParameterfEXT == (GdkGLProc_glTextureParameterfEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureParameterfEXT =
+      (GdkGLProc_glTextureParameterfEXT) gdk_gl_get_proc_address ("glTextureParameterfEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindFragmentShaderATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glBindFragmentShaderATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureParameterfEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureParameterfEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glBindFragmentShaderATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureParameterfEXT);
 }
 
-/* glDeleteFragmentShaderATI */
+/* glTextureParameterfvEXT */
 GdkGLProc
-gdk_gl_get_glDeleteFragmentShaderATI (void)
+gdk_gl_get_glTextureParameterfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI == (GdkGLProc_glDeleteFragmentShaderATI) -1)
-    _procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI =
-      (GdkGLProc_glDeleteFragmentShaderATI) gdk_gl_get_proc_address ("glDeleteFragmentShaderATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureParameterfvEXT == (GdkGLProc_glTextureParameterfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureParameterfvEXT =
+      (GdkGLProc_glTextureParameterfvEXT) gdk_gl_get_proc_address ("glTextureParameterfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteFragmentShaderATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureParameterfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureParameterfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glDeleteFragmentShaderATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureParameterfvEXT);
 }
 
-/* glBeginFragmentShaderATI */
+/* glTextureParameteriEXT */
 GdkGLProc
-gdk_gl_get_glBeginFragmentShaderATI (void)
+gdk_gl_get_glTextureParameteriEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI == (GdkGLProc_glBeginFragmentShaderATI) -1)
-    _procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI =
-      (GdkGLProc_glBeginFragmentShaderATI) gdk_gl_get_proc_address ("glBeginFragmentShaderATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureParameteriEXT == (GdkGLProc_glTextureParameteriEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureParameteriEXT =
+      (GdkGLProc_glTextureParameteriEXT) gdk_gl_get_proc_address ("glTextureParameteriEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBeginFragmentShaderATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureParameteriEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureParameteriEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glBeginFragmentShaderATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureParameteriEXT);
 }
 
-/* glEndFragmentShaderATI */
+/* glTextureParameterivEXT */
 GdkGLProc
-gdk_gl_get_glEndFragmentShaderATI (void)
+gdk_gl_get_glTextureParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glEndFragmentShaderATI == (GdkGLProc_glEndFragmentShaderATI) -1)
-    _procs_GL_ATI_fragment_shader.glEndFragmentShaderATI =
-      (GdkGLProc_glEndFragmentShaderATI) gdk_gl_get_proc_address ("glEndFragmentShaderATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureParameterivEXT == (GdkGLProc_glTextureParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureParameterivEXT =
+      (GdkGLProc_glTextureParameterivEXT) gdk_gl_get_proc_address ("glTextureParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEndFragmentShaderATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glEndFragmentShaderATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glEndFragmentShaderATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureParameterivEXT);
 }
 
-/* glPassTexCoordATI */
+/* glTextureImage1DEXT */
 GdkGLProc
-gdk_gl_get_glPassTexCoordATI (void)
+gdk_gl_get_glTextureImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glPassTexCoordATI == (GdkGLProc_glPassTexCoordATI) -1)
-    _procs_GL_ATI_fragment_shader.glPassTexCoordATI =
-      (GdkGLProc_glPassTexCoordATI) gdk_gl_get_proc_address ("glPassTexCoordATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureImage1DEXT == (GdkGLProc_glTextureImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureImage1DEXT =
+      (GdkGLProc_glTextureImage1DEXT) gdk_gl_get_proc_address ("glTextureImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPassTexCoordATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glPassTexCoordATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glPassTexCoordATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureImage1DEXT);
 }
 
-/* glSampleMapATI */
+/* glTextureImage2DEXT */
 GdkGLProc
-gdk_gl_get_glSampleMapATI (void)
+gdk_gl_get_glTextureImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glSampleMapATI == (GdkGLProc_glSampleMapATI) -1)
-    _procs_GL_ATI_fragment_shader.glSampleMapATI =
-      (GdkGLProc_glSampleMapATI) gdk_gl_get_proc_address ("glSampleMapATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureImage2DEXT == (GdkGLProc_glTextureImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureImage2DEXT =
+      (GdkGLProc_glTextureImage2DEXT) gdk_gl_get_proc_address ("glTextureImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSampleMapATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glSampleMapATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glSampleMapATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureImage2DEXT);
 }
 
-/* glColorFragmentOp1ATI */
+/* glTextureSubImage1DEXT */
 GdkGLProc
-gdk_gl_get_glColorFragmentOp1ATI (void)
+gdk_gl_get_glTextureSubImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI == (GdkGLProc_glColorFragmentOp1ATI) -1)
-    _procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI =
-      (GdkGLProc_glColorFragmentOp1ATI) gdk_gl_get_proc_address ("glColorFragmentOp1ATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureSubImage1DEXT == (GdkGLProc_glTextureSubImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureSubImage1DEXT =
+      (GdkGLProc_glTextureSubImage1DEXT) gdk_gl_get_proc_address ("glTextureSubImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorFragmentOp1ATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureSubImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureSubImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glColorFragmentOp1ATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureSubImage1DEXT);
 }
 
-/* glColorFragmentOp2ATI */
+/* glTextureSubImage2DEXT */
 GdkGLProc
-gdk_gl_get_glColorFragmentOp2ATI (void)
+gdk_gl_get_glTextureSubImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI == (GdkGLProc_glColorFragmentOp2ATI) -1)
-    _procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI =
-      (GdkGLProc_glColorFragmentOp2ATI) gdk_gl_get_proc_address ("glColorFragmentOp2ATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureSubImage2DEXT == (GdkGLProc_glTextureSubImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureSubImage2DEXT =
+      (GdkGLProc_glTextureSubImage2DEXT) gdk_gl_get_proc_address ("glTextureSubImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorFragmentOp2ATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureSubImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureSubImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glColorFragmentOp2ATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureSubImage2DEXT);
 }
 
-/* glColorFragmentOp3ATI */
+/* glCopyTextureImage1DEXT */
 GdkGLProc
-gdk_gl_get_glColorFragmentOp3ATI (void)
+gdk_gl_get_glCopyTextureImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI == (GdkGLProc_glColorFragmentOp3ATI) -1)
-    _procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI =
-      (GdkGLProc_glColorFragmentOp3ATI) gdk_gl_get_proc_address ("glColorFragmentOp3ATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyTextureImage1DEXT == (GdkGLProc_glCopyTextureImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyTextureImage1DEXT =
+      (GdkGLProc_glCopyTextureImage1DEXT) gdk_gl_get_proc_address ("glCopyTextureImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColorFragmentOp3ATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyTextureImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyTextureImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glColorFragmentOp3ATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyTextureImage1DEXT);
 }
 
-/* glAlphaFragmentOp1ATI */
+/* glCopyTextureImage2DEXT */
 GdkGLProc
-gdk_gl_get_glAlphaFragmentOp1ATI (void)
+gdk_gl_get_glCopyTextureImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI == (GdkGLProc_glAlphaFragmentOp1ATI) -1)
-    _procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI =
-      (GdkGLProc_glAlphaFragmentOp1ATI) gdk_gl_get_proc_address ("glAlphaFragmentOp1ATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyTextureImage2DEXT == (GdkGLProc_glCopyTextureImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyTextureImage2DEXT =
+      (GdkGLProc_glCopyTextureImage2DEXT) gdk_gl_get_proc_address ("glCopyTextureImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glAlphaFragmentOp1ATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyTextureImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyTextureImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp1ATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyTextureImage2DEXT);
 }
 
-/* glAlphaFragmentOp2ATI */
+/* glCopyTextureSubImage1DEXT */
 GdkGLProc
-gdk_gl_get_glAlphaFragmentOp2ATI (void)
+gdk_gl_get_glCopyTextureSubImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI == (GdkGLProc_glAlphaFragmentOp2ATI) -1)
-    _procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI =
-      (GdkGLProc_glAlphaFragmentOp2ATI) gdk_gl_get_proc_address ("glAlphaFragmentOp2ATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage1DEXT == (GdkGLProc_glCopyTextureSubImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyTextureSubImage1DEXT =
+      (GdkGLProc_glCopyTextureSubImage1DEXT) gdk_gl_get_proc_address ("glCopyTextureSubImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glAlphaFragmentOp2ATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyTextureSubImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp2ATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage1DEXT);
 }
 
-/* glAlphaFragmentOp3ATI */
+/* glCopyTextureSubImage2DEXT */
 GdkGLProc
-gdk_gl_get_glAlphaFragmentOp3ATI (void)
+gdk_gl_get_glCopyTextureSubImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI == (GdkGLProc_glAlphaFragmentOp3ATI) -1)
-    _procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI =
-      (GdkGLProc_glAlphaFragmentOp3ATI) gdk_gl_get_proc_address ("glAlphaFragmentOp3ATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage2DEXT == (GdkGLProc_glCopyTextureSubImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyTextureSubImage2DEXT =
+      (GdkGLProc_glCopyTextureSubImage2DEXT) gdk_gl_get_proc_address ("glCopyTextureSubImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glAlphaFragmentOp3ATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyTextureSubImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glAlphaFragmentOp3ATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage2DEXT);
 }
 
-/* glSetFragmentShaderConstantATI */
+/* glGetTextureImageEXT */
 GdkGLProc
-gdk_gl_get_glSetFragmentShaderConstantATI (void)
+gdk_gl_get_glGetTextureImageEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI == (GdkGLProc_glSetFragmentShaderConstantATI) -1)
-    _procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI =
-      (GdkGLProc_glSetFragmentShaderConstantATI) gdk_gl_get_proc_address ("glSetFragmentShaderConstantATI");
+  if (_procs_GL_EXT_direct_state_access.glGetTextureImageEXT == (GdkGLProc_glGetTextureImageEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetTextureImageEXT =
+      (GdkGLProc_glGetTextureImageEXT) gdk_gl_get_proc_address ("glGetTextureImageEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSetFragmentShaderConstantATI () - %s",
-               (_procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTextureImageEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetTextureImageEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_fragment_shader.glSetFragmentShaderConstantATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetTextureImageEXT);
 }
 
-/* Get GL_ATI_fragment_shader functions */
-GdkGL_GL_ATI_fragment_shader *
-gdk_gl_get_GL_ATI_fragment_shader (void)
+/* glGetTextureParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glGetTextureParameterfvEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_fragment_shader");
+  if (_procs_GL_EXT_direct_state_access.glGetTextureParameterfvEXT == (GdkGLProc_glGetTextureParameterfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetTextureParameterfvEXT =
+      (GdkGLProc_glGetTextureParameterfvEXT) gdk_gl_get_proc_address ("glGetTextureParameterfvEXT");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glGenFragmentShadersATI () != NULL);
-          supported &= (gdk_gl_get_glBindFragmentShaderATI () != NULL);
-          supported &= (gdk_gl_get_glDeleteFragmentShaderATI () != NULL);
-          supported &= (gdk_gl_get_glBeginFragmentShaderATI () != NULL);
-          supported &= (gdk_gl_get_glEndFragmentShaderATI () != NULL);
-          supported &= (gdk_gl_get_glPassTexCoordATI () != NULL);
-          supported &= (gdk_gl_get_glSampleMapATI () != NULL);
-          supported &= (gdk_gl_get_glColorFragmentOp1ATI () != NULL);
-          supported &= (gdk_gl_get_glColorFragmentOp2ATI () != NULL);
-          supported &= (gdk_gl_get_glColorFragmentOp3ATI () != NULL);
-          supported &= (gdk_gl_get_glAlphaFragmentOp1ATI () != NULL);
-          supported &= (gdk_gl_get_glAlphaFragmentOp2ATI () != NULL);
-          supported &= (gdk_gl_get_glAlphaFragmentOp3ATI () != NULL);
-          supported &= (gdk_gl_get_glSetFragmentShaderConstantATI () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetTextureParameterfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetTextureParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetTextureParameterfvEXT);
+}
+
+/* glGetTextureParameterivEXT */
+GdkGLProc
+gdk_gl_get_glGetTextureParameterivEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_direct_state_access.glGetTextureParameterivEXT == (GdkGLProc_glGetTextureParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetTextureParameterivEXT =
+      (GdkGLProc_glGetTextureParameterivEXT) gdk_gl_get_proc_address ("glGetTextureParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_fragment_shader () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTextureParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetTextureParameterivEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetTextureParameterivEXT);
+}
 
-  if (!supported)
+/* glGetTextureLevelParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glGetTextureLevelParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ATI_fragment_shader;
-}
+  if (_procs_GL_EXT_direct_state_access.glGetTextureLevelParameterfvEXT == (GdkGLProc_glGetTextureLevelParameterfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetTextureLevelParameterfvEXT =
+      (GdkGLProc_glGetTextureLevelParameterfvEXT) gdk_gl_get_proc_address ("glGetTextureLevelParameterfvEXT");
 
-/*
- * GL_ATI_pn_triangles
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetTextureLevelParameterfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetTextureLevelParameterfvEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_ATI_pn_triangles _procs_GL_ATI_pn_triangles = {
-  (GdkGLProc_glPNTrianglesiATI) -1,
-  (GdkGLProc_glPNTrianglesfATI) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetTextureLevelParameterfvEXT);
+}
 
-/* glPNTrianglesiATI */
+/* glGetTextureLevelParameterivEXT */
 GdkGLProc
-gdk_gl_get_glPNTrianglesiATI (void)
+gdk_gl_get_glGetTextureLevelParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_pn_triangles.glPNTrianglesiATI == (GdkGLProc_glPNTrianglesiATI) -1)
-    _procs_GL_ATI_pn_triangles.glPNTrianglesiATI =
-      (GdkGLProc_glPNTrianglesiATI) gdk_gl_get_proc_address ("glPNTrianglesiATI");
+  if (_procs_GL_EXT_direct_state_access.glGetTextureLevelParameterivEXT == (GdkGLProc_glGetTextureLevelParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetTextureLevelParameterivEXT =
+      (GdkGLProc_glGetTextureLevelParameterivEXT) gdk_gl_get_proc_address ("glGetTextureLevelParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPNTrianglesiATI () - %s",
-               (_procs_GL_ATI_pn_triangles.glPNTrianglesiATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTextureLevelParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetTextureLevelParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_pn_triangles.glPNTrianglesiATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetTextureLevelParameterivEXT);
 }
 
-/* glPNTrianglesfATI */
+/* glTextureImage3DEXT */
 GdkGLProc
-gdk_gl_get_glPNTrianglesfATI (void)
+gdk_gl_get_glTextureImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_pn_triangles.glPNTrianglesfATI == (GdkGLProc_glPNTrianglesfATI) -1)
-    _procs_GL_ATI_pn_triangles.glPNTrianglesfATI =
-      (GdkGLProc_glPNTrianglesfATI) gdk_gl_get_proc_address ("glPNTrianglesfATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureImage3DEXT == (GdkGLProc_glTextureImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureImage3DEXT =
+      (GdkGLProc_glTextureImage3DEXT) gdk_gl_get_proc_address ("glTextureImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPNTrianglesfATI () - %s",
-               (_procs_GL_ATI_pn_triangles.glPNTrianglesfATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_pn_triangles.glPNTrianglesfATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureImage3DEXT);
 }
 
-/* Get GL_ATI_pn_triangles functions */
-GdkGL_GL_ATI_pn_triangles *
-gdk_gl_get_GL_ATI_pn_triangles (void)
+/* glTextureSubImage3DEXT */
+GdkGLProc
+gdk_gl_get_glTextureSubImage3DEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_pn_triangles");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glPNTrianglesiATI () != NULL);
-          supported &= (gdk_gl_get_glPNTrianglesfATI () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glTextureSubImage3DEXT == (GdkGLProc_glTextureSubImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureSubImage3DEXT =
+      (GdkGLProc_glTextureSubImage3DEXT) gdk_gl_get_proc_address ("glTextureSubImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_pn_triangles () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureSubImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureSubImage3DEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureSubImage3DEXT);
+}
+
+/* glCopyTextureSubImage3DEXT */
+GdkGLProc
+gdk_gl_get_glCopyTextureSubImage3DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ATI_pn_triangles;
-}
+  if (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage3DEXT == (GdkGLProc_glCopyTextureSubImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyTextureSubImage3DEXT =
+      (GdkGLProc_glCopyTextureSubImage3DEXT) gdk_gl_get_proc_address ("glCopyTextureSubImage3DEXT");
 
-/*
- * GL_ATI_vertex_array_object
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCopyTextureSubImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage3DEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_ATI_vertex_array_object _procs_GL_ATI_vertex_array_object = {
-  (GdkGLProc_glNewObjectBufferATI) -1,
-  (GdkGLProc_glIsObjectBufferATI) -1,
-  (GdkGLProc_glUpdateObjectBufferATI) -1,
-  (GdkGLProc_glGetObjectBufferfvATI) -1,
-  (GdkGLProc_glGetObjectBufferivATI) -1,
-  (GdkGLProc_glFreeObjectBufferATI) -1,
-  (GdkGLProc_glArrayObjectATI) -1,
-  (GdkGLProc_glGetArrayObjectfvATI) -1,
-  (GdkGLProc_glGetArrayObjectivATI) -1,
-  (GdkGLProc_glVariantArrayObjectATI) -1,
-  (GdkGLProc_glGetVariantArrayObjectfvATI) -1,
-  (GdkGLProc_glGetVariantArrayObjectivATI) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyTextureSubImage3DEXT);
+}
 
-/* glNewObjectBufferATI */
+/* glMultiTexParameterfEXT */
 GdkGLProc
-gdk_gl_get_glNewObjectBufferATI (void)
+gdk_gl_get_glMultiTexParameterfEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glNewObjectBufferATI == (GdkGLProc_glNewObjectBufferATI) -1)
-    _procs_GL_ATI_vertex_array_object.glNewObjectBufferATI =
-      (GdkGLProc_glNewObjectBufferATI) gdk_gl_get_proc_address ("glNewObjectBufferATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexParameterfEXT == (GdkGLProc_glMultiTexParameterfEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexParameterfEXT =
+      (GdkGLProc_glMultiTexParameterfEXT) gdk_gl_get_proc_address ("glMultiTexParameterfEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNewObjectBufferATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glNewObjectBufferATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexParameterfEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexParameterfEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glNewObjectBufferATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexParameterfEXT);
 }
 
-/* glIsObjectBufferATI */
+/* glMultiTexParameterfvEXT */
 GdkGLProc
-gdk_gl_get_glIsObjectBufferATI (void)
+gdk_gl_get_glMultiTexParameterfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glIsObjectBufferATI == (GdkGLProc_glIsObjectBufferATI) -1)
-    _procs_GL_ATI_vertex_array_object.glIsObjectBufferATI =
-      (GdkGLProc_glIsObjectBufferATI) gdk_gl_get_proc_address ("glIsObjectBufferATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexParameterfvEXT == (GdkGLProc_glMultiTexParameterfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexParameterfvEXT =
+      (GdkGLProc_glMultiTexParameterfvEXT) gdk_gl_get_proc_address ("glMultiTexParameterfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsObjectBufferATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glIsObjectBufferATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexParameterfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexParameterfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glIsObjectBufferATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexParameterfvEXT);
 }
 
-/* glUpdateObjectBufferATI */
+/* glMultiTexParameteriEXT */
 GdkGLProc
-gdk_gl_get_glUpdateObjectBufferATI (void)
+gdk_gl_get_glMultiTexParameteriEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI == (GdkGLProc_glUpdateObjectBufferATI) -1)
-    _procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI =
-      (GdkGLProc_glUpdateObjectBufferATI) gdk_gl_get_proc_address ("glUpdateObjectBufferATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexParameteriEXT == (GdkGLProc_glMultiTexParameteriEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexParameteriEXT =
+      (GdkGLProc_glMultiTexParameteriEXT) gdk_gl_get_proc_address ("glMultiTexParameteriEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glUpdateObjectBufferATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexParameteriEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexParameteriEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glUpdateObjectBufferATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexParameteriEXT);
 }
 
-/* glGetObjectBufferfvATI */
+/* glMultiTexParameterivEXT */
 GdkGLProc
-gdk_gl_get_glGetObjectBufferfvATI (void)
+gdk_gl_get_glMultiTexParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI == (GdkGLProc_glGetObjectBufferfvATI) -1)
-    _procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI =
-      (GdkGLProc_glGetObjectBufferfvATI) gdk_gl_get_proc_address ("glGetObjectBufferfvATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexParameterivEXT == (GdkGLProc_glMultiTexParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexParameterivEXT =
+      (GdkGLProc_glMultiTexParameterivEXT) gdk_gl_get_proc_address ("glMultiTexParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetObjectBufferfvATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetObjectBufferfvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexParameterivEXT);
 }
 
-/* glGetObjectBufferivATI */
+/* glMultiTexImage1DEXT */
 GdkGLProc
-gdk_gl_get_glGetObjectBufferivATI (void)
+gdk_gl_get_glMultiTexImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI == (GdkGLProc_glGetObjectBufferivATI) -1)
-    _procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI =
-      (GdkGLProc_glGetObjectBufferivATI) gdk_gl_get_proc_address ("glGetObjectBufferivATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexImage1DEXT == (GdkGLProc_glMultiTexImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexImage1DEXT =
+      (GdkGLProc_glMultiTexImage1DEXT) gdk_gl_get_proc_address ("glMultiTexImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetObjectBufferivATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetObjectBufferivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexImage1DEXT);
 }
 
-/* glFreeObjectBufferATI */
+/* glMultiTexImage2DEXT */
 GdkGLProc
-gdk_gl_get_glFreeObjectBufferATI (void)
+gdk_gl_get_glMultiTexImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI == (GdkGLProc_glFreeObjectBufferATI) -1)
-    _procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI =
-      (GdkGLProc_glFreeObjectBufferATI) gdk_gl_get_proc_address ("glFreeObjectBufferATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexImage2DEXT == (GdkGLProc_glMultiTexImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexImage2DEXT =
+      (GdkGLProc_glMultiTexImage2DEXT) gdk_gl_get_proc_address ("glMultiTexImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFreeObjectBufferATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glFreeObjectBufferATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexImage2DEXT);
 }
 
-/* glArrayObjectATI */
+/* glMultiTexSubImage1DEXT */
 GdkGLProc
-gdk_gl_get_glArrayObjectATI (void)
+gdk_gl_get_glMultiTexSubImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glArrayObjectATI == (GdkGLProc_glArrayObjectATI) -1)
-    _procs_GL_ATI_vertex_array_object.glArrayObjectATI =
-      (GdkGLProc_glArrayObjectATI) gdk_gl_get_proc_address ("glArrayObjectATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexSubImage1DEXT == (GdkGLProc_glMultiTexSubImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexSubImage1DEXT =
+      (GdkGLProc_glMultiTexSubImage1DEXT) gdk_gl_get_proc_address ("glMultiTexSubImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glArrayObjectATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glArrayObjectATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexSubImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexSubImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glArrayObjectATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexSubImage1DEXT);
 }
 
-/* glGetArrayObjectfvATI */
+/* glMultiTexSubImage2DEXT */
 GdkGLProc
-gdk_gl_get_glGetArrayObjectfvATI (void)
+gdk_gl_get_glMultiTexSubImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI == (GdkGLProc_glGetArrayObjectfvATI) -1)
-    _procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI =
-      (GdkGLProc_glGetArrayObjectfvATI) gdk_gl_get_proc_address ("glGetArrayObjectfvATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexSubImage2DEXT == (GdkGLProc_glMultiTexSubImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexSubImage2DEXT =
+      (GdkGLProc_glMultiTexSubImage2DEXT) gdk_gl_get_proc_address ("glMultiTexSubImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetArrayObjectfvATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexSubImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexSubImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetArrayObjectfvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexSubImage2DEXT);
 }
 
-/* glGetArrayObjectivATI */
+/* glCopyMultiTexImage1DEXT */
 GdkGLProc
-gdk_gl_get_glGetArrayObjectivATI (void)
+gdk_gl_get_glCopyMultiTexImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI == (GdkGLProc_glGetArrayObjectivATI) -1)
-    _procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI =
-      (GdkGLProc_glGetArrayObjectivATI) gdk_gl_get_proc_address ("glGetArrayObjectivATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyMultiTexImage1DEXT == (GdkGLProc_glCopyMultiTexImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyMultiTexImage1DEXT =
+      (GdkGLProc_glCopyMultiTexImage1DEXT) gdk_gl_get_proc_address ("glCopyMultiTexImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetArrayObjectivATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyMultiTexImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyMultiTexImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetArrayObjectivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyMultiTexImage1DEXT);
 }
 
-/* glVariantArrayObjectATI */
+/* glCopyMultiTexImage2DEXT */
 GdkGLProc
-gdk_gl_get_glVariantArrayObjectATI (void)
+gdk_gl_get_glCopyMultiTexImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI == (GdkGLProc_glVariantArrayObjectATI) -1)
-    _procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI =
-      (GdkGLProc_glVariantArrayObjectATI) gdk_gl_get_proc_address ("glVariantArrayObjectATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyMultiTexImage2DEXT == (GdkGLProc_glCopyMultiTexImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyMultiTexImage2DEXT =
+      (GdkGLProc_glCopyMultiTexImage2DEXT) gdk_gl_get_proc_address ("glCopyMultiTexImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantArrayObjectATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyMultiTexImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyMultiTexImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glVariantArrayObjectATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyMultiTexImage2DEXT);
 }
 
-/* glGetVariantArrayObjectfvATI */
+/* glCopyMultiTexSubImage1DEXT */
 GdkGLProc
-gdk_gl_get_glGetVariantArrayObjectfvATI (void)
+gdk_gl_get_glCopyMultiTexSubImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI == (GdkGLProc_glGetVariantArrayObjectfvATI) -1)
-    _procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI =
-      (GdkGLProc_glGetVariantArrayObjectfvATI) gdk_gl_get_proc_address ("glGetVariantArrayObjectfvATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage1DEXT == (GdkGLProc_glCopyMultiTexSubImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage1DEXT =
+      (GdkGLProc_glCopyMultiTexSubImage1DEXT) gdk_gl_get_proc_address ("glCopyMultiTexSubImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVariantArrayObjectfvATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyMultiTexSubImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectfvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage1DEXT);
 }
 
-/* glGetVariantArrayObjectivATI */
+/* glCopyMultiTexSubImage2DEXT */
 GdkGLProc
-gdk_gl_get_glGetVariantArrayObjectivATI (void)
+gdk_gl_get_glCopyMultiTexSubImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI == (GdkGLProc_glGetVariantArrayObjectivATI) -1)
-    _procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI =
-      (GdkGLProc_glGetVariantArrayObjectivATI) gdk_gl_get_proc_address ("glGetVariantArrayObjectivATI");
+  if (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage2DEXT == (GdkGLProc_glCopyMultiTexSubImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage2DEXT =
+      (GdkGLProc_glCopyMultiTexSubImage2DEXT) gdk_gl_get_proc_address ("glCopyMultiTexSubImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVariantArrayObjectivATI () - %s",
-               (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyMultiTexSubImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_array_object.glGetVariantArrayObjectivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage2DEXT);
 }
 
-/* Get GL_ATI_vertex_array_object functions */
-GdkGL_GL_ATI_vertex_array_object *
-gdk_gl_get_GL_ATI_vertex_array_object (void)
+/* glGetMultiTexImageEXT */
+GdkGLProc
+gdk_gl_get_glGetMultiTexImageEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_vertex_array_object");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glNewObjectBufferATI () != NULL);
-          supported &= (gdk_gl_get_glIsObjectBufferATI () != NULL);
-          supported &= (gdk_gl_get_glUpdateObjectBufferATI () != NULL);
-          supported &= (gdk_gl_get_glGetObjectBufferfvATI () != NULL);
-          supported &= (gdk_gl_get_glGetObjectBufferivATI () != NULL);
-          supported &= (gdk_gl_get_glFreeObjectBufferATI () != NULL);
-          supported &= (gdk_gl_get_glArrayObjectATI () != NULL);
-          supported &= (gdk_gl_get_glGetArrayObjectfvATI () != NULL);
-          supported &= (gdk_gl_get_glGetArrayObjectivATI () != NULL);
-          supported &= (gdk_gl_get_glVariantArrayObjectATI () != NULL);
-          supported &= (gdk_gl_get_glGetVariantArrayObjectfvATI () != NULL);
-          supported &= (gdk_gl_get_glGetVariantArrayObjectivATI () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexImageEXT == (GdkGLProc_glGetMultiTexImageEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexImageEXT =
+      (GdkGLProc_glGetMultiTexImageEXT) gdk_gl_get_proc_address ("glGetMultiTexImageEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_vertex_array_object () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glGetMultiTexImageEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexImageEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_ATI_vertex_array_object;
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexImageEXT);
 }
 
-/*
- * GL_EXT_vertex_shader
- */
+/* glGetMultiTexParameterfvEXT */
+GdkGLProc
+gdk_gl_get_glGetMultiTexParameterfvEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_EXT_vertex_shader _procs_GL_EXT_vertex_shader = {
-  (GdkGLProc_glBeginVertexShaderEXT) -1,
-  (GdkGLProc_glEndVertexShaderEXT) -1,
-  (GdkGLProc_glBindVertexShaderEXT) -1,
-  (GdkGLProc_glGenVertexShadersEXT) -1,
-  (GdkGLProc_glDeleteVertexShaderEXT) -1,
-  (GdkGLProc_glShaderOp1EXT) -1,
-  (GdkGLProc_glShaderOp2EXT) -1,
-  (GdkGLProc_glShaderOp3EXT) -1,
-  (GdkGLProc_glSwizzleEXT) -1,
-  (GdkGLProc_glWriteMaskEXT) -1,
-  (GdkGLProc_glInsertComponentEXT) -1,
-  (GdkGLProc_glExtractComponentEXT) -1,
-  (GdkGLProc_glGenSymbolsEXT) -1,
-  (GdkGLProc_glSetInvariantEXT) -1,
-  (GdkGLProc_glSetLocalConstantEXT) -1,
-  (GdkGLProc_glVariantbvEXT) -1,
-  (GdkGLProc_glVariantsvEXT) -1,
-  (GdkGLProc_glVariantivEXT) -1,
-  (GdkGLProc_glVariantfvEXT) -1,
-  (GdkGLProc_glVariantdvEXT) -1,
-  (GdkGLProc_glVariantubvEXT) -1,
-  (GdkGLProc_glVariantusvEXT) -1,
-  (GdkGLProc_glVariantuivEXT) -1,
-  (GdkGLProc_glVariantPointerEXT) -1,
-  (GdkGLProc_glEnableVariantClientStateEXT) -1,
-  (GdkGLProc_glDisableVariantClientStateEXT) -1,
-  (GdkGLProc_glBindLightParameterEXT) -1,
-  (GdkGLProc_glBindMaterialParameterEXT) -1,
-  (GdkGLProc_glBindTexGenParameterEXT) -1,
-  (GdkGLProc_glBindTextureUnitParameterEXT) -1,
-  (GdkGLProc_glBindParameterEXT) -1,
-  (GdkGLProc_glIsVariantEnabledEXT) -1,
-  (GdkGLProc_glGetVariantBooleanvEXT) -1,
-  (GdkGLProc_glGetVariantIntegervEXT) -1,
-  (GdkGLProc_glGetVariantFloatvEXT) -1,
-  (GdkGLProc_glGetVariantPointervEXT) -1,
-  (GdkGLProc_glGetInvariantBooleanvEXT) -1,
-  (GdkGLProc_glGetInvariantIntegervEXT) -1,
-  (GdkGLProc_glGetInvariantFloatvEXT) -1,
-  (GdkGLProc_glGetLocalConstantBooleanvEXT) -1,
-  (GdkGLProc_glGetLocalConstantIntegervEXT) -1,
-  (GdkGLProc_glGetLocalConstantFloatvEXT) -1
-};
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterfvEXT == (GdkGLProc_glGetMultiTexParameterfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexParameterfvEXT =
+      (GdkGLProc_glGetMultiTexParameterfvEXT) gdk_gl_get_proc_address ("glGetMultiTexParameterfvEXT");
 
-/* glBeginVertexShaderEXT */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetMultiTexParameterfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterfvEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterfvEXT);
+}
+
+/* glGetMultiTexParameterivEXT */
 GdkGLProc
-gdk_gl_get_glBeginVertexShaderEXT (void)
+gdk_gl_get_glGetMultiTexParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT == (GdkGLProc_glBeginVertexShaderEXT) -1)
-    _procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT =
-      (GdkGLProc_glBeginVertexShaderEXT) gdk_gl_get_proc_address ("glBeginVertexShaderEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterivEXT == (GdkGLProc_glGetMultiTexParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexParameterivEXT =
+      (GdkGLProc_glGetMultiTexParameterivEXT) gdk_gl_get_proc_address ("glGetMultiTexParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBeginVertexShaderEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBeginVertexShaderEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterivEXT);
 }
 
-/* glEndVertexShaderEXT */
+/* glGetMultiTexLevelParameterfvEXT */
 GdkGLProc
-gdk_gl_get_glEndVertexShaderEXT (void)
+gdk_gl_get_glGetMultiTexLevelParameterfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glEndVertexShaderEXT == (GdkGLProc_glEndVertexShaderEXT) -1)
-    _procs_GL_EXT_vertex_shader.glEndVertexShaderEXT =
-      (GdkGLProc_glEndVertexShaderEXT) gdk_gl_get_proc_address ("glEndVertexShaderEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterfvEXT == (GdkGLProc_glGetMultiTexLevelParameterfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterfvEXT =
+      (GdkGLProc_glGetMultiTexLevelParameterfvEXT) gdk_gl_get_proc_address ("glGetMultiTexLevelParameterfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEndVertexShaderEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glEndVertexShaderEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexLevelParameterfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glEndVertexShaderEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterfvEXT);
 }
 
-/* glBindVertexShaderEXT */
+/* glGetMultiTexLevelParameterivEXT */
 GdkGLProc
-gdk_gl_get_glBindVertexShaderEXT (void)
+gdk_gl_get_glGetMultiTexLevelParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glBindVertexShaderEXT == (GdkGLProc_glBindVertexShaderEXT) -1)
-    _procs_GL_EXT_vertex_shader.glBindVertexShaderEXT =
-      (GdkGLProc_glBindVertexShaderEXT) gdk_gl_get_proc_address ("glBindVertexShaderEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterivEXT == (GdkGLProc_glGetMultiTexLevelParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterivEXT =
+      (GdkGLProc_glGetMultiTexLevelParameterivEXT) gdk_gl_get_proc_address ("glGetMultiTexLevelParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindVertexShaderEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glBindVertexShaderEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexLevelParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindVertexShaderEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexLevelParameterivEXT);
 }
 
-/* glGenVertexShadersEXT */
+/* glMultiTexImage3DEXT */
 GdkGLProc
-gdk_gl_get_glGenVertexShadersEXT (void)
+gdk_gl_get_glMultiTexImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGenVertexShadersEXT == (GdkGLProc_glGenVertexShadersEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGenVertexShadersEXT =
-      (GdkGLProc_glGenVertexShadersEXT) gdk_gl_get_proc_address ("glGenVertexShadersEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexImage3DEXT == (GdkGLProc_glMultiTexImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexImage3DEXT =
+      (GdkGLProc_glMultiTexImage3DEXT) gdk_gl_get_proc_address ("glMultiTexImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenVertexShadersEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGenVertexShadersEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGenVertexShadersEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexImage3DEXT);
 }
 
-/* glDeleteVertexShaderEXT */
+/* glMultiTexSubImage3DEXT */
 GdkGLProc
-gdk_gl_get_glDeleteVertexShaderEXT (void)
+gdk_gl_get_glMultiTexSubImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT == (GdkGLProc_glDeleteVertexShaderEXT) -1)
-    _procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT =
-      (GdkGLProc_glDeleteVertexShaderEXT) gdk_gl_get_proc_address ("glDeleteVertexShaderEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexSubImage3DEXT == (GdkGLProc_glMultiTexSubImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexSubImage3DEXT =
+      (GdkGLProc_glMultiTexSubImage3DEXT) gdk_gl_get_proc_address ("glMultiTexSubImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteVertexShaderEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexSubImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexSubImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glDeleteVertexShaderEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexSubImage3DEXT);
 }
 
-/* glShaderOp1EXT */
+/* glCopyMultiTexSubImage3DEXT */
 GdkGLProc
-gdk_gl_get_glShaderOp1EXT (void)
+gdk_gl_get_glCopyMultiTexSubImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glShaderOp1EXT == (GdkGLProc_glShaderOp1EXT) -1)
-    _procs_GL_EXT_vertex_shader.glShaderOp1EXT =
-      (GdkGLProc_glShaderOp1EXT) gdk_gl_get_proc_address ("glShaderOp1EXT");
+  if (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage3DEXT == (GdkGLProc_glCopyMultiTexSubImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage3DEXT =
+      (GdkGLProc_glCopyMultiTexSubImage3DEXT) gdk_gl_get_proc_address ("glCopyMultiTexSubImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glShaderOp1EXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glShaderOp1EXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyMultiTexSubImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glShaderOp1EXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCopyMultiTexSubImage3DEXT);
 }
 
-/* glShaderOp2EXT */
+/* glBindMultiTextureEXT */
 GdkGLProc
-gdk_gl_get_glShaderOp2EXT (void)
+gdk_gl_get_glBindMultiTextureEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glShaderOp2EXT == (GdkGLProc_glShaderOp2EXT) -1)
-    _procs_GL_EXT_vertex_shader.glShaderOp2EXT =
-      (GdkGLProc_glShaderOp2EXT) gdk_gl_get_proc_address ("glShaderOp2EXT");
+  if (_procs_GL_EXT_direct_state_access.glBindMultiTextureEXT == (GdkGLProc_glBindMultiTextureEXT) -1)
+    _procs_GL_EXT_direct_state_access.glBindMultiTextureEXT =
+      (GdkGLProc_glBindMultiTextureEXT) gdk_gl_get_proc_address ("glBindMultiTextureEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glShaderOp2EXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glShaderOp2EXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindMultiTextureEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glBindMultiTextureEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glShaderOp2EXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glBindMultiTextureEXT);
 }
 
-/* glShaderOp3EXT */
+/* glEnableClientStateIndexedEXT */
 GdkGLProc
-gdk_gl_get_glShaderOp3EXT (void)
+gdk_gl_get_glEnableClientStateIndexedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glShaderOp3EXT == (GdkGLProc_glShaderOp3EXT) -1)
-    _procs_GL_EXT_vertex_shader.glShaderOp3EXT =
-      (GdkGLProc_glShaderOp3EXT) gdk_gl_get_proc_address ("glShaderOp3EXT");
+  if (_procs_GL_EXT_direct_state_access.glEnableClientStateIndexedEXT == (GdkGLProc_glEnableClientStateIndexedEXT) -1)
+    _procs_GL_EXT_direct_state_access.glEnableClientStateIndexedEXT =
+      (GdkGLProc_glEnableClientStateIndexedEXT) gdk_gl_get_proc_address ("glEnableClientStateIndexedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glShaderOp3EXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glShaderOp3EXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEnableClientStateIndexedEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glEnableClientStateIndexedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glShaderOp3EXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glEnableClientStateIndexedEXT);
 }
 
-/* glSwizzleEXT */
+/* glDisableClientStateIndexedEXT */
 GdkGLProc
-gdk_gl_get_glSwizzleEXT (void)
+gdk_gl_get_glDisableClientStateIndexedEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glSwizzleEXT == (GdkGLProc_glSwizzleEXT) -1)
-    _procs_GL_EXT_vertex_shader.glSwizzleEXT =
-      (GdkGLProc_glSwizzleEXT) gdk_gl_get_proc_address ("glSwizzleEXT");
+  if (_procs_GL_EXT_direct_state_access.glDisableClientStateIndexedEXT == (GdkGLProc_glDisableClientStateIndexedEXT) -1)
+    _procs_GL_EXT_direct_state_access.glDisableClientStateIndexedEXT =
+      (GdkGLProc_glDisableClientStateIndexedEXT) gdk_gl_get_proc_address ("glDisableClientStateIndexedEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSwizzleEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glSwizzleEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDisableClientStateIndexedEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glDisableClientStateIndexedEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glSwizzleEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glDisableClientStateIndexedEXT);
 }
 
-/* glWriteMaskEXT */
+/* glMultiTexCoordPointerEXT */
 GdkGLProc
-gdk_gl_get_glWriteMaskEXT (void)
+gdk_gl_get_glMultiTexCoordPointerEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glWriteMaskEXT == (GdkGLProc_glWriteMaskEXT) -1)
-    _procs_GL_EXT_vertex_shader.glWriteMaskEXT =
-      (GdkGLProc_glWriteMaskEXT) gdk_gl_get_proc_address ("glWriteMaskEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexCoordPointerEXT == (GdkGLProc_glMultiTexCoordPointerEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexCoordPointerEXT =
+      (GdkGLProc_glMultiTexCoordPointerEXT) gdk_gl_get_proc_address ("glMultiTexCoordPointerEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glWriteMaskEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glWriteMaskEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexCoordPointerEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexCoordPointerEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glWriteMaskEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexCoordPointerEXT);
 }
 
-/* glInsertComponentEXT */
+/* glMultiTexEnvfEXT */
 GdkGLProc
-gdk_gl_get_glInsertComponentEXT (void)
+gdk_gl_get_glMultiTexEnvfEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glInsertComponentEXT == (GdkGLProc_glInsertComponentEXT) -1)
-    _procs_GL_EXT_vertex_shader.glInsertComponentEXT =
-      (GdkGLProc_glInsertComponentEXT) gdk_gl_get_proc_address ("glInsertComponentEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexEnvfEXT == (GdkGLProc_glMultiTexEnvfEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexEnvfEXT =
+      (GdkGLProc_glMultiTexEnvfEXT) gdk_gl_get_proc_address ("glMultiTexEnvfEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glInsertComponentEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glInsertComponentEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexEnvfEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexEnvfEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glInsertComponentEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexEnvfEXT);
 }
 
-/* glExtractComponentEXT */
+/* glMultiTexEnvfvEXT */
 GdkGLProc
-gdk_gl_get_glExtractComponentEXT (void)
+gdk_gl_get_glMultiTexEnvfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glExtractComponentEXT == (GdkGLProc_glExtractComponentEXT) -1)
-    _procs_GL_EXT_vertex_shader.glExtractComponentEXT =
-      (GdkGLProc_glExtractComponentEXT) gdk_gl_get_proc_address ("glExtractComponentEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexEnvfvEXT == (GdkGLProc_glMultiTexEnvfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexEnvfvEXT =
+      (GdkGLProc_glMultiTexEnvfvEXT) gdk_gl_get_proc_address ("glMultiTexEnvfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glExtractComponentEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glExtractComponentEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexEnvfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexEnvfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glExtractComponentEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexEnvfvEXT);
 }
 
-/* glGenSymbolsEXT */
+/* glMultiTexEnviEXT */
 GdkGLProc
-gdk_gl_get_glGenSymbolsEXT (void)
+gdk_gl_get_glMultiTexEnviEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGenSymbolsEXT == (GdkGLProc_glGenSymbolsEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGenSymbolsEXT =
-      (GdkGLProc_glGenSymbolsEXT) gdk_gl_get_proc_address ("glGenSymbolsEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexEnviEXT == (GdkGLProc_glMultiTexEnviEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexEnviEXT =
+      (GdkGLProc_glMultiTexEnviEXT) gdk_gl_get_proc_address ("glMultiTexEnviEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenSymbolsEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGenSymbolsEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexEnviEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexEnviEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGenSymbolsEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexEnviEXT);
 }
 
-/* glSetInvariantEXT */
+/* glMultiTexEnvivEXT */
 GdkGLProc
-gdk_gl_get_glSetInvariantEXT (void)
+gdk_gl_get_glMultiTexEnvivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glSetInvariantEXT == (GdkGLProc_glSetInvariantEXT) -1)
-    _procs_GL_EXT_vertex_shader.glSetInvariantEXT =
-      (GdkGLProc_glSetInvariantEXT) gdk_gl_get_proc_address ("glSetInvariantEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexEnvivEXT == (GdkGLProc_glMultiTexEnvivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexEnvivEXT =
+      (GdkGLProc_glMultiTexEnvivEXT) gdk_gl_get_proc_address ("glMultiTexEnvivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSetInvariantEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glSetInvariantEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexEnvivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexEnvivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glSetInvariantEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexEnvivEXT);
 }
 
-/* glSetLocalConstantEXT */
+/* glMultiTexGendEXT */
 GdkGLProc
-gdk_gl_get_glSetLocalConstantEXT (void)
+gdk_gl_get_glMultiTexGendEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glSetLocalConstantEXT == (GdkGLProc_glSetLocalConstantEXT) -1)
-    _procs_GL_EXT_vertex_shader.glSetLocalConstantEXT =
-      (GdkGLProc_glSetLocalConstantEXT) gdk_gl_get_proc_address ("glSetLocalConstantEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexGendEXT == (GdkGLProc_glMultiTexGendEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexGendEXT =
+      (GdkGLProc_glMultiTexGendEXT) gdk_gl_get_proc_address ("glMultiTexGendEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSetLocalConstantEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glSetLocalConstantEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexGendEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexGendEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glSetLocalConstantEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexGendEXT);
 }
 
-/* glVariantbvEXT */
+/* glMultiTexGendvEXT */
 GdkGLProc
-gdk_gl_get_glVariantbvEXT (void)
+gdk_gl_get_glMultiTexGendvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantbvEXT == (GdkGLProc_glVariantbvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantbvEXT =
-      (GdkGLProc_glVariantbvEXT) gdk_gl_get_proc_address ("glVariantbvEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexGendvEXT == (GdkGLProc_glMultiTexGendvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexGendvEXT =
+      (GdkGLProc_glMultiTexGendvEXT) gdk_gl_get_proc_address ("glMultiTexGendvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantbvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantbvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexGendvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexGendvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantbvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexGendvEXT);
 }
 
-/* glVariantsvEXT */
+/* glMultiTexGenfEXT */
 GdkGLProc
-gdk_gl_get_glVariantsvEXT (void)
+gdk_gl_get_glMultiTexGenfEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantsvEXT == (GdkGLProc_glVariantsvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantsvEXT =
-      (GdkGLProc_glVariantsvEXT) gdk_gl_get_proc_address ("glVariantsvEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexGenfEXT == (GdkGLProc_glMultiTexGenfEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexGenfEXT =
+      (GdkGLProc_glMultiTexGenfEXT) gdk_gl_get_proc_address ("glMultiTexGenfEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantsvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantsvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexGenfEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexGenfEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantsvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexGenfEXT);
 }
 
-/* glVariantivEXT */
+/* glMultiTexGenfvEXT */
 GdkGLProc
-gdk_gl_get_glVariantivEXT (void)
+gdk_gl_get_glMultiTexGenfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantivEXT == (GdkGLProc_glVariantivEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantivEXT =
-      (GdkGLProc_glVariantivEXT) gdk_gl_get_proc_address ("glVariantivEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexGenfvEXT == (GdkGLProc_glMultiTexGenfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexGenfvEXT =
+      (GdkGLProc_glMultiTexGenfvEXT) gdk_gl_get_proc_address ("glMultiTexGenfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantivEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexGenfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexGenfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantivEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexGenfvEXT);
 }
 
-/* glVariantfvEXT */
+/* glMultiTexGeniEXT */
 GdkGLProc
-gdk_gl_get_glVariantfvEXT (void)
+gdk_gl_get_glMultiTexGeniEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantfvEXT == (GdkGLProc_glVariantfvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantfvEXT =
-      (GdkGLProc_glVariantfvEXT) gdk_gl_get_proc_address ("glVariantfvEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexGeniEXT == (GdkGLProc_glMultiTexGeniEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexGeniEXT =
+      (GdkGLProc_glMultiTexGeniEXT) gdk_gl_get_proc_address ("glMultiTexGeniEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantfvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantfvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexGeniEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexGeniEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantfvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexGeniEXT);
 }
 
-/* glVariantdvEXT */
+/* glMultiTexGenivEXT */
 GdkGLProc
-gdk_gl_get_glVariantdvEXT (void)
+gdk_gl_get_glMultiTexGenivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantdvEXT == (GdkGLProc_glVariantdvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantdvEXT =
-      (GdkGLProc_glVariantdvEXT) gdk_gl_get_proc_address ("glVariantdvEXT");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexGenivEXT == (GdkGLProc_glMultiTexGenivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexGenivEXT =
+      (GdkGLProc_glMultiTexGenivEXT) gdk_gl_get_proc_address ("glMultiTexGenivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantdvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantdvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexGenivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexGenivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantdvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexGenivEXT);
 }
 
-/* glVariantubvEXT */
+/* glGetMultiTexEnvfvEXT */
 GdkGLProc
-gdk_gl_get_glVariantubvEXT (void)
+gdk_gl_get_glGetMultiTexEnvfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantubvEXT == (GdkGLProc_glVariantubvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantubvEXT =
-      (GdkGLProc_glVariantubvEXT) gdk_gl_get_proc_address ("glVariantubvEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexEnvfvEXT == (GdkGLProc_glGetMultiTexEnvfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexEnvfvEXT =
+      (GdkGLProc_glGetMultiTexEnvfvEXT) gdk_gl_get_proc_address ("glGetMultiTexEnvfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantubvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantubvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexEnvfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexEnvfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantubvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexEnvfvEXT);
 }
 
-/* glVariantusvEXT */
+/* glGetMultiTexEnvivEXT */
 GdkGLProc
-gdk_gl_get_glVariantusvEXT (void)
+gdk_gl_get_glGetMultiTexEnvivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantusvEXT == (GdkGLProc_glVariantusvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantusvEXT =
-      (GdkGLProc_glVariantusvEXT) gdk_gl_get_proc_address ("glVariantusvEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexEnvivEXT == (GdkGLProc_glGetMultiTexEnvivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexEnvivEXT =
+      (GdkGLProc_glGetMultiTexEnvivEXT) gdk_gl_get_proc_address ("glGetMultiTexEnvivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantusvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantusvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexEnvivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexEnvivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantusvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexEnvivEXT);
 }
 
-/* glVariantuivEXT */
+/* glGetMultiTexGendvEXT */
 GdkGLProc
-gdk_gl_get_glVariantuivEXT (void)
+gdk_gl_get_glGetMultiTexGendvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantuivEXT == (GdkGLProc_glVariantuivEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantuivEXT =
-      (GdkGLProc_glVariantuivEXT) gdk_gl_get_proc_address ("glVariantuivEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexGendvEXT == (GdkGLProc_glGetMultiTexGendvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexGendvEXT =
+      (GdkGLProc_glGetMultiTexGendvEXT) gdk_gl_get_proc_address ("glGetMultiTexGendvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantuivEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantuivEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexGendvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexGendvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantuivEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexGendvEXT);
 }
 
-/* glVariantPointerEXT */
+/* glGetMultiTexGenfvEXT */
 GdkGLProc
-gdk_gl_get_glVariantPointerEXT (void)
+gdk_gl_get_glGetMultiTexGenfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glVariantPointerEXT == (GdkGLProc_glVariantPointerEXT) -1)
-    _procs_GL_EXT_vertex_shader.glVariantPointerEXT =
-      (GdkGLProc_glVariantPointerEXT) gdk_gl_get_proc_address ("glVariantPointerEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexGenfvEXT == (GdkGLProc_glGetMultiTexGenfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexGenfvEXT =
+      (GdkGLProc_glGetMultiTexGenfvEXT) gdk_gl_get_proc_address ("glGetMultiTexGenfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVariantPointerEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glVariantPointerEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexGenfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexGenfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glVariantPointerEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexGenfvEXT);
 }
 
-/* glEnableVariantClientStateEXT */
+/* glGetMultiTexGenivEXT */
 GdkGLProc
-gdk_gl_get_glEnableVariantClientStateEXT (void)
+gdk_gl_get_glGetMultiTexGenivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT == (GdkGLProc_glEnableVariantClientStateEXT) -1)
-    _procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT =
-      (GdkGLProc_glEnableVariantClientStateEXT) gdk_gl_get_proc_address ("glEnableVariantClientStateEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexGenivEXT == (GdkGLProc_glGetMultiTexGenivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexGenivEXT =
+      (GdkGLProc_glGetMultiTexGenivEXT) gdk_gl_get_proc_address ("glGetMultiTexGenivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEnableVariantClientStateEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexGenivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexGenivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glEnableVariantClientStateEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexGenivEXT);
 }
 
-/* glDisableVariantClientStateEXT */
+/* glGetFloatIndexedvEXT */
 GdkGLProc
-gdk_gl_get_glDisableVariantClientStateEXT (void)
+gdk_gl_get_glGetFloatIndexedvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT == (GdkGLProc_glDisableVariantClientStateEXT) -1)
-    _procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT =
-      (GdkGLProc_glDisableVariantClientStateEXT) gdk_gl_get_proc_address ("glDisableVariantClientStateEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetFloatIndexedvEXT == (GdkGLProc_glGetFloatIndexedvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetFloatIndexedvEXT =
+      (GdkGLProc_glGetFloatIndexedvEXT) gdk_gl_get_proc_address ("glGetFloatIndexedvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDisableVariantClientStateEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetFloatIndexedvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetFloatIndexedvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glDisableVariantClientStateEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetFloatIndexedvEXT);
 }
 
-/* glBindLightParameterEXT */
+/* glGetDoubleIndexedvEXT */
 GdkGLProc
-gdk_gl_get_glBindLightParameterEXT (void)
+gdk_gl_get_glGetDoubleIndexedvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glBindLightParameterEXT == (GdkGLProc_glBindLightParameterEXT) -1)
-    _procs_GL_EXT_vertex_shader.glBindLightParameterEXT =
-      (GdkGLProc_glBindLightParameterEXT) gdk_gl_get_proc_address ("glBindLightParameterEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetDoubleIndexedvEXT == (GdkGLProc_glGetDoubleIndexedvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetDoubleIndexedvEXT =
+      (GdkGLProc_glGetDoubleIndexedvEXT) gdk_gl_get_proc_address ("glGetDoubleIndexedvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindLightParameterEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glBindLightParameterEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetDoubleIndexedvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetDoubleIndexedvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindLightParameterEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetDoubleIndexedvEXT);
 }
 
-/* glBindMaterialParameterEXT */
+/* glGetPointerIndexedvEXT */
 GdkGLProc
-gdk_gl_get_glBindMaterialParameterEXT (void)
+gdk_gl_get_glGetPointerIndexedvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT == (GdkGLProc_glBindMaterialParameterEXT) -1)
-    _procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT =
-      (GdkGLProc_glBindMaterialParameterEXT) gdk_gl_get_proc_address ("glBindMaterialParameterEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetPointerIndexedvEXT == (GdkGLProc_glGetPointerIndexedvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetPointerIndexedvEXT =
+      (GdkGLProc_glGetPointerIndexedvEXT) gdk_gl_get_proc_address ("glGetPointerIndexedvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindMaterialParameterEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetPointerIndexedvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetPointerIndexedvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindMaterialParameterEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetPointerIndexedvEXT);
 }
 
-/* glBindTexGenParameterEXT */
+/* glCompressedTextureImage3DEXT */
 GdkGLProc
-gdk_gl_get_glBindTexGenParameterEXT (void)
+gdk_gl_get_glCompressedTextureImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT == (GdkGLProc_glBindTexGenParameterEXT) -1)
-    _procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT =
-      (GdkGLProc_glBindTexGenParameterEXT) gdk_gl_get_proc_address ("glBindTexGenParameterEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedTextureImage3DEXT == (GdkGLProc_glCompressedTextureImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedTextureImage3DEXT =
+      (GdkGLProc_glCompressedTextureImage3DEXT) gdk_gl_get_proc_address ("glCompressedTextureImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindTexGenParameterEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTextureImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedTextureImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindTexGenParameterEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedTextureImage3DEXT);
 }
 
-/* glBindTextureUnitParameterEXT */
+/* glCompressedTextureImage2DEXT */
 GdkGLProc
-gdk_gl_get_glBindTextureUnitParameterEXT (void)
+gdk_gl_get_glCompressedTextureImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT == (GdkGLProc_glBindTextureUnitParameterEXT) -1)
-    _procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT =
-      (GdkGLProc_glBindTextureUnitParameterEXT) gdk_gl_get_proc_address ("glBindTextureUnitParameterEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedTextureImage2DEXT == (GdkGLProc_glCompressedTextureImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedTextureImage2DEXT =
+      (GdkGLProc_glCompressedTextureImage2DEXT) gdk_gl_get_proc_address ("glCompressedTextureImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindTextureUnitParameterEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTextureImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedTextureImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindTextureUnitParameterEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedTextureImage2DEXT);
 }
 
-/* glBindParameterEXT */
+/* glCompressedTextureImage1DEXT */
 GdkGLProc
-gdk_gl_get_glBindParameterEXT (void)
+gdk_gl_get_glCompressedTextureImage1DEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_direct_state_access.glCompressedTextureImage1DEXT == (GdkGLProc_glCompressedTextureImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedTextureImage1DEXT =
+      (GdkGLProc_glCompressedTextureImage1DEXT) gdk_gl_get_proc_address ("glCompressedTextureImage1DEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCompressedTextureImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedTextureImage1DEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedTextureImage1DEXT);
+}
+
+/* glCompressedTextureSubImage3DEXT */
+GdkGLProc
+gdk_gl_get_glCompressedTextureSubImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glBindParameterEXT == (GdkGLProc_glBindParameterEXT) -1)
-    _procs_GL_EXT_vertex_shader.glBindParameterEXT =
-      (GdkGLProc_glBindParameterEXT) gdk_gl_get_proc_address ("glBindParameterEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage3DEXT == (GdkGLProc_glCompressedTextureSubImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedTextureSubImage3DEXT =
+      (GdkGLProc_glCompressedTextureSubImage3DEXT) gdk_gl_get_proc_address ("glCompressedTextureSubImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindParameterEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glBindParameterEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTextureSubImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glBindParameterEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage3DEXT);
 }
 
-/* glIsVariantEnabledEXT */
+/* glCompressedTextureSubImage2DEXT */
 GdkGLProc
-gdk_gl_get_glIsVariantEnabledEXT (void)
+gdk_gl_get_glCompressedTextureSubImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT == (GdkGLProc_glIsVariantEnabledEXT) -1)
-    _procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT =
-      (GdkGLProc_glIsVariantEnabledEXT) gdk_gl_get_proc_address ("glIsVariantEnabledEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage2DEXT == (GdkGLProc_glCompressedTextureSubImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedTextureSubImage2DEXT =
+      (GdkGLProc_glCompressedTextureSubImage2DEXT) gdk_gl_get_proc_address ("glCompressedTextureSubImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsVariantEnabledEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTextureSubImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glIsVariantEnabledEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage2DEXT);
 }
 
-/* glGetVariantBooleanvEXT */
+/* glCompressedTextureSubImage1DEXT */
 GdkGLProc
-gdk_gl_get_glGetVariantBooleanvEXT (void)
+gdk_gl_get_glCompressedTextureSubImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT == (GdkGLProc_glGetVariantBooleanvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT =
-      (GdkGLProc_glGetVariantBooleanvEXT) gdk_gl_get_proc_address ("glGetVariantBooleanvEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage1DEXT == (GdkGLProc_glCompressedTextureSubImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedTextureSubImage1DEXT =
+      (GdkGLProc_glCompressedTextureSubImage1DEXT) gdk_gl_get_proc_address ("glCompressedTextureSubImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVariantBooleanvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedTextureSubImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantBooleanvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedTextureSubImage1DEXT);
 }
 
-/* glGetVariantIntegervEXT */
+/* glGetCompressedTextureImageEXT */
 GdkGLProc
-gdk_gl_get_glGetVariantIntegervEXT (void)
+gdk_gl_get_glGetCompressedTextureImageEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT == (GdkGLProc_glGetVariantIntegervEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT =
-      (GdkGLProc_glGetVariantIntegervEXT) gdk_gl_get_proc_address ("glGetVariantIntegervEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetCompressedTextureImageEXT == (GdkGLProc_glGetCompressedTextureImageEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetCompressedTextureImageEXT =
+      (GdkGLProc_glGetCompressedTextureImageEXT) gdk_gl_get_proc_address ("glGetCompressedTextureImageEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVariantIntegervEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetCompressedTextureImageEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetCompressedTextureImageEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantIntegervEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetCompressedTextureImageEXT);
 }
 
-/* glGetVariantFloatvEXT */
+/* glCompressedMultiTexImage3DEXT */
 GdkGLProc
-gdk_gl_get_glGetVariantFloatvEXT (void)
+gdk_gl_get_glCompressedMultiTexImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT == (GdkGLProc_glGetVariantFloatvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT =
-      (GdkGLProc_glGetVariantFloatvEXT) gdk_gl_get_proc_address ("glGetVariantFloatvEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage3DEXT == (GdkGLProc_glCompressedMultiTexImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedMultiTexImage3DEXT =
+      (GdkGLProc_glCompressedMultiTexImage3DEXT) gdk_gl_get_proc_address ("glCompressedMultiTexImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVariantFloatvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedMultiTexImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantFloatvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage3DEXT);
 }
 
-/* glGetVariantPointervEXT */
+/* glCompressedMultiTexImage2DEXT */
 GdkGLProc
-gdk_gl_get_glGetVariantPointervEXT (void)
+gdk_gl_get_glCompressedMultiTexImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetVariantPointervEXT == (GdkGLProc_glGetVariantPointervEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetVariantPointervEXT =
-      (GdkGLProc_glGetVariantPointervEXT) gdk_gl_get_proc_address ("glGetVariantPointervEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage2DEXT == (GdkGLProc_glCompressedMultiTexImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedMultiTexImage2DEXT =
+      (GdkGLProc_glCompressedMultiTexImage2DEXT) gdk_gl_get_proc_address ("glCompressedMultiTexImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVariantPointervEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetVariantPointervEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedMultiTexImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetVariantPointervEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage2DEXT);
 }
 
-/* glGetInvariantBooleanvEXT */
+/* glCompressedMultiTexImage1DEXT */
 GdkGLProc
-gdk_gl_get_glGetInvariantBooleanvEXT (void)
+gdk_gl_get_glCompressedMultiTexImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT == (GdkGLProc_glGetInvariantBooleanvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT =
-      (GdkGLProc_glGetInvariantBooleanvEXT) gdk_gl_get_proc_address ("glGetInvariantBooleanvEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage1DEXT == (GdkGLProc_glCompressedMultiTexImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedMultiTexImage1DEXT =
+      (GdkGLProc_glCompressedMultiTexImage1DEXT) gdk_gl_get_proc_address ("glCompressedMultiTexImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetInvariantBooleanvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedMultiTexImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetInvariantBooleanvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedMultiTexImage1DEXT);
 }
 
-/* glGetInvariantIntegervEXT */
+/* glCompressedMultiTexSubImage3DEXT */
 GdkGLProc
-gdk_gl_get_glGetInvariantIntegervEXT (void)
+gdk_gl_get_glCompressedMultiTexSubImage3DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT == (GdkGLProc_glGetInvariantIntegervEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT =
-      (GdkGLProc_glGetInvariantIntegervEXT) gdk_gl_get_proc_address ("glGetInvariantIntegervEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage3DEXT == (GdkGLProc_glCompressedMultiTexSubImage3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage3DEXT =
+      (GdkGLProc_glCompressedMultiTexSubImage3DEXT) gdk_gl_get_proc_address ("glCompressedMultiTexSubImage3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetInvariantIntegervEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedMultiTexSubImage3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage3DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetInvariantIntegervEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage3DEXT);
 }
 
-/* glGetInvariantFloatvEXT */
+/* glCompressedMultiTexSubImage2DEXT */
 GdkGLProc
-gdk_gl_get_glGetInvariantFloatvEXT (void)
+gdk_gl_get_glCompressedMultiTexSubImage2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT == (GdkGLProc_glGetInvariantFloatvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT =
-      (GdkGLProc_glGetInvariantFloatvEXT) gdk_gl_get_proc_address ("glGetInvariantFloatvEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage2DEXT == (GdkGLProc_glCompressedMultiTexSubImage2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage2DEXT =
+      (GdkGLProc_glCompressedMultiTexSubImage2DEXT) gdk_gl_get_proc_address ("glCompressedMultiTexSubImage2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetInvariantFloatvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedMultiTexSubImage2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetInvariantFloatvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage2DEXT);
 }
 
-/* glGetLocalConstantBooleanvEXT */
+/* glCompressedMultiTexSubImage1DEXT */
 GdkGLProc
-gdk_gl_get_glGetLocalConstantBooleanvEXT (void)
+gdk_gl_get_glCompressedMultiTexSubImage1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT == (GdkGLProc_glGetLocalConstantBooleanvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT =
-      (GdkGLProc_glGetLocalConstantBooleanvEXT) gdk_gl_get_proc_address ("glGetLocalConstantBooleanvEXT");
+  if (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage1DEXT == (GdkGLProc_glCompressedMultiTexSubImage1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage1DEXT =
+      (GdkGLProc_glCompressedMultiTexSubImage1DEXT) gdk_gl_get_proc_address ("glCompressedMultiTexSubImage1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetLocalConstantBooleanvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCompressedMultiTexSubImage1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetLocalConstantBooleanvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCompressedMultiTexSubImage1DEXT);
 }
 
-/* glGetLocalConstantIntegervEXT */
+/* glGetCompressedMultiTexImageEXT */
 GdkGLProc
-gdk_gl_get_glGetLocalConstantIntegervEXT (void)
+gdk_gl_get_glGetCompressedMultiTexImageEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT == (GdkGLProc_glGetLocalConstantIntegervEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT =
-      (GdkGLProc_glGetLocalConstantIntegervEXT) gdk_gl_get_proc_address ("glGetLocalConstantIntegervEXT");
+  if (_procs_GL_EXT_direct_state_access.glGetCompressedMultiTexImageEXT == (GdkGLProc_glGetCompressedMultiTexImageEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetCompressedMultiTexImageEXT =
+      (GdkGLProc_glGetCompressedMultiTexImageEXT) gdk_gl_get_proc_address ("glGetCompressedMultiTexImageEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetLocalConstantIntegervEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetCompressedMultiTexImageEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetCompressedMultiTexImageEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetLocalConstantIntegervEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetCompressedMultiTexImageEXT);
 }
 
-/* glGetLocalConstantFloatvEXT */
+/* glNamedProgramStringEXT */
 GdkGLProc
-gdk_gl_get_glGetLocalConstantFloatvEXT (void)
+gdk_gl_get_glNamedProgramStringEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT == (GdkGLProc_glGetLocalConstantFloatvEXT) -1)
-    _procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT =
-      (GdkGLProc_glGetLocalConstantFloatvEXT) gdk_gl_get_proc_address ("glGetLocalConstantFloatvEXT");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramStringEXT == (GdkGLProc_glNamedProgramStringEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramStringEXT =
+      (GdkGLProc_glNamedProgramStringEXT) gdk_gl_get_proc_address ("glNamedProgramStringEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetLocalConstantFloatvEXT () - %s",
-               (_procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramStringEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramStringEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_vertex_shader.glGetLocalConstantFloatvEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramStringEXT);
 }
 
-/* Get GL_EXT_vertex_shader functions */
-GdkGL_GL_EXT_vertex_shader *
-gdk_gl_get_GL_EXT_vertex_shader (void)
+/* glNamedProgramLocalParameter4dEXT */
+GdkGLProc
+gdk_gl_get_glNamedProgramLocalParameter4dEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_vertex_shader");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glBeginVertexShaderEXT () != NULL);
-          supported &= (gdk_gl_get_glEndVertexShaderEXT () != NULL);
-          supported &= (gdk_gl_get_glBindVertexShaderEXT () != NULL);
-          supported &= (gdk_gl_get_glGenVertexShadersEXT () != NULL);
-          supported &= (gdk_gl_get_glDeleteVertexShaderEXT () != NULL);
-          supported &= (gdk_gl_get_glShaderOp1EXT () != NULL);
-          supported &= (gdk_gl_get_glShaderOp2EXT () != NULL);
-          supported &= (gdk_gl_get_glShaderOp3EXT () != NULL);
-          supported &= (gdk_gl_get_glSwizzleEXT () != NULL);
-          supported &= (gdk_gl_get_glWriteMaskEXT () != NULL);
-          supported &= (gdk_gl_get_glInsertComponentEXT () != NULL);
-          supported &= (gdk_gl_get_glExtractComponentEXT () != NULL);
-          supported &= (gdk_gl_get_glGenSymbolsEXT () != NULL);
-          supported &= (gdk_gl_get_glSetInvariantEXT () != NULL);
-          supported &= (gdk_gl_get_glSetLocalConstantEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantbvEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantsvEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantivEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantfvEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantdvEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantubvEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantusvEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantuivEXT () != NULL);
-          supported &= (gdk_gl_get_glVariantPointerEXT () != NULL);
-          supported &= (gdk_gl_get_glEnableVariantClientStateEXT () != NULL);
-          supported &= (gdk_gl_get_glDisableVariantClientStateEXT () != NULL);
-          supported &= (gdk_gl_get_glBindLightParameterEXT () != NULL);
-          supported &= (gdk_gl_get_glBindMaterialParameterEXT () != NULL);
-          supported &= (gdk_gl_get_glBindTexGenParameterEXT () != NULL);
-          supported &= (gdk_gl_get_glBindTextureUnitParameterEXT () != NULL);
-          supported &= (gdk_gl_get_glBindParameterEXT () != NULL);
-          supported &= (gdk_gl_get_glIsVariantEnabledEXT () != NULL);
-          supported &= (gdk_gl_get_glGetVariantBooleanvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetVariantIntegervEXT () != NULL);
-          supported &= (gdk_gl_get_glGetVariantFloatvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetVariantPointervEXT () != NULL);
-          supported &= (gdk_gl_get_glGetInvariantBooleanvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetInvariantIntegervEXT () != NULL);
-          supported &= (gdk_gl_get_glGetInvariantFloatvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetLocalConstantBooleanvEXT () != NULL);
-          supported &= (gdk_gl_get_glGetLocalConstantIntegervEXT () != NULL);
-          supported &= (gdk_gl_get_glGetLocalConstantFloatvEXT () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dEXT == (GdkGLProc_glNamedProgramLocalParameter4dEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dEXT =
+      (GdkGLProc_glNamedProgramLocalParameter4dEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameter4dEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_vertex_shader () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameter4dEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dEXT) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_vertex_shader;
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dEXT);
 }
 
-/*
- * GL_ATI_vertex_streams
- */
-
-static GdkGL_GL_ATI_vertex_streams _procs_GL_ATI_vertex_streams = {
-  (GdkGLProc_glVertexStream1sATI) -1,
-  (GdkGLProc_glVertexStream1svATI) -1,
-  (GdkGLProc_glVertexStream1iATI) -1,
-  (GdkGLProc_glVertexStream1ivATI) -1,
-  (GdkGLProc_glVertexStream1fATI) -1,
-  (GdkGLProc_glVertexStream1fvATI) -1,
-  (GdkGLProc_glVertexStream1dATI) -1,
-  (GdkGLProc_glVertexStream1dvATI) -1,
-  (GdkGLProc_glVertexStream2sATI) -1,
-  (GdkGLProc_glVertexStream2svATI) -1,
-  (GdkGLProc_glVertexStream2iATI) -1,
-  (GdkGLProc_glVertexStream2ivATI) -1,
-  (GdkGLProc_glVertexStream2fATI) -1,
-  (GdkGLProc_glVertexStream2fvATI) -1,
-  (GdkGLProc_glVertexStream2dATI) -1,
-  (GdkGLProc_glVertexStream2dvATI) -1,
-  (GdkGLProc_glVertexStream3sATI) -1,
-  (GdkGLProc_glVertexStream3svATI) -1,
-  (GdkGLProc_glVertexStream3iATI) -1,
-  (GdkGLProc_glVertexStream3ivATI) -1,
-  (GdkGLProc_glVertexStream3fATI) -1,
-  (GdkGLProc_glVertexStream3fvATI) -1,
-  (GdkGLProc_glVertexStream3dATI) -1,
-  (GdkGLProc_glVertexStream3dvATI) -1,
-  (GdkGLProc_glVertexStream4sATI) -1,
-  (GdkGLProc_glVertexStream4svATI) -1,
-  (GdkGLProc_glVertexStream4iATI) -1,
-  (GdkGLProc_glVertexStream4ivATI) -1,
-  (GdkGLProc_glVertexStream4fATI) -1,
-  (GdkGLProc_glVertexStream4fvATI) -1,
-  (GdkGLProc_glVertexStream4dATI) -1,
-  (GdkGLProc_glVertexStream4dvATI) -1,
-  (GdkGLProc_glNormalStream3bATI) -1,
-  (GdkGLProc_glNormalStream3bvATI) -1,
-  (GdkGLProc_glNormalStream3sATI) -1,
-  (GdkGLProc_glNormalStream3svATI) -1,
-  (GdkGLProc_glNormalStream3iATI) -1,
-  (GdkGLProc_glNormalStream3ivATI) -1,
-  (GdkGLProc_glNormalStream3fATI) -1,
-  (GdkGLProc_glNormalStream3fvATI) -1,
-  (GdkGLProc_glNormalStream3dATI) -1,
-  (GdkGLProc_glNormalStream3dvATI) -1,
-  (GdkGLProc_glClientActiveVertexStreamATI) -1,
-  (GdkGLProc_glVertexBlendEnviATI) -1,
-  (GdkGLProc_glVertexBlendEnvfATI) -1
-};
-
-/* glVertexStream1sATI */
+/* glNamedProgramLocalParameter4dvEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1sATI (void)
+gdk_gl_get_glNamedProgramLocalParameter4dvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1sATI == (GdkGLProc_glVertexStream1sATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1sATI =
-      (GdkGLProc_glVertexStream1sATI) gdk_gl_get_proc_address ("glVertexStream1sATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dvEXT == (GdkGLProc_glNamedProgramLocalParameter4dvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dvEXT =
+      (GdkGLProc_glNamedProgramLocalParameter4dvEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameter4dvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1sATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1sATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameter4dvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1sATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4dvEXT);
 }
 
-/* glVertexStream1svATI */
+/* glNamedProgramLocalParameter4fEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1svATI (void)
+gdk_gl_get_glNamedProgramLocalParameter4fEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1svATI == (GdkGLProc_glVertexStream1svATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1svATI =
-      (GdkGLProc_glVertexStream1svATI) gdk_gl_get_proc_address ("glVertexStream1svATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fEXT == (GdkGLProc_glNamedProgramLocalParameter4fEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fEXT =
+      (GdkGLProc_glNamedProgramLocalParameter4fEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameter4fEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1svATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1svATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameter4fEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1svATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fEXT);
 }
 
-/* glVertexStream1iATI */
+/* glNamedProgramLocalParameter4fvEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1iATI (void)
+gdk_gl_get_glNamedProgramLocalParameter4fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1iATI == (GdkGLProc_glVertexStream1iATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1iATI =
-      (GdkGLProc_glVertexStream1iATI) gdk_gl_get_proc_address ("glVertexStream1iATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fvEXT == (GdkGLProc_glNamedProgramLocalParameter4fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fvEXT =
+      (GdkGLProc_glNamedProgramLocalParameter4fvEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameter4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1iATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1iATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameter4fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1iATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameter4fvEXT);
 }
 
-/* glVertexStream1ivATI */
+/* glGetNamedProgramLocalParameterdvEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1ivATI (void)
+gdk_gl_get_glGetNamedProgramLocalParameterdvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1ivATI == (GdkGLProc_glVertexStream1ivATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1ivATI =
-      (GdkGLProc_glVertexStream1ivATI) gdk_gl_get_proc_address ("glVertexStream1ivATI");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterdvEXT == (GdkGLProc_glGetNamedProgramLocalParameterdvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterdvEXT =
+      (GdkGLProc_glGetNamedProgramLocalParameterdvEXT) gdk_gl_get_proc_address ("glGetNamedProgramLocalParameterdvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1ivATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1ivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedProgramLocalParameterdvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterdvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1ivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterdvEXT);
 }
 
-/* glVertexStream1fATI */
+/* glGetNamedProgramLocalParameterfvEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1fATI (void)
+gdk_gl_get_glGetNamedProgramLocalParameterfvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1fATI == (GdkGLProc_glVertexStream1fATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1fATI =
-      (GdkGLProc_glVertexStream1fATI) gdk_gl_get_proc_address ("glVertexStream1fATI");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterfvEXT == (GdkGLProc_glGetNamedProgramLocalParameterfvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterfvEXT =
+      (GdkGLProc_glGetNamedProgramLocalParameterfvEXT) gdk_gl_get_proc_address ("glGetNamedProgramLocalParameterfvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1fATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1fATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedProgramLocalParameterfvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterfvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1fATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterfvEXT);
 }
 
-/* glVertexStream1fvATI */
+/* glGetNamedProgramivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1fvATI (void)
+gdk_gl_get_glGetNamedProgramivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1fvATI == (GdkGLProc_glVertexStream1fvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1fvATI =
-      (GdkGLProc_glVertexStream1fvATI) gdk_gl_get_proc_address ("glVertexStream1fvATI");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedProgramivEXT == (GdkGLProc_glGetNamedProgramivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedProgramivEXT =
+      (GdkGLProc_glGetNamedProgramivEXT) gdk_gl_get_proc_address ("glGetNamedProgramivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1fvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1fvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedProgramivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedProgramivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1fvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedProgramivEXT);
 }
 
-/* glVertexStream1dATI */
+/* glGetNamedProgramStringEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1dATI (void)
+gdk_gl_get_glGetNamedProgramStringEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1dATI == (GdkGLProc_glVertexStream1dATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1dATI =
-      (GdkGLProc_glVertexStream1dATI) gdk_gl_get_proc_address ("glVertexStream1dATI");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedProgramStringEXT == (GdkGLProc_glGetNamedProgramStringEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedProgramStringEXT =
+      (GdkGLProc_glGetNamedProgramStringEXT) gdk_gl_get_proc_address ("glGetNamedProgramStringEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1dATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1dATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedProgramStringEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedProgramStringEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1dATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedProgramStringEXT);
 }
 
-/* glVertexStream1dvATI */
+/* glNamedProgramLocalParameters4fvEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream1dvATI (void)
+gdk_gl_get_glNamedProgramLocalParameters4fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream1dvATI == (GdkGLProc_glVertexStream1dvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream1dvATI =
-      (GdkGLProc_glVertexStream1dvATI) gdk_gl_get_proc_address ("glVertexStream1dvATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameters4fvEXT == (GdkGLProc_glNamedProgramLocalParameters4fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameters4fvEXT =
+      (GdkGLProc_glNamedProgramLocalParameters4fvEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameters4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream1dvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream1dvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameters4fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameters4fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream1dvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameters4fvEXT);
 }
 
-/* glVertexStream2sATI */
+/* glNamedProgramLocalParameterI4iEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2sATI (void)
+gdk_gl_get_glNamedProgramLocalParameterI4iEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2sATI == (GdkGLProc_glVertexStream2sATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2sATI =
-      (GdkGLProc_glVertexStream2sATI) gdk_gl_get_proc_address ("glVertexStream2sATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4iEXT == (GdkGLProc_glNamedProgramLocalParameterI4iEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4iEXT =
+      (GdkGLProc_glNamedProgramLocalParameterI4iEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameterI4iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2sATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2sATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameterI4iEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4iEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2sATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4iEXT);
 }
 
-/* glVertexStream2svATI */
+/* glNamedProgramLocalParameterI4ivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2svATI (void)
+gdk_gl_get_glNamedProgramLocalParameterI4ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2svATI == (GdkGLProc_glVertexStream2svATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2svATI =
-      (GdkGLProc_glVertexStream2svATI) gdk_gl_get_proc_address ("glVertexStream2svATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4ivEXT == (GdkGLProc_glNamedProgramLocalParameterI4ivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4ivEXT =
+      (GdkGLProc_glNamedProgramLocalParameterI4ivEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameterI4ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2svATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2svATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameterI4ivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2svATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4ivEXT);
 }
 
-/* glVertexStream2iATI */
+/* glNamedProgramLocalParametersI4ivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2iATI (void)
+gdk_gl_get_glNamedProgramLocalParametersI4ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2iATI == (GdkGLProc_glVertexStream2iATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2iATI =
-      (GdkGLProc_glVertexStream2iATI) gdk_gl_get_proc_address ("glVertexStream2iATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4ivEXT == (GdkGLProc_glNamedProgramLocalParametersI4ivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4ivEXT =
+      (GdkGLProc_glNamedProgramLocalParametersI4ivEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParametersI4ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2iATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2iATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParametersI4ivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2iATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4ivEXT);
 }
 
-/* glVertexStream2ivATI */
+/* glNamedProgramLocalParameterI4uiEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2ivATI (void)
+gdk_gl_get_glNamedProgramLocalParameterI4uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2ivATI == (GdkGLProc_glVertexStream2ivATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2ivATI =
-      (GdkGLProc_glVertexStream2ivATI) gdk_gl_get_proc_address ("glVertexStream2ivATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uiEXT == (GdkGLProc_glNamedProgramLocalParameterI4uiEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uiEXT =
+      (GdkGLProc_glNamedProgramLocalParameterI4uiEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameterI4uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2ivATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2ivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameterI4uiEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2ivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uiEXT);
 }
 
-/* glVertexStream2fATI */
+/* glNamedProgramLocalParameterI4uivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2fATI (void)
+gdk_gl_get_glNamedProgramLocalParameterI4uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2fATI == (GdkGLProc_glVertexStream2fATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2fATI =
-      (GdkGLProc_glVertexStream2fATI) gdk_gl_get_proc_address ("glVertexStream2fATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uivEXT == (GdkGLProc_glNamedProgramLocalParameterI4uivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uivEXT =
+      (GdkGLProc_glNamedProgramLocalParameterI4uivEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParameterI4uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2fATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2fATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParameterI4uivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2fATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParameterI4uivEXT);
 }
 
-/* glVertexStream2fvATI */
+/* glNamedProgramLocalParametersI4uivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2fvATI (void)
+gdk_gl_get_glNamedProgramLocalParametersI4uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2fvATI == (GdkGLProc_glVertexStream2fvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2fvATI =
-      (GdkGLProc_glVertexStream2fvATI) gdk_gl_get_proc_address ("glVertexStream2fvATI");
+  if (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4uivEXT == (GdkGLProc_glNamedProgramLocalParametersI4uivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4uivEXT =
+      (GdkGLProc_glNamedProgramLocalParametersI4uivEXT) gdk_gl_get_proc_address ("glNamedProgramLocalParametersI4uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2fvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2fvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedProgramLocalParametersI4uivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2fvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedProgramLocalParametersI4uivEXT);
 }
 
-/* glVertexStream2dATI */
+/* glGetNamedProgramLocalParameterIivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2dATI (void)
+gdk_gl_get_glGetNamedProgramLocalParameterIivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2dATI == (GdkGLProc_glVertexStream2dATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2dATI =
-      (GdkGLProc_glVertexStream2dATI) gdk_gl_get_proc_address ("glVertexStream2dATI");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIivEXT == (GdkGLProc_glGetNamedProgramLocalParameterIivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIivEXT =
+      (GdkGLProc_glGetNamedProgramLocalParameterIivEXT) gdk_gl_get_proc_address ("glGetNamedProgramLocalParameterIivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2dATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2dATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedProgramLocalParameterIivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2dATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIivEXT);
 }
 
-/* glVertexStream2dvATI */
+/* glGetNamedProgramLocalParameterIuivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream2dvATI (void)
+gdk_gl_get_glGetNamedProgramLocalParameterIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream2dvATI == (GdkGLProc_glVertexStream2dvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream2dvATI =
-      (GdkGLProc_glVertexStream2dvATI) gdk_gl_get_proc_address ("glVertexStream2dvATI");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIuivEXT == (GdkGLProc_glGetNamedProgramLocalParameterIuivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIuivEXT =
+      (GdkGLProc_glGetNamedProgramLocalParameterIuivEXT) gdk_gl_get_proc_address ("glGetNamedProgramLocalParameterIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream2dvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream2dvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedProgramLocalParameterIuivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream2dvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedProgramLocalParameterIuivEXT);
 }
 
-/* glVertexStream3sATI */
+/* glTextureParameterIivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3sATI (void)
+gdk_gl_get_glTextureParameterIivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3sATI == (GdkGLProc_glVertexStream3sATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3sATI =
-      (GdkGLProc_glVertexStream3sATI) gdk_gl_get_proc_address ("glVertexStream3sATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureParameterIivEXT == (GdkGLProc_glTextureParameterIivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureParameterIivEXT =
+      (GdkGLProc_glTextureParameterIivEXT) gdk_gl_get_proc_address ("glTextureParameterIivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3sATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3sATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureParameterIivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureParameterIivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3sATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureParameterIivEXT);
 }
 
-/* glVertexStream3svATI */
+/* glTextureParameterIuivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3svATI (void)
+gdk_gl_get_glTextureParameterIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3svATI == (GdkGLProc_glVertexStream3svATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3svATI =
-      (GdkGLProc_glVertexStream3svATI) gdk_gl_get_proc_address ("glVertexStream3svATI");
+  if (_procs_GL_EXT_direct_state_access.glTextureParameterIuivEXT == (GdkGLProc_glTextureParameterIuivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureParameterIuivEXT =
+      (GdkGLProc_glTextureParameterIuivEXT) gdk_gl_get_proc_address ("glTextureParameterIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3svATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3svATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureParameterIuivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureParameterIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3svATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureParameterIuivEXT);
 }
 
-/* glVertexStream3iATI */
+/* glGetTextureParameterIivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3iATI (void)
+gdk_gl_get_glGetTextureParameterIivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3iATI == (GdkGLProc_glVertexStream3iATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3iATI =
-      (GdkGLProc_glVertexStream3iATI) gdk_gl_get_proc_address ("glVertexStream3iATI");
+  if (_procs_GL_EXT_direct_state_access.glGetTextureParameterIivEXT == (GdkGLProc_glGetTextureParameterIivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetTextureParameterIivEXT =
+      (GdkGLProc_glGetTextureParameterIivEXT) gdk_gl_get_proc_address ("glGetTextureParameterIivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3iATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3iATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTextureParameterIivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetTextureParameterIivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3iATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetTextureParameterIivEXT);
 }
 
-/* glVertexStream3ivATI */
+/* glGetTextureParameterIuivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3ivATI (void)
+gdk_gl_get_glGetTextureParameterIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3ivATI == (GdkGLProc_glVertexStream3ivATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3ivATI =
-      (GdkGLProc_glVertexStream3ivATI) gdk_gl_get_proc_address ("glVertexStream3ivATI");
+  if (_procs_GL_EXT_direct_state_access.glGetTextureParameterIuivEXT == (GdkGLProc_glGetTextureParameterIuivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetTextureParameterIuivEXT =
+      (GdkGLProc_glGetTextureParameterIuivEXT) gdk_gl_get_proc_address ("glGetTextureParameterIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3ivATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3ivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTextureParameterIuivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetTextureParameterIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3ivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetTextureParameterIuivEXT);
 }
 
-/* glVertexStream3fATI */
+/* glMultiTexParameterIivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3fATI (void)
+gdk_gl_get_glMultiTexParameterIivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3fATI == (GdkGLProc_glVertexStream3fATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3fATI =
-      (GdkGLProc_glVertexStream3fATI) gdk_gl_get_proc_address ("glVertexStream3fATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexParameterIivEXT == (GdkGLProc_glMultiTexParameterIivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexParameterIivEXT =
+      (GdkGLProc_glMultiTexParameterIivEXT) gdk_gl_get_proc_address ("glMultiTexParameterIivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3fATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3fATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexParameterIivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexParameterIivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3fATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexParameterIivEXT);
 }
 
-/* glVertexStream3fvATI */
+/* glMultiTexParameterIuivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3fvATI (void)
+gdk_gl_get_glMultiTexParameterIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3fvATI == (GdkGLProc_glVertexStream3fvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3fvATI =
-      (GdkGLProc_glVertexStream3fvATI) gdk_gl_get_proc_address ("glVertexStream3fvATI");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexParameterIuivEXT == (GdkGLProc_glMultiTexParameterIuivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexParameterIuivEXT =
+      (GdkGLProc_glMultiTexParameterIuivEXT) gdk_gl_get_proc_address ("glMultiTexParameterIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3fvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3fvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexParameterIuivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexParameterIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3fvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexParameterIuivEXT);
 }
 
-/* glVertexStream3dATI */
+/* glGetMultiTexParameterIivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3dATI (void)
+gdk_gl_get_glGetMultiTexParameterIivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3dATI == (GdkGLProc_glVertexStream3dATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3dATI =
-      (GdkGLProc_glVertexStream3dATI) gdk_gl_get_proc_address ("glVertexStream3dATI");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterIivEXT == (GdkGLProc_glGetMultiTexParameterIivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexParameterIivEXT =
+      (GdkGLProc_glGetMultiTexParameterIivEXT) gdk_gl_get_proc_address ("glGetMultiTexParameterIivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3dATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3dATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexParameterIivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterIivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3dATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterIivEXT);
 }
 
-/* glVertexStream3dvATI */
+/* glGetMultiTexParameterIuivEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream3dvATI (void)
+gdk_gl_get_glGetMultiTexParameterIuivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream3dvATI == (GdkGLProc_glVertexStream3dvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream3dvATI =
-      (GdkGLProc_glVertexStream3dvATI) gdk_gl_get_proc_address ("glVertexStream3dvATI");
+  if (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterIuivEXT == (GdkGLProc_glGetMultiTexParameterIuivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetMultiTexParameterIuivEXT =
+      (GdkGLProc_glGetMultiTexParameterIuivEXT) gdk_gl_get_proc_address ("glGetMultiTexParameterIuivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream3dvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream3dvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultiTexParameterIuivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterIuivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream3dvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetMultiTexParameterIuivEXT);
 }
 
-/* glVertexStream4sATI */
+/* glProgramUniform1fEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4sATI (void)
+gdk_gl_get_glProgramUniform1fEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4sATI == (GdkGLProc_glVertexStream4sATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4sATI =
-      (GdkGLProc_glVertexStream4sATI) gdk_gl_get_proc_address ("glVertexStream4sATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform1fEXT == (GdkGLProc_glProgramUniform1fEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform1fEXT =
+      (GdkGLProc_glProgramUniform1fEXT) gdk_gl_get_proc_address ("glProgramUniform1fEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4sATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4sATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform1fEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform1fEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4sATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform1fEXT);
 }
 
-/* glVertexStream4svATI */
+/* glProgramUniform2fEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4svATI (void)
+gdk_gl_get_glProgramUniform2fEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4svATI == (GdkGLProc_glVertexStream4svATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4svATI =
-      (GdkGLProc_glVertexStream4svATI) gdk_gl_get_proc_address ("glVertexStream4svATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform2fEXT == (GdkGLProc_glProgramUniform2fEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform2fEXT =
+      (GdkGLProc_glProgramUniform2fEXT) gdk_gl_get_proc_address ("glProgramUniform2fEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4svATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4svATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform2fEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform2fEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4svATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform2fEXT);
 }
 
-/* glVertexStream4iATI */
+/* glProgramUniform3fEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4iATI (void)
+gdk_gl_get_glProgramUniform3fEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4iATI == (GdkGLProc_glVertexStream4iATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4iATI =
-      (GdkGLProc_glVertexStream4iATI) gdk_gl_get_proc_address ("glVertexStream4iATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform3fEXT == (GdkGLProc_glProgramUniform3fEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform3fEXT =
+      (GdkGLProc_glProgramUniform3fEXT) gdk_gl_get_proc_address ("glProgramUniform3fEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4iATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4iATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform3fEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform3fEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4iATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform3fEXT);
 }
 
-/* glVertexStream4ivATI */
+/* glProgramUniform4fEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4ivATI (void)
+gdk_gl_get_glProgramUniform4fEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4ivATI == (GdkGLProc_glVertexStream4ivATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4ivATI =
-      (GdkGLProc_glVertexStream4ivATI) gdk_gl_get_proc_address ("glVertexStream4ivATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform4fEXT == (GdkGLProc_glProgramUniform4fEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform4fEXT =
+      (GdkGLProc_glProgramUniform4fEXT) gdk_gl_get_proc_address ("glProgramUniform4fEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4ivATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4ivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform4fEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform4fEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4ivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform4fEXT);
 }
 
-/* glVertexStream4fATI */
+/* glProgramUniform1iEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4fATI (void)
+gdk_gl_get_glProgramUniform1iEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4fATI == (GdkGLProc_glVertexStream4fATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4fATI =
-      (GdkGLProc_glVertexStream4fATI) gdk_gl_get_proc_address ("glVertexStream4fATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform1iEXT == (GdkGLProc_glProgramUniform1iEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform1iEXT =
+      (GdkGLProc_glProgramUniform1iEXT) gdk_gl_get_proc_address ("glProgramUniform1iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4fATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4fATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform1iEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform1iEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4fATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform1iEXT);
 }
 
-/* glVertexStream4fvATI */
+/* glProgramUniform2iEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4fvATI (void)
+gdk_gl_get_glProgramUniform2iEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4fvATI == (GdkGLProc_glVertexStream4fvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4fvATI =
-      (GdkGLProc_glVertexStream4fvATI) gdk_gl_get_proc_address ("glVertexStream4fvATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform2iEXT == (GdkGLProc_glProgramUniform2iEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform2iEXT =
+      (GdkGLProc_glProgramUniform2iEXT) gdk_gl_get_proc_address ("glProgramUniform2iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4fvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4fvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform2iEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform2iEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4fvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform2iEXT);
 }
 
-/* glVertexStream4dATI */
+/* glProgramUniform3iEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4dATI (void)
+gdk_gl_get_glProgramUniform3iEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4dATI == (GdkGLProc_glVertexStream4dATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4dATI =
-      (GdkGLProc_glVertexStream4dATI) gdk_gl_get_proc_address ("glVertexStream4dATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform3iEXT == (GdkGLProc_glProgramUniform3iEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform3iEXT =
+      (GdkGLProc_glProgramUniform3iEXT) gdk_gl_get_proc_address ("glProgramUniform3iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4dATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4dATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform3iEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform3iEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4dATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform3iEXT);
 }
 
-/* glVertexStream4dvATI */
+/* glProgramUniform4iEXT */
 GdkGLProc
-gdk_gl_get_glVertexStream4dvATI (void)
+gdk_gl_get_glProgramUniform4iEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexStream4dvATI == (GdkGLProc_glVertexStream4dvATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexStream4dvATI =
-      (GdkGLProc_glVertexStream4dvATI) gdk_gl_get_proc_address ("glVertexStream4dvATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform4iEXT == (GdkGLProc_glProgramUniform4iEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform4iEXT =
+      (GdkGLProc_glProgramUniform4iEXT) gdk_gl_get_proc_address ("glProgramUniform4iEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexStream4dvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexStream4dvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform4iEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform4iEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexStream4dvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform4iEXT);
 }
 
-/* glNormalStream3bATI */
+/* glProgramUniform1fvEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3bATI (void)
+gdk_gl_get_glProgramUniform1fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3bATI == (GdkGLProc_glNormalStream3bATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3bATI =
-      (GdkGLProc_glNormalStream3bATI) gdk_gl_get_proc_address ("glNormalStream3bATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform1fvEXT == (GdkGLProc_glProgramUniform1fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform1fvEXT =
+      (GdkGLProc_glProgramUniform1fvEXT) gdk_gl_get_proc_address ("glProgramUniform1fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3bATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3bATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform1fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform1fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3bATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform1fvEXT);
 }
 
-/* glNormalStream3bvATI */
+/* glProgramUniform2fvEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3bvATI (void)
+gdk_gl_get_glProgramUniform2fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3bvATI == (GdkGLProc_glNormalStream3bvATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3bvATI =
-      (GdkGLProc_glNormalStream3bvATI) gdk_gl_get_proc_address ("glNormalStream3bvATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform2fvEXT == (GdkGLProc_glProgramUniform2fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform2fvEXT =
+      (GdkGLProc_glProgramUniform2fvEXT) gdk_gl_get_proc_address ("glProgramUniform2fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3bvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3bvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform2fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform2fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3bvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform2fvEXT);
 }
 
-/* glNormalStream3sATI */
+/* glProgramUniform3fvEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3sATI (void)
+gdk_gl_get_glProgramUniform3fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3sATI == (GdkGLProc_glNormalStream3sATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3sATI =
-      (GdkGLProc_glNormalStream3sATI) gdk_gl_get_proc_address ("glNormalStream3sATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform3fvEXT == (GdkGLProc_glProgramUniform3fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform3fvEXT =
+      (GdkGLProc_glProgramUniform3fvEXT) gdk_gl_get_proc_address ("glProgramUniform3fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3sATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3sATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform3fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform3fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3sATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform3fvEXT);
 }
 
-/* glNormalStream3svATI */
+/* glProgramUniform4fvEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3svATI (void)
+gdk_gl_get_glProgramUniform4fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3svATI == (GdkGLProc_glNormalStream3svATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3svATI =
-      (GdkGLProc_glNormalStream3svATI) gdk_gl_get_proc_address ("glNormalStream3svATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform4fvEXT == (GdkGLProc_glProgramUniform4fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform4fvEXT =
+      (GdkGLProc_glProgramUniform4fvEXT) gdk_gl_get_proc_address ("glProgramUniform4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3svATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3svATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform4fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform4fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3svATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform4fvEXT);
 }
 
-/* glNormalStream3iATI */
+/* glProgramUniform1ivEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3iATI (void)
+gdk_gl_get_glProgramUniform1ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3iATI == (GdkGLProc_glNormalStream3iATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3iATI =
-      (GdkGLProc_glNormalStream3iATI) gdk_gl_get_proc_address ("glNormalStream3iATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform1ivEXT == (GdkGLProc_glProgramUniform1ivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform1ivEXT =
+      (GdkGLProc_glProgramUniform1ivEXT) gdk_gl_get_proc_address ("glProgramUniform1ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3iATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3iATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform1ivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform1ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3iATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform1ivEXT);
 }
 
-/* glNormalStream3ivATI */
+/* glProgramUniform2ivEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3ivATI (void)
+gdk_gl_get_glProgramUniform2ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3ivATI == (GdkGLProc_glNormalStream3ivATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3ivATI =
-      (GdkGLProc_glNormalStream3ivATI) gdk_gl_get_proc_address ("glNormalStream3ivATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform2ivEXT == (GdkGLProc_glProgramUniform2ivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform2ivEXT =
+      (GdkGLProc_glProgramUniform2ivEXT) gdk_gl_get_proc_address ("glProgramUniform2ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3ivATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3ivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform2ivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform2ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3ivATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform2ivEXT);
 }
 
-/* glNormalStream3fATI */
+/* glProgramUniform3ivEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3fATI (void)
+gdk_gl_get_glProgramUniform3ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3fATI == (GdkGLProc_glNormalStream3fATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3fATI =
-      (GdkGLProc_glNormalStream3fATI) gdk_gl_get_proc_address ("glNormalStream3fATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform3ivEXT == (GdkGLProc_glProgramUniform3ivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform3ivEXT =
+      (GdkGLProc_glProgramUniform3ivEXT) gdk_gl_get_proc_address ("glProgramUniform3ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3fATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3fATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform3ivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform3ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3fATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform3ivEXT);
 }
 
-/* glNormalStream3fvATI */
+/* glProgramUniform4ivEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3fvATI (void)
+gdk_gl_get_glProgramUniform4ivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3fvATI == (GdkGLProc_glNormalStream3fvATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3fvATI =
-      (GdkGLProc_glNormalStream3fvATI) gdk_gl_get_proc_address ("glNormalStream3fvATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform4ivEXT == (GdkGLProc_glProgramUniform4ivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform4ivEXT =
+      (GdkGLProc_glProgramUniform4ivEXT) gdk_gl_get_proc_address ("glProgramUniform4ivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3fvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3fvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform4ivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform4ivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3fvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform4ivEXT);
 }
 
-/* glNormalStream3dATI */
+/* glProgramUniformMatrix2fvEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3dATI (void)
+gdk_gl_get_glProgramUniformMatrix2fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3dATI == (GdkGLProc_glNormalStream3dATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3dATI =
-      (GdkGLProc_glNormalStream3dATI) gdk_gl_get_proc_address ("glNormalStream3dATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2fvEXT == (GdkGLProc_glProgramUniformMatrix2fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix2fvEXT =
+      (GdkGLProc_glProgramUniformMatrix2fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix2fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3dATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3dATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix2fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3dATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2fvEXT);
 }
 
-/* glNormalStream3dvATI */
+/* glProgramUniformMatrix3fvEXT */
 GdkGLProc
-gdk_gl_get_glNormalStream3dvATI (void)
+gdk_gl_get_glProgramUniformMatrix3fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glNormalStream3dvATI == (GdkGLProc_glNormalStream3dvATI) -1)
-    _procs_GL_ATI_vertex_streams.glNormalStream3dvATI =
-      (GdkGLProc_glNormalStream3dvATI) gdk_gl_get_proc_address ("glNormalStream3dvATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3fvEXT == (GdkGLProc_glProgramUniformMatrix3fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix3fvEXT =
+      (GdkGLProc_glProgramUniformMatrix3fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix3fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormalStream3dvATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glNormalStream3dvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix3fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glNormalStream3dvATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3fvEXT);
 }
 
-/* glClientActiveVertexStreamATI */
+/* glProgramUniformMatrix4fvEXT */
 GdkGLProc
-gdk_gl_get_glClientActiveVertexStreamATI (void)
+gdk_gl_get_glProgramUniformMatrix4fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI == (GdkGLProc_glClientActiveVertexStreamATI) -1)
-    _procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI =
-      (GdkGLProc_glClientActiveVertexStreamATI) gdk_gl_get_proc_address ("glClientActiveVertexStreamATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4fvEXT == (GdkGLProc_glProgramUniformMatrix4fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix4fvEXT =
+      (GdkGLProc_glProgramUniformMatrix4fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glClientActiveVertexStreamATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix4fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glClientActiveVertexStreamATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4fvEXT);
 }
 
-/* glVertexBlendEnviATI */
+/* glProgramUniformMatrix2x3fvEXT */
 GdkGLProc
-gdk_gl_get_glVertexBlendEnviATI (void)
+gdk_gl_get_glProgramUniformMatrix2x3fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexBlendEnviATI == (GdkGLProc_glVertexBlendEnviATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexBlendEnviATI =
-      (GdkGLProc_glVertexBlendEnviATI) gdk_gl_get_proc_address ("glVertexBlendEnviATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x3fvEXT == (GdkGLProc_glProgramUniformMatrix2x3fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x3fvEXT =
+      (GdkGLProc_glProgramUniformMatrix2x3fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix2x3fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexBlendEnviATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexBlendEnviATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix2x3fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x3fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexBlendEnviATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x3fvEXT);
 }
 
-/* glVertexBlendEnvfATI */
+/* glProgramUniformMatrix3x2fvEXT */
 GdkGLProc
-gdk_gl_get_glVertexBlendEnvfATI (void)
+gdk_gl_get_glProgramUniformMatrix3x2fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI == (GdkGLProc_glVertexBlendEnvfATI) -1)
-    _procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI =
-      (GdkGLProc_glVertexBlendEnvfATI) gdk_gl_get_proc_address ("glVertexBlendEnvfATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x2fvEXT == (GdkGLProc_glProgramUniformMatrix3x2fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x2fvEXT =
+      (GdkGLProc_glProgramUniformMatrix3x2fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix3x2fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexBlendEnvfATI () - %s",
-               (_procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix3x2fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x2fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_streams.glVertexBlendEnvfATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x2fvEXT);
 }
 
-/* Get GL_ATI_vertex_streams functions */
-GdkGL_GL_ATI_vertex_streams *
-gdk_gl_get_GL_ATI_vertex_streams (void)
+/* glProgramUniformMatrix2x4fvEXT */
+GdkGLProc
+gdk_gl_get_glProgramUniformMatrix2x4fvEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_vertex_streams");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glVertexStream1sATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream1svATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream1iATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream1ivATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream1fATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream1fvATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream1dATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream1dvATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2sATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2svATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2iATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2ivATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2fATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2fvATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2dATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream2dvATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3sATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3svATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3iATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3ivATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3fATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3fvATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3dATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream3dvATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4sATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4svATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4iATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4ivATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4fATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4fvATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4dATI () != NULL);
-          supported &= (gdk_gl_get_glVertexStream4dvATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3bATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3bvATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3sATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3svATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3iATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3ivATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3fATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3fvATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3dATI () != NULL);
-          supported &= (gdk_gl_get_glNormalStream3dvATI () != NULL);
-          supported &= (gdk_gl_get_glClientActiveVertexStreamATI () != NULL);
-          supported &= (gdk_gl_get_glVertexBlendEnviATI () != NULL);
-          supported &= (gdk_gl_get_glVertexBlendEnvfATI () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x4fvEXT == (GdkGLProc_glProgramUniformMatrix2x4fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x4fvEXT =
+      (GdkGLProc_glProgramUniformMatrix2x4fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix2x4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_vertex_streams () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glProgramUniformMatrix2x4fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x4fvEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_ATI_vertex_streams;
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix2x4fvEXT);
 }
 
-/*
- * GL_ATI_element_array
- */
-
-static GdkGL_GL_ATI_element_array _procs_GL_ATI_element_array = {
-  (GdkGLProc_glElementPointerATI) -1,
-  (GdkGLProc_glDrawElementArrayATI) -1,
-  (GdkGLProc_glDrawRangeElementArrayATI) -1
-};
-
-/* glElementPointerATI */
+/* glProgramUniformMatrix4x2fvEXT */
 GdkGLProc
-gdk_gl_get_glElementPointerATI (void)
+gdk_gl_get_glProgramUniformMatrix4x2fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_element_array.glElementPointerATI == (GdkGLProc_glElementPointerATI) -1)
-    _procs_GL_ATI_element_array.glElementPointerATI =
-      (GdkGLProc_glElementPointerATI) gdk_gl_get_proc_address ("glElementPointerATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x2fvEXT == (GdkGLProc_glProgramUniformMatrix4x2fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x2fvEXT =
+      (GdkGLProc_glProgramUniformMatrix4x2fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix4x2fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glElementPointerATI () - %s",
-               (_procs_GL_ATI_element_array.glElementPointerATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix4x2fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x2fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_element_array.glElementPointerATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x2fvEXT);
 }
 
-/* glDrawElementArrayATI */
+/* glProgramUniformMatrix3x4fvEXT */
 GdkGLProc
-gdk_gl_get_glDrawElementArrayATI (void)
+gdk_gl_get_glProgramUniformMatrix3x4fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_element_array.glDrawElementArrayATI == (GdkGLProc_glDrawElementArrayATI) -1)
-    _procs_GL_ATI_element_array.glDrawElementArrayATI =
-      (GdkGLProc_glDrawElementArrayATI) gdk_gl_get_proc_address ("glDrawElementArrayATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x4fvEXT == (GdkGLProc_glProgramUniformMatrix3x4fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x4fvEXT =
+      (GdkGLProc_glProgramUniformMatrix3x4fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix3x4fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawElementArrayATI () - %s",
-               (_procs_GL_ATI_element_array.glDrawElementArrayATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix3x4fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x4fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_element_array.glDrawElementArrayATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix3x4fvEXT);
 }
 
-/* glDrawRangeElementArrayATI */
+/* glProgramUniformMatrix4x3fvEXT */
 GdkGLProc
-gdk_gl_get_glDrawRangeElementArrayATI (void)
+gdk_gl_get_glProgramUniformMatrix4x3fvEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_element_array.glDrawRangeElementArrayATI == (GdkGLProc_glDrawRangeElementArrayATI) -1)
-    _procs_GL_ATI_element_array.glDrawRangeElementArrayATI =
-      (GdkGLProc_glDrawRangeElementArrayATI) gdk_gl_get_proc_address ("glDrawRangeElementArrayATI");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x3fvEXT == (GdkGLProc_glProgramUniformMatrix4x3fvEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x3fvEXT =
+      (GdkGLProc_glProgramUniformMatrix4x3fvEXT) gdk_gl_get_proc_address ("glProgramUniformMatrix4x3fvEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawRangeElementArrayATI () - %s",
-               (_procs_GL_ATI_element_array.glDrawRangeElementArrayATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformMatrix4x3fvEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x3fvEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_element_array.glDrawRangeElementArrayATI);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniformMatrix4x3fvEXT);
 }
 
-/* Get GL_ATI_element_array functions */
-GdkGL_GL_ATI_element_array *
-gdk_gl_get_GL_ATI_element_array (void)
+/* glProgramUniform1uiEXT */
+GdkGLProc
+gdk_gl_get_glProgramUniform1uiEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_element_array");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glElementPointerATI () != NULL);
-          supported &= (gdk_gl_get_glDrawElementArrayATI () != NULL);
-          supported &= (gdk_gl_get_glDrawRangeElementArrayATI () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform1uiEXT == (GdkGLProc_glProgramUniform1uiEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform1uiEXT =
+      (GdkGLProc_glProgramUniform1uiEXT) gdk_gl_get_proc_address ("glProgramUniform1uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_element_array () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glProgramUniform1uiEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform1uiEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_ATI_element_array;
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform1uiEXT);
 }
 
-/*
- * GL_SUN_mesh_array
- */
-
-static GdkGL_GL_SUN_mesh_array _procs_GL_SUN_mesh_array = {
-  (GdkGLProc_glDrawMeshArraysSUN) -1
-};
-
-/* glDrawMeshArraysSUN */
+/* glProgramUniform2uiEXT */
 GdkGLProc
-gdk_gl_get_glDrawMeshArraysSUN (void)
+gdk_gl_get_glProgramUniform2uiEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_SUN_mesh_array.glDrawMeshArraysSUN == (GdkGLProc_glDrawMeshArraysSUN) -1)
-    _procs_GL_SUN_mesh_array.glDrawMeshArraysSUN =
-      (GdkGLProc_glDrawMeshArraysSUN) gdk_gl_get_proc_address ("glDrawMeshArraysSUN");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform2uiEXT == (GdkGLProc_glProgramUniform2uiEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform2uiEXT =
+      (GdkGLProc_glProgramUniform2uiEXT) gdk_gl_get_proc_address ("glProgramUniform2uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawMeshArraysSUN () - %s",
-               (_procs_GL_SUN_mesh_array.glDrawMeshArraysSUN) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform2uiEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform2uiEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_SUN_mesh_array.glDrawMeshArraysSUN);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform2uiEXT);
 }
 
-/* Get GL_SUN_mesh_array functions */
-GdkGL_GL_SUN_mesh_array *
-gdk_gl_get_GL_SUN_mesh_array (void)
+/* glProgramUniform3uiEXT */
+GdkGLProc
+gdk_gl_get_glProgramUniform3uiEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_SUN_mesh_array");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glDrawMeshArraysSUN () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform3uiEXT == (GdkGLProc_glProgramUniform3uiEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform3uiEXT =
+      (GdkGLProc_glProgramUniform3uiEXT) gdk_gl_get_proc_address ("glProgramUniform3uiEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_SUN_mesh_array () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform3uiEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform3uiEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform3uiEXT);
+}
+
+/* glProgramUniform4uiEXT */
+GdkGLProc
+gdk_gl_get_glProgramUniform4uiEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_SUN_mesh_array;
-}
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform4uiEXT == (GdkGLProc_glProgramUniform4uiEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform4uiEXT =
+      (GdkGLProc_glProgramUniform4uiEXT) gdk_gl_get_proc_address ("glProgramUniform4uiEXT");
 
-/*
- * GL_NV_occlusion_query
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glProgramUniform4uiEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform4uiEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_NV_occlusion_query _procs_GL_NV_occlusion_query = {
-  (GdkGLProc_glGenOcclusionQueriesNV) -1,
-  (GdkGLProc_glDeleteOcclusionQueriesNV) -1,
-  (GdkGLProc_glIsOcclusionQueryNV) -1,
-  (GdkGLProc_glBeginOcclusionQueryNV) -1,
-  (GdkGLProc_glEndOcclusionQueryNV) -1,
-  (GdkGLProc_glGetOcclusionQueryivNV) -1,
-  (GdkGLProc_glGetOcclusionQueryuivNV) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform4uiEXT);
+}
 
-/* glGenOcclusionQueriesNV */
+/* glProgramUniform1uivEXT */
 GdkGLProc
-gdk_gl_get_glGenOcclusionQueriesNV (void)
+gdk_gl_get_glProgramUniform1uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV == (GdkGLProc_glGenOcclusionQueriesNV) -1)
-    _procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV =
-      (GdkGLProc_glGenOcclusionQueriesNV) gdk_gl_get_proc_address ("glGenOcclusionQueriesNV");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform1uivEXT == (GdkGLProc_glProgramUniform1uivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform1uivEXT =
+      (GdkGLProc_glProgramUniform1uivEXT) gdk_gl_get_proc_address ("glProgramUniform1uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenOcclusionQueriesNV () - %s",
-               (_procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform1uivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform1uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glGenOcclusionQueriesNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform1uivEXT);
 }
 
-/* glDeleteOcclusionQueriesNV */
+/* glProgramUniform2uivEXT */
 GdkGLProc
-gdk_gl_get_glDeleteOcclusionQueriesNV (void)
+gdk_gl_get_glProgramUniform2uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV == (GdkGLProc_glDeleteOcclusionQueriesNV) -1)
-    _procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV =
-      (GdkGLProc_glDeleteOcclusionQueriesNV) gdk_gl_get_proc_address ("glDeleteOcclusionQueriesNV");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform2uivEXT == (GdkGLProc_glProgramUniform2uivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform2uivEXT =
+      (GdkGLProc_glProgramUniform2uivEXT) gdk_gl_get_proc_address ("glProgramUniform2uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteOcclusionQueriesNV () - %s",
-               (_procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform2uivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform2uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glDeleteOcclusionQueriesNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform2uivEXT);
 }
 
-/* glIsOcclusionQueryNV */
+/* glProgramUniform3uivEXT */
 GdkGLProc
-gdk_gl_get_glIsOcclusionQueryNV (void)
+gdk_gl_get_glProgramUniform3uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_occlusion_query.glIsOcclusionQueryNV == (GdkGLProc_glIsOcclusionQueryNV) -1)
-    _procs_GL_NV_occlusion_query.glIsOcclusionQueryNV =
-      (GdkGLProc_glIsOcclusionQueryNV) gdk_gl_get_proc_address ("glIsOcclusionQueryNV");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform3uivEXT == (GdkGLProc_glProgramUniform3uivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform3uivEXT =
+      (GdkGLProc_glProgramUniform3uivEXT) gdk_gl_get_proc_address ("glProgramUniform3uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsOcclusionQueryNV () - %s",
-               (_procs_GL_NV_occlusion_query.glIsOcclusionQueryNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform3uivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform3uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glIsOcclusionQueryNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform3uivEXT);
 }
 
-/* glBeginOcclusionQueryNV */
+/* glProgramUniform4uivEXT */
 GdkGLProc
-gdk_gl_get_glBeginOcclusionQueryNV (void)
+gdk_gl_get_glProgramUniform4uivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV == (GdkGLProc_glBeginOcclusionQueryNV) -1)
-    _procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV =
-      (GdkGLProc_glBeginOcclusionQueryNV) gdk_gl_get_proc_address ("glBeginOcclusionQueryNV");
+  if (_procs_GL_EXT_direct_state_access.glProgramUniform4uivEXT == (GdkGLProc_glProgramUniform4uivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glProgramUniform4uivEXT =
+      (GdkGLProc_glProgramUniform4uivEXT) gdk_gl_get_proc_address ("glProgramUniform4uivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBeginOcclusionQueryNV () - %s",
-               (_procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniform4uivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glProgramUniform4uivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glBeginOcclusionQueryNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glProgramUniform4uivEXT);
 }
 
-/* glEndOcclusionQueryNV */
+/* glNamedBufferDataEXT */
 GdkGLProc
-gdk_gl_get_glEndOcclusionQueryNV (void)
+gdk_gl_get_glNamedBufferDataEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_occlusion_query.glEndOcclusionQueryNV == (GdkGLProc_glEndOcclusionQueryNV) -1)
-    _procs_GL_NV_occlusion_query.glEndOcclusionQueryNV =
-      (GdkGLProc_glEndOcclusionQueryNV) gdk_gl_get_proc_address ("glEndOcclusionQueryNV");
+  if (_procs_GL_EXT_direct_state_access.glNamedBufferDataEXT == (GdkGLProc_glNamedBufferDataEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedBufferDataEXT =
+      (GdkGLProc_glNamedBufferDataEXT) gdk_gl_get_proc_address ("glNamedBufferDataEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEndOcclusionQueryNV () - %s",
-               (_procs_GL_NV_occlusion_query.glEndOcclusionQueryNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedBufferDataEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedBufferDataEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glEndOcclusionQueryNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedBufferDataEXT);
 }
 
-/* glGetOcclusionQueryivNV */
+/* glNamedBufferSubDataEXT */
 GdkGLProc
-gdk_gl_get_glGetOcclusionQueryivNV (void)
+gdk_gl_get_glNamedBufferSubDataEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV == (GdkGLProc_glGetOcclusionQueryivNV) -1)
-    _procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV =
-      (GdkGLProc_glGetOcclusionQueryivNV) gdk_gl_get_proc_address ("glGetOcclusionQueryivNV");
+  if (_procs_GL_EXT_direct_state_access.glNamedBufferSubDataEXT == (GdkGLProc_glNamedBufferSubDataEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedBufferSubDataEXT =
+      (GdkGLProc_glNamedBufferSubDataEXT) gdk_gl_get_proc_address ("glNamedBufferSubDataEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetOcclusionQueryivNV () - %s",
-               (_procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedBufferSubDataEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedBufferSubDataEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glGetOcclusionQueryivNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedBufferSubDataEXT);
 }
 
-/* glGetOcclusionQueryuivNV */
+/* glMapNamedBufferEXT */
 GdkGLProc
-gdk_gl_get_glGetOcclusionQueryuivNV (void)
+gdk_gl_get_glMapNamedBufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV == (GdkGLProc_glGetOcclusionQueryuivNV) -1)
-    _procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV =
-      (GdkGLProc_glGetOcclusionQueryuivNV) gdk_gl_get_proc_address ("glGetOcclusionQueryuivNV");
+  if (_procs_GL_EXT_direct_state_access.glMapNamedBufferEXT == (GdkGLProc_glMapNamedBufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMapNamedBufferEXT =
+      (GdkGLProc_glMapNamedBufferEXT) gdk_gl_get_proc_address ("glMapNamedBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetOcclusionQueryuivNV () - %s",
-               (_procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMapNamedBufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMapNamedBufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_occlusion_query.glGetOcclusionQueryuivNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMapNamedBufferEXT);
 }
 
-/* Get GL_NV_occlusion_query functions */
-GdkGL_GL_NV_occlusion_query *
-gdk_gl_get_GL_NV_occlusion_query (void)
+/* glUnmapNamedBufferEXT */
+GdkGLProc
+gdk_gl_get_glUnmapNamedBufferEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_NV_occlusion_query");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glGenOcclusionQueriesNV () != NULL);
-          supported &= (gdk_gl_get_glDeleteOcclusionQueriesNV () != NULL);
-          supported &= (gdk_gl_get_glIsOcclusionQueryNV () != NULL);
-          supported &= (gdk_gl_get_glBeginOcclusionQueryNV () != NULL);
-          supported &= (gdk_gl_get_glEndOcclusionQueryNV () != NULL);
-          supported &= (gdk_gl_get_glGetOcclusionQueryivNV () != NULL);
-          supported &= (gdk_gl_get_glGetOcclusionQueryuivNV () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glUnmapNamedBufferEXT == (GdkGLProc_glUnmapNamedBufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glUnmapNamedBufferEXT =
+      (GdkGLProc_glUnmapNamedBufferEXT) gdk_gl_get_proc_address ("glUnmapNamedBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_occlusion_query () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUnmapNamedBufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glUnmapNamedBufferEXT) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_NV_occlusion_query;
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glUnmapNamedBufferEXT);
 }
 
-/*
- * GL_NV_point_sprite
- */
-
-static GdkGL_GL_NV_point_sprite _procs_GL_NV_point_sprite = {
-  (GdkGLProc_glPointParameteriNV) -1,
-  (GdkGLProc_glPointParameterivNV) -1
-};
-
-/* glPointParameteriNV */
+/* glGetNamedBufferParameterivEXT */
 GdkGLProc
-gdk_gl_get_glPointParameteriNV (void)
+gdk_gl_get_glGetNamedBufferParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_point_sprite.glPointParameteriNV == (GdkGLProc_glPointParameteriNV) -1)
-    _procs_GL_NV_point_sprite.glPointParameteriNV =
-      (GdkGLProc_glPointParameteriNV) gdk_gl_get_proc_address ("glPointParameteriNV");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedBufferParameterivEXT == (GdkGLProc_glGetNamedBufferParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedBufferParameterivEXT =
+      (GdkGLProc_glGetNamedBufferParameterivEXT) gdk_gl_get_proc_address ("glGetNamedBufferParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameteriNV () - %s",
-               (_procs_GL_NV_point_sprite.glPointParameteriNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedBufferParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedBufferParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_point_sprite.glPointParameteriNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedBufferParameterivEXT);
 }
 
-/* glPointParameterivNV */
+/* glGetNamedBufferPointervEXT */
 GdkGLProc
-gdk_gl_get_glPointParameterivNV (void)
+gdk_gl_get_glGetNamedBufferPointervEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_point_sprite.glPointParameterivNV == (GdkGLProc_glPointParameterivNV) -1)
-    _procs_GL_NV_point_sprite.glPointParameterivNV =
-      (GdkGLProc_glPointParameterivNV) gdk_gl_get_proc_address ("glPointParameterivNV");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedBufferPointervEXT == (GdkGLProc_glGetNamedBufferPointervEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedBufferPointervEXT =
+      (GdkGLProc_glGetNamedBufferPointervEXT) gdk_gl_get_proc_address ("glGetNamedBufferPointervEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPointParameterivNV () - %s",
-               (_procs_GL_NV_point_sprite.glPointParameterivNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedBufferPointervEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedBufferPointervEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_point_sprite.glPointParameterivNV);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedBufferPointervEXT);
 }
 
-/* Get GL_NV_point_sprite functions */
-GdkGL_GL_NV_point_sprite *
-gdk_gl_get_GL_NV_point_sprite (void)
+/* glGetNamedBufferSubDataEXT */
+GdkGLProc
+gdk_gl_get_glGetNamedBufferSubDataEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_NV_point_sprite");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glPointParameteriNV () != NULL);
-          supported &= (gdk_gl_get_glPointParameterivNV () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glGetNamedBufferSubDataEXT == (GdkGLProc_glGetNamedBufferSubDataEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedBufferSubDataEXT =
+      (GdkGLProc_glGetNamedBufferSubDataEXT) gdk_gl_get_proc_address ("glGetNamedBufferSubDataEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_point_sprite () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glGetNamedBufferSubDataEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedBufferSubDataEXT) ? "supported" : "not supported"));
 
-  return &_procs_GL_NV_point_sprite;
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedBufferSubDataEXT);
 }
 
-/*
- * GL_EXT_stencil_two_side
- */
-
-static GdkGL_GL_EXT_stencil_two_side _procs_GL_EXT_stencil_two_side = {
-  (GdkGLProc_glActiveStencilFaceEXT) -1
-};
-
-/* glActiveStencilFaceEXT */
+/* glTextureBufferEXT */
 GdkGLProc
-gdk_gl_get_glActiveStencilFaceEXT (void)
+gdk_gl_get_glTextureBufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT == (GdkGLProc_glActiveStencilFaceEXT) -1)
-    _procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT =
-      (GdkGLProc_glActiveStencilFaceEXT) gdk_gl_get_proc_address ("glActiveStencilFaceEXT");
+  if (_procs_GL_EXT_direct_state_access.glTextureBufferEXT == (GdkGLProc_glTextureBufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureBufferEXT =
+      (GdkGLProc_glTextureBufferEXT) gdk_gl_get_proc_address ("glTextureBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glActiveStencilFaceEXT () - %s",
-               (_procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureBufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureBufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_EXT_stencil_two_side.glActiveStencilFaceEXT);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureBufferEXT);
 }
 
-/* Get GL_EXT_stencil_two_side functions */
-GdkGL_GL_EXT_stencil_two_side *
-gdk_gl_get_GL_EXT_stencil_two_side (void)
+/* glMultiTexBufferEXT */
+GdkGLProc
+gdk_gl_get_glMultiTexBufferEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_stencil_two_side");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glActiveStencilFaceEXT () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glMultiTexBufferEXT == (GdkGLProc_glMultiTexBufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexBufferEXT =
+      (GdkGLProc_glMultiTexBufferEXT) gdk_gl_get_proc_address ("glMultiTexBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_stencil_two_side () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexBufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexBufferEXT) ? "supported" : "not supported"));
 
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_stencil_two_side;
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexBufferEXT);
 }
 
-/*
- * GL_APPLE_element_array
- */
-
-static GdkGL_GL_APPLE_element_array _procs_GL_APPLE_element_array = {
-  (GdkGLProc_glElementPointerAPPLE) -1,
-  (GdkGLProc_glDrawElementArrayAPPLE) -1,
-  (GdkGLProc_glDrawRangeElementArrayAPPLE) -1,
-  (GdkGLProc_glMultiDrawElementArrayAPPLE) -1,
-  (GdkGLProc_glMultiDrawRangeElementArrayAPPLE) -1
-};
-
-/* glElementPointerAPPLE */
+/* glNamedRenderbufferStorageEXT */
 GdkGLProc
-gdk_gl_get_glElementPointerAPPLE (void)
+gdk_gl_get_glNamedRenderbufferStorageEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_element_array.glElementPointerAPPLE == (GdkGLProc_glElementPointerAPPLE) -1)
-    _procs_GL_APPLE_element_array.glElementPointerAPPLE =
-      (GdkGLProc_glElementPointerAPPLE) gdk_gl_get_proc_address ("glElementPointerAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageEXT == (GdkGLProc_glNamedRenderbufferStorageEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageEXT =
+      (GdkGLProc_glNamedRenderbufferStorageEXT) gdk_gl_get_proc_address ("glNamedRenderbufferStorageEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glElementPointerAPPLE () - %s",
-               (_procs_GL_APPLE_element_array.glElementPointerAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedRenderbufferStorageEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_element_array.glElementPointerAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageEXT);
 }
 
-/* glDrawElementArrayAPPLE */
+/* glGetNamedRenderbufferParameterivEXT */
 GdkGLProc
-gdk_gl_get_glDrawElementArrayAPPLE (void)
+gdk_gl_get_glGetNamedRenderbufferParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_element_array.glDrawElementArrayAPPLE == (GdkGLProc_glDrawElementArrayAPPLE) -1)
-    _procs_GL_APPLE_element_array.glDrawElementArrayAPPLE =
-      (GdkGLProc_glDrawElementArrayAPPLE) gdk_gl_get_proc_address ("glDrawElementArrayAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedRenderbufferParameterivEXT == (GdkGLProc_glGetNamedRenderbufferParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedRenderbufferParameterivEXT =
+      (GdkGLProc_glGetNamedRenderbufferParameterivEXT) gdk_gl_get_proc_address ("glGetNamedRenderbufferParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawElementArrayAPPLE () - %s",
-               (_procs_GL_APPLE_element_array.glDrawElementArrayAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedRenderbufferParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedRenderbufferParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_element_array.glDrawElementArrayAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedRenderbufferParameterivEXT);
 }
 
-/* glDrawRangeElementArrayAPPLE */
+/* glCheckNamedFramebufferStatusEXT */
 GdkGLProc
-gdk_gl_get_glDrawRangeElementArrayAPPLE (void)
+gdk_gl_get_glCheckNamedFramebufferStatusEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE == (GdkGLProc_glDrawRangeElementArrayAPPLE) -1)
-    _procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE =
-      (GdkGLProc_glDrawRangeElementArrayAPPLE) gdk_gl_get_proc_address ("glDrawRangeElementArrayAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glCheckNamedFramebufferStatusEXT == (GdkGLProc_glCheckNamedFramebufferStatusEXT) -1)
+    _procs_GL_EXT_direct_state_access.glCheckNamedFramebufferStatusEXT =
+      (GdkGLProc_glCheckNamedFramebufferStatusEXT) gdk_gl_get_proc_address ("glCheckNamedFramebufferStatusEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawRangeElementArrayAPPLE () - %s",
-               (_procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCheckNamedFramebufferStatusEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glCheckNamedFramebufferStatusEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_element_array.glDrawRangeElementArrayAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glCheckNamedFramebufferStatusEXT);
 }
 
-/* glMultiDrawElementArrayAPPLE */
+/* glNamedFramebufferTexture1DEXT */
 GdkGLProc
-gdk_gl_get_glMultiDrawElementArrayAPPLE (void)
+gdk_gl_get_glNamedFramebufferTexture1DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE == (GdkGLProc_glMultiDrawElementArrayAPPLE) -1)
-    _procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE =
-      (GdkGLProc_glMultiDrawElementArrayAPPLE) gdk_gl_get_proc_address ("glMultiDrawElementArrayAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture1DEXT == (GdkGLProc_glNamedFramebufferTexture1DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedFramebufferTexture1DEXT =
+      (GdkGLProc_glNamedFramebufferTexture1DEXT) gdk_gl_get_proc_address ("glNamedFramebufferTexture1DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiDrawElementArrayAPPLE () - %s",
-               (_procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedFramebufferTexture1DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture1DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_element_array.glMultiDrawElementArrayAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture1DEXT);
 }
 
-/* glMultiDrawRangeElementArrayAPPLE */
+/* glNamedFramebufferTexture2DEXT */
 GdkGLProc
-gdk_gl_get_glMultiDrawRangeElementArrayAPPLE (void)
+gdk_gl_get_glNamedFramebufferTexture2DEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE == (GdkGLProc_glMultiDrawRangeElementArrayAPPLE) -1)
-    _procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE =
-      (GdkGLProc_glMultiDrawRangeElementArrayAPPLE) gdk_gl_get_proc_address ("glMultiDrawRangeElementArrayAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture2DEXT == (GdkGLProc_glNamedFramebufferTexture2DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedFramebufferTexture2DEXT =
+      (GdkGLProc_glNamedFramebufferTexture2DEXT) gdk_gl_get_proc_address ("glNamedFramebufferTexture2DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiDrawRangeElementArrayAPPLE () - %s",
-               (_procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedFramebufferTexture2DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture2DEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_element_array.glMultiDrawRangeElementArrayAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture2DEXT);
 }
 
-/* Get GL_APPLE_element_array functions */
-GdkGL_GL_APPLE_element_array *
-gdk_gl_get_GL_APPLE_element_array (void)
+/* glNamedFramebufferTexture3DEXT */
+GdkGLProc
+gdk_gl_get_glNamedFramebufferTexture3DEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_APPLE_element_array");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glElementPointerAPPLE () != NULL);
-          supported &= (gdk_gl_get_glDrawElementArrayAPPLE () != NULL);
-          supported &= (gdk_gl_get_glDrawRangeElementArrayAPPLE () != NULL);
-          supported &= (gdk_gl_get_glMultiDrawElementArrayAPPLE () != NULL);
-          supported &= (gdk_gl_get_glMultiDrawRangeElementArrayAPPLE () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture3DEXT == (GdkGLProc_glNamedFramebufferTexture3DEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedFramebufferTexture3DEXT =
+      (GdkGLProc_glNamedFramebufferTexture3DEXT) gdk_gl_get_proc_address ("glNamedFramebufferTexture3DEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_APPLE_element_array () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedFramebufferTexture3DEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture3DEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedFramebufferTexture3DEXT);
+}
+
+/* glNamedFramebufferRenderbufferEXT */
+GdkGLProc
+gdk_gl_get_glNamedFramebufferRenderbufferEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_APPLE_element_array;
-}
+  if (_procs_GL_EXT_direct_state_access.glNamedFramebufferRenderbufferEXT == (GdkGLProc_glNamedFramebufferRenderbufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedFramebufferRenderbufferEXT =
+      (GdkGLProc_glNamedFramebufferRenderbufferEXT) gdk_gl_get_proc_address ("glNamedFramebufferRenderbufferEXT");
 
-/*
- * GL_APPLE_fence
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNamedFramebufferRenderbufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedFramebufferRenderbufferEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_APPLE_fence _procs_GL_APPLE_fence = {
-  (GdkGLProc_glGenFencesAPPLE) -1,
-  (GdkGLProc_glDeleteFencesAPPLE) -1,
-  (GdkGLProc_glSetFenceAPPLE) -1,
-  (GdkGLProc_glIsFenceAPPLE) -1,
-  (GdkGLProc_glTestFenceAPPLE) -1,
-  (GdkGLProc_glFinishFenceAPPLE) -1,
-  (GdkGLProc_glTestObjectAPPLE) -1,
-  (GdkGLProc_glFinishObjectAPPLE) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedFramebufferRenderbufferEXT);
+}
 
-/* glGenFencesAPPLE */
+/* glGetNamedFramebufferAttachmentParameterivEXT */
 GdkGLProc
-gdk_gl_get_glGenFencesAPPLE (void)
+gdk_gl_get_glGetNamedFramebufferAttachmentParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glGenFencesAPPLE == (GdkGLProc_glGenFencesAPPLE) -1)
-    _procs_GL_APPLE_fence.glGenFencesAPPLE =
-      (GdkGLProc_glGenFencesAPPLE) gdk_gl_get_proc_address ("glGenFencesAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glGetNamedFramebufferAttachmentParameterivEXT == (GdkGLProc_glGetNamedFramebufferAttachmentParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetNamedFramebufferAttachmentParameterivEXT =
+      (GdkGLProc_glGetNamedFramebufferAttachmentParameterivEXT) gdk_gl_get_proc_address ("glGetNamedFramebufferAttachmentParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenFencesAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glGenFencesAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetNamedFramebufferAttachmentParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetNamedFramebufferAttachmentParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glGenFencesAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetNamedFramebufferAttachmentParameterivEXT);
 }
 
-/* glDeleteFencesAPPLE */
+/* glGenerateTextureMipmapEXT */
 GdkGLProc
-gdk_gl_get_glDeleteFencesAPPLE (void)
+gdk_gl_get_glGenerateTextureMipmapEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glDeleteFencesAPPLE == (GdkGLProc_glDeleteFencesAPPLE) -1)
-    _procs_GL_APPLE_fence.glDeleteFencesAPPLE =
-      (GdkGLProc_glDeleteFencesAPPLE) gdk_gl_get_proc_address ("glDeleteFencesAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glGenerateTextureMipmapEXT == (GdkGLProc_glGenerateTextureMipmapEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGenerateTextureMipmapEXT =
+      (GdkGLProc_glGenerateTextureMipmapEXT) gdk_gl_get_proc_address ("glGenerateTextureMipmapEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteFencesAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glDeleteFencesAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenerateTextureMipmapEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGenerateTextureMipmapEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glDeleteFencesAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGenerateTextureMipmapEXT);
 }
 
-/* glSetFenceAPPLE */
+/* glGenerateMultiTexMipmapEXT */
 GdkGLProc
-gdk_gl_get_glSetFenceAPPLE (void)
+gdk_gl_get_glGenerateMultiTexMipmapEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glSetFenceAPPLE == (GdkGLProc_glSetFenceAPPLE) -1)
-    _procs_GL_APPLE_fence.glSetFenceAPPLE =
-      (GdkGLProc_glSetFenceAPPLE) gdk_gl_get_proc_address ("glSetFenceAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glGenerateMultiTexMipmapEXT == (GdkGLProc_glGenerateMultiTexMipmapEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGenerateMultiTexMipmapEXT =
+      (GdkGLProc_glGenerateMultiTexMipmapEXT) gdk_gl_get_proc_address ("glGenerateMultiTexMipmapEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSetFenceAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glSetFenceAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenerateMultiTexMipmapEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGenerateMultiTexMipmapEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glSetFenceAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGenerateMultiTexMipmapEXT);
 }
 
-/* glIsFenceAPPLE */
+/* glFramebufferDrawBufferEXT */
 GdkGLProc
-gdk_gl_get_glIsFenceAPPLE (void)
+gdk_gl_get_glFramebufferDrawBufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glIsFenceAPPLE == (GdkGLProc_glIsFenceAPPLE) -1)
-    _procs_GL_APPLE_fence.glIsFenceAPPLE =
-      (GdkGLProc_glIsFenceAPPLE) gdk_gl_get_proc_address ("glIsFenceAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glFramebufferDrawBufferEXT == (GdkGLProc_glFramebufferDrawBufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glFramebufferDrawBufferEXT =
+      (GdkGLProc_glFramebufferDrawBufferEXT) gdk_gl_get_proc_address ("glFramebufferDrawBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsFenceAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glIsFenceAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferDrawBufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glFramebufferDrawBufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glIsFenceAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glFramebufferDrawBufferEXT);
 }
 
-/* glTestFenceAPPLE */
+/* glFramebufferDrawBuffersEXT */
 GdkGLProc
-gdk_gl_get_glTestFenceAPPLE (void)
+gdk_gl_get_glFramebufferDrawBuffersEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glTestFenceAPPLE == (GdkGLProc_glTestFenceAPPLE) -1)
-    _procs_GL_APPLE_fence.glTestFenceAPPLE =
-      (GdkGLProc_glTestFenceAPPLE) gdk_gl_get_proc_address ("glTestFenceAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glFramebufferDrawBuffersEXT == (GdkGLProc_glFramebufferDrawBuffersEXT) -1)
+    _procs_GL_EXT_direct_state_access.glFramebufferDrawBuffersEXT =
+      (GdkGLProc_glFramebufferDrawBuffersEXT) gdk_gl_get_proc_address ("glFramebufferDrawBuffersEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTestFenceAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glTestFenceAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferDrawBuffersEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glFramebufferDrawBuffersEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glTestFenceAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glFramebufferDrawBuffersEXT);
 }
 
-/* glFinishFenceAPPLE */
+/* glFramebufferReadBufferEXT */
 GdkGLProc
-gdk_gl_get_glFinishFenceAPPLE (void)
+gdk_gl_get_glFramebufferReadBufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glFinishFenceAPPLE == (GdkGLProc_glFinishFenceAPPLE) -1)
-    _procs_GL_APPLE_fence.glFinishFenceAPPLE =
-      (GdkGLProc_glFinishFenceAPPLE) gdk_gl_get_proc_address ("glFinishFenceAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glFramebufferReadBufferEXT == (GdkGLProc_glFramebufferReadBufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glFramebufferReadBufferEXT =
+      (GdkGLProc_glFramebufferReadBufferEXT) gdk_gl_get_proc_address ("glFramebufferReadBufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFinishFenceAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glFinishFenceAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFramebufferReadBufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glFramebufferReadBufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glFinishFenceAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glFramebufferReadBufferEXT);
 }
 
-/* glTestObjectAPPLE */
+/* glGetFramebufferParameterivEXT */
 GdkGLProc
-gdk_gl_get_glTestObjectAPPLE (void)
+gdk_gl_get_glGetFramebufferParameterivEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glTestObjectAPPLE == (GdkGLProc_glTestObjectAPPLE) -1)
-    _procs_GL_APPLE_fence.glTestObjectAPPLE =
-      (GdkGLProc_glTestObjectAPPLE) gdk_gl_get_proc_address ("glTestObjectAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glGetFramebufferParameterivEXT == (GdkGLProc_glGetFramebufferParameterivEXT) -1)
+    _procs_GL_EXT_direct_state_access.glGetFramebufferParameterivEXT =
+      (GdkGLProc_glGetFramebufferParameterivEXT) gdk_gl_get_proc_address ("glGetFramebufferParameterivEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTestObjectAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glTestObjectAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetFramebufferParameterivEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glGetFramebufferParameterivEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glTestObjectAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glGetFramebufferParameterivEXT);
 }
 
-/* glFinishObjectAPPLE */
+/* glNamedRenderbufferStorageMultisampleEXT */
 GdkGLProc
-gdk_gl_get_glFinishObjectAPPLE (void)
+gdk_gl_get_glNamedRenderbufferStorageMultisampleEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_fence.glFinishObjectAPPLE == (GdkGLProc_glFinishObjectAPPLE) -1)
-    _procs_GL_APPLE_fence.glFinishObjectAPPLE =
-      (GdkGLProc_glFinishObjectAPPLE) gdk_gl_get_proc_address ("glFinishObjectAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleEXT == (GdkGLProc_glNamedRenderbufferStorageMultisampleEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleEXT =
+      (GdkGLProc_glNamedRenderbufferStorageMultisampleEXT) gdk_gl_get_proc_address ("glNamedRenderbufferStorageMultisampleEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFinishObjectAPPLE () - %s",
-               (_procs_GL_APPLE_fence.glFinishObjectAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedRenderbufferStorageMultisampleEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_fence.glFinishObjectAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleEXT);
 }
 
-/* Get GL_APPLE_fence functions */
-GdkGL_GL_APPLE_fence *
-gdk_gl_get_GL_APPLE_fence (void)
+/* glNamedRenderbufferStorageMultisampleCoverageEXT */
+GdkGLProc
+gdk_gl_get_glNamedRenderbufferStorageMultisampleCoverageEXT (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_APPLE_fence");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glGenFencesAPPLE () != NULL);
-          supported &= (gdk_gl_get_glDeleteFencesAPPLE () != NULL);
-          supported &= (gdk_gl_get_glSetFenceAPPLE () != NULL);
-          supported &= (gdk_gl_get_glIsFenceAPPLE () != NULL);
-          supported &= (gdk_gl_get_glTestFenceAPPLE () != NULL);
-          supported &= (gdk_gl_get_glFinishFenceAPPLE () != NULL);
-          supported &= (gdk_gl_get_glTestObjectAPPLE () != NULL);
-          supported &= (gdk_gl_get_glFinishObjectAPPLE () != NULL);
-        }
-    }
+  if (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleCoverageEXT == (GdkGLProc_glNamedRenderbufferStorageMultisampleCoverageEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleCoverageEXT =
+      (GdkGLProc_glNamedRenderbufferStorageMultisampleCoverageEXT) gdk_gl_get_proc_address ("glNamedRenderbufferStorageMultisampleCoverageEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_APPLE_fence () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedRenderbufferStorageMultisampleCoverageEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleCoverageEXT) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedRenderbufferStorageMultisampleCoverageEXT);
+}
+
+/* glNamedFramebufferTextureEXT */
+GdkGLProc
+gdk_gl_get_glNamedFramebufferTextureEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_APPLE_fence;
-}
+  if (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureEXT == (GdkGLProc_glNamedFramebufferTextureEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedFramebufferTextureEXT =
+      (GdkGLProc_glNamedFramebufferTextureEXT) gdk_gl_get_proc_address ("glNamedFramebufferTextureEXT");
 
-/*
- * GL_APPLE_vertex_array_object
- */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNamedFramebufferTextureEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureEXT) ? "supported" : "not supported"));
 
-static GdkGL_GL_APPLE_vertex_array_object _procs_GL_APPLE_vertex_array_object = {
-  (GdkGLProc_glBindVertexArrayAPPLE) -1,
-  (GdkGLProc_glDeleteVertexArraysAPPLE) -1,
-  (GdkGLProc_glGenVertexArraysAPPLE) -1,
-  (GdkGLProc_glIsVertexArrayAPPLE) -1
-};
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureEXT);
+}
 
-/* glBindVertexArrayAPPLE */
+/* glNamedFramebufferTextureLayerEXT */
 GdkGLProc
-gdk_gl_get_glBindVertexArrayAPPLE (void)
+gdk_gl_get_glNamedFramebufferTextureLayerEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE == (GdkGLProc_glBindVertexArrayAPPLE) -1)
-    _procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE =
-      (GdkGLProc_glBindVertexArrayAPPLE) gdk_gl_get_proc_address ("glBindVertexArrayAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureLayerEXT == (GdkGLProc_glNamedFramebufferTextureLayerEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedFramebufferTextureLayerEXT =
+      (GdkGLProc_glNamedFramebufferTextureLayerEXT) gdk_gl_get_proc_address ("glNamedFramebufferTextureLayerEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glBindVertexArrayAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedFramebufferTextureLayerEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureLayerEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glBindVertexArrayAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureLayerEXT);
 }
 
-/* glDeleteVertexArraysAPPLE */
+/* glNamedFramebufferTextureFaceEXT */
 GdkGLProc
-gdk_gl_get_glDeleteVertexArraysAPPLE (void)
+gdk_gl_get_glNamedFramebufferTextureFaceEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE == (GdkGLProc_glDeleteVertexArraysAPPLE) -1)
-    _procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE =
-      (GdkGLProc_glDeleteVertexArraysAPPLE) gdk_gl_get_proc_address ("glDeleteVertexArraysAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureFaceEXT == (GdkGLProc_glNamedFramebufferTextureFaceEXT) -1)
+    _procs_GL_EXT_direct_state_access.glNamedFramebufferTextureFaceEXT =
+      (GdkGLProc_glNamedFramebufferTextureFaceEXT) gdk_gl_get_proc_address ("glNamedFramebufferTextureFaceEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDeleteVertexArraysAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedFramebufferTextureFaceEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureFaceEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glDeleteVertexArraysAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glNamedFramebufferTextureFaceEXT);
 }
 
-/* glGenVertexArraysAPPLE */
+/* glTextureRenderbufferEXT */
 GdkGLProc
-gdk_gl_get_glGenVertexArraysAPPLE (void)
+gdk_gl_get_glTextureRenderbufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE == (GdkGLProc_glGenVertexArraysAPPLE) -1)
-    _procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE =
-      (GdkGLProc_glGenVertexArraysAPPLE) gdk_gl_get_proc_address ("glGenVertexArraysAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glTextureRenderbufferEXT == (GdkGLProc_glTextureRenderbufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glTextureRenderbufferEXT =
+      (GdkGLProc_glTextureRenderbufferEXT) gdk_gl_get_proc_address ("glTextureRenderbufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGenVertexArraysAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureRenderbufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glTextureRenderbufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glGenVertexArraysAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glTextureRenderbufferEXT);
 }
 
-/* glIsVertexArrayAPPLE */
+/* glMultiTexRenderbufferEXT */
 GdkGLProc
-gdk_gl_get_glIsVertexArrayAPPLE (void)
+gdk_gl_get_glMultiTexRenderbufferEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE == (GdkGLProc_glIsVertexArrayAPPLE) -1)
-    _procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE =
-      (GdkGLProc_glIsVertexArrayAPPLE) gdk_gl_get_proc_address ("glIsVertexArrayAPPLE");
+  if (_procs_GL_EXT_direct_state_access.glMultiTexRenderbufferEXT == (GdkGLProc_glMultiTexRenderbufferEXT) -1)
+    _procs_GL_EXT_direct_state_access.glMultiTexRenderbufferEXT =
+      (GdkGLProc_glMultiTexRenderbufferEXT) gdk_gl_get_proc_address ("glMultiTexRenderbufferEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsVertexArrayAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMultiTexRenderbufferEXT () - %s",
+               (_procs_GL_EXT_direct_state_access.glMultiTexRenderbufferEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_object.glIsVertexArrayAPPLE);
+  return (GdkGLProc) (_procs_GL_EXT_direct_state_access.glMultiTexRenderbufferEXT);
 }
 
-/* Get GL_APPLE_vertex_array_object functions */
-GdkGL_GL_APPLE_vertex_array_object *
-gdk_gl_get_GL_APPLE_vertex_array_object (void)
+/* Get GL_EXT_direct_state_access functions */
+GdkGL_GL_EXT_direct_state_access *
+gdk_gl_get_GL_EXT_direct_state_access (void)
 {
   static gint supported = -1;
 
@@ -20049,94 +35951,276 @@ gdk_gl_get_GL_APPLE_vertex_array_object (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_APPLE_vertex_array_object");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_direct_state_access");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glBindVertexArrayAPPLE () != NULL);
-          supported &= (gdk_gl_get_glDeleteVertexArraysAPPLE () != NULL);
-          supported &= (gdk_gl_get_glGenVertexArraysAPPLE () != NULL);
-          supported &= (gdk_gl_get_glIsVertexArrayAPPLE () != NULL);
+          supported &= (gdk_gl_get_glClientAttribDefaultEXT () != NULL);
+          supported &= (gdk_gl_get_glPushClientAttribDefaultEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixLoadfEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixLoaddEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixMultfEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixMultdEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixLoadIdentityEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixRotatefEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixRotatedEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixScalefEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixScaledEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixTranslatefEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixTranslatedEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixFrustumEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixOrthoEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixPopEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixPushEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixLoadTransposefEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixLoadTransposedEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixMultTransposefEXT () != NULL);
+          supported &= (gdk_gl_get_glMatrixMultTransposedEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureParameterfEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureParameteriEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureSubImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTextureImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTextureImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTextureSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTextureSubImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTextureImageEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTextureParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTextureParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTextureLevelParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTextureLevelParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureSubImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyTextureSubImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexParameterfEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexParameteriEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexSubImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyMultiTexImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyMultiTexImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyMultiTexSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyMultiTexSubImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexImageEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexLevelParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexLevelParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexSubImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glCopyMultiTexSubImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glBindMultiTextureEXT () != NULL);
+          supported &= (gdk_gl_get_glEnableClientStateIndexedEXT () != NULL);
+          supported &= (gdk_gl_get_glDisableClientStateIndexedEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexCoordPointerEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexEnvfEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexEnvfvEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexEnviEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexEnvivEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexGendEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexGendvEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexGenfEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexGenfvEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexGeniEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexGenivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexEnvfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexEnvivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexGendvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexGenfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexGenivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetFloatIndexedvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetDoubleIndexedvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetPointerIndexedvEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedTextureImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedTextureImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedTextureImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedTextureSubImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedTextureSubImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedTextureSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glGetCompressedTextureImageEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedMultiTexImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedMultiTexImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedMultiTexImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedMultiTexSubImage3DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedMultiTexSubImage2DEXT () != NULL);
+          supported &= (gdk_gl_get_glCompressedMultiTexSubImage1DEXT () != NULL);
+          supported &= (gdk_gl_get_glGetCompressedMultiTexImageEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramStringEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameter4dEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameter4dvEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameter4fEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameter4fvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedProgramLocalParameterdvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedProgramLocalParameterfvEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedProgramivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedProgramStringEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameters4fvEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameterI4iEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameterI4ivEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParametersI4ivEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameterI4uiEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParameterI4uivEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedProgramLocalParametersI4uivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedProgramLocalParameterIivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedProgramLocalParameterIuivEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureParameterIivEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureParameterIuivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTextureParameterIivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetTextureParameterIuivEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexParameterIivEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexParameterIuivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexParameterIivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetMultiTexParameterIuivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform1fEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform2fEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform3fEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform4fEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform1iEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform2iEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform3iEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform4iEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform1fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform2fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform3fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform4fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform1ivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform2ivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform3ivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform4ivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix2fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix3fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix4fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix2x3fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix3x2fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix2x4fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix4x2fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix3x4fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformMatrix4x3fvEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform1uiEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform2uiEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform3uiEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform4uiEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform1uivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform2uivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform3uivEXT () != NULL);
+          supported &= (gdk_gl_get_glProgramUniform4uivEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedBufferDataEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedBufferSubDataEXT () != NULL);
+          supported &= (gdk_gl_get_glMapNamedBufferEXT () != NULL);
+          supported &= (gdk_gl_get_glUnmapNamedBufferEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedBufferParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedBufferPointervEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedBufferSubDataEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureBufferEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexBufferEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedRenderbufferStorageEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedRenderbufferParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glCheckNamedFramebufferStatusEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedFramebufferTexture1DEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedFramebufferTexture2DEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedFramebufferTexture3DEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedFramebufferRenderbufferEXT () != NULL);
+          supported &= (gdk_gl_get_glGetNamedFramebufferAttachmentParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glGenerateTextureMipmapEXT () != NULL);
+          supported &= (gdk_gl_get_glGenerateMultiTexMipmapEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferDrawBufferEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferDrawBuffersEXT () != NULL);
+          supported &= (gdk_gl_get_glFramebufferReadBufferEXT () != NULL);
+          supported &= (gdk_gl_get_glGetFramebufferParameterivEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedRenderbufferStorageMultisampleEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedRenderbufferStorageMultisampleCoverageEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedFramebufferTextureEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedFramebufferTextureLayerEXT () != NULL);
+          supported &= (gdk_gl_get_glNamedFramebufferTextureFaceEXT () != NULL);
+          supported &= (gdk_gl_get_glTextureRenderbufferEXT () != NULL);
+          supported &= (gdk_gl_get_glMultiTexRenderbufferEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_APPLE_vertex_array_object () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_direct_state_access () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_APPLE_vertex_array_object;
+  return &_procs_GL_EXT_direct_state_access;
 }
 
 /*
- * GL_APPLE_vertex_array_range
+ * GL_NV_explicit_multisample
  */
 
-static GdkGL_GL_APPLE_vertex_array_range _procs_GL_APPLE_vertex_array_range = {
-  (GdkGLProc_glVertexArrayRangeAPPLE) -1,
-  (GdkGLProc_glFlushVertexArrayRangeAPPLE) -1,
-  (GdkGLProc_glVertexArrayParameteriAPPLE) -1
+static GdkGL_GL_NV_explicit_multisample _procs_GL_NV_explicit_multisample = {
+  (GdkGLProc_glGetMultisamplefvNV) -1,
+  (GdkGLProc_glSampleMaskIndexedNV) -1,
+  (GdkGLProc_glTexRenderbufferNV) -1
 };
 
-/* glVertexArrayRangeAPPLE */
+/* glGetMultisamplefvNV */
 GdkGLProc
-gdk_gl_get_glVertexArrayRangeAPPLE (void)
+gdk_gl_get_glGetMultisamplefvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE == (GdkGLProc_glVertexArrayRangeAPPLE) -1)
-    _procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE =
-      (GdkGLProc_glVertexArrayRangeAPPLE) gdk_gl_get_proc_address ("glVertexArrayRangeAPPLE");
+  if (_procs_GL_NV_explicit_multisample.glGetMultisamplefvNV == (GdkGLProc_glGetMultisamplefvNV) -1)
+    _procs_GL_NV_explicit_multisample.glGetMultisamplefvNV =
+      (GdkGLProc_glGetMultisamplefvNV) gdk_gl_get_proc_address ("glGetMultisamplefvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexArrayRangeAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetMultisamplefvNV () - %s",
+               (_procs_GL_NV_explicit_multisample.glGetMultisamplefvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_range.glVertexArrayRangeAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_explicit_multisample.glGetMultisamplefvNV);
 }
 
-/* glFlushVertexArrayRangeAPPLE */
+/* glSampleMaskIndexedNV */
 GdkGLProc
-gdk_gl_get_glFlushVertexArrayRangeAPPLE (void)
+gdk_gl_get_glSampleMaskIndexedNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE == (GdkGLProc_glFlushVertexArrayRangeAPPLE) -1)
-    _procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE =
-      (GdkGLProc_glFlushVertexArrayRangeAPPLE) gdk_gl_get_proc_address ("glFlushVertexArrayRangeAPPLE");
+  if (_procs_GL_NV_explicit_multisample.glSampleMaskIndexedNV == (GdkGLProc_glSampleMaskIndexedNV) -1)
+    _procs_GL_NV_explicit_multisample.glSampleMaskIndexedNV =
+      (GdkGLProc_glSampleMaskIndexedNV) gdk_gl_get_proc_address ("glSampleMaskIndexedNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFlushVertexArrayRangeAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSampleMaskIndexedNV () - %s",
+               (_procs_GL_NV_explicit_multisample.glSampleMaskIndexedNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_range.glFlushVertexArrayRangeAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_explicit_multisample.glSampleMaskIndexedNV);
 }
 
-/* glVertexArrayParameteriAPPLE */
+/* glTexRenderbufferNV */
 GdkGLProc
-gdk_gl_get_glVertexArrayParameteriAPPLE (void)
+gdk_gl_get_glTexRenderbufferNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE == (GdkGLProc_glVertexArrayParameteriAPPLE) -1)
-    _procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE =
-      (GdkGLProc_glVertexArrayParameteriAPPLE) gdk_gl_get_proc_address ("glVertexArrayParameteriAPPLE");
+  if (_procs_GL_NV_explicit_multisample.glTexRenderbufferNV == (GdkGLProc_glTexRenderbufferNV) -1)
+    _procs_GL_NV_explicit_multisample.glTexRenderbufferNV =
+      (GdkGLProc_glTexRenderbufferNV) gdk_gl_get_proc_address ("glTexRenderbufferNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexArrayParameteriAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTexRenderbufferNV () - %s",
+               (_procs_GL_NV_explicit_multisample.glTexRenderbufferNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_array_range.glVertexArrayParameteriAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_explicit_multisample.glTexRenderbufferNV);
 }
 
-/* Get GL_APPLE_vertex_array_range functions */
-GdkGL_GL_APPLE_vertex_array_range *
-gdk_gl_get_GL_APPLE_vertex_array_range (void)
+/* Get GL_NV_explicit_multisample functions */
+GdkGL_GL_NV_explicit_multisample *
+gdk_gl_get_GL_NV_explicit_multisample (void)
 {
   static gint supported = -1;
 
@@ -20145,205 +36229,169 @@ gdk_gl_get_GL_APPLE_vertex_array_range (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_APPLE_vertex_array_range");
+      supported = gdk_gl_query_gl_extension ("GL_NV_explicit_multisample");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glVertexArrayRangeAPPLE () != NULL);
-          supported &= (gdk_gl_get_glFlushVertexArrayRangeAPPLE () != NULL);
-          supported &= (gdk_gl_get_glVertexArrayParameteriAPPLE () != NULL);
+          supported &= (gdk_gl_get_glGetMultisamplefvNV () != NULL);
+          supported &= (gdk_gl_get_glSampleMaskIndexedNV () != NULL);
+          supported &= (gdk_gl_get_glTexRenderbufferNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_APPLE_vertex_array_range () - %s",
+    g_message (" - gdk_gl_get_GL_NV_explicit_multisample () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_APPLE_vertex_array_range;
+  return &_procs_GL_NV_explicit_multisample;
 }
 
 /*
- * GL_ATI_draw_buffers
+ * GL_NV_transform_feedback2
  */
 
-static GdkGL_GL_ATI_draw_buffers _procs_GL_ATI_draw_buffers = {
-  (GdkGLProc_glDrawBuffersATI) -1
+static GdkGL_GL_NV_transform_feedback2 _procs_GL_NV_transform_feedback2 = {
+  (GdkGLProc_glBindTransformFeedbackNV) -1,
+  (GdkGLProc_glDeleteTransformFeedbacksNV) -1,
+  (GdkGLProc_glGenTransformFeedbacksNV) -1,
+  (GdkGLProc_glIsTransformFeedbackNV) -1,
+  (GdkGLProc_glPauseTransformFeedbackNV) -1,
+  (GdkGLProc_glResumeTransformFeedbackNV) -1,
+  (GdkGLProc_glDrawTransformFeedbackNV) -1
 };
 
-/* glDrawBuffersATI */
+/* glBindTransformFeedbackNV */
 GdkGLProc
-gdk_gl_get_glDrawBuffersATI (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_ATI_draw_buffers.glDrawBuffersATI == (GdkGLProc_glDrawBuffersATI) -1)
-    _procs_GL_ATI_draw_buffers.glDrawBuffersATI =
-      (GdkGLProc_glDrawBuffersATI) gdk_gl_get_proc_address ("glDrawBuffersATI");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDrawBuffersATI () - %s",
-               (_procs_GL_ATI_draw_buffers.glDrawBuffersATI) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_ATI_draw_buffers.glDrawBuffersATI);
-}
-
-/* Get GL_ATI_draw_buffers functions */
-GdkGL_GL_ATI_draw_buffers *
-gdk_gl_get_GL_ATI_draw_buffers (void)
+gdk_gl_get_glBindTransformFeedbackNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_draw_buffers");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glDrawBuffersATI () != NULL);
-        }
-    }
+  if (_procs_GL_NV_transform_feedback2.glBindTransformFeedbackNV == (GdkGLProc_glBindTransformFeedbackNV) -1)
+    _procs_GL_NV_transform_feedback2.glBindTransformFeedbackNV =
+      (GdkGLProc_glBindTransformFeedbackNV) gdk_gl_get_proc_address ("glBindTransformFeedbackNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_draw_buffers () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
+    g_message (" - gdk_gl_get_glBindTransformFeedbackNV () - %s",
+               (_procs_GL_NV_transform_feedback2.glBindTransformFeedbackNV) ? "supported" : "not supported"));
 
-  return &_procs_GL_ATI_draw_buffers;
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback2.glBindTransformFeedbackNV);
 }
 
-/*
- * GL_NV_fragment_program
- */
-
-static GdkGL_GL_NV_fragment_program _procs_GL_NV_fragment_program = {
-  (GdkGLProc_glProgramNamedParameter4fNV) -1,
-  (GdkGLProc_glProgramNamedParameter4dNV) -1,
-  (GdkGLProc_glProgramNamedParameter4fvNV) -1,
-  (GdkGLProc_glProgramNamedParameter4dvNV) -1,
-  (GdkGLProc_glGetProgramNamedParameterfvNV) -1,
-  (GdkGLProc_glGetProgramNamedParameterdvNV) -1
-};
-
-/* glProgramNamedParameter4fNV */
+/* glDeleteTransformFeedbacksNV */
 GdkGLProc
-gdk_gl_get_glProgramNamedParameter4fNV (void)
+gdk_gl_get_glDeleteTransformFeedbacksNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4fNV == (GdkGLProc_glProgramNamedParameter4fNV) -1)
-    _procs_GL_NV_fragment_program.glProgramNamedParameter4fNV =
-      (GdkGLProc_glProgramNamedParameter4fNV) gdk_gl_get_proc_address ("glProgramNamedParameter4fNV");
+  if (_procs_GL_NV_transform_feedback2.glDeleteTransformFeedbacksNV == (GdkGLProc_glDeleteTransformFeedbacksNV) -1)
+    _procs_GL_NV_transform_feedback2.glDeleteTransformFeedbacksNV =
+      (GdkGLProc_glDeleteTransformFeedbacksNV) gdk_gl_get_proc_address ("glDeleteTransformFeedbacksNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramNamedParameter4fNV () - %s",
-               (_procs_GL_NV_fragment_program.glProgramNamedParameter4fNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeleteTransformFeedbacksNV () - %s",
+               (_procs_GL_NV_transform_feedback2.glDeleteTransformFeedbacksNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4fNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback2.glDeleteTransformFeedbacksNV);
 }
 
-/* glProgramNamedParameter4dNV */
+/* glGenTransformFeedbacksNV */
 GdkGLProc
-gdk_gl_get_glProgramNamedParameter4dNV (void)
+gdk_gl_get_glGenTransformFeedbacksNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4dNV == (GdkGLProc_glProgramNamedParameter4dNV) -1)
-    _procs_GL_NV_fragment_program.glProgramNamedParameter4dNV =
-      (GdkGLProc_glProgramNamedParameter4dNV) gdk_gl_get_proc_address ("glProgramNamedParameter4dNV");
+  if (_procs_GL_NV_transform_feedback2.glGenTransformFeedbacksNV == (GdkGLProc_glGenTransformFeedbacksNV) -1)
+    _procs_GL_NV_transform_feedback2.glGenTransformFeedbacksNV =
+      (GdkGLProc_glGenTransformFeedbacksNV) gdk_gl_get_proc_address ("glGenTransformFeedbacksNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramNamedParameter4dNV () - %s",
-               (_procs_GL_NV_fragment_program.glProgramNamedParameter4dNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenTransformFeedbacksNV () - %s",
+               (_procs_GL_NV_transform_feedback2.glGenTransformFeedbacksNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4dNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback2.glGenTransformFeedbacksNV);
 }
 
-/* glProgramNamedParameter4fvNV */
+/* glIsTransformFeedbackNV */
 GdkGLProc
-gdk_gl_get_glProgramNamedParameter4fvNV (void)
+gdk_gl_get_glIsTransformFeedbackNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV == (GdkGLProc_glProgramNamedParameter4fvNV) -1)
-    _procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV =
-      (GdkGLProc_glProgramNamedParameter4fvNV) gdk_gl_get_proc_address ("glProgramNamedParameter4fvNV");
+  if (_procs_GL_NV_transform_feedback2.glIsTransformFeedbackNV == (GdkGLProc_glIsTransformFeedbackNV) -1)
+    _procs_GL_NV_transform_feedback2.glIsTransformFeedbackNV =
+      (GdkGLProc_glIsTransformFeedbackNV) gdk_gl_get_proc_address ("glIsTransformFeedbackNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramNamedParameter4fvNV () - %s",
-               (_procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsTransformFeedbackNV () - %s",
+               (_procs_GL_NV_transform_feedback2.glIsTransformFeedbackNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4fvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback2.glIsTransformFeedbackNV);
 }
 
-/* glProgramNamedParameter4dvNV */
+/* glPauseTransformFeedbackNV */
 GdkGLProc
-gdk_gl_get_glProgramNamedParameter4dvNV (void)
+gdk_gl_get_glPauseTransformFeedbackNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV == (GdkGLProc_glProgramNamedParameter4dvNV) -1)
-    _procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV =
-      (GdkGLProc_glProgramNamedParameter4dvNV) gdk_gl_get_proc_address ("glProgramNamedParameter4dvNV");
+  if (_procs_GL_NV_transform_feedback2.glPauseTransformFeedbackNV == (GdkGLProc_glPauseTransformFeedbackNV) -1)
+    _procs_GL_NV_transform_feedback2.glPauseTransformFeedbackNV =
+      (GdkGLProc_glPauseTransformFeedbackNV) gdk_gl_get_proc_address ("glPauseTransformFeedbackNV");
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glProgramNamedParameter4dvNV () - %s",
-               (_procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV) ? "supported" : "not supported"));
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glPauseTransformFeedbackNV () - %s",
+               (_procs_GL_NV_transform_feedback2.glPauseTransformFeedbackNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fragment_program.glProgramNamedParameter4dvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback2.glPauseTransformFeedbackNV);
 }
 
-/* glGetProgramNamedParameterfvNV */
+/* glResumeTransformFeedbackNV */
 GdkGLProc
-gdk_gl_get_glGetProgramNamedParameterfvNV (void)
+gdk_gl_get_glResumeTransformFeedbackNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV == (GdkGLProc_glGetProgramNamedParameterfvNV) -1)
-    _procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV =
-      (GdkGLProc_glGetProgramNamedParameterfvNV) gdk_gl_get_proc_address ("glGetProgramNamedParameterfvNV");
+  if (_procs_GL_NV_transform_feedback2.glResumeTransformFeedbackNV == (GdkGLProc_glResumeTransformFeedbackNV) -1)
+    _procs_GL_NV_transform_feedback2.glResumeTransformFeedbackNV =
+      (GdkGLProc_glResumeTransformFeedbackNV) gdk_gl_get_proc_address ("glResumeTransformFeedbackNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramNamedParameterfvNV () - %s",
-               (_procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glResumeTransformFeedbackNV () - %s",
+               (_procs_GL_NV_transform_feedback2.glResumeTransformFeedbackNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fragment_program.glGetProgramNamedParameterfvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback2.glResumeTransformFeedbackNV);
 }
 
-/* glGetProgramNamedParameterdvNV */
+/* glDrawTransformFeedbackNV */
 GdkGLProc
-gdk_gl_get_glGetProgramNamedParameterdvNV (void)
+gdk_gl_get_glDrawTransformFeedbackNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV == (GdkGLProc_glGetProgramNamedParameterdvNV) -1)
-    _procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV =
-      (GdkGLProc_glGetProgramNamedParameterdvNV) gdk_gl_get_proc_address ("glGetProgramNamedParameterdvNV");
+  if (_procs_GL_NV_transform_feedback2.glDrawTransformFeedbackNV == (GdkGLProc_glDrawTransformFeedbackNV) -1)
+    _procs_GL_NV_transform_feedback2.glDrawTransformFeedbackNV =
+      (GdkGLProc_glDrawTransformFeedbackNV) gdk_gl_get_proc_address ("glDrawTransformFeedbackNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetProgramNamedParameterdvNV () - %s",
-               (_procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDrawTransformFeedbackNV () - %s",
+               (_procs_GL_NV_transform_feedback2.glDrawTransformFeedbackNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_fragment_program.glGetProgramNamedParameterdvNV);
+  return (GdkGLProc) (_procs_GL_NV_transform_feedback2.glDrawTransformFeedbackNV);
 }
 
-/* Get GL_NV_fragment_program functions */
-GdkGL_GL_NV_fragment_program *
-gdk_gl_get_GL_NV_fragment_program (void)
+/* Get GL_NV_transform_feedback2 functions */
+GdkGL_GL_NV_transform_feedback2 *
+gdk_gl_get_GL_NV_transform_feedback2 (void)
 {
   static gint supported = -1;
 
@@ -20352,1032 +36400,1113 @@ gdk_gl_get_GL_NV_fragment_program (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_fragment_program");
+      supported = gdk_gl_query_gl_extension ("GL_NV_transform_feedback2");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glProgramNamedParameter4fNV () != NULL);
-          supported &= (gdk_gl_get_glProgramNamedParameter4dNV () != NULL);
-          supported &= (gdk_gl_get_glProgramNamedParameter4fvNV () != NULL);
-          supported &= (gdk_gl_get_glProgramNamedParameter4dvNV () != NULL);
-          supported &= (gdk_gl_get_glGetProgramNamedParameterfvNV () != NULL);
-          supported &= (gdk_gl_get_glGetProgramNamedParameterdvNV () != NULL);
+          supported &= (gdk_gl_get_glBindTransformFeedbackNV () != NULL);
+          supported &= (gdk_gl_get_glDeleteTransformFeedbacksNV () != NULL);
+          supported &= (gdk_gl_get_glGenTransformFeedbacksNV () != NULL);
+          supported &= (gdk_gl_get_glIsTransformFeedbackNV () != NULL);
+          supported &= (gdk_gl_get_glPauseTransformFeedbackNV () != NULL);
+          supported &= (gdk_gl_get_glResumeTransformFeedbackNV () != NULL);
+          supported &= (gdk_gl_get_glDrawTransformFeedbackNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_fragment_program () - %s",
+    g_message (" - gdk_gl_get_GL_NV_transform_feedback2 () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_fragment_program;
+  return &_procs_GL_NV_transform_feedback2;
 }
 
 /*
- * GL_NV_half_float
+ * GL_AMD_performance_monitor
  */
 
-static GdkGL_GL_NV_half_float _procs_GL_NV_half_float = {
-  (GdkGLProc_glVertex2hNV) -1,
-  (GdkGLProc_glVertex2hvNV) -1,
-  (GdkGLProc_glVertex3hNV) -1,
-  (GdkGLProc_glVertex3hvNV) -1,
-  (GdkGLProc_glVertex4hNV) -1,
-  (GdkGLProc_glVertex4hvNV) -1,
-  (GdkGLProc_glNormal3hNV) -1,
-  (GdkGLProc_glNormal3hvNV) -1,
-  (GdkGLProc_glColor3hNV) -1,
-  (GdkGLProc_glColor3hvNV) -1,
-  (GdkGLProc_glColor4hNV) -1,
-  (GdkGLProc_glColor4hvNV) -1,
-  (GdkGLProc_glTexCoord1hNV) -1,
-  (GdkGLProc_glTexCoord1hvNV) -1,
-  (GdkGLProc_glTexCoord2hNV) -1,
-  (GdkGLProc_glTexCoord2hvNV) -1,
-  (GdkGLProc_glTexCoord3hNV) -1,
-  (GdkGLProc_glTexCoord3hvNV) -1,
-  (GdkGLProc_glTexCoord4hNV) -1,
-  (GdkGLProc_glTexCoord4hvNV) -1,
-  (GdkGLProc_glMultiTexCoord1hNV) -1,
-  (GdkGLProc_glMultiTexCoord1hvNV) -1,
-  (GdkGLProc_glMultiTexCoord2hNV) -1,
-  (GdkGLProc_glMultiTexCoord2hvNV) -1,
-  (GdkGLProc_glMultiTexCoord3hNV) -1,
-  (GdkGLProc_glMultiTexCoord3hvNV) -1,
-  (GdkGLProc_glMultiTexCoord4hNV) -1,
-  (GdkGLProc_glMultiTexCoord4hvNV) -1,
-  (GdkGLProc_glFogCoordhNV) -1,
-  (GdkGLProc_glFogCoordhvNV) -1,
-  (GdkGLProc_glSecondaryColor3hNV) -1,
-  (GdkGLProc_glSecondaryColor3hvNV) -1,
-  (GdkGLProc_glVertexWeighthNV) -1,
-  (GdkGLProc_glVertexWeighthvNV) -1,
-  (GdkGLProc_glVertexAttrib1hNV) -1,
-  (GdkGLProc_glVertexAttrib1hvNV) -1,
-  (GdkGLProc_glVertexAttrib2hNV) -1,
-  (GdkGLProc_glVertexAttrib2hvNV) -1,
-  (GdkGLProc_glVertexAttrib3hNV) -1,
-  (GdkGLProc_glVertexAttrib3hvNV) -1,
-  (GdkGLProc_glVertexAttrib4hNV) -1,
-  (GdkGLProc_glVertexAttrib4hvNV) -1,
-  (GdkGLProc_glVertexAttribs1hvNV) -1,
-  (GdkGLProc_glVertexAttribs2hvNV) -1,
-  (GdkGLProc_glVertexAttribs3hvNV) -1,
-  (GdkGLProc_glVertexAttribs4hvNV) -1
+static GdkGL_GL_AMD_performance_monitor _procs_GL_AMD_performance_monitor = {
+  (GdkGLProc_glGetPerfMonitorGroupsAMD) -1,
+  (GdkGLProc_glGetPerfMonitorCountersAMD) -1,
+  (GdkGLProc_glGetPerfMonitorGroupStringAMD) -1,
+  (GdkGLProc_glGetPerfMonitorCounterStringAMD) -1,
+  (GdkGLProc_glGetPerfMonitorCounterInfoAMD) -1,
+  (GdkGLProc_glGenPerfMonitorsAMD) -1,
+  (GdkGLProc_glDeletePerfMonitorsAMD) -1,
+  (GdkGLProc_glSelectPerfMonitorCountersAMD) -1,
+  (GdkGLProc_glBeginPerfMonitorAMD) -1,
+  (GdkGLProc_glEndPerfMonitorAMD) -1,
+  (GdkGLProc_glGetPerfMonitorCounterDataAMD) -1
 };
 
-/* glVertex2hNV */
+/* glGetPerfMonitorGroupsAMD */
 GdkGLProc
-gdk_gl_get_glVertex2hNV (void)
+gdk_gl_get_glGetPerfMonitorGroupsAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertex2hNV == (GdkGLProc_glVertex2hNV) -1)
-    _procs_GL_NV_half_float.glVertex2hNV =
-      (GdkGLProc_glVertex2hNV) gdk_gl_get_proc_address ("glVertex2hNV");
+  if (_procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupsAMD == (GdkGLProc_glGetPerfMonitorGroupsAMD) -1)
+    _procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupsAMD =
+      (GdkGLProc_glGetPerfMonitorGroupsAMD) gdk_gl_get_proc_address ("glGetPerfMonitorGroupsAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertex2hNV () - %s",
-               (_procs_GL_NV_half_float.glVertex2hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetPerfMonitorGroupsAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupsAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex2hNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupsAMD);
 }
 
-/* glVertex2hvNV */
+/* glGetPerfMonitorCountersAMD */
 GdkGLProc
-gdk_gl_get_glVertex2hvNV (void)
+gdk_gl_get_glGetPerfMonitorCountersAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertex2hvNV == (GdkGLProc_glVertex2hvNV) -1)
-    _procs_GL_NV_half_float.glVertex2hvNV =
-      (GdkGLProc_glVertex2hvNV) gdk_gl_get_proc_address ("glVertex2hvNV");
+  if (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCountersAMD == (GdkGLProc_glGetPerfMonitorCountersAMD) -1)
+    _procs_GL_AMD_performance_monitor.glGetPerfMonitorCountersAMD =
+      (GdkGLProc_glGetPerfMonitorCountersAMD) gdk_gl_get_proc_address ("glGetPerfMonitorCountersAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertex2hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertex2hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetPerfMonitorCountersAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCountersAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex2hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCountersAMD);
 }
 
-/* glVertex3hNV */
+/* glGetPerfMonitorGroupStringAMD */
 GdkGLProc
-gdk_gl_get_glVertex3hNV (void)
+gdk_gl_get_glGetPerfMonitorGroupStringAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertex3hNV == (GdkGLProc_glVertex3hNV) -1)
-    _procs_GL_NV_half_float.glVertex3hNV =
-      (GdkGLProc_glVertex3hNV) gdk_gl_get_proc_address ("glVertex3hNV");
+  if (_procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupStringAMD == (GdkGLProc_glGetPerfMonitorGroupStringAMD) -1)
+    _procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupStringAMD =
+      (GdkGLProc_glGetPerfMonitorGroupStringAMD) gdk_gl_get_proc_address ("glGetPerfMonitorGroupStringAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertex3hNV () - %s",
-               (_procs_GL_NV_half_float.glVertex3hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetPerfMonitorGroupStringAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupStringAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex3hNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glGetPerfMonitorGroupStringAMD);
 }
 
-/* glVertex3hvNV */
+/* glGetPerfMonitorCounterStringAMD */
 GdkGLProc
-gdk_gl_get_glVertex3hvNV (void)
+gdk_gl_get_glGetPerfMonitorCounterStringAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertex3hvNV == (GdkGLProc_glVertex3hvNV) -1)
-    _procs_GL_NV_half_float.glVertex3hvNV =
-      (GdkGLProc_glVertex3hvNV) gdk_gl_get_proc_address ("glVertex3hvNV");
+  if (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterStringAMD == (GdkGLProc_glGetPerfMonitorCounterStringAMD) -1)
+    _procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterStringAMD =
+      (GdkGLProc_glGetPerfMonitorCounterStringAMD) gdk_gl_get_proc_address ("glGetPerfMonitorCounterStringAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertex3hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertex3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetPerfMonitorCounterStringAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterStringAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex3hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterStringAMD);
 }
 
-/* glVertex4hNV */
+/* glGetPerfMonitorCounterInfoAMD */
 GdkGLProc
-gdk_gl_get_glVertex4hNV (void)
+gdk_gl_get_glGetPerfMonitorCounterInfoAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertex4hNV == (GdkGLProc_glVertex4hNV) -1)
-    _procs_GL_NV_half_float.glVertex4hNV =
-      (GdkGLProc_glVertex4hNV) gdk_gl_get_proc_address ("glVertex4hNV");
+  if (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterInfoAMD == (GdkGLProc_glGetPerfMonitorCounterInfoAMD) -1)
+    _procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterInfoAMD =
+      (GdkGLProc_glGetPerfMonitorCounterInfoAMD) gdk_gl_get_proc_address ("glGetPerfMonitorCounterInfoAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertex4hNV () - %s",
-               (_procs_GL_NV_half_float.glVertex4hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetPerfMonitorCounterInfoAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterInfoAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex4hNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterInfoAMD);
 }
 
-/* glVertex4hvNV */
+/* glGenPerfMonitorsAMD */
 GdkGLProc
-gdk_gl_get_glVertex4hvNV (void)
+gdk_gl_get_glGenPerfMonitorsAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertex4hvNV == (GdkGLProc_glVertex4hvNV) -1)
-    _procs_GL_NV_half_float.glVertex4hvNV =
-      (GdkGLProc_glVertex4hvNV) gdk_gl_get_proc_address ("glVertex4hvNV");
+  if (_procs_GL_AMD_performance_monitor.glGenPerfMonitorsAMD == (GdkGLProc_glGenPerfMonitorsAMD) -1)
+    _procs_GL_AMD_performance_monitor.glGenPerfMonitorsAMD =
+      (GdkGLProc_glGenPerfMonitorsAMD) gdk_gl_get_proc_address ("glGenPerfMonitorsAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertex4hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertex4hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGenPerfMonitorsAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glGenPerfMonitorsAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertex4hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glGenPerfMonitorsAMD);
 }
 
-/* glNormal3hNV */
+/* glDeletePerfMonitorsAMD */
 GdkGLProc
-gdk_gl_get_glNormal3hNV (void)
+gdk_gl_get_glDeletePerfMonitorsAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glNormal3hNV == (GdkGLProc_glNormal3hNV) -1)
-    _procs_GL_NV_half_float.glNormal3hNV =
-      (GdkGLProc_glNormal3hNV) gdk_gl_get_proc_address ("glNormal3hNV");
+  if (_procs_GL_AMD_performance_monitor.glDeletePerfMonitorsAMD == (GdkGLProc_glDeletePerfMonitorsAMD) -1)
+    _procs_GL_AMD_performance_monitor.glDeletePerfMonitorsAMD =
+      (GdkGLProc_glDeletePerfMonitorsAMD) gdk_gl_get_proc_address ("glDeletePerfMonitorsAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormal3hNV () - %s",
-               (_procs_GL_NV_half_float.glNormal3hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDeletePerfMonitorsAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glDeletePerfMonitorsAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glNormal3hNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glDeletePerfMonitorsAMD);
 }
 
-/* glNormal3hvNV */
+/* glSelectPerfMonitorCountersAMD */
 GdkGLProc
-gdk_gl_get_glNormal3hvNV (void)
+gdk_gl_get_glSelectPerfMonitorCountersAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glNormal3hvNV == (GdkGLProc_glNormal3hvNV) -1)
-    _procs_GL_NV_half_float.glNormal3hvNV =
-      (GdkGLProc_glNormal3hvNV) gdk_gl_get_proc_address ("glNormal3hvNV");
+  if (_procs_GL_AMD_performance_monitor.glSelectPerfMonitorCountersAMD == (GdkGLProc_glSelectPerfMonitorCountersAMD) -1)
+    _procs_GL_AMD_performance_monitor.glSelectPerfMonitorCountersAMD =
+      (GdkGLProc_glSelectPerfMonitorCountersAMD) gdk_gl_get_proc_address ("glSelectPerfMonitorCountersAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glNormal3hvNV () - %s",
-               (_procs_GL_NV_half_float.glNormal3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSelectPerfMonitorCountersAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glSelectPerfMonitorCountersAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glNormal3hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glSelectPerfMonitorCountersAMD);
 }
 
-/* glColor3hNV */
+/* glBeginPerfMonitorAMD */
 GdkGLProc
-gdk_gl_get_glColor3hNV (void)
+gdk_gl_get_glBeginPerfMonitorAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glColor3hNV == (GdkGLProc_glColor3hNV) -1)
-    _procs_GL_NV_half_float.glColor3hNV =
-      (GdkGLProc_glColor3hNV) gdk_gl_get_proc_address ("glColor3hNV");
+  if (_procs_GL_AMD_performance_monitor.glBeginPerfMonitorAMD == (GdkGLProc_glBeginPerfMonitorAMD) -1)
+    _procs_GL_AMD_performance_monitor.glBeginPerfMonitorAMD =
+      (GdkGLProc_glBeginPerfMonitorAMD) gdk_gl_get_proc_address ("glBeginPerfMonitorAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor3hNV () - %s",
-               (_procs_GL_NV_half_float.glColor3hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginPerfMonitorAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glBeginPerfMonitorAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glColor3hNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glBeginPerfMonitorAMD);
 }
 
-/* glColor3hvNV */
+/* glEndPerfMonitorAMD */
 GdkGLProc
-gdk_gl_get_glColor3hvNV (void)
+gdk_gl_get_glEndPerfMonitorAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glColor3hvNV == (GdkGLProc_glColor3hvNV) -1)
-    _procs_GL_NV_half_float.glColor3hvNV =
-      (GdkGLProc_glColor3hvNV) gdk_gl_get_proc_address ("glColor3hvNV");
+  if (_procs_GL_AMD_performance_monitor.glEndPerfMonitorAMD == (GdkGLProc_glEndPerfMonitorAMD) -1)
+    _procs_GL_AMD_performance_monitor.glEndPerfMonitorAMD =
+      (GdkGLProc_glEndPerfMonitorAMD) gdk_gl_get_proc_address ("glEndPerfMonitorAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor3hvNV () - %s",
-               (_procs_GL_NV_half_float.glColor3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndPerfMonitorAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glEndPerfMonitorAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glColor3hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glEndPerfMonitorAMD);
 }
 
-/* glColor4hNV */
+/* glGetPerfMonitorCounterDataAMD */
 GdkGLProc
-gdk_gl_get_glColor4hNV (void)
+gdk_gl_get_glGetPerfMonitorCounterDataAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glColor4hNV == (GdkGLProc_glColor4hNV) -1)
-    _procs_GL_NV_half_float.glColor4hNV =
-      (GdkGLProc_glColor4hNV) gdk_gl_get_proc_address ("glColor4hNV");
+  if (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterDataAMD == (GdkGLProc_glGetPerfMonitorCounterDataAMD) -1)
+    _procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterDataAMD =
+      (GdkGLProc_glGetPerfMonitorCounterDataAMD) gdk_gl_get_proc_address ("glGetPerfMonitorCounterDataAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4hNV () - %s",
-               (_procs_GL_NV_half_float.glColor4hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetPerfMonitorCounterDataAMD () - %s",
+               (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterDataAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glColor4hNV);
+  return (GdkGLProc) (_procs_GL_AMD_performance_monitor.glGetPerfMonitorCounterDataAMD);
 }
 
-/* glColor4hvNV */
-GdkGLProc
-gdk_gl_get_glColor4hvNV (void)
+/* Get GL_AMD_performance_monitor functions */
+GdkGL_GL_AMD_performance_monitor *
+gdk_gl_get_GL_AMD_performance_monitor (void)
 {
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_NV_half_float.glColor4hvNV == (GdkGLProc_glColor4hvNV) -1)
-    _procs_GL_NV_half_float.glColor4hvNV =
-      (GdkGLProc_glColor4hvNV) gdk_gl_get_proc_address ("glColor4hvNV");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glColor4hvNV () - %s",
-               (_procs_GL_NV_half_float.glColor4hvNV) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_NV_half_float.glColor4hvNV);
-}
+  static gint supported = -1;
 
-/* glTexCoord1hNV */
-GdkGLProc
-gdk_gl_get_glTexCoord1hNV (void)
-{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glTexCoord1hNV == (GdkGLProc_glTexCoord1hNV) -1)
-    _procs_GL_NV_half_float.glTexCoord1hNV =
-      (GdkGLProc_glTexCoord1hNV) gdk_gl_get_proc_address ("glTexCoord1hNV");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord1hNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord1hNV) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord1hNV);
-}
-
-/* glTexCoord1hvNV */
-GdkGLProc
-gdk_gl_get_glTexCoord1hvNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_AMD_performance_monitor");
 
-  if (_procs_GL_NV_half_float.glTexCoord1hvNV == (GdkGLProc_glTexCoord1hvNV) -1)
-    _procs_GL_NV_half_float.glTexCoord1hvNV =
-      (GdkGLProc_glTexCoord1hvNV) gdk_gl_get_proc_address ("glTexCoord1hvNV");
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glGetPerfMonitorGroupsAMD () != NULL);
+          supported &= (gdk_gl_get_glGetPerfMonitorCountersAMD () != NULL);
+          supported &= (gdk_gl_get_glGetPerfMonitorGroupStringAMD () != NULL);
+          supported &= (gdk_gl_get_glGetPerfMonitorCounterStringAMD () != NULL);
+          supported &= (gdk_gl_get_glGetPerfMonitorCounterInfoAMD () != NULL);
+          supported &= (gdk_gl_get_glGenPerfMonitorsAMD () != NULL);
+          supported &= (gdk_gl_get_glDeletePerfMonitorsAMD () != NULL);
+          supported &= (gdk_gl_get_glSelectPerfMonitorCountersAMD () != NULL);
+          supported &= (gdk_gl_get_glBeginPerfMonitorAMD () != NULL);
+          supported &= (gdk_gl_get_glEndPerfMonitorAMD () != NULL);
+          supported &= (gdk_gl_get_glGetPerfMonitorCounterDataAMD () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord1hvNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord1hvNV) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord1hvNV);
-}
+    g_message (" - gdk_gl_get_GL_AMD_performance_monitor () - %s",
+               (supported) ? "supported" : "not supported"));
 
-/* glTexCoord2hNV */
-GdkGLProc
-gdk_gl_get_glTexCoord2hNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
+  if (!supported)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glTexCoord2hNV == (GdkGLProc_glTexCoord2hNV) -1)
-    _procs_GL_NV_half_float.glTexCoord2hNV =
-      (GdkGLProc_glTexCoord2hNV) gdk_gl_get_proc_address ("glTexCoord2hNV");
+  return &_procs_GL_AMD_performance_monitor;
+}
 
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2hNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord2hNV) ? "supported" : "not supported"));
+/*
+ * GL_AMD_vertex_shader_tesselator
+ */
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord2hNV);
-}
+static GdkGL_GL_AMD_vertex_shader_tesselator _procs_GL_AMD_vertex_shader_tesselator = {
+  (GdkGLProc_glTessellationFactorAMD) -1,
+  (GdkGLProc_glTessellationModeAMD) -1
+};
 
-/* glTexCoord2hvNV */
+/* glTessellationFactorAMD */
 GdkGLProc
-gdk_gl_get_glTexCoord2hvNV (void)
+gdk_gl_get_glTessellationFactorAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glTexCoord2hvNV == (GdkGLProc_glTexCoord2hvNV) -1)
-    _procs_GL_NV_half_float.glTexCoord2hvNV =
-      (GdkGLProc_glTexCoord2hvNV) gdk_gl_get_proc_address ("glTexCoord2hvNV");
+  if (_procs_GL_AMD_vertex_shader_tesselator.glTessellationFactorAMD == (GdkGLProc_glTessellationFactorAMD) -1)
+    _procs_GL_AMD_vertex_shader_tesselator.glTessellationFactorAMD =
+      (GdkGLProc_glTessellationFactorAMD) gdk_gl_get_proc_address ("glTessellationFactorAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord2hvNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord2hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTessellationFactorAMD () - %s",
+               (_procs_GL_AMD_vertex_shader_tesselator.glTessellationFactorAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord2hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_vertex_shader_tesselator.glTessellationFactorAMD);
 }
 
-/* glTexCoord3hNV */
+/* glTessellationModeAMD */
 GdkGLProc
-gdk_gl_get_glTexCoord3hNV (void)
+gdk_gl_get_glTessellationModeAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glTexCoord3hNV == (GdkGLProc_glTexCoord3hNV) -1)
-    _procs_GL_NV_half_float.glTexCoord3hNV =
-      (GdkGLProc_glTexCoord3hNV) gdk_gl_get_proc_address ("glTexCoord3hNV");
+  if (_procs_GL_AMD_vertex_shader_tesselator.glTessellationModeAMD == (GdkGLProc_glTessellationModeAMD) -1)
+    _procs_GL_AMD_vertex_shader_tesselator.glTessellationModeAMD =
+      (GdkGLProc_glTessellationModeAMD) gdk_gl_get_proc_address ("glTessellationModeAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord3hNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord3hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTessellationModeAMD () - %s",
+               (_procs_GL_AMD_vertex_shader_tesselator.glTessellationModeAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord3hNV);
+  return (GdkGLProc) (_procs_GL_AMD_vertex_shader_tesselator.glTessellationModeAMD);
 }
 
-/* glTexCoord3hvNV */
-GdkGLProc
-gdk_gl_get_glTexCoord3hvNV (void)
+/* Get GL_AMD_vertex_shader_tesselator functions */
+GdkGL_GL_AMD_vertex_shader_tesselator *
+gdk_gl_get_GL_AMD_vertex_shader_tesselator (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glTexCoord3hvNV == (GdkGLProc_glTexCoord3hvNV) -1)
-    _procs_GL_NV_half_float.glTexCoord3hvNV =
-      (GdkGLProc_glTexCoord3hvNV) gdk_gl_get_proc_address ("glTexCoord3hvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_AMD_vertex_shader_tesselator");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTessellationFactorAMD () != NULL);
+          supported &= (gdk_gl_get_glTessellationModeAMD () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord3hvNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_AMD_vertex_shader_tesselator () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord3hvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_AMD_vertex_shader_tesselator;
 }
 
-/* glTexCoord4hNV */
+/*
+ * GL_EXT_provoking_vertex
+ */
+
+static GdkGL_GL_EXT_provoking_vertex _procs_GL_EXT_provoking_vertex = {
+  (GdkGLProc_glProvokingVertexEXT) -1
+};
+
+/* glProvokingVertexEXT */
 GdkGLProc
-gdk_gl_get_glTexCoord4hNV (void)
+gdk_gl_get_glProvokingVertexEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glTexCoord4hNV == (GdkGLProc_glTexCoord4hNV) -1)
-    _procs_GL_NV_half_float.glTexCoord4hNV =
-      (GdkGLProc_glTexCoord4hNV) gdk_gl_get_proc_address ("glTexCoord4hNV");
+  if (_procs_GL_EXT_provoking_vertex.glProvokingVertexEXT == (GdkGLProc_glProvokingVertexEXT) -1)
+    _procs_GL_EXT_provoking_vertex.glProvokingVertexEXT =
+      (GdkGLProc_glProvokingVertexEXT) gdk_gl_get_proc_address ("glProvokingVertexEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord4hNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord4hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProvokingVertexEXT () - %s",
+               (_procs_GL_EXT_provoking_vertex.glProvokingVertexEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord4hNV);
+  return (GdkGLProc) (_procs_GL_EXT_provoking_vertex.glProvokingVertexEXT);
 }
 
-/* glTexCoord4hvNV */
-GdkGLProc
-gdk_gl_get_glTexCoord4hvNV (void)
+/* Get GL_EXT_provoking_vertex functions */
+GdkGL_GL_EXT_provoking_vertex *
+gdk_gl_get_GL_EXT_provoking_vertex (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glTexCoord4hvNV == (GdkGLProc_glTexCoord4hvNV) -1)
-    _procs_GL_NV_half_float.glTexCoord4hvNV =
-      (GdkGLProc_glTexCoord4hvNV) gdk_gl_get_proc_address ("glTexCoord4hvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_EXT_provoking_vertex");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glProvokingVertexEXT () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTexCoord4hvNV () - %s",
-               (_procs_GL_NV_half_float.glTexCoord4hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_EXT_provoking_vertex () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glTexCoord4hvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_EXT_provoking_vertex;
 }
 
-/* glMultiTexCoord1hNV */
+/*
+ * GL_AMD_draw_buffers_blend
+ */
+
+static GdkGL_GL_AMD_draw_buffers_blend _procs_GL_AMD_draw_buffers_blend = {
+  (GdkGLProc_glBlendFuncIndexedAMD) -1,
+  (GdkGLProc_glBlendFuncSeparateIndexedAMD) -1,
+  (GdkGLProc_glBlendEquationIndexedAMD) -1,
+  (GdkGLProc_glBlendEquationSeparateIndexedAMD) -1
+};
+
+/* glBlendFuncIndexedAMD */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1hNV (void)
+gdk_gl_get_glBlendFuncIndexedAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord1hNV == (GdkGLProc_glMultiTexCoord1hNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord1hNV =
-      (GdkGLProc_glMultiTexCoord1hNV) gdk_gl_get_proc_address ("glMultiTexCoord1hNV");
+  if (_procs_GL_AMD_draw_buffers_blend.glBlendFuncIndexedAMD == (GdkGLProc_glBlendFuncIndexedAMD) -1)
+    _procs_GL_AMD_draw_buffers_blend.glBlendFuncIndexedAMD =
+      (GdkGLProc_glBlendFuncIndexedAMD) gdk_gl_get_proc_address ("glBlendFuncIndexedAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1hNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord1hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBlendFuncIndexedAMD () - %s",
+               (_procs_GL_AMD_draw_buffers_blend.glBlendFuncIndexedAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord1hNV);
+  return (GdkGLProc) (_procs_GL_AMD_draw_buffers_blend.glBlendFuncIndexedAMD);
 }
 
-/* glMultiTexCoord1hvNV */
+/* glBlendFuncSeparateIndexedAMD */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord1hvNV (void)
+gdk_gl_get_glBlendFuncSeparateIndexedAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord1hvNV == (GdkGLProc_glMultiTexCoord1hvNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord1hvNV =
-      (GdkGLProc_glMultiTexCoord1hvNV) gdk_gl_get_proc_address ("glMultiTexCoord1hvNV");
+  if (_procs_GL_AMD_draw_buffers_blend.glBlendFuncSeparateIndexedAMD == (GdkGLProc_glBlendFuncSeparateIndexedAMD) -1)
+    _procs_GL_AMD_draw_buffers_blend.glBlendFuncSeparateIndexedAMD =
+      (GdkGLProc_glBlendFuncSeparateIndexedAMD) gdk_gl_get_proc_address ("glBlendFuncSeparateIndexedAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord1hvNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord1hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBlendFuncSeparateIndexedAMD () - %s",
+               (_procs_GL_AMD_draw_buffers_blend.glBlendFuncSeparateIndexedAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord1hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_draw_buffers_blend.glBlendFuncSeparateIndexedAMD);
 }
 
-/* glMultiTexCoord2hNV */
+/* glBlendEquationIndexedAMD */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2hNV (void)
+gdk_gl_get_glBlendEquationIndexedAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord2hNV == (GdkGLProc_glMultiTexCoord2hNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord2hNV =
-      (GdkGLProc_glMultiTexCoord2hNV) gdk_gl_get_proc_address ("glMultiTexCoord2hNV");
+  if (_procs_GL_AMD_draw_buffers_blend.glBlendEquationIndexedAMD == (GdkGLProc_glBlendEquationIndexedAMD) -1)
+    _procs_GL_AMD_draw_buffers_blend.glBlendEquationIndexedAMD =
+      (GdkGLProc_glBlendEquationIndexedAMD) gdk_gl_get_proc_address ("glBlendEquationIndexedAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2hNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord2hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBlendEquationIndexedAMD () - %s",
+               (_procs_GL_AMD_draw_buffers_blend.glBlendEquationIndexedAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord2hNV);
+  return (GdkGLProc) (_procs_GL_AMD_draw_buffers_blend.glBlendEquationIndexedAMD);
 }
 
-/* glMultiTexCoord2hvNV */
+/* glBlendEquationSeparateIndexedAMD */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord2hvNV (void)
+gdk_gl_get_glBlendEquationSeparateIndexedAMD (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord2hvNV == (GdkGLProc_glMultiTexCoord2hvNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord2hvNV =
-      (GdkGLProc_glMultiTexCoord2hvNV) gdk_gl_get_proc_address ("glMultiTexCoord2hvNV");
+  if (_procs_GL_AMD_draw_buffers_blend.glBlendEquationSeparateIndexedAMD == (GdkGLProc_glBlendEquationSeparateIndexedAMD) -1)
+    _procs_GL_AMD_draw_buffers_blend.glBlendEquationSeparateIndexedAMD =
+      (GdkGLProc_glBlendEquationSeparateIndexedAMD) gdk_gl_get_proc_address ("glBlendEquationSeparateIndexedAMD");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord2hvNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord2hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBlendEquationSeparateIndexedAMD () - %s",
+               (_procs_GL_AMD_draw_buffers_blend.glBlendEquationSeparateIndexedAMD) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord2hvNV);
+  return (GdkGLProc) (_procs_GL_AMD_draw_buffers_blend.glBlendEquationSeparateIndexedAMD);
 }
 
-/* glMultiTexCoord3hNV */
-GdkGLProc
-gdk_gl_get_glMultiTexCoord3hNV (void)
+/* Get GL_AMD_draw_buffers_blend functions */
+GdkGL_GL_AMD_draw_buffers_blend *
+gdk_gl_get_GL_AMD_draw_buffers_blend (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord3hNV == (GdkGLProc_glMultiTexCoord3hNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord3hNV =
-      (GdkGLProc_glMultiTexCoord3hNV) gdk_gl_get_proc_address ("glMultiTexCoord3hNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_AMD_draw_buffers_blend");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBlendFuncIndexedAMD () != NULL);
+          supported &= (gdk_gl_get_glBlendFuncSeparateIndexedAMD () != NULL);
+          supported &= (gdk_gl_get_glBlendEquationIndexedAMD () != NULL);
+          supported &= (gdk_gl_get_glBlendEquationSeparateIndexedAMD () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3hNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord3hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_AMD_draw_buffers_blend () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord3hNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_AMD_draw_buffers_blend;
 }
 
-/* glMultiTexCoord3hvNV */
+/*
+ * GL_APPLE_texture_range
+ */
+
+static GdkGL_GL_APPLE_texture_range _procs_GL_APPLE_texture_range = {
+  (GdkGLProc_glTextureRangeAPPLE) -1,
+  (GdkGLProc_glGetTexParameterPointervAPPLE) -1
+};
+
+/* glTextureRangeAPPLE */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord3hvNV (void)
+gdk_gl_get_glTextureRangeAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord3hvNV == (GdkGLProc_glMultiTexCoord3hvNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord3hvNV =
-      (GdkGLProc_glMultiTexCoord3hvNV) gdk_gl_get_proc_address ("glMultiTexCoord3hvNV");
+  if (_procs_GL_APPLE_texture_range.glTextureRangeAPPLE == (GdkGLProc_glTextureRangeAPPLE) -1)
+    _procs_GL_APPLE_texture_range.glTextureRangeAPPLE =
+      (GdkGLProc_glTextureRangeAPPLE) gdk_gl_get_proc_address ("glTextureRangeAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord3hvNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureRangeAPPLE () - %s",
+               (_procs_GL_APPLE_texture_range.glTextureRangeAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord3hvNV);
+  return (GdkGLProc) (_procs_GL_APPLE_texture_range.glTextureRangeAPPLE);
 }
 
-/* glMultiTexCoord4hNV */
+/* glGetTexParameterPointervAPPLE */
 GdkGLProc
-gdk_gl_get_glMultiTexCoord4hNV (void)
+gdk_gl_get_glGetTexParameterPointervAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord4hNV == (GdkGLProc_glMultiTexCoord4hNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord4hNV =
-      (GdkGLProc_glMultiTexCoord4hNV) gdk_gl_get_proc_address ("glMultiTexCoord4hNV");
+  if (_procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE == (GdkGLProc_glGetTexParameterPointervAPPLE) -1)
+    _procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE =
+      (GdkGLProc_glGetTexParameterPointervAPPLE) gdk_gl_get_proc_address ("glGetTexParameterPointervAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4hNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord4hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetTexParameterPointervAPPLE () - %s",
+               (_procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord4hNV);
+  return (GdkGLProc) (_procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE);
 }
 
-/* glMultiTexCoord4hvNV */
-GdkGLProc
-gdk_gl_get_glMultiTexCoord4hvNV (void)
+/* Get GL_APPLE_texture_range functions */
+GdkGL_GL_APPLE_texture_range *
+gdk_gl_get_GL_APPLE_texture_range (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glMultiTexCoord4hvNV == (GdkGLProc_glMultiTexCoord4hvNV) -1)
-    _procs_GL_NV_half_float.glMultiTexCoord4hvNV =
-      (GdkGLProc_glMultiTexCoord4hvNV) gdk_gl_get_proc_address ("glMultiTexCoord4hvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_texture_range");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glTextureRangeAPPLE () != NULL);
+          supported &= (gdk_gl_get_glGetTexParameterPointervAPPLE () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMultiTexCoord4hvNV () - %s",
-               (_procs_GL_NV_half_float.glMultiTexCoord4hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_APPLE_texture_range () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glMultiTexCoord4hvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_APPLE_texture_range;
 }
 
-/* glFogCoordhNV */
+/*
+ * GL_APPLE_vertex_program_evaluators
+ */
+
+static GdkGL_GL_APPLE_vertex_program_evaluators _procs_GL_APPLE_vertex_program_evaluators = {
+  (GdkGLProc_glEnableVertexAttribAPPLE) -1,
+  (GdkGLProc_glDisableVertexAttribAPPLE) -1,
+  (GdkGLProc_glIsVertexAttribEnabledAPPLE) -1,
+  (GdkGLProc_glMapVertexAttrib1dAPPLE) -1,
+  (GdkGLProc_glMapVertexAttrib1fAPPLE) -1,
+  (GdkGLProc_glMapVertexAttrib2dAPPLE) -1,
+  (GdkGLProc_glMapVertexAttrib2fAPPLE) -1
+};
+
+/* glEnableVertexAttribAPPLE */
 GdkGLProc
-gdk_gl_get_glFogCoordhNV (void)
+gdk_gl_get_glEnableVertexAttribAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glFogCoordhNV == (GdkGLProc_glFogCoordhNV) -1)
-    _procs_GL_NV_half_float.glFogCoordhNV =
-      (GdkGLProc_glFogCoordhNV) gdk_gl_get_proc_address ("glFogCoordhNV");
+  if (_procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE == (GdkGLProc_glEnableVertexAttribAPPLE) -1)
+    _procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE =
+      (GdkGLProc_glEnableVertexAttribAPPLE) gdk_gl_get_proc_address ("glEnableVertexAttribAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordhNV () - %s",
-               (_procs_GL_NV_half_float.glFogCoordhNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEnableVertexAttribAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glFogCoordhNV);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE);
 }
 
-/* glFogCoordhvNV */
+/* glDisableVertexAttribAPPLE */
 GdkGLProc
-gdk_gl_get_glFogCoordhvNV (void)
+gdk_gl_get_glDisableVertexAttribAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glFogCoordhvNV == (GdkGLProc_glFogCoordhvNV) -1)
-    _procs_GL_NV_half_float.glFogCoordhvNV =
-      (GdkGLProc_glFogCoordhvNV) gdk_gl_get_proc_address ("glFogCoordhvNV");
+  if (_procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE == (GdkGLProc_glDisableVertexAttribAPPLE) -1)
+    _procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE =
+      (GdkGLProc_glDisableVertexAttribAPPLE) gdk_gl_get_proc_address ("glDisableVertexAttribAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFogCoordhvNV () - %s",
-               (_procs_GL_NV_half_float.glFogCoordhvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glDisableVertexAttribAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glFogCoordhvNV);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE);
 }
 
-/* glSecondaryColor3hNV */
+/* glIsVertexAttribEnabledAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3hNV (void)
+gdk_gl_get_glIsVertexAttribEnabledAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glSecondaryColor3hNV == (GdkGLProc_glSecondaryColor3hNV) -1)
-    _procs_GL_NV_half_float.glSecondaryColor3hNV =
-      (GdkGLProc_glSecondaryColor3hNV) gdk_gl_get_proc_address ("glSecondaryColor3hNV");
+  if (_procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE == (GdkGLProc_glIsVertexAttribEnabledAPPLE) -1)
+    _procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE =
+      (GdkGLProc_glIsVertexAttribEnabledAPPLE) gdk_gl_get_proc_address ("glIsVertexAttribEnabledAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3hNV () - %s",
-               (_procs_GL_NV_half_float.glSecondaryColor3hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glIsVertexAttribEnabledAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glSecondaryColor3hNV);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE);
 }
 
-/* glSecondaryColor3hvNV */
+/* glMapVertexAttrib1dAPPLE */
 GdkGLProc
-gdk_gl_get_glSecondaryColor3hvNV (void)
+gdk_gl_get_glMapVertexAttrib1dAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glSecondaryColor3hvNV == (GdkGLProc_glSecondaryColor3hvNV) -1)
-    _procs_GL_NV_half_float.glSecondaryColor3hvNV =
-      (GdkGLProc_glSecondaryColor3hvNV) gdk_gl_get_proc_address ("glSecondaryColor3hvNV");
+  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE == (GdkGLProc_glMapVertexAttrib1dAPPLE) -1)
+    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE =
+      (GdkGLProc_glMapVertexAttrib1dAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib1dAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glSecondaryColor3hvNV () - %s",
-               (_procs_GL_NV_half_float.glSecondaryColor3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMapVertexAttrib1dAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glSecondaryColor3hvNV);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE);
 }
 
-/* glVertexWeighthNV */
+/* glMapVertexAttrib1fAPPLE */
 GdkGLProc
-gdk_gl_get_glVertexWeighthNV (void)
+gdk_gl_get_glMapVertexAttrib1fAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexWeighthNV == (GdkGLProc_glVertexWeighthNV) -1)
-    _procs_GL_NV_half_float.glVertexWeighthNV =
-      (GdkGLProc_glVertexWeighthNV) gdk_gl_get_proc_address ("glVertexWeighthNV");
+  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE == (GdkGLProc_glMapVertexAttrib1fAPPLE) -1)
+    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE =
+      (GdkGLProc_glMapVertexAttrib1fAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib1fAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexWeighthNV () - %s",
-               (_procs_GL_NV_half_float.glVertexWeighthNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMapVertexAttrib1fAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexWeighthNV);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE);
 }
 
-/* glVertexWeighthvNV */
+/* glMapVertexAttrib2dAPPLE */
 GdkGLProc
-gdk_gl_get_glVertexWeighthvNV (void)
+gdk_gl_get_glMapVertexAttrib2dAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexWeighthvNV == (GdkGLProc_glVertexWeighthvNV) -1)
-    _procs_GL_NV_half_float.glVertexWeighthvNV =
-      (GdkGLProc_glVertexWeighthvNV) gdk_gl_get_proc_address ("glVertexWeighthvNV");
+  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE == (GdkGLProc_glMapVertexAttrib2dAPPLE) -1)
+    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE =
+      (GdkGLProc_glMapVertexAttrib2dAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib2dAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexWeighthvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexWeighthvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMapVertexAttrib2dAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexWeighthvNV);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE);
 }
 
-/* glVertexAttrib1hNV */
+/* glMapVertexAttrib2fAPPLE */
 GdkGLProc
-gdk_gl_get_glVertexAttrib1hNV (void)
+gdk_gl_get_glMapVertexAttrib2fAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib1hNV == (GdkGLProc_glVertexAttrib1hNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib1hNV =
-      (GdkGLProc_glVertexAttrib1hNV) gdk_gl_get_proc_address ("glVertexAttrib1hNV");
+  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE == (GdkGLProc_glMapVertexAttrib2fAPPLE) -1)
+    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE =
+      (GdkGLProc_glMapVertexAttrib2fAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib2fAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1hNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib1hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMapVertexAttrib2fAPPLE () - %s",
+               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib1hNV);
+  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE);
 }
 
-/* glVertexAttrib1hvNV */
-GdkGLProc
-gdk_gl_get_glVertexAttrib1hvNV (void)
+/* Get GL_APPLE_vertex_program_evaluators functions */
+GdkGL_GL_APPLE_vertex_program_evaluators *
+gdk_gl_get_GL_APPLE_vertex_program_evaluators (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib1hvNV == (GdkGLProc_glVertexAttrib1hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib1hvNV =
-      (GdkGLProc_glVertexAttrib1hvNV) gdk_gl_get_proc_address ("glVertexAttrib1hvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_vertex_program_evaluators");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glEnableVertexAttribAPPLE () != NULL);
+          supported &= (gdk_gl_get_glDisableVertexAttribAPPLE () != NULL);
+          supported &= (gdk_gl_get_glIsVertexAttribEnabledAPPLE () != NULL);
+          supported &= (gdk_gl_get_glMapVertexAttrib1dAPPLE () != NULL);
+          supported &= (gdk_gl_get_glMapVertexAttrib1fAPPLE () != NULL);
+          supported &= (gdk_gl_get_glMapVertexAttrib2dAPPLE () != NULL);
+          supported &= (gdk_gl_get_glMapVertexAttrib2fAPPLE () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib1hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib1hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_APPLE_vertex_program_evaluators () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib1hvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_APPLE_vertex_program_evaluators;
 }
 
-/* glVertexAttrib2hNV */
+/*
+ * GL_APPLE_object_purgeable
+ */
+
+static GdkGL_GL_APPLE_object_purgeable _procs_GL_APPLE_object_purgeable = {
+  (GdkGLProc_glObjectPurgeableAPPLE) -1,
+  (GdkGLProc_glObjectUnpurgeableAPPLE) -1,
+  (GdkGLProc_glGetObjectParameterivAPPLE) -1
+};
+
+/* glObjectPurgeableAPPLE */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2hNV (void)
+gdk_gl_get_glObjectPurgeableAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib2hNV == (GdkGLProc_glVertexAttrib2hNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib2hNV =
-      (GdkGLProc_glVertexAttrib2hNV) gdk_gl_get_proc_address ("glVertexAttrib2hNV");
+  if (_procs_GL_APPLE_object_purgeable.glObjectPurgeableAPPLE == (GdkGLProc_glObjectPurgeableAPPLE) -1)
+    _procs_GL_APPLE_object_purgeable.glObjectPurgeableAPPLE =
+      (GdkGLProc_glObjectPurgeableAPPLE) gdk_gl_get_proc_address ("glObjectPurgeableAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2hNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib2hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glObjectPurgeableAPPLE () - %s",
+               (_procs_GL_APPLE_object_purgeable.glObjectPurgeableAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib2hNV);
+  return (GdkGLProc) (_procs_GL_APPLE_object_purgeable.glObjectPurgeableAPPLE);
 }
 
-/* glVertexAttrib2hvNV */
+/* glObjectUnpurgeableAPPLE */
 GdkGLProc
-gdk_gl_get_glVertexAttrib2hvNV (void)
+gdk_gl_get_glObjectUnpurgeableAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib2hvNV == (GdkGLProc_glVertexAttrib2hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib2hvNV =
-      (GdkGLProc_glVertexAttrib2hvNV) gdk_gl_get_proc_address ("glVertexAttrib2hvNV");
+  if (_procs_GL_APPLE_object_purgeable.glObjectUnpurgeableAPPLE == (GdkGLProc_glObjectUnpurgeableAPPLE) -1)
+    _procs_GL_APPLE_object_purgeable.glObjectUnpurgeableAPPLE =
+      (GdkGLProc_glObjectUnpurgeableAPPLE) gdk_gl_get_proc_address ("glObjectUnpurgeableAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib2hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib2hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glObjectUnpurgeableAPPLE () - %s",
+               (_procs_GL_APPLE_object_purgeable.glObjectUnpurgeableAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib2hvNV);
+  return (GdkGLProc) (_procs_GL_APPLE_object_purgeable.glObjectUnpurgeableAPPLE);
 }
 
-/* glVertexAttrib3hNV */
+/* glGetObjectParameterivAPPLE */
 GdkGLProc
-gdk_gl_get_glVertexAttrib3hNV (void)
+gdk_gl_get_glGetObjectParameterivAPPLE (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib3hNV == (GdkGLProc_glVertexAttrib3hNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib3hNV =
-      (GdkGLProc_glVertexAttrib3hNV) gdk_gl_get_proc_address ("glVertexAttrib3hNV");
+  if (_procs_GL_APPLE_object_purgeable.glGetObjectParameterivAPPLE == (GdkGLProc_glGetObjectParameterivAPPLE) -1)
+    _procs_GL_APPLE_object_purgeable.glGetObjectParameterivAPPLE =
+      (GdkGLProc_glGetObjectParameterivAPPLE) gdk_gl_get_proc_address ("glGetObjectParameterivAPPLE");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3hNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib3hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetObjectParameterivAPPLE () - %s",
+               (_procs_GL_APPLE_object_purgeable.glGetObjectParameterivAPPLE) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib3hNV);
+  return (GdkGLProc) (_procs_GL_APPLE_object_purgeable.glGetObjectParameterivAPPLE);
 }
 
-/* glVertexAttrib3hvNV */
-GdkGLProc
-gdk_gl_get_glVertexAttrib3hvNV (void)
+/* Get GL_APPLE_object_purgeable functions */
+GdkGL_GL_APPLE_object_purgeable *
+gdk_gl_get_GL_APPLE_object_purgeable (void)
 {
+  static gint supported = -1;
+
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib3hvNV == (GdkGLProc_glVertexAttrib3hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib3hvNV =
-      (GdkGLProc_glVertexAttrib3hvNV) gdk_gl_get_proc_address ("glVertexAttrib3hvNV");
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_APPLE_object_purgeable");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glObjectPurgeableAPPLE () != NULL);
+          supported &= (gdk_gl_get_glObjectUnpurgeableAPPLE () != NULL);
+          supported &= (gdk_gl_get_glGetObjectParameterivAPPLE () != NULL);
+        }
+    }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib3hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_GL_APPLE_object_purgeable () - %s",
+               (supported) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib3hvNV);
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_APPLE_object_purgeable;
 }
 
-/* glVertexAttrib4hNV */
+/*
+ * GL_NV_video_capture
+ */
+
+static GdkGL_GL_NV_video_capture _procs_GL_NV_video_capture = {
+  (GdkGLProc_glBeginVideoCaptureNV) -1,
+  (GdkGLProc_glBindVideoCaptureStreamBufferNV) -1,
+  (GdkGLProc_glBindVideoCaptureStreamTextureNV) -1,
+  (GdkGLProc_glEndVideoCaptureNV) -1,
+  (GdkGLProc_glGetVideoCaptureivNV) -1,
+  (GdkGLProc_glGetVideoCaptureStreamivNV) -1,
+  (GdkGLProc_glGetVideoCaptureStreamfvNV) -1,
+  (GdkGLProc_glGetVideoCaptureStreamdvNV) -1,
+  (GdkGLProc_glVideoCaptureNV) -1,
+  (GdkGLProc_glVideoCaptureStreamParameterivNV) -1,
+  (GdkGLProc_glVideoCaptureStreamParameterfvNV) -1,
+  (GdkGLProc_glVideoCaptureStreamParameterdvNV) -1
+};
+
+/* glBeginVideoCaptureNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4hNV (void)
+gdk_gl_get_glBeginVideoCaptureNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib4hNV == (GdkGLProc_glVertexAttrib4hNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib4hNV =
-      (GdkGLProc_glVertexAttrib4hNV) gdk_gl_get_proc_address ("glVertexAttrib4hNV");
+  if (_procs_GL_NV_video_capture.glBeginVideoCaptureNV == (GdkGLProc_glBeginVideoCaptureNV) -1)
+    _procs_GL_NV_video_capture.glBeginVideoCaptureNV =
+      (GdkGLProc_glBeginVideoCaptureNV) gdk_gl_get_proc_address ("glBeginVideoCaptureNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4hNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib4hNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBeginVideoCaptureNV () - %s",
+               (_procs_GL_NV_video_capture.glBeginVideoCaptureNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib4hNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glBeginVideoCaptureNV);
 }
 
-/* glVertexAttrib4hvNV */
+/* glBindVideoCaptureStreamBufferNV */
 GdkGLProc
-gdk_gl_get_glVertexAttrib4hvNV (void)
+gdk_gl_get_glBindVideoCaptureStreamBufferNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttrib4hvNV == (GdkGLProc_glVertexAttrib4hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttrib4hvNV =
-      (GdkGLProc_glVertexAttrib4hvNV) gdk_gl_get_proc_address ("glVertexAttrib4hvNV");
+  if (_procs_GL_NV_video_capture.glBindVideoCaptureStreamBufferNV == (GdkGLProc_glBindVideoCaptureStreamBufferNV) -1)
+    _procs_GL_NV_video_capture.glBindVideoCaptureStreamBufferNV =
+      (GdkGLProc_glBindVideoCaptureStreamBufferNV) gdk_gl_get_proc_address ("glBindVideoCaptureStreamBufferNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttrib4hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttrib4hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindVideoCaptureStreamBufferNV () - %s",
+               (_procs_GL_NV_video_capture.glBindVideoCaptureStreamBufferNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttrib4hvNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glBindVideoCaptureStreamBufferNV);
 }
 
-/* glVertexAttribs1hvNV */
+/* glBindVideoCaptureStreamTextureNV */
 GdkGLProc
-gdk_gl_get_glVertexAttribs1hvNV (void)
+gdk_gl_get_glBindVideoCaptureStreamTextureNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttribs1hvNV == (GdkGLProc_glVertexAttribs1hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttribs1hvNV =
-      (GdkGLProc_glVertexAttribs1hvNV) gdk_gl_get_proc_address ("glVertexAttribs1hvNV");
+  if (_procs_GL_NV_video_capture.glBindVideoCaptureStreamTextureNV == (GdkGLProc_glBindVideoCaptureStreamTextureNV) -1)
+    _procs_GL_NV_video_capture.glBindVideoCaptureStreamTextureNV =
+      (GdkGLProc_glBindVideoCaptureStreamTextureNV) gdk_gl_get_proc_address ("glBindVideoCaptureStreamTextureNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs1hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttribs1hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBindVideoCaptureStreamTextureNV () - %s",
+               (_procs_GL_NV_video_capture.glBindVideoCaptureStreamTextureNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs1hvNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glBindVideoCaptureStreamTextureNV);
 }
 
-/* glVertexAttribs2hvNV */
+/* glEndVideoCaptureNV */
 GdkGLProc
-gdk_gl_get_glVertexAttribs2hvNV (void)
+gdk_gl_get_glEndVideoCaptureNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttribs2hvNV == (GdkGLProc_glVertexAttribs2hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttribs2hvNV =
-      (GdkGLProc_glVertexAttribs2hvNV) gdk_gl_get_proc_address ("glVertexAttribs2hvNV");
+  if (_procs_GL_NV_video_capture.glEndVideoCaptureNV == (GdkGLProc_glEndVideoCaptureNV) -1)
+    _procs_GL_NV_video_capture.glEndVideoCaptureNV =
+      (GdkGLProc_glEndVideoCaptureNV) gdk_gl_get_proc_address ("glEndVideoCaptureNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs2hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttribs2hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEndVideoCaptureNV () - %s",
+               (_procs_GL_NV_video_capture.glEndVideoCaptureNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs2hvNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glEndVideoCaptureNV);
 }
 
-/* glVertexAttribs3hvNV */
+/* glGetVideoCaptureivNV */
 GdkGLProc
-gdk_gl_get_glVertexAttribs3hvNV (void)
+gdk_gl_get_glGetVideoCaptureivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttribs3hvNV == (GdkGLProc_glVertexAttribs3hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttribs3hvNV =
-      (GdkGLProc_glVertexAttribs3hvNV) gdk_gl_get_proc_address ("glVertexAttribs3hvNV");
+  if (_procs_GL_NV_video_capture.glGetVideoCaptureivNV == (GdkGLProc_glGetVideoCaptureivNV) -1)
+    _procs_GL_NV_video_capture.glGetVideoCaptureivNV =
+      (GdkGLProc_glGetVideoCaptureivNV) gdk_gl_get_proc_address ("glGetVideoCaptureivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs3hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttribs3hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVideoCaptureivNV () - %s",
+               (_procs_GL_NV_video_capture.glGetVideoCaptureivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs3hvNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glGetVideoCaptureivNV);
 }
 
-/* glVertexAttribs4hvNV */
+/* glGetVideoCaptureStreamivNV */
 GdkGLProc
-gdk_gl_get_glVertexAttribs4hvNV (void)
+gdk_gl_get_glGetVideoCaptureStreamivNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_half_float.glVertexAttribs4hvNV == (GdkGLProc_glVertexAttribs4hvNV) -1)
-    _procs_GL_NV_half_float.glVertexAttribs4hvNV =
-      (GdkGLProc_glVertexAttribs4hvNV) gdk_gl_get_proc_address ("glVertexAttribs4hvNV");
+  if (_procs_GL_NV_video_capture.glGetVideoCaptureStreamivNV == (GdkGLProc_glGetVideoCaptureStreamivNV) -1)
+    _procs_GL_NV_video_capture.glGetVideoCaptureStreamivNV =
+      (GdkGLProc_glGetVideoCaptureStreamivNV) gdk_gl_get_proc_address ("glGetVideoCaptureStreamivNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribs4hvNV () - %s",
-               (_procs_GL_NV_half_float.glVertexAttribs4hvNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVideoCaptureStreamivNV () - %s",
+               (_procs_GL_NV_video_capture.glGetVideoCaptureStreamivNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_half_float.glVertexAttribs4hvNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glGetVideoCaptureStreamivNV);
 }
 
-/* Get GL_NV_half_float functions */
-GdkGL_GL_NV_half_float *
-gdk_gl_get_GL_NV_half_float (void)
+/* glGetVideoCaptureStreamfvNV */
+GdkGLProc
+gdk_gl_get_glGetVideoCaptureStreamfvNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_NV_half_float");
+  if (_procs_GL_NV_video_capture.glGetVideoCaptureStreamfvNV == (GdkGLProc_glGetVideoCaptureStreamfvNV) -1)
+    _procs_GL_NV_video_capture.glGetVideoCaptureStreamfvNV =
+      (GdkGLProc_glGetVideoCaptureStreamfvNV) gdk_gl_get_proc_address ("glGetVideoCaptureStreamfvNV");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glVertex2hNV () != NULL);
-          supported &= (gdk_gl_get_glVertex2hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertex3hNV () != NULL);
-          supported &= (gdk_gl_get_glVertex3hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertex4hNV () != NULL);
-          supported &= (gdk_gl_get_glVertex4hvNV () != NULL);
-          supported &= (gdk_gl_get_glNormal3hNV () != NULL);
-          supported &= (gdk_gl_get_glNormal3hvNV () != NULL);
-          supported &= (gdk_gl_get_glColor3hNV () != NULL);
-          supported &= (gdk_gl_get_glColor3hvNV () != NULL);
-          supported &= (gdk_gl_get_glColor4hNV () != NULL);
-          supported &= (gdk_gl_get_glColor4hvNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord1hNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord1hvNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2hNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord2hvNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord3hNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord3hvNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord4hNV () != NULL);
-          supported &= (gdk_gl_get_glTexCoord4hvNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1hNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord1hvNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2hNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord2hvNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3hNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord3hvNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4hNV () != NULL);
-          supported &= (gdk_gl_get_glMultiTexCoord4hvNV () != NULL);
-          supported &= (gdk_gl_get_glFogCoordhNV () != NULL);
-          supported &= (gdk_gl_get_glFogCoordhvNV () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3hNV () != NULL);
-          supported &= (gdk_gl_get_glSecondaryColor3hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexWeighthNV () != NULL);
-          supported &= (gdk_gl_get_glVertexWeighthvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1hNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib1hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2hNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib2hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3hNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib3hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4hNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttrib4hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs1hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs2hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs3hvNV () != NULL);
-          supported &= (gdk_gl_get_glVertexAttribs4hvNV () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetVideoCaptureStreamfvNV () - %s",
+               (_procs_GL_NV_video_capture.glGetVideoCaptureStreamfvNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glGetVideoCaptureStreamfvNV);
+}
+
+/* glGetVideoCaptureStreamdvNV */
+GdkGLProc
+gdk_gl_get_glGetVideoCaptureStreamdvNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_video_capture.glGetVideoCaptureStreamdvNV == (GdkGLProc_glGetVideoCaptureStreamdvNV) -1)
+    _procs_GL_NV_video_capture.glGetVideoCaptureStreamdvNV =
+      (GdkGLProc_glGetVideoCaptureStreamdvNV) gdk_gl_get_proc_address ("glGetVideoCaptureStreamdvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_half_float () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetVideoCaptureStreamdvNV () - %s",
+               (_procs_GL_NV_video_capture.glGetVideoCaptureStreamdvNV) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glGetVideoCaptureStreamdvNV);
+}
+
+/* glVideoCaptureNV */
+GdkGLProc
+gdk_gl_get_glVideoCaptureNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_NV_half_float;
+  if (_procs_GL_NV_video_capture.glVideoCaptureNV == (GdkGLProc_glVideoCaptureNV) -1)
+    _procs_GL_NV_video_capture.glVideoCaptureNV =
+      (GdkGLProc_glVideoCaptureNV) gdk_gl_get_proc_address ("glVideoCaptureNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVideoCaptureNV () - %s",
+               (_procs_GL_NV_video_capture.glVideoCaptureNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glVideoCaptureNV);
 }
 
-/*
- * GL_NV_pixel_data_range
- */
+/* glVideoCaptureStreamParameterivNV */
+GdkGLProc
+gdk_gl_get_glVideoCaptureStreamParameterivNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_NV_pixel_data_range _procs_GL_NV_pixel_data_range = {
-  (GdkGLProc_glPixelDataRangeNV) -1,
-  (GdkGLProc_glFlushPixelDataRangeNV) -1
-};
+  if (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterivNV == (GdkGLProc_glVideoCaptureStreamParameterivNV) -1)
+    _procs_GL_NV_video_capture.glVideoCaptureStreamParameterivNV =
+      (GdkGLProc_glVideoCaptureStreamParameterivNV) gdk_gl_get_proc_address ("glVideoCaptureStreamParameterivNV");
 
-/* glPixelDataRangeNV */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glVideoCaptureStreamParameterivNV () - %s",
+               (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterivNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterivNV);
+}
+
+/* glVideoCaptureStreamParameterfvNV */
 GdkGLProc
-gdk_gl_get_glPixelDataRangeNV (void)
+gdk_gl_get_glVideoCaptureStreamParameterfvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_pixel_data_range.glPixelDataRangeNV == (GdkGLProc_glPixelDataRangeNV) -1)
-    _procs_GL_NV_pixel_data_range.glPixelDataRangeNV =
-      (GdkGLProc_glPixelDataRangeNV) gdk_gl_get_proc_address ("glPixelDataRangeNV");
+  if (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterfvNV == (GdkGLProc_glVideoCaptureStreamParameterfvNV) -1)
+    _procs_GL_NV_video_capture.glVideoCaptureStreamParameterfvNV =
+      (GdkGLProc_glVideoCaptureStreamParameterfvNV) gdk_gl_get_proc_address ("glVideoCaptureStreamParameterfvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPixelDataRangeNV () - %s",
-               (_procs_GL_NV_pixel_data_range.glPixelDataRangeNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVideoCaptureStreamParameterfvNV () - %s",
+               (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterfvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_pixel_data_range.glPixelDataRangeNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterfvNV);
 }
 
-/* glFlushPixelDataRangeNV */
+/* glVideoCaptureStreamParameterdvNV */
 GdkGLProc
-gdk_gl_get_glFlushPixelDataRangeNV (void)
+gdk_gl_get_glVideoCaptureStreamParameterdvNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV == (GdkGLProc_glFlushPixelDataRangeNV) -1)
-    _procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV =
-      (GdkGLProc_glFlushPixelDataRangeNV) gdk_gl_get_proc_address ("glFlushPixelDataRangeNV");
+  if (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterdvNV == (GdkGLProc_glVideoCaptureStreamParameterdvNV) -1)
+    _procs_GL_NV_video_capture.glVideoCaptureStreamParameterdvNV =
+      (GdkGLProc_glVideoCaptureStreamParameterdvNV) gdk_gl_get_proc_address ("glVideoCaptureStreamParameterdvNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glFlushPixelDataRangeNV () - %s",
-               (_procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVideoCaptureStreamParameterdvNV () - %s",
+               (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterdvNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_pixel_data_range.glFlushPixelDataRangeNV);
+  return (GdkGLProc) (_procs_GL_NV_video_capture.glVideoCaptureStreamParameterdvNV);
 }
 
-/* Get GL_NV_pixel_data_range functions */
-GdkGL_GL_NV_pixel_data_range *
-gdk_gl_get_GL_NV_pixel_data_range (void)
+/* Get GL_NV_video_capture functions */
+GdkGL_GL_NV_video_capture *
+gdk_gl_get_GL_NV_video_capture (void)
 {
   static gint supported = -1;
 
@@ -21386,73 +37515,64 @@ gdk_gl_get_GL_NV_pixel_data_range (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_pixel_data_range");
+      supported = gdk_gl_query_gl_extension ("GL_NV_video_capture");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glPixelDataRangeNV () != NULL);
-          supported &= (gdk_gl_get_glFlushPixelDataRangeNV () != NULL);
+          supported &= (gdk_gl_get_glBeginVideoCaptureNV () != NULL);
+          supported &= (gdk_gl_get_glBindVideoCaptureStreamBufferNV () != NULL);
+          supported &= (gdk_gl_get_glBindVideoCaptureStreamTextureNV () != NULL);
+          supported &= (gdk_gl_get_glEndVideoCaptureNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideoCaptureivNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideoCaptureStreamivNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideoCaptureStreamfvNV () != NULL);
+          supported &= (gdk_gl_get_glGetVideoCaptureStreamdvNV () != NULL);
+          supported &= (gdk_gl_get_glVideoCaptureNV () != NULL);
+          supported &= (gdk_gl_get_glVideoCaptureStreamParameterivNV () != NULL);
+          supported &= (gdk_gl_get_glVideoCaptureStreamParameterfvNV () != NULL);
+          supported &= (gdk_gl_get_glVideoCaptureStreamParameterdvNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_pixel_data_range () - %s",
+    g_message (" - gdk_gl_get_GL_NV_video_capture () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_pixel_data_range;
+  return &_procs_GL_NV_video_capture;
 }
 
 /*
- * GL_NV_primitive_restart
+ * GL_NV_copy_image
  */
 
-static GdkGL_GL_NV_primitive_restart _procs_GL_NV_primitive_restart = {
-  (GdkGLProc_glPrimitiveRestartNV) -1,
-  (GdkGLProc_glPrimitiveRestartIndexNV) -1
+static GdkGL_GL_NV_copy_image _procs_GL_NV_copy_image = {
+  (GdkGLProc_glCopyImageSubDataNV) -1
 };
 
-/* glPrimitiveRestartNV */
-GdkGLProc
-gdk_gl_get_glPrimitiveRestartNV (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_NV_primitive_restart.glPrimitiveRestartNV == (GdkGLProc_glPrimitiveRestartNV) -1)
-    _procs_GL_NV_primitive_restart.glPrimitiveRestartNV =
-      (GdkGLProc_glPrimitiveRestartNV) gdk_gl_get_proc_address ("glPrimitiveRestartNV");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPrimitiveRestartNV () - %s",
-               (_procs_GL_NV_primitive_restart.glPrimitiveRestartNV) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_NV_primitive_restart.glPrimitiveRestartNV);
-}
-
-/* glPrimitiveRestartIndexNV */
+/* glCopyImageSubDataNV */
 GdkGLProc
-gdk_gl_get_glPrimitiveRestartIndexNV (void)
+gdk_gl_get_glCopyImageSubDataNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV == (GdkGLProc_glPrimitiveRestartIndexNV) -1)
-    _procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV =
-      (GdkGLProc_glPrimitiveRestartIndexNV) gdk_gl_get_proc_address ("glPrimitiveRestartIndexNV");
+  if (_procs_GL_NV_copy_image.glCopyImageSubDataNV == (GdkGLProc_glCopyImageSubDataNV) -1)
+    _procs_GL_NV_copy_image.glCopyImageSubDataNV =
+      (GdkGLProc_glCopyImageSubDataNV) gdk_gl_get_proc_address ("glCopyImageSubDataNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glPrimitiveRestartIndexNV () - %s",
-               (_procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glCopyImageSubDataNV () - %s",
+               (_procs_GL_NV_copy_image.glCopyImageSubDataNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_NV_primitive_restart.glPrimitiveRestartIndexNV);
+  return (GdkGLProc) (_procs_GL_NV_copy_image.glCopyImageSubDataNV);
 }
 
-/* Get GL_NV_primitive_restart functions */
-GdkGL_GL_NV_primitive_restart *
-gdk_gl_get_GL_NV_primitive_restart (void)
+/* Get GL_NV_copy_image functions */
+GdkGL_GL_NV_copy_image *
+gdk_gl_get_GL_NV_copy_image (void)
 {
   static gint supported = -1;
 
@@ -21461,73 +37581,91 @@ gdk_gl_get_GL_NV_primitive_restart (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_NV_primitive_restart");
+      supported = gdk_gl_query_gl_extension ("GL_NV_copy_image");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glPrimitiveRestartNV () != NULL);
-          supported &= (gdk_gl_get_glPrimitiveRestartIndexNV () != NULL);
+          supported &= (gdk_gl_get_glCopyImageSubDataNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_NV_primitive_restart () - %s",
+    g_message (" - gdk_gl_get_GL_NV_copy_image () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_NV_primitive_restart;
+  return &_procs_GL_NV_copy_image;
 }
 
 /*
- * GL_ATI_map_object_buffer
+ * GL_EXT_separate_shader_objects
  */
 
-static GdkGL_GL_ATI_map_object_buffer _procs_GL_ATI_map_object_buffer = {
-  (GdkGLProc_glMapObjectBufferATI) -1,
-  (GdkGLProc_glUnmapObjectBufferATI) -1
+static GdkGL_GL_EXT_separate_shader_objects _procs_GL_EXT_separate_shader_objects = {
+  (GdkGLProc_glUseShaderProgramEXT) -1,
+  (GdkGLProc_glActiveProgramEXT) -1,
+  (GdkGLProc_glCreateShaderProgramEXT) -1
 };
 
-/* glMapObjectBufferATI */
+/* glUseShaderProgramEXT */
 GdkGLProc
-gdk_gl_get_glMapObjectBufferATI (void)
+gdk_gl_get_glUseShaderProgramEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_map_object_buffer.glMapObjectBufferATI == (GdkGLProc_glMapObjectBufferATI) -1)
-    _procs_GL_ATI_map_object_buffer.glMapObjectBufferATI =
-      (GdkGLProc_glMapObjectBufferATI) gdk_gl_get_proc_address ("glMapObjectBufferATI");
+  if (_procs_GL_EXT_separate_shader_objects.glUseShaderProgramEXT == (GdkGLProc_glUseShaderProgramEXT) -1)
+    _procs_GL_EXT_separate_shader_objects.glUseShaderProgramEXT =
+      (GdkGLProc_glUseShaderProgramEXT) gdk_gl_get_proc_address ("glUseShaderProgramEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapObjectBufferATI () - %s",
-               (_procs_GL_ATI_map_object_buffer.glMapObjectBufferATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glUseShaderProgramEXT () - %s",
+               (_procs_GL_EXT_separate_shader_objects.glUseShaderProgramEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_map_object_buffer.glMapObjectBufferATI);
+  return (GdkGLProc) (_procs_GL_EXT_separate_shader_objects.glUseShaderProgramEXT);
 }
 
-/* glUnmapObjectBufferATI */
+/* glActiveProgramEXT */
 GdkGLProc
-gdk_gl_get_glUnmapObjectBufferATI (void)
+gdk_gl_get_glActiveProgramEXT (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI == (GdkGLProc_glUnmapObjectBufferATI) -1)
-    _procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI =
-      (GdkGLProc_glUnmapObjectBufferATI) gdk_gl_get_proc_address ("glUnmapObjectBufferATI");
+  if (_procs_GL_EXT_separate_shader_objects.glActiveProgramEXT == (GdkGLProc_glActiveProgramEXT) -1)
+    _procs_GL_EXT_separate_shader_objects.glActiveProgramEXT =
+      (GdkGLProc_glActiveProgramEXT) gdk_gl_get_proc_address ("glActiveProgramEXT");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glUnmapObjectBufferATI () - %s",
-               (_procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glActiveProgramEXT () - %s",
+               (_procs_GL_EXT_separate_shader_objects.glActiveProgramEXT) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_map_object_buffer.glUnmapObjectBufferATI);
+  return (GdkGLProc) (_procs_GL_EXT_separate_shader_objects.glActiveProgramEXT);
 }
 
-/* Get GL_ATI_map_object_buffer functions */
-GdkGL_GL_ATI_map_object_buffer *
-gdk_gl_get_GL_ATI_map_object_buffer (void)
+/* glCreateShaderProgramEXT */
+GdkGLProc
+gdk_gl_get_glCreateShaderProgramEXT (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_EXT_separate_shader_objects.glCreateShaderProgramEXT == (GdkGLProc_glCreateShaderProgramEXT) -1)
+    _procs_GL_EXT_separate_shader_objects.glCreateShaderProgramEXT =
+      (GdkGLProc_glCreateShaderProgramEXT) gdk_gl_get_proc_address ("glCreateShaderProgramEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glCreateShaderProgramEXT () - %s",
+               (_procs_GL_EXT_separate_shader_objects.glCreateShaderProgramEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_EXT_separate_shader_objects.glCreateShaderProgramEXT);
+}
+
+/* Get GL_EXT_separate_shader_objects functions */
+GdkGL_GL_EXT_separate_shader_objects *
+gdk_gl_get_GL_EXT_separate_shader_objects (void)
 {
   static gint supported = -1;
 
@@ -21536,167 +37674,302 @@ gdk_gl_get_GL_ATI_map_object_buffer (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_map_object_buffer");
+      supported = gdk_gl_query_gl_extension ("GL_EXT_separate_shader_objects");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glMapObjectBufferATI () != NULL);
-          supported &= (gdk_gl_get_glUnmapObjectBufferATI () != NULL);
+          supported &= (gdk_gl_get_glUseShaderProgramEXT () != NULL);
+          supported &= (gdk_gl_get_glActiveProgramEXT () != NULL);
+          supported &= (gdk_gl_get_glCreateShaderProgramEXT () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_map_object_buffer () - %s",
+    g_message (" - gdk_gl_get_GL_EXT_separate_shader_objects () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_ATI_map_object_buffer;
+  return &_procs_GL_EXT_separate_shader_objects;
 }
 
 /*
- * GL_ATI_separate_stencil
+ * GL_NV_shader_buffer_load
  */
 
-static GdkGL_GL_ATI_separate_stencil _procs_GL_ATI_separate_stencil = {
-  (GdkGLProc_glStencilOpSeparateATI) -1,
-  (GdkGLProc_glStencilFuncSeparateATI) -1
+static GdkGL_GL_NV_shader_buffer_load _procs_GL_NV_shader_buffer_load = {
+  (GdkGLProc_glMakeBufferResidentNV) -1,
+  (GdkGLProc_glMakeBufferNonResidentNV) -1,
+  (GdkGLProc_glIsBufferResidentNV) -1,
+  (GdkGLProc_glNamedMakeBufferResidentNV) -1,
+  (GdkGLProc_glNamedMakeBufferNonResidentNV) -1,
+  (GdkGLProc_glIsNamedBufferResidentNV) -1,
+  (GdkGLProc_glGetBufferParameterui64vNV) -1,
+  (GdkGLProc_glGetNamedBufferParameterui64vNV) -1,
+  (GdkGLProc_glGetIntegerui64vNV) -1,
+  (GdkGLProc_glUniformui64NV) -1,
+  (GdkGLProc_glUniformui64vNV) -1,
+  (GdkGLProc_glGetUniformui64vNV) -1,
+  (GdkGLProc_glProgramUniformui64NV) -1,
+  (GdkGLProc_glProgramUniformui64vNV) -1
 };
 
-/* glStencilOpSeparateATI */
+/* glMakeBufferResidentNV */
 GdkGLProc
-gdk_gl_get_glStencilOpSeparateATI (void)
+gdk_gl_get_glMakeBufferResidentNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_separate_stencil.glStencilOpSeparateATI == (GdkGLProc_glStencilOpSeparateATI) -1)
-    _procs_GL_ATI_separate_stencil.glStencilOpSeparateATI =
-      (GdkGLProc_glStencilOpSeparateATI) gdk_gl_get_proc_address ("glStencilOpSeparateATI");
+  if (_procs_GL_NV_shader_buffer_load.glMakeBufferResidentNV == (GdkGLProc_glMakeBufferResidentNV) -1)
+    _procs_GL_NV_shader_buffer_load.glMakeBufferResidentNV =
+      (GdkGLProc_glMakeBufferResidentNV) gdk_gl_get_proc_address ("glMakeBufferResidentNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glStencilOpSeparateATI () - %s",
-               (_procs_GL_ATI_separate_stencil.glStencilOpSeparateATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMakeBufferResidentNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glMakeBufferResidentNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_separate_stencil.glStencilOpSeparateATI);
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glMakeBufferResidentNV);
 }
 
-/* glStencilFuncSeparateATI */
+/* glMakeBufferNonResidentNV */
 GdkGLProc
-gdk_gl_get_glStencilFuncSeparateATI (void)
+gdk_gl_get_glMakeBufferNonResidentNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI == (GdkGLProc_glStencilFuncSeparateATI) -1)
-    _procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI =
-      (GdkGLProc_glStencilFuncSeparateATI) gdk_gl_get_proc_address ("glStencilFuncSeparateATI");
+  if (_procs_GL_NV_shader_buffer_load.glMakeBufferNonResidentNV == (GdkGLProc_glMakeBufferNonResidentNV) -1)
+    _procs_GL_NV_shader_buffer_load.glMakeBufferNonResidentNV =
+      (GdkGLProc_glMakeBufferNonResidentNV) gdk_gl_get_proc_address ("glMakeBufferNonResidentNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glStencilFuncSeparateATI () - %s",
-               (_procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glMakeBufferNonResidentNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glMakeBufferNonResidentNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_separate_stencil.glStencilFuncSeparateATI);
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glMakeBufferNonResidentNV);
 }
 
-/* Get GL_ATI_separate_stencil functions */
-GdkGL_GL_ATI_separate_stencil *
-gdk_gl_get_GL_ATI_separate_stencil (void)
+/* glIsBufferResidentNV */
+GdkGLProc
+gdk_gl_get_glIsBufferResidentNV (void)
 {
-  static gint supported = -1;
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_shader_buffer_load.glIsBufferResidentNV == (GdkGLProc_glIsBufferResidentNV) -1)
+    _procs_GL_NV_shader_buffer_load.glIsBufferResidentNV =
+      (GdkGLProc_glIsBufferResidentNV) gdk_gl_get_proc_address ("glIsBufferResidentNV");
 
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsBufferResidentNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glIsBufferResidentNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glIsBufferResidentNV);
+}
+
+/* glNamedMakeBufferResidentNV */
+GdkGLProc
+gdk_gl_get_glNamedMakeBufferResidentNV (void)
+{
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_separate_stencil");
+  if (_procs_GL_NV_shader_buffer_load.glNamedMakeBufferResidentNV == (GdkGLProc_glNamedMakeBufferResidentNV) -1)
+    _procs_GL_NV_shader_buffer_load.glNamedMakeBufferResidentNV =
+      (GdkGLProc_glNamedMakeBufferResidentNV) gdk_gl_get_proc_address ("glNamedMakeBufferResidentNV");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glStencilOpSeparateATI () != NULL);
-          supported &= (gdk_gl_get_glStencilFuncSeparateATI () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNamedMakeBufferResidentNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glNamedMakeBufferResidentNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glNamedMakeBufferResidentNV);
+}
+
+/* glNamedMakeBufferNonResidentNV */
+GdkGLProc
+gdk_gl_get_glNamedMakeBufferNonResidentNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_shader_buffer_load.glNamedMakeBufferNonResidentNV == (GdkGLProc_glNamedMakeBufferNonResidentNV) -1)
+    _procs_GL_NV_shader_buffer_load.glNamedMakeBufferNonResidentNV =
+      (GdkGLProc_glNamedMakeBufferNonResidentNV) gdk_gl_get_proc_address ("glNamedMakeBufferNonResidentNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_separate_stencil () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glNamedMakeBufferNonResidentNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glNamedMakeBufferNonResidentNV) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glNamedMakeBufferNonResidentNV);
+}
+
+/* glIsNamedBufferResidentNV */
+GdkGLProc
+gdk_gl_get_glIsNamedBufferResidentNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_ATI_separate_stencil;
+  if (_procs_GL_NV_shader_buffer_load.glIsNamedBufferResidentNV == (GdkGLProc_glIsNamedBufferResidentNV) -1)
+    _procs_GL_NV_shader_buffer_load.glIsNamedBufferResidentNV =
+      (GdkGLProc_glIsNamedBufferResidentNV) gdk_gl_get_proc_address ("glIsNamedBufferResidentNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIsNamedBufferResidentNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glIsNamedBufferResidentNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glIsNamedBufferResidentNV);
 }
 
-/*
- * GL_ATI_vertex_attrib_array_object
- */
+/* glGetBufferParameterui64vNV */
+GdkGLProc
+gdk_gl_get_glGetBufferParameterui64vNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_ATI_vertex_attrib_array_object _procs_GL_ATI_vertex_attrib_array_object = {
-  (GdkGLProc_glVertexAttribArrayObjectATI) -1,
-  (GdkGLProc_glGetVertexAttribArrayObjectfvATI) -1,
-  (GdkGLProc_glGetVertexAttribArrayObjectivATI) -1
-};
+  if (_procs_GL_NV_shader_buffer_load.glGetBufferParameterui64vNV == (GdkGLProc_glGetBufferParameterui64vNV) -1)
+    _procs_GL_NV_shader_buffer_load.glGetBufferParameterui64vNV =
+      (GdkGLProc_glGetBufferParameterui64vNV) gdk_gl_get_proc_address ("glGetBufferParameterui64vNV");
 
-/* glVertexAttribArrayObjectATI */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetBufferParameterui64vNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glGetBufferParameterui64vNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glGetBufferParameterui64vNV);
+}
+
+/* glGetNamedBufferParameterui64vNV */
 GdkGLProc
-gdk_gl_get_glVertexAttribArrayObjectATI (void)
+gdk_gl_get_glGetNamedBufferParameterui64vNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI == (GdkGLProc_glVertexAttribArrayObjectATI) -1)
-    _procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI =
-      (GdkGLProc_glVertexAttribArrayObjectATI) gdk_gl_get_proc_address ("glVertexAttribArrayObjectATI");
+  if (_procs_GL_NV_shader_buffer_load.glGetNamedBufferParameterui64vNV == (GdkGLProc_glGetNamedBufferParameterui64vNV) -1)
+    _procs_GL_NV_shader_buffer_load.glGetNamedBufferParameterui64vNV =
+      (GdkGLProc_glGetNamedBufferParameterui64vNV) gdk_gl_get_proc_address ("glGetNamedBufferParameterui64vNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetNamedBufferParameterui64vNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glGetNamedBufferParameterui64vNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glGetNamedBufferParameterui64vNV);
+}
+
+/* glGetIntegerui64vNV */
+GdkGLProc
+gdk_gl_get_glGetIntegerui64vNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_shader_buffer_load.glGetIntegerui64vNV == (GdkGLProc_glGetIntegerui64vNV) -1)
+    _procs_GL_NV_shader_buffer_load.glGetIntegerui64vNV =
+      (GdkGLProc_glGetIntegerui64vNV) gdk_gl_get_proc_address ("glGetIntegerui64vNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glGetIntegerui64vNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glGetIntegerui64vNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glGetIntegerui64vNV);
+}
+
+/* glUniformui64NV */
+GdkGLProc
+gdk_gl_get_glUniformui64NV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_shader_buffer_load.glUniformui64NV == (GdkGLProc_glUniformui64NV) -1)
+    _procs_GL_NV_shader_buffer_load.glUniformui64NV =
+      (GdkGLProc_glUniformui64NV) gdk_gl_get_proc_address ("glUniformui64NV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniformui64NV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glUniformui64NV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glUniformui64NV);
+}
+
+/* glUniformui64vNV */
+GdkGLProc
+gdk_gl_get_glUniformui64vNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_shader_buffer_load.glUniformui64vNV == (GdkGLProc_glUniformui64vNV) -1)
+    _procs_GL_NV_shader_buffer_load.glUniformui64vNV =
+      (GdkGLProc_glUniformui64vNV) gdk_gl_get_proc_address ("glUniformui64vNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glUniformui64vNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glUniformui64vNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glUniformui64vNV);
+}
+
+/* glGetUniformui64vNV */
+GdkGLProc
+gdk_gl_get_glGetUniformui64vNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_shader_buffer_load.glGetUniformui64vNV == (GdkGLProc_glGetUniformui64vNV) -1)
+    _procs_GL_NV_shader_buffer_load.glGetUniformui64vNV =
+      (GdkGLProc_glGetUniformui64vNV) gdk_gl_get_proc_address ("glGetUniformui64vNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glVertexAttribArrayObjectATI () - %s",
-               (_procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetUniformui64vNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glGetUniformui64vNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_attrib_array_object.glVertexAttribArrayObjectATI);
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glGetUniformui64vNV);
 }
 
-/* glGetVertexAttribArrayObjectfvATI */
+/* glProgramUniformui64NV */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribArrayObjectfvATI (void)
+gdk_gl_get_glProgramUniformui64NV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI == (GdkGLProc_glGetVertexAttribArrayObjectfvATI) -1)
-    _procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI =
-      (GdkGLProc_glGetVertexAttribArrayObjectfvATI) gdk_gl_get_proc_address ("glGetVertexAttribArrayObjectfvATI");
+  if (_procs_GL_NV_shader_buffer_load.glProgramUniformui64NV == (GdkGLProc_glProgramUniformui64NV) -1)
+    _procs_GL_NV_shader_buffer_load.glProgramUniformui64NV =
+      (GdkGLProc_glProgramUniformui64NV) gdk_gl_get_proc_address ("glProgramUniformui64NV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribArrayObjectfvATI () - %s",
-               (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformui64NV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glProgramUniformui64NV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectfvATI);
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glProgramUniformui64NV);
 }
 
-/* glGetVertexAttribArrayObjectivATI */
+/* glProgramUniformui64vNV */
 GdkGLProc
-gdk_gl_get_glGetVertexAttribArrayObjectivATI (void)
+gdk_gl_get_glProgramUniformui64vNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI == (GdkGLProc_glGetVertexAttribArrayObjectivATI) -1)
-    _procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI =
-      (GdkGLProc_glGetVertexAttribArrayObjectivATI) gdk_gl_get_proc_address ("glGetVertexAttribArrayObjectivATI");
+  if (_procs_GL_NV_shader_buffer_load.glProgramUniformui64vNV == (GdkGLProc_glProgramUniformui64vNV) -1)
+    _procs_GL_NV_shader_buffer_load.glProgramUniformui64vNV =
+      (GdkGLProc_glProgramUniformui64vNV) gdk_gl_get_proc_address ("glProgramUniformui64vNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetVertexAttribArrayObjectivATI () - %s",
-               (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glProgramUniformui64vNV () - %s",
+               (_procs_GL_NV_shader_buffer_load.glProgramUniformui64vNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_ATI_vertex_attrib_array_object.glGetVertexAttribArrayObjectivATI);
+  return (GdkGLProc) (_procs_GL_NV_shader_buffer_load.glProgramUniformui64vNV);
 }
 
-/* Get GL_ATI_vertex_attrib_array_object functions */
-GdkGL_GL_ATI_vertex_attrib_array_object *
-gdk_gl_get_GL_ATI_vertex_attrib_array_object (void)
+/* Get GL_NV_shader_buffer_load functions */
+GdkGL_GL_NV_shader_buffer_load *
+gdk_gl_get_GL_NV_shader_buffer_load (void)
 {
   static gint supported = -1;
 
@@ -21705,244 +37978,341 @@ gdk_gl_get_GL_ATI_vertex_attrib_array_object (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_ATI_vertex_attrib_array_object");
+      supported = gdk_gl_query_gl_extension ("GL_NV_shader_buffer_load");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glVertexAttribArrayObjectATI () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribArrayObjectfvATI () != NULL);
-          supported &= (gdk_gl_get_glGetVertexAttribArrayObjectivATI () != NULL);
+          supported &= (gdk_gl_get_glMakeBufferResidentNV () != NULL);
+          supported &= (gdk_gl_get_glMakeBufferNonResidentNV () != NULL);
+          supported &= (gdk_gl_get_glIsBufferResidentNV () != NULL);
+          supported &= (gdk_gl_get_glNamedMakeBufferResidentNV () != NULL);
+          supported &= (gdk_gl_get_glNamedMakeBufferNonResidentNV () != NULL);
+          supported &= (gdk_gl_get_glIsNamedBufferResidentNV () != NULL);
+          supported &= (gdk_gl_get_glGetBufferParameterui64vNV () != NULL);
+          supported &= (gdk_gl_get_glGetNamedBufferParameterui64vNV () != NULL);
+          supported &= (gdk_gl_get_glGetIntegerui64vNV () != NULL);
+          supported &= (gdk_gl_get_glUniformui64NV () != NULL);
+          supported &= (gdk_gl_get_glUniformui64vNV () != NULL);
+          supported &= (gdk_gl_get_glGetUniformui64vNV () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformui64NV () != NULL);
+          supported &= (gdk_gl_get_glProgramUniformui64vNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_ATI_vertex_attrib_array_object () - %s",
+    g_message (" - gdk_gl_get_GL_NV_shader_buffer_load () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_ATI_vertex_attrib_array_object;
+  return &_procs_GL_NV_shader_buffer_load;
 }
 
 /*
- * GL_APPLE_texture_range
+ * GL_NV_vertex_buffer_unified_memory
  */
 
-static GdkGL_GL_APPLE_texture_range _procs_GL_APPLE_texture_range = {
-  (GdkGLProc_glTextureRangeAPPLE) -1,
-  (GdkGLProc_glGetTexParameterPointervAPPLE) -1
+static GdkGL_GL_NV_vertex_buffer_unified_memory _procs_GL_NV_vertex_buffer_unified_memory = {
+  (GdkGLProc_glBufferAddressRangeNV) -1,
+  (GdkGLProc_glVertexFormatNV) -1,
+  (GdkGLProc_glNormalFormatNV) -1,
+  (GdkGLProc_glColorFormatNV) -1,
+  (GdkGLProc_glIndexFormatNV) -1,
+  (GdkGLProc_glTexCoordFormatNV) -1,
+  (GdkGLProc_glEdgeFlagFormatNV) -1,
+  (GdkGLProc_glSecondaryColorFormatNV) -1,
+  (GdkGLProc_glFogCoordFormatNV) -1,
+  (GdkGLProc_glVertexAttribFormatNV) -1,
+  (GdkGLProc_glVertexAttribIFormatNV) -1,
+  (GdkGLProc_glGetIntegerui64i_vNV) -1
 };
 
-/* glTextureRangeAPPLE */
+/* glBufferAddressRangeNV */
 GdkGLProc
-gdk_gl_get_glTextureRangeAPPLE (void)
+gdk_gl_get_glBufferAddressRangeNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_texture_range.glTextureRangeAPPLE == (GdkGLProc_glTextureRangeAPPLE) -1)
-    _procs_GL_APPLE_texture_range.glTextureRangeAPPLE =
-      (GdkGLProc_glTextureRangeAPPLE) gdk_gl_get_proc_address ("glTextureRangeAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glBufferAddressRangeNV == (GdkGLProc_glBufferAddressRangeNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glBufferAddressRangeNV =
+      (GdkGLProc_glBufferAddressRangeNV) gdk_gl_get_proc_address ("glBufferAddressRangeNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glTextureRangeAPPLE () - %s",
-               (_procs_GL_APPLE_texture_range.glTextureRangeAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glBufferAddressRangeNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glBufferAddressRangeNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_texture_range.glTextureRangeAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glBufferAddressRangeNV);
 }
 
-/* glGetTexParameterPointervAPPLE */
+/* glVertexFormatNV */
 GdkGLProc
-gdk_gl_get_glGetTexParameterPointervAPPLE (void)
+gdk_gl_get_glVertexFormatNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE == (GdkGLProc_glGetTexParameterPointervAPPLE) -1)
-    _procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE =
-      (GdkGLProc_glGetTexParameterPointervAPPLE) gdk_gl_get_proc_address ("glGetTexParameterPointervAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glVertexFormatNV == (GdkGLProc_glVertexFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glVertexFormatNV =
+      (GdkGLProc_glVertexFormatNV) gdk_gl_get_proc_address ("glVertexFormatNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glGetTexParameterPointervAPPLE () - %s",
-               (_procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glVertexFormatNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_texture_range.glGetTexParameterPointervAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glVertexFormatNV);
 }
 
-/* Get GL_APPLE_texture_range functions */
-GdkGL_GL_APPLE_texture_range *
-gdk_gl_get_GL_APPLE_texture_range (void)
+/* glNormalFormatNV */
+GdkGLProc
+gdk_gl_get_glNormalFormatNV (void)
 {
-  static gint supported = -1;
-
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_APPLE_texture_range");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glNormalFormatNV == (GdkGLProc_glNormalFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glNormalFormatNV =
+      (GdkGLProc_glNormalFormatNV) gdk_gl_get_proc_address ("glNormalFormatNV");
 
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glTextureRangeAPPLE () != NULL);
-          supported &= (gdk_gl_get_glGetTexParameterPointervAPPLE () != NULL);
-        }
-    }
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glNormalFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glNormalFormatNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glNormalFormatNV);
+}
+
+/* glColorFormatNV */
+GdkGLProc
+gdk_gl_get_glColorFormatNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glColorFormatNV == (GdkGLProc_glColorFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glColorFormatNV =
+      (GdkGLProc_glColorFormatNV) gdk_gl_get_proc_address ("glColorFormatNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_APPLE_texture_range () - %s",
-               (supported) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glColorFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glColorFormatNV) ? "supported" : "not supported"));
 
-  if (!supported)
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glColorFormatNV);
+}
+
+/* glIndexFormatNV */
+GdkGLProc
+gdk_gl_get_glIndexFormatNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  return &_procs_GL_APPLE_texture_range;
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glIndexFormatNV == (GdkGLProc_glIndexFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glIndexFormatNV =
+      (GdkGLProc_glIndexFormatNV) gdk_gl_get_proc_address ("glIndexFormatNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glIndexFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glIndexFormatNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glIndexFormatNV);
 }
 
-/*
- * GL_APPLE_vertex_program_evaluators
- */
+/* glTexCoordFormatNV */
+GdkGLProc
+gdk_gl_get_glTexCoordFormatNV (void)
+{
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
 
-static GdkGL_GL_APPLE_vertex_program_evaluators _procs_GL_APPLE_vertex_program_evaluators = {
-  (GdkGLProc_glEnableVertexAttribAPPLE) -1,
-  (GdkGLProc_glDisableVertexAttribAPPLE) -1,
-  (GdkGLProc_glIsVertexAttribEnabledAPPLE) -1,
-  (GdkGLProc_glMapVertexAttrib1dAPPLE) -1,
-  (GdkGLProc_glMapVertexAttrib1fAPPLE) -1,
-  (GdkGLProc_glMapVertexAttrib2dAPPLE) -1,
-  (GdkGLProc_glMapVertexAttrib2fAPPLE) -1
-};
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glTexCoordFormatNV == (GdkGLProc_glTexCoordFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glTexCoordFormatNV =
+      (GdkGLProc_glTexCoordFormatNV) gdk_gl_get_proc_address ("glTexCoordFormatNV");
 
-/* glEnableVertexAttribAPPLE */
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glTexCoordFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glTexCoordFormatNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glTexCoordFormatNV);
+}
+
+/* glEdgeFlagFormatNV */
 GdkGLProc
-gdk_gl_get_glEnableVertexAttribAPPLE (void)
+gdk_gl_get_glEdgeFlagFormatNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE == (GdkGLProc_glEnableVertexAttribAPPLE) -1)
-    _procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE =
-      (GdkGLProc_glEnableVertexAttribAPPLE) gdk_gl_get_proc_address ("glEnableVertexAttribAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glEdgeFlagFormatNV == (GdkGLProc_glEdgeFlagFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glEdgeFlagFormatNV =
+      (GdkGLProc_glEdgeFlagFormatNV) gdk_gl_get_proc_address ("glEdgeFlagFormatNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glEnableVertexAttribAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glEdgeFlagFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glEdgeFlagFormatNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glEnableVertexAttribAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glEdgeFlagFormatNV);
 }
 
-/* glDisableVertexAttribAPPLE */
+/* glSecondaryColorFormatNV */
 GdkGLProc
-gdk_gl_get_glDisableVertexAttribAPPLE (void)
+gdk_gl_get_glSecondaryColorFormatNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE == (GdkGLProc_glDisableVertexAttribAPPLE) -1)
-    _procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE =
-      (GdkGLProc_glDisableVertexAttribAPPLE) gdk_gl_get_proc_address ("glDisableVertexAttribAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glSecondaryColorFormatNV == (GdkGLProc_glSecondaryColorFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glSecondaryColorFormatNV =
+      (GdkGLProc_glSecondaryColorFormatNV) gdk_gl_get_proc_address ("glSecondaryColorFormatNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDisableVertexAttribAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glSecondaryColorFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glSecondaryColorFormatNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glDisableVertexAttribAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glSecondaryColorFormatNV);
 }
 
-/* glIsVertexAttribEnabledAPPLE */
+/* glFogCoordFormatNV */
 GdkGLProc
-gdk_gl_get_glIsVertexAttribEnabledAPPLE (void)
+gdk_gl_get_glFogCoordFormatNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE == (GdkGLProc_glIsVertexAttribEnabledAPPLE) -1)
-    _procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE =
-      (GdkGLProc_glIsVertexAttribEnabledAPPLE) gdk_gl_get_proc_address ("glIsVertexAttribEnabledAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glFogCoordFormatNV == (GdkGLProc_glFogCoordFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glFogCoordFormatNV =
+      (GdkGLProc_glFogCoordFormatNV) gdk_gl_get_proc_address ("glFogCoordFormatNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glIsVertexAttribEnabledAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glFogCoordFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glFogCoordFormatNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glIsVertexAttribEnabledAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glFogCoordFormatNV);
 }
 
-/* glMapVertexAttrib1dAPPLE */
+/* glVertexAttribFormatNV */
 GdkGLProc
-gdk_gl_get_glMapVertexAttrib1dAPPLE (void)
+gdk_gl_get_glVertexAttribFormatNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE == (GdkGLProc_glMapVertexAttrib1dAPPLE) -1)
-    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE =
-      (GdkGLProc_glMapVertexAttrib1dAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib1dAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribFormatNV == (GdkGLProc_glVertexAttribFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribFormatNV =
+      (GdkGLProc_glVertexAttribFormatNV) gdk_gl_get_proc_address ("glVertexAttribFormatNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapVertexAttrib1dAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribFormatNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1dAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribFormatNV);
 }
 
-/* glMapVertexAttrib1fAPPLE */
+/* glVertexAttribIFormatNV */
 GdkGLProc
-gdk_gl_get_glMapVertexAttrib1fAPPLE (void)
+gdk_gl_get_glVertexAttribIFormatNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE == (GdkGLProc_glMapVertexAttrib1fAPPLE) -1)
-    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE =
-      (GdkGLProc_glMapVertexAttrib1fAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib1fAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribIFormatNV == (GdkGLProc_glVertexAttribIFormatNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribIFormatNV =
+      (GdkGLProc_glVertexAttribIFormatNV) gdk_gl_get_proc_address ("glVertexAttribIFormatNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapVertexAttrib1fAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glVertexAttribIFormatNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribIFormatNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib1fAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glVertexAttribIFormatNV);
 }
 
-/* glMapVertexAttrib2dAPPLE */
+/* glGetIntegerui64i_vNV */
 GdkGLProc
-gdk_gl_get_glMapVertexAttrib2dAPPLE (void)
+gdk_gl_get_glGetIntegerui64i_vNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE == (GdkGLProc_glMapVertexAttrib2dAPPLE) -1)
-    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE =
-      (GdkGLProc_glMapVertexAttrib2dAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib2dAPPLE");
+  if (_procs_GL_NV_vertex_buffer_unified_memory.glGetIntegerui64i_vNV == (GdkGLProc_glGetIntegerui64i_vNV) -1)
+    _procs_GL_NV_vertex_buffer_unified_memory.glGetIntegerui64i_vNV =
+      (GdkGLProc_glGetIntegerui64i_vNV) gdk_gl_get_proc_address ("glGetIntegerui64i_vNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapVertexAttrib2dAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glGetIntegerui64i_vNV () - %s",
+               (_procs_GL_NV_vertex_buffer_unified_memory.glGetIntegerui64i_vNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2dAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_vertex_buffer_unified_memory.glGetIntegerui64i_vNV);
 }
 
-/* glMapVertexAttrib2fAPPLE */
+/* Get GL_NV_vertex_buffer_unified_memory functions */
+GdkGL_GL_NV_vertex_buffer_unified_memory *
+gdk_gl_get_GL_NV_vertex_buffer_unified_memory (void)
+{
+  static gint supported = -1;
+
+  if (gdk_gl_context_get_current () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_gl_query_gl_extension ("GL_NV_vertex_buffer_unified_memory");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glBufferAddressRangeNV () != NULL);
+          supported &= (gdk_gl_get_glVertexFormatNV () != NULL);
+          supported &= (gdk_gl_get_glNormalFormatNV () != NULL);
+          supported &= (gdk_gl_get_glColorFormatNV () != NULL);
+          supported &= (gdk_gl_get_glIndexFormatNV () != NULL);
+          supported &= (gdk_gl_get_glTexCoordFormatNV () != NULL);
+          supported &= (gdk_gl_get_glEdgeFlagFormatNV () != NULL);
+          supported &= (gdk_gl_get_glSecondaryColorFormatNV () != NULL);
+          supported &= (gdk_gl_get_glFogCoordFormatNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribFormatNV () != NULL);
+          supported &= (gdk_gl_get_glVertexAttribIFormatNV () != NULL);
+          supported &= (gdk_gl_get_glGetIntegerui64i_vNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GL_NV_vertex_buffer_unified_memory () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GL_NV_vertex_buffer_unified_memory;
+}
+
+/*
+ * GL_NV_texture_barrier
+ */
+
+static GdkGL_GL_NV_texture_barrier _procs_GL_NV_texture_barrier = {
+  (GdkGLProc_glTextureBarrierNV) -1
+};
+
+/* glTextureBarrierNV */
 GdkGLProc
-gdk_gl_get_glMapVertexAttrib2fAPPLE (void)
+gdk_gl_get_glTextureBarrierNV (void)
 {
   if (gdk_gl_context_get_current () == NULL)
     return NULL;
 
-  if (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE == (GdkGLProc_glMapVertexAttrib2fAPPLE) -1)
-    _procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE =
-      (GdkGLProc_glMapVertexAttrib2fAPPLE) gdk_gl_get_proc_address ("glMapVertexAttrib2fAPPLE");
+  if (_procs_GL_NV_texture_barrier.glTextureBarrierNV == (GdkGLProc_glTextureBarrierNV) -1)
+    _procs_GL_NV_texture_barrier.glTextureBarrierNV =
+      (GdkGLProc_glTextureBarrierNV) gdk_gl_get_proc_address ("glTextureBarrierNV");
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glMapVertexAttrib2fAPPLE () - %s",
-               (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE) ? "supported" : "not supported"));
+    g_message (" - gdk_gl_get_glTextureBarrierNV () - %s",
+               (_procs_GL_NV_texture_barrier.glTextureBarrierNV) ? "supported" : "not supported"));
 
-  return (GdkGLProc) (_procs_GL_APPLE_vertex_program_evaluators.glMapVertexAttrib2fAPPLE);
+  return (GdkGLProc) (_procs_GL_NV_texture_barrier.glTextureBarrierNV);
 }
 
-/* Get GL_APPLE_vertex_program_evaluators functions */
-GdkGL_GL_APPLE_vertex_program_evaluators *
-gdk_gl_get_GL_APPLE_vertex_program_evaluators (void)
+/* Get GL_NV_texture_barrier functions */
+GdkGL_GL_NV_texture_barrier *
+gdk_gl_get_GL_NV_texture_barrier (void)
 {
   static gint supported = -1;
 
@@ -21951,28 +38321,22 @@ gdk_gl_get_GL_APPLE_vertex_program_evaluators (void)
 
   if (supported == -1)
     {
-      supported = gdk_gl_query_gl_extension ("GL_APPLE_vertex_program_evaluators");
+      supported = gdk_gl_query_gl_extension ("GL_NV_texture_barrier");
 
       if (supported)
         {
-          supported &= (gdk_gl_get_glEnableVertexAttribAPPLE () != NULL);
-          supported &= (gdk_gl_get_glDisableVertexAttribAPPLE () != NULL);
-          supported &= (gdk_gl_get_glIsVertexAttribEnabledAPPLE () != NULL);
-          supported &= (gdk_gl_get_glMapVertexAttrib1dAPPLE () != NULL);
-          supported &= (gdk_gl_get_glMapVertexAttrib1fAPPLE () != NULL);
-          supported &= (gdk_gl_get_glMapVertexAttrib2dAPPLE () != NULL);
-          supported &= (gdk_gl_get_glMapVertexAttrib2fAPPLE () != NULL);
+          supported &= (gdk_gl_get_glTextureBarrierNV () != NULL);
         }
     }
 
   GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_APPLE_vertex_program_evaluators () - %s",
+    g_message (" - gdk_gl_get_GL_NV_texture_barrier () - %s",
                (supported) ? "supported" : "not supported"));
 
   if (!supported)
     return NULL;
 
-  return &_procs_GL_APPLE_vertex_program_evaluators;
+  return &_procs_GL_NV_texture_barrier;
 }
 
 /*
@@ -22415,61 +38779,6 @@ gdk_gl_get_GL_Autodesk_valid_back_buffer_hint (void)
   return &_procs_GL_Autodesk_valid_back_buffer_hint;
 }
 
-/*
- * GL_EXT_depth_bounds_test
- */
-
-static GdkGL_GL_EXT_depth_bounds_test _procs_GL_EXT_depth_bounds_test = {
-  (GdkGLProc_glDepthBoundsEXT) -1
-};
-
-/* glDepthBoundsEXT */
-GdkGLProc
-gdk_gl_get_glDepthBoundsEXT (void)
-{
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (_procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT == (GdkGLProc_glDepthBoundsEXT) -1)
-    _procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT =
-      (GdkGLProc_glDepthBoundsEXT) gdk_gl_get_proc_address ("glDepthBoundsEXT");
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_glDepthBoundsEXT () - %s",
-               (_procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT) ? "supported" : "not supported"));
-
-  return (GdkGLProc) (_procs_GL_EXT_depth_bounds_test.glDepthBoundsEXT);
-}
-
-/* Get GL_EXT_depth_bounds_test functions */
-GdkGL_GL_EXT_depth_bounds_test *
-gdk_gl_get_GL_EXT_depth_bounds_test (void)
-{
-  static gint supported = -1;
-
-  if (gdk_gl_context_get_current () == NULL)
-    return NULL;
-
-  if (supported == -1)
-    {
-      supported = gdk_gl_query_gl_extension ("GL_EXT_depth_bounds_test");
-
-      if (supported)
-        {
-          supported &= (gdk_gl_get_glDepthBoundsEXT () != NULL);
-        }
-    }
-
-  GDK_GL_NOTE (MISC,
-    g_message (" - gdk_gl_get_GL_EXT_depth_bounds_test () - %s",
-               (supported) ? "supported" : "not supported"));
-
-  if (!supported)
-    return NULL;
-
-  return &_procs_GL_EXT_depth_bounds_test;
-}
-
 /*
  * GL_EXT_fragment_lighting
  */
diff --git a/gdk/gdkglglext.h b/gdk/gdkglglext.h
index de569e6..63806c4 100644
--- a/gdk/gdkglglext.h
+++ b/gdk/gdkglglext.h
@@ -30,7 +30,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
+#endif
 
 #include <gdk/gdkgldefs.h>
 #include <gdk/gdkglquery.h>
@@ -58,242 +62,259 @@ typedef unsigned short GLhalfNV;
  */
 
 /* glBlendColor */
-typedef void (APIENTRY * GdkGLProc_glBlendColor) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+typedef void (APIENTRYP GdkGLProc_glBlendColor) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
 GdkGLProc    gdk_gl_get_glBlendColor (void);
 #define      gdk_gl_glBlendColor(proc, red, green, blue, alpha) \
   ( ((GdkGLProc_glBlendColor) (proc)) (red, green, blue, alpha) )
 
 /* glBlendEquation */
-typedef void (APIENTRY * GdkGLProc_glBlendEquation) (GLenum mode);
+typedef void (APIENTRYP GdkGLProc_glBlendEquation) (GLenum mode);
 GdkGLProc    gdk_gl_get_glBlendEquation (void);
 #define      gdk_gl_glBlendEquation(proc, mode) \
   ( ((GdkGLProc_glBlendEquation) (proc)) (mode) )
 
 /* glDrawRangeElements */
-typedef void (APIENTRY * GdkGLProc_glDrawRangeElements) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+typedef void (APIENTRYP GdkGLProc_glDrawRangeElements) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
 GdkGLProc    gdk_gl_get_glDrawRangeElements (void);
 #define      gdk_gl_glDrawRangeElements(proc, mode, start, end, count, type, indices) \
   ( ((GdkGLProc_glDrawRangeElements) (proc)) (mode, start, end, count, type, indices) )
 
+/* glTexImage3D */
+typedef void (APIENTRYP GdkGLProc_glTexImage3D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexImage3D (void);
+#define      gdk_gl_glTexImage3D(proc, target, level, internalformat, width, height, depth, border, format, type, pixels) \
+  ( ((GdkGLProc_glTexImage3D) (proc)) (target, level, internalformat, width, height, depth, border, format, type, pixels) )
+
+/* glTexSubImage3D */
+typedef void (APIENTRYP GdkGLProc_glTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexSubImage3D (void);
+#define      gdk_gl_glTexSubImage3D(proc, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) \
+  ( ((GdkGLProc_glTexSubImage3D) (proc)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) )
+
+/* glCopyTexSubImage3D */
+typedef void (APIENTRYP GdkGLProc_glCopyTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyTexSubImage3D (void);
+#define      gdk_gl_glCopyTexSubImage3D(proc, target, level, xoffset, yoffset, zoffset, x, y, width, height) \
+  ( ((GdkGLProc_glCopyTexSubImage3D) (proc)) (target, level, xoffset, yoffset, zoffset, x, y, width, height) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_1_2 GdkGL_GL_VERSION_1_2;
+
+struct _GdkGL_GL_VERSION_1_2
+{
+  GdkGLProc_glBlendColor glBlendColor;
+  GdkGLProc_glBlendEquation glBlendEquation;
+  GdkGLProc_glDrawRangeElements glDrawRangeElements;
+  GdkGLProc_glTexImage3D glTexImage3D;
+  GdkGLProc_glTexSubImage3D glTexSubImage3D;
+  GdkGLProc_glCopyTexSubImage3D glCopyTexSubImage3D;
+};
+
+GdkGL_GL_VERSION_1_2 *gdk_gl_get_GL_VERSION_1_2 (void);
+
+/*
+ * GL_VERSION_1_2_DEPRECATED
+ */
+
 /* glColorTable */
-typedef void (APIENTRY * GdkGLProc_glColorTable) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+typedef void (APIENTRYP GdkGLProc_glColorTable) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
 GdkGLProc    gdk_gl_get_glColorTable (void);
 #define      gdk_gl_glColorTable(proc, target, internalformat, width, format, type, table) \
   ( ((GdkGLProc_glColorTable) (proc)) (target, internalformat, width, format, type, table) )
 
 /* glColorTableParameterfv */
-typedef void (APIENTRY * GdkGLProc_glColorTableParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glColorTableParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
 GdkGLProc    gdk_gl_get_glColorTableParameterfv (void);
 #define      gdk_gl_glColorTableParameterfv(proc, target, pname, params) \
   ( ((GdkGLProc_glColorTableParameterfv) (proc)) (target, pname, params) )
 
 /* glColorTableParameteriv */
-typedef void (APIENTRY * GdkGLProc_glColorTableParameteriv) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP GdkGLProc_glColorTableParameteriv) (GLenum target, GLenum pname, const GLint *params);
 GdkGLProc    gdk_gl_get_glColorTableParameteriv (void);
 #define      gdk_gl_glColorTableParameteriv(proc, target, pname, params) \
   ( ((GdkGLProc_glColorTableParameteriv) (proc)) (target, pname, params) )
 
 /* glCopyColorTable */
-typedef void (APIENTRY * GdkGLProc_glCopyColorTable) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP GdkGLProc_glCopyColorTable) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
 GdkGLProc    gdk_gl_get_glCopyColorTable (void);
 #define      gdk_gl_glCopyColorTable(proc, target, internalformat, x, y, width) \
   ( ((GdkGLProc_glCopyColorTable) (proc)) (target, internalformat, x, y, width) )
 
 /* glGetColorTable */
-typedef void (APIENTRY * GdkGLProc_glGetColorTable) (GLenum target, GLenum format, GLenum type, GLvoid *table);
+typedef void (APIENTRYP GdkGLProc_glGetColorTable) (GLenum target, GLenum format, GLenum type, GLvoid *table);
 GdkGLProc    gdk_gl_get_glGetColorTable (void);
 #define      gdk_gl_glGetColorTable(proc, target, format, type, table) \
   ( ((GdkGLProc_glGetColorTable) (proc)) (target, format, type, table) )
 
 /* glGetColorTableParameterfv */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableParameterfv) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glGetColorTableParameterfv) (GLenum target, GLenum pname, GLfloat *params);
 GdkGLProc    gdk_gl_get_glGetColorTableParameterfv (void);
 #define      gdk_gl_glGetColorTableParameterfv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetColorTableParameterfv) (proc)) (target, pname, params) )
 
 /* glGetColorTableParameteriv */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableParameteriv) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP GdkGLProc_glGetColorTableParameteriv) (GLenum target, GLenum pname, GLint *params);
 GdkGLProc    gdk_gl_get_glGetColorTableParameteriv (void);
 #define      gdk_gl_glGetColorTableParameteriv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetColorTableParameteriv) (proc)) (target, pname, params) )
 
 /* glColorSubTable */
-typedef void (APIENTRY * GdkGLProc_glColorSubTable) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glColorSubTable) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glColorSubTable (void);
 #define      gdk_gl_glColorSubTable(proc, target, start, count, format, type, data) \
   ( ((GdkGLProc_glColorSubTable) (proc)) (target, start, count, format, type, data) )
 
 /* glCopyColorSubTable */
-typedef void (APIENTRY * GdkGLProc_glCopyColorSubTable) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP GdkGLProc_glCopyColorSubTable) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
 GdkGLProc    gdk_gl_get_glCopyColorSubTable (void);
 #define      gdk_gl_glCopyColorSubTable(proc, target, start, x, y, width) \
   ( ((GdkGLProc_glCopyColorSubTable) (proc)) (target, start, x, y, width) )
 
 /* glConvolutionFilter1D */
-typedef void (APIENTRY * GdkGLProc_glConvolutionFilter1D) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
+typedef void (APIENTRYP GdkGLProc_glConvolutionFilter1D) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
 GdkGLProc    gdk_gl_get_glConvolutionFilter1D (void);
 #define      gdk_gl_glConvolutionFilter1D(proc, target, internalformat, width, format, type, image) \
   ( ((GdkGLProc_glConvolutionFilter1D) (proc)) (target, internalformat, width, format, type, image) )
 
 /* glConvolutionFilter2D */
-typedef void (APIENTRY * GdkGLProc_glConvolutionFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
+typedef void (APIENTRYP GdkGLProc_glConvolutionFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
 GdkGLProc    gdk_gl_get_glConvolutionFilter2D (void);
 #define      gdk_gl_glConvolutionFilter2D(proc, target, internalformat, width, height, format, type, image) \
   ( ((GdkGLProc_glConvolutionFilter2D) (proc)) (target, internalformat, width, height, format, type, image) )
 
 /* glConvolutionParameterf */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameterf) (GLenum target, GLenum pname, GLfloat params);
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameterf) (GLenum target, GLenum pname, GLfloat params);
 GdkGLProc    gdk_gl_get_glConvolutionParameterf (void);
 #define      gdk_gl_glConvolutionParameterf(proc, target, pname, params) \
   ( ((GdkGLProc_glConvolutionParameterf) (proc)) (target, pname, params) )
 
 /* glConvolutionParameterfv */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
 GdkGLProc    gdk_gl_get_glConvolutionParameterfv (void);
 #define      gdk_gl_glConvolutionParameterfv(proc, target, pname, params) \
   ( ((GdkGLProc_glConvolutionParameterfv) (proc)) (target, pname, params) )
 
 /* glConvolutionParameteri */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameteri) (GLenum target, GLenum pname, GLint params);
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameteri) (GLenum target, GLenum pname, GLint params);
 GdkGLProc    gdk_gl_get_glConvolutionParameteri (void);
 #define      gdk_gl_glConvolutionParameteri(proc, target, pname, params) \
   ( ((GdkGLProc_glConvolutionParameteri) (proc)) (target, pname, params) )
 
 /* glConvolutionParameteriv */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameteriv) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameteriv) (GLenum target, GLenum pname, const GLint *params);
 GdkGLProc    gdk_gl_get_glConvolutionParameteriv (void);
 #define      gdk_gl_glConvolutionParameteriv(proc, target, pname, params) \
   ( ((GdkGLProc_glConvolutionParameteriv) (proc)) (target, pname, params) )
 
 /* glCopyConvolutionFilter1D */
-typedef void (APIENTRY * GdkGLProc_glCopyConvolutionFilter1D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP GdkGLProc_glCopyConvolutionFilter1D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
 GdkGLProc    gdk_gl_get_glCopyConvolutionFilter1D (void);
 #define      gdk_gl_glCopyConvolutionFilter1D(proc, target, internalformat, x, y, width) \
   ( ((GdkGLProc_glCopyConvolutionFilter1D) (proc)) (target, internalformat, x, y, width) )
 
 /* glCopyConvolutionFilter2D */
-typedef void (APIENTRY * GdkGLProc_glCopyConvolutionFilter2D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP GdkGLProc_glCopyConvolutionFilter2D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
 GdkGLProc    gdk_gl_get_glCopyConvolutionFilter2D (void);
 #define      gdk_gl_glCopyConvolutionFilter2D(proc, target, internalformat, x, y, width, height) \
   ( ((GdkGLProc_glCopyConvolutionFilter2D) (proc)) (target, internalformat, x, y, width, height) )
 
 /* glGetConvolutionFilter */
-typedef void (APIENTRY * GdkGLProc_glGetConvolutionFilter) (GLenum target, GLenum format, GLenum type, GLvoid *image);
+typedef void (APIENTRYP GdkGLProc_glGetConvolutionFilter) (GLenum target, GLenum format, GLenum type, GLvoid *image);
 GdkGLProc    gdk_gl_get_glGetConvolutionFilter (void);
 #define      gdk_gl_glGetConvolutionFilter(proc, target, format, type, image) \
   ( ((GdkGLProc_glGetConvolutionFilter) (proc)) (target, format, type, image) )
 
 /* glGetConvolutionParameterfv */
-typedef void (APIENTRY * GdkGLProc_glGetConvolutionParameterfv) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glGetConvolutionParameterfv) (GLenum target, GLenum pname, GLfloat *params);
 GdkGLProc    gdk_gl_get_glGetConvolutionParameterfv (void);
 #define      gdk_gl_glGetConvolutionParameterfv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetConvolutionParameterfv) (proc)) (target, pname, params) )
 
 /* glGetConvolutionParameteriv */
-typedef void (APIENTRY * GdkGLProc_glGetConvolutionParameteriv) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP GdkGLProc_glGetConvolutionParameteriv) (GLenum target, GLenum pname, GLint *params);
 GdkGLProc    gdk_gl_get_glGetConvolutionParameteriv (void);
 #define      gdk_gl_glGetConvolutionParameteriv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetConvolutionParameteriv) (proc)) (target, pname, params) )
 
 /* glGetSeparableFilter */
-typedef void (APIENTRY * GdkGLProc_glGetSeparableFilter) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
+typedef void (APIENTRYP GdkGLProc_glGetSeparableFilter) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
 GdkGLProc    gdk_gl_get_glGetSeparableFilter (void);
 #define      gdk_gl_glGetSeparableFilter(proc, target, format, type, row, column, span) \
   ( ((GdkGLProc_glGetSeparableFilter) (proc)) (target, format, type, row, column, span) )
 
 /* glSeparableFilter2D */
-typedef void (APIENTRY * GdkGLProc_glSeparableFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
+typedef void (APIENTRYP GdkGLProc_glSeparableFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
 GdkGLProc    gdk_gl_get_glSeparableFilter2D (void);
 #define      gdk_gl_glSeparableFilter2D(proc, target, internalformat, width, height, format, type, row, column) \
   ( ((GdkGLProc_glSeparableFilter2D) (proc)) (target, internalformat, width, height, format, type, row, column) )
 
 /* glGetHistogram */
-typedef void (APIENTRY * GdkGLProc_glGetHistogram) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+typedef void (APIENTRYP GdkGLProc_glGetHistogram) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
 GdkGLProc    gdk_gl_get_glGetHistogram (void);
 #define      gdk_gl_glGetHistogram(proc, target, reset, format, type, values) \
   ( ((GdkGLProc_glGetHistogram) (proc)) (target, reset, format, type, values) )
 
 /* glGetHistogramParameterfv */
-typedef void (APIENTRY * GdkGLProc_glGetHistogramParameterfv) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glGetHistogramParameterfv) (GLenum target, GLenum pname, GLfloat *params);
 GdkGLProc    gdk_gl_get_glGetHistogramParameterfv (void);
 #define      gdk_gl_glGetHistogramParameterfv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetHistogramParameterfv) (proc)) (target, pname, params) )
 
 /* glGetHistogramParameteriv */
-typedef void (APIENTRY * GdkGLProc_glGetHistogramParameteriv) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP GdkGLProc_glGetHistogramParameteriv) (GLenum target, GLenum pname, GLint *params);
 GdkGLProc    gdk_gl_get_glGetHistogramParameteriv (void);
 #define      gdk_gl_glGetHistogramParameteriv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetHistogramParameteriv) (proc)) (target, pname, params) )
 
 /* glGetMinmax */
-typedef void (APIENTRY * GdkGLProc_glGetMinmax) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+typedef void (APIENTRYP GdkGLProc_glGetMinmax) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
 GdkGLProc    gdk_gl_get_glGetMinmax (void);
 #define      gdk_gl_glGetMinmax(proc, target, reset, format, type, values) \
   ( ((GdkGLProc_glGetMinmax) (proc)) (target, reset, format, type, values) )
 
 /* glGetMinmaxParameterfv */
-typedef void (APIENTRY * GdkGLProc_glGetMinmaxParameterfv) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glGetMinmaxParameterfv) (GLenum target, GLenum pname, GLfloat *params);
 GdkGLProc    gdk_gl_get_glGetMinmaxParameterfv (void);
 #define      gdk_gl_glGetMinmaxParameterfv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetMinmaxParameterfv) (proc)) (target, pname, params) )
 
 /* glGetMinmaxParameteriv */
-typedef void (APIENTRY * GdkGLProc_glGetMinmaxParameteriv) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP GdkGLProc_glGetMinmaxParameteriv) (GLenum target, GLenum pname, GLint *params);
 GdkGLProc    gdk_gl_get_glGetMinmaxParameteriv (void);
 #define      gdk_gl_glGetMinmaxParameteriv(proc, target, pname, params) \
   ( ((GdkGLProc_glGetMinmaxParameteriv) (proc)) (target, pname, params) )
 
 /* glHistogram */
-typedef void (APIENTRY * GdkGLProc_glHistogram) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+typedef void (APIENTRYP GdkGLProc_glHistogram) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
 GdkGLProc    gdk_gl_get_glHistogram (void);
 #define      gdk_gl_glHistogram(proc, target, width, internalformat, sink) \
   ( ((GdkGLProc_glHistogram) (proc)) (target, width, internalformat, sink) )
 
 /* glMinmax */
-typedef void (APIENTRY * GdkGLProc_glMinmax) (GLenum target, GLenum internalformat, GLboolean sink);
+typedef void (APIENTRYP GdkGLProc_glMinmax) (GLenum target, GLenum internalformat, GLboolean sink);
 GdkGLProc    gdk_gl_get_glMinmax (void);
 #define      gdk_gl_glMinmax(proc, target, internalformat, sink) \
   ( ((GdkGLProc_glMinmax) (proc)) (target, internalformat, sink) )
 
 /* glResetHistogram */
-typedef void (APIENTRY * GdkGLProc_glResetHistogram) (GLenum target);
+typedef void (APIENTRYP GdkGLProc_glResetHistogram) (GLenum target);
 GdkGLProc    gdk_gl_get_glResetHistogram (void);
 #define      gdk_gl_glResetHistogram(proc, target) \
   ( ((GdkGLProc_glResetHistogram) (proc)) (target) )
 
 /* glResetMinmax */
-typedef void (APIENTRY * GdkGLProc_glResetMinmax) (GLenum target);
+typedef void (APIENTRYP GdkGLProc_glResetMinmax) (GLenum target);
 GdkGLProc    gdk_gl_get_glResetMinmax (void);
 #define      gdk_gl_glResetMinmax(proc, target) \
   ( ((GdkGLProc_glResetMinmax) (proc)) (target) )
 
-/* glTexImage3D */
-typedef void (APIENTRY * GdkGLProc_glTexImage3D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexImage3D (void);
-#define      gdk_gl_glTexImage3D(proc, target, level, internalformat, width, height, depth, border, format, type, pixels) \
-  ( ((GdkGLProc_glTexImage3D) (proc)) (target, level, internalformat, width, height, depth, border, format, type, pixels) )
-
-/* glTexSubImage3D */
-typedef void (APIENTRY * GdkGLProc_glTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexSubImage3D (void);
-#define      gdk_gl_glTexSubImage3D(proc, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) \
-  ( ((GdkGLProc_glTexSubImage3D) (proc)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) )
-
-/* glCopyTexSubImage3D */
-typedef void (APIENTRY * GdkGLProc_glCopyTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-GdkGLProc    gdk_gl_get_glCopyTexSubImage3D (void);
-#define      gdk_gl_glCopyTexSubImage3D(proc, target, level, xoffset, yoffset, zoffset, x, y, width, height) \
-  ( ((GdkGLProc_glCopyTexSubImage3D) (proc)) (target, level, xoffset, yoffset, zoffset, x, y, width, height) )
-
 /* proc struct */
 
-typedef struct _GdkGL_GL_VERSION_1_2 GdkGL_GL_VERSION_1_2;
+typedef struct _GdkGL_GL_VERSION_1_2_DEPRECATED GdkGL_GL_VERSION_1_2_DEPRECATED;
 
-struct _GdkGL_GL_VERSION_1_2
+struct _GdkGL_GL_VERSION_1_2_DEPRECATED
 {
-  GdkGLProc_glBlendColor glBlendColor;
-  GdkGLProc_glBlendEquation glBlendEquation;
-  GdkGLProc_glDrawRangeElements glDrawRangeElements;
   GdkGLProc_glColorTable glColorTable;
   GdkGLProc_glColorTableParameterfv glColorTableParameterfv;
   GdkGLProc_glColorTableParameteriv glColorTableParameteriv;
@@ -326,300 +347,319 @@ struct _GdkGL_GL_VERSION_1_2
   GdkGLProc_glMinmax glMinmax;
   GdkGLProc_glResetHistogram glResetHistogram;
   GdkGLProc_glResetMinmax glResetMinmax;
-  GdkGLProc_glTexImage3D glTexImage3D;
-  GdkGLProc_glTexSubImage3D glTexSubImage3D;
-  GdkGLProc_glCopyTexSubImage3D glCopyTexSubImage3D;
 };
 
-GdkGL_GL_VERSION_1_2 *gdk_gl_get_GL_VERSION_1_2 (void);
+GdkGL_GL_VERSION_1_2_DEPRECATED *gdk_gl_get_GL_VERSION_1_2_DEPRECATED (void);
 
 /*
  * GL_VERSION_1_3
  */
 
 /* glActiveTexture */
-typedef void (APIENTRY * GdkGLProc_glActiveTexture) (GLenum texture);
+typedef void (APIENTRYP GdkGLProc_glActiveTexture) (GLenum texture);
 GdkGLProc    gdk_gl_get_glActiveTexture (void);
 #define      gdk_gl_glActiveTexture(proc, texture) \
   ( ((GdkGLProc_glActiveTexture) (proc)) (texture) )
 
+/* glSampleCoverage */
+typedef void (APIENTRYP GdkGLProc_glSampleCoverage) (GLclampf value, GLboolean invert);
+GdkGLProc    gdk_gl_get_glSampleCoverage (void);
+#define      gdk_gl_glSampleCoverage(proc, value, invert) \
+  ( ((GdkGLProc_glSampleCoverage) (proc)) (value, invert) )
+
+/* glCompressedTexImage3D */
+typedef void (APIENTRYP GdkGLProc_glCompressedTexImage3D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glCompressedTexImage3D (void);
+#define      gdk_gl_glCompressedTexImage3D(proc, target, level, internalformat, width, height, depth, border, imageSize, data) \
+  ( ((GdkGLProc_glCompressedTexImage3D) (proc)) (target, level, internalformat, width, height, depth, border, imageSize, data) )
+
+/* glCompressedTexImage2D */
+typedef void (APIENTRYP GdkGLProc_glCompressedTexImage2D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glCompressedTexImage2D (void);
+#define      gdk_gl_glCompressedTexImage2D(proc, target, level, internalformat, width, height, border, imageSize, data) \
+  ( ((GdkGLProc_glCompressedTexImage2D) (proc)) (target, level, internalformat, width, height, border, imageSize, data) )
+
+/* glCompressedTexImage1D */
+typedef void (APIENTRYP GdkGLProc_glCompressedTexImage1D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glCompressedTexImage1D (void);
+#define      gdk_gl_glCompressedTexImage1D(proc, target, level, internalformat, width, border, imageSize, data) \
+  ( ((GdkGLProc_glCompressedTexImage1D) (proc)) (target, level, internalformat, width, border, imageSize, data) )
+
+/* glCompressedTexSubImage3D */
+typedef void (APIENTRYP GdkGLProc_glCompressedTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glCompressedTexSubImage3D (void);
+#define      gdk_gl_glCompressedTexSubImage3D(proc, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) \
+  ( ((GdkGLProc_glCompressedTexSubImage3D) (proc)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) )
+
+/* glCompressedTexSubImage2D */
+typedef void (APIENTRYP GdkGLProc_glCompressedTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glCompressedTexSubImage2D (void);
+#define      gdk_gl_glCompressedTexSubImage2D(proc, target, level, xoffset, yoffset, width, height, format, imageSize, data) \
+  ( ((GdkGLProc_glCompressedTexSubImage2D) (proc)) (target, level, xoffset, yoffset, width, height, format, imageSize, data) )
+
+/* glCompressedTexSubImage1D */
+typedef void (APIENTRYP GdkGLProc_glCompressedTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glCompressedTexSubImage1D (void);
+#define      gdk_gl_glCompressedTexSubImage1D(proc, target, level, xoffset, width, format, imageSize, data) \
+  ( ((GdkGLProc_glCompressedTexSubImage1D) (proc)) (target, level, xoffset, width, format, imageSize, data) )
+
+/* glGetCompressedTexImage */
+typedef void (APIENTRYP GdkGLProc_glGetCompressedTexImage) (GLenum target, GLint level, GLvoid *img);
+GdkGLProc    gdk_gl_get_glGetCompressedTexImage (void);
+#define      gdk_gl_glGetCompressedTexImage(proc, target, level, img) \
+  ( ((GdkGLProc_glGetCompressedTexImage) (proc)) (target, level, img) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_1_3 GdkGL_GL_VERSION_1_3;
+
+struct _GdkGL_GL_VERSION_1_3
+{
+  GdkGLProc_glActiveTexture glActiveTexture;
+  GdkGLProc_glSampleCoverage glSampleCoverage;
+  GdkGLProc_glCompressedTexImage3D glCompressedTexImage3D;
+  GdkGLProc_glCompressedTexImage2D glCompressedTexImage2D;
+  GdkGLProc_glCompressedTexImage1D glCompressedTexImage1D;
+  GdkGLProc_glCompressedTexSubImage3D glCompressedTexSubImage3D;
+  GdkGLProc_glCompressedTexSubImage2D glCompressedTexSubImage2D;
+  GdkGLProc_glCompressedTexSubImage1D glCompressedTexSubImage1D;
+  GdkGLProc_glGetCompressedTexImage glGetCompressedTexImage;
+};
+
+GdkGL_GL_VERSION_1_3 *gdk_gl_get_GL_VERSION_1_3 (void);
+
+/*
+ * GL_VERSION_1_3_DEPRECATED
+ */
+
 /* glClientActiveTexture */
-typedef void (APIENTRY * GdkGLProc_glClientActiveTexture) (GLenum texture);
+typedef void (APIENTRYP GdkGLProc_glClientActiveTexture) (GLenum texture);
 GdkGLProc    gdk_gl_get_glClientActiveTexture (void);
 #define      gdk_gl_glClientActiveTexture(proc, texture) \
   ( ((GdkGLProc_glClientActiveTexture) (proc)) (texture) )
 
 /* glMultiTexCoord1d */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1d) (GLenum target, GLdouble s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1d) (GLenum target, GLdouble s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1d (void);
 #define      gdk_gl_glMultiTexCoord1d(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1d) (proc)) (target, s) )
 
 /* glMultiTexCoord1dv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1dv) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1dv) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1dv (void);
 #define      gdk_gl_glMultiTexCoord1dv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1dv) (proc)) (target, v) )
 
 /* glMultiTexCoord1f */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1f) (GLenum target, GLfloat s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1f) (GLenum target, GLfloat s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1f (void);
 #define      gdk_gl_glMultiTexCoord1f(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1f) (proc)) (target, s) )
 
 /* glMultiTexCoord1fv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1fv) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1fv) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1fv (void);
 #define      gdk_gl_glMultiTexCoord1fv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1fv) (proc)) (target, v) )
 
 /* glMultiTexCoord1i */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1i) (GLenum target, GLint s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1i) (GLenum target, GLint s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1i (void);
 #define      gdk_gl_glMultiTexCoord1i(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1i) (proc)) (target, s) )
 
 /* glMultiTexCoord1iv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1iv) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1iv) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1iv (void);
 #define      gdk_gl_glMultiTexCoord1iv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1iv) (proc)) (target, v) )
 
 /* glMultiTexCoord1s */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1s) (GLenum target, GLshort s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1s) (GLenum target, GLshort s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1s (void);
 #define      gdk_gl_glMultiTexCoord1s(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1s) (proc)) (target, s) )
 
 /* glMultiTexCoord1sv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1sv) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1sv) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1sv (void);
 #define      gdk_gl_glMultiTexCoord1sv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1sv) (proc)) (target, v) )
 
 /* glMultiTexCoord2d */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2d) (GLenum target, GLdouble s, GLdouble t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2d) (GLenum target, GLdouble s, GLdouble t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2d (void);
 #define      gdk_gl_glMultiTexCoord2d(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2d) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2dv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2dv) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2dv) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2dv (void);
 #define      gdk_gl_glMultiTexCoord2dv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2dv) (proc)) (target, v) )
 
 /* glMultiTexCoord2f */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2f) (GLenum target, GLfloat s, GLfloat t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2f) (GLenum target, GLfloat s, GLfloat t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2f (void);
 #define      gdk_gl_glMultiTexCoord2f(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2f) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2fv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2fv) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2fv) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2fv (void);
 #define      gdk_gl_glMultiTexCoord2fv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2fv) (proc)) (target, v) )
 
 /* glMultiTexCoord2i */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2i) (GLenum target, GLint s, GLint t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2i) (GLenum target, GLint s, GLint t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2i (void);
 #define      gdk_gl_glMultiTexCoord2i(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2i) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2iv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2iv) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2iv) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2iv (void);
 #define      gdk_gl_glMultiTexCoord2iv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2iv) (proc)) (target, v) )
 
 /* glMultiTexCoord2s */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2s) (GLenum target, GLshort s, GLshort t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2s) (GLenum target, GLshort s, GLshort t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2s (void);
 #define      gdk_gl_glMultiTexCoord2s(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2s) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2sv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2sv) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2sv) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2sv (void);
 #define      gdk_gl_glMultiTexCoord2sv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2sv) (proc)) (target, v) )
 
 /* glMultiTexCoord3d */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3d) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3d) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3d (void);
 #define      gdk_gl_glMultiTexCoord3d(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3d) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3dv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3dv) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3dv) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3dv (void);
 #define      gdk_gl_glMultiTexCoord3dv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3dv) (proc)) (target, v) )
 
 /* glMultiTexCoord3f */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3f) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3f) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3f (void);
 #define      gdk_gl_glMultiTexCoord3f(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3f) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3fv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3fv) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3fv) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3fv (void);
 #define      gdk_gl_glMultiTexCoord3fv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3fv) (proc)) (target, v) )
 
 /* glMultiTexCoord3i */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3i) (GLenum target, GLint s, GLint t, GLint r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3i) (GLenum target, GLint s, GLint t, GLint r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3i (void);
 #define      gdk_gl_glMultiTexCoord3i(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3i) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3iv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3iv) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3iv) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3iv (void);
 #define      gdk_gl_glMultiTexCoord3iv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3iv) (proc)) (target, v) )
 
 /* glMultiTexCoord3s */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3s) (GLenum target, GLshort s, GLshort t, GLshort r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3s) (GLenum target, GLshort s, GLshort t, GLshort r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3s (void);
 #define      gdk_gl_glMultiTexCoord3s(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3s) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3sv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3sv) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3sv) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3sv (void);
 #define      gdk_gl_glMultiTexCoord3sv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3sv) (proc)) (target, v) )
 
 /* glMultiTexCoord4d */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4d) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4d) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4d (void);
 #define      gdk_gl_glMultiTexCoord4d(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4d) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4dv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4dv) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4dv) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4dv (void);
 #define      gdk_gl_glMultiTexCoord4dv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4dv) (proc)) (target, v) )
 
 /* glMultiTexCoord4f */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4f) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4f) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4f (void);
 #define      gdk_gl_glMultiTexCoord4f(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4f) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4fv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4fv) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4fv) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4fv (void);
 #define      gdk_gl_glMultiTexCoord4fv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4fv) (proc)) (target, v) )
 
 /* glMultiTexCoord4i */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4i) (GLenum target, GLint s, GLint t, GLint r, GLint q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4i) (GLenum target, GLint s, GLint t, GLint r, GLint q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4i (void);
 #define      gdk_gl_glMultiTexCoord4i(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4i) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4iv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4iv) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4iv) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4iv (void);
 #define      gdk_gl_glMultiTexCoord4iv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4iv) (proc)) (target, v) )
 
 /* glMultiTexCoord4s */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4s) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4s) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4s (void);
 #define      gdk_gl_glMultiTexCoord4s(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4s) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4sv */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4sv) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4sv) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4sv (void);
 #define      gdk_gl_glMultiTexCoord4sv(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4sv) (proc)) (target, v) )
 
 /* glLoadTransposeMatrixf */
-typedef void (APIENTRY * GdkGLProc_glLoadTransposeMatrixf) (const GLfloat *m);
+typedef void (APIENTRYP GdkGLProc_glLoadTransposeMatrixf) (const GLfloat *m);
 GdkGLProc    gdk_gl_get_glLoadTransposeMatrixf (void);
 #define      gdk_gl_glLoadTransposeMatrixf(proc, m) \
   ( ((GdkGLProc_glLoadTransposeMatrixf) (proc)) (m) )
 
 /* glLoadTransposeMatrixd */
-typedef void (APIENTRY * GdkGLProc_glLoadTransposeMatrixd) (const GLdouble *m);
+typedef void (APIENTRYP GdkGLProc_glLoadTransposeMatrixd) (const GLdouble *m);
 GdkGLProc    gdk_gl_get_glLoadTransposeMatrixd (void);
 #define      gdk_gl_glLoadTransposeMatrixd(proc, m) \
   ( ((GdkGLProc_glLoadTransposeMatrixd) (proc)) (m) )
 
 /* glMultTransposeMatrixf */
-typedef void (APIENTRY * GdkGLProc_glMultTransposeMatrixf) (const GLfloat *m);
+typedef void (APIENTRYP GdkGLProc_glMultTransposeMatrixf) (const GLfloat *m);
 GdkGLProc    gdk_gl_get_glMultTransposeMatrixf (void);
 #define      gdk_gl_glMultTransposeMatrixf(proc, m) \
   ( ((GdkGLProc_glMultTransposeMatrixf) (proc)) (m) )
 
 /* glMultTransposeMatrixd */
-typedef void (APIENTRY * GdkGLProc_glMultTransposeMatrixd) (const GLdouble *m);
+typedef void (APIENTRYP GdkGLProc_glMultTransposeMatrixd) (const GLdouble *m);
 GdkGLProc    gdk_gl_get_glMultTransposeMatrixd (void);
 #define      gdk_gl_glMultTransposeMatrixd(proc, m) \
   ( ((GdkGLProc_glMultTransposeMatrixd) (proc)) (m) )
 
-/* glSampleCoverage */
-typedef void (APIENTRY * GdkGLProc_glSampleCoverage) (GLclampf value, GLboolean invert);
-GdkGLProc    gdk_gl_get_glSampleCoverage (void);
-#define      gdk_gl_glSampleCoverage(proc, value, invert) \
-  ( ((GdkGLProc_glSampleCoverage) (proc)) (value, invert) )
-
-/* glCompressedTexImage3D */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexImage3D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
-GdkGLProc    gdk_gl_get_glCompressedTexImage3D (void);
-#define      gdk_gl_glCompressedTexImage3D(proc, target, level, internalformat, width, height, depth, border, imageSize, data) \
-  ( ((GdkGLProc_glCompressedTexImage3D) (proc)) (target, level, internalformat, width, height, depth, border, imageSize, data) )
-
-/* glCompressedTexImage2D */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexImage2D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
-GdkGLProc    gdk_gl_get_glCompressedTexImage2D (void);
-#define      gdk_gl_glCompressedTexImage2D(proc, target, level, internalformat, width, height, border, imageSize, data) \
-  ( ((GdkGLProc_glCompressedTexImage2D) (proc)) (target, level, internalformat, width, height, border, imageSize, data) )
-
-/* glCompressedTexImage1D */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexImage1D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
-GdkGLProc    gdk_gl_get_glCompressedTexImage1D (void);
-#define      gdk_gl_glCompressedTexImage1D(proc, target, level, internalformat, width, border, imageSize, data) \
-  ( ((GdkGLProc_glCompressedTexImage1D) (proc)) (target, level, internalformat, width, border, imageSize, data) )
-
-/* glCompressedTexSubImage3D */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
-GdkGLProc    gdk_gl_get_glCompressedTexSubImage3D (void);
-#define      gdk_gl_glCompressedTexSubImage3D(proc, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) \
-  ( ((GdkGLProc_glCompressedTexSubImage3D) (proc)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) )
-
-/* glCompressedTexSubImage2D */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
-GdkGLProc    gdk_gl_get_glCompressedTexSubImage2D (void);
-#define      gdk_gl_glCompressedTexSubImage2D(proc, target, level, xoffset, yoffset, width, height, format, imageSize, data) \
-  ( ((GdkGLProc_glCompressedTexSubImage2D) (proc)) (target, level, xoffset, yoffset, width, height, format, imageSize, data) )
-
-/* glCompressedTexSubImage1D */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
-GdkGLProc    gdk_gl_get_glCompressedTexSubImage1D (void);
-#define      gdk_gl_glCompressedTexSubImage1D(proc, target, level, xoffset, width, format, imageSize, data) \
-  ( ((GdkGLProc_glCompressedTexSubImage1D) (proc)) (target, level, xoffset, width, format, imageSize, data) )
-
-/* glGetCompressedTexImage */
-typedef void (APIENTRY * GdkGLProc_glGetCompressedTexImage) (GLenum target, GLint level, GLvoid *img);
-GdkGLProc    gdk_gl_get_glGetCompressedTexImage (void);
-#define      gdk_gl_glGetCompressedTexImage(proc, target, level, img) \
-  ( ((GdkGLProc_glGetCompressedTexImage) (proc)) (target, level, img) )
-
 /* proc struct */
 
-typedef struct _GdkGL_GL_VERSION_1_3 GdkGL_GL_VERSION_1_3;
+typedef struct _GdkGL_GL_VERSION_1_3_DEPRECATED GdkGL_GL_VERSION_1_3_DEPRECATED;
 
-struct _GdkGL_GL_VERSION_1_3
+struct _GdkGL_GL_VERSION_1_3_DEPRECATED
 {
-  GdkGLProc_glActiveTexture glActiveTexture;
   GdkGLProc_glClientActiveTexture glClientActiveTexture;
   GdkGLProc_glMultiTexCoord1d glMultiTexCoord1d;
   GdkGLProc_glMultiTexCoord1dv glMultiTexCoord1dv;
@@ -657,310 +697,316 @@ struct _GdkGL_GL_VERSION_1_3
   GdkGLProc_glLoadTransposeMatrixd glLoadTransposeMatrixd;
   GdkGLProc_glMultTransposeMatrixf glMultTransposeMatrixf;
   GdkGLProc_glMultTransposeMatrixd glMultTransposeMatrixd;
-  GdkGLProc_glSampleCoverage glSampleCoverage;
-  GdkGLProc_glCompressedTexImage3D glCompressedTexImage3D;
-  GdkGLProc_glCompressedTexImage2D glCompressedTexImage2D;
-  GdkGLProc_glCompressedTexImage1D glCompressedTexImage1D;
-  GdkGLProc_glCompressedTexSubImage3D glCompressedTexSubImage3D;
-  GdkGLProc_glCompressedTexSubImage2D glCompressedTexSubImage2D;
-  GdkGLProc_glCompressedTexSubImage1D glCompressedTexSubImage1D;
-  GdkGLProc_glGetCompressedTexImage glGetCompressedTexImage;
 };
 
-GdkGL_GL_VERSION_1_3 *gdk_gl_get_GL_VERSION_1_3 (void);
+GdkGL_GL_VERSION_1_3_DEPRECATED *gdk_gl_get_GL_VERSION_1_3_DEPRECATED (void);
 
 /*
  * GL_VERSION_1_4
  */
 
 /* glBlendFuncSeparate */
-typedef void (APIENTRY * GdkGLProc_glBlendFuncSeparate) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+typedef void (APIENTRYP GdkGLProc_glBlendFuncSeparate) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
 GdkGLProc    gdk_gl_get_glBlendFuncSeparate (void);
 #define      gdk_gl_glBlendFuncSeparate(proc, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) \
   ( ((GdkGLProc_glBlendFuncSeparate) (proc)) (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) )
 
-/* glFogCoordf */
-typedef void (APIENTRY * GdkGLProc_glFogCoordf) (GLfloat coord);
-GdkGLProc    gdk_gl_get_glFogCoordf (void);
-#define      gdk_gl_glFogCoordf(proc, coord) \
-  ( ((GdkGLProc_glFogCoordf) (proc)) (coord) )
-
-/* glFogCoordfv */
-typedef void (APIENTRY * GdkGLProc_glFogCoordfv) (const GLfloat *coord);
-GdkGLProc    gdk_gl_get_glFogCoordfv (void);
-#define      gdk_gl_glFogCoordfv(proc, coord) \
-  ( ((GdkGLProc_glFogCoordfv) (proc)) (coord) )
-
-/* glFogCoordd */
-typedef void (APIENTRY * GdkGLProc_glFogCoordd) (GLdouble coord);
-GdkGLProc    gdk_gl_get_glFogCoordd (void);
-#define      gdk_gl_glFogCoordd(proc, coord) \
-  ( ((GdkGLProc_glFogCoordd) (proc)) (coord) )
-
-/* glFogCoorddv */
-typedef void (APIENTRY * GdkGLProc_glFogCoorddv) (const GLdouble *coord);
-GdkGLProc    gdk_gl_get_glFogCoorddv (void);
-#define      gdk_gl_glFogCoorddv(proc, coord) \
-  ( ((GdkGLProc_glFogCoorddv) (proc)) (coord) )
-
-/* glFogCoordPointer */
-typedef void (APIENTRY * GdkGLProc_glFogCoordPointer) (GLenum type, GLsizei stride, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glFogCoordPointer (void);
-#define      gdk_gl_glFogCoordPointer(proc, type, stride, pointer) \
-  ( ((GdkGLProc_glFogCoordPointer) (proc)) (type, stride, pointer) )
-
 /* glMultiDrawArrays */
-typedef void (APIENTRY * GdkGLProc_glMultiDrawArrays) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
+typedef void (APIENTRYP GdkGLProc_glMultiDrawArrays) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
 GdkGLProc    gdk_gl_get_glMultiDrawArrays (void);
 #define      gdk_gl_glMultiDrawArrays(proc, mode, first, count, primcount) \
   ( ((GdkGLProc_glMultiDrawArrays) (proc)) (mode, first, count, primcount) )
 
 /* glMultiDrawElements */
-typedef void (APIENTRY * GdkGLProc_glMultiDrawElements) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
+typedef void (APIENTRYP GdkGLProc_glMultiDrawElements) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
 GdkGLProc    gdk_gl_get_glMultiDrawElements (void);
 #define      gdk_gl_glMultiDrawElements(proc, mode, count, type, indices, primcount) \
   ( ((GdkGLProc_glMultiDrawElements) (proc)) (mode, count, type, indices, primcount) )
 
 /* glPointParameterf */
-typedef void (APIENTRY * GdkGLProc_glPointParameterf) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP GdkGLProc_glPointParameterf) (GLenum pname, GLfloat param);
 GdkGLProc    gdk_gl_get_glPointParameterf (void);
 #define      gdk_gl_glPointParameterf(proc, pname, param) \
   ( ((GdkGLProc_glPointParameterf) (proc)) (pname, param) )
 
 /* glPointParameterfv */
-typedef void (APIENTRY * GdkGLProc_glPointParameterfv) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glPointParameterfv) (GLenum pname, const GLfloat *params);
 GdkGLProc    gdk_gl_get_glPointParameterfv (void);
 #define      gdk_gl_glPointParameterfv(proc, pname, params) \
   ( ((GdkGLProc_glPointParameterfv) (proc)) (pname, params) )
 
 /* glPointParameteri */
-typedef void (APIENTRY * GdkGLProc_glPointParameteri) (GLenum pname, GLint param);
+typedef void (APIENTRYP GdkGLProc_glPointParameteri) (GLenum pname, GLint param);
 GdkGLProc    gdk_gl_get_glPointParameteri (void);
 #define      gdk_gl_glPointParameteri(proc, pname, param) \
   ( ((GdkGLProc_glPointParameteri) (proc)) (pname, param) )
 
 /* glPointParameteriv */
-typedef void (APIENTRY * GdkGLProc_glPointParameteriv) (GLenum pname, const GLint *params);
+typedef void (APIENTRYP GdkGLProc_glPointParameteriv) (GLenum pname, const GLint *params);
 GdkGLProc    gdk_gl_get_glPointParameteriv (void);
 #define      gdk_gl_glPointParameteriv(proc, pname, params) \
   ( ((GdkGLProc_glPointParameteriv) (proc)) (pname, params) )
 
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_1_4 GdkGL_GL_VERSION_1_4;
+
+struct _GdkGL_GL_VERSION_1_4
+{
+  GdkGLProc_glBlendFuncSeparate glBlendFuncSeparate;
+  GdkGLProc_glMultiDrawArrays glMultiDrawArrays;
+  GdkGLProc_glMultiDrawElements glMultiDrawElements;
+  GdkGLProc_glPointParameterf glPointParameterf;
+  GdkGLProc_glPointParameterfv glPointParameterfv;
+  GdkGLProc_glPointParameteri glPointParameteri;
+  GdkGLProc_glPointParameteriv glPointParameteriv;
+};
+
+GdkGL_GL_VERSION_1_4 *gdk_gl_get_GL_VERSION_1_4 (void);
+
+/*
+ * GL_VERSION_1_4_DEPRECATED
+ */
+
+/* glFogCoordf */
+typedef void (APIENTRYP GdkGLProc_glFogCoordf) (GLfloat coord);
+GdkGLProc    gdk_gl_get_glFogCoordf (void);
+#define      gdk_gl_glFogCoordf(proc, coord) \
+  ( ((GdkGLProc_glFogCoordf) (proc)) (coord) )
+
+/* glFogCoordfv */
+typedef void (APIENTRYP GdkGLProc_glFogCoordfv) (const GLfloat *coord);
+GdkGLProc    gdk_gl_get_glFogCoordfv (void);
+#define      gdk_gl_glFogCoordfv(proc, coord) \
+  ( ((GdkGLProc_glFogCoordfv) (proc)) (coord) )
+
+/* glFogCoordd */
+typedef void (APIENTRYP GdkGLProc_glFogCoordd) (GLdouble coord);
+GdkGLProc    gdk_gl_get_glFogCoordd (void);
+#define      gdk_gl_glFogCoordd(proc, coord) \
+  ( ((GdkGLProc_glFogCoordd) (proc)) (coord) )
+
+/* glFogCoorddv */
+typedef void (APIENTRYP GdkGLProc_glFogCoorddv) (const GLdouble *coord);
+GdkGLProc    gdk_gl_get_glFogCoorddv (void);
+#define      gdk_gl_glFogCoorddv(proc, coord) \
+  ( ((GdkGLProc_glFogCoorddv) (proc)) (coord) )
+
+/* glFogCoordPointer */
+typedef void (APIENTRYP GdkGLProc_glFogCoordPointer) (GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glFogCoordPointer (void);
+#define      gdk_gl_glFogCoordPointer(proc, type, stride, pointer) \
+  ( ((GdkGLProc_glFogCoordPointer) (proc)) (type, stride, pointer) )
+
 /* glSecondaryColor3b */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3b) (GLbyte red, GLbyte green, GLbyte blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3b) (GLbyte red, GLbyte green, GLbyte blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3b (void);
 #define      gdk_gl_glSecondaryColor3b(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3b) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3bv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3bv) (const GLbyte *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3bv) (const GLbyte *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3bv (void);
 #define      gdk_gl_glSecondaryColor3bv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3bv) (proc)) (v) )
 
 /* glSecondaryColor3d */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3d) (GLdouble red, GLdouble green, GLdouble blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3d) (GLdouble red, GLdouble green, GLdouble blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3d (void);
 #define      gdk_gl_glSecondaryColor3d(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3d) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3dv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3dv) (const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3dv) (const GLdouble *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3dv (void);
 #define      gdk_gl_glSecondaryColor3dv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3dv) (proc)) (v) )
 
 /* glSecondaryColor3f */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3f) (GLfloat red, GLfloat green, GLfloat blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3f) (GLfloat red, GLfloat green, GLfloat blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3f (void);
 #define      gdk_gl_glSecondaryColor3f(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3f) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3fv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3fv) (const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3fv) (const GLfloat *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3fv (void);
 #define      gdk_gl_glSecondaryColor3fv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3fv) (proc)) (v) )
 
 /* glSecondaryColor3i */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3i) (GLint red, GLint green, GLint blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3i) (GLint red, GLint green, GLint blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3i (void);
 #define      gdk_gl_glSecondaryColor3i(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3i) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3iv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3iv) (const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3iv) (const GLint *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3iv (void);
 #define      gdk_gl_glSecondaryColor3iv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3iv) (proc)) (v) )
 
 /* glSecondaryColor3s */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3s) (GLshort red, GLshort green, GLshort blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3s) (GLshort red, GLshort green, GLshort blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3s (void);
 #define      gdk_gl_glSecondaryColor3s(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3s) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3sv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3sv) (const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3sv) (const GLshort *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3sv (void);
 #define      gdk_gl_glSecondaryColor3sv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3sv) (proc)) (v) )
 
 /* glSecondaryColor3ub */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3ub) (GLubyte red, GLubyte green, GLubyte blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3ub) (GLubyte red, GLubyte green, GLubyte blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3ub (void);
 #define      gdk_gl_glSecondaryColor3ub(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3ub) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3ubv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3ubv) (const GLubyte *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3ubv) (const GLubyte *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3ubv (void);
 #define      gdk_gl_glSecondaryColor3ubv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3ubv) (proc)) (v) )
 
 /* glSecondaryColor3ui */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3ui) (GLuint red, GLuint green, GLuint blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3ui) (GLuint red, GLuint green, GLuint blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3ui (void);
 #define      gdk_gl_glSecondaryColor3ui(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3ui) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3uiv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3uiv) (const GLuint *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3uiv) (const GLuint *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3uiv (void);
 #define      gdk_gl_glSecondaryColor3uiv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3uiv) (proc)) (v) )
 
 /* glSecondaryColor3us */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3us) (GLushort red, GLushort green, GLushort blue);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3us) (GLushort red, GLushort green, GLushort blue);
 GdkGLProc    gdk_gl_get_glSecondaryColor3us (void);
 #define      gdk_gl_glSecondaryColor3us(proc, red, green, blue) \
   ( ((GdkGLProc_glSecondaryColor3us) (proc)) (red, green, blue) )
 
 /* glSecondaryColor3usv */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3usv) (const GLushort *v);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3usv) (const GLushort *v);
 GdkGLProc    gdk_gl_get_glSecondaryColor3usv (void);
 #define      gdk_gl_glSecondaryColor3usv(proc, v) \
   ( ((GdkGLProc_glSecondaryColor3usv) (proc)) (v) )
 
 /* glSecondaryColorPointer */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColorPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP GdkGLProc_glSecondaryColorPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
 GdkGLProc    gdk_gl_get_glSecondaryColorPointer (void);
 #define      gdk_gl_glSecondaryColorPointer(proc, size, type, stride, pointer) \
   ( ((GdkGLProc_glSecondaryColorPointer) (proc)) (size, type, stride, pointer) )
 
 /* glWindowPos2d */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2d) (GLdouble x, GLdouble y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2d) (GLdouble x, GLdouble y);
 GdkGLProc    gdk_gl_get_glWindowPos2d (void);
 #define      gdk_gl_glWindowPos2d(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2d) (proc)) (x, y) )
 
 /* glWindowPos2dv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2dv) (const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2dv) (const GLdouble *v);
 GdkGLProc    gdk_gl_get_glWindowPos2dv (void);
 #define      gdk_gl_glWindowPos2dv(proc, v) \
   ( ((GdkGLProc_glWindowPos2dv) (proc)) (v) )
 
 /* glWindowPos2f */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2f) (GLfloat x, GLfloat y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2f) (GLfloat x, GLfloat y);
 GdkGLProc    gdk_gl_get_glWindowPos2f (void);
 #define      gdk_gl_glWindowPos2f(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2f) (proc)) (x, y) )
 
 /* glWindowPos2fv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2fv) (const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2fv) (const GLfloat *v);
 GdkGLProc    gdk_gl_get_glWindowPos2fv (void);
 #define      gdk_gl_glWindowPos2fv(proc, v) \
   ( ((GdkGLProc_glWindowPos2fv) (proc)) (v) )
 
 /* glWindowPos2i */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2i) (GLint x, GLint y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2i) (GLint x, GLint y);
 GdkGLProc    gdk_gl_get_glWindowPos2i (void);
 #define      gdk_gl_glWindowPos2i(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2i) (proc)) (x, y) )
 
 /* glWindowPos2iv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2iv) (const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2iv) (const GLint *v);
 GdkGLProc    gdk_gl_get_glWindowPos2iv (void);
 #define      gdk_gl_glWindowPos2iv(proc, v) \
   ( ((GdkGLProc_glWindowPos2iv) (proc)) (v) )
 
 /* glWindowPos2s */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2s) (GLshort x, GLshort y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2s) (GLshort x, GLshort y);
 GdkGLProc    gdk_gl_get_glWindowPos2s (void);
 #define      gdk_gl_glWindowPos2s(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2s) (proc)) (x, y) )
 
 /* glWindowPos2sv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2sv) (const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2sv) (const GLshort *v);
 GdkGLProc    gdk_gl_get_glWindowPos2sv (void);
 #define      gdk_gl_glWindowPos2sv(proc, v) \
   ( ((GdkGLProc_glWindowPos2sv) (proc)) (v) )
 
 /* glWindowPos3d */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3d) (GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3d) (GLdouble x, GLdouble y, GLdouble z);
 GdkGLProc    gdk_gl_get_glWindowPos3d (void);
 #define      gdk_gl_glWindowPos3d(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3d) (proc)) (x, y, z) )
 
 /* glWindowPos3dv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3dv) (const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3dv) (const GLdouble *v);
 GdkGLProc    gdk_gl_get_glWindowPos3dv (void);
 #define      gdk_gl_glWindowPos3dv(proc, v) \
   ( ((GdkGLProc_glWindowPos3dv) (proc)) (v) )
 
 /* glWindowPos3f */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3f) (GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3f) (GLfloat x, GLfloat y, GLfloat z);
 GdkGLProc    gdk_gl_get_glWindowPos3f (void);
 #define      gdk_gl_glWindowPos3f(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3f) (proc)) (x, y, z) )
 
 /* glWindowPos3fv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3fv) (const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3fv) (const GLfloat *v);
 GdkGLProc    gdk_gl_get_glWindowPos3fv (void);
 #define      gdk_gl_glWindowPos3fv(proc, v) \
   ( ((GdkGLProc_glWindowPos3fv) (proc)) (v) )
 
 /* glWindowPos3i */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3i) (GLint x, GLint y, GLint z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3i) (GLint x, GLint y, GLint z);
 GdkGLProc    gdk_gl_get_glWindowPos3i (void);
 #define      gdk_gl_glWindowPos3i(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3i) (proc)) (x, y, z) )
 
 /* glWindowPos3iv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3iv) (const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3iv) (const GLint *v);
 GdkGLProc    gdk_gl_get_glWindowPos3iv (void);
 #define      gdk_gl_glWindowPos3iv(proc, v) \
   ( ((GdkGLProc_glWindowPos3iv) (proc)) (v) )
 
 /* glWindowPos3s */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3s) (GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3s) (GLshort x, GLshort y, GLshort z);
 GdkGLProc    gdk_gl_get_glWindowPos3s (void);
 #define      gdk_gl_glWindowPos3s(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3s) (proc)) (x, y, z) )
 
 /* glWindowPos3sv */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3sv) (const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3sv) (const GLshort *v);
 GdkGLProc    gdk_gl_get_glWindowPos3sv (void);
 #define      gdk_gl_glWindowPos3sv(proc, v) \
   ( ((GdkGLProc_glWindowPos3sv) (proc)) (v) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_VERSION_1_4 GdkGL_GL_VERSION_1_4;
+typedef struct _GdkGL_GL_VERSION_1_4_DEPRECATED GdkGL_GL_VERSION_1_4_DEPRECATED;
 
-struct _GdkGL_GL_VERSION_1_4
+struct _GdkGL_GL_VERSION_1_4_DEPRECATED
 {
-  GdkGLProc_glBlendFuncSeparate glBlendFuncSeparate;
   GdkGLProc_glFogCoordf glFogCoordf;
   GdkGLProc_glFogCoordfv glFogCoordfv;
   GdkGLProc_glFogCoordd glFogCoordd;
   GdkGLProc_glFogCoorddv glFogCoorddv;
   GdkGLProc_glFogCoordPointer glFogCoordPointer;
-  GdkGLProc_glMultiDrawArrays glMultiDrawArrays;
-  GdkGLProc_glMultiDrawElements glMultiDrawElements;
-  GdkGLProc_glPointParameterf glPointParameterf;
-  GdkGLProc_glPointParameterfv glPointParameterfv;
-  GdkGLProc_glPointParameteri glPointParameteri;
-  GdkGLProc_glPointParameteriv glPointParameteriv;
   GdkGLProc_glSecondaryColor3b glSecondaryColor3b;
   GdkGLProc_glSecondaryColor3bv glSecondaryColor3bv;
   GdkGLProc_glSecondaryColor3d glSecondaryColor3d;
@@ -996,212 +1042,1591 @@ struct _GdkGL_GL_VERSION_1_4
   GdkGLProc_glWindowPos3sv glWindowPos3sv;
 };
 
-GdkGL_GL_VERSION_1_4 *gdk_gl_get_GL_VERSION_1_4 (void);
+GdkGL_GL_VERSION_1_4_DEPRECATED *gdk_gl_get_GL_VERSION_1_4_DEPRECATED (void);
 
 /*
- * GL_ARB_multitexture
+ * GL_VERSION_1_5
  */
 
-/* glActiveTextureARB */
-typedef void (APIENTRY * GdkGLProc_glActiveTextureARB) (GLenum texture);
-GdkGLProc    gdk_gl_get_glActiveTextureARB (void);
+/* glGenQueries */
+typedef void (APIENTRYP GdkGLProc_glGenQueries) (GLsizei n, GLuint *ids);
+GdkGLProc    gdk_gl_get_glGenQueries (void);
+#define      gdk_gl_glGenQueries(proc, n, ids) \
+  ( ((GdkGLProc_glGenQueries) (proc)) (n, ids) )
+
+/* glDeleteQueries */
+typedef void (APIENTRYP GdkGLProc_glDeleteQueries) (GLsizei n, const GLuint *ids);
+GdkGLProc    gdk_gl_get_glDeleteQueries (void);
+#define      gdk_gl_glDeleteQueries(proc, n, ids) \
+  ( ((GdkGLProc_glDeleteQueries) (proc)) (n, ids) )
+
+/* glIsQuery */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsQuery) (GLuint id);
+GdkGLProc    gdk_gl_get_glIsQuery (void);
+#define      gdk_gl_glIsQuery(proc, id) \
+  ( ((GdkGLProc_glIsQuery) (proc)) (id) )
+
+/* glBeginQuery */
+typedef void (APIENTRYP GdkGLProc_glBeginQuery) (GLenum target, GLuint id);
+GdkGLProc    gdk_gl_get_glBeginQuery (void);
+#define      gdk_gl_glBeginQuery(proc, target, id) \
+  ( ((GdkGLProc_glBeginQuery) (proc)) (target, id) )
+
+/* glEndQuery */
+typedef void (APIENTRYP GdkGLProc_glEndQuery) (GLenum target);
+GdkGLProc    gdk_gl_get_glEndQuery (void);
+#define      gdk_gl_glEndQuery(proc, target) \
+  ( ((GdkGLProc_glEndQuery) (proc)) (target) )
+
+/* glGetQueryiv */
+typedef void (APIENTRYP GdkGLProc_glGetQueryiv) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetQueryiv (void);
+#define      gdk_gl_glGetQueryiv(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetQueryiv) (proc)) (target, pname, params) )
+
+/* glGetQueryObjectiv */
+typedef void (APIENTRYP GdkGLProc_glGetQueryObjectiv) (GLuint id, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetQueryObjectiv (void);
+#define      gdk_gl_glGetQueryObjectiv(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetQueryObjectiv) (proc)) (id, pname, params) )
+
+/* glGetQueryObjectuiv */
+typedef void (APIENTRYP GdkGLProc_glGetQueryObjectuiv) (GLuint id, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetQueryObjectuiv (void);
+#define      gdk_gl_glGetQueryObjectuiv(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetQueryObjectuiv) (proc)) (id, pname, params) )
+
+/* glBindBuffer */
+typedef void (APIENTRYP GdkGLProc_glBindBuffer) (GLenum target, GLuint buffer);
+GdkGLProc    gdk_gl_get_glBindBuffer (void);
+#define      gdk_gl_glBindBuffer(proc, target, buffer) \
+  ( ((GdkGLProc_glBindBuffer) (proc)) (target, buffer) )
+
+/* glDeleteBuffers */
+typedef void (APIENTRYP GdkGLProc_glDeleteBuffers) (GLsizei n, const GLuint *buffers);
+GdkGLProc    gdk_gl_get_glDeleteBuffers (void);
+#define      gdk_gl_glDeleteBuffers(proc, n, buffers) \
+  ( ((GdkGLProc_glDeleteBuffers) (proc)) (n, buffers) )
+
+/* glGenBuffers */
+typedef void (APIENTRYP GdkGLProc_glGenBuffers) (GLsizei n, GLuint *buffers);
+GdkGLProc    gdk_gl_get_glGenBuffers (void);
+#define      gdk_gl_glGenBuffers(proc, n, buffers) \
+  ( ((GdkGLProc_glGenBuffers) (proc)) (n, buffers) )
+
+/* glIsBuffer */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsBuffer) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glIsBuffer (void);
+#define      gdk_gl_glIsBuffer(proc, buffer) \
+  ( ((GdkGLProc_glIsBuffer) (proc)) (buffer) )
+
+/* glBufferData */
+typedef void (APIENTRYP GdkGLProc_glBufferData) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
+GdkGLProc    gdk_gl_get_glBufferData (void);
+#define      gdk_gl_glBufferData(proc, target, size, data, usage) \
+  ( ((GdkGLProc_glBufferData) (proc)) (target, size, data, usage) )
+
+/* glBufferSubData */
+typedef void (APIENTRYP GdkGLProc_glBufferSubData) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glBufferSubData (void);
+#define      gdk_gl_glBufferSubData(proc, target, offset, size, data) \
+  ( ((GdkGLProc_glBufferSubData) (proc)) (target, offset, size, data) )
+
+/* glGetBufferSubData */
+typedef void (APIENTRYP GdkGLProc_glGetBufferSubData) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
+GdkGLProc    gdk_gl_get_glGetBufferSubData (void);
+#define      gdk_gl_glGetBufferSubData(proc, target, offset, size, data) \
+  ( ((GdkGLProc_glGetBufferSubData) (proc)) (target, offset, size, data) )
+
+/* glMapBuffer */
+typedef GLvoid* (APIENTRYP GdkGLProc_glMapBuffer) (GLenum target, GLenum access);
+GdkGLProc    gdk_gl_get_glMapBuffer (void);
+#define      gdk_gl_glMapBuffer(proc, target, access) \
+  ( ((GdkGLProc_glMapBuffer) (proc)) (target, access) )
+
+/* glUnmapBuffer */
+typedef GLboolean (APIENTRYP GdkGLProc_glUnmapBuffer) (GLenum target);
+GdkGLProc    gdk_gl_get_glUnmapBuffer (void);
+#define      gdk_gl_glUnmapBuffer(proc, target) \
+  ( ((GdkGLProc_glUnmapBuffer) (proc)) (target) )
+
+/* glGetBufferParameteriv */
+typedef void (APIENTRYP GdkGLProc_glGetBufferParameteriv) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetBufferParameteriv (void);
+#define      gdk_gl_glGetBufferParameteriv(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetBufferParameteriv) (proc)) (target, pname, params) )
+
+/* glGetBufferPointerv */
+typedef void (APIENTRYP GdkGLProc_glGetBufferPointerv) (GLenum target, GLenum pname, GLvoid* *params);
+GdkGLProc    gdk_gl_get_glGetBufferPointerv (void);
+#define      gdk_gl_glGetBufferPointerv(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetBufferPointerv) (proc)) (target, pname, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_1_5 GdkGL_GL_VERSION_1_5;
+
+struct _GdkGL_GL_VERSION_1_5
+{
+  GdkGLProc_glGenQueries glGenQueries;
+  GdkGLProc_glDeleteQueries glDeleteQueries;
+  GdkGLProc_glIsQuery glIsQuery;
+  GdkGLProc_glBeginQuery glBeginQuery;
+  GdkGLProc_glEndQuery glEndQuery;
+  GdkGLProc_glGetQueryiv glGetQueryiv;
+  GdkGLProc_glGetQueryObjectiv glGetQueryObjectiv;
+  GdkGLProc_glGetQueryObjectuiv glGetQueryObjectuiv;
+  GdkGLProc_glBindBuffer glBindBuffer;
+  GdkGLProc_glDeleteBuffers glDeleteBuffers;
+  GdkGLProc_glGenBuffers glGenBuffers;
+  GdkGLProc_glIsBuffer glIsBuffer;
+  GdkGLProc_glBufferData glBufferData;
+  GdkGLProc_glBufferSubData glBufferSubData;
+  GdkGLProc_glGetBufferSubData glGetBufferSubData;
+  GdkGLProc_glMapBuffer glMapBuffer;
+  GdkGLProc_glUnmapBuffer glUnmapBuffer;
+  GdkGLProc_glGetBufferParameteriv glGetBufferParameteriv;
+  GdkGLProc_glGetBufferPointerv glGetBufferPointerv;
+};
+
+GdkGL_GL_VERSION_1_5 *gdk_gl_get_GL_VERSION_1_5 (void);
+
+/*
+ * GL_VERSION_2_0
+ */
+
+/* glBlendEquationSeparate */
+typedef void (APIENTRYP GdkGLProc_glBlendEquationSeparate) (GLenum modeRGB, GLenum modeAlpha);
+GdkGLProc    gdk_gl_get_glBlendEquationSeparate (void);
+#define      gdk_gl_glBlendEquationSeparate(proc, modeRGB, modeAlpha) \
+  ( ((GdkGLProc_glBlendEquationSeparate) (proc)) (modeRGB, modeAlpha) )
+
+/* glDrawBuffers */
+typedef void (APIENTRYP GdkGLProc_glDrawBuffers) (GLsizei n, const GLenum *bufs);
+GdkGLProc    gdk_gl_get_glDrawBuffers (void);
+#define      gdk_gl_glDrawBuffers(proc, n, bufs) \
+  ( ((GdkGLProc_glDrawBuffers) (proc)) (n, bufs) )
+
+/* glStencilOpSeparate */
+typedef void (APIENTRYP GdkGLProc_glStencilOpSeparate) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+GdkGLProc    gdk_gl_get_glStencilOpSeparate (void);
+#define      gdk_gl_glStencilOpSeparate(proc, face, sfail, dpfail, dppass) \
+  ( ((GdkGLProc_glStencilOpSeparate) (proc)) (face, sfail, dpfail, dppass) )
+
+/* glStencilFuncSeparate */
+typedef void (APIENTRYP GdkGLProc_glStencilFuncSeparate) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
+GdkGLProc    gdk_gl_get_glStencilFuncSeparate (void);
+#define      gdk_gl_glStencilFuncSeparate(proc, frontfunc, backfunc, ref, mask) \
+  ( ((GdkGLProc_glStencilFuncSeparate) (proc)) (frontfunc, backfunc, ref, mask) )
+
+/* glStencilMaskSeparate */
+typedef void (APIENTRYP GdkGLProc_glStencilMaskSeparate) (GLenum face, GLuint mask);
+GdkGLProc    gdk_gl_get_glStencilMaskSeparate (void);
+#define      gdk_gl_glStencilMaskSeparate(proc, face, mask) \
+  ( ((GdkGLProc_glStencilMaskSeparate) (proc)) (face, mask) )
+
+/* glAttachShader */
+typedef void (APIENTRYP GdkGLProc_glAttachShader) (GLuint program, GLuint shader);
+GdkGLProc    gdk_gl_get_glAttachShader (void);
+#define      gdk_gl_glAttachShader(proc, program, shader) \
+  ( ((GdkGLProc_glAttachShader) (proc)) (program, shader) )
+
+/* glBindAttribLocation */
+typedef void (APIENTRYP GdkGLProc_glBindAttribLocation) (GLuint program, GLuint index, const GLchar *name);
+GdkGLProc    gdk_gl_get_glBindAttribLocation (void);
+#define      gdk_gl_glBindAttribLocation(proc, program, index, name) \
+  ( ((GdkGLProc_glBindAttribLocation) (proc)) (program, index, name) )
+
+/* glCompileShader */
+typedef void (APIENTRYP GdkGLProc_glCompileShader) (GLuint shader);
+GdkGLProc    gdk_gl_get_glCompileShader (void);
+#define      gdk_gl_glCompileShader(proc, shader) \
+  ( ((GdkGLProc_glCompileShader) (proc)) (shader) )
+
+/* glCreateProgram */
+typedef GLuint (APIENTRYP GdkGLProc_glCreateProgram) (void);
+GdkGLProc    gdk_gl_get_glCreateProgram (void);
+#define      gdk_gl_glCreateProgram(proc) \
+  ( ((GdkGLProc_glCreateProgram) (proc)) () )
+
+/* glCreateShader */
+typedef GLuint (APIENTRYP GdkGLProc_glCreateShader) (GLenum type);
+GdkGLProc    gdk_gl_get_glCreateShader (void);
+#define      gdk_gl_glCreateShader(proc, type) \
+  ( ((GdkGLProc_glCreateShader) (proc)) (type) )
+
+/* glDeleteProgram */
+typedef void (APIENTRYP GdkGLProc_glDeleteProgram) (GLuint program);
+GdkGLProc    gdk_gl_get_glDeleteProgram (void);
+#define      gdk_gl_glDeleteProgram(proc, program) \
+  ( ((GdkGLProc_glDeleteProgram) (proc)) (program) )
+
+/* glDeleteShader */
+typedef void (APIENTRYP GdkGLProc_glDeleteShader) (GLuint shader);
+GdkGLProc    gdk_gl_get_glDeleteShader (void);
+#define      gdk_gl_glDeleteShader(proc, shader) \
+  ( ((GdkGLProc_glDeleteShader) (proc)) (shader) )
+
+/* glDetachShader */
+typedef void (APIENTRYP GdkGLProc_glDetachShader) (GLuint program, GLuint shader);
+GdkGLProc    gdk_gl_get_glDetachShader (void);
+#define      gdk_gl_glDetachShader(proc, program, shader) \
+  ( ((GdkGLProc_glDetachShader) (proc)) (program, shader) )
+
+/* glDisableVertexAttribArray */
+typedef void (APIENTRYP GdkGLProc_glDisableVertexAttribArray) (GLuint index);
+GdkGLProc    gdk_gl_get_glDisableVertexAttribArray (void);
+#define      gdk_gl_glDisableVertexAttribArray(proc, index) \
+  ( ((GdkGLProc_glDisableVertexAttribArray) (proc)) (index) )
+
+/* glEnableVertexAttribArray */
+typedef void (APIENTRYP GdkGLProc_glEnableVertexAttribArray) (GLuint index);
+GdkGLProc    gdk_gl_get_glEnableVertexAttribArray (void);
+#define      gdk_gl_glEnableVertexAttribArray(proc, index) \
+  ( ((GdkGLProc_glEnableVertexAttribArray) (proc)) (index) )
+
+/* glGetActiveAttrib */
+typedef void (APIENTRYP GdkGLProc_glGetActiveAttrib) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+GdkGLProc    gdk_gl_get_glGetActiveAttrib (void);
+#define      gdk_gl_glGetActiveAttrib(proc, program, index, bufSize, length, size, type, name) \
+  ( ((GdkGLProc_glGetActiveAttrib) (proc)) (program, index, bufSize, length, size, type, name) )
+
+/* glGetActiveUniform */
+typedef void (APIENTRYP GdkGLProc_glGetActiveUniform) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+GdkGLProc    gdk_gl_get_glGetActiveUniform (void);
+#define      gdk_gl_glGetActiveUniform(proc, program, index, bufSize, length, size, type, name) \
+  ( ((GdkGLProc_glGetActiveUniform) (proc)) (program, index, bufSize, length, size, type, name) )
+
+/* glGetAttachedShaders */
+typedef void (APIENTRYP GdkGLProc_glGetAttachedShaders) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
+GdkGLProc    gdk_gl_get_glGetAttachedShaders (void);
+#define      gdk_gl_glGetAttachedShaders(proc, program, maxCount, count, obj) \
+  ( ((GdkGLProc_glGetAttachedShaders) (proc)) (program, maxCount, count, obj) )
+
+/* glGetAttribLocation */
+typedef GLint (APIENTRYP GdkGLProc_glGetAttribLocation) (GLuint program, const GLchar *name);
+GdkGLProc    gdk_gl_get_glGetAttribLocation (void);
+#define      gdk_gl_glGetAttribLocation(proc, program, name) \
+  ( ((GdkGLProc_glGetAttribLocation) (proc)) (program, name) )
+
+/* glGetProgramiv */
+typedef void (APIENTRYP GdkGLProc_glGetProgramiv) (GLuint program, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetProgramiv (void);
+#define      gdk_gl_glGetProgramiv(proc, program, pname, params) \
+  ( ((GdkGLProc_glGetProgramiv) (proc)) (program, pname, params) )
+
+/* glGetProgramInfoLog */
+typedef void (APIENTRYP GdkGLProc_glGetProgramInfoLog) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+GdkGLProc    gdk_gl_get_glGetProgramInfoLog (void);
+#define      gdk_gl_glGetProgramInfoLog(proc, program, bufSize, length, infoLog) \
+  ( ((GdkGLProc_glGetProgramInfoLog) (proc)) (program, bufSize, length, infoLog) )
+
+/* glGetShaderiv */
+typedef void (APIENTRYP GdkGLProc_glGetShaderiv) (GLuint shader, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetShaderiv (void);
+#define      gdk_gl_glGetShaderiv(proc, shader, pname, params) \
+  ( ((GdkGLProc_glGetShaderiv) (proc)) (shader, pname, params) )
+
+/* glGetShaderInfoLog */
+typedef void (APIENTRYP GdkGLProc_glGetShaderInfoLog) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+GdkGLProc    gdk_gl_get_glGetShaderInfoLog (void);
+#define      gdk_gl_glGetShaderInfoLog(proc, shader, bufSize, length, infoLog) \
+  ( ((GdkGLProc_glGetShaderInfoLog) (proc)) (shader, bufSize, length, infoLog) )
+
+/* glGetShaderSource */
+typedef void (APIENTRYP GdkGLProc_glGetShaderSource) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
+GdkGLProc    gdk_gl_get_glGetShaderSource (void);
+#define      gdk_gl_glGetShaderSource(proc, shader, bufSize, length, source) \
+  ( ((GdkGLProc_glGetShaderSource) (proc)) (shader, bufSize, length, source) )
+
+/* glGetUniformLocation */
+typedef GLint (APIENTRYP GdkGLProc_glGetUniformLocation) (GLuint program, const GLchar *name);
+GdkGLProc    gdk_gl_get_glGetUniformLocation (void);
+#define      gdk_gl_glGetUniformLocation(proc, program, name) \
+  ( ((GdkGLProc_glGetUniformLocation) (proc)) (program, name) )
+
+/* glGetUniformfv */
+typedef void (APIENTRYP GdkGLProc_glGetUniformfv) (GLuint program, GLint location, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetUniformfv (void);
+#define      gdk_gl_glGetUniformfv(proc, program, location, params) \
+  ( ((GdkGLProc_glGetUniformfv) (proc)) (program, location, params) )
+
+/* glGetUniformiv */
+typedef void (APIENTRYP GdkGLProc_glGetUniformiv) (GLuint program, GLint location, GLint *params);
+GdkGLProc    gdk_gl_get_glGetUniformiv (void);
+#define      gdk_gl_glGetUniformiv(proc, program, location, params) \
+  ( ((GdkGLProc_glGetUniformiv) (proc)) (program, location, params) )
+
+/* glGetVertexAttribdv */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribdv) (GLuint index, GLenum pname, GLdouble *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribdv (void);
+#define      gdk_gl_glGetVertexAttribdv(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribdv) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribfv */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribfv) (GLuint index, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribfv (void);
+#define      gdk_gl_glGetVertexAttribfv(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribfv) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribiv */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribiv) (GLuint index, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribiv (void);
+#define      gdk_gl_glGetVertexAttribiv(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribiv) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribPointerv */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribPointerv) (GLuint index, GLenum pname, GLvoid* *pointer);
+GdkGLProc    gdk_gl_get_glGetVertexAttribPointerv (void);
+#define      gdk_gl_glGetVertexAttribPointerv(proc, index, pname, pointer) \
+  ( ((GdkGLProc_glGetVertexAttribPointerv) (proc)) (index, pname, pointer) )
+
+/* glIsProgram */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsProgram) (GLuint program);
+GdkGLProc    gdk_gl_get_glIsProgram (void);
+#define      gdk_gl_glIsProgram(proc, program) \
+  ( ((GdkGLProc_glIsProgram) (proc)) (program) )
+
+/* glIsShader */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsShader) (GLuint shader);
+GdkGLProc    gdk_gl_get_glIsShader (void);
+#define      gdk_gl_glIsShader(proc, shader) \
+  ( ((GdkGLProc_glIsShader) (proc)) (shader) )
+
+/* glLinkProgram */
+typedef void (APIENTRYP GdkGLProc_glLinkProgram) (GLuint program);
+GdkGLProc    gdk_gl_get_glLinkProgram (void);
+#define      gdk_gl_glLinkProgram(proc, program) \
+  ( ((GdkGLProc_glLinkProgram) (proc)) (program) )
+
+/* glShaderSource */
+typedef void (APIENTRYP GdkGLProc_glShaderSource) (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
+GdkGLProc    gdk_gl_get_glShaderSource (void);
+#define      gdk_gl_glShaderSource(proc, shader, count, string, length) \
+  ( ((GdkGLProc_glShaderSource) (proc)) (shader, count, string, length) )
+
+/* glUseProgram */
+typedef void (APIENTRYP GdkGLProc_glUseProgram) (GLuint program);
+GdkGLProc    gdk_gl_get_glUseProgram (void);
+#define      gdk_gl_glUseProgram(proc, program) \
+  ( ((GdkGLProc_glUseProgram) (proc)) (program) )
+
+/* glUniform1f */
+typedef void (APIENTRYP GdkGLProc_glUniform1f) (GLint location, GLfloat v0);
+GdkGLProc    gdk_gl_get_glUniform1f (void);
+#define      gdk_gl_glUniform1f(proc, location, v0) \
+  ( ((GdkGLProc_glUniform1f) (proc)) (location, v0) )
+
+/* glUniform2f */
+typedef void (APIENTRYP GdkGLProc_glUniform2f) (GLint location, GLfloat v0, GLfloat v1);
+GdkGLProc    gdk_gl_get_glUniform2f (void);
+#define      gdk_gl_glUniform2f(proc, location, v0, v1) \
+  ( ((GdkGLProc_glUniform2f) (proc)) (location, v0, v1) )
+
+/* glUniform3f */
+typedef void (APIENTRYP GdkGLProc_glUniform3f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+GdkGLProc    gdk_gl_get_glUniform3f (void);
+#define      gdk_gl_glUniform3f(proc, location, v0, v1, v2) \
+  ( ((GdkGLProc_glUniform3f) (proc)) (location, v0, v1, v2) )
+
+/* glUniform4f */
+typedef void (APIENTRYP GdkGLProc_glUniform4f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+GdkGLProc    gdk_gl_get_glUniform4f (void);
+#define      gdk_gl_glUniform4f(proc, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glUniform4f) (proc)) (location, v0, v1, v2, v3) )
+
+/* glUniform1i */
+typedef void (APIENTRYP GdkGLProc_glUniform1i) (GLint location, GLint v0);
+GdkGLProc    gdk_gl_get_glUniform1i (void);
+#define      gdk_gl_glUniform1i(proc, location, v0) \
+  ( ((GdkGLProc_glUniform1i) (proc)) (location, v0) )
+
+/* glUniform2i */
+typedef void (APIENTRYP GdkGLProc_glUniform2i) (GLint location, GLint v0, GLint v1);
+GdkGLProc    gdk_gl_get_glUniform2i (void);
+#define      gdk_gl_glUniform2i(proc, location, v0, v1) \
+  ( ((GdkGLProc_glUniform2i) (proc)) (location, v0, v1) )
+
+/* glUniform3i */
+typedef void (APIENTRYP GdkGLProc_glUniform3i) (GLint location, GLint v0, GLint v1, GLint v2);
+GdkGLProc    gdk_gl_get_glUniform3i (void);
+#define      gdk_gl_glUniform3i(proc, location, v0, v1, v2) \
+  ( ((GdkGLProc_glUniform3i) (proc)) (location, v0, v1, v2) )
+
+/* glUniform4i */
+typedef void (APIENTRYP GdkGLProc_glUniform4i) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+GdkGLProc    gdk_gl_get_glUniform4i (void);
+#define      gdk_gl_glUniform4i(proc, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glUniform4i) (proc)) (location, v0, v1, v2, v3) )
+
+/* glUniform1fv */
+typedef void (APIENTRYP GdkGLProc_glUniform1fv) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform1fv (void);
+#define      gdk_gl_glUniform1fv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform1fv) (proc)) (location, count, value) )
+
+/* glUniform2fv */
+typedef void (APIENTRYP GdkGLProc_glUniform2fv) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform2fv (void);
+#define      gdk_gl_glUniform2fv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform2fv) (proc)) (location, count, value) )
+
+/* glUniform3fv */
+typedef void (APIENTRYP GdkGLProc_glUniform3fv) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform3fv (void);
+#define      gdk_gl_glUniform3fv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform3fv) (proc)) (location, count, value) )
+
+/* glUniform4fv */
+typedef void (APIENTRYP GdkGLProc_glUniform4fv) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform4fv (void);
+#define      gdk_gl_glUniform4fv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform4fv) (proc)) (location, count, value) )
+
+/* glUniform1iv */
+typedef void (APIENTRYP GdkGLProc_glUniform1iv) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform1iv (void);
+#define      gdk_gl_glUniform1iv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform1iv) (proc)) (location, count, value) )
+
+/* glUniform2iv */
+typedef void (APIENTRYP GdkGLProc_glUniform2iv) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform2iv (void);
+#define      gdk_gl_glUniform2iv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform2iv) (proc)) (location, count, value) )
+
+/* glUniform3iv */
+typedef void (APIENTRYP GdkGLProc_glUniform3iv) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform3iv (void);
+#define      gdk_gl_glUniform3iv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform3iv) (proc)) (location, count, value) )
+
+/* glUniform4iv */
+typedef void (APIENTRYP GdkGLProc_glUniform4iv) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform4iv (void);
+#define      gdk_gl_glUniform4iv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform4iv) (proc)) (location, count, value) )
+
+/* glUniformMatrix2fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix2fv (void);
+#define      gdk_gl_glUniformMatrix2fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix2fv) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix3fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix3fv (void);
+#define      gdk_gl_glUniformMatrix3fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix3fv) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix4fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix4fv (void);
+#define      gdk_gl_glUniformMatrix4fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix4fv) (proc)) (location, count, transpose, value) )
+
+/* glValidateProgram */
+typedef void (APIENTRYP GdkGLProc_glValidateProgram) (GLuint program);
+GdkGLProc    gdk_gl_get_glValidateProgram (void);
+#define      gdk_gl_glValidateProgram(proc, program) \
+  ( ((GdkGLProc_glValidateProgram) (proc)) (program) )
+
+/* glVertexAttrib1d */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1d) (GLuint index, GLdouble x);
+GdkGLProc    gdk_gl_get_glVertexAttrib1d (void);
+#define      gdk_gl_glVertexAttrib1d(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttrib1d) (proc)) (index, x) )
+
+/* glVertexAttrib1dv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1dv) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib1dv (void);
+#define      gdk_gl_glVertexAttrib1dv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib1dv) (proc)) (index, v) )
+
+/* glVertexAttrib1f */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1f) (GLuint index, GLfloat x);
+GdkGLProc    gdk_gl_get_glVertexAttrib1f (void);
+#define      gdk_gl_glVertexAttrib1f(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttrib1f) (proc)) (index, x) )
+
+/* glVertexAttrib1fv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1fv) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib1fv (void);
+#define      gdk_gl_glVertexAttrib1fv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib1fv) (proc)) (index, v) )
+
+/* glVertexAttrib1s */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1s) (GLuint index, GLshort x);
+GdkGLProc    gdk_gl_get_glVertexAttrib1s (void);
+#define      gdk_gl_glVertexAttrib1s(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttrib1s) (proc)) (index, x) )
+
+/* glVertexAttrib1sv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1sv) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib1sv (void);
+#define      gdk_gl_glVertexAttrib1sv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib1sv) (proc)) (index, v) )
+
+/* glVertexAttrib2d */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2d) (GLuint index, GLdouble x, GLdouble y);
+GdkGLProc    gdk_gl_get_glVertexAttrib2d (void);
+#define      gdk_gl_glVertexAttrib2d(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttrib2d) (proc)) (index, x, y) )
+
+/* glVertexAttrib2dv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2dv) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib2dv (void);
+#define      gdk_gl_glVertexAttrib2dv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib2dv) (proc)) (index, v) )
+
+/* glVertexAttrib2f */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2f) (GLuint index, GLfloat x, GLfloat y);
+GdkGLProc    gdk_gl_get_glVertexAttrib2f (void);
+#define      gdk_gl_glVertexAttrib2f(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttrib2f) (proc)) (index, x, y) )
+
+/* glVertexAttrib2fv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2fv) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib2fv (void);
+#define      gdk_gl_glVertexAttrib2fv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib2fv) (proc)) (index, v) )
+
+/* glVertexAttrib2s */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2s) (GLuint index, GLshort x, GLshort y);
+GdkGLProc    gdk_gl_get_glVertexAttrib2s (void);
+#define      gdk_gl_glVertexAttrib2s(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttrib2s) (proc)) (index, x, y) )
+
+/* glVertexAttrib2sv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2sv) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib2sv (void);
+#define      gdk_gl_glVertexAttrib2sv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib2sv) (proc)) (index, v) )
+
+/* glVertexAttrib3d */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3d) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+GdkGLProc    gdk_gl_get_glVertexAttrib3d (void);
+#define      gdk_gl_glVertexAttrib3d(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttrib3d) (proc)) (index, x, y, z) )
+
+/* glVertexAttrib3dv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3dv) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib3dv (void);
+#define      gdk_gl_glVertexAttrib3dv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib3dv) (proc)) (index, v) )
+
+/* glVertexAttrib3f */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3f) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glVertexAttrib3f (void);
+#define      gdk_gl_glVertexAttrib3f(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttrib3f) (proc)) (index, x, y, z) )
+
+/* glVertexAttrib3fv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3fv) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib3fv (void);
+#define      gdk_gl_glVertexAttrib3fv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib3fv) (proc)) (index, v) )
+
+/* glVertexAttrib3s */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3s) (GLuint index, GLshort x, GLshort y, GLshort z);
+GdkGLProc    gdk_gl_get_glVertexAttrib3s (void);
+#define      gdk_gl_glVertexAttrib3s(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttrib3s) (proc)) (index, x, y, z) )
+
+/* glVertexAttrib3sv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3sv) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib3sv (void);
+#define      gdk_gl_glVertexAttrib3sv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib3sv) (proc)) (index, v) )
+
+/* glVertexAttrib4Nbv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4Nbv) (GLuint index, const GLbyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4Nbv (void);
+#define      gdk_gl_glVertexAttrib4Nbv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4Nbv) (proc)) (index, v) )
+
+/* glVertexAttrib4Niv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4Niv) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4Niv (void);
+#define      gdk_gl_glVertexAttrib4Niv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4Niv) (proc)) (index, v) )
+
+/* glVertexAttrib4Nsv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4Nsv) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4Nsv (void);
+#define      gdk_gl_glVertexAttrib4Nsv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4Nsv) (proc)) (index, v) )
+
+/* glVertexAttrib4Nub */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4Nub) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4Nub (void);
+#define      gdk_gl_glVertexAttrib4Nub(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4Nub) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4Nubv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4Nubv) (GLuint index, const GLubyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4Nubv (void);
+#define      gdk_gl_glVertexAttrib4Nubv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4Nubv) (proc)) (index, v) )
+
+/* glVertexAttrib4Nuiv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4Nuiv) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4Nuiv (void);
+#define      gdk_gl_glVertexAttrib4Nuiv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4Nuiv) (proc)) (index, v) )
+
+/* glVertexAttrib4Nusv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4Nusv) (GLuint index, const GLushort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4Nusv (void);
+#define      gdk_gl_glVertexAttrib4Nusv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4Nusv) (proc)) (index, v) )
+
+/* glVertexAttrib4bv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4bv) (GLuint index, const GLbyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4bv (void);
+#define      gdk_gl_glVertexAttrib4bv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4bv) (proc)) (index, v) )
+
+/* glVertexAttrib4d */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4d (void);
+#define      gdk_gl_glVertexAttrib4d(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4d) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4dv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4dv) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4dv (void);
+#define      gdk_gl_glVertexAttrib4dv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4dv) (proc)) (index, v) )
+
+/* glVertexAttrib4f */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4f) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4f (void);
+#define      gdk_gl_glVertexAttrib4f(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4f) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4fv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4fv) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4fv (void);
+#define      gdk_gl_glVertexAttrib4fv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4fv) (proc)) (index, v) )
+
+/* glVertexAttrib4iv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4iv) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4iv (void);
+#define      gdk_gl_glVertexAttrib4iv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4iv) (proc)) (index, v) )
+
+/* glVertexAttrib4s */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4s) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4s (void);
+#define      gdk_gl_glVertexAttrib4s(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4s) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4sv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4sv) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4sv (void);
+#define      gdk_gl_glVertexAttrib4sv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4sv) (proc)) (index, v) )
+
+/* glVertexAttrib4ubv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4ubv) (GLuint index, const GLubyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4ubv (void);
+#define      gdk_gl_glVertexAttrib4ubv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4ubv) (proc)) (index, v) )
+
+/* glVertexAttrib4uiv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4uiv) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4uiv (void);
+#define      gdk_gl_glVertexAttrib4uiv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4uiv) (proc)) (index, v) )
+
+/* glVertexAttrib4usv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4usv) (GLuint index, const GLushort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4usv (void);
+#define      gdk_gl_glVertexAttrib4usv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4usv) (proc)) (index, v) )
+
+/* glVertexAttribPointer */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribPointer) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexAttribPointer (void);
+#define      gdk_gl_glVertexAttribPointer(proc, index, size, type, normalized, stride, pointer) \
+  ( ((GdkGLProc_glVertexAttribPointer) (proc)) (index, size, type, normalized, stride, pointer) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_2_0 GdkGL_GL_VERSION_2_0;
+
+struct _GdkGL_GL_VERSION_2_0
+{
+  GdkGLProc_glBlendEquationSeparate glBlendEquationSeparate;
+  GdkGLProc_glDrawBuffers glDrawBuffers;
+  GdkGLProc_glStencilOpSeparate glStencilOpSeparate;
+  GdkGLProc_glStencilFuncSeparate glStencilFuncSeparate;
+  GdkGLProc_glStencilMaskSeparate glStencilMaskSeparate;
+  GdkGLProc_glAttachShader glAttachShader;
+  GdkGLProc_glBindAttribLocation glBindAttribLocation;
+  GdkGLProc_glCompileShader glCompileShader;
+  GdkGLProc_glCreateProgram glCreateProgram;
+  GdkGLProc_glCreateShader glCreateShader;
+  GdkGLProc_glDeleteProgram glDeleteProgram;
+  GdkGLProc_glDeleteShader glDeleteShader;
+  GdkGLProc_glDetachShader glDetachShader;
+  GdkGLProc_glDisableVertexAttribArray glDisableVertexAttribArray;
+  GdkGLProc_glEnableVertexAttribArray glEnableVertexAttribArray;
+  GdkGLProc_glGetActiveAttrib glGetActiveAttrib;
+  GdkGLProc_glGetActiveUniform glGetActiveUniform;
+  GdkGLProc_glGetAttachedShaders glGetAttachedShaders;
+  GdkGLProc_glGetAttribLocation glGetAttribLocation;
+  GdkGLProc_glGetProgramiv glGetProgramiv;
+  GdkGLProc_glGetProgramInfoLog glGetProgramInfoLog;
+  GdkGLProc_glGetShaderiv glGetShaderiv;
+  GdkGLProc_glGetShaderInfoLog glGetShaderInfoLog;
+  GdkGLProc_glGetShaderSource glGetShaderSource;
+  GdkGLProc_glGetUniformLocation glGetUniformLocation;
+  GdkGLProc_glGetUniformfv glGetUniformfv;
+  GdkGLProc_glGetUniformiv glGetUniformiv;
+  GdkGLProc_glGetVertexAttribdv glGetVertexAttribdv;
+  GdkGLProc_glGetVertexAttribfv glGetVertexAttribfv;
+  GdkGLProc_glGetVertexAttribiv glGetVertexAttribiv;
+  GdkGLProc_glGetVertexAttribPointerv glGetVertexAttribPointerv;
+  GdkGLProc_glIsProgram glIsProgram;
+  GdkGLProc_glIsShader glIsShader;
+  GdkGLProc_glLinkProgram glLinkProgram;
+  GdkGLProc_glShaderSource glShaderSource;
+  GdkGLProc_glUseProgram glUseProgram;
+  GdkGLProc_glUniform1f glUniform1f;
+  GdkGLProc_glUniform2f glUniform2f;
+  GdkGLProc_glUniform3f glUniform3f;
+  GdkGLProc_glUniform4f glUniform4f;
+  GdkGLProc_glUniform1i glUniform1i;
+  GdkGLProc_glUniform2i glUniform2i;
+  GdkGLProc_glUniform3i glUniform3i;
+  GdkGLProc_glUniform4i glUniform4i;
+  GdkGLProc_glUniform1fv glUniform1fv;
+  GdkGLProc_glUniform2fv glUniform2fv;
+  GdkGLProc_glUniform3fv glUniform3fv;
+  GdkGLProc_glUniform4fv glUniform4fv;
+  GdkGLProc_glUniform1iv glUniform1iv;
+  GdkGLProc_glUniform2iv glUniform2iv;
+  GdkGLProc_glUniform3iv glUniform3iv;
+  GdkGLProc_glUniform4iv glUniform4iv;
+  GdkGLProc_glUniformMatrix2fv glUniformMatrix2fv;
+  GdkGLProc_glUniformMatrix3fv glUniformMatrix3fv;
+  GdkGLProc_glUniformMatrix4fv glUniformMatrix4fv;
+  GdkGLProc_glValidateProgram glValidateProgram;
+  GdkGLProc_glVertexAttrib1d glVertexAttrib1d;
+  GdkGLProc_glVertexAttrib1dv glVertexAttrib1dv;
+  GdkGLProc_glVertexAttrib1f glVertexAttrib1f;
+  GdkGLProc_glVertexAttrib1fv glVertexAttrib1fv;
+  GdkGLProc_glVertexAttrib1s glVertexAttrib1s;
+  GdkGLProc_glVertexAttrib1sv glVertexAttrib1sv;
+  GdkGLProc_glVertexAttrib2d glVertexAttrib2d;
+  GdkGLProc_glVertexAttrib2dv glVertexAttrib2dv;
+  GdkGLProc_glVertexAttrib2f glVertexAttrib2f;
+  GdkGLProc_glVertexAttrib2fv glVertexAttrib2fv;
+  GdkGLProc_glVertexAttrib2s glVertexAttrib2s;
+  GdkGLProc_glVertexAttrib2sv glVertexAttrib2sv;
+  GdkGLProc_glVertexAttrib3d glVertexAttrib3d;
+  GdkGLProc_glVertexAttrib3dv glVertexAttrib3dv;
+  GdkGLProc_glVertexAttrib3f glVertexAttrib3f;
+  GdkGLProc_glVertexAttrib3fv glVertexAttrib3fv;
+  GdkGLProc_glVertexAttrib3s glVertexAttrib3s;
+  GdkGLProc_glVertexAttrib3sv glVertexAttrib3sv;
+  GdkGLProc_glVertexAttrib4Nbv glVertexAttrib4Nbv;
+  GdkGLProc_glVertexAttrib4Niv glVertexAttrib4Niv;
+  GdkGLProc_glVertexAttrib4Nsv glVertexAttrib4Nsv;
+  GdkGLProc_glVertexAttrib4Nub glVertexAttrib4Nub;
+  GdkGLProc_glVertexAttrib4Nubv glVertexAttrib4Nubv;
+  GdkGLProc_glVertexAttrib4Nuiv glVertexAttrib4Nuiv;
+  GdkGLProc_glVertexAttrib4Nusv glVertexAttrib4Nusv;
+  GdkGLProc_glVertexAttrib4bv glVertexAttrib4bv;
+  GdkGLProc_glVertexAttrib4d glVertexAttrib4d;
+  GdkGLProc_glVertexAttrib4dv glVertexAttrib4dv;
+  GdkGLProc_glVertexAttrib4f glVertexAttrib4f;
+  GdkGLProc_glVertexAttrib4fv glVertexAttrib4fv;
+  GdkGLProc_glVertexAttrib4iv glVertexAttrib4iv;
+  GdkGLProc_glVertexAttrib4s glVertexAttrib4s;
+  GdkGLProc_glVertexAttrib4sv glVertexAttrib4sv;
+  GdkGLProc_glVertexAttrib4ubv glVertexAttrib4ubv;
+  GdkGLProc_glVertexAttrib4uiv glVertexAttrib4uiv;
+  GdkGLProc_glVertexAttrib4usv glVertexAttrib4usv;
+  GdkGLProc_glVertexAttribPointer glVertexAttribPointer;
+};
+
+GdkGL_GL_VERSION_2_0 *gdk_gl_get_GL_VERSION_2_0 (void);
+
+/*
+ * GL_VERSION_2_1
+ */
+
+/* glUniformMatrix2x3fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix2x3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix2x3fv (void);
+#define      gdk_gl_glUniformMatrix2x3fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix2x3fv) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix3x2fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix3x2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix3x2fv (void);
+#define      gdk_gl_glUniformMatrix3x2fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix3x2fv) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix2x4fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix2x4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix2x4fv (void);
+#define      gdk_gl_glUniformMatrix2x4fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix2x4fv) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix4x2fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix4x2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix4x2fv (void);
+#define      gdk_gl_glUniformMatrix4x2fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix4x2fv) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix3x4fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix3x4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix3x4fv (void);
+#define      gdk_gl_glUniformMatrix3x4fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix3x4fv) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix4x3fv */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix4x3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix4x3fv (void);
+#define      gdk_gl_glUniformMatrix4x3fv(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix4x3fv) (proc)) (location, count, transpose, value) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_2_1 GdkGL_GL_VERSION_2_1;
+
+struct _GdkGL_GL_VERSION_2_1
+{
+  GdkGLProc_glUniformMatrix2x3fv glUniformMatrix2x3fv;
+  GdkGLProc_glUniformMatrix3x2fv glUniformMatrix3x2fv;
+  GdkGLProc_glUniformMatrix2x4fv glUniformMatrix2x4fv;
+  GdkGLProc_glUniformMatrix4x2fv glUniformMatrix4x2fv;
+  GdkGLProc_glUniformMatrix3x4fv glUniformMatrix3x4fv;
+  GdkGLProc_glUniformMatrix4x3fv glUniformMatrix4x3fv;
+};
+
+GdkGL_GL_VERSION_2_1 *gdk_gl_get_GL_VERSION_2_1 (void);
+
+/*
+ * GL_VERSION_3_0
+ */
+
+/* glColorMaski */
+typedef void (APIENTRYP GdkGLProc_glColorMaski) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+GdkGLProc    gdk_gl_get_glColorMaski (void);
+#define      gdk_gl_glColorMaski(proc, index, r, g, b, a) \
+  ( ((GdkGLProc_glColorMaski) (proc)) (index, r, g, b, a) )
+
+/* glGetBooleani_v */
+typedef void (APIENTRYP GdkGLProc_glGetBooleani_v) (GLenum target, GLuint index, GLboolean *data);
+GdkGLProc    gdk_gl_get_glGetBooleani_v (void);
+#define      gdk_gl_glGetBooleani_v(proc, target, index, data) \
+  ( ((GdkGLProc_glGetBooleani_v) (proc)) (target, index, data) )
+
+/* glGetIntegeri_v */
+typedef void (APIENTRYP GdkGLProc_glGetIntegeri_v) (GLenum target, GLuint index, GLint *data);
+GdkGLProc    gdk_gl_get_glGetIntegeri_v (void);
+#define      gdk_gl_glGetIntegeri_v(proc, target, index, data) \
+  ( ((GdkGLProc_glGetIntegeri_v) (proc)) (target, index, data) )
+
+/* glEnablei */
+typedef void (APIENTRYP GdkGLProc_glEnablei) (GLenum target, GLuint index);
+GdkGLProc    gdk_gl_get_glEnablei (void);
+#define      gdk_gl_glEnablei(proc, target, index) \
+  ( ((GdkGLProc_glEnablei) (proc)) (target, index) )
+
+/* glDisablei */
+typedef void (APIENTRYP GdkGLProc_glDisablei) (GLenum target, GLuint index);
+GdkGLProc    gdk_gl_get_glDisablei (void);
+#define      gdk_gl_glDisablei(proc, target, index) \
+  ( ((GdkGLProc_glDisablei) (proc)) (target, index) )
+
+/* glIsEnabledi */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsEnabledi) (GLenum target, GLuint index);
+GdkGLProc    gdk_gl_get_glIsEnabledi (void);
+#define      gdk_gl_glIsEnabledi(proc, target, index) \
+  ( ((GdkGLProc_glIsEnabledi) (proc)) (target, index) )
+
+/* glBeginTransformFeedback */
+typedef void (APIENTRYP GdkGLProc_glBeginTransformFeedback) (GLenum primitiveMode);
+GdkGLProc    gdk_gl_get_glBeginTransformFeedback (void);
+#define      gdk_gl_glBeginTransformFeedback(proc, primitiveMode) \
+  ( ((GdkGLProc_glBeginTransformFeedback) (proc)) (primitiveMode) )
+
+/* glEndTransformFeedback */
+typedef void (APIENTRYP GdkGLProc_glEndTransformFeedback) (void);
+GdkGLProc    gdk_gl_get_glEndTransformFeedback (void);
+#define      gdk_gl_glEndTransformFeedback(proc) \
+  ( ((GdkGLProc_glEndTransformFeedback) (proc)) () )
+
+/* glBindBufferRange */
+typedef void (APIENTRYP GdkGLProc_glBindBufferRange) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+GdkGLProc    gdk_gl_get_glBindBufferRange (void);
+#define      gdk_gl_glBindBufferRange(proc, target, index, buffer, offset, size) \
+  ( ((GdkGLProc_glBindBufferRange) (proc)) (target, index, buffer, offset, size) )
+
+/* glBindBufferBase */
+typedef void (APIENTRYP GdkGLProc_glBindBufferBase) (GLenum target, GLuint index, GLuint buffer);
+GdkGLProc    gdk_gl_get_glBindBufferBase (void);
+#define      gdk_gl_glBindBufferBase(proc, target, index, buffer) \
+  ( ((GdkGLProc_glBindBufferBase) (proc)) (target, index, buffer) )
+
+/* glTransformFeedbackVaryings */
+typedef void (APIENTRYP GdkGLProc_glTransformFeedbackVaryings) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+GdkGLProc    gdk_gl_get_glTransformFeedbackVaryings (void);
+#define      gdk_gl_glTransformFeedbackVaryings(proc, program, count, varyings, bufferMode) \
+  ( ((GdkGLProc_glTransformFeedbackVaryings) (proc)) (program, count, varyings, bufferMode) )
+
+/* glGetTransformFeedbackVarying */
+typedef void (APIENTRYP GdkGLProc_glGetTransformFeedbackVarying) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+GdkGLProc    gdk_gl_get_glGetTransformFeedbackVarying (void);
+#define      gdk_gl_glGetTransformFeedbackVarying(proc, program, index, bufSize, length, size, type, name) \
+  ( ((GdkGLProc_glGetTransformFeedbackVarying) (proc)) (program, index, bufSize, length, size, type, name) )
+
+/* glClampColor */
+typedef void (APIENTRYP GdkGLProc_glClampColor) (GLenum target, GLenum clamp);
+GdkGLProc    gdk_gl_get_glClampColor (void);
+#define      gdk_gl_glClampColor(proc, target, clamp) \
+  ( ((GdkGLProc_glClampColor) (proc)) (target, clamp) )
+
+/* glBeginConditionalRender */
+typedef void (APIENTRYP GdkGLProc_glBeginConditionalRender) (GLuint id, GLenum mode);
+GdkGLProc    gdk_gl_get_glBeginConditionalRender (void);
+#define      gdk_gl_glBeginConditionalRender(proc, id, mode) \
+  ( ((GdkGLProc_glBeginConditionalRender) (proc)) (id, mode) )
+
+/* glEndConditionalRender */
+typedef void (APIENTRYP GdkGLProc_glEndConditionalRender) (void);
+GdkGLProc    gdk_gl_get_glEndConditionalRender (void);
+#define      gdk_gl_glEndConditionalRender(proc) \
+  ( ((GdkGLProc_glEndConditionalRender) (proc)) () )
+
+/* glVertexAttribIPointer */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribIPointer) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexAttribIPointer (void);
+#define      gdk_gl_glVertexAttribIPointer(proc, index, size, type, stride, pointer) \
+  ( ((GdkGLProc_glVertexAttribIPointer) (proc)) (index, size, type, stride, pointer) )
+
+/* glGetVertexAttribIiv */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribIiv) (GLuint index, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribIiv (void);
+#define      gdk_gl_glGetVertexAttribIiv(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribIiv) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribIuiv */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribIuiv) (GLuint index, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribIuiv (void);
+#define      gdk_gl_glGetVertexAttribIuiv(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribIuiv) (proc)) (index, pname, params) )
+
+/* glVertexAttribI1i */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1i) (GLuint index, GLint x);
+GdkGLProc    gdk_gl_get_glVertexAttribI1i (void);
+#define      gdk_gl_glVertexAttribI1i(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttribI1i) (proc)) (index, x) )
+
+/* glVertexAttribI2i */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2i) (GLuint index, GLint x, GLint y);
+GdkGLProc    gdk_gl_get_glVertexAttribI2i (void);
+#define      gdk_gl_glVertexAttribI2i(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttribI2i) (proc)) (index, x, y) )
+
+/* glVertexAttribI3i */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3i) (GLuint index, GLint x, GLint y, GLint z);
+GdkGLProc    gdk_gl_get_glVertexAttribI3i (void);
+#define      gdk_gl_glVertexAttribI3i(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttribI3i) (proc)) (index, x, y, z) )
+
+/* glVertexAttribI4i */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4i) (GLuint index, GLint x, GLint y, GLint z, GLint w);
+GdkGLProc    gdk_gl_get_glVertexAttribI4i (void);
+#define      gdk_gl_glVertexAttribI4i(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttribI4i) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttribI1ui */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1ui) (GLuint index, GLuint x);
+GdkGLProc    gdk_gl_get_glVertexAttribI1ui (void);
+#define      gdk_gl_glVertexAttribI1ui(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttribI1ui) (proc)) (index, x) )
+
+/* glVertexAttribI2ui */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2ui) (GLuint index, GLuint x, GLuint y);
+GdkGLProc    gdk_gl_get_glVertexAttribI2ui (void);
+#define      gdk_gl_glVertexAttribI2ui(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttribI2ui) (proc)) (index, x, y) )
+
+/* glVertexAttribI3ui */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3ui) (GLuint index, GLuint x, GLuint y, GLuint z);
+GdkGLProc    gdk_gl_get_glVertexAttribI3ui (void);
+#define      gdk_gl_glVertexAttribI3ui(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttribI3ui) (proc)) (index, x, y, z) )
+
+/* glVertexAttribI4ui */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4ui) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+GdkGLProc    gdk_gl_get_glVertexAttribI4ui (void);
+#define      gdk_gl_glVertexAttribI4ui(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttribI4ui) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttribI1iv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1iv) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI1iv (void);
+#define      gdk_gl_glVertexAttribI1iv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI1iv) (proc)) (index, v) )
+
+/* glVertexAttribI2iv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2iv) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI2iv (void);
+#define      gdk_gl_glVertexAttribI2iv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI2iv) (proc)) (index, v) )
+
+/* glVertexAttribI3iv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3iv) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI3iv (void);
+#define      gdk_gl_glVertexAttribI3iv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI3iv) (proc)) (index, v) )
+
+/* glVertexAttribI4iv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4iv) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4iv (void);
+#define      gdk_gl_glVertexAttribI4iv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4iv) (proc)) (index, v) )
+
+/* glVertexAttribI1uiv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1uiv) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI1uiv (void);
+#define      gdk_gl_glVertexAttribI1uiv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI1uiv) (proc)) (index, v) )
+
+/* glVertexAttribI2uiv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2uiv) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI2uiv (void);
+#define      gdk_gl_glVertexAttribI2uiv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI2uiv) (proc)) (index, v) )
+
+/* glVertexAttribI3uiv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3uiv) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI3uiv (void);
+#define      gdk_gl_glVertexAttribI3uiv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI3uiv) (proc)) (index, v) )
+
+/* glVertexAttribI4uiv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4uiv) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4uiv (void);
+#define      gdk_gl_glVertexAttribI4uiv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4uiv) (proc)) (index, v) )
+
+/* glVertexAttribI4bv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4bv) (GLuint index, const GLbyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4bv (void);
+#define      gdk_gl_glVertexAttribI4bv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4bv) (proc)) (index, v) )
+
+/* glVertexAttribI4sv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4sv) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4sv (void);
+#define      gdk_gl_glVertexAttribI4sv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4sv) (proc)) (index, v) )
+
+/* glVertexAttribI4ubv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4ubv) (GLuint index, const GLubyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4ubv (void);
+#define      gdk_gl_glVertexAttribI4ubv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4ubv) (proc)) (index, v) )
+
+/* glVertexAttribI4usv */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4usv) (GLuint index, const GLushort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4usv (void);
+#define      gdk_gl_glVertexAttribI4usv(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4usv) (proc)) (index, v) )
+
+/* glGetUniformuiv */
+typedef void (APIENTRYP GdkGLProc_glGetUniformuiv) (GLuint program, GLint location, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetUniformuiv (void);
+#define      gdk_gl_glGetUniformuiv(proc, program, location, params) \
+  ( ((GdkGLProc_glGetUniformuiv) (proc)) (program, location, params) )
+
+/* glBindFragDataLocation */
+typedef void (APIENTRYP GdkGLProc_glBindFragDataLocation) (GLuint program, GLuint color, const GLchar *name);
+GdkGLProc    gdk_gl_get_glBindFragDataLocation (void);
+#define      gdk_gl_glBindFragDataLocation(proc, program, color, name) \
+  ( ((GdkGLProc_glBindFragDataLocation) (proc)) (program, color, name) )
+
+/* glGetFragDataLocation */
+typedef GLint (APIENTRYP GdkGLProc_glGetFragDataLocation) (GLuint program, const GLchar *name);
+GdkGLProc    gdk_gl_get_glGetFragDataLocation (void);
+#define      gdk_gl_glGetFragDataLocation(proc, program, name) \
+  ( ((GdkGLProc_glGetFragDataLocation) (proc)) (program, name) )
+
+/* glUniform1ui */
+typedef void (APIENTRYP GdkGLProc_glUniform1ui) (GLint location, GLuint v0);
+GdkGLProc    gdk_gl_get_glUniform1ui (void);
+#define      gdk_gl_glUniform1ui(proc, location, v0) \
+  ( ((GdkGLProc_glUniform1ui) (proc)) (location, v0) )
+
+/* glUniform2ui */
+typedef void (APIENTRYP GdkGLProc_glUniform2ui) (GLint location, GLuint v0, GLuint v1);
+GdkGLProc    gdk_gl_get_glUniform2ui (void);
+#define      gdk_gl_glUniform2ui(proc, location, v0, v1) \
+  ( ((GdkGLProc_glUniform2ui) (proc)) (location, v0, v1) )
+
+/* glUniform3ui */
+typedef void (APIENTRYP GdkGLProc_glUniform3ui) (GLint location, GLuint v0, GLuint v1, GLuint v2);
+GdkGLProc    gdk_gl_get_glUniform3ui (void);
+#define      gdk_gl_glUniform3ui(proc, location, v0, v1, v2) \
+  ( ((GdkGLProc_glUniform3ui) (proc)) (location, v0, v1, v2) )
+
+/* glUniform4ui */
+typedef void (APIENTRYP GdkGLProc_glUniform4ui) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+GdkGLProc    gdk_gl_get_glUniform4ui (void);
+#define      gdk_gl_glUniform4ui(proc, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glUniform4ui) (proc)) (location, v0, v1, v2, v3) )
+
+/* glUniform1uiv */
+typedef void (APIENTRYP GdkGLProc_glUniform1uiv) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform1uiv (void);
+#define      gdk_gl_glUniform1uiv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform1uiv) (proc)) (location, count, value) )
+
+/* glUniform2uiv */
+typedef void (APIENTRYP GdkGLProc_glUniform2uiv) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform2uiv (void);
+#define      gdk_gl_glUniform2uiv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform2uiv) (proc)) (location, count, value) )
+
+/* glUniform3uiv */
+typedef void (APIENTRYP GdkGLProc_glUniform3uiv) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform3uiv (void);
+#define      gdk_gl_glUniform3uiv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform3uiv) (proc)) (location, count, value) )
+
+/* glUniform4uiv */
+typedef void (APIENTRYP GdkGLProc_glUniform4uiv) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform4uiv (void);
+#define      gdk_gl_glUniform4uiv(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform4uiv) (proc)) (location, count, value) )
+
+/* glTexParameterIiv */
+typedef void (APIENTRYP GdkGLProc_glTexParameterIiv) (GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glTexParameterIiv (void);
+#define      gdk_gl_glTexParameterIiv(proc, target, pname, params) \
+  ( ((GdkGLProc_glTexParameterIiv) (proc)) (target, pname, params) )
+
+/* glTexParameterIuiv */
+typedef void (APIENTRYP GdkGLProc_glTexParameterIuiv) (GLenum target, GLenum pname, const GLuint *params);
+GdkGLProc    gdk_gl_get_glTexParameterIuiv (void);
+#define      gdk_gl_glTexParameterIuiv(proc, target, pname, params) \
+  ( ((GdkGLProc_glTexParameterIuiv) (proc)) (target, pname, params) )
+
+/* glGetTexParameterIiv */
+typedef void (APIENTRYP GdkGLProc_glGetTexParameterIiv) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetTexParameterIiv (void);
+#define      gdk_gl_glGetTexParameterIiv(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetTexParameterIiv) (proc)) (target, pname, params) )
+
+/* glGetTexParameterIuiv */
+typedef void (APIENTRYP GdkGLProc_glGetTexParameterIuiv) (GLenum target, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetTexParameterIuiv (void);
+#define      gdk_gl_glGetTexParameterIuiv(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetTexParameterIuiv) (proc)) (target, pname, params) )
+
+/* glClearBufferiv */
+typedef void (APIENTRYP GdkGLProc_glClearBufferiv) (GLenum buffer, GLint drawbuffer, const GLint *value);
+GdkGLProc    gdk_gl_get_glClearBufferiv (void);
+#define      gdk_gl_glClearBufferiv(proc, buffer, drawbuffer, value) \
+  ( ((GdkGLProc_glClearBufferiv) (proc)) (buffer, drawbuffer, value) )
+
+/* glClearBufferuiv */
+typedef void (APIENTRYP GdkGLProc_glClearBufferuiv) (GLenum buffer, GLint drawbuffer, const GLuint *value);
+GdkGLProc    gdk_gl_get_glClearBufferuiv (void);
+#define      gdk_gl_glClearBufferuiv(proc, buffer, drawbuffer, value) \
+  ( ((GdkGLProc_glClearBufferuiv) (proc)) (buffer, drawbuffer, value) )
+
+/* glClearBufferfv */
+typedef void (APIENTRYP GdkGLProc_glClearBufferfv) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glClearBufferfv (void);
+#define      gdk_gl_glClearBufferfv(proc, buffer, drawbuffer, value) \
+  ( ((GdkGLProc_glClearBufferfv) (proc)) (buffer, drawbuffer, value) )
+
+/* glClearBufferfi */
+typedef void (APIENTRYP GdkGLProc_glClearBufferfi) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
+GdkGLProc    gdk_gl_get_glClearBufferfi (void);
+#define      gdk_gl_glClearBufferfi(proc, buffer, drawbuffer, depth, stencil) \
+  ( ((GdkGLProc_glClearBufferfi) (proc)) (buffer, drawbuffer, depth, stencil) )
+
+/* glGetStringi */
+typedef const GLubyte * (APIENTRYP GdkGLProc_glGetStringi) (GLenum name, GLuint index);
+GdkGLProc    gdk_gl_get_glGetStringi (void);
+#define      gdk_gl_glGetStringi(proc, name, index) \
+  ( ((GdkGLProc_glGetStringi) (proc)) (name, index) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_3_0 GdkGL_GL_VERSION_3_0;
+
+struct _GdkGL_GL_VERSION_3_0
+{
+  GdkGLProc_glColorMaski glColorMaski;
+  GdkGLProc_glGetBooleani_v glGetBooleani_v;
+  GdkGLProc_glGetIntegeri_v glGetIntegeri_v;
+  GdkGLProc_glEnablei glEnablei;
+  GdkGLProc_glDisablei glDisablei;
+  GdkGLProc_glIsEnabledi glIsEnabledi;
+  GdkGLProc_glBeginTransformFeedback glBeginTransformFeedback;
+  GdkGLProc_glEndTransformFeedback glEndTransformFeedback;
+  GdkGLProc_glBindBufferRange glBindBufferRange;
+  GdkGLProc_glBindBufferBase glBindBufferBase;
+  GdkGLProc_glTransformFeedbackVaryings glTransformFeedbackVaryings;
+  GdkGLProc_glGetTransformFeedbackVarying glGetTransformFeedbackVarying;
+  GdkGLProc_glClampColor glClampColor;
+  GdkGLProc_glBeginConditionalRender glBeginConditionalRender;
+  GdkGLProc_glEndConditionalRender glEndConditionalRender;
+  GdkGLProc_glVertexAttribIPointer glVertexAttribIPointer;
+  GdkGLProc_glGetVertexAttribIiv glGetVertexAttribIiv;
+  GdkGLProc_glGetVertexAttribIuiv glGetVertexAttribIuiv;
+  GdkGLProc_glVertexAttribI1i glVertexAttribI1i;
+  GdkGLProc_glVertexAttribI2i glVertexAttribI2i;
+  GdkGLProc_glVertexAttribI3i glVertexAttribI3i;
+  GdkGLProc_glVertexAttribI4i glVertexAttribI4i;
+  GdkGLProc_glVertexAttribI1ui glVertexAttribI1ui;
+  GdkGLProc_glVertexAttribI2ui glVertexAttribI2ui;
+  GdkGLProc_glVertexAttribI3ui glVertexAttribI3ui;
+  GdkGLProc_glVertexAttribI4ui glVertexAttribI4ui;
+  GdkGLProc_glVertexAttribI1iv glVertexAttribI1iv;
+  GdkGLProc_glVertexAttribI2iv glVertexAttribI2iv;
+  GdkGLProc_glVertexAttribI3iv glVertexAttribI3iv;
+  GdkGLProc_glVertexAttribI4iv glVertexAttribI4iv;
+  GdkGLProc_glVertexAttribI1uiv glVertexAttribI1uiv;
+  GdkGLProc_glVertexAttribI2uiv glVertexAttribI2uiv;
+  GdkGLProc_glVertexAttribI3uiv glVertexAttribI3uiv;
+  GdkGLProc_glVertexAttribI4uiv glVertexAttribI4uiv;
+  GdkGLProc_glVertexAttribI4bv glVertexAttribI4bv;
+  GdkGLProc_glVertexAttribI4sv glVertexAttribI4sv;
+  GdkGLProc_glVertexAttribI4ubv glVertexAttribI4ubv;
+  GdkGLProc_glVertexAttribI4usv glVertexAttribI4usv;
+  GdkGLProc_glGetUniformuiv glGetUniformuiv;
+  GdkGLProc_glBindFragDataLocation glBindFragDataLocation;
+  GdkGLProc_glGetFragDataLocation glGetFragDataLocation;
+  GdkGLProc_glUniform1ui glUniform1ui;
+  GdkGLProc_glUniform2ui glUniform2ui;
+  GdkGLProc_glUniform3ui glUniform3ui;
+  GdkGLProc_glUniform4ui glUniform4ui;
+  GdkGLProc_glUniform1uiv glUniform1uiv;
+  GdkGLProc_glUniform2uiv glUniform2uiv;
+  GdkGLProc_glUniform3uiv glUniform3uiv;
+  GdkGLProc_glUniform4uiv glUniform4uiv;
+  GdkGLProc_glTexParameterIiv glTexParameterIiv;
+  GdkGLProc_glTexParameterIuiv glTexParameterIuiv;
+  GdkGLProc_glGetTexParameterIiv glGetTexParameterIiv;
+  GdkGLProc_glGetTexParameterIuiv glGetTexParameterIuiv;
+  GdkGLProc_glClearBufferiv glClearBufferiv;
+  GdkGLProc_glClearBufferuiv glClearBufferuiv;
+  GdkGLProc_glClearBufferfv glClearBufferfv;
+  GdkGLProc_glClearBufferfi glClearBufferfi;
+  GdkGLProc_glGetStringi glGetStringi;
+};
+
+GdkGL_GL_VERSION_3_0 *gdk_gl_get_GL_VERSION_3_0 (void);
+
+/*
+ * GL_VERSION_3_1
+ */
+
+/* glDrawArraysInstanced */
+typedef void (APIENTRYP GdkGLProc_glDrawArraysInstanced) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glDrawArraysInstanced (void);
+#define      gdk_gl_glDrawArraysInstanced(proc, mode, first, count, primcount) \
+  ( ((GdkGLProc_glDrawArraysInstanced) (proc)) (mode, first, count, primcount) )
+
+/* glDrawElementsInstanced */
+typedef void (APIENTRYP GdkGLProc_glDrawElementsInstanced) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glDrawElementsInstanced (void);
+#define      gdk_gl_glDrawElementsInstanced(proc, mode, count, type, indices, primcount) \
+  ( ((GdkGLProc_glDrawElementsInstanced) (proc)) (mode, count, type, indices, primcount) )
+
+/* glTexBuffer */
+typedef void (APIENTRYP GdkGLProc_glTexBuffer) (GLenum target, GLenum internalformat, GLuint buffer);
+GdkGLProc    gdk_gl_get_glTexBuffer (void);
+#define      gdk_gl_glTexBuffer(proc, target, internalformat, buffer) \
+  ( ((GdkGLProc_glTexBuffer) (proc)) (target, internalformat, buffer) )
+
+/* glPrimitiveRestartIndex */
+typedef void (APIENTRYP GdkGLProc_glPrimitiveRestartIndex) (GLuint index);
+GdkGLProc    gdk_gl_get_glPrimitiveRestartIndex (void);
+#define      gdk_gl_glPrimitiveRestartIndex(proc, index) \
+  ( ((GdkGLProc_glPrimitiveRestartIndex) (proc)) (index) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_3_1 GdkGL_GL_VERSION_3_1;
+
+struct _GdkGL_GL_VERSION_3_1
+{
+  GdkGLProc_glDrawArraysInstanced glDrawArraysInstanced;
+  GdkGLProc_glDrawElementsInstanced glDrawElementsInstanced;
+  GdkGLProc_glTexBuffer glTexBuffer;
+  GdkGLProc_glPrimitiveRestartIndex glPrimitiveRestartIndex;
+};
+
+GdkGL_GL_VERSION_3_1 *gdk_gl_get_GL_VERSION_3_1 (void);
+
+/*
+ * GL_VERSION_3_2
+ */
+
+/* glGetInteger64i_v */
+typedef void (APIENTRYP GdkGLProc_glGetInteger64i_v) (GLenum target, GLuint index, GLint64 *data);
+GdkGLProc    gdk_gl_get_glGetInteger64i_v (void);
+#define      gdk_gl_glGetInteger64i_v(proc, target, index, data) \
+  ( ((GdkGLProc_glGetInteger64i_v) (proc)) (target, index, data) )
+
+/* glGetBufferParameteri64v */
+typedef void (APIENTRYP GdkGLProc_glGetBufferParameteri64v) (GLenum target, GLenum pname, GLint64 *params);
+GdkGLProc    gdk_gl_get_glGetBufferParameteri64v (void);
+#define      gdk_gl_glGetBufferParameteri64v(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetBufferParameteri64v) (proc)) (target, pname, params) )
+
+/* glProgramParameteri */
+typedef void (APIENTRYP GdkGLProc_glProgramParameteri) (GLuint program, GLenum pname, GLint value);
+GdkGLProc    gdk_gl_get_glProgramParameteri (void);
+#define      gdk_gl_glProgramParameteri(proc, program, pname, value) \
+  ( ((GdkGLProc_glProgramParameteri) (proc)) (program, pname, value) )
+
+/* glFramebufferTexture */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTexture) (GLenum target, GLenum attachment, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glFramebufferTexture (void);
+#define      gdk_gl_glFramebufferTexture(proc, target, attachment, texture, level) \
+  ( ((GdkGLProc_glFramebufferTexture) (proc)) (target, attachment, texture, level) )
+
+/* glFramebufferTextureFace */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureFace) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+GdkGLProc    gdk_gl_get_glFramebufferTextureFace (void);
+#define      gdk_gl_glFramebufferTextureFace(proc, target, attachment, texture, level, face) \
+  ( ((GdkGLProc_glFramebufferTextureFace) (proc)) (target, attachment, texture, level, face) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_VERSION_3_2 GdkGL_GL_VERSION_3_2;
+
+struct _GdkGL_GL_VERSION_3_2
+{
+  GdkGLProc_glGetInteger64i_v glGetInteger64i_v;
+  GdkGLProc_glGetBufferParameteri64v glGetBufferParameteri64v;
+  GdkGLProc_glProgramParameteri glProgramParameteri;
+  GdkGLProc_glFramebufferTexture glFramebufferTexture;
+  GdkGLProc_glFramebufferTextureFace glFramebufferTextureFace;
+};
+
+GdkGL_GL_VERSION_3_2 *gdk_gl_get_GL_VERSION_3_2 (void);
+
+/*
+ * GL_ARB_multitexture
+ */
+
+/* glActiveTextureARB */
+typedef void (APIENTRYP GdkGLProc_glActiveTextureARB) (GLenum texture);
+GdkGLProc    gdk_gl_get_glActiveTextureARB (void);
 #define      gdk_gl_glActiveTextureARB(proc, texture) \
   ( ((GdkGLProc_glActiveTextureARB) (proc)) (texture) )
 
 /* glClientActiveTextureARB */
-typedef void (APIENTRY * GdkGLProc_glClientActiveTextureARB) (GLenum texture);
+typedef void (APIENTRYP GdkGLProc_glClientActiveTextureARB) (GLenum texture);
 GdkGLProc    gdk_gl_get_glClientActiveTextureARB (void);
 #define      gdk_gl_glClientActiveTextureARB(proc, texture) \
   ( ((GdkGLProc_glClientActiveTextureARB) (proc)) (texture) )
 
 /* glMultiTexCoord1dARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1dARB) (GLenum target, GLdouble s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1dARB) (GLenum target, GLdouble s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1dARB (void);
 #define      gdk_gl_glMultiTexCoord1dARB(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1dARB) (proc)) (target, s) )
 
 /* glMultiTexCoord1dvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1dvARB) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1dvARB) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1dvARB (void);
 #define      gdk_gl_glMultiTexCoord1dvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1dvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord1fARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1fARB) (GLenum target, GLfloat s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1fARB) (GLenum target, GLfloat s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1fARB (void);
 #define      gdk_gl_glMultiTexCoord1fARB(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1fARB) (proc)) (target, s) )
 
 /* glMultiTexCoord1fvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1fvARB) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1fvARB) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1fvARB (void);
 #define      gdk_gl_glMultiTexCoord1fvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1fvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord1iARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1iARB) (GLenum target, GLint s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1iARB) (GLenum target, GLint s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1iARB (void);
 #define      gdk_gl_glMultiTexCoord1iARB(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1iARB) (proc)) (target, s) )
 
 /* glMultiTexCoord1ivARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1ivARB) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1ivARB) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1ivARB (void);
 #define      gdk_gl_glMultiTexCoord1ivARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1ivARB) (proc)) (target, v) )
 
 /* glMultiTexCoord1sARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1sARB) (GLenum target, GLshort s);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1sARB) (GLenum target, GLshort s);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1sARB (void);
 #define      gdk_gl_glMultiTexCoord1sARB(proc, target, s) \
   ( ((GdkGLProc_glMultiTexCoord1sARB) (proc)) (target, s) )
 
 /* glMultiTexCoord1svARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1svARB) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1svARB) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord1svARB (void);
 #define      gdk_gl_glMultiTexCoord1svARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord1svARB) (proc)) (target, v) )
 
 /* glMultiTexCoord2dARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2dARB) (GLenum target, GLdouble s, GLdouble t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2dARB) (GLenum target, GLdouble s, GLdouble t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2dARB (void);
 #define      gdk_gl_glMultiTexCoord2dARB(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2dARB) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2dvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2dvARB) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2dvARB) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2dvARB (void);
 #define      gdk_gl_glMultiTexCoord2dvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2dvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord2fARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2fARB) (GLenum target, GLfloat s, GLfloat t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2fARB) (GLenum target, GLfloat s, GLfloat t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2fARB (void);
 #define      gdk_gl_glMultiTexCoord2fARB(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2fARB) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2fvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2fvARB) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2fvARB) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2fvARB (void);
 #define      gdk_gl_glMultiTexCoord2fvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2fvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord2iARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2iARB) (GLenum target, GLint s, GLint t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2iARB) (GLenum target, GLint s, GLint t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2iARB (void);
 #define      gdk_gl_glMultiTexCoord2iARB(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2iARB) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2ivARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2ivARB) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2ivARB) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2ivARB (void);
 #define      gdk_gl_glMultiTexCoord2ivARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2ivARB) (proc)) (target, v) )
 
 /* glMultiTexCoord2sARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2sARB) (GLenum target, GLshort s, GLshort t);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2sARB) (GLenum target, GLshort s, GLshort t);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2sARB (void);
 #define      gdk_gl_glMultiTexCoord2sARB(proc, target, s, t) \
   ( ((GdkGLProc_glMultiTexCoord2sARB) (proc)) (target, s, t) )
 
 /* glMultiTexCoord2svARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2svARB) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2svARB) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord2svARB (void);
 #define      gdk_gl_glMultiTexCoord2svARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord2svARB) (proc)) (target, v) )
 
 /* glMultiTexCoord3dARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3dARB (void);
 #define      gdk_gl_glMultiTexCoord3dARB(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3dARB) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3dvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3dvARB) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3dvARB) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3dvARB (void);
 #define      gdk_gl_glMultiTexCoord3dvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3dvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord3fARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3fARB (void);
 #define      gdk_gl_glMultiTexCoord3fARB(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3fARB) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3fvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3fvARB) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3fvARB) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3fvARB (void);
 #define      gdk_gl_glMultiTexCoord3fvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3fvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord3iARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3iARB) (GLenum target, GLint s, GLint t, GLint r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3iARB) (GLenum target, GLint s, GLint t, GLint r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3iARB (void);
 #define      gdk_gl_glMultiTexCoord3iARB(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3iARB) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3ivARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3ivARB) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3ivARB) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3ivARB (void);
 #define      gdk_gl_glMultiTexCoord3ivARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3ivARB) (proc)) (target, v) )
 
 /* glMultiTexCoord3sARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3sARB) (GLenum target, GLshort s, GLshort t, GLshort r);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3sARB) (GLenum target, GLshort s, GLshort t, GLshort r);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3sARB (void);
 #define      gdk_gl_glMultiTexCoord3sARB(proc, target, s, t, r) \
   ( ((GdkGLProc_glMultiTexCoord3sARB) (proc)) (target, s, t, r) )
 
 /* glMultiTexCoord3svARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3svARB) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3svARB) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord3svARB (void);
 #define      gdk_gl_glMultiTexCoord3svARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord3svARB) (proc)) (target, v) )
 
 /* glMultiTexCoord4dARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4dARB (void);
 #define      gdk_gl_glMultiTexCoord4dARB(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4dARB) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4dvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4dvARB) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4dvARB) (GLenum target, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4dvARB (void);
 #define      gdk_gl_glMultiTexCoord4dvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4dvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord4fARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4fARB (void);
 #define      gdk_gl_glMultiTexCoord4fARB(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4fARB) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4fvARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4fvARB) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4fvARB) (GLenum target, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4fvARB (void);
 #define      gdk_gl_glMultiTexCoord4fvARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4fvARB) (proc)) (target, v) )
 
 /* glMultiTexCoord4iARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4iARB) (GLenum target, GLint s, GLint t, GLint r, GLint q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4iARB) (GLenum target, GLint s, GLint t, GLint r, GLint q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4iARB (void);
 #define      gdk_gl_glMultiTexCoord4iARB(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4iARB) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4ivARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4ivARB) (GLenum target, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4ivARB) (GLenum target, const GLint *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4ivARB (void);
 #define      gdk_gl_glMultiTexCoord4ivARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4ivARB) (proc)) (target, v) )
 
 /* glMultiTexCoord4sARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4sARB) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4sARB) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4sARB (void);
 #define      gdk_gl_glMultiTexCoord4sARB(proc, target, s, t, r, q) \
   ( ((GdkGLProc_glMultiTexCoord4sARB) (proc)) (target, s, t, r, q) )
 
 /* glMultiTexCoord4svARB */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4svARB) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4svARB) (GLenum target, const GLshort *v);
 GdkGLProc    gdk_gl_get_glMultiTexCoord4svARB (void);
 #define      gdk_gl_glMultiTexCoord4svARB(proc, target, v) \
   ( ((GdkGLProc_glMultiTexCoord4svARB) (proc)) (target, v) )
@@ -1255,25 +2680,25 @@ GdkGL_GL_ARB_multitexture *gdk_gl_get_GL_ARB_multitexture (void);
  */
 
 /* glLoadTransposeMatrixfARB */
-typedef void (APIENTRY * GdkGLProc_glLoadTransposeMatrixfARB) (const GLfloat *m);
+typedef void (APIENTRYP GdkGLProc_glLoadTransposeMatrixfARB) (const GLfloat *m);
 GdkGLProc    gdk_gl_get_glLoadTransposeMatrixfARB (void);
 #define      gdk_gl_glLoadTransposeMatrixfARB(proc, m) \
   ( ((GdkGLProc_glLoadTransposeMatrixfARB) (proc)) (m) )
 
 /* glLoadTransposeMatrixdARB */
-typedef void (APIENTRY * GdkGLProc_glLoadTransposeMatrixdARB) (const GLdouble *m);
+typedef void (APIENTRYP GdkGLProc_glLoadTransposeMatrixdARB) (const GLdouble *m);
 GdkGLProc    gdk_gl_get_glLoadTransposeMatrixdARB (void);
 #define      gdk_gl_glLoadTransposeMatrixdARB(proc, m) \
   ( ((GdkGLProc_glLoadTransposeMatrixdARB) (proc)) (m) )
 
 /* glMultTransposeMatrixfARB */
-typedef void (APIENTRY * GdkGLProc_glMultTransposeMatrixfARB) (const GLfloat *m);
+typedef void (APIENTRYP GdkGLProc_glMultTransposeMatrixfARB) (const GLfloat *m);
 GdkGLProc    gdk_gl_get_glMultTransposeMatrixfARB (void);
 #define      gdk_gl_glMultTransposeMatrixfARB(proc, m) \
   ( ((GdkGLProc_glMultTransposeMatrixfARB) (proc)) (m) )
 
 /* glMultTransposeMatrixdARB */
-typedef void (APIENTRY * GdkGLProc_glMultTransposeMatrixdARB) (const GLdouble *m);
+typedef void (APIENTRYP GdkGLProc_glMultTransposeMatrixdARB) (const GLdouble *m);
 GdkGLProc    gdk_gl_get_glMultTransposeMatrixdARB (void);
 #define      gdk_gl_glMultTransposeMatrixdARB(proc, m) \
   ( ((GdkGLProc_glMultTransposeMatrixdARB) (proc)) (m) )
@@ -1297,7 +2722,7 @@ GdkGL_GL_ARB_transpose_matrix *gdk_gl_get_GL_ARB_transpose_matrix (void);
  */
 
 /* glSampleCoverageARB */
-typedef void (APIENTRY * GdkGLProc_glSampleCoverageARB) (GLclampf value, GLboolean invert);
+typedef void (APIENTRYP GdkGLProc_glSampleCoverageARB) (GLclampf value, GLboolean invert);
 GdkGLProc    gdk_gl_get_glSampleCoverageARB (void);
 #define      gdk_gl_glSampleCoverageARB(proc, value, invert) \
   ( ((GdkGLProc_glSampleCoverageARB) (proc)) (value, invert) )
@@ -1318,43 +2743,43 @@ GdkGL_GL_ARB_multisample *gdk_gl_get_GL_ARB_multisample (void);
  */
 
 /* glCompressedTexImage3DARB */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexImage3DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glCompressedTexImage3DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glCompressedTexImage3DARB (void);
 #define      gdk_gl_glCompressedTexImage3DARB(proc, target, level, internalformat, width, height, depth, border, imageSize, data) \
   ( ((GdkGLProc_glCompressedTexImage3DARB) (proc)) (target, level, internalformat, width, height, depth, border, imageSize, data) )
 
 /* glCompressedTexImage2DARB */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexImage2DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glCompressedTexImage2DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glCompressedTexImage2DARB (void);
 #define      gdk_gl_glCompressedTexImage2DARB(proc, target, level, internalformat, width, height, border, imageSize, data) \
   ( ((GdkGLProc_glCompressedTexImage2DARB) (proc)) (target, level, internalformat, width, height, border, imageSize, data) )
 
 /* glCompressedTexImage1DARB */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexImage1DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glCompressedTexImage1DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glCompressedTexImage1DARB (void);
 #define      gdk_gl_glCompressedTexImage1DARB(proc, target, level, internalformat, width, border, imageSize, data) \
   ( ((GdkGLProc_glCompressedTexImage1DARB) (proc)) (target, level, internalformat, width, border, imageSize, data) )
 
 /* glCompressedTexSubImage3DARB */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexSubImage3DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glCompressedTexSubImage3DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glCompressedTexSubImage3DARB (void);
 #define      gdk_gl_glCompressedTexSubImage3DARB(proc, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) \
   ( ((GdkGLProc_glCompressedTexSubImage3DARB) (proc)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) )
 
 /* glCompressedTexSubImage2DARB */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexSubImage2DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glCompressedTexSubImage2DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glCompressedTexSubImage2DARB (void);
 #define      gdk_gl_glCompressedTexSubImage2DARB(proc, target, level, xoffset, yoffset, width, height, format, imageSize, data) \
   ( ((GdkGLProc_glCompressedTexSubImage2DARB) (proc)) (target, level, xoffset, yoffset, width, height, format, imageSize, data) )
 
 /* glCompressedTexSubImage1DARB */
-typedef void (APIENTRY * GdkGLProc_glCompressedTexSubImage1DARB) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glCompressedTexSubImage1DARB) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glCompressedTexSubImage1DARB (void);
 #define      gdk_gl_glCompressedTexSubImage1DARB(proc, target, level, xoffset, width, format, imageSize, data) \
   ( ((GdkGLProc_glCompressedTexSubImage1DARB) (proc)) (target, level, xoffset, width, format, imageSize, data) )
 
 /* glGetCompressedTexImageARB */
-typedef void (APIENTRY * GdkGLProc_glGetCompressedTexImageARB) (GLenum target, GLint level, GLvoid *img);
+typedef void (APIENTRYP GdkGLProc_glGetCompressedTexImageARB) (GLenum target, GLint level, GLvoid *img);
 GdkGLProc    gdk_gl_get_glGetCompressedTexImageARB (void);
 #define      gdk_gl_glGetCompressedTexImageARB(proc, target, level, img) \
   ( ((GdkGLProc_glGetCompressedTexImageARB) (proc)) (target, level, img) )
@@ -1381,13 +2806,13 @@ GdkGL_GL_ARB_texture_compression *gdk_gl_get_GL_ARB_texture_compression (void);
  */
 
 /* glPointParameterfARB */
-typedef void (APIENTRY * GdkGLProc_glPointParameterfARB) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP GdkGLProc_glPointParameterfARB) (GLenum pname, GLfloat param);
 GdkGLProc    gdk_gl_get_glPointParameterfARB (void);
 #define      gdk_gl_glPointParameterfARB(proc, pname, param) \
   ( ((GdkGLProc_glPointParameterfARB) (proc)) (pname, param) )
 
 /* glPointParameterfvARB */
-typedef void (APIENTRY * GdkGLProc_glPointParameterfvARB) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glPointParameterfvARB) (GLenum pname, const GLfloat *params);
 GdkGLProc    gdk_gl_get_glPointParameterfvARB (void);
 #define      gdk_gl_glPointParameterfvARB(proc, pname, params) \
   ( ((GdkGLProc_glPointParameterfvARB) (proc)) (pname, params) )
@@ -1409,61 +2834,61 @@ GdkGL_GL_ARB_point_parameters *gdk_gl_get_GL_ARB_point_parameters (void);
  */
 
 /* glWeightbvARB */
-typedef void (APIENTRY * GdkGLProc_glWeightbvARB) (GLint size, const GLbyte *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightbvARB) (GLint size, const GLbyte *weights);
 GdkGLProc    gdk_gl_get_glWeightbvARB (void);
 #define      gdk_gl_glWeightbvARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightbvARB) (proc)) (size, weights) )
 
 /* glWeightsvARB */
-typedef void (APIENTRY * GdkGLProc_glWeightsvARB) (GLint size, const GLshort *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightsvARB) (GLint size, const GLshort *weights);
 GdkGLProc    gdk_gl_get_glWeightsvARB (void);
 #define      gdk_gl_glWeightsvARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightsvARB) (proc)) (size, weights) )
 
 /* glWeightivARB */
-typedef void (APIENTRY * GdkGLProc_glWeightivARB) (GLint size, const GLint *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightivARB) (GLint size, const GLint *weights);
 GdkGLProc    gdk_gl_get_glWeightivARB (void);
 #define      gdk_gl_glWeightivARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightivARB) (proc)) (size, weights) )
 
 /* glWeightfvARB */
-typedef void (APIENTRY * GdkGLProc_glWeightfvARB) (GLint size, const GLfloat *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightfvARB) (GLint size, const GLfloat *weights);
 GdkGLProc    gdk_gl_get_glWeightfvARB (void);
 #define      gdk_gl_glWeightfvARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightfvARB) (proc)) (size, weights) )
 
 /* glWeightdvARB */
-typedef void (APIENTRY * GdkGLProc_glWeightdvARB) (GLint size, const GLdouble *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightdvARB) (GLint size, const GLdouble *weights);
 GdkGLProc    gdk_gl_get_glWeightdvARB (void);
 #define      gdk_gl_glWeightdvARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightdvARB) (proc)) (size, weights) )
 
 /* glWeightubvARB */
-typedef void (APIENTRY * GdkGLProc_glWeightubvARB) (GLint size, const GLubyte *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightubvARB) (GLint size, const GLubyte *weights);
 GdkGLProc    gdk_gl_get_glWeightubvARB (void);
 #define      gdk_gl_glWeightubvARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightubvARB) (proc)) (size, weights) )
 
 /* glWeightusvARB */
-typedef void (APIENTRY * GdkGLProc_glWeightusvARB) (GLint size, const GLushort *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightusvARB) (GLint size, const GLushort *weights);
 GdkGLProc    gdk_gl_get_glWeightusvARB (void);
 #define      gdk_gl_glWeightusvARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightusvARB) (proc)) (size, weights) )
 
 /* glWeightuivARB */
-typedef void (APIENTRY * GdkGLProc_glWeightuivARB) (GLint size, const GLuint *weights);
+typedef void (APIENTRYP GdkGLProc_glWeightuivARB) (GLint size, const GLuint *weights);
 GdkGLProc    gdk_gl_get_glWeightuivARB (void);
 #define      gdk_gl_glWeightuivARB(proc, size, weights) \
   ( ((GdkGLProc_glWeightuivARB) (proc)) (size, weights) )
 
 /* glWeightPointerARB */
-typedef void (APIENTRY * GdkGLProc_glWeightPointerARB) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP GdkGLProc_glWeightPointerARB) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
 GdkGLProc    gdk_gl_get_glWeightPointerARB (void);
 #define      gdk_gl_glWeightPointerARB(proc, size, type, stride, pointer) \
   ( ((GdkGLProc_glWeightPointerARB) (proc)) (size, type, stride, pointer) )
 
 /* glVertexBlendARB */
-typedef void (APIENTRY * GdkGLProc_glVertexBlendARB) (GLint count);
+typedef void (APIENTRYP GdkGLProc_glVertexBlendARB) (GLint count);
 GdkGLProc    gdk_gl_get_glVertexBlendARB (void);
 #define      gdk_gl_glVertexBlendARB(proc, count) \
   ( ((GdkGLProc_glVertexBlendARB) (proc)) (count) )
@@ -1493,31 +2918,31 @@ GdkGL_GL_ARB_vertex_blend *gdk_gl_get_GL_ARB_vertex_blend (void);
  */
 
 /* glCurrentPaletteMatrixARB */
-typedef void (APIENTRY * GdkGLProc_glCurrentPaletteMatrixARB) (GLint index);
+typedef void (APIENTRYP GdkGLProc_glCurrentPaletteMatrixARB) (GLint index);
 GdkGLProc    gdk_gl_get_glCurrentPaletteMatrixARB (void);
 #define      gdk_gl_glCurrentPaletteMatrixARB(proc, index) \
   ( ((GdkGLProc_glCurrentPaletteMatrixARB) (proc)) (index) )
 
 /* glMatrixIndexubvARB */
-typedef void (APIENTRY * GdkGLProc_glMatrixIndexubvARB) (GLint size, const GLubyte *indices);
+typedef void (APIENTRYP GdkGLProc_glMatrixIndexubvARB) (GLint size, const GLubyte *indices);
 GdkGLProc    gdk_gl_get_glMatrixIndexubvARB (void);
 #define      gdk_gl_glMatrixIndexubvARB(proc, size, indices) \
   ( ((GdkGLProc_glMatrixIndexubvARB) (proc)) (size, indices) )
 
 /* glMatrixIndexusvARB */
-typedef void (APIENTRY * GdkGLProc_glMatrixIndexusvARB) (GLint size, const GLushort *indices);
+typedef void (APIENTRYP GdkGLProc_glMatrixIndexusvARB) (GLint size, const GLushort *indices);
 GdkGLProc    gdk_gl_get_glMatrixIndexusvARB (void);
 #define      gdk_gl_glMatrixIndexusvARB(proc, size, indices) \
   ( ((GdkGLProc_glMatrixIndexusvARB) (proc)) (size, indices) )
 
 /* glMatrixIndexuivARB */
-typedef void (APIENTRY * GdkGLProc_glMatrixIndexuivARB) (GLint size, const GLuint *indices);
+typedef void (APIENTRYP GdkGLProc_glMatrixIndexuivARB) (GLint size, const GLuint *indices);
 GdkGLProc    gdk_gl_get_glMatrixIndexuivARB (void);
 #define      gdk_gl_glMatrixIndexuivARB(proc, size, indices) \
   ( ((GdkGLProc_glMatrixIndexuivARB) (proc)) (size, indices) )
 
 /* glMatrixIndexPointerARB */
-typedef void (APIENTRY * GdkGLProc_glMatrixIndexPointerARB) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP GdkGLProc_glMatrixIndexPointerARB) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
 GdkGLProc    gdk_gl_get_glMatrixIndexPointerARB (void);
 #define      gdk_gl_glMatrixIndexPointerARB(proc, size, type, stride, pointer) \
   ( ((GdkGLProc_glMatrixIndexPointerARB) (proc)) (size, type, stride, pointer) )
@@ -1542,97 +2967,97 @@ GdkGL_GL_ARB_matrix_palette *gdk_gl_get_GL_ARB_matrix_palette (void);
  */
 
 /* glWindowPos2dARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2dARB) (GLdouble x, GLdouble y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2dARB) (GLdouble x, GLdouble y);
 GdkGLProc    gdk_gl_get_glWindowPos2dARB (void);
 #define      gdk_gl_glWindowPos2dARB(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2dARB) (proc)) (x, y) )
 
 /* glWindowPos2dvARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2dvARB) (const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2dvARB) (const GLdouble *v);
 GdkGLProc    gdk_gl_get_glWindowPos2dvARB (void);
 #define      gdk_gl_glWindowPos2dvARB(proc, v) \
   ( ((GdkGLProc_glWindowPos2dvARB) (proc)) (v) )
 
 /* glWindowPos2fARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2fARB) (GLfloat x, GLfloat y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2fARB) (GLfloat x, GLfloat y);
 GdkGLProc    gdk_gl_get_glWindowPos2fARB (void);
 #define      gdk_gl_glWindowPos2fARB(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2fARB) (proc)) (x, y) )
 
 /* glWindowPos2fvARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2fvARB) (const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2fvARB) (const GLfloat *v);
 GdkGLProc    gdk_gl_get_glWindowPos2fvARB (void);
 #define      gdk_gl_glWindowPos2fvARB(proc, v) \
   ( ((GdkGLProc_glWindowPos2fvARB) (proc)) (v) )
 
 /* glWindowPos2iARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2iARB) (GLint x, GLint y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2iARB) (GLint x, GLint y);
 GdkGLProc    gdk_gl_get_glWindowPos2iARB (void);
 #define      gdk_gl_glWindowPos2iARB(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2iARB) (proc)) (x, y) )
 
 /* glWindowPos2ivARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2ivARB) (const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2ivARB) (const GLint *v);
 GdkGLProc    gdk_gl_get_glWindowPos2ivARB (void);
 #define      gdk_gl_glWindowPos2ivARB(proc, v) \
   ( ((GdkGLProc_glWindowPos2ivARB) (proc)) (v) )
 
 /* glWindowPos2sARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2sARB) (GLshort x, GLshort y);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2sARB) (GLshort x, GLshort y);
 GdkGLProc    gdk_gl_get_glWindowPos2sARB (void);
 #define      gdk_gl_glWindowPos2sARB(proc, x, y) \
   ( ((GdkGLProc_glWindowPos2sARB) (proc)) (x, y) )
 
 /* glWindowPos2svARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2svARB) (const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos2svARB) (const GLshort *v);
 GdkGLProc    gdk_gl_get_glWindowPos2svARB (void);
 #define      gdk_gl_glWindowPos2svARB(proc, v) \
   ( ((GdkGLProc_glWindowPos2svARB) (proc)) (v) )
 
 /* glWindowPos3dARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3dARB) (GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3dARB) (GLdouble x, GLdouble y, GLdouble z);
 GdkGLProc    gdk_gl_get_glWindowPos3dARB (void);
 #define      gdk_gl_glWindowPos3dARB(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3dARB) (proc)) (x, y, z) )
 
 /* glWindowPos3dvARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3dvARB) (const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3dvARB) (const GLdouble *v);
 GdkGLProc    gdk_gl_get_glWindowPos3dvARB (void);
 #define      gdk_gl_glWindowPos3dvARB(proc, v) \
   ( ((GdkGLProc_glWindowPos3dvARB) (proc)) (v) )
 
 /* glWindowPos3fARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3fARB) (GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3fARB) (GLfloat x, GLfloat y, GLfloat z);
 GdkGLProc    gdk_gl_get_glWindowPos3fARB (void);
 #define      gdk_gl_glWindowPos3fARB(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3fARB) (proc)) (x, y, z) )
 
 /* glWindowPos3fvARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3fvARB) (const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3fvARB) (const GLfloat *v);
 GdkGLProc    gdk_gl_get_glWindowPos3fvARB (void);
 #define      gdk_gl_glWindowPos3fvARB(proc, v) \
   ( ((GdkGLProc_glWindowPos3fvARB) (proc)) (v) )
 
 /* glWindowPos3iARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3iARB) (GLint x, GLint y, GLint z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3iARB) (GLint x, GLint y, GLint z);
 GdkGLProc    gdk_gl_get_glWindowPos3iARB (void);
 #define      gdk_gl_glWindowPos3iARB(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3iARB) (proc)) (x, y, z) )
 
 /* glWindowPos3ivARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3ivARB) (const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3ivARB) (const GLint *v);
 GdkGLProc    gdk_gl_get_glWindowPos3ivARB (void);
 #define      gdk_gl_glWindowPos3ivARB(proc, v) \
   ( ((GdkGLProc_glWindowPos3ivARB) (proc)) (v) )
 
 /* glWindowPos3sARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3sARB) (GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3sARB) (GLshort x, GLshort y, GLshort z);
 GdkGLProc    gdk_gl_get_glWindowPos3sARB (void);
 #define      gdk_gl_glWindowPos3sARB(proc, x, y, z) \
   ( ((GdkGLProc_glWindowPos3sARB) (proc)) (x, y, z) )
 
 /* glWindowPos3svARB */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3svARB) (const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glWindowPos3svARB) (const GLshort *v);
 GdkGLProc    gdk_gl_get_glWindowPos3svARB (void);
 #define      gdk_gl_glWindowPos3svARB(proc, v) \
   ( ((GdkGLProc_glWindowPos3svARB) (proc)) (v) )
@@ -1668,373 +3093,373 @@ GdkGL_GL_ARB_window_pos *gdk_gl_get_GL_ARB_window_pos (void);
  */
 
 /* glVertexAttrib1dARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1dARB) (GLuint index, GLdouble x);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1dARB) (GLuint index, GLdouble x);
 GdkGLProc    gdk_gl_get_glVertexAttrib1dARB (void);
 #define      gdk_gl_glVertexAttrib1dARB(proc, index, x) \
   ( ((GdkGLProc_glVertexAttrib1dARB) (proc)) (index, x) )
 
 /* glVertexAttrib1dvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1dvARB) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1dvARB) (GLuint index, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib1dvARB (void);
 #define      gdk_gl_glVertexAttrib1dvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib1dvARB) (proc)) (index, v) )
 
 /* glVertexAttrib1fARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1fARB) (GLuint index, GLfloat x);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1fARB) (GLuint index, GLfloat x);
 GdkGLProc    gdk_gl_get_glVertexAttrib1fARB (void);
 #define      gdk_gl_glVertexAttrib1fARB(proc, index, x) \
   ( ((GdkGLProc_glVertexAttrib1fARB) (proc)) (index, x) )
 
 /* glVertexAttrib1fvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1fvARB) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1fvARB) (GLuint index, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib1fvARB (void);
 #define      gdk_gl_glVertexAttrib1fvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib1fvARB) (proc)) (index, v) )
 
 /* glVertexAttrib1sARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1sARB) (GLuint index, GLshort x);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1sARB) (GLuint index, GLshort x);
 GdkGLProc    gdk_gl_get_glVertexAttrib1sARB (void);
 #define      gdk_gl_glVertexAttrib1sARB(proc, index, x) \
   ( ((GdkGLProc_glVertexAttrib1sARB) (proc)) (index, x) )
 
 /* glVertexAttrib1svARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1svARB) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1svARB) (GLuint index, const GLshort *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib1svARB (void);
 #define      gdk_gl_glVertexAttrib1svARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib1svARB) (proc)) (index, v) )
 
 /* glVertexAttrib2dARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2dARB) (GLuint index, GLdouble x, GLdouble y);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2dARB) (GLuint index, GLdouble x, GLdouble y);
 GdkGLProc    gdk_gl_get_glVertexAttrib2dARB (void);
 #define      gdk_gl_glVertexAttrib2dARB(proc, index, x, y) \
   ( ((GdkGLProc_glVertexAttrib2dARB) (proc)) (index, x, y) )
 
 /* glVertexAttrib2dvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2dvARB) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2dvARB) (GLuint index, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib2dvARB (void);
 #define      gdk_gl_glVertexAttrib2dvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib2dvARB) (proc)) (index, v) )
 
 /* glVertexAttrib2fARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2fARB) (GLuint index, GLfloat x, GLfloat y);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2fARB) (GLuint index, GLfloat x, GLfloat y);
 GdkGLProc    gdk_gl_get_glVertexAttrib2fARB (void);
 #define      gdk_gl_glVertexAttrib2fARB(proc, index, x, y) \
   ( ((GdkGLProc_glVertexAttrib2fARB) (proc)) (index, x, y) )
 
 /* glVertexAttrib2fvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2fvARB) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2fvARB) (GLuint index, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib2fvARB (void);
 #define      gdk_gl_glVertexAttrib2fvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib2fvARB) (proc)) (index, v) )
 
 /* glVertexAttrib2sARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2sARB) (GLuint index, GLshort x, GLshort y);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2sARB) (GLuint index, GLshort x, GLshort y);
 GdkGLProc    gdk_gl_get_glVertexAttrib2sARB (void);
 #define      gdk_gl_glVertexAttrib2sARB(proc, index, x, y) \
   ( ((GdkGLProc_glVertexAttrib2sARB) (proc)) (index, x, y) )
 
 /* glVertexAttrib2svARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2svARB) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2svARB) (GLuint index, const GLshort *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib2svARB (void);
 #define      gdk_gl_glVertexAttrib2svARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib2svARB) (proc)) (index, v) )
 
 /* glVertexAttrib3dARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
 GdkGLProc    gdk_gl_get_glVertexAttrib3dARB (void);
 #define      gdk_gl_glVertexAttrib3dARB(proc, index, x, y, z) \
   ( ((GdkGLProc_glVertexAttrib3dARB) (proc)) (index, x, y, z) )
 
 /* glVertexAttrib3dvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3dvARB) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3dvARB) (GLuint index, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib3dvARB (void);
 #define      gdk_gl_glVertexAttrib3dvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib3dvARB) (proc)) (index, v) )
 
 /* glVertexAttrib3fARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
 GdkGLProc    gdk_gl_get_glVertexAttrib3fARB (void);
 #define      gdk_gl_glVertexAttrib3fARB(proc, index, x, y, z) \
   ( ((GdkGLProc_glVertexAttrib3fARB) (proc)) (index, x, y, z) )
 
 /* glVertexAttrib3fvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3fvARB) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3fvARB) (GLuint index, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib3fvARB (void);
 #define      gdk_gl_glVertexAttrib3fvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib3fvARB) (proc)) (index, v) )
 
 /* glVertexAttrib3sARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3sARB) (GLuint index, GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3sARB) (GLuint index, GLshort x, GLshort y, GLshort z);
 GdkGLProc    gdk_gl_get_glVertexAttrib3sARB (void);
 #define      gdk_gl_glVertexAttrib3sARB(proc, index, x, y, z) \
   ( ((GdkGLProc_glVertexAttrib3sARB) (proc)) (index, x, y, z) )
 
 /* glVertexAttrib3svARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3svARB) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3svARB) (GLuint index, const GLshort *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib3svARB (void);
 #define      gdk_gl_glVertexAttrib3svARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib3svARB) (proc)) (index, v) )
 
 /* glVertexAttrib4NbvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4NbvARB) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4NbvARB) (GLuint index, const GLbyte *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4NbvARB (void);
 #define      gdk_gl_glVertexAttrib4NbvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4NbvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4NivARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4NivARB) (GLuint index, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4NivARB) (GLuint index, const GLint *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4NivARB (void);
 #define      gdk_gl_glVertexAttrib4NivARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4NivARB) (proc)) (index, v) )
 
 /* glVertexAttrib4NsvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4NsvARB) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4NsvARB) (GLuint index, const GLshort *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4NsvARB (void);
 #define      gdk_gl_glVertexAttrib4NsvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4NsvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4NubARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4NubARB) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4NubARB) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
 GdkGLProc    gdk_gl_get_glVertexAttrib4NubARB (void);
 #define      gdk_gl_glVertexAttrib4NubARB(proc, index, x, y, z, w) \
   ( ((GdkGLProc_glVertexAttrib4NubARB) (proc)) (index, x, y, z, w) )
 
 /* glVertexAttrib4NubvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4NubvARB) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4NubvARB) (GLuint index, const GLubyte *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4NubvARB (void);
 #define      gdk_gl_glVertexAttrib4NubvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4NubvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4NuivARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4NuivARB) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4NuivARB) (GLuint index, const GLuint *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4NuivARB (void);
 #define      gdk_gl_glVertexAttrib4NuivARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4NuivARB) (proc)) (index, v) )
 
 /* glVertexAttrib4NusvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4NusvARB) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4NusvARB) (GLuint index, const GLushort *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4NusvARB (void);
 #define      gdk_gl_glVertexAttrib4NusvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4NusvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4bvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4bvARB) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4bvARB) (GLuint index, const GLbyte *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4bvARB (void);
 #define      gdk_gl_glVertexAttrib4bvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4bvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4dARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
 GdkGLProc    gdk_gl_get_glVertexAttrib4dARB (void);
 #define      gdk_gl_glVertexAttrib4dARB(proc, index, x, y, z, w) \
   ( ((GdkGLProc_glVertexAttrib4dARB) (proc)) (index, x, y, z, w) )
 
 /* glVertexAttrib4dvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4dvARB) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4dvARB) (GLuint index, const GLdouble *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4dvARB (void);
 #define      gdk_gl_glVertexAttrib4dvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4dvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4fARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
 GdkGLProc    gdk_gl_get_glVertexAttrib4fARB (void);
 #define      gdk_gl_glVertexAttrib4fARB(proc, index, x, y, z, w) \
   ( ((GdkGLProc_glVertexAttrib4fARB) (proc)) (index, x, y, z, w) )
 
 /* glVertexAttrib4fvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4fvARB) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4fvARB) (GLuint index, const GLfloat *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4fvARB (void);
 #define      gdk_gl_glVertexAttrib4fvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4fvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4ivARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4ivARB) (GLuint index, const GLint *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4ivARB) (GLuint index, const GLint *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4ivARB (void);
 #define      gdk_gl_glVertexAttrib4ivARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4ivARB) (proc)) (index, v) )
 
 /* glVertexAttrib4sARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4sARB) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4sARB) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
 GdkGLProc    gdk_gl_get_glVertexAttrib4sARB (void);
 #define      gdk_gl_glVertexAttrib4sARB(proc, index, x, y, z, w) \
   ( ((GdkGLProc_glVertexAttrib4sARB) (proc)) (index, x, y, z, w) )
 
 /* glVertexAttrib4svARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4svARB) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4svARB) (GLuint index, const GLshort *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4svARB (void);
 #define      gdk_gl_glVertexAttrib4svARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4svARB) (proc)) (index, v) )
 
 /* glVertexAttrib4ubvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4ubvARB) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4ubvARB) (GLuint index, const GLubyte *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4ubvARB (void);
 #define      gdk_gl_glVertexAttrib4ubvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4ubvARB) (proc)) (index, v) )
 
 /* glVertexAttrib4uivARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4uivARB) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4uivARB) (GLuint index, const GLuint *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4uivARB (void);
 #define      gdk_gl_glVertexAttrib4uivARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4uivARB) (proc)) (index, v) )
 
 /* glVertexAttrib4usvARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4usvARB) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4usvARB) (GLuint index, const GLushort *v);
 GdkGLProc    gdk_gl_get_glVertexAttrib4usvARB (void);
 #define      gdk_gl_glVertexAttrib4usvARB(proc, index, v) \
   ( ((GdkGLProc_glVertexAttrib4usvARB) (proc)) (index, v) )
 
 /* glVertexAttribPointerARB */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribPointerARB) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP GdkGLProc_glVertexAttribPointerARB) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
 GdkGLProc    gdk_gl_get_glVertexAttribPointerARB (void);
 #define      gdk_gl_glVertexAttribPointerARB(proc, index, size, type, normalized, stride, pointer) \
   ( ((GdkGLProc_glVertexAttribPointerARB) (proc)) (index, size, type, normalized, stride, pointer) )
 
 /* glEnableVertexAttribArrayARB */
-typedef void (APIENTRY * GdkGLProc_glEnableVertexAttribArrayARB) (GLuint index);
+typedef void (APIENTRYP GdkGLProc_glEnableVertexAttribArrayARB) (GLuint index);
 GdkGLProc    gdk_gl_get_glEnableVertexAttribArrayARB (void);
 #define      gdk_gl_glEnableVertexAttribArrayARB(proc, index) \
   ( ((GdkGLProc_glEnableVertexAttribArrayARB) (proc)) (index) )
 
 /* glDisableVertexAttribArrayARB */
-typedef void (APIENTRY * GdkGLProc_glDisableVertexAttribArrayARB) (GLuint index);
+typedef void (APIENTRYP GdkGLProc_glDisableVertexAttribArrayARB) (GLuint index);
 GdkGLProc    gdk_gl_get_glDisableVertexAttribArrayARB (void);
 #define      gdk_gl_glDisableVertexAttribArrayARB(proc, index) \
   ( ((GdkGLProc_glDisableVertexAttribArrayARB) (proc)) (index) )
 
 /* glProgramStringARB */
-typedef void (APIENTRY * GdkGLProc_glProgramStringARB) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
+typedef void (APIENTRYP GdkGLProc_glProgramStringARB) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
 GdkGLProc    gdk_gl_get_glProgramStringARB (void);
 #define      gdk_gl_glProgramStringARB(proc, target, format, len, string) \
   ( ((GdkGLProc_glProgramStringARB) (proc)) (target, format, len, string) )
 
 /* glBindProgramARB */
-typedef void (APIENTRY * GdkGLProc_glBindProgramARB) (GLenum target, GLuint program);
+typedef void (APIENTRYP GdkGLProc_glBindProgramARB) (GLenum target, GLuint program);
 GdkGLProc    gdk_gl_get_glBindProgramARB (void);
 #define      gdk_gl_glBindProgramARB(proc, target, program) \
   ( ((GdkGLProc_glBindProgramARB) (proc)) (target, program) )
 
 /* glDeleteProgramsARB */
-typedef void (APIENTRY * GdkGLProc_glDeleteProgramsARB) (GLsizei n, const GLuint *programs);
+typedef void (APIENTRYP GdkGLProc_glDeleteProgramsARB) (GLsizei n, const GLuint *programs);
 GdkGLProc    gdk_gl_get_glDeleteProgramsARB (void);
 #define      gdk_gl_glDeleteProgramsARB(proc, n, programs) \
   ( ((GdkGLProc_glDeleteProgramsARB) (proc)) (n, programs) )
 
 /* glGenProgramsARB */
-typedef void (APIENTRY * GdkGLProc_glGenProgramsARB) (GLsizei n, GLuint *programs);
+typedef void (APIENTRYP GdkGLProc_glGenProgramsARB) (GLsizei n, GLuint *programs);
 GdkGLProc    gdk_gl_get_glGenProgramsARB (void);
 #define      gdk_gl_glGenProgramsARB(proc, n, programs) \
   ( ((GdkGLProc_glGenProgramsARB) (proc)) (n, programs) )
 
 /* glProgramEnvParameter4dARB */
-typedef void (APIENTRY * GdkGLProc_glProgramEnvParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
 GdkGLProc    gdk_gl_get_glProgramEnvParameter4dARB (void);
 #define      gdk_gl_glProgramEnvParameter4dARB(proc, target, index, x, y, z, w) \
   ( ((GdkGLProc_glProgramEnvParameter4dARB) (proc)) (target, index, x, y, z, w) )
 
 /* glProgramEnvParameter4dvARB */
-typedef void (APIENTRY * GdkGLProc_glProgramEnvParameter4dvARB) (GLenum target, GLuint index, const GLdouble *params);
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameter4dvARB) (GLenum target, GLuint index, const GLdouble *params);
 GdkGLProc    gdk_gl_get_glProgramEnvParameter4dvARB (void);
 #define      gdk_gl_glProgramEnvParameter4dvARB(proc, target, index, params) \
   ( ((GdkGLProc_glProgramEnvParameter4dvARB) (proc)) (target, index, params) )
 
 /* glProgramEnvParameter4fARB */
-typedef void (APIENTRY * GdkGLProc_glProgramEnvParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
 GdkGLProc    gdk_gl_get_glProgramEnvParameter4fARB (void);
 #define      gdk_gl_glProgramEnvParameter4fARB(proc, target, index, x, y, z, w) \
   ( ((GdkGLProc_glProgramEnvParameter4fARB) (proc)) (target, index, x, y, z, w) )
 
 /* glProgramEnvParameter4fvARB */
-typedef void (APIENTRY * GdkGLProc_glProgramEnvParameter4fvARB) (GLenum target, GLuint index, const GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameter4fvARB) (GLenum target, GLuint index, const GLfloat *params);
 GdkGLProc    gdk_gl_get_glProgramEnvParameter4fvARB (void);
 #define      gdk_gl_glProgramEnvParameter4fvARB(proc, target, index, params) \
   ( ((GdkGLProc_glProgramEnvParameter4fvARB) (proc)) (target, index, params) )
 
 /* glProgramLocalParameter4dARB */
-typedef void (APIENTRY * GdkGLProc_glProgramLocalParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
 GdkGLProc    gdk_gl_get_glProgramLocalParameter4dARB (void);
 #define      gdk_gl_glProgramLocalParameter4dARB(proc, target, index, x, y, z, w) \
   ( ((GdkGLProc_glProgramLocalParameter4dARB) (proc)) (target, index, x, y, z, w) )
 
 /* glProgramLocalParameter4dvARB */
-typedef void (APIENTRY * GdkGLProc_glProgramLocalParameter4dvARB) (GLenum target, GLuint index, const GLdouble *params);
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameter4dvARB) (GLenum target, GLuint index, const GLdouble *params);
 GdkGLProc    gdk_gl_get_glProgramLocalParameter4dvARB (void);
 #define      gdk_gl_glProgramLocalParameter4dvARB(proc, target, index, params) \
   ( ((GdkGLProc_glProgramLocalParameter4dvARB) (proc)) (target, index, params) )
 
 /* glProgramLocalParameter4fARB */
-typedef void (APIENTRY * GdkGLProc_glProgramLocalParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
 GdkGLProc    gdk_gl_get_glProgramLocalParameter4fARB (void);
 #define      gdk_gl_glProgramLocalParameter4fARB(proc, target, index, x, y, z, w) \
   ( ((GdkGLProc_glProgramLocalParameter4fARB) (proc)) (target, index, x, y, z, w) )
 
 /* glProgramLocalParameter4fvARB */
-typedef void (APIENTRY * GdkGLProc_glProgramLocalParameter4fvARB) (GLenum target, GLuint index, const GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameter4fvARB) (GLenum target, GLuint index, const GLfloat *params);
 GdkGLProc    gdk_gl_get_glProgramLocalParameter4fvARB (void);
 #define      gdk_gl_glProgramLocalParameter4fvARB(proc, target, index, params) \
   ( ((GdkGLProc_glProgramLocalParameter4fvARB) (proc)) (target, index, params) )
 
 /* glGetProgramEnvParameterdvARB */
-typedef void (APIENTRY * GdkGLProc_glGetProgramEnvParameterdvARB) (GLenum target, GLuint index, GLdouble *params);
+typedef void (APIENTRYP GdkGLProc_glGetProgramEnvParameterdvARB) (GLenum target, GLuint index, GLdouble *params);
 GdkGLProc    gdk_gl_get_glGetProgramEnvParameterdvARB (void);
 #define      gdk_gl_glGetProgramEnvParameterdvARB(proc, target, index, params) \
   ( ((GdkGLProc_glGetProgramEnvParameterdvARB) (proc)) (target, index, params) )
 
 /* glGetProgramEnvParameterfvARB */
-typedef void (APIENTRY * GdkGLProc_glGetProgramEnvParameterfvARB) (GLenum target, GLuint index, GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glGetProgramEnvParameterfvARB) (GLenum target, GLuint index, GLfloat *params);
 GdkGLProc    gdk_gl_get_glGetProgramEnvParameterfvARB (void);
 #define      gdk_gl_glGetProgramEnvParameterfvARB(proc, target, index, params) \
   ( ((GdkGLProc_glGetProgramEnvParameterfvARB) (proc)) (target, index, params) )
 
 /* glGetProgramLocalParameterdvARB */
-typedef void (APIENTRY * GdkGLProc_glGetProgramLocalParameterdvARB) (GLenum target, GLuint index, GLdouble *params);
+typedef void (APIENTRYP GdkGLProc_glGetProgramLocalParameterdvARB) (GLenum target, GLuint index, GLdouble *params);
 GdkGLProc    gdk_gl_get_glGetProgramLocalParameterdvARB (void);
 #define      gdk_gl_glGetProgramLocalParameterdvARB(proc, target, index, params) \
   ( ((GdkGLProc_glGetProgramLocalParameterdvARB) (proc)) (target, index, params) )
 
 /* glGetProgramLocalParameterfvARB */
-typedef void (APIENTRY * GdkGLProc_glGetProgramLocalParameterfvARB) (GLenum target, GLuint index, GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glGetProgramLocalParameterfvARB) (GLenum target, GLuint index, GLfloat *params);
 GdkGLProc    gdk_gl_get_glGetProgramLocalParameterfvARB (void);
 #define      gdk_gl_glGetProgramLocalParameterfvARB(proc, target, index, params) \
   ( ((GdkGLProc_glGetProgramLocalParameterfvARB) (proc)) (target, index, params) )
 
 /* glGetProgramivARB */
-typedef void (APIENTRY * GdkGLProc_glGetProgramivARB) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP GdkGLProc_glGetProgramivARB) (GLenum target, GLenum pname, GLint *params);
 GdkGLProc    gdk_gl_get_glGetProgramivARB (void);
 #define      gdk_gl_glGetProgramivARB(proc, target, pname, params) \
   ( ((GdkGLProc_glGetProgramivARB) (proc)) (target, pname, params) )
 
 /* glGetProgramStringARB */
-typedef void (APIENTRY * GdkGLProc_glGetProgramStringARB) (GLenum target, GLenum pname, GLvoid *string);
+typedef void (APIENTRYP GdkGLProc_glGetProgramStringARB) (GLenum target, GLenum pname, GLvoid *string);
 GdkGLProc    gdk_gl_get_glGetProgramStringARB (void);
 #define      gdk_gl_glGetProgramStringARB(proc, target, pname, string) \
   ( ((GdkGLProc_glGetProgramStringARB) (proc)) (target, pname, string) )
 
 /* glGetVertexAttribdvARB */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribdvARB) (GLuint index, GLenum pname, GLdouble *params);
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribdvARB) (GLuint index, GLenum pname, GLdouble *params);
 GdkGLProc    gdk_gl_get_glGetVertexAttribdvARB (void);
 #define      gdk_gl_glGetVertexAttribdvARB(proc, index, pname, params) \
   ( ((GdkGLProc_glGetVertexAttribdvARB) (proc)) (index, pname, params) )
 
 /* glGetVertexAttribfvARB */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribfvARB) (GLuint index, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribfvARB) (GLuint index, GLenum pname, GLfloat *params);
 GdkGLProc    gdk_gl_get_glGetVertexAttribfvARB (void);
 #define      gdk_gl_glGetVertexAttribfvARB(proc, index, pname, params) \
   ( ((GdkGLProc_glGetVertexAttribfvARB) (proc)) (index, pname, params) )
 
 /* glGetVertexAttribivARB */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribivARB) (GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribivARB) (GLuint index, GLenum pname, GLint *params);
 GdkGLProc    gdk_gl_get_glGetVertexAttribivARB (void);
 #define      gdk_gl_glGetVertexAttribivARB(proc, index, pname, params) \
   ( ((GdkGLProc_glGetVertexAttribivARB) (proc)) (index, pname, params) )
 
 /* glGetVertexAttribPointervARB */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribPointervARB) (GLuint index, GLenum pname, GLvoid* *pointer);
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribPointervARB) (GLuint index, GLenum pname, GLvoid* *pointer);
 GdkGLProc    gdk_gl_get_glGetVertexAttribPointervARB (void);
 #define      gdk_gl_glGetVertexAttribPointervARB(proc, index, pname, pointer) \
   ( ((GdkGLProc_glGetVertexAttribPointervARB) (proc)) (index, pname, pointer) )
 
 /* glIsProgramARB */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsProgramARB) (GLuint program);
+typedef GLboolean (APIENTRYP GdkGLProc_glIsProgramARB) (GLuint program);
 GdkGLProc    gdk_gl_get_glIsProgramARB (void);
 #define      gdk_gl_glIsProgramARB(proc, program) \
   ( ((GdkGLProc_glIsProgramARB) (proc)) (program) )
@@ -2116,67 +3541,67 @@ GdkGL_GL_ARB_vertex_program *gdk_gl_get_GL_ARB_vertex_program (void);
  */
 
 /* glBindBufferARB */
-typedef void (APIENTRY * GdkGLProc_glBindBufferARB) (GLenum target, GLuint buffer);
+typedef void (APIENTRYP GdkGLProc_glBindBufferARB) (GLenum target, GLuint buffer);
 GdkGLProc    gdk_gl_get_glBindBufferARB (void);
 #define      gdk_gl_glBindBufferARB(proc, target, buffer) \
   ( ((GdkGLProc_glBindBufferARB) (proc)) (target, buffer) )
 
 /* glDeleteBuffersARB */
-typedef void (APIENTRY * GdkGLProc_glDeleteBuffersARB) (GLsizei n, const GLuint *buffers);
+typedef void (APIENTRYP GdkGLProc_glDeleteBuffersARB) (GLsizei n, const GLuint *buffers);
 GdkGLProc    gdk_gl_get_glDeleteBuffersARB (void);
 #define      gdk_gl_glDeleteBuffersARB(proc, n, buffers) \
   ( ((GdkGLProc_glDeleteBuffersARB) (proc)) (n, buffers) )
 
 /* glGenBuffersARB */
-typedef void (APIENTRY * GdkGLProc_glGenBuffersARB) (GLsizei n, GLuint *buffers);
+typedef void (APIENTRYP GdkGLProc_glGenBuffersARB) (GLsizei n, GLuint *buffers);
 GdkGLProc    gdk_gl_get_glGenBuffersARB (void);
 #define      gdk_gl_glGenBuffersARB(proc, n, buffers) \
   ( ((GdkGLProc_glGenBuffersARB) (proc)) (n, buffers) )
 
 /* glIsBufferARB */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsBufferARB) (GLuint buffer);
+typedef GLboolean (APIENTRYP GdkGLProc_glIsBufferARB) (GLuint buffer);
 GdkGLProc    gdk_gl_get_glIsBufferARB (void);
 #define      gdk_gl_glIsBufferARB(proc, buffer) \
   ( ((GdkGLProc_glIsBufferARB) (proc)) (buffer) )
 
 /* glBufferDataARB */
-typedef void (APIENTRY * GdkGLProc_glBufferDataARB) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
+typedef void (APIENTRYP GdkGLProc_glBufferDataARB) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
 GdkGLProc    gdk_gl_get_glBufferDataARB (void);
 #define      gdk_gl_glBufferDataARB(proc, target, size, data, usage) \
   ( ((GdkGLProc_glBufferDataARB) (proc)) (target, size, data, usage) )
 
 /* glBufferSubDataARB */
-typedef void (APIENTRY * GdkGLProc_glBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
 GdkGLProc    gdk_gl_get_glBufferSubDataARB (void);
 #define      gdk_gl_glBufferSubDataARB(proc, target, offset, size, data) \
   ( ((GdkGLProc_glBufferSubDataARB) (proc)) (target, offset, size, data) )
 
 /* glGetBufferSubDataARB */
-typedef void (APIENTRY * GdkGLProc_glGetBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
+typedef void (APIENTRYP GdkGLProc_glGetBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
 GdkGLProc    gdk_gl_get_glGetBufferSubDataARB (void);
 #define      gdk_gl_glGetBufferSubDataARB(proc, target, offset, size, data) \
   ( ((GdkGLProc_glGetBufferSubDataARB) (proc)) (target, offset, size, data) )
 
 /* glMapBufferARB */
-typedef GLvoid* (APIENTRY * GdkGLProc_glMapBufferARB) (GLenum target, GLenum access);
+typedef GLvoid* (APIENTRYP GdkGLProc_glMapBufferARB) (GLenum target, GLenum access);
 GdkGLProc    gdk_gl_get_glMapBufferARB (void);
 #define      gdk_gl_glMapBufferARB(proc, target, access) \
   ( ((GdkGLProc_glMapBufferARB) (proc)) (target, access) )
 
 /* glUnmapBufferARB */
-typedef GLboolean (APIENTRY * GdkGLProc_glUnmapBufferARB) (GLenum target);
+typedef GLboolean (APIENTRYP GdkGLProc_glUnmapBufferARB) (GLenum target);
 GdkGLProc    gdk_gl_get_glUnmapBufferARB (void);
 #define      gdk_gl_glUnmapBufferARB(proc, target) \
   ( ((GdkGLProc_glUnmapBufferARB) (proc)) (target) )
 
 /* glGetBufferParameterivARB */
-typedef void (APIENTRY * GdkGLProc_glGetBufferParameterivARB) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP GdkGLProc_glGetBufferParameterivARB) (GLenum target, GLenum pname, GLint *params);
 GdkGLProc    gdk_gl_get_glGetBufferParameterivARB (void);
 #define      gdk_gl_glGetBufferParameterivARB(proc, target, pname, params) \
   ( ((GdkGLProc_glGetBufferParameterivARB) (proc)) (target, pname, params) )
 
 /* glGetBufferPointervARB */
-typedef void (APIENTRY * GdkGLProc_glGetBufferPointervARB) (GLenum target, GLenum pname, GLvoid* *params);
+typedef void (APIENTRYP GdkGLProc_glGetBufferPointervARB) (GLenum target, GLenum pname, GLvoid* *params);
 GdkGLProc    gdk_gl_get_glGetBufferPointervARB (void);
 #define      gdk_gl_glGetBufferPointervARB(proc, target, pname, params) \
   ( ((GdkGLProc_glGetBufferPointervARB) (proc)) (target, pname, params) )
@@ -2203,5652 +3628,9677 @@ struct _GdkGL_GL_ARB_vertex_buffer_object
 GdkGL_GL_ARB_vertex_buffer_object *gdk_gl_get_GL_ARB_vertex_buffer_object (void);
 
 /*
- * GL_EXT_blend_color
+ * GL_ARB_occlusion_query
  */
 
-/* glBlendColorEXT */
-typedef void (APIENTRY * GdkGLProc_glBlendColorEXT) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
-GdkGLProc    gdk_gl_get_glBlendColorEXT (void);
-#define      gdk_gl_glBlendColorEXT(proc, red, green, blue, alpha) \
-  ( ((GdkGLProc_glBlendColorEXT) (proc)) (red, green, blue, alpha) )
+/* glGenQueriesARB */
+typedef void (APIENTRYP GdkGLProc_glGenQueriesARB) (GLsizei n, GLuint *ids);
+GdkGLProc    gdk_gl_get_glGenQueriesARB (void);
+#define      gdk_gl_glGenQueriesARB(proc, n, ids) \
+  ( ((GdkGLProc_glGenQueriesARB) (proc)) (n, ids) )
+
+/* glDeleteQueriesARB */
+typedef void (APIENTRYP GdkGLProc_glDeleteQueriesARB) (GLsizei n, const GLuint *ids);
+GdkGLProc    gdk_gl_get_glDeleteQueriesARB (void);
+#define      gdk_gl_glDeleteQueriesARB(proc, n, ids) \
+  ( ((GdkGLProc_glDeleteQueriesARB) (proc)) (n, ids) )
+
+/* glIsQueryARB */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsQueryARB) (GLuint id);
+GdkGLProc    gdk_gl_get_glIsQueryARB (void);
+#define      gdk_gl_glIsQueryARB(proc, id) \
+  ( ((GdkGLProc_glIsQueryARB) (proc)) (id) )
+
+/* glBeginQueryARB */
+typedef void (APIENTRYP GdkGLProc_glBeginQueryARB) (GLenum target, GLuint id);
+GdkGLProc    gdk_gl_get_glBeginQueryARB (void);
+#define      gdk_gl_glBeginQueryARB(proc, target, id) \
+  ( ((GdkGLProc_glBeginQueryARB) (proc)) (target, id) )
+
+/* glEndQueryARB */
+typedef void (APIENTRYP GdkGLProc_glEndQueryARB) (GLenum target);
+GdkGLProc    gdk_gl_get_glEndQueryARB (void);
+#define      gdk_gl_glEndQueryARB(proc, target) \
+  ( ((GdkGLProc_glEndQueryARB) (proc)) (target) )
+
+/* glGetQueryivARB */
+typedef void (APIENTRYP GdkGLProc_glGetQueryivARB) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetQueryivARB (void);
+#define      gdk_gl_glGetQueryivARB(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetQueryivARB) (proc)) (target, pname, params) )
+
+/* glGetQueryObjectivARB */
+typedef void (APIENTRYP GdkGLProc_glGetQueryObjectivARB) (GLuint id, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetQueryObjectivARB (void);
+#define      gdk_gl_glGetQueryObjectivARB(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetQueryObjectivARB) (proc)) (id, pname, params) )
+
+/* glGetQueryObjectuivARB */
+typedef void (APIENTRYP GdkGLProc_glGetQueryObjectuivARB) (GLuint id, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetQueryObjectuivARB (void);
+#define      gdk_gl_glGetQueryObjectuivARB(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetQueryObjectuivARB) (proc)) (id, pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_blend_color GdkGL_GL_EXT_blend_color;
+typedef struct _GdkGL_GL_ARB_occlusion_query GdkGL_GL_ARB_occlusion_query;
 
-struct _GdkGL_GL_EXT_blend_color
+struct _GdkGL_GL_ARB_occlusion_query
 {
-  GdkGLProc_glBlendColorEXT glBlendColorEXT;
+  GdkGLProc_glGenQueriesARB glGenQueriesARB;
+  GdkGLProc_glDeleteQueriesARB glDeleteQueriesARB;
+  GdkGLProc_glIsQueryARB glIsQueryARB;
+  GdkGLProc_glBeginQueryARB glBeginQueryARB;
+  GdkGLProc_glEndQueryARB glEndQueryARB;
+  GdkGLProc_glGetQueryivARB glGetQueryivARB;
+  GdkGLProc_glGetQueryObjectivARB glGetQueryObjectivARB;
+  GdkGLProc_glGetQueryObjectuivARB glGetQueryObjectuivARB;
 };
 
-GdkGL_GL_EXT_blend_color *gdk_gl_get_GL_EXT_blend_color (void);
+GdkGL_GL_ARB_occlusion_query *gdk_gl_get_GL_ARB_occlusion_query (void);
 
 /*
- * GL_EXT_polygon_offset
+ * GL_ARB_shader_objects
  */
 
-/* glPolygonOffsetEXT */
-typedef void (APIENTRY * GdkGLProc_glPolygonOffsetEXT) (GLfloat factor, GLfloat bias);
-GdkGLProc    gdk_gl_get_glPolygonOffsetEXT (void);
-#define      gdk_gl_glPolygonOffsetEXT(proc, factor, bias) \
-  ( ((GdkGLProc_glPolygonOffsetEXT) (proc)) (factor, bias) )
+/* glDeleteObjectARB */
+typedef void (APIENTRYP GdkGLProc_glDeleteObjectARB) (GLhandleARB obj);
+GdkGLProc    gdk_gl_get_glDeleteObjectARB (void);
+#define      gdk_gl_glDeleteObjectARB(proc, obj) \
+  ( ((GdkGLProc_glDeleteObjectARB) (proc)) (obj) )
+
+/* glGetHandleARB */
+typedef GLhandleARB (APIENTRYP GdkGLProc_glGetHandleARB) (GLenum pname);
+GdkGLProc    gdk_gl_get_glGetHandleARB (void);
+#define      gdk_gl_glGetHandleARB(proc, pname) \
+  ( ((GdkGLProc_glGetHandleARB) (proc)) (pname) )
+
+/* glDetachObjectARB */
+typedef void (APIENTRYP GdkGLProc_glDetachObjectARB) (GLhandleARB containerObj, GLhandleARB attachedObj);
+GdkGLProc    gdk_gl_get_glDetachObjectARB (void);
+#define      gdk_gl_glDetachObjectARB(proc, containerObj, attachedObj) \
+  ( ((GdkGLProc_glDetachObjectARB) (proc)) (containerObj, attachedObj) )
+
+/* glCreateShaderObjectARB */
+typedef GLhandleARB (APIENTRYP GdkGLProc_glCreateShaderObjectARB) (GLenum shaderType);
+GdkGLProc    gdk_gl_get_glCreateShaderObjectARB (void);
+#define      gdk_gl_glCreateShaderObjectARB(proc, shaderType) \
+  ( ((GdkGLProc_glCreateShaderObjectARB) (proc)) (shaderType) )
+
+/* glShaderSourceARB */
+typedef void (APIENTRYP GdkGLProc_glShaderSourceARB) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
+GdkGLProc    gdk_gl_get_glShaderSourceARB (void);
+#define      gdk_gl_glShaderSourceARB(proc, shaderObj, count, string, length) \
+  ( ((GdkGLProc_glShaderSourceARB) (proc)) (shaderObj, count, string, length) )
+
+/* glCompileShaderARB */
+typedef void (APIENTRYP GdkGLProc_glCompileShaderARB) (GLhandleARB shaderObj);
+GdkGLProc    gdk_gl_get_glCompileShaderARB (void);
+#define      gdk_gl_glCompileShaderARB(proc, shaderObj) \
+  ( ((GdkGLProc_glCompileShaderARB) (proc)) (shaderObj) )
+
+/* glCreateProgramObjectARB */
+typedef GLhandleARB (APIENTRYP GdkGLProc_glCreateProgramObjectARB) (void);
+GdkGLProc    gdk_gl_get_glCreateProgramObjectARB (void);
+#define      gdk_gl_glCreateProgramObjectARB(proc) \
+  ( ((GdkGLProc_glCreateProgramObjectARB) (proc)) () )
+
+/* glAttachObjectARB */
+typedef void (APIENTRYP GdkGLProc_glAttachObjectARB) (GLhandleARB containerObj, GLhandleARB obj);
+GdkGLProc    gdk_gl_get_glAttachObjectARB (void);
+#define      gdk_gl_glAttachObjectARB(proc, containerObj, obj) \
+  ( ((GdkGLProc_glAttachObjectARB) (proc)) (containerObj, obj) )
+
+/* glLinkProgramARB */
+typedef void (APIENTRYP GdkGLProc_glLinkProgramARB) (GLhandleARB programObj);
+GdkGLProc    gdk_gl_get_glLinkProgramARB (void);
+#define      gdk_gl_glLinkProgramARB(proc, programObj) \
+  ( ((GdkGLProc_glLinkProgramARB) (proc)) (programObj) )
+
+/* glUseProgramObjectARB */
+typedef void (APIENTRYP GdkGLProc_glUseProgramObjectARB) (GLhandleARB programObj);
+GdkGLProc    gdk_gl_get_glUseProgramObjectARB (void);
+#define      gdk_gl_glUseProgramObjectARB(proc, programObj) \
+  ( ((GdkGLProc_glUseProgramObjectARB) (proc)) (programObj) )
+
+/* glValidateProgramARB */
+typedef void (APIENTRYP GdkGLProc_glValidateProgramARB) (GLhandleARB programObj);
+GdkGLProc    gdk_gl_get_glValidateProgramARB (void);
+#define      gdk_gl_glValidateProgramARB(proc, programObj) \
+  ( ((GdkGLProc_glValidateProgramARB) (proc)) (programObj) )
+
+/* glUniform1fARB */
+typedef void (APIENTRYP GdkGLProc_glUniform1fARB) (GLint location, GLfloat v0);
+GdkGLProc    gdk_gl_get_glUniform1fARB (void);
+#define      gdk_gl_glUniform1fARB(proc, location, v0) \
+  ( ((GdkGLProc_glUniform1fARB) (proc)) (location, v0) )
+
+/* glUniform2fARB */
+typedef void (APIENTRYP GdkGLProc_glUniform2fARB) (GLint location, GLfloat v0, GLfloat v1);
+GdkGLProc    gdk_gl_get_glUniform2fARB (void);
+#define      gdk_gl_glUniform2fARB(proc, location, v0, v1) \
+  ( ((GdkGLProc_glUniform2fARB) (proc)) (location, v0, v1) )
+
+/* glUniform3fARB */
+typedef void (APIENTRYP GdkGLProc_glUniform3fARB) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+GdkGLProc    gdk_gl_get_glUniform3fARB (void);
+#define      gdk_gl_glUniform3fARB(proc, location, v0, v1, v2) \
+  ( ((GdkGLProc_glUniform3fARB) (proc)) (location, v0, v1, v2) )
+
+/* glUniform4fARB */
+typedef void (APIENTRYP GdkGLProc_glUniform4fARB) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+GdkGLProc    gdk_gl_get_glUniform4fARB (void);
+#define      gdk_gl_glUniform4fARB(proc, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glUniform4fARB) (proc)) (location, v0, v1, v2, v3) )
+
+/* glUniform1iARB */
+typedef void (APIENTRYP GdkGLProc_glUniform1iARB) (GLint location, GLint v0);
+GdkGLProc    gdk_gl_get_glUniform1iARB (void);
+#define      gdk_gl_glUniform1iARB(proc, location, v0) \
+  ( ((GdkGLProc_glUniform1iARB) (proc)) (location, v0) )
+
+/* glUniform2iARB */
+typedef void (APIENTRYP GdkGLProc_glUniform2iARB) (GLint location, GLint v0, GLint v1);
+GdkGLProc    gdk_gl_get_glUniform2iARB (void);
+#define      gdk_gl_glUniform2iARB(proc, location, v0, v1) \
+  ( ((GdkGLProc_glUniform2iARB) (proc)) (location, v0, v1) )
+
+/* glUniform3iARB */
+typedef void (APIENTRYP GdkGLProc_glUniform3iARB) (GLint location, GLint v0, GLint v1, GLint v2);
+GdkGLProc    gdk_gl_get_glUniform3iARB (void);
+#define      gdk_gl_glUniform3iARB(proc, location, v0, v1, v2) \
+  ( ((GdkGLProc_glUniform3iARB) (proc)) (location, v0, v1, v2) )
+
+/* glUniform4iARB */
+typedef void (APIENTRYP GdkGLProc_glUniform4iARB) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+GdkGLProc    gdk_gl_get_glUniform4iARB (void);
+#define      gdk_gl_glUniform4iARB(proc, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glUniform4iARB) (proc)) (location, v0, v1, v2, v3) )
+
+/* glUniform1fvARB */
+typedef void (APIENTRYP GdkGLProc_glUniform1fvARB) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform1fvARB (void);
+#define      gdk_gl_glUniform1fvARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform1fvARB) (proc)) (location, count, value) )
+
+/* glUniform2fvARB */
+typedef void (APIENTRYP GdkGLProc_glUniform2fvARB) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform2fvARB (void);
+#define      gdk_gl_glUniform2fvARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform2fvARB) (proc)) (location, count, value) )
+
+/* glUniform3fvARB */
+typedef void (APIENTRYP GdkGLProc_glUniform3fvARB) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform3fvARB (void);
+#define      gdk_gl_glUniform3fvARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform3fvARB) (proc)) (location, count, value) )
+
+/* glUniform4fvARB */
+typedef void (APIENTRYP GdkGLProc_glUniform4fvARB) (GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniform4fvARB (void);
+#define      gdk_gl_glUniform4fvARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform4fvARB) (proc)) (location, count, value) )
+
+/* glUniform1ivARB */
+typedef void (APIENTRYP GdkGLProc_glUniform1ivARB) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform1ivARB (void);
+#define      gdk_gl_glUniform1ivARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform1ivARB) (proc)) (location, count, value) )
+
+/* glUniform2ivARB */
+typedef void (APIENTRYP GdkGLProc_glUniform2ivARB) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform2ivARB (void);
+#define      gdk_gl_glUniform2ivARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform2ivARB) (proc)) (location, count, value) )
+
+/* glUniform3ivARB */
+typedef void (APIENTRYP GdkGLProc_glUniform3ivARB) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform3ivARB (void);
+#define      gdk_gl_glUniform3ivARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform3ivARB) (proc)) (location, count, value) )
+
+/* glUniform4ivARB */
+typedef void (APIENTRYP GdkGLProc_glUniform4ivARB) (GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glUniform4ivARB (void);
+#define      gdk_gl_glUniform4ivARB(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform4ivARB) (proc)) (location, count, value) )
+
+/* glUniformMatrix2fvARB */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix2fvARB) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix2fvARB (void);
+#define      gdk_gl_glUniformMatrix2fvARB(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix2fvARB) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix3fvARB */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix3fvARB) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix3fvARB (void);
+#define      gdk_gl_glUniformMatrix3fvARB(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix3fvARB) (proc)) (location, count, transpose, value) )
+
+/* glUniformMatrix4fvARB */
+typedef void (APIENTRYP GdkGLProc_glUniformMatrix4fvARB) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glUniformMatrix4fvARB (void);
+#define      gdk_gl_glUniformMatrix4fvARB(proc, location, count, transpose, value) \
+  ( ((GdkGLProc_glUniformMatrix4fvARB) (proc)) (location, count, transpose, value) )
+
+/* glGetObjectParameterfvARB */
+typedef void (APIENTRYP GdkGLProc_glGetObjectParameterfvARB) (GLhandleARB obj, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetObjectParameterfvARB (void);
+#define      gdk_gl_glGetObjectParameterfvARB(proc, obj, pname, params) \
+  ( ((GdkGLProc_glGetObjectParameterfvARB) (proc)) (obj, pname, params) )
+
+/* glGetObjectParameterivARB */
+typedef void (APIENTRYP GdkGLProc_glGetObjectParameterivARB) (GLhandleARB obj, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetObjectParameterivARB (void);
+#define      gdk_gl_glGetObjectParameterivARB(proc, obj, pname, params) \
+  ( ((GdkGLProc_glGetObjectParameterivARB) (proc)) (obj, pname, params) )
+
+/* glGetInfoLogARB */
+typedef void (APIENTRYP GdkGLProc_glGetInfoLogARB) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
+GdkGLProc    gdk_gl_get_glGetInfoLogARB (void);
+#define      gdk_gl_glGetInfoLogARB(proc, obj, maxLength, length, infoLog) \
+  ( ((GdkGLProc_glGetInfoLogARB) (proc)) (obj, maxLength, length, infoLog) )
+
+/* glGetAttachedObjectsARB */
+typedef void (APIENTRYP GdkGLProc_glGetAttachedObjectsARB) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
+GdkGLProc    gdk_gl_get_glGetAttachedObjectsARB (void);
+#define      gdk_gl_glGetAttachedObjectsARB(proc, containerObj, maxCount, count, obj) \
+  ( ((GdkGLProc_glGetAttachedObjectsARB) (proc)) (containerObj, maxCount, count, obj) )
+
+/* glGetUniformLocationARB */
+typedef GLint (APIENTRYP GdkGLProc_glGetUniformLocationARB) (GLhandleARB programObj, const GLcharARB *name);
+GdkGLProc    gdk_gl_get_glGetUniformLocationARB (void);
+#define      gdk_gl_glGetUniformLocationARB(proc, programObj, name) \
+  ( ((GdkGLProc_glGetUniformLocationARB) (proc)) (programObj, name) )
+
+/* glGetActiveUniformARB */
+typedef void (APIENTRYP GdkGLProc_glGetActiveUniformARB) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
+GdkGLProc    gdk_gl_get_glGetActiveUniformARB (void);
+#define      gdk_gl_glGetActiveUniformARB(proc, programObj, index, maxLength, length, size, type, name) \
+  ( ((GdkGLProc_glGetActiveUniformARB) (proc)) (programObj, index, maxLength, length, size, type, name) )
+
+/* glGetUniformfvARB */
+typedef void (APIENTRYP GdkGLProc_glGetUniformfvARB) (GLhandleARB programObj, GLint location, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetUniformfvARB (void);
+#define      gdk_gl_glGetUniformfvARB(proc, programObj, location, params) \
+  ( ((GdkGLProc_glGetUniformfvARB) (proc)) (programObj, location, params) )
+
+/* glGetUniformivARB */
+typedef void (APIENTRYP GdkGLProc_glGetUniformivARB) (GLhandleARB programObj, GLint location, GLint *params);
+GdkGLProc    gdk_gl_get_glGetUniformivARB (void);
+#define      gdk_gl_glGetUniformivARB(proc, programObj, location, params) \
+  ( ((GdkGLProc_glGetUniformivARB) (proc)) (programObj, location, params) )
+
+/* glGetShaderSourceARB */
+typedef void (APIENTRYP GdkGLProc_glGetShaderSourceARB) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
+GdkGLProc    gdk_gl_get_glGetShaderSourceARB (void);
+#define      gdk_gl_glGetShaderSourceARB(proc, obj, maxLength, length, source) \
+  ( ((GdkGLProc_glGetShaderSourceARB) (proc)) (obj, maxLength, length, source) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_polygon_offset GdkGL_GL_EXT_polygon_offset;
+typedef struct _GdkGL_GL_ARB_shader_objects GdkGL_GL_ARB_shader_objects;
 
-struct _GdkGL_GL_EXT_polygon_offset
+struct _GdkGL_GL_ARB_shader_objects
 {
-  GdkGLProc_glPolygonOffsetEXT glPolygonOffsetEXT;
+  GdkGLProc_glDeleteObjectARB glDeleteObjectARB;
+  GdkGLProc_glGetHandleARB glGetHandleARB;
+  GdkGLProc_glDetachObjectARB glDetachObjectARB;
+  GdkGLProc_glCreateShaderObjectARB glCreateShaderObjectARB;
+  GdkGLProc_glShaderSourceARB glShaderSourceARB;
+  GdkGLProc_glCompileShaderARB glCompileShaderARB;
+  GdkGLProc_glCreateProgramObjectARB glCreateProgramObjectARB;
+  GdkGLProc_glAttachObjectARB glAttachObjectARB;
+  GdkGLProc_glLinkProgramARB glLinkProgramARB;
+  GdkGLProc_glUseProgramObjectARB glUseProgramObjectARB;
+  GdkGLProc_glValidateProgramARB glValidateProgramARB;
+  GdkGLProc_glUniform1fARB glUniform1fARB;
+  GdkGLProc_glUniform2fARB glUniform2fARB;
+  GdkGLProc_glUniform3fARB glUniform3fARB;
+  GdkGLProc_glUniform4fARB glUniform4fARB;
+  GdkGLProc_glUniform1iARB glUniform1iARB;
+  GdkGLProc_glUniform2iARB glUniform2iARB;
+  GdkGLProc_glUniform3iARB glUniform3iARB;
+  GdkGLProc_glUniform4iARB glUniform4iARB;
+  GdkGLProc_glUniform1fvARB glUniform1fvARB;
+  GdkGLProc_glUniform2fvARB glUniform2fvARB;
+  GdkGLProc_glUniform3fvARB glUniform3fvARB;
+  GdkGLProc_glUniform4fvARB glUniform4fvARB;
+  GdkGLProc_glUniform1ivARB glUniform1ivARB;
+  GdkGLProc_glUniform2ivARB glUniform2ivARB;
+  GdkGLProc_glUniform3ivARB glUniform3ivARB;
+  GdkGLProc_glUniform4ivARB glUniform4ivARB;
+  GdkGLProc_glUniformMatrix2fvARB glUniformMatrix2fvARB;
+  GdkGLProc_glUniformMatrix3fvARB glUniformMatrix3fvARB;
+  GdkGLProc_glUniformMatrix4fvARB glUniformMatrix4fvARB;
+  GdkGLProc_glGetObjectParameterfvARB glGetObjectParameterfvARB;
+  GdkGLProc_glGetObjectParameterivARB glGetObjectParameterivARB;
+  GdkGLProc_glGetInfoLogARB glGetInfoLogARB;
+  GdkGLProc_glGetAttachedObjectsARB glGetAttachedObjectsARB;
+  GdkGLProc_glGetUniformLocationARB glGetUniformLocationARB;
+  GdkGLProc_glGetActiveUniformARB glGetActiveUniformARB;
+  GdkGLProc_glGetUniformfvARB glGetUniformfvARB;
+  GdkGLProc_glGetUniformivARB glGetUniformivARB;
+  GdkGLProc_glGetShaderSourceARB glGetShaderSourceARB;
 };
 
-GdkGL_GL_EXT_polygon_offset *gdk_gl_get_GL_EXT_polygon_offset (void);
+GdkGL_GL_ARB_shader_objects *gdk_gl_get_GL_ARB_shader_objects (void);
 
 /*
- * GL_EXT_texture3D
+ * GL_ARB_vertex_shader
  */
 
-/* glTexImage3DEXT */
-typedef void (APIENTRY * GdkGLProc_glTexImage3DEXT) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexImage3DEXT (void);
-#define      gdk_gl_glTexImage3DEXT(proc, target, level, internalformat, width, height, depth, border, format, type, pixels) \
-  ( ((GdkGLProc_glTexImage3DEXT) (proc)) (target, level, internalformat, width, height, depth, border, format, type, pixels) )
+/* glBindAttribLocationARB */
+typedef void (APIENTRYP GdkGLProc_glBindAttribLocationARB) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
+GdkGLProc    gdk_gl_get_glBindAttribLocationARB (void);
+#define      gdk_gl_glBindAttribLocationARB(proc, programObj, index, name) \
+  ( ((GdkGLProc_glBindAttribLocationARB) (proc)) (programObj, index, name) )
 
-/* glTexSubImage3DEXT */
-typedef void (APIENTRY * GdkGLProc_glTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexSubImage3DEXT (void);
-#define      gdk_gl_glTexSubImage3DEXT(proc, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) \
-  ( ((GdkGLProc_glTexSubImage3DEXT) (proc)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) )
+/* glGetActiveAttribARB */
+typedef void (APIENTRYP GdkGLProc_glGetActiveAttribARB) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
+GdkGLProc    gdk_gl_get_glGetActiveAttribARB (void);
+#define      gdk_gl_glGetActiveAttribARB(proc, programObj, index, maxLength, length, size, type, name) \
+  ( ((GdkGLProc_glGetActiveAttribARB) (proc)) (programObj, index, maxLength, length, size, type, name) )
+
+/* glGetAttribLocationARB */
+typedef GLint (APIENTRYP GdkGLProc_glGetAttribLocationARB) (GLhandleARB programObj, const GLcharARB *name);
+GdkGLProc    gdk_gl_get_glGetAttribLocationARB (void);
+#define      gdk_gl_glGetAttribLocationARB(proc, programObj, name) \
+  ( ((GdkGLProc_glGetAttribLocationARB) (proc)) (programObj, name) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_texture3D GdkGL_GL_EXT_texture3D;
+typedef struct _GdkGL_GL_ARB_vertex_shader GdkGL_GL_ARB_vertex_shader;
 
-struct _GdkGL_GL_EXT_texture3D
+struct _GdkGL_GL_ARB_vertex_shader
 {
-  GdkGLProc_glTexImage3DEXT glTexImage3DEXT;
-  GdkGLProc_glTexSubImage3DEXT glTexSubImage3DEXT;
+  GdkGLProc_glBindAttribLocationARB glBindAttribLocationARB;
+  GdkGLProc_glGetActiveAttribARB glGetActiveAttribARB;
+  GdkGLProc_glGetAttribLocationARB glGetAttribLocationARB;
 };
 
-GdkGL_GL_EXT_texture3D *gdk_gl_get_GL_EXT_texture3D (void);
+GdkGL_GL_ARB_vertex_shader *gdk_gl_get_GL_ARB_vertex_shader (void);
 
 /*
- * GL_SGIS_texture_filter4
+ * GL_ARB_draw_buffers
  */
 
-/* glGetTexFilterFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glGetTexFilterFuncSGIS) (GLenum target, GLenum filter, GLfloat *weights);
-GdkGLProc    gdk_gl_get_glGetTexFilterFuncSGIS (void);
-#define      gdk_gl_glGetTexFilterFuncSGIS(proc, target, filter, weights) \
-  ( ((GdkGLProc_glGetTexFilterFuncSGIS) (proc)) (target, filter, weights) )
+/* glDrawBuffersARB */
+typedef void (APIENTRYP GdkGLProc_glDrawBuffersARB) (GLsizei n, const GLenum *bufs);
+GdkGLProc    gdk_gl_get_glDrawBuffersARB (void);
+#define      gdk_gl_glDrawBuffersARB(proc, n, bufs) \
+  ( ((GdkGLProc_glDrawBuffersARB) (proc)) (n, bufs) )
 
-/* glTexFilterFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glTexFilterFuncSGIS) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
-GdkGLProc    gdk_gl_get_glTexFilterFuncSGIS (void);
-#define      gdk_gl_glTexFilterFuncSGIS(proc, target, filter, n, weights) \
-  ( ((GdkGLProc_glTexFilterFuncSGIS) (proc)) (target, filter, n, weights) )
+/* proc struct */
+
+typedef struct _GdkGL_GL_ARB_draw_buffers GdkGL_GL_ARB_draw_buffers;
+
+struct _GdkGL_GL_ARB_draw_buffers
+{
+  GdkGLProc_glDrawBuffersARB glDrawBuffersARB;
+};
+
+GdkGL_GL_ARB_draw_buffers *gdk_gl_get_GL_ARB_draw_buffers (void);
+
+/*
+ * GL_ARB_color_buffer_float
+ */
+
+/* glClampColorARB */
+typedef void (APIENTRYP GdkGLProc_glClampColorARB) (GLenum target, GLenum clamp);
+GdkGLProc    gdk_gl_get_glClampColorARB (void);
+#define      gdk_gl_glClampColorARB(proc, target, clamp) \
+  ( ((GdkGLProc_glClampColorARB) (proc)) (target, clamp) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_texture_filter4 GdkGL_GL_SGIS_texture_filter4;
+typedef struct _GdkGL_GL_ARB_color_buffer_float GdkGL_GL_ARB_color_buffer_float;
 
-struct _GdkGL_GL_SGIS_texture_filter4
+struct _GdkGL_GL_ARB_color_buffer_float
 {
-  GdkGLProc_glGetTexFilterFuncSGIS glGetTexFilterFuncSGIS;
-  GdkGLProc_glTexFilterFuncSGIS glTexFilterFuncSGIS;
+  GdkGLProc_glClampColorARB glClampColorARB;
 };
 
-GdkGL_GL_SGIS_texture_filter4 *gdk_gl_get_GL_SGIS_texture_filter4 (void);
+GdkGL_GL_ARB_color_buffer_float *gdk_gl_get_GL_ARB_color_buffer_float (void);
 
 /*
- * GL_EXT_subtexture
+ * GL_ARB_draw_instanced
  */
 
-/* glTexSubImage1DEXT */
-typedef void (APIENTRY * GdkGLProc_glTexSubImage1DEXT) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexSubImage1DEXT (void);
-#define      gdk_gl_glTexSubImage1DEXT(proc, target, level, xoffset, width, format, type, pixels) \
-  ( ((GdkGLProc_glTexSubImage1DEXT) (proc)) (target, level, xoffset, width, format, type, pixels) )
+/* glDrawArraysInstancedARB */
+typedef void (APIENTRYP GdkGLProc_glDrawArraysInstancedARB) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glDrawArraysInstancedARB (void);
+#define      gdk_gl_glDrawArraysInstancedARB(proc, mode, first, count, primcount) \
+  ( ((GdkGLProc_glDrawArraysInstancedARB) (proc)) (mode, first, count, primcount) )
 
-/* glTexSubImage2DEXT */
-typedef void (APIENTRY * GdkGLProc_glTexSubImage2DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexSubImage2DEXT (void);
-#define      gdk_gl_glTexSubImage2DEXT(proc, target, level, xoffset, yoffset, width, height, format, type, pixels) \
-  ( ((GdkGLProc_glTexSubImage2DEXT) (proc)) (target, level, xoffset, yoffset, width, height, format, type, pixels) )
+/* glDrawElementsInstancedARB */
+typedef void (APIENTRYP GdkGLProc_glDrawElementsInstancedARB) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glDrawElementsInstancedARB (void);
+#define      gdk_gl_glDrawElementsInstancedARB(proc, mode, count, type, indices, primcount) \
+  ( ((GdkGLProc_glDrawElementsInstancedARB) (proc)) (mode, count, type, indices, primcount) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_subtexture GdkGL_GL_EXT_subtexture;
+typedef struct _GdkGL_GL_ARB_draw_instanced GdkGL_GL_ARB_draw_instanced;
 
-struct _GdkGL_GL_EXT_subtexture
+struct _GdkGL_GL_ARB_draw_instanced
 {
-  GdkGLProc_glTexSubImage1DEXT glTexSubImage1DEXT;
-  GdkGLProc_glTexSubImage2DEXT glTexSubImage2DEXT;
+  GdkGLProc_glDrawArraysInstancedARB glDrawArraysInstancedARB;
+  GdkGLProc_glDrawElementsInstancedARB glDrawElementsInstancedARB;
 };
 
-GdkGL_GL_EXT_subtexture *gdk_gl_get_GL_EXT_subtexture (void);
+GdkGL_GL_ARB_draw_instanced *gdk_gl_get_GL_ARB_draw_instanced (void);
 
 /*
- * GL_EXT_copy_texture
+ * GL_ARB_framebuffer_object
  */
 
-/* glCopyTexImage1DEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyTexImage1DEXT) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
-GdkGLProc    gdk_gl_get_glCopyTexImage1DEXT (void);
-#define      gdk_gl_glCopyTexImage1DEXT(proc, target, level, internalformat, x, y, width, border) \
-  ( ((GdkGLProc_glCopyTexImage1DEXT) (proc)) (target, level, internalformat, x, y, width, border) )
+/* glIsRenderbuffer */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsRenderbuffer) (GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glIsRenderbuffer (void);
+#define      gdk_gl_glIsRenderbuffer(proc, renderbuffer) \
+  ( ((GdkGLProc_glIsRenderbuffer) (proc)) (renderbuffer) )
+
+/* glBindRenderbuffer */
+typedef void (APIENTRYP GdkGLProc_glBindRenderbuffer) (GLenum target, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glBindRenderbuffer (void);
+#define      gdk_gl_glBindRenderbuffer(proc, target, renderbuffer) \
+  ( ((GdkGLProc_glBindRenderbuffer) (proc)) (target, renderbuffer) )
+
+/* glDeleteRenderbuffers */
+typedef void (APIENTRYP GdkGLProc_glDeleteRenderbuffers) (GLsizei n, const GLuint *renderbuffers);
+GdkGLProc    gdk_gl_get_glDeleteRenderbuffers (void);
+#define      gdk_gl_glDeleteRenderbuffers(proc, n, renderbuffers) \
+  ( ((GdkGLProc_glDeleteRenderbuffers) (proc)) (n, renderbuffers) )
+
+/* glGenRenderbuffers */
+typedef void (APIENTRYP GdkGLProc_glGenRenderbuffers) (GLsizei n, GLuint *renderbuffers);
+GdkGLProc    gdk_gl_get_glGenRenderbuffers (void);
+#define      gdk_gl_glGenRenderbuffers(proc, n, renderbuffers) \
+  ( ((GdkGLProc_glGenRenderbuffers) (proc)) (n, renderbuffers) )
+
+/* glRenderbufferStorage */
+typedef void (APIENTRYP GdkGLProc_glRenderbufferStorage) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glRenderbufferStorage (void);
+#define      gdk_gl_glRenderbufferStorage(proc, target, internalformat, width, height) \
+  ( ((GdkGLProc_glRenderbufferStorage) (proc)) (target, internalformat, width, height) )
+
+/* glGetRenderbufferParameteriv */
+typedef void (APIENTRYP GdkGLProc_glGetRenderbufferParameteriv) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetRenderbufferParameteriv (void);
+#define      gdk_gl_glGetRenderbufferParameteriv(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetRenderbufferParameteriv) (proc)) (target, pname, params) )
+
+/* glIsFramebuffer */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsFramebuffer) (GLuint framebuffer);
+GdkGLProc    gdk_gl_get_glIsFramebuffer (void);
+#define      gdk_gl_glIsFramebuffer(proc, framebuffer) \
+  ( ((GdkGLProc_glIsFramebuffer) (proc)) (framebuffer) )
+
+/* glBindFramebuffer */
+typedef void (APIENTRYP GdkGLProc_glBindFramebuffer) (GLenum target, GLuint framebuffer);
+GdkGLProc    gdk_gl_get_glBindFramebuffer (void);
+#define      gdk_gl_glBindFramebuffer(proc, target, framebuffer) \
+  ( ((GdkGLProc_glBindFramebuffer) (proc)) (target, framebuffer) )
+
+/* glDeleteFramebuffers */
+typedef void (APIENTRYP GdkGLProc_glDeleteFramebuffers) (GLsizei n, const GLuint *framebuffers);
+GdkGLProc    gdk_gl_get_glDeleteFramebuffers (void);
+#define      gdk_gl_glDeleteFramebuffers(proc, n, framebuffers) \
+  ( ((GdkGLProc_glDeleteFramebuffers) (proc)) (n, framebuffers) )
+
+/* glGenFramebuffers */
+typedef void (APIENTRYP GdkGLProc_glGenFramebuffers) (GLsizei n, GLuint *framebuffers);
+GdkGLProc    gdk_gl_get_glGenFramebuffers (void);
+#define      gdk_gl_glGenFramebuffers(proc, n, framebuffers) \
+  ( ((GdkGLProc_glGenFramebuffers) (proc)) (n, framebuffers) )
+
+/* glCheckFramebufferStatus */
+typedef GLenum (APIENTRYP GdkGLProc_glCheckFramebufferStatus) (GLenum target);
+GdkGLProc    gdk_gl_get_glCheckFramebufferStatus (void);
+#define      gdk_gl_glCheckFramebufferStatus(proc, target) \
+  ( ((GdkGLProc_glCheckFramebufferStatus) (proc)) (target) )
+
+/* glFramebufferTexture1D */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTexture1D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glFramebufferTexture1D (void);
+#define      gdk_gl_glFramebufferTexture1D(proc, target, attachment, textarget, texture, level) \
+  ( ((GdkGLProc_glFramebufferTexture1D) (proc)) (target, attachment, textarget, texture, level) )
+
+/* glFramebufferTexture2D */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTexture2D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glFramebufferTexture2D (void);
+#define      gdk_gl_glFramebufferTexture2D(proc, target, attachment, textarget, texture, level) \
+  ( ((GdkGLProc_glFramebufferTexture2D) (proc)) (target, attachment, textarget, texture, level) )
+
+/* glFramebufferTexture3D */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTexture3D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+GdkGLProc    gdk_gl_get_glFramebufferTexture3D (void);
+#define      gdk_gl_glFramebufferTexture3D(proc, target, attachment, textarget, texture, level, zoffset) \
+  ( ((GdkGLProc_glFramebufferTexture3D) (proc)) (target, attachment, textarget, texture, level, zoffset) )
+
+/* glFramebufferRenderbuffer */
+typedef void (APIENTRYP GdkGLProc_glFramebufferRenderbuffer) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glFramebufferRenderbuffer (void);
+#define      gdk_gl_glFramebufferRenderbuffer(proc, target, attachment, renderbuffertarget, renderbuffer) \
+  ( ((GdkGLProc_glFramebufferRenderbuffer) (proc)) (target, attachment, renderbuffertarget, renderbuffer) )
+
+/* glGetFramebufferAttachmentParameteriv */
+typedef void (APIENTRYP GdkGLProc_glGetFramebufferAttachmentParameteriv) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetFramebufferAttachmentParameteriv (void);
+#define      gdk_gl_glGetFramebufferAttachmentParameteriv(proc, target, attachment, pname, params) \
+  ( ((GdkGLProc_glGetFramebufferAttachmentParameteriv) (proc)) (target, attachment, pname, params) )
+
+/* glGenerateMipmap */
+typedef void (APIENTRYP GdkGLProc_glGenerateMipmap) (GLenum target);
+GdkGLProc    gdk_gl_get_glGenerateMipmap (void);
+#define      gdk_gl_glGenerateMipmap(proc, target) \
+  ( ((GdkGLProc_glGenerateMipmap) (proc)) (target) )
+
+/* glBlitFramebuffer */
+typedef void (APIENTRYP GdkGLProc_glBlitFramebuffer) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+GdkGLProc    gdk_gl_get_glBlitFramebuffer (void);
+#define      gdk_gl_glBlitFramebuffer(proc, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) \
+  ( ((GdkGLProc_glBlitFramebuffer) (proc)) (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) )
+
+/* glRenderbufferStorageMultisample */
+typedef void (APIENTRYP GdkGLProc_glRenderbufferStorageMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glRenderbufferStorageMultisample (void);
+#define      gdk_gl_glRenderbufferStorageMultisample(proc, target, samples, internalformat, width, height) \
+  ( ((GdkGLProc_glRenderbufferStorageMultisample) (proc)) (target, samples, internalformat, width, height) )
+
+/* glFramebufferTextureLayer */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureLayer) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+GdkGLProc    gdk_gl_get_glFramebufferTextureLayer (void);
+#define      gdk_gl_glFramebufferTextureLayer(proc, target, attachment, texture, level, layer) \
+  ( ((GdkGLProc_glFramebufferTextureLayer) (proc)) (target, attachment, texture, level, layer) )
 
-/* glCopyTexImage2DEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyTexImage2DEXT) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
-GdkGLProc    gdk_gl_get_glCopyTexImage2DEXT (void);
-#define      gdk_gl_glCopyTexImage2DEXT(proc, target, level, internalformat, x, y, width, height, border) \
-  ( ((GdkGLProc_glCopyTexImage2DEXT) (proc)) (target, level, internalformat, x, y, width, height, border) )
+/* proc struct */
 
-/* glCopyTexSubImage1DEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyTexSubImage1DEXT) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
-GdkGLProc    gdk_gl_get_glCopyTexSubImage1DEXT (void);
-#define      gdk_gl_glCopyTexSubImage1DEXT(proc, target, level, xoffset, x, y, width) \
-  ( ((GdkGLProc_glCopyTexSubImage1DEXT) (proc)) (target, level, xoffset, x, y, width) )
+typedef struct _GdkGL_GL_ARB_framebuffer_object GdkGL_GL_ARB_framebuffer_object;
 
-/* glCopyTexSubImage2DEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyTexSubImage2DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-GdkGLProc    gdk_gl_get_glCopyTexSubImage2DEXT (void);
-#define      gdk_gl_glCopyTexSubImage2DEXT(proc, target, level, xoffset, yoffset, x, y, width, height) \
-  ( ((GdkGLProc_glCopyTexSubImage2DEXT) (proc)) (target, level, xoffset, yoffset, x, y, width, height) )
+struct _GdkGL_GL_ARB_framebuffer_object
+{
+  GdkGLProc_glIsRenderbuffer glIsRenderbuffer;
+  GdkGLProc_glBindRenderbuffer glBindRenderbuffer;
+  GdkGLProc_glDeleteRenderbuffers glDeleteRenderbuffers;
+  GdkGLProc_glGenRenderbuffers glGenRenderbuffers;
+  GdkGLProc_glRenderbufferStorage glRenderbufferStorage;
+  GdkGLProc_glGetRenderbufferParameteriv glGetRenderbufferParameteriv;
+  GdkGLProc_glIsFramebuffer glIsFramebuffer;
+  GdkGLProc_glBindFramebuffer glBindFramebuffer;
+  GdkGLProc_glDeleteFramebuffers glDeleteFramebuffers;
+  GdkGLProc_glGenFramebuffers glGenFramebuffers;
+  GdkGLProc_glCheckFramebufferStatus glCheckFramebufferStatus;
+  GdkGLProc_glFramebufferTexture1D glFramebufferTexture1D;
+  GdkGLProc_glFramebufferTexture2D glFramebufferTexture2D;
+  GdkGLProc_glFramebufferTexture3D glFramebufferTexture3D;
+  GdkGLProc_glFramebufferRenderbuffer glFramebufferRenderbuffer;
+  GdkGLProc_glGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;
+  GdkGLProc_glGenerateMipmap glGenerateMipmap;
+  GdkGLProc_glBlitFramebuffer glBlitFramebuffer;
+  GdkGLProc_glRenderbufferStorageMultisample glRenderbufferStorageMultisample;
+  GdkGLProc_glFramebufferTextureLayer glFramebufferTextureLayer;
+};
 
-/* glCopyTexSubImage3DEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-GdkGLProc    gdk_gl_get_glCopyTexSubImage3DEXT (void);
-#define      gdk_gl_glCopyTexSubImage3DEXT(proc, target, level, xoffset, yoffset, zoffset, x, y, width, height) \
-  ( ((GdkGLProc_glCopyTexSubImage3DEXT) (proc)) (target, level, xoffset, yoffset, zoffset, x, y, width, height) )
+GdkGL_GL_ARB_framebuffer_object *gdk_gl_get_GL_ARB_framebuffer_object (void);
+
+/*
+ * GL_ARB_geometry_shader4
+ */
+
+/* glProgramParameteriARB */
+typedef void (APIENTRYP GdkGLProc_glProgramParameteriARB) (GLuint program, GLenum pname, GLint value);
+GdkGLProc    gdk_gl_get_glProgramParameteriARB (void);
+#define      gdk_gl_glProgramParameteriARB(proc, program, pname, value) \
+  ( ((GdkGLProc_glProgramParameteriARB) (proc)) (program, pname, value) )
+
+/* glFramebufferTextureARB */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureARB) (GLenum target, GLenum attachment, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glFramebufferTextureARB (void);
+#define      gdk_gl_glFramebufferTextureARB(proc, target, attachment, texture, level) \
+  ( ((GdkGLProc_glFramebufferTextureARB) (proc)) (target, attachment, texture, level) )
+
+/* glFramebufferTextureLayerARB */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureLayerARB) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+GdkGLProc    gdk_gl_get_glFramebufferTextureLayerARB (void);
+#define      gdk_gl_glFramebufferTextureLayerARB(proc, target, attachment, texture, level, layer) \
+  ( ((GdkGLProc_glFramebufferTextureLayerARB) (proc)) (target, attachment, texture, level, layer) )
+
+/* glFramebufferTextureFaceARB */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureFaceARB) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+GdkGLProc    gdk_gl_get_glFramebufferTextureFaceARB (void);
+#define      gdk_gl_glFramebufferTextureFaceARB(proc, target, attachment, texture, level, face) \
+  ( ((GdkGLProc_glFramebufferTextureFaceARB) (proc)) (target, attachment, texture, level, face) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_copy_texture GdkGL_GL_EXT_copy_texture;
+typedef struct _GdkGL_GL_ARB_geometry_shader4 GdkGL_GL_ARB_geometry_shader4;
 
-struct _GdkGL_GL_EXT_copy_texture
+struct _GdkGL_GL_ARB_geometry_shader4
 {
-  GdkGLProc_glCopyTexImage1DEXT glCopyTexImage1DEXT;
-  GdkGLProc_glCopyTexImage2DEXT glCopyTexImage2DEXT;
-  GdkGLProc_glCopyTexSubImage1DEXT glCopyTexSubImage1DEXT;
-  GdkGLProc_glCopyTexSubImage2DEXT glCopyTexSubImage2DEXT;
-  GdkGLProc_glCopyTexSubImage3DEXT glCopyTexSubImage3DEXT;
+  GdkGLProc_glProgramParameteriARB glProgramParameteriARB;
+  GdkGLProc_glFramebufferTextureARB glFramebufferTextureARB;
+  GdkGLProc_glFramebufferTextureLayerARB glFramebufferTextureLayerARB;
+  GdkGLProc_glFramebufferTextureFaceARB glFramebufferTextureFaceARB;
 };
 
-GdkGL_GL_EXT_copy_texture *gdk_gl_get_GL_EXT_copy_texture (void);
+GdkGL_GL_ARB_geometry_shader4 *gdk_gl_get_GL_ARB_geometry_shader4 (void);
 
 /*
- * GL_EXT_histogram
+ * GL_ARB_instanced_arrays
  */
 
-/* glGetHistogramEXT */
-typedef void (APIENTRY * GdkGLProc_glGetHistogramEXT) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
-GdkGLProc    gdk_gl_get_glGetHistogramEXT (void);
-#define      gdk_gl_glGetHistogramEXT(proc, target, reset, format, type, values) \
-  ( ((GdkGLProc_glGetHistogramEXT) (proc)) (target, reset, format, type, values) )
+/* glVertexAttribDivisorARB */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribDivisorARB) (GLuint index, GLuint divisor);
+GdkGLProc    gdk_gl_get_glVertexAttribDivisorARB (void);
+#define      gdk_gl_glVertexAttribDivisorARB(proc, index, divisor) \
+  ( ((GdkGLProc_glVertexAttribDivisorARB) (proc)) (index, divisor) )
 
-/* glGetHistogramParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetHistogramParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetHistogramParameterfvEXT (void);
-#define      gdk_gl_glGetHistogramParameterfvEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetHistogramParameterfvEXT) (proc)) (target, pname, params) )
+/* proc struct */
 
-/* glGetHistogramParameterivEXT */
-typedef void (APIENTRY * GdkGLProc_glGetHistogramParameterivEXT) (GLenum target, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetHistogramParameterivEXT (void);
-#define      gdk_gl_glGetHistogramParameterivEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetHistogramParameterivEXT) (proc)) (target, pname, params) )
+typedef struct _GdkGL_GL_ARB_instanced_arrays GdkGL_GL_ARB_instanced_arrays;
 
-/* glGetMinmaxEXT */
-typedef void (APIENTRY * GdkGLProc_glGetMinmaxEXT) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
-GdkGLProc    gdk_gl_get_glGetMinmaxEXT (void);
-#define      gdk_gl_glGetMinmaxEXT(proc, target, reset, format, type, values) \
-  ( ((GdkGLProc_glGetMinmaxEXT) (proc)) (target, reset, format, type, values) )
+struct _GdkGL_GL_ARB_instanced_arrays
+{
+  GdkGLProc_glVertexAttribDivisorARB glVertexAttribDivisorARB;
+};
 
-/* glGetMinmaxParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetMinmaxParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetMinmaxParameterfvEXT (void);
-#define      gdk_gl_glGetMinmaxParameterfvEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetMinmaxParameterfvEXT) (proc)) (target, pname, params) )
+GdkGL_GL_ARB_instanced_arrays *gdk_gl_get_GL_ARB_instanced_arrays (void);
 
-/* glGetMinmaxParameterivEXT */
-typedef void (APIENTRY * GdkGLProc_glGetMinmaxParameterivEXT) (GLenum target, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetMinmaxParameterivEXT (void);
-#define      gdk_gl_glGetMinmaxParameterivEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetMinmaxParameterivEXT) (proc)) (target, pname, params) )
+/*
+ * GL_ARB_map_buffer_range
+ */
 
-/* glHistogramEXT */
-typedef void (APIENTRY * GdkGLProc_glHistogramEXT) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
-GdkGLProc    gdk_gl_get_glHistogramEXT (void);
-#define      gdk_gl_glHistogramEXT(proc, target, width, internalformat, sink) \
-  ( ((GdkGLProc_glHistogramEXT) (proc)) (target, width, internalformat, sink) )
+/* glMapBufferRange */
+typedef GLvoid* (APIENTRYP GdkGLProc_glMapBufferRange) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
+GdkGLProc    gdk_gl_get_glMapBufferRange (void);
+#define      gdk_gl_glMapBufferRange(proc, target, offset, length, access) \
+  ( ((GdkGLProc_glMapBufferRange) (proc)) (target, offset, length, access) )
 
-/* glMinmaxEXT */
-typedef void (APIENTRY * GdkGLProc_glMinmaxEXT) (GLenum target, GLenum internalformat, GLboolean sink);
-GdkGLProc    gdk_gl_get_glMinmaxEXT (void);
-#define      gdk_gl_glMinmaxEXT(proc, target, internalformat, sink) \
-  ( ((GdkGLProc_glMinmaxEXT) (proc)) (target, internalformat, sink) )
+/* glFlushMappedBufferRange */
+typedef void (APIENTRYP GdkGLProc_glFlushMappedBufferRange) (GLenum target, GLintptr offset, GLsizeiptr length);
+GdkGLProc    gdk_gl_get_glFlushMappedBufferRange (void);
+#define      gdk_gl_glFlushMappedBufferRange(proc, target, offset, length) \
+  ( ((GdkGLProc_glFlushMappedBufferRange) (proc)) (target, offset, length) )
 
-/* glResetHistogramEXT */
-typedef void (APIENTRY * GdkGLProc_glResetHistogramEXT) (GLenum target);
-GdkGLProc    gdk_gl_get_glResetHistogramEXT (void);
-#define      gdk_gl_glResetHistogramEXT(proc, target) \
-  ( ((GdkGLProc_glResetHistogramEXT) (proc)) (target) )
+/* proc struct */
 
-/* glResetMinmaxEXT */
-typedef void (APIENTRY * GdkGLProc_glResetMinmaxEXT) (GLenum target);
-GdkGLProc    gdk_gl_get_glResetMinmaxEXT (void);
-#define      gdk_gl_glResetMinmaxEXT(proc, target) \
-  ( ((GdkGLProc_glResetMinmaxEXT) (proc)) (target) )
+typedef struct _GdkGL_GL_ARB_map_buffer_range GdkGL_GL_ARB_map_buffer_range;
+
+struct _GdkGL_GL_ARB_map_buffer_range
+{
+  GdkGLProc_glMapBufferRange glMapBufferRange;
+  GdkGLProc_glFlushMappedBufferRange glFlushMappedBufferRange;
+};
+
+GdkGL_GL_ARB_map_buffer_range *gdk_gl_get_GL_ARB_map_buffer_range (void);
+
+/*
+ * GL_ARB_texture_buffer_object
+ */
+
+/* glTexBufferARB */
+typedef void (APIENTRYP GdkGLProc_glTexBufferARB) (GLenum target, GLenum internalformat, GLuint buffer);
+GdkGLProc    gdk_gl_get_glTexBufferARB (void);
+#define      gdk_gl_glTexBufferARB(proc, target, internalformat, buffer) \
+  ( ((GdkGLProc_glTexBufferARB) (proc)) (target, internalformat, buffer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_histogram GdkGL_GL_EXT_histogram;
+typedef struct _GdkGL_GL_ARB_texture_buffer_object GdkGL_GL_ARB_texture_buffer_object;
 
-struct _GdkGL_GL_EXT_histogram
+struct _GdkGL_GL_ARB_texture_buffer_object
 {
-  GdkGLProc_glGetHistogramEXT glGetHistogramEXT;
-  GdkGLProc_glGetHistogramParameterfvEXT glGetHistogramParameterfvEXT;
-  GdkGLProc_glGetHistogramParameterivEXT glGetHistogramParameterivEXT;
-  GdkGLProc_glGetMinmaxEXT glGetMinmaxEXT;
-  GdkGLProc_glGetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT;
-  GdkGLProc_glGetMinmaxParameterivEXT glGetMinmaxParameterivEXT;
-  GdkGLProc_glHistogramEXT glHistogramEXT;
-  GdkGLProc_glMinmaxEXT glMinmaxEXT;
-  GdkGLProc_glResetHistogramEXT glResetHistogramEXT;
-  GdkGLProc_glResetMinmaxEXT glResetMinmaxEXT;
+  GdkGLProc_glTexBufferARB glTexBufferARB;
 };
 
-GdkGL_GL_EXT_histogram *gdk_gl_get_GL_EXT_histogram (void);
+GdkGL_GL_ARB_texture_buffer_object *gdk_gl_get_GL_ARB_texture_buffer_object (void);
 
 /*
- * GL_EXT_convolution
+ * GL_ARB_vertex_array_object
  */
 
-/* glConvolutionFilter1DEXT */
-typedef void (APIENTRY * GdkGLProc_glConvolutionFilter1DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
-GdkGLProc    gdk_gl_get_glConvolutionFilter1DEXT (void);
-#define      gdk_gl_glConvolutionFilter1DEXT(proc, target, internalformat, width, format, type, image) \
-  ( ((GdkGLProc_glConvolutionFilter1DEXT) (proc)) (target, internalformat, width, format, type, image) )
+/* glBindVertexArray */
+typedef void (APIENTRYP GdkGLProc_glBindVertexArray) (GLuint array);
+GdkGLProc    gdk_gl_get_glBindVertexArray (void);
+#define      gdk_gl_glBindVertexArray(proc, array) \
+  ( ((GdkGLProc_glBindVertexArray) (proc)) (array) )
+
+/* glDeleteVertexArrays */
+typedef void (APIENTRYP GdkGLProc_glDeleteVertexArrays) (GLsizei n, const GLuint *arrays);
+GdkGLProc    gdk_gl_get_glDeleteVertexArrays (void);
+#define      gdk_gl_glDeleteVertexArrays(proc, n, arrays) \
+  ( ((GdkGLProc_glDeleteVertexArrays) (proc)) (n, arrays) )
+
+/* glGenVertexArrays */
+typedef void (APIENTRYP GdkGLProc_glGenVertexArrays) (GLsizei n, GLuint *arrays);
+GdkGLProc    gdk_gl_get_glGenVertexArrays (void);
+#define      gdk_gl_glGenVertexArrays(proc, n, arrays) \
+  ( ((GdkGLProc_glGenVertexArrays) (proc)) (n, arrays) )
+
+/* glIsVertexArray */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsVertexArray) (GLuint array);
+GdkGLProc    gdk_gl_get_glIsVertexArray (void);
+#define      gdk_gl_glIsVertexArray(proc, array) \
+  ( ((GdkGLProc_glIsVertexArray) (proc)) (array) )
 
-/* glConvolutionFilter2DEXT */
-typedef void (APIENTRY * GdkGLProc_glConvolutionFilter2DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
-GdkGLProc    gdk_gl_get_glConvolutionFilter2DEXT (void);
-#define      gdk_gl_glConvolutionFilter2DEXT(proc, target, internalformat, width, height, format, type, image) \
-  ( ((GdkGLProc_glConvolutionFilter2DEXT) (proc)) (target, internalformat, width, height, format, type, image) )
+/* proc struct */
 
-/* glConvolutionParameterfEXT */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameterfEXT) (GLenum target, GLenum pname, GLfloat params);
-GdkGLProc    gdk_gl_get_glConvolutionParameterfEXT (void);
-#define      gdk_gl_glConvolutionParameterfEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glConvolutionParameterfEXT) (proc)) (target, pname, params) )
-
-/* glConvolutionParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameterfvEXT) (GLenum target, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glConvolutionParameterfvEXT (void);
-#define      gdk_gl_glConvolutionParameterfvEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glConvolutionParameterfvEXT) (proc)) (target, pname, params) )
-
-/* glConvolutionParameteriEXT */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameteriEXT) (GLenum target, GLenum pname, GLint params);
-GdkGLProc    gdk_gl_get_glConvolutionParameteriEXT (void);
-#define      gdk_gl_glConvolutionParameteriEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glConvolutionParameteriEXT) (proc)) (target, pname, params) )
-
-/* glConvolutionParameterivEXT */
-typedef void (APIENTRY * GdkGLProc_glConvolutionParameterivEXT) (GLenum target, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glConvolutionParameterivEXT (void);
-#define      gdk_gl_glConvolutionParameterivEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glConvolutionParameterivEXT) (proc)) (target, pname, params) )
-
-/* glCopyConvolutionFilter1DEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyConvolutionFilter1DEXT) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-GdkGLProc    gdk_gl_get_glCopyConvolutionFilter1DEXT (void);
-#define      gdk_gl_glCopyConvolutionFilter1DEXT(proc, target, internalformat, x, y, width) \
-  ( ((GdkGLProc_glCopyConvolutionFilter1DEXT) (proc)) (target, internalformat, x, y, width) )
-
-/* glCopyConvolutionFilter2DEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyConvolutionFilter2DEXT) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
-GdkGLProc    gdk_gl_get_glCopyConvolutionFilter2DEXT (void);
-#define      gdk_gl_glCopyConvolutionFilter2DEXT(proc, target, internalformat, x, y, width, height) \
-  ( ((GdkGLProc_glCopyConvolutionFilter2DEXT) (proc)) (target, internalformat, x, y, width, height) )
-
-/* glGetConvolutionFilterEXT */
-typedef void (APIENTRY * GdkGLProc_glGetConvolutionFilterEXT) (GLenum target, GLenum format, GLenum type, GLvoid *image);
-GdkGLProc    gdk_gl_get_glGetConvolutionFilterEXT (void);
-#define      gdk_gl_glGetConvolutionFilterEXT(proc, target, format, type, image) \
-  ( ((GdkGLProc_glGetConvolutionFilterEXT) (proc)) (target, format, type, image) )
+typedef struct _GdkGL_GL_ARB_vertex_array_object GdkGL_GL_ARB_vertex_array_object;
 
-/* glGetConvolutionParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetConvolutionParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetConvolutionParameterfvEXT (void);
-#define      gdk_gl_glGetConvolutionParameterfvEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetConvolutionParameterfvEXT) (proc)) (target, pname, params) )
+struct _GdkGL_GL_ARB_vertex_array_object
+{
+  GdkGLProc_glBindVertexArray glBindVertexArray;
+  GdkGLProc_glDeleteVertexArrays glDeleteVertexArrays;
+  GdkGLProc_glGenVertexArrays glGenVertexArrays;
+  GdkGLProc_glIsVertexArray glIsVertexArray;
+};
 
-/* glGetConvolutionParameterivEXT */
-typedef void (APIENTRY * GdkGLProc_glGetConvolutionParameterivEXT) (GLenum target, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetConvolutionParameterivEXT (void);
-#define      gdk_gl_glGetConvolutionParameterivEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetConvolutionParameterivEXT) (proc)) (target, pname, params) )
+GdkGL_GL_ARB_vertex_array_object *gdk_gl_get_GL_ARB_vertex_array_object (void);
 
-/* glGetSeparableFilterEXT */
-typedef void (APIENTRY * GdkGLProc_glGetSeparableFilterEXT) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
-GdkGLProc    gdk_gl_get_glGetSeparableFilterEXT (void);
-#define      gdk_gl_glGetSeparableFilterEXT(proc, target, format, type, row, column, span) \
-  ( ((GdkGLProc_glGetSeparableFilterEXT) (proc)) (target, format, type, row, column, span) )
+/*
+ * GL_ARB_uniform_buffer_object
+ */
 
-/* glSeparableFilter2DEXT */
-typedef void (APIENTRY * GdkGLProc_glSeparableFilter2DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
-GdkGLProc    gdk_gl_get_glSeparableFilter2DEXT (void);
-#define      gdk_gl_glSeparableFilter2DEXT(proc, target, internalformat, width, height, format, type, row, column) \
-  ( ((GdkGLProc_glSeparableFilter2DEXT) (proc)) (target, internalformat, width, height, format, type, row, column) )
+/* glGetUniformIndices */
+typedef void (APIENTRYP GdkGLProc_glGetUniformIndices) (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
+GdkGLProc    gdk_gl_get_glGetUniformIndices (void);
+#define      gdk_gl_glGetUniformIndices(proc, program, uniformCount, uniformNames, uniformIndices) \
+  ( ((GdkGLProc_glGetUniformIndices) (proc)) (program, uniformCount, uniformNames, uniformIndices) )
+
+/* glGetActiveUniformsiv */
+typedef void (APIENTRYP GdkGLProc_glGetActiveUniformsiv) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetActiveUniformsiv (void);
+#define      gdk_gl_glGetActiveUniformsiv(proc, program, uniformCount, uniformIndices, pname, params) \
+  ( ((GdkGLProc_glGetActiveUniformsiv) (proc)) (program, uniformCount, uniformIndices, pname, params) )
+
+/* glGetActiveUniformName */
+typedef void (APIENTRYP GdkGLProc_glGetActiveUniformName) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
+GdkGLProc    gdk_gl_get_glGetActiveUniformName (void);
+#define      gdk_gl_glGetActiveUniformName(proc, program, uniformIndex, bufSize, length, uniformName) \
+  ( ((GdkGLProc_glGetActiveUniformName) (proc)) (program, uniformIndex, bufSize, length, uniformName) )
+
+/* glGetUniformBlockIndex */
+typedef GLuint (APIENTRYP GdkGLProc_glGetUniformBlockIndex) (GLuint program, const GLchar *uniformBlockName);
+GdkGLProc    gdk_gl_get_glGetUniformBlockIndex (void);
+#define      gdk_gl_glGetUniformBlockIndex(proc, program, uniformBlockName) \
+  ( ((GdkGLProc_glGetUniformBlockIndex) (proc)) (program, uniformBlockName) )
+
+/* glGetActiveUniformBlockiv */
+typedef void (APIENTRYP GdkGLProc_glGetActiveUniformBlockiv) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetActiveUniformBlockiv (void);
+#define      gdk_gl_glGetActiveUniformBlockiv(proc, program, uniformBlockIndex, pname, params) \
+  ( ((GdkGLProc_glGetActiveUniformBlockiv) (proc)) (program, uniformBlockIndex, pname, params) )
+
+/* glGetActiveUniformBlockName */
+typedef void (APIENTRYP GdkGLProc_glGetActiveUniformBlockName) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
+GdkGLProc    gdk_gl_get_glGetActiveUniformBlockName (void);
+#define      gdk_gl_glGetActiveUniformBlockName(proc, program, uniformBlockIndex, bufSize, length, uniformBlockName) \
+  ( ((GdkGLProc_glGetActiveUniformBlockName) (proc)) (program, uniformBlockIndex, bufSize, length, uniformBlockName) )
+
+/* glUniformBlockBinding */
+typedef void (APIENTRYP GdkGLProc_glUniformBlockBinding) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
+GdkGLProc    gdk_gl_get_glUniformBlockBinding (void);
+#define      gdk_gl_glUniformBlockBinding(proc, program, uniformBlockIndex, uniformBlockBinding) \
+  ( ((GdkGLProc_glUniformBlockBinding) (proc)) (program, uniformBlockIndex, uniformBlockBinding) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_convolution GdkGL_GL_EXT_convolution;
+typedef struct _GdkGL_GL_ARB_uniform_buffer_object GdkGL_GL_ARB_uniform_buffer_object;
 
-struct _GdkGL_GL_EXT_convolution
+struct _GdkGL_GL_ARB_uniform_buffer_object
 {
-  GdkGLProc_glConvolutionFilter1DEXT glConvolutionFilter1DEXT;
-  GdkGLProc_glConvolutionFilter2DEXT glConvolutionFilter2DEXT;
-  GdkGLProc_glConvolutionParameterfEXT glConvolutionParameterfEXT;
-  GdkGLProc_glConvolutionParameterfvEXT glConvolutionParameterfvEXT;
-  GdkGLProc_glConvolutionParameteriEXT glConvolutionParameteriEXT;
-  GdkGLProc_glConvolutionParameterivEXT glConvolutionParameterivEXT;
-  GdkGLProc_glCopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT;
-  GdkGLProc_glCopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT;
-  GdkGLProc_glGetConvolutionFilterEXT glGetConvolutionFilterEXT;
-  GdkGLProc_glGetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT;
-  GdkGLProc_glGetConvolutionParameterivEXT glGetConvolutionParameterivEXT;
-  GdkGLProc_glGetSeparableFilterEXT glGetSeparableFilterEXT;
-  GdkGLProc_glSeparableFilter2DEXT glSeparableFilter2DEXT;
+  GdkGLProc_glGetUniformIndices glGetUniformIndices;
+  GdkGLProc_glGetActiveUniformsiv glGetActiveUniformsiv;
+  GdkGLProc_glGetActiveUniformName glGetActiveUniformName;
+  GdkGLProc_glGetUniformBlockIndex glGetUniformBlockIndex;
+  GdkGLProc_glGetActiveUniformBlockiv glGetActiveUniformBlockiv;
+  GdkGLProc_glGetActiveUniformBlockName glGetActiveUniformBlockName;
+  GdkGLProc_glUniformBlockBinding glUniformBlockBinding;
 };
 
-GdkGL_GL_EXT_convolution *gdk_gl_get_GL_EXT_convolution (void);
+GdkGL_GL_ARB_uniform_buffer_object *gdk_gl_get_GL_ARB_uniform_buffer_object (void);
 
 /*
- * GL_SGI_color_table
+ * GL_ARB_copy_buffer
  */
 
-/* glColorTableSGI */
-typedef void (APIENTRY * GdkGLProc_glColorTableSGI) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
-GdkGLProc    gdk_gl_get_glColorTableSGI (void);
-#define      gdk_gl_glColorTableSGI(proc, target, internalformat, width, format, type, table) \
-  ( ((GdkGLProc_glColorTableSGI) (proc)) (target, internalformat, width, format, type, table) )
+/* glCopyBufferSubData */
+typedef void (APIENTRYP GdkGLProc_glCopyBufferSubData) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
+GdkGLProc    gdk_gl_get_glCopyBufferSubData (void);
+#define      gdk_gl_glCopyBufferSubData(proc, readTarget, writeTarget, readOffset, writeOffset, size) \
+  ( ((GdkGLProc_glCopyBufferSubData) (proc)) (readTarget, writeTarget, readOffset, writeOffset, size) )
 
-/* glColorTableParameterfvSGI */
-typedef void (APIENTRY * GdkGLProc_glColorTableParameterfvSGI) (GLenum target, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glColorTableParameterfvSGI (void);
-#define      gdk_gl_glColorTableParameterfvSGI(proc, target, pname, params) \
-  ( ((GdkGLProc_glColorTableParameterfvSGI) (proc)) (target, pname, params) )
+/* proc struct */
 
-/* glColorTableParameterivSGI */
-typedef void (APIENTRY * GdkGLProc_glColorTableParameterivSGI) (GLenum target, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glColorTableParameterivSGI (void);
-#define      gdk_gl_glColorTableParameterivSGI(proc, target, pname, params) \
-  ( ((GdkGLProc_glColorTableParameterivSGI) (proc)) (target, pname, params) )
+typedef struct _GdkGL_GL_ARB_copy_buffer GdkGL_GL_ARB_copy_buffer;
 
-/* glCopyColorTableSGI */
-typedef void (APIENTRY * GdkGLProc_glCopyColorTableSGI) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-GdkGLProc    gdk_gl_get_glCopyColorTableSGI (void);
-#define      gdk_gl_glCopyColorTableSGI(proc, target, internalformat, x, y, width) \
-  ( ((GdkGLProc_glCopyColorTableSGI) (proc)) (target, internalformat, x, y, width) )
+struct _GdkGL_GL_ARB_copy_buffer
+{
+  GdkGLProc_glCopyBufferSubData glCopyBufferSubData;
+};
 
-/* glGetColorTableSGI */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableSGI) (GLenum target, GLenum format, GLenum type, GLvoid *table);
-GdkGLProc    gdk_gl_get_glGetColorTableSGI (void);
-#define      gdk_gl_glGetColorTableSGI(proc, target, format, type, table) \
-  ( ((GdkGLProc_glGetColorTableSGI) (proc)) (target, format, type, table) )
+GdkGL_GL_ARB_copy_buffer *gdk_gl_get_GL_ARB_copy_buffer (void);
 
-/* glGetColorTableParameterfvSGI */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableParameterfvSGI) (GLenum target, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetColorTableParameterfvSGI (void);
-#define      gdk_gl_glGetColorTableParameterfvSGI(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetColorTableParameterfvSGI) (proc)) (target, pname, params) )
+/*
+ * GL_ARB_draw_elements_base_vertex
+ */
 
-/* glGetColorTableParameterivSGI */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableParameterivSGI) (GLenum target, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetColorTableParameterivSGI (void);
-#define      gdk_gl_glGetColorTableParameterivSGI(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetColorTableParameterivSGI) (proc)) (target, pname, params) )
+/* glDrawElementsBaseVertex */
+typedef void (APIENTRYP GdkGLProc_glDrawElementsBaseVertex) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+GdkGLProc    gdk_gl_get_glDrawElementsBaseVertex (void);
+#define      gdk_gl_glDrawElementsBaseVertex(proc, mode, count, type, indices, basevertex) \
+  ( ((GdkGLProc_glDrawElementsBaseVertex) (proc)) (mode, count, type, indices, basevertex) )
+
+/* glDrawRangeElementsBaseVertex */
+typedef void (APIENTRYP GdkGLProc_glDrawRangeElementsBaseVertex) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+GdkGLProc    gdk_gl_get_glDrawRangeElementsBaseVertex (void);
+#define      gdk_gl_glDrawRangeElementsBaseVertex(proc, mode, start, end, count, type, indices, basevertex) \
+  ( ((GdkGLProc_glDrawRangeElementsBaseVertex) (proc)) (mode, start, end, count, type, indices, basevertex) )
+
+/* glDrawElementsInstancedBaseVertex */
+typedef void (APIENTRYP GdkGLProc_glDrawElementsInstancedBaseVertex) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
+GdkGLProc    gdk_gl_get_glDrawElementsInstancedBaseVertex (void);
+#define      gdk_gl_glDrawElementsInstancedBaseVertex(proc, mode, count, type, indices, primcount, basevertex) \
+  ( ((GdkGLProc_glDrawElementsInstancedBaseVertex) (proc)) (mode, count, type, indices, primcount, basevertex) )
+
+/* glMultiDrawElementsBaseVertex */
+typedef void (APIENTRYP GdkGLProc_glMultiDrawElementsBaseVertex) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
+GdkGLProc    gdk_gl_get_glMultiDrawElementsBaseVertex (void);
+#define      gdk_gl_glMultiDrawElementsBaseVertex(proc, mode, count, type, indices, primcount, basevertex) \
+  ( ((GdkGLProc_glMultiDrawElementsBaseVertex) (proc)) (mode, count, type, indices, primcount, basevertex) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGI_color_table GdkGL_GL_SGI_color_table;
+typedef struct _GdkGL_GL_ARB_draw_elements_base_vertex GdkGL_GL_ARB_draw_elements_base_vertex;
 
-struct _GdkGL_GL_SGI_color_table
+struct _GdkGL_GL_ARB_draw_elements_base_vertex
 {
-  GdkGLProc_glColorTableSGI glColorTableSGI;
-  GdkGLProc_glColorTableParameterfvSGI glColorTableParameterfvSGI;
-  GdkGLProc_glColorTableParameterivSGI glColorTableParameterivSGI;
-  GdkGLProc_glCopyColorTableSGI glCopyColorTableSGI;
-  GdkGLProc_glGetColorTableSGI glGetColorTableSGI;
-  GdkGLProc_glGetColorTableParameterfvSGI glGetColorTableParameterfvSGI;
-  GdkGLProc_glGetColorTableParameterivSGI glGetColorTableParameterivSGI;
+  GdkGLProc_glDrawElementsBaseVertex glDrawElementsBaseVertex;
+  GdkGLProc_glDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex;
+  GdkGLProc_glDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex;
+  GdkGLProc_glMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex;
 };
 
-GdkGL_GL_SGI_color_table *gdk_gl_get_GL_SGI_color_table (void);
+GdkGL_GL_ARB_draw_elements_base_vertex *gdk_gl_get_GL_ARB_draw_elements_base_vertex (void);
 
 /*
- * GL_SGIX_pixel_texture
+ * GL_ARB_provoking_vertex
  */
 
-/* glPixelTexGenSGIX */
-typedef void (APIENTRY * GdkGLProc_glPixelTexGenSGIX) (GLenum mode);
-GdkGLProc    gdk_gl_get_glPixelTexGenSGIX (void);
-#define      gdk_gl_glPixelTexGenSGIX(proc, mode) \
-  ( ((GdkGLProc_glPixelTexGenSGIX) (proc)) (mode) )
+/* glProvokingVertex */
+typedef void (APIENTRYP GdkGLProc_glProvokingVertex) (GLenum mode);
+GdkGLProc    gdk_gl_get_glProvokingVertex (void);
+#define      gdk_gl_glProvokingVertex(proc, mode) \
+  ( ((GdkGLProc_glProvokingVertex) (proc)) (mode) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_pixel_texture GdkGL_GL_SGIX_pixel_texture;
+typedef struct _GdkGL_GL_ARB_provoking_vertex GdkGL_GL_ARB_provoking_vertex;
 
-struct _GdkGL_GL_SGIX_pixel_texture
+struct _GdkGL_GL_ARB_provoking_vertex
 {
-  GdkGLProc_glPixelTexGenSGIX glPixelTexGenSGIX;
+  GdkGLProc_glProvokingVertex glProvokingVertex;
 };
 
-GdkGL_GL_SGIX_pixel_texture *gdk_gl_get_GL_SGIX_pixel_texture (void);
+GdkGL_GL_ARB_provoking_vertex *gdk_gl_get_GL_ARB_provoking_vertex (void);
 
 /*
- * GL_SGIS_pixel_texture
+ * GL_ARB_sync
  */
 
-/* glPixelTexGenParameteriSGIS */
-typedef void (APIENTRY * GdkGLProc_glPixelTexGenParameteriSGIS) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glPixelTexGenParameteriSGIS (void);
-#define      gdk_gl_glPixelTexGenParameteriSGIS(proc, pname, param) \
-  ( ((GdkGLProc_glPixelTexGenParameteriSGIS) (proc)) (pname, param) )
-
-/* glPixelTexGenParameterivSGIS */
-typedef void (APIENTRY * GdkGLProc_glPixelTexGenParameterivSGIS) (GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glPixelTexGenParameterivSGIS (void);
-#define      gdk_gl_glPixelTexGenParameterivSGIS(proc, pname, params) \
-  ( ((GdkGLProc_glPixelTexGenParameterivSGIS) (proc)) (pname, params) )
-
-/* glPixelTexGenParameterfSGIS */
-typedef void (APIENTRY * GdkGLProc_glPixelTexGenParameterfSGIS) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glPixelTexGenParameterfSGIS (void);
-#define      gdk_gl_glPixelTexGenParameterfSGIS(proc, pname, param) \
-  ( ((GdkGLProc_glPixelTexGenParameterfSGIS) (proc)) (pname, param) )
-
-/* glPixelTexGenParameterfvSGIS */
-typedef void (APIENTRY * GdkGLProc_glPixelTexGenParameterfvSGIS) (GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glPixelTexGenParameterfvSGIS (void);
-#define      gdk_gl_glPixelTexGenParameterfvSGIS(proc, pname, params) \
-  ( ((GdkGLProc_glPixelTexGenParameterfvSGIS) (proc)) (pname, params) )
-
-/* glGetPixelTexGenParameterivSGIS */
-typedef void (APIENTRY * GdkGLProc_glGetPixelTexGenParameterivSGIS) (GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetPixelTexGenParameterivSGIS (void);
-#define      gdk_gl_glGetPixelTexGenParameterivSGIS(proc, pname, params) \
-  ( ((GdkGLProc_glGetPixelTexGenParameterivSGIS) (proc)) (pname, params) )
-
-/* glGetPixelTexGenParameterfvSGIS */
-typedef void (APIENTRY * GdkGLProc_glGetPixelTexGenParameterfvSGIS) (GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetPixelTexGenParameterfvSGIS (void);
-#define      gdk_gl_glGetPixelTexGenParameterfvSGIS(proc, pname, params) \
-  ( ((GdkGLProc_glGetPixelTexGenParameterfvSGIS) (proc)) (pname, params) )
+/* glFenceSync */
+typedef GLsync (APIENTRYP GdkGLProc_glFenceSync) (GLenum condition, GLbitfield flags);
+GdkGLProc    gdk_gl_get_glFenceSync (void);
+#define      gdk_gl_glFenceSync(proc, condition, flags) \
+  ( ((GdkGLProc_glFenceSync) (proc)) (condition, flags) )
+
+/* glIsSync */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsSync) (GLsync sync);
+GdkGLProc    gdk_gl_get_glIsSync (void);
+#define      gdk_gl_glIsSync(proc, sync) \
+  ( ((GdkGLProc_glIsSync) (proc)) (sync) )
+
+/* glDeleteSync */
+typedef void (APIENTRYP GdkGLProc_glDeleteSync) (GLsync sync);
+GdkGLProc    gdk_gl_get_glDeleteSync (void);
+#define      gdk_gl_glDeleteSync(proc, sync) \
+  ( ((GdkGLProc_glDeleteSync) (proc)) (sync) )
+
+/* glClientWaitSync */
+typedef GLenum (APIENTRYP GdkGLProc_glClientWaitSync) (GLsync sync, GLbitfield flags, GLuint64 timeout);
+GdkGLProc    gdk_gl_get_glClientWaitSync (void);
+#define      gdk_gl_glClientWaitSync(proc, sync, flags, timeout) \
+  ( ((GdkGLProc_glClientWaitSync) (proc)) (sync, flags, timeout) )
+
+/* glWaitSync */
+typedef void (APIENTRYP GdkGLProc_glWaitSync) (GLsync sync, GLbitfield flags, GLuint64 timeout);
+GdkGLProc    gdk_gl_get_glWaitSync (void);
+#define      gdk_gl_glWaitSync(proc, sync, flags, timeout) \
+  ( ((GdkGLProc_glWaitSync) (proc)) (sync, flags, timeout) )
+
+/* glGetInteger64v */
+typedef void (APIENTRYP GdkGLProc_glGetInteger64v) (GLenum pname, GLint64 *params);
+GdkGLProc    gdk_gl_get_glGetInteger64v (void);
+#define      gdk_gl_glGetInteger64v(proc, pname, params) \
+  ( ((GdkGLProc_glGetInteger64v) (proc)) (pname, params) )
+
+/* glGetSynciv */
+typedef void (APIENTRYP GdkGLProc_glGetSynciv) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
+GdkGLProc    gdk_gl_get_glGetSynciv (void);
+#define      gdk_gl_glGetSynciv(proc, sync, pname, bufSize, length, values) \
+  ( ((GdkGLProc_glGetSynciv) (proc)) (sync, pname, bufSize, length, values) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_pixel_texture GdkGL_GL_SGIS_pixel_texture;
+typedef struct _GdkGL_GL_ARB_sync GdkGL_GL_ARB_sync;
 
-struct _GdkGL_GL_SGIS_pixel_texture
+struct _GdkGL_GL_ARB_sync
 {
-  GdkGLProc_glPixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS;
-  GdkGLProc_glPixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS;
-  GdkGLProc_glPixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS;
-  GdkGLProc_glPixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS;
-  GdkGLProc_glGetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS;
-  GdkGLProc_glGetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS;
+  GdkGLProc_glFenceSync glFenceSync;
+  GdkGLProc_glIsSync glIsSync;
+  GdkGLProc_glDeleteSync glDeleteSync;
+  GdkGLProc_glClientWaitSync glClientWaitSync;
+  GdkGLProc_glWaitSync glWaitSync;
+  GdkGLProc_glGetInteger64v glGetInteger64v;
+  GdkGLProc_glGetSynciv glGetSynciv;
 };
 
-GdkGL_GL_SGIS_pixel_texture *gdk_gl_get_GL_SGIS_pixel_texture (void);
+GdkGL_GL_ARB_sync *gdk_gl_get_GL_ARB_sync (void);
 
 /*
- * GL_SGIS_texture4D
+ * GL_ARB_texture_multisample
  */
 
-/* glTexImage4DSGIS */
-typedef void (APIENTRY * GdkGLProc_glTexImage4DSGIS) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexImage4DSGIS (void);
-#define      gdk_gl_glTexImage4DSGIS(proc, target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) \
-  ( ((GdkGLProc_glTexImage4DSGIS) (proc)) (target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) )
-
-/* glTexSubImage4DSGIS */
-typedef void (APIENTRY * GdkGLProc_glTexSubImage4DSGIS) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
-GdkGLProc    gdk_gl_get_glTexSubImage4DSGIS (void);
-#define      gdk_gl_glTexSubImage4DSGIS(proc, target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) \
-  ( ((GdkGLProc_glTexSubImage4DSGIS) (proc)) (target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) )
+/* glTexImage2DMultisample */
+typedef void (APIENTRYP GdkGLProc_glTexImage2DMultisample) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
+GdkGLProc    gdk_gl_get_glTexImage2DMultisample (void);
+#define      gdk_gl_glTexImage2DMultisample(proc, target, samples, internalformat, width, height, fixedsamplelocations) \
+  ( ((GdkGLProc_glTexImage2DMultisample) (proc)) (target, samples, internalformat, width, height, fixedsamplelocations) )
+
+/* glTexImage3DMultisample */
+typedef void (APIENTRYP GdkGLProc_glTexImage3DMultisample) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
+GdkGLProc    gdk_gl_get_glTexImage3DMultisample (void);
+#define      gdk_gl_glTexImage3DMultisample(proc, target, samples, internalformat, width, height, depth, fixedsamplelocations) \
+  ( ((GdkGLProc_glTexImage3DMultisample) (proc)) (target, samples, internalformat, width, height, depth, fixedsamplelocations) )
+
+/* glGetMultisamplefv */
+typedef void (APIENTRYP GdkGLProc_glGetMultisamplefv) (GLenum pname, GLuint index, GLfloat *val);
+GdkGLProc    gdk_gl_get_glGetMultisamplefv (void);
+#define      gdk_gl_glGetMultisamplefv(proc, pname, index, val) \
+  ( ((GdkGLProc_glGetMultisamplefv) (proc)) (pname, index, val) )
+
+/* glSampleMaski */
+typedef void (APIENTRYP GdkGLProc_glSampleMaski) (GLuint index, GLbitfield mask);
+GdkGLProc    gdk_gl_get_glSampleMaski (void);
+#define      gdk_gl_glSampleMaski(proc, index, mask) \
+  ( ((GdkGLProc_glSampleMaski) (proc)) (index, mask) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_texture4D GdkGL_GL_SGIS_texture4D;
+typedef struct _GdkGL_GL_ARB_texture_multisample GdkGL_GL_ARB_texture_multisample;
 
-struct _GdkGL_GL_SGIS_texture4D
+struct _GdkGL_GL_ARB_texture_multisample
 {
-  GdkGLProc_glTexImage4DSGIS glTexImage4DSGIS;
-  GdkGLProc_glTexSubImage4DSGIS glTexSubImage4DSGIS;
+  GdkGLProc_glTexImage2DMultisample glTexImage2DMultisample;
+  GdkGLProc_glTexImage3DMultisample glTexImage3DMultisample;
+  GdkGLProc_glGetMultisamplefv glGetMultisamplefv;
+  GdkGLProc_glSampleMaski glSampleMaski;
 };
 
-GdkGL_GL_SGIS_texture4D *gdk_gl_get_GL_SGIS_texture4D (void);
+GdkGL_GL_ARB_texture_multisample *gdk_gl_get_GL_ARB_texture_multisample (void);
 
 /*
- * GL_EXT_texture_object
+ * GL_ARB_draw_buffers_blend
  */
 
-/* glAreTexturesResidentEXT */
-typedef GLboolean (APIENTRY * GdkGLProc_glAreTexturesResidentEXT) (GLsizei n, const GLuint *textures, GLboolean *residences);
-GdkGLProc    gdk_gl_get_glAreTexturesResidentEXT (void);
-#define      gdk_gl_glAreTexturesResidentEXT(proc, n, textures, residences) \
-  ( ((GdkGLProc_glAreTexturesResidentEXT) (proc)) (n, textures, residences) )
-
-/* glBindTextureEXT */
-typedef void (APIENTRY * GdkGLProc_glBindTextureEXT) (GLenum target, GLuint texture);
-GdkGLProc    gdk_gl_get_glBindTextureEXT (void);
-#define      gdk_gl_glBindTextureEXT(proc, target, texture) \
-  ( ((GdkGLProc_glBindTextureEXT) (proc)) (target, texture) )
-
-/* glDeleteTexturesEXT */
-typedef void (APIENTRY * GdkGLProc_glDeleteTexturesEXT) (GLsizei n, const GLuint *textures);
-GdkGLProc    gdk_gl_get_glDeleteTexturesEXT (void);
-#define      gdk_gl_glDeleteTexturesEXT(proc, n, textures) \
-  ( ((GdkGLProc_glDeleteTexturesEXT) (proc)) (n, textures) )
-
-/* glGenTexturesEXT */
-typedef void (APIENTRY * GdkGLProc_glGenTexturesEXT) (GLsizei n, GLuint *textures);
-GdkGLProc    gdk_gl_get_glGenTexturesEXT (void);
-#define      gdk_gl_glGenTexturesEXT(proc, n, textures) \
-  ( ((GdkGLProc_glGenTexturesEXT) (proc)) (n, textures) )
-
-/* glIsTextureEXT */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsTextureEXT) (GLuint texture);
-GdkGLProc    gdk_gl_get_glIsTextureEXT (void);
-#define      gdk_gl_glIsTextureEXT(proc, texture) \
-  ( ((GdkGLProc_glIsTextureEXT) (proc)) (texture) )
-
-/* glPrioritizeTexturesEXT */
-typedef void (APIENTRY * GdkGLProc_glPrioritizeTexturesEXT) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
-GdkGLProc    gdk_gl_get_glPrioritizeTexturesEXT (void);
-#define      gdk_gl_glPrioritizeTexturesEXT(proc, n, textures, priorities) \
-  ( ((GdkGLProc_glPrioritizeTexturesEXT) (proc)) (n, textures, priorities) )
+/* glBlendEquationi */
+typedef void (APIENTRYP GdkGLProc_glBlendEquationi) (GLuint buf, GLenum mode);
+GdkGLProc    gdk_gl_get_glBlendEquationi (void);
+#define      gdk_gl_glBlendEquationi(proc, buf, mode) \
+  ( ((GdkGLProc_glBlendEquationi) (proc)) (buf, mode) )
+
+/* glBlendEquationSeparatei */
+typedef void (APIENTRYP GdkGLProc_glBlendEquationSeparatei) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+GdkGLProc    gdk_gl_get_glBlendEquationSeparatei (void);
+#define      gdk_gl_glBlendEquationSeparatei(proc, buf, modeRGB, modeAlpha) \
+  ( ((GdkGLProc_glBlendEquationSeparatei) (proc)) (buf, modeRGB, modeAlpha) )
+
+/* glBlendFunci */
+typedef void (APIENTRYP GdkGLProc_glBlendFunci) (GLuint buf, GLenum src, GLenum dst);
+GdkGLProc    gdk_gl_get_glBlendFunci (void);
+#define      gdk_gl_glBlendFunci(proc, buf, src, dst) \
+  ( ((GdkGLProc_glBlendFunci) (proc)) (buf, src, dst) )
+
+/* glBlendFuncSeparatei */
+typedef void (APIENTRYP GdkGLProc_glBlendFuncSeparatei) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+GdkGLProc    gdk_gl_get_glBlendFuncSeparatei (void);
+#define      gdk_gl_glBlendFuncSeparatei(proc, buf, srcRGB, dstRGB, srcAlpha, dstAlpha) \
+  ( ((GdkGLProc_glBlendFuncSeparatei) (proc)) (buf, srcRGB, dstRGB, srcAlpha, dstAlpha) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_texture_object GdkGL_GL_EXT_texture_object;
+typedef struct _GdkGL_GL_ARB_draw_buffers_blend GdkGL_GL_ARB_draw_buffers_blend;
 
-struct _GdkGL_GL_EXT_texture_object
+struct _GdkGL_GL_ARB_draw_buffers_blend
 {
-  GdkGLProc_glAreTexturesResidentEXT glAreTexturesResidentEXT;
-  GdkGLProc_glBindTextureEXT glBindTextureEXT;
-  GdkGLProc_glDeleteTexturesEXT glDeleteTexturesEXT;
-  GdkGLProc_glGenTexturesEXT glGenTexturesEXT;
-  GdkGLProc_glIsTextureEXT glIsTextureEXT;
-  GdkGLProc_glPrioritizeTexturesEXT glPrioritizeTexturesEXT;
+  GdkGLProc_glBlendEquationi glBlendEquationi;
+  GdkGLProc_glBlendEquationSeparatei glBlendEquationSeparatei;
+  GdkGLProc_glBlendFunci glBlendFunci;
+  GdkGLProc_glBlendFuncSeparatei glBlendFuncSeparatei;
 };
 
-GdkGL_GL_EXT_texture_object *gdk_gl_get_GL_EXT_texture_object (void);
+GdkGL_GL_ARB_draw_buffers_blend *gdk_gl_get_GL_ARB_draw_buffers_blend (void);
 
 /*
- * GL_SGIS_detail_texture
+ * GL_ARB_sample_shading
  */
 
-/* glDetailTexFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glDetailTexFuncSGIS) (GLenum target, GLsizei n, const GLfloat *points);
-GdkGLProc    gdk_gl_get_glDetailTexFuncSGIS (void);
-#define      gdk_gl_glDetailTexFuncSGIS(proc, target, n, points) \
-  ( ((GdkGLProc_glDetailTexFuncSGIS) (proc)) (target, n, points) )
-
-/* glGetDetailTexFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glGetDetailTexFuncSGIS) (GLenum target, GLfloat *points);
-GdkGLProc    gdk_gl_get_glGetDetailTexFuncSGIS (void);
-#define      gdk_gl_glGetDetailTexFuncSGIS(proc, target, points) \
-  ( ((GdkGLProc_glGetDetailTexFuncSGIS) (proc)) (target, points) )
+/* glMinSampleShading */
+typedef void (APIENTRYP GdkGLProc_glMinSampleShading) (GLclampf value);
+GdkGLProc    gdk_gl_get_glMinSampleShading (void);
+#define      gdk_gl_glMinSampleShading(proc, value) \
+  ( ((GdkGLProc_glMinSampleShading) (proc)) (value) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_detail_texture GdkGL_GL_SGIS_detail_texture;
+typedef struct _GdkGL_GL_ARB_sample_shading GdkGL_GL_ARB_sample_shading;
 
-struct _GdkGL_GL_SGIS_detail_texture
+struct _GdkGL_GL_ARB_sample_shading
 {
-  GdkGLProc_glDetailTexFuncSGIS glDetailTexFuncSGIS;
-  GdkGLProc_glGetDetailTexFuncSGIS glGetDetailTexFuncSGIS;
+  GdkGLProc_glMinSampleShading glMinSampleShading;
 };
 
-GdkGL_GL_SGIS_detail_texture *gdk_gl_get_GL_SGIS_detail_texture (void);
+GdkGL_GL_ARB_sample_shading *gdk_gl_get_GL_ARB_sample_shading (void);
 
 /*
- * GL_SGIS_sharpen_texture
+ * GL_EXT_blend_color
  */
 
-/* glSharpenTexFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glSharpenTexFuncSGIS) (GLenum target, GLsizei n, const GLfloat *points);
-GdkGLProc    gdk_gl_get_glSharpenTexFuncSGIS (void);
-#define      gdk_gl_glSharpenTexFuncSGIS(proc, target, n, points) \
-  ( ((GdkGLProc_glSharpenTexFuncSGIS) (proc)) (target, n, points) )
-
-/* glGetSharpenTexFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glGetSharpenTexFuncSGIS) (GLenum target, GLfloat *points);
-GdkGLProc    gdk_gl_get_glGetSharpenTexFuncSGIS (void);
-#define      gdk_gl_glGetSharpenTexFuncSGIS(proc, target, points) \
-  ( ((GdkGLProc_glGetSharpenTexFuncSGIS) (proc)) (target, points) )
+/* glBlendColorEXT */
+typedef void (APIENTRYP GdkGLProc_glBlendColorEXT) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+GdkGLProc    gdk_gl_get_glBlendColorEXT (void);
+#define      gdk_gl_glBlendColorEXT(proc, red, green, blue, alpha) \
+  ( ((GdkGLProc_glBlendColorEXT) (proc)) (red, green, blue, alpha) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_sharpen_texture GdkGL_GL_SGIS_sharpen_texture;
+typedef struct _GdkGL_GL_EXT_blend_color GdkGL_GL_EXT_blend_color;
 
-struct _GdkGL_GL_SGIS_sharpen_texture
+struct _GdkGL_GL_EXT_blend_color
 {
-  GdkGLProc_glSharpenTexFuncSGIS glSharpenTexFuncSGIS;
-  GdkGLProc_glGetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS;
+  GdkGLProc_glBlendColorEXT glBlendColorEXT;
 };
 
-GdkGL_GL_SGIS_sharpen_texture *gdk_gl_get_GL_SGIS_sharpen_texture (void);
+GdkGL_GL_EXT_blend_color *gdk_gl_get_GL_EXT_blend_color (void);
 
 /*
- * GL_SGIS_multisample
+ * GL_EXT_polygon_offset
  */
 
-/* glSampleMaskSGIS */
-typedef void (APIENTRY * GdkGLProc_glSampleMaskSGIS) (GLclampf value, GLboolean invert);
-GdkGLProc    gdk_gl_get_glSampleMaskSGIS (void);
-#define      gdk_gl_glSampleMaskSGIS(proc, value, invert) \
-  ( ((GdkGLProc_glSampleMaskSGIS) (proc)) (value, invert) )
-
-/* glSamplePatternSGIS */
-typedef void (APIENTRY * GdkGLProc_glSamplePatternSGIS) (GLenum pattern);
-GdkGLProc    gdk_gl_get_glSamplePatternSGIS (void);
-#define      gdk_gl_glSamplePatternSGIS(proc, pattern) \
-  ( ((GdkGLProc_glSamplePatternSGIS) (proc)) (pattern) )
+/* glPolygonOffsetEXT */
+typedef void (APIENTRYP GdkGLProc_glPolygonOffsetEXT) (GLfloat factor, GLfloat bias);
+GdkGLProc    gdk_gl_get_glPolygonOffsetEXT (void);
+#define      gdk_gl_glPolygonOffsetEXT(proc, factor, bias) \
+  ( ((GdkGLProc_glPolygonOffsetEXT) (proc)) (factor, bias) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_multisample GdkGL_GL_SGIS_multisample;
+typedef struct _GdkGL_GL_EXT_polygon_offset GdkGL_GL_EXT_polygon_offset;
 
-struct _GdkGL_GL_SGIS_multisample
+struct _GdkGL_GL_EXT_polygon_offset
 {
-  GdkGLProc_glSampleMaskSGIS glSampleMaskSGIS;
-  GdkGLProc_glSamplePatternSGIS glSamplePatternSGIS;
+  GdkGLProc_glPolygonOffsetEXT glPolygonOffsetEXT;
 };
 
-GdkGL_GL_SGIS_multisample *gdk_gl_get_GL_SGIS_multisample (void);
+GdkGL_GL_EXT_polygon_offset *gdk_gl_get_GL_EXT_polygon_offset (void);
 
 /*
- * GL_EXT_vertex_array
+ * GL_EXT_texture3D
  */
 
-/* glArrayElementEXT */
-typedef void (APIENTRY * GdkGLProc_glArrayElementEXT) (GLint i);
-GdkGLProc    gdk_gl_get_glArrayElementEXT (void);
-#define      gdk_gl_glArrayElementEXT(proc, i) \
-  ( ((GdkGLProc_glArrayElementEXT) (proc)) (i) )
+/* glTexImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glTexImage3DEXT) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexImage3DEXT (void);
+#define      gdk_gl_glTexImage3DEXT(proc, target, level, internalformat, width, height, depth, border, format, type, pixels) \
+  ( ((GdkGLProc_glTexImage3DEXT) (proc)) (target, level, internalformat, width, height, depth, border, format, type, pixels) )
 
-/* glColorPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glColorPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glColorPointerEXT (void);
-#define      gdk_gl_glColorPointerEXT(proc, size, type, stride, count, pointer) \
-  ( ((GdkGLProc_glColorPointerEXT) (proc)) (size, type, stride, count, pointer) )
+/* glTexSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexSubImage3DEXT (void);
+#define      gdk_gl_glTexSubImage3DEXT(proc, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) \
+  ( ((GdkGLProc_glTexSubImage3DEXT) (proc)) (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) )
 
-/* glDrawArraysEXT */
-typedef void (APIENTRY * GdkGLProc_glDrawArraysEXT) (GLenum mode, GLint first, GLsizei count);
-GdkGLProc    gdk_gl_get_glDrawArraysEXT (void);
-#define      gdk_gl_glDrawArraysEXT(proc, mode, first, count) \
-  ( ((GdkGLProc_glDrawArraysEXT) (proc)) (mode, first, count) )
+/* proc struct */
 
-/* glEdgeFlagPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glEdgeFlagPointerEXT) (GLsizei stride, GLsizei count, const GLboolean *pointer);
-GdkGLProc    gdk_gl_get_glEdgeFlagPointerEXT (void);
-#define      gdk_gl_glEdgeFlagPointerEXT(proc, stride, count, pointer) \
-  ( ((GdkGLProc_glEdgeFlagPointerEXT) (proc)) (stride, count, pointer) )
+typedef struct _GdkGL_GL_EXT_texture3D GdkGL_GL_EXT_texture3D;
 
-/* glGetPointervEXT */
-typedef void (APIENTRY * GdkGLProc_glGetPointervEXT) (GLenum pname, GLvoid* *params);
-GdkGLProc    gdk_gl_get_glGetPointervEXT (void);
-#define      gdk_gl_glGetPointervEXT(proc, pname, params) \
-  ( ((GdkGLProc_glGetPointervEXT) (proc)) (pname, params) )
+struct _GdkGL_GL_EXT_texture3D
+{
+  GdkGLProc_glTexImage3DEXT glTexImage3DEXT;
+  GdkGLProc_glTexSubImage3DEXT glTexSubImage3DEXT;
+};
 
-/* glIndexPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glIndexPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glIndexPointerEXT (void);
-#define      gdk_gl_glIndexPointerEXT(proc, type, stride, count, pointer) \
-  ( ((GdkGLProc_glIndexPointerEXT) (proc)) (type, stride, count, pointer) )
+GdkGL_GL_EXT_texture3D *gdk_gl_get_GL_EXT_texture3D (void);
 
-/* glNormalPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glNormalPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glNormalPointerEXT (void);
-#define      gdk_gl_glNormalPointerEXT(proc, type, stride, count, pointer) \
-  ( ((GdkGLProc_glNormalPointerEXT) (proc)) (type, stride, count, pointer) )
+/*
+ * GL_SGIS_texture_filter4
+ */
 
-/* glTexCoordPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glTexCoordPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glTexCoordPointerEXT (void);
-#define      gdk_gl_glTexCoordPointerEXT(proc, size, type, stride, count, pointer) \
-  ( ((GdkGLProc_glTexCoordPointerEXT) (proc)) (size, type, stride, count, pointer) )
+/* glGetTexFilterFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glGetTexFilterFuncSGIS) (GLenum target, GLenum filter, GLfloat *weights);
+GdkGLProc    gdk_gl_get_glGetTexFilterFuncSGIS (void);
+#define      gdk_gl_glGetTexFilterFuncSGIS(proc, target, filter, weights) \
+  ( ((GdkGLProc_glGetTexFilterFuncSGIS) (proc)) (target, filter, weights) )
 
-/* glVertexPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glVertexPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glVertexPointerEXT (void);
-#define      gdk_gl_glVertexPointerEXT(proc, size, type, stride, count, pointer) \
-  ( ((GdkGLProc_glVertexPointerEXT) (proc)) (size, type, stride, count, pointer) )
+/* glTexFilterFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glTexFilterFuncSGIS) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
+GdkGLProc    gdk_gl_get_glTexFilterFuncSGIS (void);
+#define      gdk_gl_glTexFilterFuncSGIS(proc, target, filter, n, weights) \
+  ( ((GdkGLProc_glTexFilterFuncSGIS) (proc)) (target, filter, n, weights) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_vertex_array GdkGL_GL_EXT_vertex_array;
+typedef struct _GdkGL_GL_SGIS_texture_filter4 GdkGL_GL_SGIS_texture_filter4;
 
-struct _GdkGL_GL_EXT_vertex_array
+struct _GdkGL_GL_SGIS_texture_filter4
 {
-  GdkGLProc_glArrayElementEXT glArrayElementEXT;
-  GdkGLProc_glColorPointerEXT glColorPointerEXT;
-  GdkGLProc_glDrawArraysEXT glDrawArraysEXT;
-  GdkGLProc_glEdgeFlagPointerEXT glEdgeFlagPointerEXT;
-  GdkGLProc_glGetPointervEXT glGetPointervEXT;
-  GdkGLProc_glIndexPointerEXT glIndexPointerEXT;
-  GdkGLProc_glNormalPointerEXT glNormalPointerEXT;
-  GdkGLProc_glTexCoordPointerEXT glTexCoordPointerEXT;
-  GdkGLProc_glVertexPointerEXT glVertexPointerEXT;
+  GdkGLProc_glGetTexFilterFuncSGIS glGetTexFilterFuncSGIS;
+  GdkGLProc_glTexFilterFuncSGIS glTexFilterFuncSGIS;
 };
 
-GdkGL_GL_EXT_vertex_array *gdk_gl_get_GL_EXT_vertex_array (void);
+GdkGL_GL_SGIS_texture_filter4 *gdk_gl_get_GL_SGIS_texture_filter4 (void);
 
 /*
- * GL_EXT_blend_minmax
+ * GL_EXT_subtexture
  */
 
-/* glBlendEquationEXT */
-typedef void (APIENTRY * GdkGLProc_glBlendEquationEXT) (GLenum mode);
-GdkGLProc    gdk_gl_get_glBlendEquationEXT (void);
-#define      gdk_gl_glBlendEquationEXT(proc, mode) \
-  ( ((GdkGLProc_glBlendEquationEXT) (proc)) (mode) )
+/* glTexSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glTexSubImage1DEXT) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexSubImage1DEXT (void);
+#define      gdk_gl_glTexSubImage1DEXT(proc, target, level, xoffset, width, format, type, pixels) \
+  ( ((GdkGLProc_glTexSubImage1DEXT) (proc)) (target, level, xoffset, width, format, type, pixels) )
+
+/* glTexSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glTexSubImage2DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexSubImage2DEXT (void);
+#define      gdk_gl_glTexSubImage2DEXT(proc, target, level, xoffset, yoffset, width, height, format, type, pixels) \
+  ( ((GdkGLProc_glTexSubImage2DEXT) (proc)) (target, level, xoffset, yoffset, width, height, format, type, pixels) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_blend_minmax GdkGL_GL_EXT_blend_minmax;
+typedef struct _GdkGL_GL_EXT_subtexture GdkGL_GL_EXT_subtexture;
 
-struct _GdkGL_GL_EXT_blend_minmax
+struct _GdkGL_GL_EXT_subtexture
 {
-  GdkGLProc_glBlendEquationEXT glBlendEquationEXT;
+  GdkGLProc_glTexSubImage1DEXT glTexSubImage1DEXT;
+  GdkGLProc_glTexSubImage2DEXT glTexSubImage2DEXT;
 };
 
-GdkGL_GL_EXT_blend_minmax *gdk_gl_get_GL_EXT_blend_minmax (void);
+GdkGL_GL_EXT_subtexture *gdk_gl_get_GL_EXT_subtexture (void);
 
 /*
- * GL_SGIX_sprite
+ * GL_EXT_copy_texture
  */
 
-/* glSpriteParameterfSGIX */
-typedef void (APIENTRY * GdkGLProc_glSpriteParameterfSGIX) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glSpriteParameterfSGIX (void);
-#define      gdk_gl_glSpriteParameterfSGIX(proc, pname, param) \
-  ( ((GdkGLProc_glSpriteParameterfSGIX) (proc)) (pname, param) )
+/* glCopyTexImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTexImage1DEXT) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+GdkGLProc    gdk_gl_get_glCopyTexImage1DEXT (void);
+#define      gdk_gl_glCopyTexImage1DEXT(proc, target, level, internalformat, x, y, width, border) \
+  ( ((GdkGLProc_glCopyTexImage1DEXT) (proc)) (target, level, internalformat, x, y, width, border) )
 
-/* glSpriteParameterfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glSpriteParameterfvSGIX) (GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glSpriteParameterfvSGIX (void);
-#define      gdk_gl_glSpriteParameterfvSGIX(proc, pname, params) \
-  ( ((GdkGLProc_glSpriteParameterfvSGIX) (proc)) (pname, params) )
+/* glCopyTexImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTexImage2DEXT) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+GdkGLProc    gdk_gl_get_glCopyTexImage2DEXT (void);
+#define      gdk_gl_glCopyTexImage2DEXT(proc, target, level, internalformat, x, y, width, height, border) \
+  ( ((GdkGLProc_glCopyTexImage2DEXT) (proc)) (target, level, internalformat, x, y, width, height, border) )
 
-/* glSpriteParameteriSGIX */
-typedef void (APIENTRY * GdkGLProc_glSpriteParameteriSGIX) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glSpriteParameteriSGIX (void);
-#define      gdk_gl_glSpriteParameteriSGIX(proc, pname, param) \
-  ( ((GdkGLProc_glSpriteParameteriSGIX) (proc)) (pname, param) )
+/* glCopyTexSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTexSubImage1DEXT) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+GdkGLProc    gdk_gl_get_glCopyTexSubImage1DEXT (void);
+#define      gdk_gl_glCopyTexSubImage1DEXT(proc, target, level, xoffset, x, y, width) \
+  ( ((GdkGLProc_glCopyTexSubImage1DEXT) (proc)) (target, level, xoffset, x, y, width) )
 
-/* glSpriteParameterivSGIX */
-typedef void (APIENTRY * GdkGLProc_glSpriteParameterivSGIX) (GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glSpriteParameterivSGIX (void);
-#define      gdk_gl_glSpriteParameterivSGIX(proc, pname, params) \
-  ( ((GdkGLProc_glSpriteParameterivSGIX) (proc)) (pname, params) )
+/* glCopyTexSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTexSubImage2DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyTexSubImage2DEXT (void);
+#define      gdk_gl_glCopyTexSubImage2DEXT(proc, target, level, xoffset, yoffset, x, y, width, height) \
+  ( ((GdkGLProc_glCopyTexSubImage2DEXT) (proc)) (target, level, xoffset, yoffset, x, y, width, height) )
+
+/* glCopyTexSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyTexSubImage3DEXT (void);
+#define      gdk_gl_glCopyTexSubImage3DEXT(proc, target, level, xoffset, yoffset, zoffset, x, y, width, height) \
+  ( ((GdkGLProc_glCopyTexSubImage3DEXT) (proc)) (target, level, xoffset, yoffset, zoffset, x, y, width, height) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_sprite GdkGL_GL_SGIX_sprite;
+typedef struct _GdkGL_GL_EXT_copy_texture GdkGL_GL_EXT_copy_texture;
 
-struct _GdkGL_GL_SGIX_sprite
+struct _GdkGL_GL_EXT_copy_texture
 {
-  GdkGLProc_glSpriteParameterfSGIX glSpriteParameterfSGIX;
-  GdkGLProc_glSpriteParameterfvSGIX glSpriteParameterfvSGIX;
-  GdkGLProc_glSpriteParameteriSGIX glSpriteParameteriSGIX;
-  GdkGLProc_glSpriteParameterivSGIX glSpriteParameterivSGIX;
+  GdkGLProc_glCopyTexImage1DEXT glCopyTexImage1DEXT;
+  GdkGLProc_glCopyTexImage2DEXT glCopyTexImage2DEXT;
+  GdkGLProc_glCopyTexSubImage1DEXT glCopyTexSubImage1DEXT;
+  GdkGLProc_glCopyTexSubImage2DEXT glCopyTexSubImage2DEXT;
+  GdkGLProc_glCopyTexSubImage3DEXT glCopyTexSubImage3DEXT;
 };
 
-GdkGL_GL_SGIX_sprite *gdk_gl_get_GL_SGIX_sprite (void);
+GdkGL_GL_EXT_copy_texture *gdk_gl_get_GL_EXT_copy_texture (void);
 
 /*
- * GL_EXT_point_parameters
+ * GL_EXT_histogram
  */
 
-/* glPointParameterfEXT */
-typedef void (APIENTRY * GdkGLProc_glPointParameterfEXT) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glPointParameterfEXT (void);
-#define      gdk_gl_glPointParameterfEXT(proc, pname, param) \
-  ( ((GdkGLProc_glPointParameterfEXT) (proc)) (pname, param) )
+/* glGetHistogramEXT */
+typedef void (APIENTRYP GdkGLProc_glGetHistogramEXT) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+GdkGLProc    gdk_gl_get_glGetHistogramEXT (void);
+#define      gdk_gl_glGetHistogramEXT(proc, target, reset, format, type, values) \
+  ( ((GdkGLProc_glGetHistogramEXT) (proc)) (target, reset, format, type, values) )
 
-/* glPointParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glPointParameterfvEXT) (GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glPointParameterfvEXT (void);
-#define      gdk_gl_glPointParameterfvEXT(proc, pname, params) \
-  ( ((GdkGLProc_glPointParameterfvEXT) (proc)) (pname, params) )
+/* glGetHistogramParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetHistogramParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetHistogramParameterfvEXT (void);
+#define      gdk_gl_glGetHistogramParameterfvEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetHistogramParameterfvEXT) (proc)) (target, pname, params) )
 
-/* proc struct */
+/* glGetHistogramParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetHistogramParameterivEXT) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetHistogramParameterivEXT (void);
+#define      gdk_gl_glGetHistogramParameterivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetHistogramParameterivEXT) (proc)) (target, pname, params) )
 
-typedef struct _GdkGL_GL_EXT_point_parameters GdkGL_GL_EXT_point_parameters;
+/* glGetMinmaxEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMinmaxEXT) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+GdkGLProc    gdk_gl_get_glGetMinmaxEXT (void);
+#define      gdk_gl_glGetMinmaxEXT(proc, target, reset, format, type, values) \
+  ( ((GdkGLProc_glGetMinmaxEXT) (proc)) (target, reset, format, type, values) )
 
-struct _GdkGL_GL_EXT_point_parameters
-{
-  GdkGLProc_glPointParameterfEXT glPointParameterfEXT;
-  GdkGLProc_glPointParameterfvEXT glPointParameterfvEXT;
-};
+/* glGetMinmaxParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMinmaxParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetMinmaxParameterfvEXT (void);
+#define      gdk_gl_glGetMinmaxParameterfvEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetMinmaxParameterfvEXT) (proc)) (target, pname, params) )
 
-GdkGL_GL_EXT_point_parameters *gdk_gl_get_GL_EXT_point_parameters (void);
+/* glGetMinmaxParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMinmaxParameterivEXT) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMinmaxParameterivEXT (void);
+#define      gdk_gl_glGetMinmaxParameterivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetMinmaxParameterivEXT) (proc)) (target, pname, params) )
 
-/*
- * GL_SGIS_point_parameters
- */
+/* glHistogramEXT */
+typedef void (APIENTRYP GdkGLProc_glHistogramEXT) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+GdkGLProc    gdk_gl_get_glHistogramEXT (void);
+#define      gdk_gl_glHistogramEXT(proc, target, width, internalformat, sink) \
+  ( ((GdkGLProc_glHistogramEXT) (proc)) (target, width, internalformat, sink) )
 
-/* glPointParameterfSGIS */
-typedef void (APIENTRY * GdkGLProc_glPointParameterfSGIS) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glPointParameterfSGIS (void);
-#define      gdk_gl_glPointParameterfSGIS(proc, pname, param) \
-  ( ((GdkGLProc_glPointParameterfSGIS) (proc)) (pname, param) )
+/* glMinmaxEXT */
+typedef void (APIENTRYP GdkGLProc_glMinmaxEXT) (GLenum target, GLenum internalformat, GLboolean sink);
+GdkGLProc    gdk_gl_get_glMinmaxEXT (void);
+#define      gdk_gl_glMinmaxEXT(proc, target, internalformat, sink) \
+  ( ((GdkGLProc_glMinmaxEXT) (proc)) (target, internalformat, sink) )
 
-/* glPointParameterfvSGIS */
-typedef void (APIENTRY * GdkGLProc_glPointParameterfvSGIS) (GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glPointParameterfvSGIS (void);
-#define      gdk_gl_glPointParameterfvSGIS(proc, pname, params) \
-  ( ((GdkGLProc_glPointParameterfvSGIS) (proc)) (pname, params) )
+/* glResetHistogramEXT */
+typedef void (APIENTRYP GdkGLProc_glResetHistogramEXT) (GLenum target);
+GdkGLProc    gdk_gl_get_glResetHistogramEXT (void);
+#define      gdk_gl_glResetHistogramEXT(proc, target) \
+  ( ((GdkGLProc_glResetHistogramEXT) (proc)) (target) )
+
+/* glResetMinmaxEXT */
+typedef void (APIENTRYP GdkGLProc_glResetMinmaxEXT) (GLenum target);
+GdkGLProc    gdk_gl_get_glResetMinmaxEXT (void);
+#define      gdk_gl_glResetMinmaxEXT(proc, target) \
+  ( ((GdkGLProc_glResetMinmaxEXT) (proc)) (target) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_point_parameters GdkGL_GL_SGIS_point_parameters;
+typedef struct _GdkGL_GL_EXT_histogram GdkGL_GL_EXT_histogram;
 
-struct _GdkGL_GL_SGIS_point_parameters
+struct _GdkGL_GL_EXT_histogram
 {
-  GdkGLProc_glPointParameterfSGIS glPointParameterfSGIS;
-  GdkGLProc_glPointParameterfvSGIS glPointParameterfvSGIS;
+  GdkGLProc_glGetHistogramEXT glGetHistogramEXT;
+  GdkGLProc_glGetHistogramParameterfvEXT glGetHistogramParameterfvEXT;
+  GdkGLProc_glGetHistogramParameterivEXT glGetHistogramParameterivEXT;
+  GdkGLProc_glGetMinmaxEXT glGetMinmaxEXT;
+  GdkGLProc_glGetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT;
+  GdkGLProc_glGetMinmaxParameterivEXT glGetMinmaxParameterivEXT;
+  GdkGLProc_glHistogramEXT glHistogramEXT;
+  GdkGLProc_glMinmaxEXT glMinmaxEXT;
+  GdkGLProc_glResetHistogramEXT glResetHistogramEXT;
+  GdkGLProc_glResetMinmaxEXT glResetMinmaxEXT;
 };
 
-GdkGL_GL_SGIS_point_parameters *gdk_gl_get_GL_SGIS_point_parameters (void);
+GdkGL_GL_EXT_histogram *gdk_gl_get_GL_EXT_histogram (void);
 
 /*
- * GL_SGIX_instruments
+ * GL_EXT_convolution
  */
 
-/* glGetInstrumentsSGIX */
-typedef GLint (APIENTRY * GdkGLProc_glGetInstrumentsSGIX) (void);
-GdkGLProc    gdk_gl_get_glGetInstrumentsSGIX (void);
-#define      gdk_gl_glGetInstrumentsSGIX(proc) \
-  ( ((GdkGLProc_glGetInstrumentsSGIX) (proc)) () )
+/* glConvolutionFilter1DEXT */
+typedef void (APIENTRYP GdkGLProc_glConvolutionFilter1DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
+GdkGLProc    gdk_gl_get_glConvolutionFilter1DEXT (void);
+#define      gdk_gl_glConvolutionFilter1DEXT(proc, target, internalformat, width, format, type, image) \
+  ( ((GdkGLProc_glConvolutionFilter1DEXT) (proc)) (target, internalformat, width, format, type, image) )
 
-/* glInstrumentsBufferSGIX */
-typedef void (APIENTRY * GdkGLProc_glInstrumentsBufferSGIX) (GLsizei size, GLint *buffer);
-GdkGLProc    gdk_gl_get_glInstrumentsBufferSGIX (void);
-#define      gdk_gl_glInstrumentsBufferSGIX(proc, size, buffer) \
-  ( ((GdkGLProc_glInstrumentsBufferSGIX) (proc)) (size, buffer) )
+/* glConvolutionFilter2DEXT */
+typedef void (APIENTRYP GdkGLProc_glConvolutionFilter2DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
+GdkGLProc    gdk_gl_get_glConvolutionFilter2DEXT (void);
+#define      gdk_gl_glConvolutionFilter2DEXT(proc, target, internalformat, width, height, format, type, image) \
+  ( ((GdkGLProc_glConvolutionFilter2DEXT) (proc)) (target, internalformat, width, height, format, type, image) )
 
-/* glPollInstrumentsSGIX */
-typedef GLint (APIENTRY * GdkGLProc_glPollInstrumentsSGIX) (GLint *marker_p);
-GdkGLProc    gdk_gl_get_glPollInstrumentsSGIX (void);
-#define      gdk_gl_glPollInstrumentsSGIX(proc, marker_p) \
-  ( ((GdkGLProc_glPollInstrumentsSGIX) (proc)) (marker_p) )
+/* glConvolutionParameterfEXT */
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameterfEXT) (GLenum target, GLenum pname, GLfloat params);
+GdkGLProc    gdk_gl_get_glConvolutionParameterfEXT (void);
+#define      gdk_gl_glConvolutionParameterfEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glConvolutionParameterfEXT) (proc)) (target, pname, params) )
 
-/* glReadInstrumentsSGIX */
-typedef void (APIENTRY * GdkGLProc_glReadInstrumentsSGIX) (GLint marker);
-GdkGLProc    gdk_gl_get_glReadInstrumentsSGIX (void);
-#define      gdk_gl_glReadInstrumentsSGIX(proc, marker) \
-  ( ((GdkGLProc_glReadInstrumentsSGIX) (proc)) (marker) )
+/* glConvolutionParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameterfvEXT) (GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glConvolutionParameterfvEXT (void);
+#define      gdk_gl_glConvolutionParameterfvEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glConvolutionParameterfvEXT) (proc)) (target, pname, params) )
 
-/* glStartInstrumentsSGIX */
-typedef void (APIENTRY * GdkGLProc_glStartInstrumentsSGIX) (void);
-GdkGLProc    gdk_gl_get_glStartInstrumentsSGIX (void);
-#define      gdk_gl_glStartInstrumentsSGIX(proc) \
-  ( ((GdkGLProc_glStartInstrumentsSGIX) (proc)) () )
+/* glConvolutionParameteriEXT */
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameteriEXT) (GLenum target, GLenum pname, GLint params);
+GdkGLProc    gdk_gl_get_glConvolutionParameteriEXT (void);
+#define      gdk_gl_glConvolutionParameteriEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glConvolutionParameteriEXT) (proc)) (target, pname, params) )
 
-/* glStopInstrumentsSGIX */
-typedef void (APIENTRY * GdkGLProc_glStopInstrumentsSGIX) (GLint marker);
-GdkGLProc    gdk_gl_get_glStopInstrumentsSGIX (void);
-#define      gdk_gl_glStopInstrumentsSGIX(proc, marker) \
-  ( ((GdkGLProc_glStopInstrumentsSGIX) (proc)) (marker) )
+/* glConvolutionParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glConvolutionParameterivEXT) (GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glConvolutionParameterivEXT (void);
+#define      gdk_gl_glConvolutionParameterivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glConvolutionParameterivEXT) (proc)) (target, pname, params) )
 
-/* proc struct */
+/* glCopyConvolutionFilter1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyConvolutionFilter1DEXT) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+GdkGLProc    gdk_gl_get_glCopyConvolutionFilter1DEXT (void);
+#define      gdk_gl_glCopyConvolutionFilter1DEXT(proc, target, internalformat, x, y, width) \
+  ( ((GdkGLProc_glCopyConvolutionFilter1DEXT) (proc)) (target, internalformat, x, y, width) )
 
-typedef struct _GdkGL_GL_SGIX_instruments GdkGL_GL_SGIX_instruments;
+/* glCopyConvolutionFilter2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyConvolutionFilter2DEXT) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyConvolutionFilter2DEXT (void);
+#define      gdk_gl_glCopyConvolutionFilter2DEXT(proc, target, internalformat, x, y, width, height) \
+  ( ((GdkGLProc_glCopyConvolutionFilter2DEXT) (proc)) (target, internalformat, x, y, width, height) )
 
-struct _GdkGL_GL_SGIX_instruments
-{
-  GdkGLProc_glGetInstrumentsSGIX glGetInstrumentsSGIX;
-  GdkGLProc_glInstrumentsBufferSGIX glInstrumentsBufferSGIX;
-  GdkGLProc_glPollInstrumentsSGIX glPollInstrumentsSGIX;
-  GdkGLProc_glReadInstrumentsSGIX glReadInstrumentsSGIX;
-  GdkGLProc_glStartInstrumentsSGIX glStartInstrumentsSGIX;
-  GdkGLProc_glStopInstrumentsSGIX glStopInstrumentsSGIX;
-};
+/* glGetConvolutionFilterEXT */
+typedef void (APIENTRYP GdkGLProc_glGetConvolutionFilterEXT) (GLenum target, GLenum format, GLenum type, GLvoid *image);
+GdkGLProc    gdk_gl_get_glGetConvolutionFilterEXT (void);
+#define      gdk_gl_glGetConvolutionFilterEXT(proc, target, format, type, image) \
+  ( ((GdkGLProc_glGetConvolutionFilterEXT) (proc)) (target, format, type, image) )
 
-GdkGL_GL_SGIX_instruments *gdk_gl_get_GL_SGIX_instruments (void);
+/* glGetConvolutionParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetConvolutionParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetConvolutionParameterfvEXT (void);
+#define      gdk_gl_glGetConvolutionParameterfvEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetConvolutionParameterfvEXT) (proc)) (target, pname, params) )
 
-/*
- * GL_SGIX_framezoom
- */
+/* glGetConvolutionParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetConvolutionParameterivEXT) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetConvolutionParameterivEXT (void);
+#define      gdk_gl_glGetConvolutionParameterivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetConvolutionParameterivEXT) (proc)) (target, pname, params) )
 
-/* glFrameZoomSGIX */
-typedef void (APIENTRY * GdkGLProc_glFrameZoomSGIX) (GLint factor);
-GdkGLProc    gdk_gl_get_glFrameZoomSGIX (void);
-#define      gdk_gl_glFrameZoomSGIX(proc, factor) \
-  ( ((GdkGLProc_glFrameZoomSGIX) (proc)) (factor) )
+/* glGetSeparableFilterEXT */
+typedef void (APIENTRYP GdkGLProc_glGetSeparableFilterEXT) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
+GdkGLProc    gdk_gl_get_glGetSeparableFilterEXT (void);
+#define      gdk_gl_glGetSeparableFilterEXT(proc, target, format, type, row, column, span) \
+  ( ((GdkGLProc_glGetSeparableFilterEXT) (proc)) (target, format, type, row, column, span) )
+
+/* glSeparableFilter2DEXT */
+typedef void (APIENTRYP GdkGLProc_glSeparableFilter2DEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
+GdkGLProc    gdk_gl_get_glSeparableFilter2DEXT (void);
+#define      gdk_gl_glSeparableFilter2DEXT(proc, target, internalformat, width, height, format, type, row, column) \
+  ( ((GdkGLProc_glSeparableFilter2DEXT) (proc)) (target, internalformat, width, height, format, type, row, column) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_framezoom GdkGL_GL_SGIX_framezoom;
+typedef struct _GdkGL_GL_EXT_convolution GdkGL_GL_EXT_convolution;
 
-struct _GdkGL_GL_SGIX_framezoom
+struct _GdkGL_GL_EXT_convolution
 {
-  GdkGLProc_glFrameZoomSGIX glFrameZoomSGIX;
+  GdkGLProc_glConvolutionFilter1DEXT glConvolutionFilter1DEXT;
+  GdkGLProc_glConvolutionFilter2DEXT glConvolutionFilter2DEXT;
+  GdkGLProc_glConvolutionParameterfEXT glConvolutionParameterfEXT;
+  GdkGLProc_glConvolutionParameterfvEXT glConvolutionParameterfvEXT;
+  GdkGLProc_glConvolutionParameteriEXT glConvolutionParameteriEXT;
+  GdkGLProc_glConvolutionParameterivEXT glConvolutionParameterivEXT;
+  GdkGLProc_glCopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT;
+  GdkGLProc_glCopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT;
+  GdkGLProc_glGetConvolutionFilterEXT glGetConvolutionFilterEXT;
+  GdkGLProc_glGetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT;
+  GdkGLProc_glGetConvolutionParameterivEXT glGetConvolutionParameterivEXT;
+  GdkGLProc_glGetSeparableFilterEXT glGetSeparableFilterEXT;
+  GdkGLProc_glSeparableFilter2DEXT glSeparableFilter2DEXT;
 };
 
-GdkGL_GL_SGIX_framezoom *gdk_gl_get_GL_SGIX_framezoom (void);
+GdkGL_GL_EXT_convolution *gdk_gl_get_GL_EXT_convolution (void);
 
 /*
- * GL_SGIX_tag_sample_buffer
+ * GL_SGI_color_table
  */
 
-/* glTagSampleBufferSGIX */
-typedef void (APIENTRY * GdkGLProc_glTagSampleBufferSGIX) (void);
-GdkGLProc    gdk_gl_get_glTagSampleBufferSGIX (void);
-#define      gdk_gl_glTagSampleBufferSGIX(proc) \
-  ( ((GdkGLProc_glTagSampleBufferSGIX) (proc)) () )
-
-/* proc struct */
-
-typedef struct _GdkGL_GL_SGIX_tag_sample_buffer GdkGL_GL_SGIX_tag_sample_buffer;
-
-struct _GdkGL_GL_SGIX_tag_sample_buffer
-{
-  GdkGLProc_glTagSampleBufferSGIX glTagSampleBufferSGIX;
-};
+/* glColorTableSGI */
+typedef void (APIENTRYP GdkGLProc_glColorTableSGI) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+GdkGLProc    gdk_gl_get_glColorTableSGI (void);
+#define      gdk_gl_glColorTableSGI(proc, target, internalformat, width, format, type, table) \
+  ( ((GdkGLProc_glColorTableSGI) (proc)) (target, internalformat, width, format, type, table) )
 
-GdkGL_GL_SGIX_tag_sample_buffer *gdk_gl_get_GL_SGIX_tag_sample_buffer (void);
+/* glColorTableParameterfvSGI */
+typedef void (APIENTRYP GdkGLProc_glColorTableParameterfvSGI) (GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glColorTableParameterfvSGI (void);
+#define      gdk_gl_glColorTableParameterfvSGI(proc, target, pname, params) \
+  ( ((GdkGLProc_glColorTableParameterfvSGI) (proc)) (target, pname, params) )
 
-/*
- * GL_SGIX_polynomial_ffd
- */
+/* glColorTableParameterivSGI */
+typedef void (APIENTRYP GdkGLProc_glColorTableParameterivSGI) (GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glColorTableParameterivSGI (void);
+#define      gdk_gl_glColorTableParameterivSGI(proc, target, pname, params) \
+  ( ((GdkGLProc_glColorTableParameterivSGI) (proc)) (target, pname, params) )
 
-/* glDeformationMap3dSGIX */
-typedef void (APIENTRY * GdkGLProc_glDeformationMap3dSGIX) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
-GdkGLProc    gdk_gl_get_glDeformationMap3dSGIX (void);
-#define      gdk_gl_glDeformationMap3dSGIX(proc, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) \
-  ( ((GdkGLProc_glDeformationMap3dSGIX) (proc)) (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) )
+/* glCopyColorTableSGI */
+typedef void (APIENTRYP GdkGLProc_glCopyColorTableSGI) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+GdkGLProc    gdk_gl_get_glCopyColorTableSGI (void);
+#define      gdk_gl_glCopyColorTableSGI(proc, target, internalformat, x, y, width) \
+  ( ((GdkGLProc_glCopyColorTableSGI) (proc)) (target, internalformat, x, y, width) )
 
-/* glDeformationMap3fSGIX */
-typedef void (APIENTRY * GdkGLProc_glDeformationMap3fSGIX) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
-GdkGLProc    gdk_gl_get_glDeformationMap3fSGIX (void);
-#define      gdk_gl_glDeformationMap3fSGIX(proc, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) \
-  ( ((GdkGLProc_glDeformationMap3fSGIX) (proc)) (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) )
+/* glGetColorTableSGI */
+typedef void (APIENTRYP GdkGLProc_glGetColorTableSGI) (GLenum target, GLenum format, GLenum type, GLvoid *table);
+GdkGLProc    gdk_gl_get_glGetColorTableSGI (void);
+#define      gdk_gl_glGetColorTableSGI(proc, target, format, type, table) \
+  ( ((GdkGLProc_glGetColorTableSGI) (proc)) (target, format, type, table) )
 
-/* glDeformSGIX */
-typedef void (APIENTRY * GdkGLProc_glDeformSGIX) (GLbitfield mask);
-GdkGLProc    gdk_gl_get_glDeformSGIX (void);
-#define      gdk_gl_glDeformSGIX(proc, mask) \
-  ( ((GdkGLProc_glDeformSGIX) (proc)) (mask) )
+/* glGetColorTableParameterfvSGI */
+typedef void (APIENTRYP GdkGLProc_glGetColorTableParameterfvSGI) (GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetColorTableParameterfvSGI (void);
+#define      gdk_gl_glGetColorTableParameterfvSGI(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetColorTableParameterfvSGI) (proc)) (target, pname, params) )
 
-/* glLoadIdentityDeformationMapSGIX */
-typedef void (APIENTRY * GdkGLProc_glLoadIdentityDeformationMapSGIX) (GLbitfield mask);
-GdkGLProc    gdk_gl_get_glLoadIdentityDeformationMapSGIX (void);
-#define      gdk_gl_glLoadIdentityDeformationMapSGIX(proc, mask) \
-  ( ((GdkGLProc_glLoadIdentityDeformationMapSGIX) (proc)) (mask) )
+/* glGetColorTableParameterivSGI */
+typedef void (APIENTRYP GdkGLProc_glGetColorTableParameterivSGI) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetColorTableParameterivSGI (void);
+#define      gdk_gl_glGetColorTableParameterivSGI(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetColorTableParameterivSGI) (proc)) (target, pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_polynomial_ffd GdkGL_GL_SGIX_polynomial_ffd;
+typedef struct _GdkGL_GL_SGI_color_table GdkGL_GL_SGI_color_table;
 
-struct _GdkGL_GL_SGIX_polynomial_ffd
+struct _GdkGL_GL_SGI_color_table
 {
-  GdkGLProc_glDeformationMap3dSGIX glDeformationMap3dSGIX;
-  GdkGLProc_glDeformationMap3fSGIX glDeformationMap3fSGIX;
-  GdkGLProc_glDeformSGIX glDeformSGIX;
-  GdkGLProc_glLoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX;
+  GdkGLProc_glColorTableSGI glColorTableSGI;
+  GdkGLProc_glColorTableParameterfvSGI glColorTableParameterfvSGI;
+  GdkGLProc_glColorTableParameterivSGI glColorTableParameterivSGI;
+  GdkGLProc_glCopyColorTableSGI glCopyColorTableSGI;
+  GdkGLProc_glGetColorTableSGI glGetColorTableSGI;
+  GdkGLProc_glGetColorTableParameterfvSGI glGetColorTableParameterfvSGI;
+  GdkGLProc_glGetColorTableParameterivSGI glGetColorTableParameterivSGI;
 };
 
-GdkGL_GL_SGIX_polynomial_ffd *gdk_gl_get_GL_SGIX_polynomial_ffd (void);
+GdkGL_GL_SGI_color_table *gdk_gl_get_GL_SGI_color_table (void);
 
 /*
- * GL_SGIX_reference_plane
+ * GL_SGIX_pixel_texture
  */
 
-/* glReferencePlaneSGIX */
-typedef void (APIENTRY * GdkGLProc_glReferencePlaneSGIX) (const GLdouble *equation);
-GdkGLProc    gdk_gl_get_glReferencePlaneSGIX (void);
-#define      gdk_gl_glReferencePlaneSGIX(proc, equation) \
-  ( ((GdkGLProc_glReferencePlaneSGIX) (proc)) (equation) )
+/* glPixelTexGenSGIX */
+typedef void (APIENTRYP GdkGLProc_glPixelTexGenSGIX) (GLenum mode);
+GdkGLProc    gdk_gl_get_glPixelTexGenSGIX (void);
+#define      gdk_gl_glPixelTexGenSGIX(proc, mode) \
+  ( ((GdkGLProc_glPixelTexGenSGIX) (proc)) (mode) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_reference_plane GdkGL_GL_SGIX_reference_plane;
+typedef struct _GdkGL_GL_SGIX_pixel_texture GdkGL_GL_SGIX_pixel_texture;
 
-struct _GdkGL_GL_SGIX_reference_plane
+struct _GdkGL_GL_SGIX_pixel_texture
 {
-  GdkGLProc_glReferencePlaneSGIX glReferencePlaneSGIX;
+  GdkGLProc_glPixelTexGenSGIX glPixelTexGenSGIX;
 };
 
-GdkGL_GL_SGIX_reference_plane *gdk_gl_get_GL_SGIX_reference_plane (void);
+GdkGL_GL_SGIX_pixel_texture *gdk_gl_get_GL_SGIX_pixel_texture (void);
 
 /*
- * GL_SGIX_flush_raster
+ * GL_SGIS_pixel_texture
  */
 
-/* glFlushRasterSGIX */
-typedef void (APIENTRY * GdkGLProc_glFlushRasterSGIX) (void);
-GdkGLProc    gdk_gl_get_glFlushRasterSGIX (void);
-#define      gdk_gl_glFlushRasterSGIX(proc) \
-  ( ((GdkGLProc_glFlushRasterSGIX) (proc)) () )
-
-/* proc struct */
-
-typedef struct _GdkGL_GL_SGIX_flush_raster GdkGL_GL_SGIX_flush_raster;
+/* glPixelTexGenParameteriSGIS */
+typedef void (APIENTRYP GdkGLProc_glPixelTexGenParameteriSGIS) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glPixelTexGenParameteriSGIS (void);
+#define      gdk_gl_glPixelTexGenParameteriSGIS(proc, pname, param) \
+  ( ((GdkGLProc_glPixelTexGenParameteriSGIS) (proc)) (pname, param) )
 
-struct _GdkGL_GL_SGIX_flush_raster
-{
-  GdkGLProc_glFlushRasterSGIX glFlushRasterSGIX;
-};
+/* glPixelTexGenParameterivSGIS */
+typedef void (APIENTRYP GdkGLProc_glPixelTexGenParameterivSGIS) (GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glPixelTexGenParameterivSGIS (void);
+#define      gdk_gl_glPixelTexGenParameterivSGIS(proc, pname, params) \
+  ( ((GdkGLProc_glPixelTexGenParameterivSGIS) (proc)) (pname, params) )
 
-GdkGL_GL_SGIX_flush_raster *gdk_gl_get_GL_SGIX_flush_raster (void);
+/* glPixelTexGenParameterfSGIS */
+typedef void (APIENTRYP GdkGLProc_glPixelTexGenParameterfSGIS) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glPixelTexGenParameterfSGIS (void);
+#define      gdk_gl_glPixelTexGenParameterfSGIS(proc, pname, param) \
+  ( ((GdkGLProc_glPixelTexGenParameterfSGIS) (proc)) (pname, param) )
+
+/* glPixelTexGenParameterfvSGIS */
+typedef void (APIENTRYP GdkGLProc_glPixelTexGenParameterfvSGIS) (GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glPixelTexGenParameterfvSGIS (void);
+#define      gdk_gl_glPixelTexGenParameterfvSGIS(proc, pname, params) \
+  ( ((GdkGLProc_glPixelTexGenParameterfvSGIS) (proc)) (pname, params) )
+
+/* glGetPixelTexGenParameterivSGIS */
+typedef void (APIENTRYP GdkGLProc_glGetPixelTexGenParameterivSGIS) (GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetPixelTexGenParameterivSGIS (void);
+#define      gdk_gl_glGetPixelTexGenParameterivSGIS(proc, pname, params) \
+  ( ((GdkGLProc_glGetPixelTexGenParameterivSGIS) (proc)) (pname, params) )
+
+/* glGetPixelTexGenParameterfvSGIS */
+typedef void (APIENTRYP GdkGLProc_glGetPixelTexGenParameterfvSGIS) (GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetPixelTexGenParameterfvSGIS (void);
+#define      gdk_gl_glGetPixelTexGenParameterfvSGIS(proc, pname, params) \
+  ( ((GdkGLProc_glGetPixelTexGenParameterfvSGIS) (proc)) (pname, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_SGIS_pixel_texture GdkGL_GL_SGIS_pixel_texture;
+
+struct _GdkGL_GL_SGIS_pixel_texture
+{
+  GdkGLProc_glPixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS;
+  GdkGLProc_glPixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS;
+  GdkGLProc_glPixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS;
+  GdkGLProc_glPixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS;
+  GdkGLProc_glGetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS;
+  GdkGLProc_glGetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS;
+};
+
+GdkGL_GL_SGIS_pixel_texture *gdk_gl_get_GL_SGIS_pixel_texture (void);
 
 /*
- * GL_SGIS_fog_function
+ * GL_SGIS_texture4D
  */
 
-/* glFogFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glFogFuncSGIS) (GLsizei n, const GLfloat *points);
-GdkGLProc    gdk_gl_get_glFogFuncSGIS (void);
-#define      gdk_gl_glFogFuncSGIS(proc, n, points) \
-  ( ((GdkGLProc_glFogFuncSGIS) (proc)) (n, points) )
+/* glTexImage4DSGIS */
+typedef void (APIENTRYP GdkGLProc_glTexImage4DSGIS) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexImage4DSGIS (void);
+#define      gdk_gl_glTexImage4DSGIS(proc, target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) \
+  ( ((GdkGLProc_glTexImage4DSGIS) (proc)) (target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) )
 
-/* glGetFogFuncSGIS */
-typedef void (APIENTRY * GdkGLProc_glGetFogFuncSGIS) (GLfloat *points);
-GdkGLProc    gdk_gl_get_glGetFogFuncSGIS (void);
-#define      gdk_gl_glGetFogFuncSGIS(proc, points) \
-  ( ((GdkGLProc_glGetFogFuncSGIS) (proc)) (points) )
+/* glTexSubImage4DSGIS */
+typedef void (APIENTRYP GdkGLProc_glTexSubImage4DSGIS) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTexSubImage4DSGIS (void);
+#define      gdk_gl_glTexSubImage4DSGIS(proc, target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) \
+  ( ((GdkGLProc_glTexSubImage4DSGIS) (proc)) (target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIS_fog_function GdkGL_GL_SGIS_fog_function;
+typedef struct _GdkGL_GL_SGIS_texture4D GdkGL_GL_SGIS_texture4D;
 
-struct _GdkGL_GL_SGIS_fog_function
+struct _GdkGL_GL_SGIS_texture4D
 {
-  GdkGLProc_glFogFuncSGIS glFogFuncSGIS;
-  GdkGLProc_glGetFogFuncSGIS glGetFogFuncSGIS;
+  GdkGLProc_glTexImage4DSGIS glTexImage4DSGIS;
+  GdkGLProc_glTexSubImage4DSGIS glTexSubImage4DSGIS;
 };
 
-GdkGL_GL_SGIS_fog_function *gdk_gl_get_GL_SGIS_fog_function (void);
+GdkGL_GL_SGIS_texture4D *gdk_gl_get_GL_SGIS_texture4D (void);
 
 /*
- * GL_HP_image_transform
+ * GL_EXT_texture_object
  */
 
-/* glImageTransformParameteriHP */
-typedef void (APIENTRY * GdkGLProc_glImageTransformParameteriHP) (GLenum target, GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glImageTransformParameteriHP (void);
-#define      gdk_gl_glImageTransformParameteriHP(proc, target, pname, param) \
-  ( ((GdkGLProc_glImageTransformParameteriHP) (proc)) (target, pname, param) )
+/* glAreTexturesResidentEXT */
+typedef GLboolean (APIENTRYP GdkGLProc_glAreTexturesResidentEXT) (GLsizei n, const GLuint *textures, GLboolean *residences);
+GdkGLProc    gdk_gl_get_glAreTexturesResidentEXT (void);
+#define      gdk_gl_glAreTexturesResidentEXT(proc, n, textures, residences) \
+  ( ((GdkGLProc_glAreTexturesResidentEXT) (proc)) (n, textures, residences) )
 
-/* glImageTransformParameterfHP */
-typedef void (APIENTRY * GdkGLProc_glImageTransformParameterfHP) (GLenum target, GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glImageTransformParameterfHP (void);
-#define      gdk_gl_glImageTransformParameterfHP(proc, target, pname, param) \
-  ( ((GdkGLProc_glImageTransformParameterfHP) (proc)) (target, pname, param) )
+/* glBindTextureEXT */
+typedef void (APIENTRYP GdkGLProc_glBindTextureEXT) (GLenum target, GLuint texture);
+GdkGLProc    gdk_gl_get_glBindTextureEXT (void);
+#define      gdk_gl_glBindTextureEXT(proc, target, texture) \
+  ( ((GdkGLProc_glBindTextureEXT) (proc)) (target, texture) )
 
-/* glImageTransformParameterivHP */
-typedef void (APIENTRY * GdkGLProc_glImageTransformParameterivHP) (GLenum target, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glImageTransformParameterivHP (void);
-#define      gdk_gl_glImageTransformParameterivHP(proc, target, pname, params) \
-  ( ((GdkGLProc_glImageTransformParameterivHP) (proc)) (target, pname, params) )
+/* glDeleteTexturesEXT */
+typedef void (APIENTRYP GdkGLProc_glDeleteTexturesEXT) (GLsizei n, const GLuint *textures);
+GdkGLProc    gdk_gl_get_glDeleteTexturesEXT (void);
+#define      gdk_gl_glDeleteTexturesEXT(proc, n, textures) \
+  ( ((GdkGLProc_glDeleteTexturesEXT) (proc)) (n, textures) )
 
-/* glImageTransformParameterfvHP */
-typedef void (APIENTRY * GdkGLProc_glImageTransformParameterfvHP) (GLenum target, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glImageTransformParameterfvHP (void);
-#define      gdk_gl_glImageTransformParameterfvHP(proc, target, pname, params) \
-  ( ((GdkGLProc_glImageTransformParameterfvHP) (proc)) (target, pname, params) )
+/* glGenTexturesEXT */
+typedef void (APIENTRYP GdkGLProc_glGenTexturesEXT) (GLsizei n, GLuint *textures);
+GdkGLProc    gdk_gl_get_glGenTexturesEXT (void);
+#define      gdk_gl_glGenTexturesEXT(proc, n, textures) \
+  ( ((GdkGLProc_glGenTexturesEXT) (proc)) (n, textures) )
 
-/* glGetImageTransformParameterivHP */
-typedef void (APIENTRY * GdkGLProc_glGetImageTransformParameterivHP) (GLenum target, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetImageTransformParameterivHP (void);
-#define      gdk_gl_glGetImageTransformParameterivHP(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetImageTransformParameterivHP) (proc)) (target, pname, params) )
+/* glIsTextureEXT */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsTextureEXT) (GLuint texture);
+GdkGLProc    gdk_gl_get_glIsTextureEXT (void);
+#define      gdk_gl_glIsTextureEXT(proc, texture) \
+  ( ((GdkGLProc_glIsTextureEXT) (proc)) (texture) )
 
-/* glGetImageTransformParameterfvHP */
-typedef void (APIENTRY * GdkGLProc_glGetImageTransformParameterfvHP) (GLenum target, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetImageTransformParameterfvHP (void);
-#define      gdk_gl_glGetImageTransformParameterfvHP(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetImageTransformParameterfvHP) (proc)) (target, pname, params) )
+/* glPrioritizeTexturesEXT */
+typedef void (APIENTRYP GdkGLProc_glPrioritizeTexturesEXT) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
+GdkGLProc    gdk_gl_get_glPrioritizeTexturesEXT (void);
+#define      gdk_gl_glPrioritizeTexturesEXT(proc, n, textures, priorities) \
+  ( ((GdkGLProc_glPrioritizeTexturesEXT) (proc)) (n, textures, priorities) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_HP_image_transform GdkGL_GL_HP_image_transform;
+typedef struct _GdkGL_GL_EXT_texture_object GdkGL_GL_EXT_texture_object;
 
-struct _GdkGL_GL_HP_image_transform
+struct _GdkGL_GL_EXT_texture_object
 {
-  GdkGLProc_glImageTransformParameteriHP glImageTransformParameteriHP;
-  GdkGLProc_glImageTransformParameterfHP glImageTransformParameterfHP;
-  GdkGLProc_glImageTransformParameterivHP glImageTransformParameterivHP;
-  GdkGLProc_glImageTransformParameterfvHP glImageTransformParameterfvHP;
-  GdkGLProc_glGetImageTransformParameterivHP glGetImageTransformParameterivHP;
-  GdkGLProc_glGetImageTransformParameterfvHP glGetImageTransformParameterfvHP;
+  GdkGLProc_glAreTexturesResidentEXT glAreTexturesResidentEXT;
+  GdkGLProc_glBindTextureEXT glBindTextureEXT;
+  GdkGLProc_glDeleteTexturesEXT glDeleteTexturesEXT;
+  GdkGLProc_glGenTexturesEXT glGenTexturesEXT;
+  GdkGLProc_glIsTextureEXT glIsTextureEXT;
+  GdkGLProc_glPrioritizeTexturesEXT glPrioritizeTexturesEXT;
 };
 
-GdkGL_GL_HP_image_transform *gdk_gl_get_GL_HP_image_transform (void);
+GdkGL_GL_EXT_texture_object *gdk_gl_get_GL_EXT_texture_object (void);
 
 /*
- * GL_EXT_color_subtable
+ * GL_SGIS_detail_texture
  */
 
-/* glColorSubTableEXT */
-typedef void (APIENTRY * GdkGLProc_glColorSubTableEXT) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
-GdkGLProc    gdk_gl_get_glColorSubTableEXT (void);
-#define      gdk_gl_glColorSubTableEXT(proc, target, start, count, format, type, data) \
-  ( ((GdkGLProc_glColorSubTableEXT) (proc)) (target, start, count, format, type, data) )
+/* glDetailTexFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glDetailTexFuncSGIS) (GLenum target, GLsizei n, const GLfloat *points);
+GdkGLProc    gdk_gl_get_glDetailTexFuncSGIS (void);
+#define      gdk_gl_glDetailTexFuncSGIS(proc, target, n, points) \
+  ( ((GdkGLProc_glDetailTexFuncSGIS) (proc)) (target, n, points) )
 
-/* glCopyColorSubTableEXT */
-typedef void (APIENTRY * GdkGLProc_glCopyColorSubTableEXT) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
-GdkGLProc    gdk_gl_get_glCopyColorSubTableEXT (void);
-#define      gdk_gl_glCopyColorSubTableEXT(proc, target, start, x, y, width) \
-  ( ((GdkGLProc_glCopyColorSubTableEXT) (proc)) (target, start, x, y, width) )
+/* glGetDetailTexFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glGetDetailTexFuncSGIS) (GLenum target, GLfloat *points);
+GdkGLProc    gdk_gl_get_glGetDetailTexFuncSGIS (void);
+#define      gdk_gl_glGetDetailTexFuncSGIS(proc, target, points) \
+  ( ((GdkGLProc_glGetDetailTexFuncSGIS) (proc)) (target, points) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_color_subtable GdkGL_GL_EXT_color_subtable;
+typedef struct _GdkGL_GL_SGIS_detail_texture GdkGL_GL_SGIS_detail_texture;
 
-struct _GdkGL_GL_EXT_color_subtable
+struct _GdkGL_GL_SGIS_detail_texture
 {
-  GdkGLProc_glColorSubTableEXT glColorSubTableEXT;
-  GdkGLProc_glCopyColorSubTableEXT glCopyColorSubTableEXT;
+  GdkGLProc_glDetailTexFuncSGIS glDetailTexFuncSGIS;
+  GdkGLProc_glGetDetailTexFuncSGIS glGetDetailTexFuncSGIS;
 };
 
-GdkGL_GL_EXT_color_subtable *gdk_gl_get_GL_EXT_color_subtable (void);
+GdkGL_GL_SGIS_detail_texture *gdk_gl_get_GL_SGIS_detail_texture (void);
 
 /*
- * GL_PGI_misc_hints
+ * GL_SGIS_sharpen_texture
  */
 
-/* glHintPGI */
-typedef void (APIENTRY * GdkGLProc_glHintPGI) (GLenum target, GLint mode);
-GdkGLProc    gdk_gl_get_glHintPGI (void);
-#define      gdk_gl_glHintPGI(proc, target, mode) \
-  ( ((GdkGLProc_glHintPGI) (proc)) (target, mode) )
+/* glSharpenTexFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glSharpenTexFuncSGIS) (GLenum target, GLsizei n, const GLfloat *points);
+GdkGLProc    gdk_gl_get_glSharpenTexFuncSGIS (void);
+#define      gdk_gl_glSharpenTexFuncSGIS(proc, target, n, points) \
+  ( ((GdkGLProc_glSharpenTexFuncSGIS) (proc)) (target, n, points) )
+
+/* glGetSharpenTexFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glGetSharpenTexFuncSGIS) (GLenum target, GLfloat *points);
+GdkGLProc    gdk_gl_get_glGetSharpenTexFuncSGIS (void);
+#define      gdk_gl_glGetSharpenTexFuncSGIS(proc, target, points) \
+  ( ((GdkGLProc_glGetSharpenTexFuncSGIS) (proc)) (target, points) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_PGI_misc_hints GdkGL_GL_PGI_misc_hints;
+typedef struct _GdkGL_GL_SGIS_sharpen_texture GdkGL_GL_SGIS_sharpen_texture;
 
-struct _GdkGL_GL_PGI_misc_hints
+struct _GdkGL_GL_SGIS_sharpen_texture
 {
-  GdkGLProc_glHintPGI glHintPGI;
+  GdkGLProc_glSharpenTexFuncSGIS glSharpenTexFuncSGIS;
+  GdkGLProc_glGetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS;
 };
 
-GdkGL_GL_PGI_misc_hints *gdk_gl_get_GL_PGI_misc_hints (void);
+GdkGL_GL_SGIS_sharpen_texture *gdk_gl_get_GL_SGIS_sharpen_texture (void);
 
 /*
- * GL_EXT_paletted_texture
+ * GL_SGIS_multisample
  */
 
-/* glColorTableEXT */
-typedef void (APIENTRY * GdkGLProc_glColorTableEXT) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
-GdkGLProc    gdk_gl_get_glColorTableEXT (void);
-#define      gdk_gl_glColorTableEXT(proc, target, internalFormat, width, format, type, table) \
-  ( ((GdkGLProc_glColorTableEXT) (proc)) (target, internalFormat, width, format, type, table) )
-
-/* glGetColorTableEXT */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableEXT) (GLenum target, GLenum format, GLenum type, GLvoid *data);
-GdkGLProc    gdk_gl_get_glGetColorTableEXT (void);
-#define      gdk_gl_glGetColorTableEXT(proc, target, format, type, data) \
-  ( ((GdkGLProc_glGetColorTableEXT) (proc)) (target, format, type, data) )
-
-/* glGetColorTableParameterivEXT */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableParameterivEXT) (GLenum target, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetColorTableParameterivEXT (void);
-#define      gdk_gl_glGetColorTableParameterivEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetColorTableParameterivEXT) (proc)) (target, pname, params) )
+/* glSampleMaskSGIS */
+typedef void (APIENTRYP GdkGLProc_glSampleMaskSGIS) (GLclampf value, GLboolean invert);
+GdkGLProc    gdk_gl_get_glSampleMaskSGIS (void);
+#define      gdk_gl_glSampleMaskSGIS(proc, value, invert) \
+  ( ((GdkGLProc_glSampleMaskSGIS) (proc)) (value, invert) )
 
-/* glGetColorTableParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetColorTableParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetColorTableParameterfvEXT (void);
-#define      gdk_gl_glGetColorTableParameterfvEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetColorTableParameterfvEXT) (proc)) (target, pname, params) )
+/* glSamplePatternSGIS */
+typedef void (APIENTRYP GdkGLProc_glSamplePatternSGIS) (GLenum pattern);
+GdkGLProc    gdk_gl_get_glSamplePatternSGIS (void);
+#define      gdk_gl_glSamplePatternSGIS(proc, pattern) \
+  ( ((GdkGLProc_glSamplePatternSGIS) (proc)) (pattern) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_paletted_texture GdkGL_GL_EXT_paletted_texture;
+typedef struct _GdkGL_GL_SGIS_multisample GdkGL_GL_SGIS_multisample;
 
-struct _GdkGL_GL_EXT_paletted_texture
+struct _GdkGL_GL_SGIS_multisample
 {
-  GdkGLProc_glColorTableEXT glColorTableEXT;
-  GdkGLProc_glGetColorTableEXT glGetColorTableEXT;
-  GdkGLProc_glGetColorTableParameterivEXT glGetColorTableParameterivEXT;
-  GdkGLProc_glGetColorTableParameterfvEXT glGetColorTableParameterfvEXT;
+  GdkGLProc_glSampleMaskSGIS glSampleMaskSGIS;
+  GdkGLProc_glSamplePatternSGIS glSamplePatternSGIS;
 };
 
-GdkGL_GL_EXT_paletted_texture *gdk_gl_get_GL_EXT_paletted_texture (void);
+GdkGL_GL_SGIS_multisample *gdk_gl_get_GL_SGIS_multisample (void);
 
 /*
- * GL_SGIX_list_priority
+ * GL_EXT_vertex_array
  */
 
-/* glGetListParameterfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glGetListParameterfvSGIX) (GLuint list, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetListParameterfvSGIX (void);
-#define      gdk_gl_glGetListParameterfvSGIX(proc, list, pname, params) \
-  ( ((GdkGLProc_glGetListParameterfvSGIX) (proc)) (list, pname, params) )
+/* glArrayElementEXT */
+typedef void (APIENTRYP GdkGLProc_glArrayElementEXT) (GLint i);
+GdkGLProc    gdk_gl_get_glArrayElementEXT (void);
+#define      gdk_gl_glArrayElementEXT(proc, i) \
+  ( ((GdkGLProc_glArrayElementEXT) (proc)) (i) )
 
-/* glGetListParameterivSGIX */
-typedef void (APIENTRY * GdkGLProc_glGetListParameterivSGIX) (GLuint list, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetListParameterivSGIX (void);
-#define      gdk_gl_glGetListParameterivSGIX(proc, list, pname, params) \
-  ( ((GdkGLProc_glGetListParameterivSGIX) (proc)) (list, pname, params) )
+/* glColorPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glColorPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glColorPointerEXT (void);
+#define      gdk_gl_glColorPointerEXT(proc, size, type, stride, count, pointer) \
+  ( ((GdkGLProc_glColorPointerEXT) (proc)) (size, type, stride, count, pointer) )
 
-/* glListParameterfSGIX */
-typedef void (APIENTRY * GdkGLProc_glListParameterfSGIX) (GLuint list, GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glListParameterfSGIX (void);
-#define      gdk_gl_glListParameterfSGIX(proc, list, pname, param) \
-  ( ((GdkGLProc_glListParameterfSGIX) (proc)) (list, pname, param) )
+/* glDrawArraysEXT */
+typedef void (APIENTRYP GdkGLProc_glDrawArraysEXT) (GLenum mode, GLint first, GLsizei count);
+GdkGLProc    gdk_gl_get_glDrawArraysEXT (void);
+#define      gdk_gl_glDrawArraysEXT(proc, mode, first, count) \
+  ( ((GdkGLProc_glDrawArraysEXT) (proc)) (mode, first, count) )
 
-/* glListParameterfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glListParameterfvSGIX) (GLuint list, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glListParameterfvSGIX (void);
-#define      gdk_gl_glListParameterfvSGIX(proc, list, pname, params) \
-  ( ((GdkGLProc_glListParameterfvSGIX) (proc)) (list, pname, params) )
+/* glEdgeFlagPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glEdgeFlagPointerEXT) (GLsizei stride, GLsizei count, const GLboolean *pointer);
+GdkGLProc    gdk_gl_get_glEdgeFlagPointerEXT (void);
+#define      gdk_gl_glEdgeFlagPointerEXT(proc, stride, count, pointer) \
+  ( ((GdkGLProc_glEdgeFlagPointerEXT) (proc)) (stride, count, pointer) )
 
-/* glListParameteriSGIX */
-typedef void (APIENTRY * GdkGLProc_glListParameteriSGIX) (GLuint list, GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glListParameteriSGIX (void);
-#define      gdk_gl_glListParameteriSGIX(proc, list, pname, param) \
-  ( ((GdkGLProc_glListParameteriSGIX) (proc)) (list, pname, param) )
+/* glGetPointervEXT */
+typedef void (APIENTRYP GdkGLProc_glGetPointervEXT) (GLenum pname, GLvoid* *params);
+GdkGLProc    gdk_gl_get_glGetPointervEXT (void);
+#define      gdk_gl_glGetPointervEXT(proc, pname, params) \
+  ( ((GdkGLProc_glGetPointervEXT) (proc)) (pname, params) )
 
-/* glListParameterivSGIX */
-typedef void (APIENTRY * GdkGLProc_glListParameterivSGIX) (GLuint list, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glListParameterivSGIX (void);
-#define      gdk_gl_glListParameterivSGIX(proc, list, pname, params) \
-  ( ((GdkGLProc_glListParameterivSGIX) (proc)) (list, pname, params) )
+/* glIndexPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glIndexPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glIndexPointerEXT (void);
+#define      gdk_gl_glIndexPointerEXT(proc, type, stride, count, pointer) \
+  ( ((GdkGLProc_glIndexPointerEXT) (proc)) (type, stride, count, pointer) )
+
+/* glNormalPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glNormalPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glNormalPointerEXT (void);
+#define      gdk_gl_glNormalPointerEXT(proc, type, stride, count, pointer) \
+  ( ((GdkGLProc_glNormalPointerEXT) (proc)) (type, stride, count, pointer) )
+
+/* glTexCoordPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glTexCoordPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glTexCoordPointerEXT (void);
+#define      gdk_gl_glTexCoordPointerEXT(proc, size, type, stride, count, pointer) \
+  ( ((GdkGLProc_glTexCoordPointerEXT) (proc)) (size, type, stride, count, pointer) )
+
+/* glVertexPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexPointerEXT (void);
+#define      gdk_gl_glVertexPointerEXT(proc, size, type, stride, count, pointer) \
+  ( ((GdkGLProc_glVertexPointerEXT) (proc)) (size, type, stride, count, pointer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_list_priority GdkGL_GL_SGIX_list_priority;
+typedef struct _GdkGL_GL_EXT_vertex_array GdkGL_GL_EXT_vertex_array;
 
-struct _GdkGL_GL_SGIX_list_priority
+struct _GdkGL_GL_EXT_vertex_array
 {
-  GdkGLProc_glGetListParameterfvSGIX glGetListParameterfvSGIX;
-  GdkGLProc_glGetListParameterivSGIX glGetListParameterivSGIX;
-  GdkGLProc_glListParameterfSGIX glListParameterfSGIX;
-  GdkGLProc_glListParameterfvSGIX glListParameterfvSGIX;
-  GdkGLProc_glListParameteriSGIX glListParameteriSGIX;
-  GdkGLProc_glListParameterivSGIX glListParameterivSGIX;
+  GdkGLProc_glArrayElementEXT glArrayElementEXT;
+  GdkGLProc_glColorPointerEXT glColorPointerEXT;
+  GdkGLProc_glDrawArraysEXT glDrawArraysEXT;
+  GdkGLProc_glEdgeFlagPointerEXT glEdgeFlagPointerEXT;
+  GdkGLProc_glGetPointervEXT glGetPointervEXT;
+  GdkGLProc_glIndexPointerEXT glIndexPointerEXT;
+  GdkGLProc_glNormalPointerEXT glNormalPointerEXT;
+  GdkGLProc_glTexCoordPointerEXT glTexCoordPointerEXT;
+  GdkGLProc_glVertexPointerEXT glVertexPointerEXT;
 };
 
-GdkGL_GL_SGIX_list_priority *gdk_gl_get_GL_SGIX_list_priority (void);
+GdkGL_GL_EXT_vertex_array *gdk_gl_get_GL_EXT_vertex_array (void);
 
 /*
- * GL_EXT_index_material
+ * GL_EXT_blend_minmax
  */
 
-/* glIndexMaterialEXT */
-typedef void (APIENTRY * GdkGLProc_glIndexMaterialEXT) (GLenum face, GLenum mode);
-GdkGLProc    gdk_gl_get_glIndexMaterialEXT (void);
-#define      gdk_gl_glIndexMaterialEXT(proc, face, mode) \
-  ( ((GdkGLProc_glIndexMaterialEXT) (proc)) (face, mode) )
+/* glBlendEquationEXT */
+typedef void (APIENTRYP GdkGLProc_glBlendEquationEXT) (GLenum mode);
+GdkGLProc    gdk_gl_get_glBlendEquationEXT (void);
+#define      gdk_gl_glBlendEquationEXT(proc, mode) \
+  ( ((GdkGLProc_glBlendEquationEXT) (proc)) (mode) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_index_material GdkGL_GL_EXT_index_material;
+typedef struct _GdkGL_GL_EXT_blend_minmax GdkGL_GL_EXT_blend_minmax;
 
-struct _GdkGL_GL_EXT_index_material
+struct _GdkGL_GL_EXT_blend_minmax
 {
-  GdkGLProc_glIndexMaterialEXT glIndexMaterialEXT;
+  GdkGLProc_glBlendEquationEXT glBlendEquationEXT;
 };
 
-GdkGL_GL_EXT_index_material *gdk_gl_get_GL_EXT_index_material (void);
+GdkGL_GL_EXT_blend_minmax *gdk_gl_get_GL_EXT_blend_minmax (void);
 
 /*
- * GL_EXT_index_func
+ * GL_SGIX_sprite
  */
 
-/* glIndexFuncEXT */
-typedef void (APIENTRY * GdkGLProc_glIndexFuncEXT) (GLenum func, GLclampf ref);
-GdkGLProc    gdk_gl_get_glIndexFuncEXT (void);
-#define      gdk_gl_glIndexFuncEXT(proc, func, ref) \
-  ( ((GdkGLProc_glIndexFuncEXT) (proc)) (func, ref) )
+/* glSpriteParameterfSGIX */
+typedef void (APIENTRYP GdkGLProc_glSpriteParameterfSGIX) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glSpriteParameterfSGIX (void);
+#define      gdk_gl_glSpriteParameterfSGIX(proc, pname, param) \
+  ( ((GdkGLProc_glSpriteParameterfSGIX) (proc)) (pname, param) )
+
+/* glSpriteParameterfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glSpriteParameterfvSGIX) (GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glSpriteParameterfvSGIX (void);
+#define      gdk_gl_glSpriteParameterfvSGIX(proc, pname, params) \
+  ( ((GdkGLProc_glSpriteParameterfvSGIX) (proc)) (pname, params) )
+
+/* glSpriteParameteriSGIX */
+typedef void (APIENTRYP GdkGLProc_glSpriteParameteriSGIX) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glSpriteParameteriSGIX (void);
+#define      gdk_gl_glSpriteParameteriSGIX(proc, pname, param) \
+  ( ((GdkGLProc_glSpriteParameteriSGIX) (proc)) (pname, param) )
+
+/* glSpriteParameterivSGIX */
+typedef void (APIENTRYP GdkGLProc_glSpriteParameterivSGIX) (GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glSpriteParameterivSGIX (void);
+#define      gdk_gl_glSpriteParameterivSGIX(proc, pname, params) \
+  ( ((GdkGLProc_glSpriteParameterivSGIX) (proc)) (pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_index_func GdkGL_GL_EXT_index_func;
+typedef struct _GdkGL_GL_SGIX_sprite GdkGL_GL_SGIX_sprite;
 
-struct _GdkGL_GL_EXT_index_func
+struct _GdkGL_GL_SGIX_sprite
 {
-  GdkGLProc_glIndexFuncEXT glIndexFuncEXT;
+  GdkGLProc_glSpriteParameterfSGIX glSpriteParameterfSGIX;
+  GdkGLProc_glSpriteParameterfvSGIX glSpriteParameterfvSGIX;
+  GdkGLProc_glSpriteParameteriSGIX glSpriteParameteriSGIX;
+  GdkGLProc_glSpriteParameterivSGIX glSpriteParameterivSGIX;
 };
 
-GdkGL_GL_EXT_index_func *gdk_gl_get_GL_EXT_index_func (void);
+GdkGL_GL_SGIX_sprite *gdk_gl_get_GL_SGIX_sprite (void);
 
 /*
- * GL_EXT_compiled_vertex_array
+ * GL_EXT_point_parameters
  */
 
-/* glLockArraysEXT */
-typedef void (APIENTRY * GdkGLProc_glLockArraysEXT) (GLint first, GLsizei count);
-GdkGLProc    gdk_gl_get_glLockArraysEXT (void);
-#define      gdk_gl_glLockArraysEXT(proc, first, count) \
-  ( ((GdkGLProc_glLockArraysEXT) (proc)) (first, count) )
+/* glPointParameterfEXT */
+typedef void (APIENTRYP GdkGLProc_glPointParameterfEXT) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glPointParameterfEXT (void);
+#define      gdk_gl_glPointParameterfEXT(proc, pname, param) \
+  ( ((GdkGLProc_glPointParameterfEXT) (proc)) (pname, param) )
 
-/* glUnlockArraysEXT */
-typedef void (APIENTRY * GdkGLProc_glUnlockArraysEXT) (void);
-GdkGLProc    gdk_gl_get_glUnlockArraysEXT (void);
-#define      gdk_gl_glUnlockArraysEXT(proc) \
-  ( ((GdkGLProc_glUnlockArraysEXT) (proc)) () )
+/* glPointParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glPointParameterfvEXT) (GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glPointParameterfvEXT (void);
+#define      gdk_gl_glPointParameterfvEXT(proc, pname, params) \
+  ( ((GdkGLProc_glPointParameterfvEXT) (proc)) (pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_compiled_vertex_array GdkGL_GL_EXT_compiled_vertex_array;
+typedef struct _GdkGL_GL_EXT_point_parameters GdkGL_GL_EXT_point_parameters;
 
-struct _GdkGL_GL_EXT_compiled_vertex_array
+struct _GdkGL_GL_EXT_point_parameters
 {
-  GdkGLProc_glLockArraysEXT glLockArraysEXT;
-  GdkGLProc_glUnlockArraysEXT glUnlockArraysEXT;
+  GdkGLProc_glPointParameterfEXT glPointParameterfEXT;
+  GdkGLProc_glPointParameterfvEXT glPointParameterfvEXT;
 };
 
-GdkGL_GL_EXT_compiled_vertex_array *gdk_gl_get_GL_EXT_compiled_vertex_array (void);
+GdkGL_GL_EXT_point_parameters *gdk_gl_get_GL_EXT_point_parameters (void);
 
 /*
- * GL_EXT_cull_vertex
+ * GL_SGIS_point_parameters
  */
 
-/* glCullParameterdvEXT */
-typedef void (APIENTRY * GdkGLProc_glCullParameterdvEXT) (GLenum pname, GLdouble *params);
-GdkGLProc    gdk_gl_get_glCullParameterdvEXT (void);
-#define      gdk_gl_glCullParameterdvEXT(proc, pname, params) \
-  ( ((GdkGLProc_glCullParameterdvEXT) (proc)) (pname, params) )
+/* glPointParameterfSGIS */
+typedef void (APIENTRYP GdkGLProc_glPointParameterfSGIS) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glPointParameterfSGIS (void);
+#define      gdk_gl_glPointParameterfSGIS(proc, pname, param) \
+  ( ((GdkGLProc_glPointParameterfSGIS) (proc)) (pname, param) )
 
-/* glCullParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glCullParameterfvEXT) (GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glCullParameterfvEXT (void);
-#define      gdk_gl_glCullParameterfvEXT(proc, pname, params) \
-  ( ((GdkGLProc_glCullParameterfvEXT) (proc)) (pname, params) )
+/* glPointParameterfvSGIS */
+typedef void (APIENTRYP GdkGLProc_glPointParameterfvSGIS) (GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glPointParameterfvSGIS (void);
+#define      gdk_gl_glPointParameterfvSGIS(proc, pname, params) \
+  ( ((GdkGLProc_glPointParameterfvSGIS) (proc)) (pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_cull_vertex GdkGL_GL_EXT_cull_vertex;
+typedef struct _GdkGL_GL_SGIS_point_parameters GdkGL_GL_SGIS_point_parameters;
 
-struct _GdkGL_GL_EXT_cull_vertex
+struct _GdkGL_GL_SGIS_point_parameters
 {
-  GdkGLProc_glCullParameterdvEXT glCullParameterdvEXT;
-  GdkGLProc_glCullParameterfvEXT glCullParameterfvEXT;
+  GdkGLProc_glPointParameterfSGIS glPointParameterfSGIS;
+  GdkGLProc_glPointParameterfvSGIS glPointParameterfvSGIS;
 };
 
-GdkGL_GL_EXT_cull_vertex *gdk_gl_get_GL_EXT_cull_vertex (void);
+GdkGL_GL_SGIS_point_parameters *gdk_gl_get_GL_SGIS_point_parameters (void);
 
 /*
- * GL_SGIX_fragment_lighting
+ * GL_SGIX_instruments
  */
 
-/* glFragmentColorMaterialSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentColorMaterialSGIX) (GLenum face, GLenum mode);
-GdkGLProc    gdk_gl_get_glFragmentColorMaterialSGIX (void);
-#define      gdk_gl_glFragmentColorMaterialSGIX(proc, face, mode) \
-  ( ((GdkGLProc_glFragmentColorMaterialSGIX) (proc)) (face, mode) )
+/* glGetInstrumentsSGIX */
+typedef GLint (APIENTRYP GdkGLProc_glGetInstrumentsSGIX) (void);
+GdkGLProc    gdk_gl_get_glGetInstrumentsSGIX (void);
+#define      gdk_gl_glGetInstrumentsSGIX(proc) \
+  ( ((GdkGLProc_glGetInstrumentsSGIX) (proc)) () )
 
-/* glFragmentLightfSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightfSGIX) (GLenum light, GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glFragmentLightfSGIX (void);
-#define      gdk_gl_glFragmentLightfSGIX(proc, light, pname, param) \
-  ( ((GdkGLProc_glFragmentLightfSGIX) (proc)) (light, pname, param) )
+/* glInstrumentsBufferSGIX */
+typedef void (APIENTRYP GdkGLProc_glInstrumentsBufferSGIX) (GLsizei size, GLint *buffer);
+GdkGLProc    gdk_gl_get_glInstrumentsBufferSGIX (void);
+#define      gdk_gl_glInstrumentsBufferSGIX(proc, size, buffer) \
+  ( ((GdkGLProc_glInstrumentsBufferSGIX) (proc)) (size, buffer) )
 
-/* glFragmentLightfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightfvSGIX) (GLenum light, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glFragmentLightfvSGIX (void);
-#define      gdk_gl_glFragmentLightfvSGIX(proc, light, pname, params) \
-  ( ((GdkGLProc_glFragmentLightfvSGIX) (proc)) (light, pname, params) )
+/* glPollInstrumentsSGIX */
+typedef GLint (APIENTRYP GdkGLProc_glPollInstrumentsSGIX) (GLint *marker_p);
+GdkGLProc    gdk_gl_get_glPollInstrumentsSGIX (void);
+#define      gdk_gl_glPollInstrumentsSGIX(proc, marker_p) \
+  ( ((GdkGLProc_glPollInstrumentsSGIX) (proc)) (marker_p) )
 
-/* glFragmentLightiSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightiSGIX) (GLenum light, GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glFragmentLightiSGIX (void);
-#define      gdk_gl_glFragmentLightiSGIX(proc, light, pname, param) \
-  ( ((GdkGLProc_glFragmentLightiSGIX) (proc)) (light, pname, param) )
+/* glReadInstrumentsSGIX */
+typedef void (APIENTRYP GdkGLProc_glReadInstrumentsSGIX) (GLint marker);
+GdkGLProc    gdk_gl_get_glReadInstrumentsSGIX (void);
+#define      gdk_gl_glReadInstrumentsSGIX(proc, marker) \
+  ( ((GdkGLProc_glReadInstrumentsSGIX) (proc)) (marker) )
 
-/* glFragmentLightivSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightivSGIX) (GLenum light, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glFragmentLightivSGIX (void);
-#define      gdk_gl_glFragmentLightivSGIX(proc, light, pname, params) \
-  ( ((GdkGLProc_glFragmentLightivSGIX) (proc)) (light, pname, params) )
+/* glStartInstrumentsSGIX */
+typedef void (APIENTRYP GdkGLProc_glStartInstrumentsSGIX) (void);
+GdkGLProc    gdk_gl_get_glStartInstrumentsSGIX (void);
+#define      gdk_gl_glStartInstrumentsSGIX(proc) \
+  ( ((GdkGLProc_glStartInstrumentsSGIX) (proc)) () )
 
-/* glFragmentLightModelfSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightModelfSGIX) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glFragmentLightModelfSGIX (void);
-#define      gdk_gl_glFragmentLightModelfSGIX(proc, pname, param) \
-  ( ((GdkGLProc_glFragmentLightModelfSGIX) (proc)) (pname, param) )
+/* glStopInstrumentsSGIX */
+typedef void (APIENTRYP GdkGLProc_glStopInstrumentsSGIX) (GLint marker);
+GdkGLProc    gdk_gl_get_glStopInstrumentsSGIX (void);
+#define      gdk_gl_glStopInstrumentsSGIX(proc, marker) \
+  ( ((GdkGLProc_glStopInstrumentsSGIX) (proc)) (marker) )
 
-/* glFragmentLightModelfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightModelfvSGIX) (GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glFragmentLightModelfvSGIX (void);
-#define      gdk_gl_glFragmentLightModelfvSGIX(proc, pname, params) \
-  ( ((GdkGLProc_glFragmentLightModelfvSGIX) (proc)) (pname, params) )
+/* proc struct */
 
-/* glFragmentLightModeliSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightModeliSGIX) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glFragmentLightModeliSGIX (void);
-#define      gdk_gl_glFragmentLightModeliSGIX(proc, pname, param) \
-  ( ((GdkGLProc_glFragmentLightModeliSGIX) (proc)) (pname, param) )
+typedef struct _GdkGL_GL_SGIX_instruments GdkGL_GL_SGIX_instruments;
 
-/* glFragmentLightModelivSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentLightModelivSGIX) (GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glFragmentLightModelivSGIX (void);
-#define      gdk_gl_glFragmentLightModelivSGIX(proc, pname, params) \
-  ( ((GdkGLProc_glFragmentLightModelivSGIX) (proc)) (pname, params) )
+struct _GdkGL_GL_SGIX_instruments
+{
+  GdkGLProc_glGetInstrumentsSGIX glGetInstrumentsSGIX;
+  GdkGLProc_glInstrumentsBufferSGIX glInstrumentsBufferSGIX;
+  GdkGLProc_glPollInstrumentsSGIX glPollInstrumentsSGIX;
+  GdkGLProc_glReadInstrumentsSGIX glReadInstrumentsSGIX;
+  GdkGLProc_glStartInstrumentsSGIX glStartInstrumentsSGIX;
+  GdkGLProc_glStopInstrumentsSGIX glStopInstrumentsSGIX;
+};
 
-/* glFragmentMaterialfSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentMaterialfSGIX) (GLenum face, GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glFragmentMaterialfSGIX (void);
-#define      gdk_gl_glFragmentMaterialfSGIX(proc, face, pname, param) \
-  ( ((GdkGLProc_glFragmentMaterialfSGIX) (proc)) (face, pname, param) )
+GdkGL_GL_SGIX_instruments *gdk_gl_get_GL_SGIX_instruments (void);
 
-/* glFragmentMaterialfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentMaterialfvSGIX) (GLenum face, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glFragmentMaterialfvSGIX (void);
-#define      gdk_gl_glFragmentMaterialfvSGIX(proc, face, pname, params) \
-  ( ((GdkGLProc_glFragmentMaterialfvSGIX) (proc)) (face, pname, params) )
+/*
+ * GL_SGIX_framezoom
+ */
 
-/* glFragmentMaterialiSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentMaterialiSGIX) (GLenum face, GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glFragmentMaterialiSGIX (void);
-#define      gdk_gl_glFragmentMaterialiSGIX(proc, face, pname, param) \
-  ( ((GdkGLProc_glFragmentMaterialiSGIX) (proc)) (face, pname, param) )
-
-/* glFragmentMaterialivSGIX */
-typedef void (APIENTRY * GdkGLProc_glFragmentMaterialivSGIX) (GLenum face, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glFragmentMaterialivSGIX (void);
-#define      gdk_gl_glFragmentMaterialivSGIX(proc, face, pname, params) \
-  ( ((GdkGLProc_glFragmentMaterialivSGIX) (proc)) (face, pname, params) )
-
-/* glGetFragmentLightfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glGetFragmentLightfvSGIX) (GLenum light, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetFragmentLightfvSGIX (void);
-#define      gdk_gl_glGetFragmentLightfvSGIX(proc, light, pname, params) \
-  ( ((GdkGLProc_glGetFragmentLightfvSGIX) (proc)) (light, pname, params) )
-
-/* glGetFragmentLightivSGIX */
-typedef void (APIENTRY * GdkGLProc_glGetFragmentLightivSGIX) (GLenum light, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetFragmentLightivSGIX (void);
-#define      gdk_gl_glGetFragmentLightivSGIX(proc, light, pname, params) \
-  ( ((GdkGLProc_glGetFragmentLightivSGIX) (proc)) (light, pname, params) )
-
-/* glGetFragmentMaterialfvSGIX */
-typedef void (APIENTRY * GdkGLProc_glGetFragmentMaterialfvSGIX) (GLenum face, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetFragmentMaterialfvSGIX (void);
-#define      gdk_gl_glGetFragmentMaterialfvSGIX(proc, face, pname, params) \
-  ( ((GdkGLProc_glGetFragmentMaterialfvSGIX) (proc)) (face, pname, params) )
-
-/* glGetFragmentMaterialivSGIX */
-typedef void (APIENTRY * GdkGLProc_glGetFragmentMaterialivSGIX) (GLenum face, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetFragmentMaterialivSGIX (void);
-#define      gdk_gl_glGetFragmentMaterialivSGIX(proc, face, pname, params) \
-  ( ((GdkGLProc_glGetFragmentMaterialivSGIX) (proc)) (face, pname, params) )
-
-/* glLightEnviSGIX */
-typedef void (APIENTRY * GdkGLProc_glLightEnviSGIX) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glLightEnviSGIX (void);
-#define      gdk_gl_glLightEnviSGIX(proc, pname, param) \
-  ( ((GdkGLProc_glLightEnviSGIX) (proc)) (pname, param) )
+/* glFrameZoomSGIX */
+typedef void (APIENTRYP GdkGLProc_glFrameZoomSGIX) (GLint factor);
+GdkGLProc    gdk_gl_get_glFrameZoomSGIX (void);
+#define      gdk_gl_glFrameZoomSGIX(proc, factor) \
+  ( ((GdkGLProc_glFrameZoomSGIX) (proc)) (factor) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_fragment_lighting GdkGL_GL_SGIX_fragment_lighting;
+typedef struct _GdkGL_GL_SGIX_framezoom GdkGL_GL_SGIX_framezoom;
 
-struct _GdkGL_GL_SGIX_fragment_lighting
+struct _GdkGL_GL_SGIX_framezoom
 {
-  GdkGLProc_glFragmentColorMaterialSGIX glFragmentColorMaterialSGIX;
-  GdkGLProc_glFragmentLightfSGIX glFragmentLightfSGIX;
-  GdkGLProc_glFragmentLightfvSGIX glFragmentLightfvSGIX;
-  GdkGLProc_glFragmentLightiSGIX glFragmentLightiSGIX;
-  GdkGLProc_glFragmentLightivSGIX glFragmentLightivSGIX;
-  GdkGLProc_glFragmentLightModelfSGIX glFragmentLightModelfSGIX;
-  GdkGLProc_glFragmentLightModelfvSGIX glFragmentLightModelfvSGIX;
-  GdkGLProc_glFragmentLightModeliSGIX glFragmentLightModeliSGIX;
-  GdkGLProc_glFragmentLightModelivSGIX glFragmentLightModelivSGIX;
-  GdkGLProc_glFragmentMaterialfSGIX glFragmentMaterialfSGIX;
-  GdkGLProc_glFragmentMaterialfvSGIX glFragmentMaterialfvSGIX;
-  GdkGLProc_glFragmentMaterialiSGIX glFragmentMaterialiSGIX;
-  GdkGLProc_glFragmentMaterialivSGIX glFragmentMaterialivSGIX;
-  GdkGLProc_glGetFragmentLightfvSGIX glGetFragmentLightfvSGIX;
-  GdkGLProc_glGetFragmentLightivSGIX glGetFragmentLightivSGIX;
-  GdkGLProc_glGetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX;
-  GdkGLProc_glGetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX;
-  GdkGLProc_glLightEnviSGIX glLightEnviSGIX;
+  GdkGLProc_glFrameZoomSGIX glFrameZoomSGIX;
 };
 
-GdkGL_GL_SGIX_fragment_lighting *gdk_gl_get_GL_SGIX_fragment_lighting (void);
+GdkGL_GL_SGIX_framezoom *gdk_gl_get_GL_SGIX_framezoom (void);
 
 /*
- * GL_EXT_draw_range_elements
+ * GL_SGIX_tag_sample_buffer
  */
 
-/* glDrawRangeElementsEXT */
-typedef void (APIENTRY * GdkGLProc_glDrawRangeElementsEXT) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
-GdkGLProc    gdk_gl_get_glDrawRangeElementsEXT (void);
-#define      gdk_gl_glDrawRangeElementsEXT(proc, mode, start, end, count, type, indices) \
-  ( ((GdkGLProc_glDrawRangeElementsEXT) (proc)) (mode, start, end, count, type, indices) )
+/* glTagSampleBufferSGIX */
+typedef void (APIENTRYP GdkGLProc_glTagSampleBufferSGIX) (void);
+GdkGLProc    gdk_gl_get_glTagSampleBufferSGIX (void);
+#define      gdk_gl_glTagSampleBufferSGIX(proc) \
+  ( ((GdkGLProc_glTagSampleBufferSGIX) (proc)) () )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_draw_range_elements GdkGL_GL_EXT_draw_range_elements;
+typedef struct _GdkGL_GL_SGIX_tag_sample_buffer GdkGL_GL_SGIX_tag_sample_buffer;
 
-struct _GdkGL_GL_EXT_draw_range_elements
+struct _GdkGL_GL_SGIX_tag_sample_buffer
 {
-  GdkGLProc_glDrawRangeElementsEXT glDrawRangeElementsEXT;
+  GdkGLProc_glTagSampleBufferSGIX glTagSampleBufferSGIX;
 };
 
-GdkGL_GL_EXT_draw_range_elements *gdk_gl_get_GL_EXT_draw_range_elements (void);
+GdkGL_GL_SGIX_tag_sample_buffer *gdk_gl_get_GL_SGIX_tag_sample_buffer (void);
 
 /*
- * GL_EXT_light_texture
+ * GL_SGIX_polynomial_ffd
  */
 
-/* glApplyTextureEXT */
-typedef void (APIENTRY * GdkGLProc_glApplyTextureEXT) (GLenum mode);
-GdkGLProc    gdk_gl_get_glApplyTextureEXT (void);
-#define      gdk_gl_glApplyTextureEXT(proc, mode) \
-  ( ((GdkGLProc_glApplyTextureEXT) (proc)) (mode) )
+/* glDeformationMap3dSGIX */
+typedef void (APIENTRYP GdkGLProc_glDeformationMap3dSGIX) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
+GdkGLProc    gdk_gl_get_glDeformationMap3dSGIX (void);
+#define      gdk_gl_glDeformationMap3dSGIX(proc, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) \
+  ( ((GdkGLProc_glDeformationMap3dSGIX) (proc)) (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) )
 
-/* glTextureLightEXT */
-typedef void (APIENTRY * GdkGLProc_glTextureLightEXT) (GLenum pname);
-GdkGLProc    gdk_gl_get_glTextureLightEXT (void);
-#define      gdk_gl_glTextureLightEXT(proc, pname) \
-  ( ((GdkGLProc_glTextureLightEXT) (proc)) (pname) )
+/* glDeformationMap3fSGIX */
+typedef void (APIENTRYP GdkGLProc_glDeformationMap3fSGIX) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
+GdkGLProc    gdk_gl_get_glDeformationMap3fSGIX (void);
+#define      gdk_gl_glDeformationMap3fSGIX(proc, target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) \
+  ( ((GdkGLProc_glDeformationMap3fSGIX) (proc)) (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) )
 
-/* glTextureMaterialEXT */
-typedef void (APIENTRY * GdkGLProc_glTextureMaterialEXT) (GLenum face, GLenum mode);
-GdkGLProc    gdk_gl_get_glTextureMaterialEXT (void);
-#define      gdk_gl_glTextureMaterialEXT(proc, face, mode) \
-  ( ((GdkGLProc_glTextureMaterialEXT) (proc)) (face, mode) )
+/* glDeformSGIX */
+typedef void (APIENTRYP GdkGLProc_glDeformSGIX) (GLbitfield mask);
+GdkGLProc    gdk_gl_get_glDeformSGIX (void);
+#define      gdk_gl_glDeformSGIX(proc, mask) \
+  ( ((GdkGLProc_glDeformSGIX) (proc)) (mask) )
+
+/* glLoadIdentityDeformationMapSGIX */
+typedef void (APIENTRYP GdkGLProc_glLoadIdentityDeformationMapSGIX) (GLbitfield mask);
+GdkGLProc    gdk_gl_get_glLoadIdentityDeformationMapSGIX (void);
+#define      gdk_gl_glLoadIdentityDeformationMapSGIX(proc, mask) \
+  ( ((GdkGLProc_glLoadIdentityDeformationMapSGIX) (proc)) (mask) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_light_texture GdkGL_GL_EXT_light_texture;
+typedef struct _GdkGL_GL_SGIX_polynomial_ffd GdkGL_GL_SGIX_polynomial_ffd;
 
-struct _GdkGL_GL_EXT_light_texture
+struct _GdkGL_GL_SGIX_polynomial_ffd
 {
-  GdkGLProc_glApplyTextureEXT glApplyTextureEXT;
-  GdkGLProc_glTextureLightEXT glTextureLightEXT;
-  GdkGLProc_glTextureMaterialEXT glTextureMaterialEXT;
+  GdkGLProc_glDeformationMap3dSGIX glDeformationMap3dSGIX;
+  GdkGLProc_glDeformationMap3fSGIX glDeformationMap3fSGIX;
+  GdkGLProc_glDeformSGIX glDeformSGIX;
+  GdkGLProc_glLoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX;
 };
 
-GdkGL_GL_EXT_light_texture *gdk_gl_get_GL_EXT_light_texture (void);
+GdkGL_GL_SGIX_polynomial_ffd *gdk_gl_get_GL_SGIX_polynomial_ffd (void);
 
 /*
- * GL_SGIX_async
+ * GL_SGIX_reference_plane
  */
 
-/* glAsyncMarkerSGIX */
-typedef void (APIENTRY * GdkGLProc_glAsyncMarkerSGIX) (GLuint marker);
-GdkGLProc    gdk_gl_get_glAsyncMarkerSGIX (void);
-#define      gdk_gl_glAsyncMarkerSGIX(proc, marker) \
-  ( ((GdkGLProc_glAsyncMarkerSGIX) (proc)) (marker) )
-
-/* glFinishAsyncSGIX */
-typedef GLint (APIENTRY * GdkGLProc_glFinishAsyncSGIX) (GLuint *markerp);
-GdkGLProc    gdk_gl_get_glFinishAsyncSGIX (void);
-#define      gdk_gl_glFinishAsyncSGIX(proc, markerp) \
-  ( ((GdkGLProc_glFinishAsyncSGIX) (proc)) (markerp) )
-
-/* glPollAsyncSGIX */
-typedef GLint (APIENTRY * GdkGLProc_glPollAsyncSGIX) (GLuint *markerp);
-GdkGLProc    gdk_gl_get_glPollAsyncSGIX (void);
-#define      gdk_gl_glPollAsyncSGIX(proc, markerp) \
-  ( ((GdkGLProc_glPollAsyncSGIX) (proc)) (markerp) )
-
-/* glGenAsyncMarkersSGIX */
-typedef GLuint (APIENTRY * GdkGLProc_glGenAsyncMarkersSGIX) (GLsizei range);
-GdkGLProc    gdk_gl_get_glGenAsyncMarkersSGIX (void);
-#define      gdk_gl_glGenAsyncMarkersSGIX(proc, range) \
-  ( ((GdkGLProc_glGenAsyncMarkersSGIX) (proc)) (range) )
-
-/* glDeleteAsyncMarkersSGIX */
-typedef void (APIENTRY * GdkGLProc_glDeleteAsyncMarkersSGIX) (GLuint marker, GLsizei range);
-GdkGLProc    gdk_gl_get_glDeleteAsyncMarkersSGIX (void);
-#define      gdk_gl_glDeleteAsyncMarkersSGIX(proc, marker, range) \
-  ( ((GdkGLProc_glDeleteAsyncMarkersSGIX) (proc)) (marker, range) )
-
-/* glIsAsyncMarkerSGIX */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsAsyncMarkerSGIX) (GLuint marker);
-GdkGLProc    gdk_gl_get_glIsAsyncMarkerSGIX (void);
-#define      gdk_gl_glIsAsyncMarkerSGIX(proc, marker) \
-  ( ((GdkGLProc_glIsAsyncMarkerSGIX) (proc)) (marker) )
+/* glReferencePlaneSGIX */
+typedef void (APIENTRYP GdkGLProc_glReferencePlaneSGIX) (const GLdouble *equation);
+GdkGLProc    gdk_gl_get_glReferencePlaneSGIX (void);
+#define      gdk_gl_glReferencePlaneSGIX(proc, equation) \
+  ( ((GdkGLProc_glReferencePlaneSGIX) (proc)) (equation) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_async GdkGL_GL_SGIX_async;
+typedef struct _GdkGL_GL_SGIX_reference_plane GdkGL_GL_SGIX_reference_plane;
 
-struct _GdkGL_GL_SGIX_async
+struct _GdkGL_GL_SGIX_reference_plane
 {
-  GdkGLProc_glAsyncMarkerSGIX glAsyncMarkerSGIX;
-  GdkGLProc_glFinishAsyncSGIX glFinishAsyncSGIX;
-  GdkGLProc_glPollAsyncSGIX glPollAsyncSGIX;
-  GdkGLProc_glGenAsyncMarkersSGIX glGenAsyncMarkersSGIX;
-  GdkGLProc_glDeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX;
-  GdkGLProc_glIsAsyncMarkerSGIX glIsAsyncMarkerSGIX;
+  GdkGLProc_glReferencePlaneSGIX glReferencePlaneSGIX;
 };
 
-GdkGL_GL_SGIX_async *gdk_gl_get_GL_SGIX_async (void);
+GdkGL_GL_SGIX_reference_plane *gdk_gl_get_GL_SGIX_reference_plane (void);
 
 /*
- * GL_INTEL_parallel_arrays
+ * GL_SGIX_flush_raster
  */
 
-/* glVertexPointervINTEL */
-typedef void (APIENTRY * GdkGLProc_glVertexPointervINTEL) (GLint size, GLenum type, const GLvoid* *pointer);
-GdkGLProc    gdk_gl_get_glVertexPointervINTEL (void);
-#define      gdk_gl_glVertexPointervINTEL(proc, size, type, pointer) \
-  ( ((GdkGLProc_glVertexPointervINTEL) (proc)) (size, type, pointer) )
-
-/* glNormalPointervINTEL */
-typedef void (APIENTRY * GdkGLProc_glNormalPointervINTEL) (GLenum type, const GLvoid* *pointer);
-GdkGLProc    gdk_gl_get_glNormalPointervINTEL (void);
-#define      gdk_gl_glNormalPointervINTEL(proc, type, pointer) \
-  ( ((GdkGLProc_glNormalPointervINTEL) (proc)) (type, pointer) )
-
-/* glColorPointervINTEL */
-typedef void (APIENTRY * GdkGLProc_glColorPointervINTEL) (GLint size, GLenum type, const GLvoid* *pointer);
-GdkGLProc    gdk_gl_get_glColorPointervINTEL (void);
-#define      gdk_gl_glColorPointervINTEL(proc, size, type, pointer) \
-  ( ((GdkGLProc_glColorPointervINTEL) (proc)) (size, type, pointer) )
-
-/* glTexCoordPointervINTEL */
-typedef void (APIENTRY * GdkGLProc_glTexCoordPointervINTEL) (GLint size, GLenum type, const GLvoid* *pointer);
-GdkGLProc    gdk_gl_get_glTexCoordPointervINTEL (void);
-#define      gdk_gl_glTexCoordPointervINTEL(proc, size, type, pointer) \
-  ( ((GdkGLProc_glTexCoordPointervINTEL) (proc)) (size, type, pointer) )
+/* glFlushRasterSGIX */
+typedef void (APIENTRYP GdkGLProc_glFlushRasterSGIX) (void);
+GdkGLProc    gdk_gl_get_glFlushRasterSGIX (void);
+#define      gdk_gl_glFlushRasterSGIX(proc) \
+  ( ((GdkGLProc_glFlushRasterSGIX) (proc)) () )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_INTEL_parallel_arrays GdkGL_GL_INTEL_parallel_arrays;
+typedef struct _GdkGL_GL_SGIX_flush_raster GdkGL_GL_SGIX_flush_raster;
 
-struct _GdkGL_GL_INTEL_parallel_arrays
+struct _GdkGL_GL_SGIX_flush_raster
 {
-  GdkGLProc_glVertexPointervINTEL glVertexPointervINTEL;
-  GdkGLProc_glNormalPointervINTEL glNormalPointervINTEL;
-  GdkGLProc_glColorPointervINTEL glColorPointervINTEL;
-  GdkGLProc_glTexCoordPointervINTEL glTexCoordPointervINTEL;
+  GdkGLProc_glFlushRasterSGIX glFlushRasterSGIX;
 };
 
-GdkGL_GL_INTEL_parallel_arrays *gdk_gl_get_GL_INTEL_parallel_arrays (void);
+GdkGL_GL_SGIX_flush_raster *gdk_gl_get_GL_SGIX_flush_raster (void);
 
 /*
- * GL_EXT_pixel_transform
+ * GL_SGIS_fog_function
  */
 
-/* glPixelTransformParameteriEXT */
-typedef void (APIENTRY * GdkGLProc_glPixelTransformParameteriEXT) (GLenum target, GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glPixelTransformParameteriEXT (void);
-#define      gdk_gl_glPixelTransformParameteriEXT(proc, target, pname, param) \
-  ( ((GdkGLProc_glPixelTransformParameteriEXT) (proc)) (target, pname, param) )
-
-/* glPixelTransformParameterfEXT */
-typedef void (APIENTRY * GdkGLProc_glPixelTransformParameterfEXT) (GLenum target, GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glPixelTransformParameterfEXT (void);
-#define      gdk_gl_glPixelTransformParameterfEXT(proc, target, pname, param) \
-  ( ((GdkGLProc_glPixelTransformParameterfEXT) (proc)) (target, pname, param) )
-
-/* glPixelTransformParameterivEXT */
-typedef void (APIENTRY * GdkGLProc_glPixelTransformParameterivEXT) (GLenum target, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glPixelTransformParameterivEXT (void);
-#define      gdk_gl_glPixelTransformParameterivEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glPixelTransformParameterivEXT) (proc)) (target, pname, params) )
+/* glFogFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glFogFuncSGIS) (GLsizei n, const GLfloat *points);
+GdkGLProc    gdk_gl_get_glFogFuncSGIS (void);
+#define      gdk_gl_glFogFuncSGIS(proc, n, points) \
+  ( ((GdkGLProc_glFogFuncSGIS) (proc)) (n, points) )
 
-/* glPixelTransformParameterfvEXT */
-typedef void (APIENTRY * GdkGLProc_glPixelTransformParameterfvEXT) (GLenum target, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glPixelTransformParameterfvEXT (void);
-#define      gdk_gl_glPixelTransformParameterfvEXT(proc, target, pname, params) \
-  ( ((GdkGLProc_glPixelTransformParameterfvEXT) (proc)) (target, pname, params) )
+/* glGetFogFuncSGIS */
+typedef void (APIENTRYP GdkGLProc_glGetFogFuncSGIS) (GLfloat *points);
+GdkGLProc    gdk_gl_get_glGetFogFuncSGIS (void);
+#define      gdk_gl_glGetFogFuncSGIS(proc, points) \
+  ( ((GdkGLProc_glGetFogFuncSGIS) (proc)) (points) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_pixel_transform GdkGL_GL_EXT_pixel_transform;
+typedef struct _GdkGL_GL_SGIS_fog_function GdkGL_GL_SGIS_fog_function;
 
-struct _GdkGL_GL_EXT_pixel_transform
+struct _GdkGL_GL_SGIS_fog_function
 {
-  GdkGLProc_glPixelTransformParameteriEXT glPixelTransformParameteriEXT;
-  GdkGLProc_glPixelTransformParameterfEXT glPixelTransformParameterfEXT;
-  GdkGLProc_glPixelTransformParameterivEXT glPixelTransformParameterivEXT;
-  GdkGLProc_glPixelTransformParameterfvEXT glPixelTransformParameterfvEXT;
+  GdkGLProc_glFogFuncSGIS glFogFuncSGIS;
+  GdkGLProc_glGetFogFuncSGIS glGetFogFuncSGIS;
 };
 
-GdkGL_GL_EXT_pixel_transform *gdk_gl_get_GL_EXT_pixel_transform (void);
+GdkGL_GL_SGIS_fog_function *gdk_gl_get_GL_SGIS_fog_function (void);
 
 /*
- * GL_EXT_secondary_color
+ * GL_HP_image_transform
  */
 
-/* glSecondaryColor3bEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3bEXT) (GLbyte red, GLbyte green, GLbyte blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3bEXT (void);
-#define      gdk_gl_glSecondaryColor3bEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3bEXT) (proc)) (red, green, blue) )
+/* glImageTransformParameteriHP */
+typedef void (APIENTRYP GdkGLProc_glImageTransformParameteriHP) (GLenum target, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glImageTransformParameteriHP (void);
+#define      gdk_gl_glImageTransformParameteriHP(proc, target, pname, param) \
+  ( ((GdkGLProc_glImageTransformParameteriHP) (proc)) (target, pname, param) )
 
-/* glSecondaryColor3bvEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3bvEXT) (const GLbyte *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3bvEXT (void);
-#define      gdk_gl_glSecondaryColor3bvEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3bvEXT) (proc)) (v) )
+/* glImageTransformParameterfHP */
+typedef void (APIENTRYP GdkGLProc_glImageTransformParameterfHP) (GLenum target, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glImageTransformParameterfHP (void);
+#define      gdk_gl_glImageTransformParameterfHP(proc, target, pname, param) \
+  ( ((GdkGLProc_glImageTransformParameterfHP) (proc)) (target, pname, param) )
 
-/* glSecondaryColor3dEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3dEXT) (GLdouble red, GLdouble green, GLdouble blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3dEXT (void);
-#define      gdk_gl_glSecondaryColor3dEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3dEXT) (proc)) (red, green, blue) )
-
-/* glSecondaryColor3dvEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3dvEXT) (const GLdouble *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3dvEXT (void);
-#define      gdk_gl_glSecondaryColor3dvEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3dvEXT) (proc)) (v) )
-
-/* glSecondaryColor3fEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3fEXT) (GLfloat red, GLfloat green, GLfloat blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3fEXT (void);
-#define      gdk_gl_glSecondaryColor3fEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3fEXT) (proc)) (red, green, blue) )
-
-/* glSecondaryColor3fvEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3fvEXT) (const GLfloat *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3fvEXT (void);
-#define      gdk_gl_glSecondaryColor3fvEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3fvEXT) (proc)) (v) )
-
-/* glSecondaryColor3iEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3iEXT) (GLint red, GLint green, GLint blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3iEXT (void);
-#define      gdk_gl_glSecondaryColor3iEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3iEXT) (proc)) (red, green, blue) )
+/* glImageTransformParameterivHP */
+typedef void (APIENTRYP GdkGLProc_glImageTransformParameterivHP) (GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glImageTransformParameterivHP (void);
+#define      gdk_gl_glImageTransformParameterivHP(proc, target, pname, params) \
+  ( ((GdkGLProc_glImageTransformParameterivHP) (proc)) (target, pname, params) )
 
-/* glSecondaryColor3ivEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3ivEXT) (const GLint *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3ivEXT (void);
-#define      gdk_gl_glSecondaryColor3ivEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3ivEXT) (proc)) (v) )
+/* glImageTransformParameterfvHP */
+typedef void (APIENTRYP GdkGLProc_glImageTransformParameterfvHP) (GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glImageTransformParameterfvHP (void);
+#define      gdk_gl_glImageTransformParameterfvHP(proc, target, pname, params) \
+  ( ((GdkGLProc_glImageTransformParameterfvHP) (proc)) (target, pname, params) )
 
-/* glSecondaryColor3sEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3sEXT) (GLshort red, GLshort green, GLshort blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3sEXT (void);
-#define      gdk_gl_glSecondaryColor3sEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3sEXT) (proc)) (red, green, blue) )
+/* glGetImageTransformParameterivHP */
+typedef void (APIENTRYP GdkGLProc_glGetImageTransformParameterivHP) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetImageTransformParameterivHP (void);
+#define      gdk_gl_glGetImageTransformParameterivHP(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetImageTransformParameterivHP) (proc)) (target, pname, params) )
 
-/* glSecondaryColor3svEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3svEXT) (const GLshort *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3svEXT (void);
-#define      gdk_gl_glSecondaryColor3svEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3svEXT) (proc)) (v) )
+/* glGetImageTransformParameterfvHP */
+typedef void (APIENTRYP GdkGLProc_glGetImageTransformParameterfvHP) (GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetImageTransformParameterfvHP (void);
+#define      gdk_gl_glGetImageTransformParameterfvHP(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetImageTransformParameterfvHP) (proc)) (target, pname, params) )
 
-/* glSecondaryColor3ubEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3ubEXT) (GLubyte red, GLubyte green, GLubyte blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3ubEXT (void);
-#define      gdk_gl_glSecondaryColor3ubEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3ubEXT) (proc)) (red, green, blue) )
+/* proc struct */
 
-/* glSecondaryColor3ubvEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3ubvEXT) (const GLubyte *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3ubvEXT (void);
-#define      gdk_gl_glSecondaryColor3ubvEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3ubvEXT) (proc)) (v) )
+typedef struct _GdkGL_GL_HP_image_transform GdkGL_GL_HP_image_transform;
 
-/* glSecondaryColor3uiEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3uiEXT) (GLuint red, GLuint green, GLuint blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3uiEXT (void);
-#define      gdk_gl_glSecondaryColor3uiEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3uiEXT) (proc)) (red, green, blue) )
+struct _GdkGL_GL_HP_image_transform
+{
+  GdkGLProc_glImageTransformParameteriHP glImageTransformParameteriHP;
+  GdkGLProc_glImageTransformParameterfHP glImageTransformParameterfHP;
+  GdkGLProc_glImageTransformParameterivHP glImageTransformParameterivHP;
+  GdkGLProc_glImageTransformParameterfvHP glImageTransformParameterfvHP;
+  GdkGLProc_glGetImageTransformParameterivHP glGetImageTransformParameterivHP;
+  GdkGLProc_glGetImageTransformParameterfvHP glGetImageTransformParameterfvHP;
+};
 
-/* glSecondaryColor3uivEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3uivEXT) (const GLuint *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3uivEXT (void);
-#define      gdk_gl_glSecondaryColor3uivEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3uivEXT) (proc)) (v) )
+GdkGL_GL_HP_image_transform *gdk_gl_get_GL_HP_image_transform (void);
 
-/* glSecondaryColor3usEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3usEXT) (GLushort red, GLushort green, GLushort blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3usEXT (void);
-#define      gdk_gl_glSecondaryColor3usEXT(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3usEXT) (proc)) (red, green, blue) )
+/*
+ * GL_EXT_color_subtable
+ */
 
-/* glSecondaryColor3usvEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3usvEXT) (const GLushort *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3usvEXT (void);
-#define      gdk_gl_glSecondaryColor3usvEXT(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3usvEXT) (proc)) (v) )
+/* glColorSubTableEXT */
+typedef void (APIENTRYP GdkGLProc_glColorSubTableEXT) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glColorSubTableEXT (void);
+#define      gdk_gl_glColorSubTableEXT(proc, target, start, count, format, type, data) \
+  ( ((GdkGLProc_glColorSubTableEXT) (proc)) (target, start, count, format, type, data) )
 
-/* glSecondaryColorPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColorPointerEXT) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glSecondaryColorPointerEXT (void);
-#define      gdk_gl_glSecondaryColorPointerEXT(proc, size, type, stride, pointer) \
-  ( ((GdkGLProc_glSecondaryColorPointerEXT) (proc)) (size, type, stride, pointer) )
+/* glCopyColorSubTableEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyColorSubTableEXT) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
+GdkGLProc    gdk_gl_get_glCopyColorSubTableEXT (void);
+#define      gdk_gl_glCopyColorSubTableEXT(proc, target, start, x, y, width) \
+  ( ((GdkGLProc_glCopyColorSubTableEXT) (proc)) (target, start, x, y, width) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_secondary_color GdkGL_GL_EXT_secondary_color;
+typedef struct _GdkGL_GL_EXT_color_subtable GdkGL_GL_EXT_color_subtable;
 
-struct _GdkGL_GL_EXT_secondary_color
+struct _GdkGL_GL_EXT_color_subtable
 {
-  GdkGLProc_glSecondaryColor3bEXT glSecondaryColor3bEXT;
-  GdkGLProc_glSecondaryColor3bvEXT glSecondaryColor3bvEXT;
-  GdkGLProc_glSecondaryColor3dEXT glSecondaryColor3dEXT;
-  GdkGLProc_glSecondaryColor3dvEXT glSecondaryColor3dvEXT;
-  GdkGLProc_glSecondaryColor3fEXT glSecondaryColor3fEXT;
-  GdkGLProc_glSecondaryColor3fvEXT glSecondaryColor3fvEXT;
-  GdkGLProc_glSecondaryColor3iEXT glSecondaryColor3iEXT;
-  GdkGLProc_glSecondaryColor3ivEXT glSecondaryColor3ivEXT;
-  GdkGLProc_glSecondaryColor3sEXT glSecondaryColor3sEXT;
-  GdkGLProc_glSecondaryColor3svEXT glSecondaryColor3svEXT;
-  GdkGLProc_glSecondaryColor3ubEXT glSecondaryColor3ubEXT;
-  GdkGLProc_glSecondaryColor3ubvEXT glSecondaryColor3ubvEXT;
-  GdkGLProc_glSecondaryColor3uiEXT glSecondaryColor3uiEXT;
-  GdkGLProc_glSecondaryColor3uivEXT glSecondaryColor3uivEXT;
-  GdkGLProc_glSecondaryColor3usEXT glSecondaryColor3usEXT;
-  GdkGLProc_glSecondaryColor3usvEXT glSecondaryColor3usvEXT;
-  GdkGLProc_glSecondaryColorPointerEXT glSecondaryColorPointerEXT;
+  GdkGLProc_glColorSubTableEXT glColorSubTableEXT;
+  GdkGLProc_glCopyColorSubTableEXT glCopyColorSubTableEXT;
 };
 
-GdkGL_GL_EXT_secondary_color *gdk_gl_get_GL_EXT_secondary_color (void);
+GdkGL_GL_EXT_color_subtable *gdk_gl_get_GL_EXT_color_subtable (void);
 
 /*
- * GL_EXT_texture_perturb_normal
+ * GL_PGI_misc_hints
  */
 
-/* glTextureNormalEXT */
-typedef void (APIENTRY * GdkGLProc_glTextureNormalEXT) (GLenum mode);
-GdkGLProc    gdk_gl_get_glTextureNormalEXT (void);
-#define      gdk_gl_glTextureNormalEXT(proc, mode) \
-  ( ((GdkGLProc_glTextureNormalEXT) (proc)) (mode) )
+/* glHintPGI */
+typedef void (APIENTRYP GdkGLProc_glHintPGI) (GLenum target, GLint mode);
+GdkGLProc    gdk_gl_get_glHintPGI (void);
+#define      gdk_gl_glHintPGI(proc, target, mode) \
+  ( ((GdkGLProc_glHintPGI) (proc)) (target, mode) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_texture_perturb_normal GdkGL_GL_EXT_texture_perturb_normal;
+typedef struct _GdkGL_GL_PGI_misc_hints GdkGL_GL_PGI_misc_hints;
 
-struct _GdkGL_GL_EXT_texture_perturb_normal
+struct _GdkGL_GL_PGI_misc_hints
 {
-  GdkGLProc_glTextureNormalEXT glTextureNormalEXT;
+  GdkGLProc_glHintPGI glHintPGI;
 };
 
-GdkGL_GL_EXT_texture_perturb_normal *gdk_gl_get_GL_EXT_texture_perturb_normal (void);
+GdkGL_GL_PGI_misc_hints *gdk_gl_get_GL_PGI_misc_hints (void);
 
 /*
- * GL_EXT_multi_draw_arrays
+ * GL_EXT_paletted_texture
  */
 
-/* glMultiDrawArraysEXT */
-typedef void (APIENTRY * GdkGLProc_glMultiDrawArraysEXT) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
-GdkGLProc    gdk_gl_get_glMultiDrawArraysEXT (void);
-#define      gdk_gl_glMultiDrawArraysEXT(proc, mode, first, count, primcount) \
-  ( ((GdkGLProc_glMultiDrawArraysEXT) (proc)) (mode, first, count, primcount) )
+/* glColorTableEXT */
+typedef void (APIENTRYP GdkGLProc_glColorTableEXT) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+GdkGLProc    gdk_gl_get_glColorTableEXT (void);
+#define      gdk_gl_glColorTableEXT(proc, target, internalFormat, width, format, type, table) \
+  ( ((GdkGLProc_glColorTableEXT) (proc)) (target, internalFormat, width, format, type, table) )
 
-/* glMultiDrawElementsEXT */
-typedef void (APIENTRY * GdkGLProc_glMultiDrawElementsEXT) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
-GdkGLProc    gdk_gl_get_glMultiDrawElementsEXT (void);
-#define      gdk_gl_glMultiDrawElementsEXT(proc, mode, count, type, indices, primcount) \
-  ( ((GdkGLProc_glMultiDrawElementsEXT) (proc)) (mode, count, type, indices, primcount) )
+/* glGetColorTableEXT */
+typedef void (APIENTRYP GdkGLProc_glGetColorTableEXT) (GLenum target, GLenum format, GLenum type, GLvoid *data);
+GdkGLProc    gdk_gl_get_glGetColorTableEXT (void);
+#define      gdk_gl_glGetColorTableEXT(proc, target, format, type, data) \
+  ( ((GdkGLProc_glGetColorTableEXT) (proc)) (target, format, type, data) )
+
+/* glGetColorTableParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetColorTableParameterivEXT) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetColorTableParameterivEXT (void);
+#define      gdk_gl_glGetColorTableParameterivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetColorTableParameterivEXT) (proc)) (target, pname, params) )
+
+/* glGetColorTableParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetColorTableParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetColorTableParameterfvEXT (void);
+#define      gdk_gl_glGetColorTableParameterfvEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetColorTableParameterfvEXT) (proc)) (target, pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_multi_draw_arrays GdkGL_GL_EXT_multi_draw_arrays;
+typedef struct _GdkGL_GL_EXT_paletted_texture GdkGL_GL_EXT_paletted_texture;
 
-struct _GdkGL_GL_EXT_multi_draw_arrays
+struct _GdkGL_GL_EXT_paletted_texture
 {
-  GdkGLProc_glMultiDrawArraysEXT glMultiDrawArraysEXT;
-  GdkGLProc_glMultiDrawElementsEXT glMultiDrawElementsEXT;
+  GdkGLProc_glColorTableEXT glColorTableEXT;
+  GdkGLProc_glGetColorTableEXT glGetColorTableEXT;
+  GdkGLProc_glGetColorTableParameterivEXT glGetColorTableParameterivEXT;
+  GdkGLProc_glGetColorTableParameterfvEXT glGetColorTableParameterfvEXT;
 };
 
-GdkGL_GL_EXT_multi_draw_arrays *gdk_gl_get_GL_EXT_multi_draw_arrays (void);
+GdkGL_GL_EXT_paletted_texture *gdk_gl_get_GL_EXT_paletted_texture (void);
 
 /*
- * GL_EXT_fog_coord
+ * GL_SGIX_list_priority
  */
 
-/* glFogCoordfEXT */
-typedef void (APIENTRY * GdkGLProc_glFogCoordfEXT) (GLfloat coord);
-GdkGLProc    gdk_gl_get_glFogCoordfEXT (void);
-#define      gdk_gl_glFogCoordfEXT(proc, coord) \
-  ( ((GdkGLProc_glFogCoordfEXT) (proc)) (coord) )
+/* glGetListParameterfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glGetListParameterfvSGIX) (GLuint list, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetListParameterfvSGIX (void);
+#define      gdk_gl_glGetListParameterfvSGIX(proc, list, pname, params) \
+  ( ((GdkGLProc_glGetListParameterfvSGIX) (proc)) (list, pname, params) )
 
-/* glFogCoordfvEXT */
-typedef void (APIENTRY * GdkGLProc_glFogCoordfvEXT) (const GLfloat *coord);
-GdkGLProc    gdk_gl_get_glFogCoordfvEXT (void);
-#define      gdk_gl_glFogCoordfvEXT(proc, coord) \
-  ( ((GdkGLProc_glFogCoordfvEXT) (proc)) (coord) )
+/* glGetListParameterivSGIX */
+typedef void (APIENTRYP GdkGLProc_glGetListParameterivSGIX) (GLuint list, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetListParameterivSGIX (void);
+#define      gdk_gl_glGetListParameterivSGIX(proc, list, pname, params) \
+  ( ((GdkGLProc_glGetListParameterivSGIX) (proc)) (list, pname, params) )
 
-/* glFogCoorddEXT */
-typedef void (APIENTRY * GdkGLProc_glFogCoorddEXT) (GLdouble coord);
-GdkGLProc    gdk_gl_get_glFogCoorddEXT (void);
-#define      gdk_gl_glFogCoorddEXT(proc, coord) \
-  ( ((GdkGLProc_glFogCoorddEXT) (proc)) (coord) )
+/* glListParameterfSGIX */
+typedef void (APIENTRYP GdkGLProc_glListParameterfSGIX) (GLuint list, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glListParameterfSGIX (void);
+#define      gdk_gl_glListParameterfSGIX(proc, list, pname, param) \
+  ( ((GdkGLProc_glListParameterfSGIX) (proc)) (list, pname, param) )
 
-/* glFogCoorddvEXT */
-typedef void (APIENTRY * GdkGLProc_glFogCoorddvEXT) (const GLdouble *coord);
-GdkGLProc    gdk_gl_get_glFogCoorddvEXT (void);
-#define      gdk_gl_glFogCoorddvEXT(proc, coord) \
-  ( ((GdkGLProc_glFogCoorddvEXT) (proc)) (coord) )
+/* glListParameterfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glListParameterfvSGIX) (GLuint list, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glListParameterfvSGIX (void);
+#define      gdk_gl_glListParameterfvSGIX(proc, list, pname, params) \
+  ( ((GdkGLProc_glListParameterfvSGIX) (proc)) (list, pname, params) )
 
-/* glFogCoordPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glFogCoordPointerEXT) (GLenum type, GLsizei stride, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glFogCoordPointerEXT (void);
-#define      gdk_gl_glFogCoordPointerEXT(proc, type, stride, pointer) \
-  ( ((GdkGLProc_glFogCoordPointerEXT) (proc)) (type, stride, pointer) )
+/* glListParameteriSGIX */
+typedef void (APIENTRYP GdkGLProc_glListParameteriSGIX) (GLuint list, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glListParameteriSGIX (void);
+#define      gdk_gl_glListParameteriSGIX(proc, list, pname, param) \
+  ( ((GdkGLProc_glListParameteriSGIX) (proc)) (list, pname, param) )
+
+/* glListParameterivSGIX */
+typedef void (APIENTRYP GdkGLProc_glListParameterivSGIX) (GLuint list, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glListParameterivSGIX (void);
+#define      gdk_gl_glListParameterivSGIX(proc, list, pname, params) \
+  ( ((GdkGLProc_glListParameterivSGIX) (proc)) (list, pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_fog_coord GdkGL_GL_EXT_fog_coord;
+typedef struct _GdkGL_GL_SGIX_list_priority GdkGL_GL_SGIX_list_priority;
 
-struct _GdkGL_GL_EXT_fog_coord
+struct _GdkGL_GL_SGIX_list_priority
 {
-  GdkGLProc_glFogCoordfEXT glFogCoordfEXT;
-  GdkGLProc_glFogCoordfvEXT glFogCoordfvEXT;
-  GdkGLProc_glFogCoorddEXT glFogCoorddEXT;
-  GdkGLProc_glFogCoorddvEXT glFogCoorddvEXT;
-  GdkGLProc_glFogCoordPointerEXT glFogCoordPointerEXT;
+  GdkGLProc_glGetListParameterfvSGIX glGetListParameterfvSGIX;
+  GdkGLProc_glGetListParameterivSGIX glGetListParameterivSGIX;
+  GdkGLProc_glListParameterfSGIX glListParameterfSGIX;
+  GdkGLProc_glListParameterfvSGIX glListParameterfvSGIX;
+  GdkGLProc_glListParameteriSGIX glListParameteriSGIX;
+  GdkGLProc_glListParameterivSGIX glListParameterivSGIX;
 };
 
-GdkGL_GL_EXT_fog_coord *gdk_gl_get_GL_EXT_fog_coord (void);
+GdkGL_GL_SGIX_list_priority *gdk_gl_get_GL_SGIX_list_priority (void);
 
 /*
- * GL_EXT_coordinate_frame
+ * GL_EXT_index_material
  */
 
-/* glTangent3bEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3bEXT) (GLbyte tx, GLbyte ty, GLbyte tz);
-GdkGLProc    gdk_gl_get_glTangent3bEXT (void);
-#define      gdk_gl_glTangent3bEXT(proc, tx, ty, tz) \
-  ( ((GdkGLProc_glTangent3bEXT) (proc)) (tx, ty, tz) )
-
-/* glTangent3bvEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3bvEXT) (const GLbyte *v);
-GdkGLProc    gdk_gl_get_glTangent3bvEXT (void);
-#define      gdk_gl_glTangent3bvEXT(proc, v) \
-  ( ((GdkGLProc_glTangent3bvEXT) (proc)) (v) )
-
-/* glTangent3dEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3dEXT) (GLdouble tx, GLdouble ty, GLdouble tz);
-GdkGLProc    gdk_gl_get_glTangent3dEXT (void);
-#define      gdk_gl_glTangent3dEXT(proc, tx, ty, tz) \
-  ( ((GdkGLProc_glTangent3dEXT) (proc)) (tx, ty, tz) )
-
-/* glTangent3dvEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3dvEXT) (const GLdouble *v);
-GdkGLProc    gdk_gl_get_glTangent3dvEXT (void);
-#define      gdk_gl_glTangent3dvEXT(proc, v) \
-  ( ((GdkGLProc_glTangent3dvEXT) (proc)) (v) )
-
-/* glTangent3fEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3fEXT) (GLfloat tx, GLfloat ty, GLfloat tz);
-GdkGLProc    gdk_gl_get_glTangent3fEXT (void);
-#define      gdk_gl_glTangent3fEXT(proc, tx, ty, tz) \
-  ( ((GdkGLProc_glTangent3fEXT) (proc)) (tx, ty, tz) )
-
-/* glTangent3fvEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3fvEXT) (const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTangent3fvEXT (void);
-#define      gdk_gl_glTangent3fvEXT(proc, v) \
-  ( ((GdkGLProc_glTangent3fvEXT) (proc)) (v) )
-
-/* glTangent3iEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3iEXT) (GLint tx, GLint ty, GLint tz);
-GdkGLProc    gdk_gl_get_glTangent3iEXT (void);
-#define      gdk_gl_glTangent3iEXT(proc, tx, ty, tz) \
-  ( ((GdkGLProc_glTangent3iEXT) (proc)) (tx, ty, tz) )
-
-/* glTangent3ivEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3ivEXT) (const GLint *v);
-GdkGLProc    gdk_gl_get_glTangent3ivEXT (void);
-#define      gdk_gl_glTangent3ivEXT(proc, v) \
-  ( ((GdkGLProc_glTangent3ivEXT) (proc)) (v) )
-
-/* glTangent3sEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3sEXT) (GLshort tx, GLshort ty, GLshort tz);
-GdkGLProc    gdk_gl_get_glTangent3sEXT (void);
-#define      gdk_gl_glTangent3sEXT(proc, tx, ty, tz) \
-  ( ((GdkGLProc_glTangent3sEXT) (proc)) (tx, ty, tz) )
+/* glIndexMaterialEXT */
+typedef void (APIENTRYP GdkGLProc_glIndexMaterialEXT) (GLenum face, GLenum mode);
+GdkGLProc    gdk_gl_get_glIndexMaterialEXT (void);
+#define      gdk_gl_glIndexMaterialEXT(proc, face, mode) \
+  ( ((GdkGLProc_glIndexMaterialEXT) (proc)) (face, mode) )
 
-/* glTangent3svEXT */
-typedef void (APIENTRY * GdkGLProc_glTangent3svEXT) (const GLshort *v);
-GdkGLProc    gdk_gl_get_glTangent3svEXT (void);
-#define      gdk_gl_glTangent3svEXT(proc, v) \
-  ( ((GdkGLProc_glTangent3svEXT) (proc)) (v) )
+/* proc struct */
 
-/* glBinormal3bEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3bEXT) (GLbyte bx, GLbyte by, GLbyte bz);
-GdkGLProc    gdk_gl_get_glBinormal3bEXT (void);
-#define      gdk_gl_glBinormal3bEXT(proc, bx, by, bz) \
-  ( ((GdkGLProc_glBinormal3bEXT) (proc)) (bx, by, bz) )
+typedef struct _GdkGL_GL_EXT_index_material GdkGL_GL_EXT_index_material;
 
-/* glBinormal3bvEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3bvEXT) (const GLbyte *v);
-GdkGLProc    gdk_gl_get_glBinormal3bvEXT (void);
-#define      gdk_gl_glBinormal3bvEXT(proc, v) \
-  ( ((GdkGLProc_glBinormal3bvEXT) (proc)) (v) )
+struct _GdkGL_GL_EXT_index_material
+{
+  GdkGLProc_glIndexMaterialEXT glIndexMaterialEXT;
+};
 
-/* glBinormal3dEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3dEXT) (GLdouble bx, GLdouble by, GLdouble bz);
-GdkGLProc    gdk_gl_get_glBinormal3dEXT (void);
-#define      gdk_gl_glBinormal3dEXT(proc, bx, by, bz) \
-  ( ((GdkGLProc_glBinormal3dEXT) (proc)) (bx, by, bz) )
+GdkGL_GL_EXT_index_material *gdk_gl_get_GL_EXT_index_material (void);
 
-/* glBinormal3dvEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3dvEXT) (const GLdouble *v);
-GdkGLProc    gdk_gl_get_glBinormal3dvEXT (void);
-#define      gdk_gl_glBinormal3dvEXT(proc, v) \
-  ( ((GdkGLProc_glBinormal3dvEXT) (proc)) (v) )
+/*
+ * GL_EXT_index_func
+ */
 
-/* glBinormal3fEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3fEXT) (GLfloat bx, GLfloat by, GLfloat bz);
-GdkGLProc    gdk_gl_get_glBinormal3fEXT (void);
-#define      gdk_gl_glBinormal3fEXT(proc, bx, by, bz) \
-  ( ((GdkGLProc_glBinormal3fEXT) (proc)) (bx, by, bz) )
+/* glIndexFuncEXT */
+typedef void (APIENTRYP GdkGLProc_glIndexFuncEXT) (GLenum func, GLclampf ref);
+GdkGLProc    gdk_gl_get_glIndexFuncEXT (void);
+#define      gdk_gl_glIndexFuncEXT(proc, func, ref) \
+  ( ((GdkGLProc_glIndexFuncEXT) (proc)) (func, ref) )
 
-/* glBinormal3fvEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3fvEXT) (const GLfloat *v);
-GdkGLProc    gdk_gl_get_glBinormal3fvEXT (void);
-#define      gdk_gl_glBinormal3fvEXT(proc, v) \
-  ( ((GdkGLProc_glBinormal3fvEXT) (proc)) (v) )
+/* proc struct */
 
-/* glBinormal3iEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3iEXT) (GLint bx, GLint by, GLint bz);
-GdkGLProc    gdk_gl_get_glBinormal3iEXT (void);
-#define      gdk_gl_glBinormal3iEXT(proc, bx, by, bz) \
-  ( ((GdkGLProc_glBinormal3iEXT) (proc)) (bx, by, bz) )
+typedef struct _GdkGL_GL_EXT_index_func GdkGL_GL_EXT_index_func;
 
-/* glBinormal3ivEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3ivEXT) (const GLint *v);
-GdkGLProc    gdk_gl_get_glBinormal3ivEXT (void);
-#define      gdk_gl_glBinormal3ivEXT(proc, v) \
-  ( ((GdkGLProc_glBinormal3ivEXT) (proc)) (v) )
+struct _GdkGL_GL_EXT_index_func
+{
+  GdkGLProc_glIndexFuncEXT glIndexFuncEXT;
+};
 
-/* glBinormal3sEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3sEXT) (GLshort bx, GLshort by, GLshort bz);
-GdkGLProc    gdk_gl_get_glBinormal3sEXT (void);
-#define      gdk_gl_glBinormal3sEXT(proc, bx, by, bz) \
-  ( ((GdkGLProc_glBinormal3sEXT) (proc)) (bx, by, bz) )
+GdkGL_GL_EXT_index_func *gdk_gl_get_GL_EXT_index_func (void);
 
-/* glBinormal3svEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormal3svEXT) (const GLshort *v);
-GdkGLProc    gdk_gl_get_glBinormal3svEXT (void);
-#define      gdk_gl_glBinormal3svEXT(proc, v) \
-  ( ((GdkGLProc_glBinormal3svEXT) (proc)) (v) )
+/*
+ * GL_EXT_compiled_vertex_array
+ */
 
-/* glTangentPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glTangentPointerEXT) (GLenum type, GLsizei stride, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glTangentPointerEXT (void);
-#define      gdk_gl_glTangentPointerEXT(proc, type, stride, pointer) \
-  ( ((GdkGLProc_glTangentPointerEXT) (proc)) (type, stride, pointer) )
+/* glLockArraysEXT */
+typedef void (APIENTRYP GdkGLProc_glLockArraysEXT) (GLint first, GLsizei count);
+GdkGLProc    gdk_gl_get_glLockArraysEXT (void);
+#define      gdk_gl_glLockArraysEXT(proc, first, count) \
+  ( ((GdkGLProc_glLockArraysEXT) (proc)) (first, count) )
 
-/* glBinormalPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glBinormalPointerEXT) (GLenum type, GLsizei stride, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glBinormalPointerEXT (void);
-#define      gdk_gl_glBinormalPointerEXT(proc, type, stride, pointer) \
-  ( ((GdkGLProc_glBinormalPointerEXT) (proc)) (type, stride, pointer) )
+/* glUnlockArraysEXT */
+typedef void (APIENTRYP GdkGLProc_glUnlockArraysEXT) (void);
+GdkGLProc    gdk_gl_get_glUnlockArraysEXT (void);
+#define      gdk_gl_glUnlockArraysEXT(proc) \
+  ( ((GdkGLProc_glUnlockArraysEXT) (proc)) () )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_coordinate_frame GdkGL_GL_EXT_coordinate_frame;
+typedef struct _GdkGL_GL_EXT_compiled_vertex_array GdkGL_GL_EXT_compiled_vertex_array;
 
-struct _GdkGL_GL_EXT_coordinate_frame
+struct _GdkGL_GL_EXT_compiled_vertex_array
 {
-  GdkGLProc_glTangent3bEXT glTangent3bEXT;
-  GdkGLProc_glTangent3bvEXT glTangent3bvEXT;
-  GdkGLProc_glTangent3dEXT glTangent3dEXT;
-  GdkGLProc_glTangent3dvEXT glTangent3dvEXT;
-  GdkGLProc_glTangent3fEXT glTangent3fEXT;
-  GdkGLProc_glTangent3fvEXT glTangent3fvEXT;
-  GdkGLProc_glTangent3iEXT glTangent3iEXT;
-  GdkGLProc_glTangent3ivEXT glTangent3ivEXT;
-  GdkGLProc_glTangent3sEXT glTangent3sEXT;
-  GdkGLProc_glTangent3svEXT glTangent3svEXT;
-  GdkGLProc_glBinormal3bEXT glBinormal3bEXT;
-  GdkGLProc_glBinormal3bvEXT glBinormal3bvEXT;
-  GdkGLProc_glBinormal3dEXT glBinormal3dEXT;
-  GdkGLProc_glBinormal3dvEXT glBinormal3dvEXT;
-  GdkGLProc_glBinormal3fEXT glBinormal3fEXT;
-  GdkGLProc_glBinormal3fvEXT glBinormal3fvEXT;
-  GdkGLProc_glBinormal3iEXT glBinormal3iEXT;
-  GdkGLProc_glBinormal3ivEXT glBinormal3ivEXT;
-  GdkGLProc_glBinormal3sEXT glBinormal3sEXT;
-  GdkGLProc_glBinormal3svEXT glBinormal3svEXT;
-  GdkGLProc_glTangentPointerEXT glTangentPointerEXT;
-  GdkGLProc_glBinormalPointerEXT glBinormalPointerEXT;
+  GdkGLProc_glLockArraysEXT glLockArraysEXT;
+  GdkGLProc_glUnlockArraysEXT glUnlockArraysEXT;
 };
 
-GdkGL_GL_EXT_coordinate_frame *gdk_gl_get_GL_EXT_coordinate_frame (void);
+GdkGL_GL_EXT_compiled_vertex_array *gdk_gl_get_GL_EXT_compiled_vertex_array (void);
 
 /*
- * GL_SUNX_constant_data
+ * GL_EXT_cull_vertex
  */
 
-/* glFinishTextureSUNX */
-typedef void (APIENTRY * GdkGLProc_glFinishTextureSUNX) (void);
-GdkGLProc    gdk_gl_get_glFinishTextureSUNX (void);
-#define      gdk_gl_glFinishTextureSUNX(proc) \
-  ( ((GdkGLProc_glFinishTextureSUNX) (proc)) () )
+/* glCullParameterdvEXT */
+typedef void (APIENTRYP GdkGLProc_glCullParameterdvEXT) (GLenum pname, GLdouble *params);
+GdkGLProc    gdk_gl_get_glCullParameterdvEXT (void);
+#define      gdk_gl_glCullParameterdvEXT(proc, pname, params) \
+  ( ((GdkGLProc_glCullParameterdvEXT) (proc)) (pname, params) )
+
+/* glCullParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glCullParameterfvEXT) (GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glCullParameterfvEXT (void);
+#define      gdk_gl_glCullParameterfvEXT(proc, pname, params) \
+  ( ((GdkGLProc_glCullParameterfvEXT) (proc)) (pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SUNX_constant_data GdkGL_GL_SUNX_constant_data;
+typedef struct _GdkGL_GL_EXT_cull_vertex GdkGL_GL_EXT_cull_vertex;
 
-struct _GdkGL_GL_SUNX_constant_data
+struct _GdkGL_GL_EXT_cull_vertex
 {
-  GdkGLProc_glFinishTextureSUNX glFinishTextureSUNX;
+  GdkGLProc_glCullParameterdvEXT glCullParameterdvEXT;
+  GdkGLProc_glCullParameterfvEXT glCullParameterfvEXT;
 };
 
-GdkGL_GL_SUNX_constant_data *gdk_gl_get_GL_SUNX_constant_data (void);
+GdkGL_GL_EXT_cull_vertex *gdk_gl_get_GL_EXT_cull_vertex (void);
 
 /*
- * GL_SUN_global_alpha
+ * GL_SGIX_fragment_lighting
  */
 
-/* glGlobalAlphaFactorbSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactorbSUN) (GLbyte factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactorbSUN (void);
-#define      gdk_gl_glGlobalAlphaFactorbSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactorbSUN) (proc)) (factor) )
-
-/* glGlobalAlphaFactorsSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactorsSUN) (GLshort factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactorsSUN (void);
-#define      gdk_gl_glGlobalAlphaFactorsSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactorsSUN) (proc)) (factor) )
+/* glFragmentColorMaterialSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentColorMaterialSGIX) (GLenum face, GLenum mode);
+GdkGLProc    gdk_gl_get_glFragmentColorMaterialSGIX (void);
+#define      gdk_gl_glFragmentColorMaterialSGIX(proc, face, mode) \
+  ( ((GdkGLProc_glFragmentColorMaterialSGIX) (proc)) (face, mode) )
 
-/* glGlobalAlphaFactoriSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactoriSUN) (GLint factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactoriSUN (void);
-#define      gdk_gl_glGlobalAlphaFactoriSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactoriSUN) (proc)) (factor) )
+/* glFragmentLightfSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightfSGIX) (GLenum light, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glFragmentLightfSGIX (void);
+#define      gdk_gl_glFragmentLightfSGIX(proc, light, pname, param) \
+  ( ((GdkGLProc_glFragmentLightfSGIX) (proc)) (light, pname, param) )
 
-/* glGlobalAlphaFactorfSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactorfSUN) (GLfloat factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactorfSUN (void);
-#define      gdk_gl_glGlobalAlphaFactorfSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactorfSUN) (proc)) (factor) )
+/* glFragmentLightfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightfvSGIX) (GLenum light, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glFragmentLightfvSGIX (void);
+#define      gdk_gl_glFragmentLightfvSGIX(proc, light, pname, params) \
+  ( ((GdkGLProc_glFragmentLightfvSGIX) (proc)) (light, pname, params) )
 
-/* glGlobalAlphaFactordSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactordSUN) (GLdouble factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactordSUN (void);
-#define      gdk_gl_glGlobalAlphaFactordSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactordSUN) (proc)) (factor) )
+/* glFragmentLightiSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightiSGIX) (GLenum light, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glFragmentLightiSGIX (void);
+#define      gdk_gl_glFragmentLightiSGIX(proc, light, pname, param) \
+  ( ((GdkGLProc_glFragmentLightiSGIX) (proc)) (light, pname, param) )
 
-/* glGlobalAlphaFactorubSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactorubSUN) (GLubyte factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactorubSUN (void);
-#define      gdk_gl_glGlobalAlphaFactorubSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactorubSUN) (proc)) (factor) )
+/* glFragmentLightivSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightivSGIX) (GLenum light, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glFragmentLightivSGIX (void);
+#define      gdk_gl_glFragmentLightivSGIX(proc, light, pname, params) \
+  ( ((GdkGLProc_glFragmentLightivSGIX) (proc)) (light, pname, params) )
 
-/* glGlobalAlphaFactorusSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactorusSUN) (GLushort factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactorusSUN (void);
-#define      gdk_gl_glGlobalAlphaFactorusSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactorusSUN) (proc)) (factor) )
+/* glFragmentLightModelfSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightModelfSGIX) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glFragmentLightModelfSGIX (void);
+#define      gdk_gl_glFragmentLightModelfSGIX(proc, pname, param) \
+  ( ((GdkGLProc_glFragmentLightModelfSGIX) (proc)) (pname, param) )
 
-/* glGlobalAlphaFactoruiSUN */
-typedef void (APIENTRY * GdkGLProc_glGlobalAlphaFactoruiSUN) (GLuint factor);
-GdkGLProc    gdk_gl_get_glGlobalAlphaFactoruiSUN (void);
-#define      gdk_gl_glGlobalAlphaFactoruiSUN(proc, factor) \
-  ( ((GdkGLProc_glGlobalAlphaFactoruiSUN) (proc)) (factor) )
+/* glFragmentLightModelfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightModelfvSGIX) (GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glFragmentLightModelfvSGIX (void);
+#define      gdk_gl_glFragmentLightModelfvSGIX(proc, pname, params) \
+  ( ((GdkGLProc_glFragmentLightModelfvSGIX) (proc)) (pname, params) )
 
-/* proc struct */
+/* glFragmentLightModeliSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightModeliSGIX) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glFragmentLightModeliSGIX (void);
+#define      gdk_gl_glFragmentLightModeliSGIX(proc, pname, param) \
+  ( ((GdkGLProc_glFragmentLightModeliSGIX) (proc)) (pname, param) )
 
-typedef struct _GdkGL_GL_SUN_global_alpha GdkGL_GL_SUN_global_alpha;
+/* glFragmentLightModelivSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentLightModelivSGIX) (GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glFragmentLightModelivSGIX (void);
+#define      gdk_gl_glFragmentLightModelivSGIX(proc, pname, params) \
+  ( ((GdkGLProc_glFragmentLightModelivSGIX) (proc)) (pname, params) )
 
-struct _GdkGL_GL_SUN_global_alpha
-{
-  GdkGLProc_glGlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN;
-  GdkGLProc_glGlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN;
-  GdkGLProc_glGlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN;
-  GdkGLProc_glGlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN;
-  GdkGLProc_glGlobalAlphaFactordSUN glGlobalAlphaFactordSUN;
-  GdkGLProc_glGlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN;
-  GdkGLProc_glGlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN;
-  GdkGLProc_glGlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN;
-};
-
-GdkGL_GL_SUN_global_alpha *gdk_gl_get_GL_SUN_global_alpha (void);
+/* glFragmentMaterialfSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentMaterialfSGIX) (GLenum face, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glFragmentMaterialfSGIX (void);
+#define      gdk_gl_glFragmentMaterialfSGIX(proc, face, pname, param) \
+  ( ((GdkGLProc_glFragmentMaterialfSGIX) (proc)) (face, pname, param) )
 
-/*
- * GL_SUN_triangle_list
- */
+/* glFragmentMaterialfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentMaterialfvSGIX) (GLenum face, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glFragmentMaterialfvSGIX (void);
+#define      gdk_gl_glFragmentMaterialfvSGIX(proc, face, pname, params) \
+  ( ((GdkGLProc_glFragmentMaterialfvSGIX) (proc)) (face, pname, params) )
 
-/* glReplacementCodeuiSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiSUN) (GLuint code);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiSUN (void);
-#define      gdk_gl_glReplacementCodeuiSUN(proc, code) \
-  ( ((GdkGLProc_glReplacementCodeuiSUN) (proc)) (code) )
+/* glFragmentMaterialiSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentMaterialiSGIX) (GLenum face, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glFragmentMaterialiSGIX (void);
+#define      gdk_gl_glFragmentMaterialiSGIX(proc, face, pname, param) \
+  ( ((GdkGLProc_glFragmentMaterialiSGIX) (proc)) (face, pname, param) )
 
-/* glReplacementCodeusSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeusSUN) (GLushort code);
-GdkGLProc    gdk_gl_get_glReplacementCodeusSUN (void);
-#define      gdk_gl_glReplacementCodeusSUN(proc, code) \
-  ( ((GdkGLProc_glReplacementCodeusSUN) (proc)) (code) )
+/* glFragmentMaterialivSGIX */
+typedef void (APIENTRYP GdkGLProc_glFragmentMaterialivSGIX) (GLenum face, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glFragmentMaterialivSGIX (void);
+#define      gdk_gl_glFragmentMaterialivSGIX(proc, face, pname, params) \
+  ( ((GdkGLProc_glFragmentMaterialivSGIX) (proc)) (face, pname, params) )
 
-/* glReplacementCodeubSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeubSUN) (GLubyte code);
-GdkGLProc    gdk_gl_get_glReplacementCodeubSUN (void);
-#define      gdk_gl_glReplacementCodeubSUN(proc, code) \
-  ( ((GdkGLProc_glReplacementCodeubSUN) (proc)) (code) )
+/* glGetFragmentLightfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glGetFragmentLightfvSGIX) (GLenum light, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetFragmentLightfvSGIX (void);
+#define      gdk_gl_glGetFragmentLightfvSGIX(proc, light, pname, params) \
+  ( ((GdkGLProc_glGetFragmentLightfvSGIX) (proc)) (light, pname, params) )
 
-/* glReplacementCodeuivSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuivSUN) (const GLuint *code);
-GdkGLProc    gdk_gl_get_glReplacementCodeuivSUN (void);
-#define      gdk_gl_glReplacementCodeuivSUN(proc, code) \
-  ( ((GdkGLProc_glReplacementCodeuivSUN) (proc)) (code) )
+/* glGetFragmentLightivSGIX */
+typedef void (APIENTRYP GdkGLProc_glGetFragmentLightivSGIX) (GLenum light, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetFragmentLightivSGIX (void);
+#define      gdk_gl_glGetFragmentLightivSGIX(proc, light, pname, params) \
+  ( ((GdkGLProc_glGetFragmentLightivSGIX) (proc)) (light, pname, params) )
 
-/* glReplacementCodeusvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeusvSUN) (const GLushort *code);
-GdkGLProc    gdk_gl_get_glReplacementCodeusvSUN (void);
-#define      gdk_gl_glReplacementCodeusvSUN(proc, code) \
-  ( ((GdkGLProc_glReplacementCodeusvSUN) (proc)) (code) )
+/* glGetFragmentMaterialfvSGIX */
+typedef void (APIENTRYP GdkGLProc_glGetFragmentMaterialfvSGIX) (GLenum face, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetFragmentMaterialfvSGIX (void);
+#define      gdk_gl_glGetFragmentMaterialfvSGIX(proc, face, pname, params) \
+  ( ((GdkGLProc_glGetFragmentMaterialfvSGIX) (proc)) (face, pname, params) )
 
-/* glReplacementCodeubvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeubvSUN) (const GLubyte *code);
-GdkGLProc    gdk_gl_get_glReplacementCodeubvSUN (void);
-#define      gdk_gl_glReplacementCodeubvSUN(proc, code) \
-  ( ((GdkGLProc_glReplacementCodeubvSUN) (proc)) (code) )
+/* glGetFragmentMaterialivSGIX */
+typedef void (APIENTRYP GdkGLProc_glGetFragmentMaterialivSGIX) (GLenum face, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetFragmentMaterialivSGIX (void);
+#define      gdk_gl_glGetFragmentMaterialivSGIX(proc, face, pname, params) \
+  ( ((GdkGLProc_glGetFragmentMaterialivSGIX) (proc)) (face, pname, params) )
 
-/* glReplacementCodePointerSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodePointerSUN) (GLenum type, GLsizei stride, const GLvoid* *pointer);
-GdkGLProc    gdk_gl_get_glReplacementCodePointerSUN (void);
-#define      gdk_gl_glReplacementCodePointerSUN(proc, type, stride, pointer) \
-  ( ((GdkGLProc_glReplacementCodePointerSUN) (proc)) (type, stride, pointer) )
+/* glLightEnviSGIX */
+typedef void (APIENTRYP GdkGLProc_glLightEnviSGIX) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glLightEnviSGIX (void);
+#define      gdk_gl_glLightEnviSGIX(proc, pname, param) \
+  ( ((GdkGLProc_glLightEnviSGIX) (proc)) (pname, param) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SUN_triangle_list GdkGL_GL_SUN_triangle_list;
+typedef struct _GdkGL_GL_SGIX_fragment_lighting GdkGL_GL_SGIX_fragment_lighting;
 
-struct _GdkGL_GL_SUN_triangle_list
+struct _GdkGL_GL_SGIX_fragment_lighting
 {
-  GdkGLProc_glReplacementCodeuiSUN glReplacementCodeuiSUN;
-  GdkGLProc_glReplacementCodeusSUN glReplacementCodeusSUN;
-  GdkGLProc_glReplacementCodeubSUN glReplacementCodeubSUN;
-  GdkGLProc_glReplacementCodeuivSUN glReplacementCodeuivSUN;
-  GdkGLProc_glReplacementCodeusvSUN glReplacementCodeusvSUN;
-  GdkGLProc_glReplacementCodeubvSUN glReplacementCodeubvSUN;
-  GdkGLProc_glReplacementCodePointerSUN glReplacementCodePointerSUN;
+  GdkGLProc_glFragmentColorMaterialSGIX glFragmentColorMaterialSGIX;
+  GdkGLProc_glFragmentLightfSGIX glFragmentLightfSGIX;
+  GdkGLProc_glFragmentLightfvSGIX glFragmentLightfvSGIX;
+  GdkGLProc_glFragmentLightiSGIX glFragmentLightiSGIX;
+  GdkGLProc_glFragmentLightivSGIX glFragmentLightivSGIX;
+  GdkGLProc_glFragmentLightModelfSGIX glFragmentLightModelfSGIX;
+  GdkGLProc_glFragmentLightModelfvSGIX glFragmentLightModelfvSGIX;
+  GdkGLProc_glFragmentLightModeliSGIX glFragmentLightModeliSGIX;
+  GdkGLProc_glFragmentLightModelivSGIX glFragmentLightModelivSGIX;
+  GdkGLProc_glFragmentMaterialfSGIX glFragmentMaterialfSGIX;
+  GdkGLProc_glFragmentMaterialfvSGIX glFragmentMaterialfvSGIX;
+  GdkGLProc_glFragmentMaterialiSGIX glFragmentMaterialiSGIX;
+  GdkGLProc_glFragmentMaterialivSGIX glFragmentMaterialivSGIX;
+  GdkGLProc_glGetFragmentLightfvSGIX glGetFragmentLightfvSGIX;
+  GdkGLProc_glGetFragmentLightivSGIX glGetFragmentLightivSGIX;
+  GdkGLProc_glGetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX;
+  GdkGLProc_glGetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX;
+  GdkGLProc_glLightEnviSGIX glLightEnviSGIX;
 };
 
-GdkGL_GL_SUN_triangle_list *gdk_gl_get_GL_SUN_triangle_list (void);
+GdkGL_GL_SGIX_fragment_lighting *gdk_gl_get_GL_SGIX_fragment_lighting (void);
 
 /*
- * GL_SUN_vertex
+ * GL_EXT_draw_range_elements
  */
 
-/* glColor4ubVertex2fSUN */
-typedef void (APIENTRY * GdkGLProc_glColor4ubVertex2fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
-GdkGLProc    gdk_gl_get_glColor4ubVertex2fSUN (void);
-#define      gdk_gl_glColor4ubVertex2fSUN(proc, r, g, b, a, x, y) \
-  ( ((GdkGLProc_glColor4ubVertex2fSUN) (proc)) (r, g, b, a, x, y) )
+/* glDrawRangeElementsEXT */
+typedef void (APIENTRYP GdkGLProc_glDrawRangeElementsEXT) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+GdkGLProc    gdk_gl_get_glDrawRangeElementsEXT (void);
+#define      gdk_gl_glDrawRangeElementsEXT(proc, mode, start, end, count, type, indices) \
+  ( ((GdkGLProc_glDrawRangeElementsEXT) (proc)) (mode, start, end, count, type, indices) )
 
-/* glColor4ubVertex2fvSUN */
-typedef void (APIENTRY * GdkGLProc_glColor4ubVertex2fvSUN) (const GLubyte *c, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glColor4ubVertex2fvSUN (void);
-#define      gdk_gl_glColor4ubVertex2fvSUN(proc, c, v) \
-  ( ((GdkGLProc_glColor4ubVertex2fvSUN) (proc)) (c, v) )
+/* proc struct */
 
-/* glColor4ubVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glColor4ubVertex3fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glColor4ubVertex3fSUN (void);
-#define      gdk_gl_glColor4ubVertex3fSUN(proc, r, g, b, a, x, y, z) \
-  ( ((GdkGLProc_glColor4ubVertex3fSUN) (proc)) (r, g, b, a, x, y, z) )
+typedef struct _GdkGL_GL_EXT_draw_range_elements GdkGL_GL_EXT_draw_range_elements;
 
-/* glColor4ubVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glColor4ubVertex3fvSUN) (const GLubyte *c, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glColor4ubVertex3fvSUN (void);
-#define      gdk_gl_glColor4ubVertex3fvSUN(proc, c, v) \
-  ( ((GdkGLProc_glColor4ubVertex3fvSUN) (proc)) (c, v) )
+struct _GdkGL_GL_EXT_draw_range_elements
+{
+  GdkGLProc_glDrawRangeElementsEXT glDrawRangeElementsEXT;
+};
 
-/* glColor3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glColor3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glColor3fVertex3fSUN (void);
-#define      gdk_gl_glColor3fVertex3fSUN(proc, r, g, b, x, y, z) \
-  ( ((GdkGLProc_glColor3fVertex3fSUN) (proc)) (r, g, b, x, y, z) )
+GdkGL_GL_EXT_draw_range_elements *gdk_gl_get_GL_EXT_draw_range_elements (void);
 
-/* glColor3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glColor3fVertex3fvSUN) (const GLfloat *c, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glColor3fVertex3fvSUN (void);
-#define      gdk_gl_glColor3fVertex3fvSUN(proc, c, v) \
-  ( ((GdkGLProc_glColor3fVertex3fvSUN) (proc)) (c, v) )
+/*
+ * GL_EXT_light_texture
+ */
 
-/* glNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glNormal3fVertex3fSUN) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glNormal3fVertex3fSUN (void);
-#define      gdk_gl_glNormal3fVertex3fSUN(proc, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glNormal3fVertex3fSUN) (proc)) (nx, ny, nz, x, y, z) )
+/* glApplyTextureEXT */
+typedef void (APIENTRYP GdkGLProc_glApplyTextureEXT) (GLenum mode);
+GdkGLProc    gdk_gl_get_glApplyTextureEXT (void);
+#define      gdk_gl_glApplyTextureEXT(proc, mode) \
+  ( ((GdkGLProc_glApplyTextureEXT) (proc)) (mode) )
 
-/* glNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glNormal3fVertex3fvSUN) (const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glNormal3fVertex3fvSUN(proc, n, v) \
-  ( ((GdkGLProc_glNormal3fVertex3fvSUN) (proc)) (n, v) )
+/* glTextureLightEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureLightEXT) (GLenum pname);
+GdkGLProc    gdk_gl_get_glTextureLightEXT (void);
+#define      gdk_gl_glTextureLightEXT(proc, pname) \
+  ( ((GdkGLProc_glTextureLightEXT) (proc)) (pname) )
 
-/* glColor4fNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glColor4fNormal3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glColor4fNormal3fVertex3fSUN (void);
-#define      gdk_gl_glColor4fNormal3fVertex3fSUN(proc, r, g, b, a, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glColor4fNormal3fVertex3fSUN) (proc)) (r, g, b, a, nx, ny, nz, x, y, z) )
+/* glTextureMaterialEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureMaterialEXT) (GLenum face, GLenum mode);
+GdkGLProc    gdk_gl_get_glTextureMaterialEXT (void);
+#define      gdk_gl_glTextureMaterialEXT(proc, face, mode) \
+  ( ((GdkGLProc_glTextureMaterialEXT) (proc)) (face, mode) )
 
-/* glColor4fNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glColor4fNormal3fVertex3fvSUN) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glColor4fNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glColor4fNormal3fVertex3fvSUN(proc, c, n, v) \
-  ( ((GdkGLProc_glColor4fNormal3fVertex3fvSUN) (proc)) (c, n, v) )
+/* proc struct */
 
-/* glTexCoord2fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glTexCoord2fVertex3fSUN (void);
-#define      gdk_gl_glTexCoord2fVertex3fSUN(proc, s, t, x, y, z) \
-  ( ((GdkGLProc_glTexCoord2fVertex3fSUN) (proc)) (s, t, x, y, z) )
+typedef struct _GdkGL_GL_EXT_light_texture GdkGL_GL_EXT_light_texture;
 
-/* glTexCoord2fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fVertex3fvSUN) (const GLfloat *tc, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTexCoord2fVertex3fvSUN (void);
-#define      gdk_gl_glTexCoord2fVertex3fvSUN(proc, tc, v) \
-  ( ((GdkGLProc_glTexCoord2fVertex3fvSUN) (proc)) (tc, v) )
+struct _GdkGL_GL_EXT_light_texture
+{
+  GdkGLProc_glApplyTextureEXT glApplyTextureEXT;
+  GdkGLProc_glTextureLightEXT glTextureLightEXT;
+  GdkGLProc_glTextureMaterialEXT glTextureMaterialEXT;
+};
 
-/* glTexCoord4fVertex4fSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord4fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GdkGLProc    gdk_gl_get_glTexCoord4fVertex4fSUN (void);
-#define      gdk_gl_glTexCoord4fVertex4fSUN(proc, s, t, p, q, x, y, z, w) \
-  ( ((GdkGLProc_glTexCoord4fVertex4fSUN) (proc)) (s, t, p, q, x, y, z, w) )
+GdkGL_GL_EXT_light_texture *gdk_gl_get_GL_EXT_light_texture (void);
 
-/* glTexCoord4fVertex4fvSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord4fVertex4fvSUN) (const GLfloat *tc, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTexCoord4fVertex4fvSUN (void);
-#define      gdk_gl_glTexCoord4fVertex4fvSUN(proc, tc, v) \
-  ( ((GdkGLProc_glTexCoord4fVertex4fvSUN) (proc)) (tc, v) )
+/*
+ * GL_SGIX_async
+ */
 
-/* glTexCoord2fColor4ubVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN (void);
-#define      gdk_gl_glTexCoord2fColor4ubVertex3fSUN(proc, s, t, r, g, b, a, x, y, z) \
-  ( ((GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) (proc)) (s, t, r, g, b, a, x, y, z) )
+/* glAsyncMarkerSGIX */
+typedef void (APIENTRYP GdkGLProc_glAsyncMarkerSGIX) (GLuint marker);
+GdkGLProc    gdk_gl_get_glAsyncMarkerSGIX (void);
+#define      gdk_gl_glAsyncMarkerSGIX(proc, marker) \
+  ( ((GdkGLProc_glAsyncMarkerSGIX) (proc)) (marker) )
 
-/* glTexCoord2fColor4ubVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN (void);
-#define      gdk_gl_glTexCoord2fColor4ubVertex3fvSUN(proc, tc, c, v) \
-  ( ((GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) (proc)) (tc, c, v) )
+/* glFinishAsyncSGIX */
+typedef GLint (APIENTRYP GdkGLProc_glFinishAsyncSGIX) (GLuint *markerp);
+GdkGLProc    gdk_gl_get_glFinishAsyncSGIX (void);
+#define      gdk_gl_glFinishAsyncSGIX(proc, markerp) \
+  ( ((GdkGLProc_glFinishAsyncSGIX) (proc)) (markerp) )
 
-/* glTexCoord2fColor3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fColor3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glTexCoord2fColor3fVertex3fSUN (void);
-#define      gdk_gl_glTexCoord2fColor3fVertex3fSUN(proc, s, t, r, g, b, x, y, z) \
-  ( ((GdkGLProc_glTexCoord2fColor3fVertex3fSUN) (proc)) (s, t, r, g, b, x, y, z) )
+/* glPollAsyncSGIX */
+typedef GLint (APIENTRYP GdkGLProc_glPollAsyncSGIX) (GLuint *markerp);
+GdkGLProc    gdk_gl_get_glPollAsyncSGIX (void);
+#define      gdk_gl_glPollAsyncSGIX(proc, markerp) \
+  ( ((GdkGLProc_glPollAsyncSGIX) (proc)) (markerp) )
 
-/* glTexCoord2fColor3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN (void);
-#define      gdk_gl_glTexCoord2fColor3fVertex3fvSUN(proc, tc, c, v) \
-  ( ((GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) (proc)) (tc, c, v) )
+/* glGenAsyncMarkersSGIX */
+typedef GLuint (APIENTRYP GdkGLProc_glGenAsyncMarkersSGIX) (GLsizei range);
+GdkGLProc    gdk_gl_get_glGenAsyncMarkersSGIX (void);
+#define      gdk_gl_glGenAsyncMarkersSGIX(proc, range) \
+  ( ((GdkGLProc_glGenAsyncMarkersSGIX) (proc)) (range) )
 
-/* glTexCoord2fNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN (void);
-#define      gdk_gl_glTexCoord2fNormal3fVertex3fSUN(proc, s, t, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) (proc)) (s, t, nx, ny, nz, x, y, z) )
+/* glDeleteAsyncMarkersSGIX */
+typedef void (APIENTRYP GdkGLProc_glDeleteAsyncMarkersSGIX) (GLuint marker, GLsizei range);
+GdkGLProc    gdk_gl_get_glDeleteAsyncMarkersSGIX (void);
+#define      gdk_gl_glDeleteAsyncMarkersSGIX(proc, marker, range) \
+  ( ((GdkGLProc_glDeleteAsyncMarkersSGIX) (proc)) (marker, range) )
 
-/* glTexCoord2fNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glTexCoord2fNormal3fVertex3fvSUN(proc, tc, n, v) \
-  ( ((GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) (proc)) (tc, n, v) )
-
-/* glTexCoord2fColor4fNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN (void);
-#define      gdk_gl_glTexCoord2fColor4fNormal3fVertex3fSUN(proc, s, t, r, g, b, a, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) (proc)) (s, t, r, g, b, a, nx, ny, nz, x, y, z) )
-
-/* glTexCoord2fColor4fNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glTexCoord2fColor4fNormal3fVertex3fvSUN(proc, tc, c, n, v) \
-  ( ((GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) (proc)) (tc, c, n, v) )
-
-/* glTexCoord4fColor4fNormal3fVertex4fSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GdkGLProc    gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN (void);
-#define      gdk_gl_glTexCoord4fColor4fNormal3fVertex4fSUN(proc, s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) \
-  ( ((GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) (proc)) (s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) )
-
-/* glTexCoord4fColor4fNormal3fVertex4fvSUN */
-typedef void (APIENTRY * GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN (void);
-#define      gdk_gl_glTexCoord4fColor4fNormal3fVertex4fvSUN(proc, tc, c, n, v) \
-  ( ((GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) (proc)) (tc, c, n, v) )
-
-/* glReplacementCodeuiVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiVertex3fSUN) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiVertex3fSUN(proc, rc, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiVertex3fSUN) (proc)) (rc, x, y, z) )
-
-/* glReplacementCodeuiVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiVertex3fvSUN) (const GLuint *rc, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiVertex3fvSUN(proc, rc, v) \
-  ( ((GdkGLProc_glReplacementCodeuiVertex3fvSUN) (proc)) (rc, v) )
-
-/* glReplacementCodeuiColor4ubVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiColor4ubVertex3fSUN(proc, rc, r, g, b, a, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) (proc)) (rc, r, g, b, a, x, y, z) )
-
-/* glReplacementCodeuiColor4ubVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiColor4ubVertex3fvSUN(proc, rc, c, v) \
-  ( ((GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) (proc)) (rc, c, v) )
-
-/* glReplacementCodeuiColor3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiColor3fVertex3fSUN(proc, rc, r, g, b, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) (proc)) (rc, r, g, b, x, y, z) )
-
-/* glReplacementCodeuiColor3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiColor3fVertex3fvSUN(proc, rc, c, v) \
-  ( ((GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) (proc)) (rc, c, v) )
-
-/* glReplacementCodeuiNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiNormal3fVertex3fSUN(proc, rc, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) (proc)) (rc, nx, ny, nz, x, y, z) )
-
-/* glReplacementCodeuiNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiNormal3fVertex3fvSUN(proc, rc, n, v) \
-  ( ((GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) (proc)) (rc, n, v) )
-
-/* glReplacementCodeuiColor4fNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiColor4fNormal3fVertex3fSUN(proc, rc, r, g, b, a, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) (proc)) (rc, r, g, b, a, nx, ny, nz, x, y, z) )
-
-/* glReplacementCodeuiColor4fNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(proc, rc, c, n, v) \
-  ( ((GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) (proc)) (rc, c, n, v) )
-
-/* glReplacementCodeuiTexCoord2fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiTexCoord2fVertex3fSUN(proc, rc, s, t, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) (proc)) (rc, s, t, x, y, z) )
-
-/* glReplacementCodeuiTexCoord2fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiTexCoord2fVertex3fvSUN(proc, rc, tc, v) \
-  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) (proc)) (rc, tc, v) )
-
-/* glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(proc, rc, s, t, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) (proc)) (rc, s, t, nx, ny, nz, x, y, z) )
-
-/* glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(proc, rc, tc, n, v) \
-  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) (proc)) (rc, tc, n, v) )
-
-/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (void);
-#define      gdk_gl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(proc, rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) \
-  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) (proc)) (rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) )
-
-/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN */
-typedef void (APIENTRY * GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (void);
-#define      gdk_gl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(proc, rc, tc, c, n, v) \
-  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) (proc)) (rc, tc, c, n, v) )
+/* glIsAsyncMarkerSGIX */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsAsyncMarkerSGIX) (GLuint marker);
+GdkGLProc    gdk_gl_get_glIsAsyncMarkerSGIX (void);
+#define      gdk_gl_glIsAsyncMarkerSGIX(proc, marker) \
+  ( ((GdkGLProc_glIsAsyncMarkerSGIX) (proc)) (marker) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SUN_vertex GdkGL_GL_SUN_vertex;
+typedef struct _GdkGL_GL_SGIX_async GdkGL_GL_SGIX_async;
 
-struct _GdkGL_GL_SUN_vertex
+struct _GdkGL_GL_SGIX_async
 {
-  GdkGLProc_glColor4ubVertex2fSUN glColor4ubVertex2fSUN;
-  GdkGLProc_glColor4ubVertex2fvSUN glColor4ubVertex2fvSUN;
-  GdkGLProc_glColor4ubVertex3fSUN glColor4ubVertex3fSUN;
-  GdkGLProc_glColor4ubVertex3fvSUN glColor4ubVertex3fvSUN;
-  GdkGLProc_glColor3fVertex3fSUN glColor3fVertex3fSUN;
-  GdkGLProc_glColor3fVertex3fvSUN glColor3fVertex3fvSUN;
-  GdkGLProc_glNormal3fVertex3fSUN glNormal3fVertex3fSUN;
-  GdkGLProc_glNormal3fVertex3fvSUN glNormal3fVertex3fvSUN;
-  GdkGLProc_glColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN;
-  GdkGLProc_glColor4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN;
-  GdkGLProc_glTexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN;
-  GdkGLProc_glTexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN;
-  GdkGLProc_glTexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN;
-  GdkGLProc_glTexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN;
-  GdkGLProc_glTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN;
-  GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN;
-  GdkGLProc_glTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN;
-  GdkGLProc_glTexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN;
-  GdkGLProc_glTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN;
-  GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN;
-  GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN;
-  GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN;
-  GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN;
-  GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN;
-  GdkGLProc_glReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN;
-  GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN;
-  GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN;
-  GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN;
-  GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
-  GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN;
-  GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
-  GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
-  GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
+  GdkGLProc_glAsyncMarkerSGIX glAsyncMarkerSGIX;
+  GdkGLProc_glFinishAsyncSGIX glFinishAsyncSGIX;
+  GdkGLProc_glPollAsyncSGIX glPollAsyncSGIX;
+  GdkGLProc_glGenAsyncMarkersSGIX glGenAsyncMarkersSGIX;
+  GdkGLProc_glDeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX;
+  GdkGLProc_glIsAsyncMarkerSGIX glIsAsyncMarkerSGIX;
 };
 
-GdkGL_GL_SUN_vertex *gdk_gl_get_GL_SUN_vertex (void);
+GdkGL_GL_SGIX_async *gdk_gl_get_GL_SGIX_async (void);
 
 /*
- * GL_EXT_blend_func_separate
+ * GL_INTEL_parallel_arrays
  */
 
-/* glBlendFuncSeparateEXT */
-typedef void (APIENTRY * GdkGLProc_glBlendFuncSeparateEXT) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
-GdkGLProc    gdk_gl_get_glBlendFuncSeparateEXT (void);
-#define      gdk_gl_glBlendFuncSeparateEXT(proc, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) \
-  ( ((GdkGLProc_glBlendFuncSeparateEXT) (proc)) (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) )
-
-/* proc struct */
-
-typedef struct _GdkGL_GL_EXT_blend_func_separate GdkGL_GL_EXT_blend_func_separate;
-
-struct _GdkGL_GL_EXT_blend_func_separate
-{
-  GdkGLProc_glBlendFuncSeparateEXT glBlendFuncSeparateEXT;
-};
+/* glVertexPointervINTEL */
+typedef void (APIENTRYP GdkGLProc_glVertexPointervINTEL) (GLint size, GLenum type, const GLvoid* *pointer);
+GdkGLProc    gdk_gl_get_glVertexPointervINTEL (void);
+#define      gdk_gl_glVertexPointervINTEL(proc, size, type, pointer) \
+  ( ((GdkGLProc_glVertexPointervINTEL) (proc)) (size, type, pointer) )
 
-GdkGL_GL_EXT_blend_func_separate *gdk_gl_get_GL_EXT_blend_func_separate (void);
+/* glNormalPointervINTEL */
+typedef void (APIENTRYP GdkGLProc_glNormalPointervINTEL) (GLenum type, const GLvoid* *pointer);
+GdkGLProc    gdk_gl_get_glNormalPointervINTEL (void);
+#define      gdk_gl_glNormalPointervINTEL(proc, type, pointer) \
+  ( ((GdkGLProc_glNormalPointervINTEL) (proc)) (type, pointer) )
 
-/*
- * GL_INGR_blend_func_separate
- */
+/* glColorPointervINTEL */
+typedef void (APIENTRYP GdkGLProc_glColorPointervINTEL) (GLint size, GLenum type, const GLvoid* *pointer);
+GdkGLProc    gdk_gl_get_glColorPointervINTEL (void);
+#define      gdk_gl_glColorPointervINTEL(proc, size, type, pointer) \
+  ( ((GdkGLProc_glColorPointervINTEL) (proc)) (size, type, pointer) )
 
-/* glBlendFuncSeparateINGR */
-typedef void (APIENTRY * GdkGLProc_glBlendFuncSeparateINGR) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
-GdkGLProc    gdk_gl_get_glBlendFuncSeparateINGR (void);
-#define      gdk_gl_glBlendFuncSeparateINGR(proc, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) \
-  ( ((GdkGLProc_glBlendFuncSeparateINGR) (proc)) (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) )
+/* glTexCoordPointervINTEL */
+typedef void (APIENTRYP GdkGLProc_glTexCoordPointervINTEL) (GLint size, GLenum type, const GLvoid* *pointer);
+GdkGLProc    gdk_gl_get_glTexCoordPointervINTEL (void);
+#define      gdk_gl_glTexCoordPointervINTEL(proc, size, type, pointer) \
+  ( ((GdkGLProc_glTexCoordPointervINTEL) (proc)) (size, type, pointer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_INGR_blend_func_separate GdkGL_GL_INGR_blend_func_separate;
+typedef struct _GdkGL_GL_INTEL_parallel_arrays GdkGL_GL_INTEL_parallel_arrays;
 
-struct _GdkGL_GL_INGR_blend_func_separate
+struct _GdkGL_GL_INTEL_parallel_arrays
 {
-  GdkGLProc_glBlendFuncSeparateINGR glBlendFuncSeparateINGR;
+  GdkGLProc_glVertexPointervINTEL glVertexPointervINTEL;
+  GdkGLProc_glNormalPointervINTEL glNormalPointervINTEL;
+  GdkGLProc_glColorPointervINTEL glColorPointervINTEL;
+  GdkGLProc_glTexCoordPointervINTEL glTexCoordPointervINTEL;
 };
 
-GdkGL_GL_INGR_blend_func_separate *gdk_gl_get_GL_INGR_blend_func_separate (void);
+GdkGL_GL_INTEL_parallel_arrays *gdk_gl_get_GL_INTEL_parallel_arrays (void);
 
 /*
- * GL_EXT_vertex_weighting
+ * GL_EXT_pixel_transform
  */
 
-/* glVertexWeightfEXT */
-typedef void (APIENTRY * GdkGLProc_glVertexWeightfEXT) (GLfloat weight);
-GdkGLProc    gdk_gl_get_glVertexWeightfEXT (void);
-#define      gdk_gl_glVertexWeightfEXT(proc, weight) \
-  ( ((GdkGLProc_glVertexWeightfEXT) (proc)) (weight) )
+/* glPixelTransformParameteriEXT */
+typedef void (APIENTRYP GdkGLProc_glPixelTransformParameteriEXT) (GLenum target, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glPixelTransformParameteriEXT (void);
+#define      gdk_gl_glPixelTransformParameteriEXT(proc, target, pname, param) \
+  ( ((GdkGLProc_glPixelTransformParameteriEXT) (proc)) (target, pname, param) )
 
-/* glVertexWeightfvEXT */
-typedef void (APIENTRY * GdkGLProc_glVertexWeightfvEXT) (const GLfloat *weight);
-GdkGLProc    gdk_gl_get_glVertexWeightfvEXT (void);
-#define      gdk_gl_glVertexWeightfvEXT(proc, weight) \
-  ( ((GdkGLProc_glVertexWeightfvEXT) (proc)) (weight) )
+/* glPixelTransformParameterfEXT */
+typedef void (APIENTRYP GdkGLProc_glPixelTransformParameterfEXT) (GLenum target, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glPixelTransformParameterfEXT (void);
+#define      gdk_gl_glPixelTransformParameterfEXT(proc, target, pname, param) \
+  ( ((GdkGLProc_glPixelTransformParameterfEXT) (proc)) (target, pname, param) )
 
-/* glVertexWeightPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glVertexWeightPointerEXT) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glVertexWeightPointerEXT (void);
-#define      gdk_gl_glVertexWeightPointerEXT(proc, size, type, stride, pointer) \
-  ( ((GdkGLProc_glVertexWeightPointerEXT) (proc)) (size, type, stride, pointer) )
+/* glPixelTransformParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glPixelTransformParameterivEXT) (GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glPixelTransformParameterivEXT (void);
+#define      gdk_gl_glPixelTransformParameterivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glPixelTransformParameterivEXT) (proc)) (target, pname, params) )
+
+/* glPixelTransformParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glPixelTransformParameterfvEXT) (GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glPixelTransformParameterfvEXT (void);
+#define      gdk_gl_glPixelTransformParameterfvEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glPixelTransformParameterfvEXT) (proc)) (target, pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_vertex_weighting GdkGL_GL_EXT_vertex_weighting;
+typedef struct _GdkGL_GL_EXT_pixel_transform GdkGL_GL_EXT_pixel_transform;
 
-struct _GdkGL_GL_EXT_vertex_weighting
+struct _GdkGL_GL_EXT_pixel_transform
 {
-  GdkGLProc_glVertexWeightfEXT glVertexWeightfEXT;
-  GdkGLProc_glVertexWeightfvEXT glVertexWeightfvEXT;
-  GdkGLProc_glVertexWeightPointerEXT glVertexWeightPointerEXT;
+  GdkGLProc_glPixelTransformParameteriEXT glPixelTransformParameteriEXT;
+  GdkGLProc_glPixelTransformParameterfEXT glPixelTransformParameterfEXT;
+  GdkGLProc_glPixelTransformParameterivEXT glPixelTransformParameterivEXT;
+  GdkGLProc_glPixelTransformParameterfvEXT glPixelTransformParameterfvEXT;
 };
 
-GdkGL_GL_EXT_vertex_weighting *gdk_gl_get_GL_EXT_vertex_weighting (void);
+GdkGL_GL_EXT_pixel_transform *gdk_gl_get_GL_EXT_pixel_transform (void);
 
 /*
- * GL_NV_vertex_array_range
+ * GL_EXT_secondary_color
  */
 
-/* glFlushVertexArrayRangeNV */
-typedef void (APIENTRY * GdkGLProc_glFlushVertexArrayRangeNV) (void);
-GdkGLProc    gdk_gl_get_glFlushVertexArrayRangeNV (void);
-#define      gdk_gl_glFlushVertexArrayRangeNV(proc) \
-  ( ((GdkGLProc_glFlushVertexArrayRangeNV) (proc)) () )
+/* glSecondaryColor3bEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3bEXT) (GLbyte red, GLbyte green, GLbyte blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3bEXT (void);
+#define      gdk_gl_glSecondaryColor3bEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3bEXT) (proc)) (red, green, blue) )
 
-/* glVertexArrayRangeNV */
-typedef void (APIENTRY * GdkGLProc_glVertexArrayRangeNV) (GLsizei length, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glVertexArrayRangeNV (void);
-#define      gdk_gl_glVertexArrayRangeNV(proc, length, pointer) \
-  ( ((GdkGLProc_glVertexArrayRangeNV) (proc)) (length, pointer) )
-
-/* proc struct */
-
-typedef struct _GdkGL_GL_NV_vertex_array_range GdkGL_GL_NV_vertex_array_range;
-
-struct _GdkGL_GL_NV_vertex_array_range
-{
-  GdkGLProc_glFlushVertexArrayRangeNV glFlushVertexArrayRangeNV;
-  GdkGLProc_glVertexArrayRangeNV glVertexArrayRangeNV;
-};
+/* glSecondaryColor3bvEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3bvEXT) (const GLbyte *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3bvEXT (void);
+#define      gdk_gl_glSecondaryColor3bvEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3bvEXT) (proc)) (v) )
 
-GdkGL_GL_NV_vertex_array_range *gdk_gl_get_GL_NV_vertex_array_range (void);
+/* glSecondaryColor3dEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3dEXT) (GLdouble red, GLdouble green, GLdouble blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3dEXT (void);
+#define      gdk_gl_glSecondaryColor3dEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3dEXT) (proc)) (red, green, blue) )
 
-/*
- * GL_NV_register_combiners
- */
+/* glSecondaryColor3dvEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3dvEXT) (const GLdouble *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3dvEXT (void);
+#define      gdk_gl_glSecondaryColor3dvEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3dvEXT) (proc)) (v) )
 
-/* glCombinerParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glCombinerParameterfvNV) (GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glCombinerParameterfvNV (void);
-#define      gdk_gl_glCombinerParameterfvNV(proc, pname, params) \
-  ( ((GdkGLProc_glCombinerParameterfvNV) (proc)) (pname, params) )
+/* glSecondaryColor3fEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3fEXT) (GLfloat red, GLfloat green, GLfloat blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3fEXT (void);
+#define      gdk_gl_glSecondaryColor3fEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3fEXT) (proc)) (red, green, blue) )
 
-/* glCombinerParameterfNV */
-typedef void (APIENTRY * GdkGLProc_glCombinerParameterfNV) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glCombinerParameterfNV (void);
-#define      gdk_gl_glCombinerParameterfNV(proc, pname, param) \
-  ( ((GdkGLProc_glCombinerParameterfNV) (proc)) (pname, param) )
+/* glSecondaryColor3fvEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3fvEXT) (const GLfloat *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3fvEXT (void);
+#define      gdk_gl_glSecondaryColor3fvEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3fvEXT) (proc)) (v) )
 
-/* glCombinerParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glCombinerParameterivNV) (GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glCombinerParameterivNV (void);
-#define      gdk_gl_glCombinerParameterivNV(proc, pname, params) \
-  ( ((GdkGLProc_glCombinerParameterivNV) (proc)) (pname, params) )
+/* glSecondaryColor3iEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3iEXT) (GLint red, GLint green, GLint blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3iEXT (void);
+#define      gdk_gl_glSecondaryColor3iEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3iEXT) (proc)) (red, green, blue) )
 
-/* glCombinerParameteriNV */
-typedef void (APIENTRY * GdkGLProc_glCombinerParameteriNV) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glCombinerParameteriNV (void);
-#define      gdk_gl_glCombinerParameteriNV(proc, pname, param) \
-  ( ((GdkGLProc_glCombinerParameteriNV) (proc)) (pname, param) )
+/* glSecondaryColor3ivEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3ivEXT) (const GLint *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3ivEXT (void);
+#define      gdk_gl_glSecondaryColor3ivEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3ivEXT) (proc)) (v) )
 
-/* glCombinerInputNV */
-typedef void (APIENTRY * GdkGLProc_glCombinerInputNV) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
-GdkGLProc    gdk_gl_get_glCombinerInputNV (void);
-#define      gdk_gl_glCombinerInputNV(proc, stage, portion, variable, input, mapping, componentUsage) \
-  ( ((GdkGLProc_glCombinerInputNV) (proc)) (stage, portion, variable, input, mapping, componentUsage) )
+/* glSecondaryColor3sEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3sEXT) (GLshort red, GLshort green, GLshort blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3sEXT (void);
+#define      gdk_gl_glSecondaryColor3sEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3sEXT) (proc)) (red, green, blue) )
 
-/* glCombinerOutputNV */
-typedef void (APIENTRY * GdkGLProc_glCombinerOutputNV) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
-GdkGLProc    gdk_gl_get_glCombinerOutputNV (void);
-#define      gdk_gl_glCombinerOutputNV(proc, stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) \
-  ( ((GdkGLProc_glCombinerOutputNV) (proc)) (stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) )
+/* glSecondaryColor3svEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3svEXT) (const GLshort *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3svEXT (void);
+#define      gdk_gl_glSecondaryColor3svEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3svEXT) (proc)) (v) )
 
-/* glFinalCombinerInputNV */
-typedef void (APIENTRY * GdkGLProc_glFinalCombinerInputNV) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
-GdkGLProc    gdk_gl_get_glFinalCombinerInputNV (void);
-#define      gdk_gl_glFinalCombinerInputNV(proc, variable, input, mapping, componentUsage) \
-  ( ((GdkGLProc_glFinalCombinerInputNV) (proc)) (variable, input, mapping, componentUsage) )
+/* glSecondaryColor3ubEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3ubEXT) (GLubyte red, GLubyte green, GLubyte blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3ubEXT (void);
+#define      gdk_gl_glSecondaryColor3ubEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3ubEXT) (proc)) (red, green, blue) )
 
-/* glGetCombinerInputParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetCombinerInputParameterfvNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetCombinerInputParameterfvNV (void);
-#define      gdk_gl_glGetCombinerInputParameterfvNV(proc, stage, portion, variable, pname, params) \
-  ( ((GdkGLProc_glGetCombinerInputParameterfvNV) (proc)) (stage, portion, variable, pname, params) )
+/* glSecondaryColor3ubvEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3ubvEXT) (const GLubyte *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3ubvEXT (void);
+#define      gdk_gl_glSecondaryColor3ubvEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3ubvEXT) (proc)) (v) )
 
-/* glGetCombinerInputParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glGetCombinerInputParameterivNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetCombinerInputParameterivNV (void);
-#define      gdk_gl_glGetCombinerInputParameterivNV(proc, stage, portion, variable, pname, params) \
-  ( ((GdkGLProc_glGetCombinerInputParameterivNV) (proc)) (stage, portion, variable, pname, params) )
+/* glSecondaryColor3uiEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3uiEXT) (GLuint red, GLuint green, GLuint blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3uiEXT (void);
+#define      gdk_gl_glSecondaryColor3uiEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3uiEXT) (proc)) (red, green, blue) )
 
-/* glGetCombinerOutputParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetCombinerOutputParameterfvNV) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetCombinerOutputParameterfvNV (void);
-#define      gdk_gl_glGetCombinerOutputParameterfvNV(proc, stage, portion, pname, params) \
-  ( ((GdkGLProc_glGetCombinerOutputParameterfvNV) (proc)) (stage, portion, pname, params) )
+/* glSecondaryColor3uivEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3uivEXT) (const GLuint *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3uivEXT (void);
+#define      gdk_gl_glSecondaryColor3uivEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3uivEXT) (proc)) (v) )
 
-/* glGetCombinerOutputParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glGetCombinerOutputParameterivNV) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetCombinerOutputParameterivNV (void);
-#define      gdk_gl_glGetCombinerOutputParameterivNV(proc, stage, portion, pname, params) \
-  ( ((GdkGLProc_glGetCombinerOutputParameterivNV) (proc)) (stage, portion, pname, params) )
+/* glSecondaryColor3usEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3usEXT) (GLushort red, GLushort green, GLushort blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3usEXT (void);
+#define      gdk_gl_glSecondaryColor3usEXT(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3usEXT) (proc)) (red, green, blue) )
 
-/* glGetFinalCombinerInputParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetFinalCombinerInputParameterfvNV) (GLenum variable, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetFinalCombinerInputParameterfvNV (void);
-#define      gdk_gl_glGetFinalCombinerInputParameterfvNV(proc, variable, pname, params) \
-  ( ((GdkGLProc_glGetFinalCombinerInputParameterfvNV) (proc)) (variable, pname, params) )
+/* glSecondaryColor3usvEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3usvEXT) (const GLushort *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3usvEXT (void);
+#define      gdk_gl_glSecondaryColor3usvEXT(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3usvEXT) (proc)) (v) )
 
-/* glGetFinalCombinerInputParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glGetFinalCombinerInputParameterivNV) (GLenum variable, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetFinalCombinerInputParameterivNV (void);
-#define      gdk_gl_glGetFinalCombinerInputParameterivNV(proc, variable, pname, params) \
-  ( ((GdkGLProc_glGetFinalCombinerInputParameterivNV) (proc)) (variable, pname, params) )
+/* glSecondaryColorPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColorPointerEXT) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glSecondaryColorPointerEXT (void);
+#define      gdk_gl_glSecondaryColorPointerEXT(proc, size, type, stride, pointer) \
+  ( ((GdkGLProc_glSecondaryColorPointerEXT) (proc)) (size, type, stride, pointer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_register_combiners GdkGL_GL_NV_register_combiners;
+typedef struct _GdkGL_GL_EXT_secondary_color GdkGL_GL_EXT_secondary_color;
 
-struct _GdkGL_GL_NV_register_combiners
+struct _GdkGL_GL_EXT_secondary_color
 {
-  GdkGLProc_glCombinerParameterfvNV glCombinerParameterfvNV;
-  GdkGLProc_glCombinerParameterfNV glCombinerParameterfNV;
-  GdkGLProc_glCombinerParameterivNV glCombinerParameterivNV;
-  GdkGLProc_glCombinerParameteriNV glCombinerParameteriNV;
-  GdkGLProc_glCombinerInputNV glCombinerInputNV;
-  GdkGLProc_glCombinerOutputNV glCombinerOutputNV;
-  GdkGLProc_glFinalCombinerInputNV glFinalCombinerInputNV;
-  GdkGLProc_glGetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV;
-  GdkGLProc_glGetCombinerInputParameterivNV glGetCombinerInputParameterivNV;
-  GdkGLProc_glGetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV;
-  GdkGLProc_glGetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV;
-  GdkGLProc_glGetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV;
-  GdkGLProc_glGetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV;
+  GdkGLProc_glSecondaryColor3bEXT glSecondaryColor3bEXT;
+  GdkGLProc_glSecondaryColor3bvEXT glSecondaryColor3bvEXT;
+  GdkGLProc_glSecondaryColor3dEXT glSecondaryColor3dEXT;
+  GdkGLProc_glSecondaryColor3dvEXT glSecondaryColor3dvEXT;
+  GdkGLProc_glSecondaryColor3fEXT glSecondaryColor3fEXT;
+  GdkGLProc_glSecondaryColor3fvEXT glSecondaryColor3fvEXT;
+  GdkGLProc_glSecondaryColor3iEXT glSecondaryColor3iEXT;
+  GdkGLProc_glSecondaryColor3ivEXT glSecondaryColor3ivEXT;
+  GdkGLProc_glSecondaryColor3sEXT glSecondaryColor3sEXT;
+  GdkGLProc_glSecondaryColor3svEXT glSecondaryColor3svEXT;
+  GdkGLProc_glSecondaryColor3ubEXT glSecondaryColor3ubEXT;
+  GdkGLProc_glSecondaryColor3ubvEXT glSecondaryColor3ubvEXT;
+  GdkGLProc_glSecondaryColor3uiEXT glSecondaryColor3uiEXT;
+  GdkGLProc_glSecondaryColor3uivEXT glSecondaryColor3uivEXT;
+  GdkGLProc_glSecondaryColor3usEXT glSecondaryColor3usEXT;
+  GdkGLProc_glSecondaryColor3usvEXT glSecondaryColor3usvEXT;
+  GdkGLProc_glSecondaryColorPointerEXT glSecondaryColorPointerEXT;
 };
 
-GdkGL_GL_NV_register_combiners *gdk_gl_get_GL_NV_register_combiners (void);
+GdkGL_GL_EXT_secondary_color *gdk_gl_get_GL_EXT_secondary_color (void);
 
 /*
- * GL_MESA_resize_buffers
+ * GL_EXT_texture_perturb_normal
  */
 
-/* glResizeBuffersMESA */
-typedef void (APIENTRY * GdkGLProc_glResizeBuffersMESA) (void);
-GdkGLProc    gdk_gl_get_glResizeBuffersMESA (void);
-#define      gdk_gl_glResizeBuffersMESA(proc) \
-  ( ((GdkGLProc_glResizeBuffersMESA) (proc)) () )
+/* glTextureNormalEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureNormalEXT) (GLenum mode);
+GdkGLProc    gdk_gl_get_glTextureNormalEXT (void);
+#define      gdk_gl_glTextureNormalEXT(proc, mode) \
+  ( ((GdkGLProc_glTextureNormalEXT) (proc)) (mode) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_MESA_resize_buffers GdkGL_GL_MESA_resize_buffers;
+typedef struct _GdkGL_GL_EXT_texture_perturb_normal GdkGL_GL_EXT_texture_perturb_normal;
 
-struct _GdkGL_GL_MESA_resize_buffers
+struct _GdkGL_GL_EXT_texture_perturb_normal
 {
-  GdkGLProc_glResizeBuffersMESA glResizeBuffersMESA;
+  GdkGLProc_glTextureNormalEXT glTextureNormalEXT;
 };
 
-GdkGL_GL_MESA_resize_buffers *gdk_gl_get_GL_MESA_resize_buffers (void);
+GdkGL_GL_EXT_texture_perturb_normal *gdk_gl_get_GL_EXT_texture_perturb_normal (void);
 
 /*
- * GL_MESA_window_pos
+ * GL_EXT_multi_draw_arrays
  */
 
-/* glWindowPos2dMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2dMESA) (GLdouble x, GLdouble y);
-GdkGLProc    gdk_gl_get_glWindowPos2dMESA (void);
-#define      gdk_gl_glWindowPos2dMESA(proc, x, y) \
-  ( ((GdkGLProc_glWindowPos2dMESA) (proc)) (x, y) )
-
-/* glWindowPos2dvMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2dvMESA) (const GLdouble *v);
-GdkGLProc    gdk_gl_get_glWindowPos2dvMESA (void);
-#define      gdk_gl_glWindowPos2dvMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos2dvMESA) (proc)) (v) )
+/* glMultiDrawArraysEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiDrawArraysEXT) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glMultiDrawArraysEXT (void);
+#define      gdk_gl_glMultiDrawArraysEXT(proc, mode, first, count, primcount) \
+  ( ((GdkGLProc_glMultiDrawArraysEXT) (proc)) (mode, first, count, primcount) )
 
-/* glWindowPos2fMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2fMESA) (GLfloat x, GLfloat y);
-GdkGLProc    gdk_gl_get_glWindowPos2fMESA (void);
-#define      gdk_gl_glWindowPos2fMESA(proc, x, y) \
-  ( ((GdkGLProc_glWindowPos2fMESA) (proc)) (x, y) )
+/* glMultiDrawElementsEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiDrawElementsEXT) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glMultiDrawElementsEXT (void);
+#define      gdk_gl_glMultiDrawElementsEXT(proc, mode, count, type, indices, primcount) \
+  ( ((GdkGLProc_glMultiDrawElementsEXT) (proc)) (mode, count, type, indices, primcount) )
 
-/* glWindowPos2fvMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2fvMESA) (const GLfloat *v);
-GdkGLProc    gdk_gl_get_glWindowPos2fvMESA (void);
-#define      gdk_gl_glWindowPos2fvMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos2fvMESA) (proc)) (v) )
+/* proc struct */
 
-/* glWindowPos2iMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2iMESA) (GLint x, GLint y);
-GdkGLProc    gdk_gl_get_glWindowPos2iMESA (void);
-#define      gdk_gl_glWindowPos2iMESA(proc, x, y) \
-  ( ((GdkGLProc_glWindowPos2iMESA) (proc)) (x, y) )
+typedef struct _GdkGL_GL_EXT_multi_draw_arrays GdkGL_GL_EXT_multi_draw_arrays;
 
-/* glWindowPos2ivMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2ivMESA) (const GLint *v);
-GdkGLProc    gdk_gl_get_glWindowPos2ivMESA (void);
-#define      gdk_gl_glWindowPos2ivMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos2ivMESA) (proc)) (v) )
+struct _GdkGL_GL_EXT_multi_draw_arrays
+{
+  GdkGLProc_glMultiDrawArraysEXT glMultiDrawArraysEXT;
+  GdkGLProc_glMultiDrawElementsEXT glMultiDrawElementsEXT;
+};
 
-/* glWindowPos2sMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2sMESA) (GLshort x, GLshort y);
-GdkGLProc    gdk_gl_get_glWindowPos2sMESA (void);
-#define      gdk_gl_glWindowPos2sMESA(proc, x, y) \
-  ( ((GdkGLProc_glWindowPos2sMESA) (proc)) (x, y) )
+GdkGL_GL_EXT_multi_draw_arrays *gdk_gl_get_GL_EXT_multi_draw_arrays (void);
 
-/* glWindowPos2svMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos2svMESA) (const GLshort *v);
-GdkGLProc    gdk_gl_get_glWindowPos2svMESA (void);
-#define      gdk_gl_glWindowPos2svMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos2svMESA) (proc)) (v) )
+/*
+ * GL_EXT_fog_coord
+ */
 
-/* glWindowPos3dMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3dMESA) (GLdouble x, GLdouble y, GLdouble z);
-GdkGLProc    gdk_gl_get_glWindowPos3dMESA (void);
-#define      gdk_gl_glWindowPos3dMESA(proc, x, y, z) \
-  ( ((GdkGLProc_glWindowPos3dMESA) (proc)) (x, y, z) )
+/* glFogCoordfEXT */
+typedef void (APIENTRYP GdkGLProc_glFogCoordfEXT) (GLfloat coord);
+GdkGLProc    gdk_gl_get_glFogCoordfEXT (void);
+#define      gdk_gl_glFogCoordfEXT(proc, coord) \
+  ( ((GdkGLProc_glFogCoordfEXT) (proc)) (coord) )
 
-/* glWindowPos3dvMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3dvMESA) (const GLdouble *v);
-GdkGLProc    gdk_gl_get_glWindowPos3dvMESA (void);
-#define      gdk_gl_glWindowPos3dvMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos3dvMESA) (proc)) (v) )
+/* glFogCoordfvEXT */
+typedef void (APIENTRYP GdkGLProc_glFogCoordfvEXT) (const GLfloat *coord);
+GdkGLProc    gdk_gl_get_glFogCoordfvEXT (void);
+#define      gdk_gl_glFogCoordfvEXT(proc, coord) \
+  ( ((GdkGLProc_glFogCoordfvEXT) (proc)) (coord) )
 
-/* glWindowPos3fMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3fMESA) (GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glWindowPos3fMESA (void);
-#define      gdk_gl_glWindowPos3fMESA(proc, x, y, z) \
-  ( ((GdkGLProc_glWindowPos3fMESA) (proc)) (x, y, z) )
-
-/* glWindowPos3fvMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3fvMESA) (const GLfloat *v);
-GdkGLProc    gdk_gl_get_glWindowPos3fvMESA (void);
-#define      gdk_gl_glWindowPos3fvMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos3fvMESA) (proc)) (v) )
-
-/* glWindowPos3iMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3iMESA) (GLint x, GLint y, GLint z);
-GdkGLProc    gdk_gl_get_glWindowPos3iMESA (void);
-#define      gdk_gl_glWindowPos3iMESA(proc, x, y, z) \
-  ( ((GdkGLProc_glWindowPos3iMESA) (proc)) (x, y, z) )
-
-/* glWindowPos3ivMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3ivMESA) (const GLint *v);
-GdkGLProc    gdk_gl_get_glWindowPos3ivMESA (void);
-#define      gdk_gl_glWindowPos3ivMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos3ivMESA) (proc)) (v) )
-
-/* glWindowPos3sMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3sMESA) (GLshort x, GLshort y, GLshort z);
-GdkGLProc    gdk_gl_get_glWindowPos3sMESA (void);
-#define      gdk_gl_glWindowPos3sMESA(proc, x, y, z) \
-  ( ((GdkGLProc_glWindowPos3sMESA) (proc)) (x, y, z) )
-
-/* glWindowPos3svMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos3svMESA) (const GLshort *v);
-GdkGLProc    gdk_gl_get_glWindowPos3svMESA (void);
-#define      gdk_gl_glWindowPos3svMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos3svMESA) (proc)) (v) )
-
-/* glWindowPos4dMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4dMESA) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-GdkGLProc    gdk_gl_get_glWindowPos4dMESA (void);
-#define      gdk_gl_glWindowPos4dMESA(proc, x, y, z, w) \
-  ( ((GdkGLProc_glWindowPos4dMESA) (proc)) (x, y, z, w) )
-
-/* glWindowPos4dvMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4dvMESA) (const GLdouble *v);
-GdkGLProc    gdk_gl_get_glWindowPos4dvMESA (void);
-#define      gdk_gl_glWindowPos4dvMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos4dvMESA) (proc)) (v) )
-
-/* glWindowPos4fMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4fMESA) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GdkGLProc    gdk_gl_get_glWindowPos4fMESA (void);
-#define      gdk_gl_glWindowPos4fMESA(proc, x, y, z, w) \
-  ( ((GdkGLProc_glWindowPos4fMESA) (proc)) (x, y, z, w) )
-
-/* glWindowPos4fvMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4fvMESA) (const GLfloat *v);
-GdkGLProc    gdk_gl_get_glWindowPos4fvMESA (void);
-#define      gdk_gl_glWindowPos4fvMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos4fvMESA) (proc)) (v) )
-
-/* glWindowPos4iMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4iMESA) (GLint x, GLint y, GLint z, GLint w);
-GdkGLProc    gdk_gl_get_glWindowPos4iMESA (void);
-#define      gdk_gl_glWindowPos4iMESA(proc, x, y, z, w) \
-  ( ((GdkGLProc_glWindowPos4iMESA) (proc)) (x, y, z, w) )
-
-/* glWindowPos4ivMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4ivMESA) (const GLint *v);
-GdkGLProc    gdk_gl_get_glWindowPos4ivMESA (void);
-#define      gdk_gl_glWindowPos4ivMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos4ivMESA) (proc)) (v) )
+/* glFogCoorddEXT */
+typedef void (APIENTRYP GdkGLProc_glFogCoorddEXT) (GLdouble coord);
+GdkGLProc    gdk_gl_get_glFogCoorddEXT (void);
+#define      gdk_gl_glFogCoorddEXT(proc, coord) \
+  ( ((GdkGLProc_glFogCoorddEXT) (proc)) (coord) )
 
-/* glWindowPos4sMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4sMESA) (GLshort x, GLshort y, GLshort z, GLshort w);
-GdkGLProc    gdk_gl_get_glWindowPos4sMESA (void);
-#define      gdk_gl_glWindowPos4sMESA(proc, x, y, z, w) \
-  ( ((GdkGLProc_glWindowPos4sMESA) (proc)) (x, y, z, w) )
+/* glFogCoorddvEXT */
+typedef void (APIENTRYP GdkGLProc_glFogCoorddvEXT) (const GLdouble *coord);
+GdkGLProc    gdk_gl_get_glFogCoorddvEXT (void);
+#define      gdk_gl_glFogCoorddvEXT(proc, coord) \
+  ( ((GdkGLProc_glFogCoorddvEXT) (proc)) (coord) )
 
-/* glWindowPos4svMESA */
-typedef void (APIENTRY * GdkGLProc_glWindowPos4svMESA) (const GLshort *v);
-GdkGLProc    gdk_gl_get_glWindowPos4svMESA (void);
-#define      gdk_gl_glWindowPos4svMESA(proc, v) \
-  ( ((GdkGLProc_glWindowPos4svMESA) (proc)) (v) )
+/* glFogCoordPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glFogCoordPointerEXT) (GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glFogCoordPointerEXT (void);
+#define      gdk_gl_glFogCoordPointerEXT(proc, type, stride, pointer) \
+  ( ((GdkGLProc_glFogCoordPointerEXT) (proc)) (type, stride, pointer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_MESA_window_pos GdkGL_GL_MESA_window_pos;
+typedef struct _GdkGL_GL_EXT_fog_coord GdkGL_GL_EXT_fog_coord;
 
-struct _GdkGL_GL_MESA_window_pos
+struct _GdkGL_GL_EXT_fog_coord
 {
-  GdkGLProc_glWindowPos2dMESA glWindowPos2dMESA;
-  GdkGLProc_glWindowPos2dvMESA glWindowPos2dvMESA;
-  GdkGLProc_glWindowPos2fMESA glWindowPos2fMESA;
-  GdkGLProc_glWindowPos2fvMESA glWindowPos2fvMESA;
-  GdkGLProc_glWindowPos2iMESA glWindowPos2iMESA;
-  GdkGLProc_glWindowPos2ivMESA glWindowPos2ivMESA;
-  GdkGLProc_glWindowPos2sMESA glWindowPos2sMESA;
-  GdkGLProc_glWindowPos2svMESA glWindowPos2svMESA;
-  GdkGLProc_glWindowPos3dMESA glWindowPos3dMESA;
-  GdkGLProc_glWindowPos3dvMESA glWindowPos3dvMESA;
-  GdkGLProc_glWindowPos3fMESA glWindowPos3fMESA;
-  GdkGLProc_glWindowPos3fvMESA glWindowPos3fvMESA;
-  GdkGLProc_glWindowPos3iMESA glWindowPos3iMESA;
-  GdkGLProc_glWindowPos3ivMESA glWindowPos3ivMESA;
-  GdkGLProc_glWindowPos3sMESA glWindowPos3sMESA;
-  GdkGLProc_glWindowPos3svMESA glWindowPos3svMESA;
-  GdkGLProc_glWindowPos4dMESA glWindowPos4dMESA;
-  GdkGLProc_glWindowPos4dvMESA glWindowPos4dvMESA;
-  GdkGLProc_glWindowPos4fMESA glWindowPos4fMESA;
-  GdkGLProc_glWindowPos4fvMESA glWindowPos4fvMESA;
-  GdkGLProc_glWindowPos4iMESA glWindowPos4iMESA;
-  GdkGLProc_glWindowPos4ivMESA glWindowPos4ivMESA;
-  GdkGLProc_glWindowPos4sMESA glWindowPos4sMESA;
-  GdkGLProc_glWindowPos4svMESA glWindowPos4svMESA;
+  GdkGLProc_glFogCoordfEXT glFogCoordfEXT;
+  GdkGLProc_glFogCoordfvEXT glFogCoordfvEXT;
+  GdkGLProc_glFogCoorddEXT glFogCoorddEXT;
+  GdkGLProc_glFogCoorddvEXT glFogCoorddvEXT;
+  GdkGLProc_glFogCoordPointerEXT glFogCoordPointerEXT;
 };
 
-GdkGL_GL_MESA_window_pos *gdk_gl_get_GL_MESA_window_pos (void);
+GdkGL_GL_EXT_fog_coord *gdk_gl_get_GL_EXT_fog_coord (void);
 
 /*
- * GL_IBM_multimode_draw_arrays
+ * GL_EXT_coordinate_frame
  */
 
-/* glMultiModeDrawArraysIBM */
-typedef void (APIENTRY * GdkGLProc_glMultiModeDrawArraysIBM) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
-GdkGLProc    gdk_gl_get_glMultiModeDrawArraysIBM (void);
-#define      gdk_gl_glMultiModeDrawArraysIBM(proc, mode, first, count, primcount, modestride) \
-  ( ((GdkGLProc_glMultiModeDrawArraysIBM) (proc)) (mode, first, count, primcount, modestride) )
+/* glTangent3bEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3bEXT) (GLbyte tx, GLbyte ty, GLbyte tz);
+GdkGLProc    gdk_gl_get_glTangent3bEXT (void);
+#define      gdk_gl_glTangent3bEXT(proc, tx, ty, tz) \
+  ( ((GdkGLProc_glTangent3bEXT) (proc)) (tx, ty, tz) )
 
-/* glMultiModeDrawElementsIBM */
-typedef void (APIENTRY * GdkGLProc_glMultiModeDrawElementsIBM) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, GLint modestride);
-GdkGLProc    gdk_gl_get_glMultiModeDrawElementsIBM (void);
-#define      gdk_gl_glMultiModeDrawElementsIBM(proc, mode, count, type, indices, primcount, modestride) \
-  ( ((GdkGLProc_glMultiModeDrawElementsIBM) (proc)) (mode, count, type, indices, primcount, modestride) )
+/* glTangent3bvEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3bvEXT) (const GLbyte *v);
+GdkGLProc    gdk_gl_get_glTangent3bvEXT (void);
+#define      gdk_gl_glTangent3bvEXT(proc, v) \
+  ( ((GdkGLProc_glTangent3bvEXT) (proc)) (v) )
 
-/* proc struct */
+/* glTangent3dEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3dEXT) (GLdouble tx, GLdouble ty, GLdouble tz);
+GdkGLProc    gdk_gl_get_glTangent3dEXT (void);
+#define      gdk_gl_glTangent3dEXT(proc, tx, ty, tz) \
+  ( ((GdkGLProc_glTangent3dEXT) (proc)) (tx, ty, tz) )
 
-typedef struct _GdkGL_GL_IBM_multimode_draw_arrays GdkGL_GL_IBM_multimode_draw_arrays;
+/* glTangent3dvEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3dvEXT) (const GLdouble *v);
+GdkGLProc    gdk_gl_get_glTangent3dvEXT (void);
+#define      gdk_gl_glTangent3dvEXT(proc, v) \
+  ( ((GdkGLProc_glTangent3dvEXT) (proc)) (v) )
 
-struct _GdkGL_GL_IBM_multimode_draw_arrays
-{
-  GdkGLProc_glMultiModeDrawArraysIBM glMultiModeDrawArraysIBM;
-  GdkGLProc_glMultiModeDrawElementsIBM glMultiModeDrawElementsIBM;
-};
+/* glTangent3fEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3fEXT) (GLfloat tx, GLfloat ty, GLfloat tz);
+GdkGLProc    gdk_gl_get_glTangent3fEXT (void);
+#define      gdk_gl_glTangent3fEXT(proc, tx, ty, tz) \
+  ( ((GdkGLProc_glTangent3fEXT) (proc)) (tx, ty, tz) )
 
-GdkGL_GL_IBM_multimode_draw_arrays *gdk_gl_get_GL_IBM_multimode_draw_arrays (void);
+/* glTangent3fvEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3fvEXT) (const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTangent3fvEXT (void);
+#define      gdk_gl_glTangent3fvEXT(proc, v) \
+  ( ((GdkGLProc_glTangent3fvEXT) (proc)) (v) )
 
-/*
- * GL_IBM_vertex_array_lists
- */
+/* glTangent3iEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3iEXT) (GLint tx, GLint ty, GLint tz);
+GdkGLProc    gdk_gl_get_glTangent3iEXT (void);
+#define      gdk_gl_glTangent3iEXT(proc, tx, ty, tz) \
+  ( ((GdkGLProc_glTangent3iEXT) (proc)) (tx, ty, tz) )
 
-/* glColorPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glColorPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glColorPointerListIBM (void);
-#define      gdk_gl_glColorPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glColorPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
+/* glTangent3ivEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3ivEXT) (const GLint *v);
+GdkGLProc    gdk_gl_get_glTangent3ivEXT (void);
+#define      gdk_gl_glTangent3ivEXT(proc, v) \
+  ( ((GdkGLProc_glTangent3ivEXT) (proc)) (v) )
 
-/* glSecondaryColorPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColorPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glSecondaryColorPointerListIBM (void);
-#define      gdk_gl_glSecondaryColorPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glSecondaryColorPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
+/* glTangent3sEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3sEXT) (GLshort tx, GLshort ty, GLshort tz);
+GdkGLProc    gdk_gl_get_glTangent3sEXT (void);
+#define      gdk_gl_glTangent3sEXT(proc, tx, ty, tz) \
+  ( ((GdkGLProc_glTangent3sEXT) (proc)) (tx, ty, tz) )
 
-/* glEdgeFlagPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glEdgeFlagPointerListIBM) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glEdgeFlagPointerListIBM (void);
-#define      gdk_gl_glEdgeFlagPointerListIBM(proc, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glEdgeFlagPointerListIBM) (proc)) (stride, pointer, ptrstride) )
+/* glTangent3svEXT */
+typedef void (APIENTRYP GdkGLProc_glTangent3svEXT) (const GLshort *v);
+GdkGLProc    gdk_gl_get_glTangent3svEXT (void);
+#define      gdk_gl_glTangent3svEXT(proc, v) \
+  ( ((GdkGLProc_glTangent3svEXT) (proc)) (v) )
 
-/* glFogCoordPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glFogCoordPointerListIBM) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glFogCoordPointerListIBM (void);
-#define      gdk_gl_glFogCoordPointerListIBM(proc, type, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glFogCoordPointerListIBM) (proc)) (type, stride, pointer, ptrstride) )
+/* glBinormal3bEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3bEXT) (GLbyte bx, GLbyte by, GLbyte bz);
+GdkGLProc    gdk_gl_get_glBinormal3bEXT (void);
+#define      gdk_gl_glBinormal3bEXT(proc, bx, by, bz) \
+  ( ((GdkGLProc_glBinormal3bEXT) (proc)) (bx, by, bz) )
 
-/* glIndexPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glIndexPointerListIBM) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glIndexPointerListIBM (void);
-#define      gdk_gl_glIndexPointerListIBM(proc, type, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glIndexPointerListIBM) (proc)) (type, stride, pointer, ptrstride) )
+/* glBinormal3bvEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3bvEXT) (const GLbyte *v);
+GdkGLProc    gdk_gl_get_glBinormal3bvEXT (void);
+#define      gdk_gl_glBinormal3bvEXT(proc, v) \
+  ( ((GdkGLProc_glBinormal3bvEXT) (proc)) (v) )
 
-/* glNormalPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glNormalPointerListIBM) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glNormalPointerListIBM (void);
-#define      gdk_gl_glNormalPointerListIBM(proc, type, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glNormalPointerListIBM) (proc)) (type, stride, pointer, ptrstride) )
+/* glBinormal3dEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3dEXT) (GLdouble bx, GLdouble by, GLdouble bz);
+GdkGLProc    gdk_gl_get_glBinormal3dEXT (void);
+#define      gdk_gl_glBinormal3dEXT(proc, bx, by, bz) \
+  ( ((GdkGLProc_glBinormal3dEXT) (proc)) (bx, by, bz) )
 
-/* glTexCoordPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glTexCoordPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glTexCoordPointerListIBM (void);
-#define      gdk_gl_glTexCoordPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glTexCoordPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
+/* glBinormal3dvEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3dvEXT) (const GLdouble *v);
+GdkGLProc    gdk_gl_get_glBinormal3dvEXT (void);
+#define      gdk_gl_glBinormal3dvEXT(proc, v) \
+  ( ((GdkGLProc_glBinormal3dvEXT) (proc)) (v) )
 
-/* glVertexPointerListIBM */
-typedef void (APIENTRY * GdkGLProc_glVertexPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-GdkGLProc    gdk_gl_get_glVertexPointerListIBM (void);
-#define      gdk_gl_glVertexPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
-  ( ((GdkGLProc_glVertexPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
+/* glBinormal3fEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3fEXT) (GLfloat bx, GLfloat by, GLfloat bz);
+GdkGLProc    gdk_gl_get_glBinormal3fEXT (void);
+#define      gdk_gl_glBinormal3fEXT(proc, bx, by, bz) \
+  ( ((GdkGLProc_glBinormal3fEXT) (proc)) (bx, by, bz) )
 
-/* proc struct */
+/* glBinormal3fvEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3fvEXT) (const GLfloat *v);
+GdkGLProc    gdk_gl_get_glBinormal3fvEXT (void);
+#define      gdk_gl_glBinormal3fvEXT(proc, v) \
+  ( ((GdkGLProc_glBinormal3fvEXT) (proc)) (v) )
 
-typedef struct _GdkGL_GL_IBM_vertex_array_lists GdkGL_GL_IBM_vertex_array_lists;
+/* glBinormal3iEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3iEXT) (GLint bx, GLint by, GLint bz);
+GdkGLProc    gdk_gl_get_glBinormal3iEXT (void);
+#define      gdk_gl_glBinormal3iEXT(proc, bx, by, bz) \
+  ( ((GdkGLProc_glBinormal3iEXT) (proc)) (bx, by, bz) )
 
-struct _GdkGL_GL_IBM_vertex_array_lists
-{
-  GdkGLProc_glColorPointerListIBM glColorPointerListIBM;
-  GdkGLProc_glSecondaryColorPointerListIBM glSecondaryColorPointerListIBM;
-  GdkGLProc_glEdgeFlagPointerListIBM glEdgeFlagPointerListIBM;
-  GdkGLProc_glFogCoordPointerListIBM glFogCoordPointerListIBM;
-  GdkGLProc_glIndexPointerListIBM glIndexPointerListIBM;
-  GdkGLProc_glNormalPointerListIBM glNormalPointerListIBM;
-  GdkGLProc_glTexCoordPointerListIBM glTexCoordPointerListIBM;
-  GdkGLProc_glVertexPointerListIBM glVertexPointerListIBM;
-};
+/* glBinormal3ivEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3ivEXT) (const GLint *v);
+GdkGLProc    gdk_gl_get_glBinormal3ivEXT (void);
+#define      gdk_gl_glBinormal3ivEXT(proc, v) \
+  ( ((GdkGLProc_glBinormal3ivEXT) (proc)) (v) )
 
-GdkGL_GL_IBM_vertex_array_lists *gdk_gl_get_GL_IBM_vertex_array_lists (void);
+/* glBinormal3sEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3sEXT) (GLshort bx, GLshort by, GLshort bz);
+GdkGLProc    gdk_gl_get_glBinormal3sEXT (void);
+#define      gdk_gl_glBinormal3sEXT(proc, bx, by, bz) \
+  ( ((GdkGLProc_glBinormal3sEXT) (proc)) (bx, by, bz) )
 
-/*
- * GL_3DFX_tbuffer
- */
+/* glBinormal3svEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormal3svEXT) (const GLshort *v);
+GdkGLProc    gdk_gl_get_glBinormal3svEXT (void);
+#define      gdk_gl_glBinormal3svEXT(proc, v) \
+  ( ((GdkGLProc_glBinormal3svEXT) (proc)) (v) )
 
-/* glTbufferMask3DFX */
-typedef void (APIENTRY * GdkGLProc_glTbufferMask3DFX) (GLuint mask);
-GdkGLProc    gdk_gl_get_glTbufferMask3DFX (void);
-#define      gdk_gl_glTbufferMask3DFX(proc, mask) \
-  ( ((GdkGLProc_glTbufferMask3DFX) (proc)) (mask) )
+/* glTangentPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glTangentPointerEXT) (GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glTangentPointerEXT (void);
+#define      gdk_gl_glTangentPointerEXT(proc, type, stride, pointer) \
+  ( ((GdkGLProc_glTangentPointerEXT) (proc)) (type, stride, pointer) )
+
+/* glBinormalPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glBinormalPointerEXT) (GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glBinormalPointerEXT (void);
+#define      gdk_gl_glBinormalPointerEXT(proc, type, stride, pointer) \
+  ( ((GdkGLProc_glBinormalPointerEXT) (proc)) (type, stride, pointer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_3DFX_tbuffer GdkGL_GL_3DFX_tbuffer;
+typedef struct _GdkGL_GL_EXT_coordinate_frame GdkGL_GL_EXT_coordinate_frame;
 
-struct _GdkGL_GL_3DFX_tbuffer
+struct _GdkGL_GL_EXT_coordinate_frame
 {
-  GdkGLProc_glTbufferMask3DFX glTbufferMask3DFX;
+  GdkGLProc_glTangent3bEXT glTangent3bEXT;
+  GdkGLProc_glTangent3bvEXT glTangent3bvEXT;
+  GdkGLProc_glTangent3dEXT glTangent3dEXT;
+  GdkGLProc_glTangent3dvEXT glTangent3dvEXT;
+  GdkGLProc_glTangent3fEXT glTangent3fEXT;
+  GdkGLProc_glTangent3fvEXT glTangent3fvEXT;
+  GdkGLProc_glTangent3iEXT glTangent3iEXT;
+  GdkGLProc_glTangent3ivEXT glTangent3ivEXT;
+  GdkGLProc_glTangent3sEXT glTangent3sEXT;
+  GdkGLProc_glTangent3svEXT glTangent3svEXT;
+  GdkGLProc_glBinormal3bEXT glBinormal3bEXT;
+  GdkGLProc_glBinormal3bvEXT glBinormal3bvEXT;
+  GdkGLProc_glBinormal3dEXT glBinormal3dEXT;
+  GdkGLProc_glBinormal3dvEXT glBinormal3dvEXT;
+  GdkGLProc_glBinormal3fEXT glBinormal3fEXT;
+  GdkGLProc_glBinormal3fvEXT glBinormal3fvEXT;
+  GdkGLProc_glBinormal3iEXT glBinormal3iEXT;
+  GdkGLProc_glBinormal3ivEXT glBinormal3ivEXT;
+  GdkGLProc_glBinormal3sEXT glBinormal3sEXT;
+  GdkGLProc_glBinormal3svEXT glBinormal3svEXT;
+  GdkGLProc_glTangentPointerEXT glTangentPointerEXT;
+  GdkGLProc_glBinormalPointerEXT glBinormalPointerEXT;
 };
 
-GdkGL_GL_3DFX_tbuffer *gdk_gl_get_GL_3DFX_tbuffer (void);
+GdkGL_GL_EXT_coordinate_frame *gdk_gl_get_GL_EXT_coordinate_frame (void);
 
 /*
- * GL_EXT_multisample
+ * GL_SUNX_constant_data
  */
 
-/* glSampleMaskEXT */
-typedef void (APIENTRY * GdkGLProc_glSampleMaskEXT) (GLclampf value, GLboolean invert);
-GdkGLProc    gdk_gl_get_glSampleMaskEXT (void);
-#define      gdk_gl_glSampleMaskEXT(proc, value, invert) \
-  ( ((GdkGLProc_glSampleMaskEXT) (proc)) (value, invert) )
-
-/* glSamplePatternEXT */
-typedef void (APIENTRY * GdkGLProc_glSamplePatternEXT) (GLenum pattern);
-GdkGLProc    gdk_gl_get_glSamplePatternEXT (void);
-#define      gdk_gl_glSamplePatternEXT(proc, pattern) \
-  ( ((GdkGLProc_glSamplePatternEXT) (proc)) (pattern) )
+/* glFinishTextureSUNX */
+typedef void (APIENTRYP GdkGLProc_glFinishTextureSUNX) (void);
+GdkGLProc    gdk_gl_get_glFinishTextureSUNX (void);
+#define      gdk_gl_glFinishTextureSUNX(proc) \
+  ( ((GdkGLProc_glFinishTextureSUNX) (proc)) () )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_multisample GdkGL_GL_EXT_multisample;
+typedef struct _GdkGL_GL_SUNX_constant_data GdkGL_GL_SUNX_constant_data;
 
-struct _GdkGL_GL_EXT_multisample
+struct _GdkGL_GL_SUNX_constant_data
 {
-  GdkGLProc_glSampleMaskEXT glSampleMaskEXT;
-  GdkGLProc_glSamplePatternEXT glSamplePatternEXT;
+  GdkGLProc_glFinishTextureSUNX glFinishTextureSUNX;
 };
 
-GdkGL_GL_EXT_multisample *gdk_gl_get_GL_EXT_multisample (void);
+GdkGL_GL_SUNX_constant_data *gdk_gl_get_GL_SUNX_constant_data (void);
 
 /*
- * GL_SGIS_texture_color_mask
+ * GL_SUN_global_alpha
  */
 
-/* glTextureColorMaskSGIS */
-typedef void (APIENTRY * GdkGLProc_glTextureColorMaskSGIS) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
-GdkGLProc    gdk_gl_get_glTextureColorMaskSGIS (void);
-#define      gdk_gl_glTextureColorMaskSGIS(proc, red, green, blue, alpha) \
-  ( ((GdkGLProc_glTextureColorMaskSGIS) (proc)) (red, green, blue, alpha) )
+/* glGlobalAlphaFactorbSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactorbSUN) (GLbyte factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactorbSUN (void);
+#define      gdk_gl_glGlobalAlphaFactorbSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactorbSUN) (proc)) (factor) )
 
-/* proc struct */
+/* glGlobalAlphaFactorsSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactorsSUN) (GLshort factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactorsSUN (void);
+#define      gdk_gl_glGlobalAlphaFactorsSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactorsSUN) (proc)) (factor) )
 
-typedef struct _GdkGL_GL_SGIS_texture_color_mask GdkGL_GL_SGIS_texture_color_mask;
+/* glGlobalAlphaFactoriSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactoriSUN) (GLint factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactoriSUN (void);
+#define      gdk_gl_glGlobalAlphaFactoriSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactoriSUN) (proc)) (factor) )
 
-struct _GdkGL_GL_SGIS_texture_color_mask
-{
-  GdkGLProc_glTextureColorMaskSGIS glTextureColorMaskSGIS;
-};
+/* glGlobalAlphaFactorfSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactorfSUN) (GLfloat factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactorfSUN (void);
+#define      gdk_gl_glGlobalAlphaFactorfSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactorfSUN) (proc)) (factor) )
 
-GdkGL_GL_SGIS_texture_color_mask *gdk_gl_get_GL_SGIS_texture_color_mask (void);
+/* glGlobalAlphaFactordSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactordSUN) (GLdouble factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactordSUN (void);
+#define      gdk_gl_glGlobalAlphaFactordSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactordSUN) (proc)) (factor) )
 
-/*
- * GL_SGIX_igloo_interface
- */
+/* glGlobalAlphaFactorubSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactorubSUN) (GLubyte factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactorubSUN (void);
+#define      gdk_gl_glGlobalAlphaFactorubSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactorubSUN) (proc)) (factor) )
 
-/* glIglooInterfaceSGIX */
-typedef void (APIENTRY * GdkGLProc_glIglooInterfaceSGIX) (GLenum pname, const GLvoid *params);
-GdkGLProc    gdk_gl_get_glIglooInterfaceSGIX (void);
-#define      gdk_gl_glIglooInterfaceSGIX(proc, pname, params) \
-  ( ((GdkGLProc_glIglooInterfaceSGIX) (proc)) (pname, params) )
+/* glGlobalAlphaFactorusSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactorusSUN) (GLushort factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactorusSUN (void);
+#define      gdk_gl_glGlobalAlphaFactorusSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactorusSUN) (proc)) (factor) )
+
+/* glGlobalAlphaFactoruiSUN */
+typedef void (APIENTRYP GdkGLProc_glGlobalAlphaFactoruiSUN) (GLuint factor);
+GdkGLProc    gdk_gl_get_glGlobalAlphaFactoruiSUN (void);
+#define      gdk_gl_glGlobalAlphaFactoruiSUN(proc, factor) \
+  ( ((GdkGLProc_glGlobalAlphaFactoruiSUN) (proc)) (factor) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SGIX_igloo_interface GdkGL_GL_SGIX_igloo_interface;
+typedef struct _GdkGL_GL_SUN_global_alpha GdkGL_GL_SUN_global_alpha;
 
-struct _GdkGL_GL_SGIX_igloo_interface
+struct _GdkGL_GL_SUN_global_alpha
 {
-  GdkGLProc_glIglooInterfaceSGIX glIglooInterfaceSGIX;
+  GdkGLProc_glGlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN;
+  GdkGLProc_glGlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN;
+  GdkGLProc_glGlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN;
+  GdkGLProc_glGlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN;
+  GdkGLProc_glGlobalAlphaFactordSUN glGlobalAlphaFactordSUN;
+  GdkGLProc_glGlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN;
+  GdkGLProc_glGlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN;
+  GdkGLProc_glGlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN;
 };
 
-GdkGL_GL_SGIX_igloo_interface *gdk_gl_get_GL_SGIX_igloo_interface (void);
+GdkGL_GL_SUN_global_alpha *gdk_gl_get_GL_SUN_global_alpha (void);
 
 /*
- * GL_NV_fence
+ * GL_SUN_triangle_list
  */
 
-/* glDeleteFencesNV */
-typedef void (APIENTRY * GdkGLProc_glDeleteFencesNV) (GLsizei n, const GLuint *fences);
-GdkGLProc    gdk_gl_get_glDeleteFencesNV (void);
-#define      gdk_gl_glDeleteFencesNV(proc, n, fences) \
-  ( ((GdkGLProc_glDeleteFencesNV) (proc)) (n, fences) )
+/* glReplacementCodeuiSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiSUN) (GLuint code);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiSUN (void);
+#define      gdk_gl_glReplacementCodeuiSUN(proc, code) \
+  ( ((GdkGLProc_glReplacementCodeuiSUN) (proc)) (code) )
 
-/* glGenFencesNV */
-typedef void (APIENTRY * GdkGLProc_glGenFencesNV) (GLsizei n, GLuint *fences);
-GdkGLProc    gdk_gl_get_glGenFencesNV (void);
-#define      gdk_gl_glGenFencesNV(proc, n, fences) \
-  ( ((GdkGLProc_glGenFencesNV) (proc)) (n, fences) )
+/* glReplacementCodeusSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeusSUN) (GLushort code);
+GdkGLProc    gdk_gl_get_glReplacementCodeusSUN (void);
+#define      gdk_gl_glReplacementCodeusSUN(proc, code) \
+  ( ((GdkGLProc_glReplacementCodeusSUN) (proc)) (code) )
 
-/* glIsFenceNV */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsFenceNV) (GLuint fence);
-GdkGLProc    gdk_gl_get_glIsFenceNV (void);
-#define      gdk_gl_glIsFenceNV(proc, fence) \
-  ( ((GdkGLProc_glIsFenceNV) (proc)) (fence) )
+/* glReplacementCodeubSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeubSUN) (GLubyte code);
+GdkGLProc    gdk_gl_get_glReplacementCodeubSUN (void);
+#define      gdk_gl_glReplacementCodeubSUN(proc, code) \
+  ( ((GdkGLProc_glReplacementCodeubSUN) (proc)) (code) )
 
-/* glTestFenceNV */
-typedef GLboolean (APIENTRY * GdkGLProc_glTestFenceNV) (GLuint fence);
-GdkGLProc    gdk_gl_get_glTestFenceNV (void);
-#define      gdk_gl_glTestFenceNV(proc, fence) \
-  ( ((GdkGLProc_glTestFenceNV) (proc)) (fence) )
+/* glReplacementCodeuivSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuivSUN) (const GLuint *code);
+GdkGLProc    gdk_gl_get_glReplacementCodeuivSUN (void);
+#define      gdk_gl_glReplacementCodeuivSUN(proc, code) \
+  ( ((GdkGLProc_glReplacementCodeuivSUN) (proc)) (code) )
 
-/* glGetFenceivNV */
-typedef void (APIENTRY * GdkGLProc_glGetFenceivNV) (GLuint fence, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetFenceivNV (void);
-#define      gdk_gl_glGetFenceivNV(proc, fence, pname, params) \
-  ( ((GdkGLProc_glGetFenceivNV) (proc)) (fence, pname, params) )
+/* glReplacementCodeusvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeusvSUN) (const GLushort *code);
+GdkGLProc    gdk_gl_get_glReplacementCodeusvSUN (void);
+#define      gdk_gl_glReplacementCodeusvSUN(proc, code) \
+  ( ((GdkGLProc_glReplacementCodeusvSUN) (proc)) (code) )
 
-/* glFinishFenceNV */
-typedef void (APIENTRY * GdkGLProc_glFinishFenceNV) (GLuint fence);
-GdkGLProc    gdk_gl_get_glFinishFenceNV (void);
-#define      gdk_gl_glFinishFenceNV(proc, fence) \
-  ( ((GdkGLProc_glFinishFenceNV) (proc)) (fence) )
+/* glReplacementCodeubvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeubvSUN) (const GLubyte *code);
+GdkGLProc    gdk_gl_get_glReplacementCodeubvSUN (void);
+#define      gdk_gl_glReplacementCodeubvSUN(proc, code) \
+  ( ((GdkGLProc_glReplacementCodeubvSUN) (proc)) (code) )
 
-/* glSetFenceNV */
-typedef void (APIENTRY * GdkGLProc_glSetFenceNV) (GLuint fence, GLenum condition);
-GdkGLProc    gdk_gl_get_glSetFenceNV (void);
-#define      gdk_gl_glSetFenceNV(proc, fence, condition) \
-  ( ((GdkGLProc_glSetFenceNV) (proc)) (fence, condition) )
+/* glReplacementCodePointerSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodePointerSUN) (GLenum type, GLsizei stride, const GLvoid* *pointer);
+GdkGLProc    gdk_gl_get_glReplacementCodePointerSUN (void);
+#define      gdk_gl_glReplacementCodePointerSUN(proc, type, stride, pointer) \
+  ( ((GdkGLProc_glReplacementCodePointerSUN) (proc)) (type, stride, pointer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_fence GdkGL_GL_NV_fence;
+typedef struct _GdkGL_GL_SUN_triangle_list GdkGL_GL_SUN_triangle_list;
 
-struct _GdkGL_GL_NV_fence
+struct _GdkGL_GL_SUN_triangle_list
 {
-  GdkGLProc_glDeleteFencesNV glDeleteFencesNV;
-  GdkGLProc_glGenFencesNV glGenFencesNV;
-  GdkGLProc_glIsFenceNV glIsFenceNV;
-  GdkGLProc_glTestFenceNV glTestFenceNV;
-  GdkGLProc_glGetFenceivNV glGetFenceivNV;
-  GdkGLProc_glFinishFenceNV glFinishFenceNV;
-  GdkGLProc_glSetFenceNV glSetFenceNV;
+  GdkGLProc_glReplacementCodeuiSUN glReplacementCodeuiSUN;
+  GdkGLProc_glReplacementCodeusSUN glReplacementCodeusSUN;
+  GdkGLProc_glReplacementCodeubSUN glReplacementCodeubSUN;
+  GdkGLProc_glReplacementCodeuivSUN glReplacementCodeuivSUN;
+  GdkGLProc_glReplacementCodeusvSUN glReplacementCodeusvSUN;
+  GdkGLProc_glReplacementCodeubvSUN glReplacementCodeubvSUN;
+  GdkGLProc_glReplacementCodePointerSUN glReplacementCodePointerSUN;
 };
 
-GdkGL_GL_NV_fence *gdk_gl_get_GL_NV_fence (void);
+GdkGL_GL_SUN_triangle_list *gdk_gl_get_GL_SUN_triangle_list (void);
 
 /*
- * GL_NV_evaluators
+ * GL_SUN_vertex
  */
 
-/* glMapControlPointsNV */
-typedef void (APIENTRY * GdkGLProc_glMapControlPointsNV) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
-GdkGLProc    gdk_gl_get_glMapControlPointsNV (void);
-#define      gdk_gl_glMapControlPointsNV(proc, target, index, type, ustride, vstride, uorder, vorder, packed, points) \
-  ( ((GdkGLProc_glMapControlPointsNV) (proc)) (target, index, type, ustride, vstride, uorder, vorder, packed, points) )
+/* glColor4ubVertex2fSUN */
+typedef void (APIENTRYP GdkGLProc_glColor4ubVertex2fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
+GdkGLProc    gdk_gl_get_glColor4ubVertex2fSUN (void);
+#define      gdk_gl_glColor4ubVertex2fSUN(proc, r, g, b, a, x, y) \
+  ( ((GdkGLProc_glColor4ubVertex2fSUN) (proc)) (r, g, b, a, x, y) )
 
-/* glMapParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glMapParameterivNV) (GLenum target, GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glMapParameterivNV (void);
-#define      gdk_gl_glMapParameterivNV(proc, target, pname, params) \
-  ( ((GdkGLProc_glMapParameterivNV) (proc)) (target, pname, params) )
+/* glColor4ubVertex2fvSUN */
+typedef void (APIENTRYP GdkGLProc_glColor4ubVertex2fvSUN) (const GLubyte *c, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glColor4ubVertex2fvSUN (void);
+#define      gdk_gl_glColor4ubVertex2fvSUN(proc, c, v) \
+  ( ((GdkGLProc_glColor4ubVertex2fvSUN) (proc)) (c, v) )
 
-/* glMapParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glMapParameterfvNV) (GLenum target, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glMapParameterfvNV (void);
-#define      gdk_gl_glMapParameterfvNV(proc, target, pname, params) \
-  ( ((GdkGLProc_glMapParameterfvNV) (proc)) (target, pname, params) )
+/* glColor4ubVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glColor4ubVertex3fSUN) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glColor4ubVertex3fSUN (void);
+#define      gdk_gl_glColor4ubVertex3fSUN(proc, r, g, b, a, x, y, z) \
+  ( ((GdkGLProc_glColor4ubVertex3fSUN) (proc)) (r, g, b, a, x, y, z) )
 
-/* glGetMapControlPointsNV */
-typedef void (APIENTRY * GdkGLProc_glGetMapControlPointsNV) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
-GdkGLProc    gdk_gl_get_glGetMapControlPointsNV (void);
-#define      gdk_gl_glGetMapControlPointsNV(proc, target, index, type, ustride, vstride, packed, points) \
-  ( ((GdkGLProc_glGetMapControlPointsNV) (proc)) (target, index, type, ustride, vstride, packed, points) )
+/* glColor4ubVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glColor4ubVertex3fvSUN) (const GLubyte *c, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glColor4ubVertex3fvSUN (void);
+#define      gdk_gl_glColor4ubVertex3fvSUN(proc, c, v) \
+  ( ((GdkGLProc_glColor4ubVertex3fvSUN) (proc)) (c, v) )
 
-/* glGetMapParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glGetMapParameterivNV) (GLenum target, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetMapParameterivNV (void);
-#define      gdk_gl_glGetMapParameterivNV(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetMapParameterivNV) (proc)) (target, pname, params) )
-
-/* glGetMapParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetMapParameterfvNV) (GLenum target, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetMapParameterfvNV (void);
-#define      gdk_gl_glGetMapParameterfvNV(proc, target, pname, params) \
-  ( ((GdkGLProc_glGetMapParameterfvNV) (proc)) (target, pname, params) )
+/* glColor3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glColor3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glColor3fVertex3fSUN (void);
+#define      gdk_gl_glColor3fVertex3fSUN(proc, r, g, b, x, y, z) \
+  ( ((GdkGLProc_glColor3fVertex3fSUN) (proc)) (r, g, b, x, y, z) )
 
-/* glGetMapAttribParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glGetMapAttribParameterivNV) (GLenum target, GLuint index, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetMapAttribParameterivNV (void);
-#define      gdk_gl_glGetMapAttribParameterivNV(proc, target, index, pname, params) \
-  ( ((GdkGLProc_glGetMapAttribParameterivNV) (proc)) (target, index, pname, params) )
+/* glColor3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glColor3fVertex3fvSUN) (const GLfloat *c, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glColor3fVertex3fvSUN (void);
+#define      gdk_gl_glColor3fVertex3fvSUN(proc, c, v) \
+  ( ((GdkGLProc_glColor3fVertex3fvSUN) (proc)) (c, v) )
 
-/* glGetMapAttribParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetMapAttribParameterfvNV) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetMapAttribParameterfvNV (void);
-#define      gdk_gl_glGetMapAttribParameterfvNV(proc, target, index, pname, params) \
-  ( ((GdkGLProc_glGetMapAttribParameterfvNV) (proc)) (target, index, pname, params) )
+/* glNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glNormal3fVertex3fSUN) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glNormal3fVertex3fSUN (void);
+#define      gdk_gl_glNormal3fVertex3fSUN(proc, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glNormal3fVertex3fSUN) (proc)) (nx, ny, nz, x, y, z) )
 
-/* glEvalMapsNV */
-typedef void (APIENTRY * GdkGLProc_glEvalMapsNV) (GLenum target, GLenum mode);
-GdkGLProc    gdk_gl_get_glEvalMapsNV (void);
-#define      gdk_gl_glEvalMapsNV(proc, target, mode) \
-  ( ((GdkGLProc_glEvalMapsNV) (proc)) (target, mode) )
+/* glNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glNormal3fVertex3fvSUN) (const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glNormal3fVertex3fvSUN(proc, n, v) \
+  ( ((GdkGLProc_glNormal3fVertex3fvSUN) (proc)) (n, v) )
 
-/* proc struct */
+/* glColor4fNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glColor4fNormal3fVertex3fSUN) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glColor4fNormal3fVertex3fSUN (void);
+#define      gdk_gl_glColor4fNormal3fVertex3fSUN(proc, r, g, b, a, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glColor4fNormal3fVertex3fSUN) (proc)) (r, g, b, a, nx, ny, nz, x, y, z) )
 
-typedef struct _GdkGL_GL_NV_evaluators GdkGL_GL_NV_evaluators;
+/* glColor4fNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glColor4fNormal3fVertex3fvSUN) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glColor4fNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glColor4fNormal3fVertex3fvSUN(proc, c, n, v) \
+  ( ((GdkGLProc_glColor4fNormal3fVertex3fvSUN) (proc)) (c, n, v) )
 
-struct _GdkGL_GL_NV_evaluators
-{
-  GdkGLProc_glMapControlPointsNV glMapControlPointsNV;
-  GdkGLProc_glMapParameterivNV glMapParameterivNV;
-  GdkGLProc_glMapParameterfvNV glMapParameterfvNV;
-  GdkGLProc_glGetMapControlPointsNV glGetMapControlPointsNV;
-  GdkGLProc_glGetMapParameterivNV glGetMapParameterivNV;
-  GdkGLProc_glGetMapParameterfvNV glGetMapParameterfvNV;
-  GdkGLProc_glGetMapAttribParameterivNV glGetMapAttribParameterivNV;
-  GdkGLProc_glGetMapAttribParameterfvNV glGetMapAttribParameterfvNV;
-  GdkGLProc_glEvalMapsNV glEvalMapsNV;
-};
+/* glTexCoord2fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glTexCoord2fVertex3fSUN (void);
+#define      gdk_gl_glTexCoord2fVertex3fSUN(proc, s, t, x, y, z) \
+  ( ((GdkGLProc_glTexCoord2fVertex3fSUN) (proc)) (s, t, x, y, z) )
 
-GdkGL_GL_NV_evaluators *gdk_gl_get_GL_NV_evaluators (void);
+/* glTexCoord2fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fVertex3fvSUN) (const GLfloat *tc, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTexCoord2fVertex3fvSUN (void);
+#define      gdk_gl_glTexCoord2fVertex3fvSUN(proc, tc, v) \
+  ( ((GdkGLProc_glTexCoord2fVertex3fvSUN) (proc)) (tc, v) )
 
-/*
- * GL_NV_register_combiners2
- */
+/* glTexCoord4fVertex4fSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord4fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glTexCoord4fVertex4fSUN (void);
+#define      gdk_gl_glTexCoord4fVertex4fSUN(proc, s, t, p, q, x, y, z, w) \
+  ( ((GdkGLProc_glTexCoord4fVertex4fSUN) (proc)) (s, t, p, q, x, y, z, w) )
 
-/* glCombinerStageParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glCombinerStageParameterfvNV) (GLenum stage, GLenum pname, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glCombinerStageParameterfvNV (void);
-#define      gdk_gl_glCombinerStageParameterfvNV(proc, stage, pname, params) \
-  ( ((GdkGLProc_glCombinerStageParameterfvNV) (proc)) (stage, pname, params) )
+/* glTexCoord4fVertex4fvSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord4fVertex4fvSUN) (const GLfloat *tc, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTexCoord4fVertex4fvSUN (void);
+#define      gdk_gl_glTexCoord4fVertex4fvSUN(proc, tc, v) \
+  ( ((GdkGLProc_glTexCoord4fVertex4fvSUN) (proc)) (tc, v) )
 
-/* glGetCombinerStageParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetCombinerStageParameterfvNV) (GLenum stage, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetCombinerStageParameterfvNV (void);
-#define      gdk_gl_glGetCombinerStageParameterfvNV(proc, stage, pname, params) \
-  ( ((GdkGLProc_glGetCombinerStageParameterfvNV) (proc)) (stage, pname, params) )
+/* glTexCoord2fColor4ubVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glTexCoord2fColor4ubVertex3fSUN (void);
+#define      gdk_gl_glTexCoord2fColor4ubVertex3fSUN(proc, s, t, r, g, b, a, x, y, z) \
+  ( ((GdkGLProc_glTexCoord2fColor4ubVertex3fSUN) (proc)) (s, t, r, g, b, a, x, y, z) )
 
-/* proc struct */
+/* glTexCoord2fColor4ubVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTexCoord2fColor4ubVertex3fvSUN (void);
+#define      gdk_gl_glTexCoord2fColor4ubVertex3fvSUN(proc, tc, c, v) \
+  ( ((GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN) (proc)) (tc, c, v) )
 
-typedef struct _GdkGL_GL_NV_register_combiners2 GdkGL_GL_NV_register_combiners2;
+/* glTexCoord2fColor3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fColor3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glTexCoord2fColor3fVertex3fSUN (void);
+#define      gdk_gl_glTexCoord2fColor3fVertex3fSUN(proc, s, t, r, g, b, x, y, z) \
+  ( ((GdkGLProc_glTexCoord2fColor3fVertex3fSUN) (proc)) (s, t, r, g, b, x, y, z) )
 
-struct _GdkGL_GL_NV_register_combiners2
-{
-  GdkGLProc_glCombinerStageParameterfvNV glCombinerStageParameterfvNV;
-  GdkGLProc_glGetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV;
-};
+/* glTexCoord2fColor3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTexCoord2fColor3fVertex3fvSUN (void);
+#define      gdk_gl_glTexCoord2fColor3fVertex3fvSUN(proc, tc, c, v) \
+  ( ((GdkGLProc_glTexCoord2fColor3fVertex3fvSUN) (proc)) (tc, c, v) )
 
-GdkGL_GL_NV_register_combiners2 *gdk_gl_get_GL_NV_register_combiners2 (void);
+/* glTexCoord2fNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glTexCoord2fNormal3fVertex3fSUN (void);
+#define      gdk_gl_glTexCoord2fNormal3fVertex3fSUN(proc, s, t, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glTexCoord2fNormal3fVertex3fSUN) (proc)) (s, t, nx, ny, nz, x, y, z) )
 
-/*
- * GL_NV_vertex_program
- */
+/* glTexCoord2fNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTexCoord2fNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glTexCoord2fNormal3fVertex3fvSUN(proc, tc, n, v) \
+  ( ((GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN) (proc)) (tc, n, v) )
 
-/* glAreProgramsResidentNV */
-typedef GLboolean (APIENTRY * GdkGLProc_glAreProgramsResidentNV) (GLsizei n, const GLuint *programs, GLboolean *residences);
-GdkGLProc    gdk_gl_get_glAreProgramsResidentNV (void);
-#define      gdk_gl_glAreProgramsResidentNV(proc, n, programs, residences) \
-  ( ((GdkGLProc_glAreProgramsResidentNV) (proc)) (n, programs, residences) )
+/* glTexCoord2fColor4fNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fSUN (void);
+#define      gdk_gl_glTexCoord2fColor4fNormal3fVertex3fSUN(proc, s, t, r, g, b, a, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN) (proc)) (s, t, r, g, b, a, nx, ny, nz, x, y, z) )
 
-/* glBindProgramNV */
-typedef void (APIENTRY * GdkGLProc_glBindProgramNV) (GLenum target, GLuint id);
-GdkGLProc    gdk_gl_get_glBindProgramNV (void);
-#define      gdk_gl_glBindProgramNV(proc, target, id) \
-  ( ((GdkGLProc_glBindProgramNV) (proc)) (target, id) )
+/* glTexCoord2fColor4fNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTexCoord2fColor4fNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glTexCoord2fColor4fNormal3fVertex3fvSUN(proc, tc, c, n, v) \
+  ( ((GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN) (proc)) (tc, c, n, v) )
 
-/* glDeleteProgramsNV */
-typedef void (APIENTRY * GdkGLProc_glDeleteProgramsNV) (GLsizei n, const GLuint *programs);
-GdkGLProc    gdk_gl_get_glDeleteProgramsNV (void);
-#define      gdk_gl_glDeleteProgramsNV(proc, n, programs) \
-  ( ((GdkGLProc_glDeleteProgramsNV) (proc)) (n, programs) )
+/* glTexCoord4fColor4fNormal3fVertex4fSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fSUN (void);
+#define      gdk_gl_glTexCoord4fColor4fNormal3fVertex4fSUN(proc, s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) \
+  ( ((GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN) (proc)) (s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) )
 
-/* glExecuteProgramNV */
-typedef void (APIENTRY * GdkGLProc_glExecuteProgramNV) (GLenum target, GLuint id, const GLfloat *params);
-GdkGLProc    gdk_gl_get_glExecuteProgramNV (void);
-#define      gdk_gl_glExecuteProgramNV(proc, target, id, params) \
-  ( ((GdkGLProc_glExecuteProgramNV) (proc)) (target, id, params) )
+/* glTexCoord4fColor4fNormal3fVertex4fvSUN */
+typedef void (APIENTRYP GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glTexCoord4fColor4fNormal3fVertex4fvSUN (void);
+#define      gdk_gl_glTexCoord4fColor4fNormal3fVertex4fvSUN(proc, tc, c, n, v) \
+  ( ((GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN) (proc)) (tc, c, n, v) )
 
-/* glGenProgramsNV */
-typedef void (APIENTRY * GdkGLProc_glGenProgramsNV) (GLsizei n, GLuint *programs);
-GdkGLProc    gdk_gl_get_glGenProgramsNV (void);
-#define      gdk_gl_glGenProgramsNV(proc, n, programs) \
-  ( ((GdkGLProc_glGenProgramsNV) (proc)) (n, programs) )
+/* glReplacementCodeuiVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiVertex3fSUN) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiVertex3fSUN(proc, rc, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiVertex3fSUN) (proc)) (rc, x, y, z) )
 
-/* glGetProgramParameterdvNV */
-typedef void (APIENTRY * GdkGLProc_glGetProgramParameterdvNV) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
-GdkGLProc    gdk_gl_get_glGetProgramParameterdvNV (void);
-#define      gdk_gl_glGetProgramParameterdvNV(proc, target, index, pname, params) \
-  ( ((GdkGLProc_glGetProgramParameterdvNV) (proc)) (target, index, pname, params) )
+/* glReplacementCodeuiVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiVertex3fvSUN) (const GLuint *rc, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiVertex3fvSUN(proc, rc, v) \
+  ( ((GdkGLProc_glReplacementCodeuiVertex3fvSUN) (proc)) (rc, v) )
 
-/* glGetProgramParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetProgramParameterfvNV) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetProgramParameterfvNV (void);
-#define      gdk_gl_glGetProgramParameterfvNV(proc, target, index, pname, params) \
-  ( ((GdkGLProc_glGetProgramParameterfvNV) (proc)) (target, index, pname, params) )
+/* glReplacementCodeuiColor4ubVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4ubVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiColor4ubVertex3fSUN(proc, rc, r, g, b, a, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN) (proc)) (rc, r, g, b, a, x, y, z) )
 
-/* glGetProgramivNV */
-typedef void (APIENTRY * GdkGLProc_glGetProgramivNV) (GLuint id, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetProgramivNV (void);
-#define      gdk_gl_glGetProgramivNV(proc, id, pname, params) \
-  ( ((GdkGLProc_glGetProgramivNV) (proc)) (id, pname, params) )
+/* glReplacementCodeuiColor4ubVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4ubVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiColor4ubVertex3fvSUN(proc, rc, c, v) \
+  ( ((GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN) (proc)) (rc, c, v) )
 
-/* glGetProgramStringNV */
-typedef void (APIENTRY * GdkGLProc_glGetProgramStringNV) (GLuint id, GLenum pname, GLubyte *program);
-GdkGLProc    gdk_gl_get_glGetProgramStringNV (void);
-#define      gdk_gl_glGetProgramStringNV(proc, id, pname, program) \
-  ( ((GdkGLProc_glGetProgramStringNV) (proc)) (id, pname, program) )
+/* glReplacementCodeuiColor3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiColor3fVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiColor3fVertex3fSUN(proc, rc, r, g, b, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN) (proc)) (rc, r, g, b, x, y, z) )
 
-/* glGetTrackMatrixivNV */
-typedef void (APIENTRY * GdkGLProc_glGetTrackMatrixivNV) (GLenum target, GLuint address, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetTrackMatrixivNV (void);
-#define      gdk_gl_glGetTrackMatrixivNV(proc, target, address, pname, params) \
-  ( ((GdkGLProc_glGetTrackMatrixivNV) (proc)) (target, address, pname, params) )
+/* glReplacementCodeuiColor3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiColor3fVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiColor3fVertex3fvSUN(proc, rc, c, v) \
+  ( ((GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN) (proc)) (rc, c, v) )
 
-/* glGetVertexAttribdvNV */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribdvNV) (GLuint index, GLenum pname, GLdouble *params);
-GdkGLProc    gdk_gl_get_glGetVertexAttribdvNV (void);
-#define      gdk_gl_glGetVertexAttribdvNV(proc, index, pname, params) \
-  ( ((GdkGLProc_glGetVertexAttribdvNV) (proc)) (index, pname, params) )
+/* glReplacementCodeuiNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiNormal3fVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiNormal3fVertex3fSUN(proc, rc, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN) (proc)) (rc, nx, ny, nz, x, y, z) )
 
-/* glGetVertexAttribfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribfvNV) (GLuint index, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetVertexAttribfvNV (void);
-#define      gdk_gl_glGetVertexAttribfvNV(proc, index, pname, params) \
-  ( ((GdkGLProc_glGetVertexAttribfvNV) (proc)) (index, pname, params) )
+/* glReplacementCodeuiNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiNormal3fVertex3fvSUN(proc, rc, n, v) \
+  ( ((GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN) (proc)) (rc, n, v) )
 
-/* glGetVertexAttribivNV */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribivNV) (GLuint index, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetVertexAttribivNV (void);
-#define      gdk_gl_glGetVertexAttribivNV(proc, index, pname, params) \
-  ( ((GdkGLProc_glGetVertexAttribivNV) (proc)) (index, pname, params) )
+/* glReplacementCodeuiColor4fNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiColor4fNormal3fVertex3fSUN(proc, rc, r, g, b, a, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN) (proc)) (rc, r, g, b, a, nx, ny, nz, x, y, z) )
 
-/* glGetVertexAttribPointervNV */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribPointervNV) (GLuint index, GLenum pname, GLvoid* *pointer);
-GdkGLProc    gdk_gl_get_glGetVertexAttribPointervNV (void);
-#define      gdk_gl_glGetVertexAttribPointervNV(proc, index, pname, pointer) \
-  ( ((GdkGLProc_glGetVertexAttribPointervNV) (proc)) (index, pname, pointer) )
+/* glReplacementCodeuiColor4fNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiColor4fNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(proc, rc, c, n, v) \
+  ( ((GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) (proc)) (rc, c, n, v) )
 
-/* glIsProgramNV */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsProgramNV) (GLuint id);
-GdkGLProc    gdk_gl_get_glIsProgramNV (void);
-#define      gdk_gl_glIsProgramNV(proc, id) \
-  ( ((GdkGLProc_glIsProgramNV) (proc)) (id) )
+/* glReplacementCodeuiTexCoord2fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiTexCoord2fVertex3fSUN(proc, rc, s, t, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN) (proc)) (rc, s, t, x, y, z) )
 
-/* glLoadProgramNV */
-typedef void (APIENTRY * GdkGLProc_glLoadProgramNV) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
-GdkGLProc    gdk_gl_get_glLoadProgramNV (void);
-#define      gdk_gl_glLoadProgramNV(proc, target, id, len, program) \
-  ( ((GdkGLProc_glLoadProgramNV) (proc)) (target, id, len, program) )
+/* glReplacementCodeuiTexCoord2fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiTexCoord2fVertex3fvSUN(proc, rc, tc, v) \
+  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN) (proc)) (rc, tc, v) )
 
-/* glProgramParameter4dNV */
-typedef void (APIENTRY * GdkGLProc_glProgramParameter4dNV) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-GdkGLProc    gdk_gl_get_glProgramParameter4dNV (void);
-#define      gdk_gl_glProgramParameter4dNV(proc, target, index, x, y, z, w) \
-  ( ((GdkGLProc_glProgramParameter4dNV) (proc)) (target, index, x, y, z, w) )
+/* glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(proc, rc, s, t, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) (proc)) (rc, s, t, nx, ny, nz, x, y, z) )
 
-/* glProgramParameter4dvNV */
-typedef void (APIENTRY * GdkGLProc_glProgramParameter4dvNV) (GLenum target, GLuint index, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glProgramParameter4dvNV (void);
-#define      gdk_gl_glProgramParameter4dvNV(proc, target, index, v) \
-  ( ((GdkGLProc_glProgramParameter4dvNV) (proc)) (target, index, v) )
-
-/* glProgramParameter4fNV */
-typedef void (APIENTRY * GdkGLProc_glProgramParameter4fNV) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GdkGLProc    gdk_gl_get_glProgramParameter4fNV (void);
-#define      gdk_gl_glProgramParameter4fNV(proc, target, index, x, y, z, w) \
-  ( ((GdkGLProc_glProgramParameter4fNV) (proc)) (target, index, x, y, z, w) )
+/* glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(proc, rc, tc, n, v) \
+  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) (proc)) (rc, tc, n, v) )
 
-/* glProgramParameter4fvNV */
-typedef void (APIENTRY * GdkGLProc_glProgramParameter4fvNV) (GLenum target, GLuint index, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glProgramParameter4fvNV (void);
-#define      gdk_gl_glProgramParameter4fvNV(proc, target, index, v) \
-  ( ((GdkGLProc_glProgramParameter4fvNV) (proc)) (target, index, v) )
+/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (void);
+#define      gdk_gl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(proc, rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) \
+  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) (proc)) (rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) )
 
-/* glProgramParameters4dvNV */
-typedef void (APIENTRY * GdkGLProc_glProgramParameters4dvNV) (GLenum target, GLuint index, GLuint count, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glProgramParameters4dvNV (void);
-#define      gdk_gl_glProgramParameters4dvNV(proc, target, index, count, v) \
-  ( ((GdkGLProc_glProgramParameters4dvNV) (proc)) (target, index, count, v) )
+/* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN */
+typedef void (APIENTRYP GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (void);
+#define      gdk_gl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(proc, rc, tc, c, n, v) \
+  ( ((GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) (proc)) (rc, tc, c, n, v) )
 
-/* glProgramParameters4fvNV */
-typedef void (APIENTRY * GdkGLProc_glProgramParameters4fvNV) (GLenum target, GLuint index, GLuint count, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glProgramParameters4fvNV (void);
-#define      gdk_gl_glProgramParameters4fvNV(proc, target, index, count, v) \
-  ( ((GdkGLProc_glProgramParameters4fvNV) (proc)) (target, index, count, v) )
+/* proc struct */
 
-/* glRequestResidentProgramsNV */
-typedef void (APIENTRY * GdkGLProc_glRequestResidentProgramsNV) (GLsizei n, const GLuint *programs);
-GdkGLProc    gdk_gl_get_glRequestResidentProgramsNV (void);
-#define      gdk_gl_glRequestResidentProgramsNV(proc, n, programs) \
-  ( ((GdkGLProc_glRequestResidentProgramsNV) (proc)) (n, programs) )
+typedef struct _GdkGL_GL_SUN_vertex GdkGL_GL_SUN_vertex;
 
-/* glTrackMatrixNV */
-typedef void (APIENTRY * GdkGLProc_glTrackMatrixNV) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
-GdkGLProc    gdk_gl_get_glTrackMatrixNV (void);
-#define      gdk_gl_glTrackMatrixNV(proc, target, address, matrix, transform) \
-  ( ((GdkGLProc_glTrackMatrixNV) (proc)) (target, address, matrix, transform) )
+struct _GdkGL_GL_SUN_vertex
+{
+  GdkGLProc_glColor4ubVertex2fSUN glColor4ubVertex2fSUN;
+  GdkGLProc_glColor4ubVertex2fvSUN glColor4ubVertex2fvSUN;
+  GdkGLProc_glColor4ubVertex3fSUN glColor4ubVertex3fSUN;
+  GdkGLProc_glColor4ubVertex3fvSUN glColor4ubVertex3fvSUN;
+  GdkGLProc_glColor3fVertex3fSUN glColor3fVertex3fSUN;
+  GdkGLProc_glColor3fVertex3fvSUN glColor3fVertex3fvSUN;
+  GdkGLProc_glNormal3fVertex3fSUN glNormal3fVertex3fSUN;
+  GdkGLProc_glNormal3fVertex3fvSUN glNormal3fVertex3fvSUN;
+  GdkGLProc_glColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN;
+  GdkGLProc_glColor4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN;
+  GdkGLProc_glTexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN;
+  GdkGLProc_glTexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN;
+  GdkGLProc_glTexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN;
+  GdkGLProc_glTexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN;
+  GdkGLProc_glTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN;
+  GdkGLProc_glTexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN;
+  GdkGLProc_glTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN;
+  GdkGLProc_glTexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN;
+  GdkGLProc_glTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN;
+  GdkGLProc_glTexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN;
+  GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN;
+  GdkGLProc_glTexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN;
+  GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN;
+  GdkGLProc_glTexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN;
+  GdkGLProc_glReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN;
+  GdkGLProc_glReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN;
+  GdkGLProc_glReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN;
+  GdkGLProc_glReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN;
+  GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
+  GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN;
+  GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
+  GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
+  GdkGLProc_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
+};
 
-/* glVertexAttribPointerNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribPointerNV) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glVertexAttribPointerNV (void);
-#define      gdk_gl_glVertexAttribPointerNV(proc, index, fsize, type, stride, pointer) \
-  ( ((GdkGLProc_glVertexAttribPointerNV) (proc)) (index, fsize, type, stride, pointer) )
+GdkGL_GL_SUN_vertex *gdk_gl_get_GL_SUN_vertex (void);
 
-/* glVertexAttrib1dNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1dNV) (GLuint index, GLdouble x);
-GdkGLProc    gdk_gl_get_glVertexAttrib1dNV (void);
-#define      gdk_gl_glVertexAttrib1dNV(proc, index, x) \
-  ( ((GdkGLProc_glVertexAttrib1dNV) (proc)) (index, x) )
+/*
+ * GL_EXT_blend_func_separate
+ */
 
-/* glVertexAttrib1dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1dvNV) (GLuint index, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib1dvNV (void);
-#define      gdk_gl_glVertexAttrib1dvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib1dvNV) (proc)) (index, v) )
+/* glBlendFuncSeparateEXT */
+typedef void (APIENTRYP GdkGLProc_glBlendFuncSeparateEXT) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+GdkGLProc    gdk_gl_get_glBlendFuncSeparateEXT (void);
+#define      gdk_gl_glBlendFuncSeparateEXT(proc, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) \
+  ( ((GdkGLProc_glBlendFuncSeparateEXT) (proc)) (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) )
 
-/* glVertexAttrib1fNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1fNV) (GLuint index, GLfloat x);
-GdkGLProc    gdk_gl_get_glVertexAttrib1fNV (void);
-#define      gdk_gl_glVertexAttrib1fNV(proc, index, x) \
-  ( ((GdkGLProc_glVertexAttrib1fNV) (proc)) (index, x) )
+/* proc struct */
 
-/* glVertexAttrib1fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1fvNV) (GLuint index, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib1fvNV (void);
-#define      gdk_gl_glVertexAttrib1fvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib1fvNV) (proc)) (index, v) )
+typedef struct _GdkGL_GL_EXT_blend_func_separate GdkGL_GL_EXT_blend_func_separate;
 
-/* glVertexAttrib1sNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1sNV) (GLuint index, GLshort x);
-GdkGLProc    gdk_gl_get_glVertexAttrib1sNV (void);
-#define      gdk_gl_glVertexAttrib1sNV(proc, index, x) \
-  ( ((GdkGLProc_glVertexAttrib1sNV) (proc)) (index, x) )
+struct _GdkGL_GL_EXT_blend_func_separate
+{
+  GdkGLProc_glBlendFuncSeparateEXT glBlendFuncSeparateEXT;
+};
 
-/* glVertexAttrib1svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1svNV) (GLuint index, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib1svNV (void);
-#define      gdk_gl_glVertexAttrib1svNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib1svNV) (proc)) (index, v) )
+GdkGL_GL_EXT_blend_func_separate *gdk_gl_get_GL_EXT_blend_func_separate (void);
 
-/* glVertexAttrib2dNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2dNV) (GLuint index, GLdouble x, GLdouble y);
-GdkGLProc    gdk_gl_get_glVertexAttrib2dNV (void);
-#define      gdk_gl_glVertexAttrib2dNV(proc, index, x, y) \
-  ( ((GdkGLProc_glVertexAttrib2dNV) (proc)) (index, x, y) )
+/*
+ * GL_INGR_blend_func_separate
+ */
 
-/* glVertexAttrib2dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2dvNV) (GLuint index, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib2dvNV (void);
-#define      gdk_gl_glVertexAttrib2dvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib2dvNV) (proc)) (index, v) )
+/* glBlendFuncSeparateINGR */
+typedef void (APIENTRYP GdkGLProc_glBlendFuncSeparateINGR) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+GdkGLProc    gdk_gl_get_glBlendFuncSeparateINGR (void);
+#define      gdk_gl_glBlendFuncSeparateINGR(proc, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) \
+  ( ((GdkGLProc_glBlendFuncSeparateINGR) (proc)) (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) )
 
-/* glVertexAttrib2fNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2fNV) (GLuint index, GLfloat x, GLfloat y);
-GdkGLProc    gdk_gl_get_glVertexAttrib2fNV (void);
-#define      gdk_gl_glVertexAttrib2fNV(proc, index, x, y) \
-  ( ((GdkGLProc_glVertexAttrib2fNV) (proc)) (index, x, y) )
+/* proc struct */
 
-/* glVertexAttrib2fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2fvNV) (GLuint index, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib2fvNV (void);
-#define      gdk_gl_glVertexAttrib2fvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib2fvNV) (proc)) (index, v) )
+typedef struct _GdkGL_GL_INGR_blend_func_separate GdkGL_GL_INGR_blend_func_separate;
 
-/* glVertexAttrib2sNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2sNV) (GLuint index, GLshort x, GLshort y);
-GdkGLProc    gdk_gl_get_glVertexAttrib2sNV (void);
-#define      gdk_gl_glVertexAttrib2sNV(proc, index, x, y) \
-  ( ((GdkGLProc_glVertexAttrib2sNV) (proc)) (index, x, y) )
+struct _GdkGL_GL_INGR_blend_func_separate
+{
+  GdkGLProc_glBlendFuncSeparateINGR glBlendFuncSeparateINGR;
+};
 
-/* glVertexAttrib2svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2svNV) (GLuint index, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib2svNV (void);
-#define      gdk_gl_glVertexAttrib2svNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib2svNV) (proc)) (index, v) )
+GdkGL_GL_INGR_blend_func_separate *gdk_gl_get_GL_INGR_blend_func_separate (void);
 
-/* glVertexAttrib3dNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
-GdkGLProc    gdk_gl_get_glVertexAttrib3dNV (void);
-#define      gdk_gl_glVertexAttrib3dNV(proc, index, x, y, z) \
-  ( ((GdkGLProc_glVertexAttrib3dNV) (proc)) (index, x, y, z) )
+/*
+ * GL_EXT_vertex_weighting
+ */
 
-/* glVertexAttrib3dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3dvNV) (GLuint index, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib3dvNV (void);
-#define      gdk_gl_glVertexAttrib3dvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib3dvNV) (proc)) (index, v) )
+/* glVertexWeightfEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexWeightfEXT) (GLfloat weight);
+GdkGLProc    gdk_gl_get_glVertexWeightfEXT (void);
+#define      gdk_gl_glVertexWeightfEXT(proc, weight) \
+  ( ((GdkGLProc_glVertexWeightfEXT) (proc)) (weight) )
 
-/* glVertexAttrib3fNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glVertexAttrib3fNV (void);
-#define      gdk_gl_glVertexAttrib3fNV(proc, index, x, y, z) \
-  ( ((GdkGLProc_glVertexAttrib3fNV) (proc)) (index, x, y, z) )
+/* glVertexWeightfvEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexWeightfvEXT) (const GLfloat *weight);
+GdkGLProc    gdk_gl_get_glVertexWeightfvEXT (void);
+#define      gdk_gl_glVertexWeightfvEXT(proc, weight) \
+  ( ((GdkGLProc_glVertexWeightfvEXT) (proc)) (weight) )
 
-/* glVertexAttrib3fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3fvNV) (GLuint index, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib3fvNV (void);
-#define      gdk_gl_glVertexAttrib3fvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib3fvNV) (proc)) (index, v) )
+/* glVertexWeightPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexWeightPointerEXT) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexWeightPointerEXT (void);
+#define      gdk_gl_glVertexWeightPointerEXT(proc, size, type, stride, pointer) \
+  ( ((GdkGLProc_glVertexWeightPointerEXT) (proc)) (size, type, stride, pointer) )
 
-/* glVertexAttrib3sNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3sNV) (GLuint index, GLshort x, GLshort y, GLshort z);
-GdkGLProc    gdk_gl_get_glVertexAttrib3sNV (void);
-#define      gdk_gl_glVertexAttrib3sNV(proc, index, x, y, z) \
-  ( ((GdkGLProc_glVertexAttrib3sNV) (proc)) (index, x, y, z) )
+/* proc struct */
 
-/* glVertexAttrib3svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3svNV) (GLuint index, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib3svNV (void);
-#define      gdk_gl_glVertexAttrib3svNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib3svNV) (proc)) (index, v) )
+typedef struct _GdkGL_GL_EXT_vertex_weighting GdkGL_GL_EXT_vertex_weighting;
 
-/* glVertexAttrib4dNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-GdkGLProc    gdk_gl_get_glVertexAttrib4dNV (void);
-#define      gdk_gl_glVertexAttrib4dNV(proc, index, x, y, z, w) \
-  ( ((GdkGLProc_glVertexAttrib4dNV) (proc)) (index, x, y, z, w) )
+struct _GdkGL_GL_EXT_vertex_weighting
+{
+  GdkGLProc_glVertexWeightfEXT glVertexWeightfEXT;
+  GdkGLProc_glVertexWeightfvEXT glVertexWeightfvEXT;
+  GdkGLProc_glVertexWeightPointerEXT glVertexWeightPointerEXT;
+};
 
-/* glVertexAttrib4dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4dvNV) (GLuint index, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib4dvNV (void);
-#define      gdk_gl_glVertexAttrib4dvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib4dvNV) (proc)) (index, v) )
+GdkGL_GL_EXT_vertex_weighting *gdk_gl_get_GL_EXT_vertex_weighting (void);
 
-/* glVertexAttrib4fNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GdkGLProc    gdk_gl_get_glVertexAttrib4fNV (void);
-#define      gdk_gl_glVertexAttrib4fNV(proc, index, x, y, z, w) \
-  ( ((GdkGLProc_glVertexAttrib4fNV) (proc)) (index, x, y, z, w) )
+/*
+ * GL_NV_vertex_array_range
+ */
 
-/* glVertexAttrib4fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4fvNV) (GLuint index, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib4fvNV (void);
-#define      gdk_gl_glVertexAttrib4fvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib4fvNV) (proc)) (index, v) )
+/* glFlushVertexArrayRangeNV */
+typedef void (APIENTRYP GdkGLProc_glFlushVertexArrayRangeNV) (void);
+GdkGLProc    gdk_gl_get_glFlushVertexArrayRangeNV (void);
+#define      gdk_gl_glFlushVertexArrayRangeNV(proc) \
+  ( ((GdkGLProc_glFlushVertexArrayRangeNV) (proc)) () )
 
-/* glVertexAttrib4sNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4sNV) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
-GdkGLProc    gdk_gl_get_glVertexAttrib4sNV (void);
-#define      gdk_gl_glVertexAttrib4sNV(proc, index, x, y, z, w) \
-  ( ((GdkGLProc_glVertexAttrib4sNV) (proc)) (index, x, y, z, w) )
+/* glVertexArrayRangeNV */
+typedef void (APIENTRYP GdkGLProc_glVertexArrayRangeNV) (GLsizei length, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexArrayRangeNV (void);
+#define      gdk_gl_glVertexArrayRangeNV(proc, length, pointer) \
+  ( ((GdkGLProc_glVertexArrayRangeNV) (proc)) (length, pointer) )
 
-/* glVertexAttrib4svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4svNV) (GLuint index, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib4svNV (void);
-#define      gdk_gl_glVertexAttrib4svNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib4svNV) (proc)) (index, v) )
+/* proc struct */
 
-/* glVertexAttrib4ubNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4ubNV) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
-GdkGLProc    gdk_gl_get_glVertexAttrib4ubNV (void);
-#define      gdk_gl_glVertexAttrib4ubNV(proc, index, x, y, z, w) \
-  ( ((GdkGLProc_glVertexAttrib4ubNV) (proc)) (index, x, y, z, w) )
+typedef struct _GdkGL_GL_NV_vertex_array_range GdkGL_GL_NV_vertex_array_range;
 
-/* glVertexAttrib4ubvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4ubvNV) (GLuint index, const GLubyte *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib4ubvNV (void);
-#define      gdk_gl_glVertexAttrib4ubvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib4ubvNV) (proc)) (index, v) )
+struct _GdkGL_GL_NV_vertex_array_range
+{
+  GdkGLProc_glFlushVertexArrayRangeNV glFlushVertexArrayRangeNV;
+  GdkGLProc_glVertexArrayRangeNV glVertexArrayRangeNV;
+};
 
-/* glVertexAttribs1dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs1dvNV) (GLuint index, GLsizei count, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs1dvNV (void);
-#define      gdk_gl_glVertexAttribs1dvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs1dvNV) (proc)) (index, count, v) )
+GdkGL_GL_NV_vertex_array_range *gdk_gl_get_GL_NV_vertex_array_range (void);
 
-/* glVertexAttribs1fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs1fvNV) (GLuint index, GLsizei count, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs1fvNV (void);
-#define      gdk_gl_glVertexAttribs1fvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs1fvNV) (proc)) (index, count, v) )
+/*
+ * GL_NV_register_combiners
+ */
 
-/* glVertexAttribs1svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs1svNV) (GLuint index, GLsizei count, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs1svNV (void);
-#define      gdk_gl_glVertexAttribs1svNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs1svNV) (proc)) (index, count, v) )
+/* glCombinerParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glCombinerParameterfvNV) (GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glCombinerParameterfvNV (void);
+#define      gdk_gl_glCombinerParameterfvNV(proc, pname, params) \
+  ( ((GdkGLProc_glCombinerParameterfvNV) (proc)) (pname, params) )
 
-/* glVertexAttribs2dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs2dvNV) (GLuint index, GLsizei count, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs2dvNV (void);
-#define      gdk_gl_glVertexAttribs2dvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs2dvNV) (proc)) (index, count, v) )
+/* glCombinerParameterfNV */
+typedef void (APIENTRYP GdkGLProc_glCombinerParameterfNV) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glCombinerParameterfNV (void);
+#define      gdk_gl_glCombinerParameterfNV(proc, pname, param) \
+  ( ((GdkGLProc_glCombinerParameterfNV) (proc)) (pname, param) )
 
-/* glVertexAttribs2fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs2fvNV) (GLuint index, GLsizei count, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs2fvNV (void);
-#define      gdk_gl_glVertexAttribs2fvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs2fvNV) (proc)) (index, count, v) )
+/* glCombinerParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glCombinerParameterivNV) (GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glCombinerParameterivNV (void);
+#define      gdk_gl_glCombinerParameterivNV(proc, pname, params) \
+  ( ((GdkGLProc_glCombinerParameterivNV) (proc)) (pname, params) )
 
-/* glVertexAttribs2svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs2svNV) (GLuint index, GLsizei count, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs2svNV (void);
-#define      gdk_gl_glVertexAttribs2svNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs2svNV) (proc)) (index, count, v) )
+/* glCombinerParameteriNV */
+typedef void (APIENTRYP GdkGLProc_glCombinerParameteriNV) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glCombinerParameteriNV (void);
+#define      gdk_gl_glCombinerParameteriNV(proc, pname, param) \
+  ( ((GdkGLProc_glCombinerParameteriNV) (proc)) (pname, param) )
 
-/* glVertexAttribs3dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs3dvNV) (GLuint index, GLsizei count, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs3dvNV (void);
-#define      gdk_gl_glVertexAttribs3dvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs3dvNV) (proc)) (index, count, v) )
+/* glCombinerInputNV */
+typedef void (APIENTRYP GdkGLProc_glCombinerInputNV) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+GdkGLProc    gdk_gl_get_glCombinerInputNV (void);
+#define      gdk_gl_glCombinerInputNV(proc, stage, portion, variable, input, mapping, componentUsage) \
+  ( ((GdkGLProc_glCombinerInputNV) (proc)) (stage, portion, variable, input, mapping, componentUsage) )
 
-/* glVertexAttribs3fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs3fvNV) (GLuint index, GLsizei count, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs3fvNV (void);
-#define      gdk_gl_glVertexAttribs3fvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs3fvNV) (proc)) (index, count, v) )
+/* glCombinerOutputNV */
+typedef void (APIENTRYP GdkGLProc_glCombinerOutputNV) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
+GdkGLProc    gdk_gl_get_glCombinerOutputNV (void);
+#define      gdk_gl_glCombinerOutputNV(proc, stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) \
+  ( ((GdkGLProc_glCombinerOutputNV) (proc)) (stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) )
 
-/* glVertexAttribs3svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs3svNV) (GLuint index, GLsizei count, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs3svNV (void);
-#define      gdk_gl_glVertexAttribs3svNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs3svNV) (proc)) (index, count, v) )
+/* glFinalCombinerInputNV */
+typedef void (APIENTRYP GdkGLProc_glFinalCombinerInputNV) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+GdkGLProc    gdk_gl_get_glFinalCombinerInputNV (void);
+#define      gdk_gl_glFinalCombinerInputNV(proc, variable, input, mapping, componentUsage) \
+  ( ((GdkGLProc_glFinalCombinerInputNV) (proc)) (variable, input, mapping, componentUsage) )
 
-/* glVertexAttribs4dvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs4dvNV) (GLuint index, GLsizei count, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs4dvNV (void);
-#define      gdk_gl_glVertexAttribs4dvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs4dvNV) (proc)) (index, count, v) )
+/* glGetCombinerInputParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetCombinerInputParameterfvNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetCombinerInputParameterfvNV (void);
+#define      gdk_gl_glGetCombinerInputParameterfvNV(proc, stage, portion, variable, pname, params) \
+  ( ((GdkGLProc_glGetCombinerInputParameterfvNV) (proc)) (stage, portion, variable, pname, params) )
 
-/* glVertexAttribs4fvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs4fvNV) (GLuint index, GLsizei count, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs4fvNV (void);
-#define      gdk_gl_glVertexAttribs4fvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs4fvNV) (proc)) (index, count, v) )
+/* glGetCombinerInputParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glGetCombinerInputParameterivNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetCombinerInputParameterivNV (void);
+#define      gdk_gl_glGetCombinerInputParameterivNV(proc, stage, portion, variable, pname, params) \
+  ( ((GdkGLProc_glGetCombinerInputParameterivNV) (proc)) (stage, portion, variable, pname, params) )
 
-/* glVertexAttribs4svNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs4svNV) (GLuint index, GLsizei count, const GLshort *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs4svNV (void);
-#define      gdk_gl_glVertexAttribs4svNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs4svNV) (proc)) (index, count, v) )
+/* glGetCombinerOutputParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetCombinerOutputParameterfvNV) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetCombinerOutputParameterfvNV (void);
+#define      gdk_gl_glGetCombinerOutputParameterfvNV(proc, stage, portion, pname, params) \
+  ( ((GdkGLProc_glGetCombinerOutputParameterfvNV) (proc)) (stage, portion, pname, params) )
 
-/* glVertexAttribs4ubvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs4ubvNV) (GLuint index, GLsizei count, const GLubyte *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs4ubvNV (void);
-#define      gdk_gl_glVertexAttribs4ubvNV(proc, index, count, v) \
-  ( ((GdkGLProc_glVertexAttribs4ubvNV) (proc)) (index, count, v) )
+/* glGetCombinerOutputParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glGetCombinerOutputParameterivNV) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetCombinerOutputParameterivNV (void);
+#define      gdk_gl_glGetCombinerOutputParameterivNV(proc, stage, portion, pname, params) \
+  ( ((GdkGLProc_glGetCombinerOutputParameterivNV) (proc)) (stage, portion, pname, params) )
+
+/* glGetFinalCombinerInputParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetFinalCombinerInputParameterfvNV) (GLenum variable, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetFinalCombinerInputParameterfvNV (void);
+#define      gdk_gl_glGetFinalCombinerInputParameterfvNV(proc, variable, pname, params) \
+  ( ((GdkGLProc_glGetFinalCombinerInputParameterfvNV) (proc)) (variable, pname, params) )
+
+/* glGetFinalCombinerInputParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glGetFinalCombinerInputParameterivNV) (GLenum variable, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetFinalCombinerInputParameterivNV (void);
+#define      gdk_gl_glGetFinalCombinerInputParameterivNV(proc, variable, pname, params) \
+  ( ((GdkGLProc_glGetFinalCombinerInputParameterivNV) (proc)) (variable, pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_vertex_program GdkGL_GL_NV_vertex_program;
+typedef struct _GdkGL_GL_NV_register_combiners GdkGL_GL_NV_register_combiners;
 
-struct _GdkGL_GL_NV_vertex_program
+struct _GdkGL_GL_NV_register_combiners
 {
-  GdkGLProc_glAreProgramsResidentNV glAreProgramsResidentNV;
-  GdkGLProc_glBindProgramNV glBindProgramNV;
-  GdkGLProc_glDeleteProgramsNV glDeleteProgramsNV;
-  GdkGLProc_glExecuteProgramNV glExecuteProgramNV;
-  GdkGLProc_glGenProgramsNV glGenProgramsNV;
-  GdkGLProc_glGetProgramParameterdvNV glGetProgramParameterdvNV;
-  GdkGLProc_glGetProgramParameterfvNV glGetProgramParameterfvNV;
-  GdkGLProc_glGetProgramivNV glGetProgramivNV;
-  GdkGLProc_glGetProgramStringNV glGetProgramStringNV;
-  GdkGLProc_glGetTrackMatrixivNV glGetTrackMatrixivNV;
-  GdkGLProc_glGetVertexAttribdvNV glGetVertexAttribdvNV;
-  GdkGLProc_glGetVertexAttribfvNV glGetVertexAttribfvNV;
-  GdkGLProc_glGetVertexAttribivNV glGetVertexAttribivNV;
-  GdkGLProc_glGetVertexAttribPointervNV glGetVertexAttribPointervNV;
-  GdkGLProc_glIsProgramNV glIsProgramNV;
-  GdkGLProc_glLoadProgramNV glLoadProgramNV;
-  GdkGLProc_glProgramParameter4dNV glProgramParameter4dNV;
-  GdkGLProc_glProgramParameter4dvNV glProgramParameter4dvNV;
-  GdkGLProc_glProgramParameter4fNV glProgramParameter4fNV;
-  GdkGLProc_glProgramParameter4fvNV glProgramParameter4fvNV;
-  GdkGLProc_glProgramParameters4dvNV glProgramParameters4dvNV;
-  GdkGLProc_glProgramParameters4fvNV glProgramParameters4fvNV;
-  GdkGLProc_glRequestResidentProgramsNV glRequestResidentProgramsNV;
-  GdkGLProc_glTrackMatrixNV glTrackMatrixNV;
-  GdkGLProc_glVertexAttribPointerNV glVertexAttribPointerNV;
-  GdkGLProc_glVertexAttrib1dNV glVertexAttrib1dNV;
-  GdkGLProc_glVertexAttrib1dvNV glVertexAttrib1dvNV;
-  GdkGLProc_glVertexAttrib1fNV glVertexAttrib1fNV;
-  GdkGLProc_glVertexAttrib1fvNV glVertexAttrib1fvNV;
-  GdkGLProc_glVertexAttrib1sNV glVertexAttrib1sNV;
-  GdkGLProc_glVertexAttrib1svNV glVertexAttrib1svNV;
-  GdkGLProc_glVertexAttrib2dNV glVertexAttrib2dNV;
-  GdkGLProc_glVertexAttrib2dvNV glVertexAttrib2dvNV;
-  GdkGLProc_glVertexAttrib2fNV glVertexAttrib2fNV;
-  GdkGLProc_glVertexAttrib2fvNV glVertexAttrib2fvNV;
-  GdkGLProc_glVertexAttrib2sNV glVertexAttrib2sNV;
-  GdkGLProc_glVertexAttrib2svNV glVertexAttrib2svNV;
-  GdkGLProc_glVertexAttrib3dNV glVertexAttrib3dNV;
-  GdkGLProc_glVertexAttrib3dvNV glVertexAttrib3dvNV;
-  GdkGLProc_glVertexAttrib3fNV glVertexAttrib3fNV;
-  GdkGLProc_glVertexAttrib3fvNV glVertexAttrib3fvNV;
-  GdkGLProc_glVertexAttrib3sNV glVertexAttrib3sNV;
-  GdkGLProc_glVertexAttrib3svNV glVertexAttrib3svNV;
-  GdkGLProc_glVertexAttrib4dNV glVertexAttrib4dNV;
-  GdkGLProc_glVertexAttrib4dvNV glVertexAttrib4dvNV;
-  GdkGLProc_glVertexAttrib4fNV glVertexAttrib4fNV;
-  GdkGLProc_glVertexAttrib4fvNV glVertexAttrib4fvNV;
-  GdkGLProc_glVertexAttrib4sNV glVertexAttrib4sNV;
-  GdkGLProc_glVertexAttrib4svNV glVertexAttrib4svNV;
-  GdkGLProc_glVertexAttrib4ubNV glVertexAttrib4ubNV;
-  GdkGLProc_glVertexAttrib4ubvNV glVertexAttrib4ubvNV;
-  GdkGLProc_glVertexAttribs1dvNV glVertexAttribs1dvNV;
-  GdkGLProc_glVertexAttribs1fvNV glVertexAttribs1fvNV;
-  GdkGLProc_glVertexAttribs1svNV glVertexAttribs1svNV;
-  GdkGLProc_glVertexAttribs2dvNV glVertexAttribs2dvNV;
-  GdkGLProc_glVertexAttribs2fvNV glVertexAttribs2fvNV;
-  GdkGLProc_glVertexAttribs2svNV glVertexAttribs2svNV;
-  GdkGLProc_glVertexAttribs3dvNV glVertexAttribs3dvNV;
-  GdkGLProc_glVertexAttribs3fvNV glVertexAttribs3fvNV;
-  GdkGLProc_glVertexAttribs3svNV glVertexAttribs3svNV;
-  GdkGLProc_glVertexAttribs4dvNV glVertexAttribs4dvNV;
-  GdkGLProc_glVertexAttribs4fvNV glVertexAttribs4fvNV;
-  GdkGLProc_glVertexAttribs4svNV glVertexAttribs4svNV;
-  GdkGLProc_glVertexAttribs4ubvNV glVertexAttribs4ubvNV;
+  GdkGLProc_glCombinerParameterfvNV glCombinerParameterfvNV;
+  GdkGLProc_glCombinerParameterfNV glCombinerParameterfNV;
+  GdkGLProc_glCombinerParameterivNV glCombinerParameterivNV;
+  GdkGLProc_glCombinerParameteriNV glCombinerParameteriNV;
+  GdkGLProc_glCombinerInputNV glCombinerInputNV;
+  GdkGLProc_glCombinerOutputNV glCombinerOutputNV;
+  GdkGLProc_glFinalCombinerInputNV glFinalCombinerInputNV;
+  GdkGLProc_glGetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV;
+  GdkGLProc_glGetCombinerInputParameterivNV glGetCombinerInputParameterivNV;
+  GdkGLProc_glGetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV;
+  GdkGLProc_glGetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV;
+  GdkGLProc_glGetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV;
+  GdkGLProc_glGetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV;
 };
 
-GdkGL_GL_NV_vertex_program *gdk_gl_get_GL_NV_vertex_program (void);
+GdkGL_GL_NV_register_combiners *gdk_gl_get_GL_NV_register_combiners (void);
 
 /*
- * GL_ATI_envmap_bumpmap
+ * GL_MESA_resize_buffers
  */
 
-/* glTexBumpParameterivATI */
-typedef void (APIENTRY * GdkGLProc_glTexBumpParameterivATI) (GLenum pname, const GLint *param);
-GdkGLProc    gdk_gl_get_glTexBumpParameterivATI (void);
-#define      gdk_gl_glTexBumpParameterivATI(proc, pname, param) \
-  ( ((GdkGLProc_glTexBumpParameterivATI) (proc)) (pname, param) )
-
-/* glTexBumpParameterfvATI */
-typedef void (APIENTRY * GdkGLProc_glTexBumpParameterfvATI) (GLenum pname, const GLfloat *param);
-GdkGLProc    gdk_gl_get_glTexBumpParameterfvATI (void);
-#define      gdk_gl_glTexBumpParameterfvATI(proc, pname, param) \
-  ( ((GdkGLProc_glTexBumpParameterfvATI) (proc)) (pname, param) )
-
-/* glGetTexBumpParameterivATI */
-typedef void (APIENTRY * GdkGLProc_glGetTexBumpParameterivATI) (GLenum pname, GLint *param);
-GdkGLProc    gdk_gl_get_glGetTexBumpParameterivATI (void);
-#define      gdk_gl_glGetTexBumpParameterivATI(proc, pname, param) \
-  ( ((GdkGLProc_glGetTexBumpParameterivATI) (proc)) (pname, param) )
-
-/* glGetTexBumpParameterfvATI */
-typedef void (APIENTRY * GdkGLProc_glGetTexBumpParameterfvATI) (GLenum pname, GLfloat *param);
-GdkGLProc    gdk_gl_get_glGetTexBumpParameterfvATI (void);
-#define      gdk_gl_glGetTexBumpParameterfvATI(proc, pname, param) \
-  ( ((GdkGLProc_glGetTexBumpParameterfvATI) (proc)) (pname, param) )
+/* glResizeBuffersMESA */
+typedef void (APIENTRYP GdkGLProc_glResizeBuffersMESA) (void);
+GdkGLProc    gdk_gl_get_glResizeBuffersMESA (void);
+#define      gdk_gl_glResizeBuffersMESA(proc) \
+  ( ((GdkGLProc_glResizeBuffersMESA) (proc)) () )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_envmap_bumpmap GdkGL_GL_ATI_envmap_bumpmap;
+typedef struct _GdkGL_GL_MESA_resize_buffers GdkGL_GL_MESA_resize_buffers;
 
-struct _GdkGL_GL_ATI_envmap_bumpmap
+struct _GdkGL_GL_MESA_resize_buffers
 {
-  GdkGLProc_glTexBumpParameterivATI glTexBumpParameterivATI;
-  GdkGLProc_glTexBumpParameterfvATI glTexBumpParameterfvATI;
-  GdkGLProc_glGetTexBumpParameterivATI glGetTexBumpParameterivATI;
-  GdkGLProc_glGetTexBumpParameterfvATI glGetTexBumpParameterfvATI;
+  GdkGLProc_glResizeBuffersMESA glResizeBuffersMESA;
 };
 
-GdkGL_GL_ATI_envmap_bumpmap *gdk_gl_get_GL_ATI_envmap_bumpmap (void);
+GdkGL_GL_MESA_resize_buffers *gdk_gl_get_GL_MESA_resize_buffers (void);
 
 /*
- * GL_ATI_fragment_shader
+ * GL_MESA_window_pos
  */
 
-/* glGenFragmentShadersATI */
-typedef GLuint (APIENTRY * GdkGLProc_glGenFragmentShadersATI) (GLuint range);
-GdkGLProc    gdk_gl_get_glGenFragmentShadersATI (void);
-#define      gdk_gl_glGenFragmentShadersATI(proc, range) \
-  ( ((GdkGLProc_glGenFragmentShadersATI) (proc)) (range) )
+/* glWindowPos2dMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2dMESA) (GLdouble x, GLdouble y);
+GdkGLProc    gdk_gl_get_glWindowPos2dMESA (void);
+#define      gdk_gl_glWindowPos2dMESA(proc, x, y) \
+  ( ((GdkGLProc_glWindowPos2dMESA) (proc)) (x, y) )
 
-/* glBindFragmentShaderATI */
-typedef void (APIENTRY * GdkGLProc_glBindFragmentShaderATI) (GLuint id);
-GdkGLProc    gdk_gl_get_glBindFragmentShaderATI (void);
-#define      gdk_gl_glBindFragmentShaderATI(proc, id) \
-  ( ((GdkGLProc_glBindFragmentShaderATI) (proc)) (id) )
+/* glWindowPos2dvMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2dvMESA) (const GLdouble *v);
+GdkGLProc    gdk_gl_get_glWindowPos2dvMESA (void);
+#define      gdk_gl_glWindowPos2dvMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos2dvMESA) (proc)) (v) )
 
-/* glDeleteFragmentShaderATI */
-typedef void (APIENTRY * GdkGLProc_glDeleteFragmentShaderATI) (GLuint id);
-GdkGLProc    gdk_gl_get_glDeleteFragmentShaderATI (void);
-#define      gdk_gl_glDeleteFragmentShaderATI(proc, id) \
-  ( ((GdkGLProc_glDeleteFragmentShaderATI) (proc)) (id) )
+/* glWindowPos2fMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2fMESA) (GLfloat x, GLfloat y);
+GdkGLProc    gdk_gl_get_glWindowPos2fMESA (void);
+#define      gdk_gl_glWindowPos2fMESA(proc, x, y) \
+  ( ((GdkGLProc_glWindowPos2fMESA) (proc)) (x, y) )
 
-/* glBeginFragmentShaderATI */
-typedef void (APIENTRY * GdkGLProc_glBeginFragmentShaderATI) (void);
-GdkGLProc    gdk_gl_get_glBeginFragmentShaderATI (void);
-#define      gdk_gl_glBeginFragmentShaderATI(proc) \
-  ( ((GdkGLProc_glBeginFragmentShaderATI) (proc)) () )
+/* glWindowPos2fvMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2fvMESA) (const GLfloat *v);
+GdkGLProc    gdk_gl_get_glWindowPos2fvMESA (void);
+#define      gdk_gl_glWindowPos2fvMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos2fvMESA) (proc)) (v) )
 
-/* glEndFragmentShaderATI */
-typedef void (APIENTRY * GdkGLProc_glEndFragmentShaderATI) (void);
-GdkGLProc    gdk_gl_get_glEndFragmentShaderATI (void);
-#define      gdk_gl_glEndFragmentShaderATI(proc) \
-  ( ((GdkGLProc_glEndFragmentShaderATI) (proc)) () )
+/* glWindowPos2iMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2iMESA) (GLint x, GLint y);
+GdkGLProc    gdk_gl_get_glWindowPos2iMESA (void);
+#define      gdk_gl_glWindowPos2iMESA(proc, x, y) \
+  ( ((GdkGLProc_glWindowPos2iMESA) (proc)) (x, y) )
 
-/* glPassTexCoordATI */
-typedef void (APIENTRY * GdkGLProc_glPassTexCoordATI) (GLuint dst, GLuint coord, GLenum swizzle);
-GdkGLProc    gdk_gl_get_glPassTexCoordATI (void);
-#define      gdk_gl_glPassTexCoordATI(proc, dst, coord, swizzle) \
-  ( ((GdkGLProc_glPassTexCoordATI) (proc)) (dst, coord, swizzle) )
+/* glWindowPos2ivMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2ivMESA) (const GLint *v);
+GdkGLProc    gdk_gl_get_glWindowPos2ivMESA (void);
+#define      gdk_gl_glWindowPos2ivMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos2ivMESA) (proc)) (v) )
 
-/* glSampleMapATI */
-typedef void (APIENTRY * GdkGLProc_glSampleMapATI) (GLuint dst, GLuint interp, GLenum swizzle);
-GdkGLProc    gdk_gl_get_glSampleMapATI (void);
-#define      gdk_gl_glSampleMapATI(proc, dst, interp, swizzle) \
-  ( ((GdkGLProc_glSampleMapATI) (proc)) (dst, interp, swizzle) )
+/* glWindowPos2sMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2sMESA) (GLshort x, GLshort y);
+GdkGLProc    gdk_gl_get_glWindowPos2sMESA (void);
+#define      gdk_gl_glWindowPos2sMESA(proc, x, y) \
+  ( ((GdkGLProc_glWindowPos2sMESA) (proc)) (x, y) )
 
-/* glColorFragmentOp1ATI */
-typedef void (APIENTRY * GdkGLProc_glColorFragmentOp1ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
-GdkGLProc    gdk_gl_get_glColorFragmentOp1ATI (void);
-#define      gdk_gl_glColorFragmentOp1ATI(proc, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) \
-  ( ((GdkGLProc_glColorFragmentOp1ATI) (proc)) (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) )
+/* glWindowPos2svMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos2svMESA) (const GLshort *v);
+GdkGLProc    gdk_gl_get_glWindowPos2svMESA (void);
+#define      gdk_gl_glWindowPos2svMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos2svMESA) (proc)) (v) )
 
-/* glColorFragmentOp2ATI */
-typedef void (APIENTRY * GdkGLProc_glColorFragmentOp2ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
-GdkGLProc    gdk_gl_get_glColorFragmentOp2ATI (void);
-#define      gdk_gl_glColorFragmentOp2ATI(proc, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) \
-  ( ((GdkGLProc_glColorFragmentOp2ATI) (proc)) (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) )
+/* glWindowPos3dMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3dMESA) (GLdouble x, GLdouble y, GLdouble z);
+GdkGLProc    gdk_gl_get_glWindowPos3dMESA (void);
+#define      gdk_gl_glWindowPos3dMESA(proc, x, y, z) \
+  ( ((GdkGLProc_glWindowPos3dMESA) (proc)) (x, y, z) )
 
-/* glColorFragmentOp3ATI */
-typedef void (APIENTRY * GdkGLProc_glColorFragmentOp3ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
-GdkGLProc    gdk_gl_get_glColorFragmentOp3ATI (void);
-#define      gdk_gl_glColorFragmentOp3ATI(proc, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) \
-  ( ((GdkGLProc_glColorFragmentOp3ATI) (proc)) (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) )
+/* glWindowPos3dvMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3dvMESA) (const GLdouble *v);
+GdkGLProc    gdk_gl_get_glWindowPos3dvMESA (void);
+#define      gdk_gl_glWindowPos3dvMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos3dvMESA) (proc)) (v) )
 
-/* glAlphaFragmentOp1ATI */
-typedef void (APIENTRY * GdkGLProc_glAlphaFragmentOp1ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
-GdkGLProc    gdk_gl_get_glAlphaFragmentOp1ATI (void);
-#define      gdk_gl_glAlphaFragmentOp1ATI(proc, op, dst, dstMod, arg1, arg1Rep, arg1Mod) \
-  ( ((GdkGLProc_glAlphaFragmentOp1ATI) (proc)) (op, dst, dstMod, arg1, arg1Rep, arg1Mod) )
+/* glWindowPos3fMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3fMESA) (GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glWindowPos3fMESA (void);
+#define      gdk_gl_glWindowPos3fMESA(proc, x, y, z) \
+  ( ((GdkGLProc_glWindowPos3fMESA) (proc)) (x, y, z) )
 
-/* glAlphaFragmentOp2ATI */
-typedef void (APIENTRY * GdkGLProc_glAlphaFragmentOp2ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
-GdkGLProc    gdk_gl_get_glAlphaFragmentOp2ATI (void);
-#define      gdk_gl_glAlphaFragmentOp2ATI(proc, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) \
-  ( ((GdkGLProc_glAlphaFragmentOp2ATI) (proc)) (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) )
+/* glWindowPos3fvMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3fvMESA) (const GLfloat *v);
+GdkGLProc    gdk_gl_get_glWindowPos3fvMESA (void);
+#define      gdk_gl_glWindowPos3fvMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos3fvMESA) (proc)) (v) )
 
-/* glAlphaFragmentOp3ATI */
-typedef void (APIENTRY * GdkGLProc_glAlphaFragmentOp3ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
-GdkGLProc    gdk_gl_get_glAlphaFragmentOp3ATI (void);
-#define      gdk_gl_glAlphaFragmentOp3ATI(proc, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) \
-  ( ((GdkGLProc_glAlphaFragmentOp3ATI) (proc)) (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) )
+/* glWindowPos3iMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3iMESA) (GLint x, GLint y, GLint z);
+GdkGLProc    gdk_gl_get_glWindowPos3iMESA (void);
+#define      gdk_gl_glWindowPos3iMESA(proc, x, y, z) \
+  ( ((GdkGLProc_glWindowPos3iMESA) (proc)) (x, y, z) )
 
-/* glSetFragmentShaderConstantATI */
-typedef void (APIENTRY * GdkGLProc_glSetFragmentShaderConstantATI) (GLuint dst, const GLfloat *value);
-GdkGLProc    gdk_gl_get_glSetFragmentShaderConstantATI (void);
-#define      gdk_gl_glSetFragmentShaderConstantATI(proc, dst, value) \
-  ( ((GdkGLProc_glSetFragmentShaderConstantATI) (proc)) (dst, value) )
+/* glWindowPos3ivMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3ivMESA) (const GLint *v);
+GdkGLProc    gdk_gl_get_glWindowPos3ivMESA (void);
+#define      gdk_gl_glWindowPos3ivMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos3ivMESA) (proc)) (v) )
+
+/* glWindowPos3sMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3sMESA) (GLshort x, GLshort y, GLshort z);
+GdkGLProc    gdk_gl_get_glWindowPos3sMESA (void);
+#define      gdk_gl_glWindowPos3sMESA(proc, x, y, z) \
+  ( ((GdkGLProc_glWindowPos3sMESA) (proc)) (x, y, z) )
+
+/* glWindowPos3svMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos3svMESA) (const GLshort *v);
+GdkGLProc    gdk_gl_get_glWindowPos3svMESA (void);
+#define      gdk_gl_glWindowPos3svMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos3svMESA) (proc)) (v) )
+
+/* glWindowPos4dMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4dMESA) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+GdkGLProc    gdk_gl_get_glWindowPos4dMESA (void);
+#define      gdk_gl_glWindowPos4dMESA(proc, x, y, z, w) \
+  ( ((GdkGLProc_glWindowPos4dMESA) (proc)) (x, y, z, w) )
+
+/* glWindowPos4dvMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4dvMESA) (const GLdouble *v);
+GdkGLProc    gdk_gl_get_glWindowPos4dvMESA (void);
+#define      gdk_gl_glWindowPos4dvMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos4dvMESA) (proc)) (v) )
+
+/* glWindowPos4fMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4fMESA) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glWindowPos4fMESA (void);
+#define      gdk_gl_glWindowPos4fMESA(proc, x, y, z, w) \
+  ( ((GdkGLProc_glWindowPos4fMESA) (proc)) (x, y, z, w) )
+
+/* glWindowPos4fvMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4fvMESA) (const GLfloat *v);
+GdkGLProc    gdk_gl_get_glWindowPos4fvMESA (void);
+#define      gdk_gl_glWindowPos4fvMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos4fvMESA) (proc)) (v) )
+
+/* glWindowPos4iMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4iMESA) (GLint x, GLint y, GLint z, GLint w);
+GdkGLProc    gdk_gl_get_glWindowPos4iMESA (void);
+#define      gdk_gl_glWindowPos4iMESA(proc, x, y, z, w) \
+  ( ((GdkGLProc_glWindowPos4iMESA) (proc)) (x, y, z, w) )
+
+/* glWindowPos4ivMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4ivMESA) (const GLint *v);
+GdkGLProc    gdk_gl_get_glWindowPos4ivMESA (void);
+#define      gdk_gl_glWindowPos4ivMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos4ivMESA) (proc)) (v) )
+
+/* glWindowPos4sMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4sMESA) (GLshort x, GLshort y, GLshort z, GLshort w);
+GdkGLProc    gdk_gl_get_glWindowPos4sMESA (void);
+#define      gdk_gl_glWindowPos4sMESA(proc, x, y, z, w) \
+  ( ((GdkGLProc_glWindowPos4sMESA) (proc)) (x, y, z, w) )
+
+/* glWindowPos4svMESA */
+typedef void (APIENTRYP GdkGLProc_glWindowPos4svMESA) (const GLshort *v);
+GdkGLProc    gdk_gl_get_glWindowPos4svMESA (void);
+#define      gdk_gl_glWindowPos4svMESA(proc, v) \
+  ( ((GdkGLProc_glWindowPos4svMESA) (proc)) (v) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_fragment_shader GdkGL_GL_ATI_fragment_shader;
+typedef struct _GdkGL_GL_MESA_window_pos GdkGL_GL_MESA_window_pos;
 
-struct _GdkGL_GL_ATI_fragment_shader
+struct _GdkGL_GL_MESA_window_pos
 {
-  GdkGLProc_glGenFragmentShadersATI glGenFragmentShadersATI;
-  GdkGLProc_glBindFragmentShaderATI glBindFragmentShaderATI;
-  GdkGLProc_glDeleteFragmentShaderATI glDeleteFragmentShaderATI;
-  GdkGLProc_glBeginFragmentShaderATI glBeginFragmentShaderATI;
-  GdkGLProc_glEndFragmentShaderATI glEndFragmentShaderATI;
-  GdkGLProc_glPassTexCoordATI glPassTexCoordATI;
-  GdkGLProc_glSampleMapATI glSampleMapATI;
-  GdkGLProc_glColorFragmentOp1ATI glColorFragmentOp1ATI;
-  GdkGLProc_glColorFragmentOp2ATI glColorFragmentOp2ATI;
-  GdkGLProc_glColorFragmentOp3ATI glColorFragmentOp3ATI;
-  GdkGLProc_glAlphaFragmentOp1ATI glAlphaFragmentOp1ATI;
-  GdkGLProc_glAlphaFragmentOp2ATI glAlphaFragmentOp2ATI;
-  GdkGLProc_glAlphaFragmentOp3ATI glAlphaFragmentOp3ATI;
-  GdkGLProc_glSetFragmentShaderConstantATI glSetFragmentShaderConstantATI;
+  GdkGLProc_glWindowPos2dMESA glWindowPos2dMESA;
+  GdkGLProc_glWindowPos2dvMESA glWindowPos2dvMESA;
+  GdkGLProc_glWindowPos2fMESA glWindowPos2fMESA;
+  GdkGLProc_glWindowPos2fvMESA glWindowPos2fvMESA;
+  GdkGLProc_glWindowPos2iMESA glWindowPos2iMESA;
+  GdkGLProc_glWindowPos2ivMESA glWindowPos2ivMESA;
+  GdkGLProc_glWindowPos2sMESA glWindowPos2sMESA;
+  GdkGLProc_glWindowPos2svMESA glWindowPos2svMESA;
+  GdkGLProc_glWindowPos3dMESA glWindowPos3dMESA;
+  GdkGLProc_glWindowPos3dvMESA glWindowPos3dvMESA;
+  GdkGLProc_glWindowPos3fMESA glWindowPos3fMESA;
+  GdkGLProc_glWindowPos3fvMESA glWindowPos3fvMESA;
+  GdkGLProc_glWindowPos3iMESA glWindowPos3iMESA;
+  GdkGLProc_glWindowPos3ivMESA glWindowPos3ivMESA;
+  GdkGLProc_glWindowPos3sMESA glWindowPos3sMESA;
+  GdkGLProc_glWindowPos3svMESA glWindowPos3svMESA;
+  GdkGLProc_glWindowPos4dMESA glWindowPos4dMESA;
+  GdkGLProc_glWindowPos4dvMESA glWindowPos4dvMESA;
+  GdkGLProc_glWindowPos4fMESA glWindowPos4fMESA;
+  GdkGLProc_glWindowPos4fvMESA glWindowPos4fvMESA;
+  GdkGLProc_glWindowPos4iMESA glWindowPos4iMESA;
+  GdkGLProc_glWindowPos4ivMESA glWindowPos4ivMESA;
+  GdkGLProc_glWindowPos4sMESA glWindowPos4sMESA;
+  GdkGLProc_glWindowPos4svMESA glWindowPos4svMESA;
 };
 
-GdkGL_GL_ATI_fragment_shader *gdk_gl_get_GL_ATI_fragment_shader (void);
+GdkGL_GL_MESA_window_pos *gdk_gl_get_GL_MESA_window_pos (void);
 
 /*
- * GL_ATI_pn_triangles
+ * GL_IBM_multimode_draw_arrays
  */
 
-/* glPNTrianglesiATI */
-typedef void (APIENTRY * GdkGLProc_glPNTrianglesiATI) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glPNTrianglesiATI (void);
-#define      gdk_gl_glPNTrianglesiATI(proc, pname, param) \
-  ( ((GdkGLProc_glPNTrianglesiATI) (proc)) (pname, param) )
+/* glMultiModeDrawArraysIBM */
+typedef void (APIENTRYP GdkGLProc_glMultiModeDrawArraysIBM) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
+GdkGLProc    gdk_gl_get_glMultiModeDrawArraysIBM (void);
+#define      gdk_gl_glMultiModeDrawArraysIBM(proc, mode, first, count, primcount, modestride) \
+  ( ((GdkGLProc_glMultiModeDrawArraysIBM) (proc)) (mode, first, count, primcount, modestride) )
 
-/* glPNTrianglesfATI */
-typedef void (APIENTRY * GdkGLProc_glPNTrianglesfATI) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glPNTrianglesfATI (void);
-#define      gdk_gl_glPNTrianglesfATI(proc, pname, param) \
-  ( ((GdkGLProc_glPNTrianglesfATI) (proc)) (pname, param) )
+/* glMultiModeDrawElementsIBM */
+typedef void (APIENTRYP GdkGLProc_glMultiModeDrawElementsIBM) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
+GdkGLProc    gdk_gl_get_glMultiModeDrawElementsIBM (void);
+#define      gdk_gl_glMultiModeDrawElementsIBM(proc, mode, count, type, indices, primcount, modestride) \
+  ( ((GdkGLProc_glMultiModeDrawElementsIBM) (proc)) (mode, count, type, indices, primcount, modestride) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_pn_triangles GdkGL_GL_ATI_pn_triangles;
+typedef struct _GdkGL_GL_IBM_multimode_draw_arrays GdkGL_GL_IBM_multimode_draw_arrays;
 
-struct _GdkGL_GL_ATI_pn_triangles
+struct _GdkGL_GL_IBM_multimode_draw_arrays
 {
-  GdkGLProc_glPNTrianglesiATI glPNTrianglesiATI;
-  GdkGLProc_glPNTrianglesfATI glPNTrianglesfATI;
+  GdkGLProc_glMultiModeDrawArraysIBM glMultiModeDrawArraysIBM;
+  GdkGLProc_glMultiModeDrawElementsIBM glMultiModeDrawElementsIBM;
 };
 
-GdkGL_GL_ATI_pn_triangles *gdk_gl_get_GL_ATI_pn_triangles (void);
+GdkGL_GL_IBM_multimode_draw_arrays *gdk_gl_get_GL_IBM_multimode_draw_arrays (void);
 
 /*
- * GL_ATI_vertex_array_object
+ * GL_IBM_vertex_array_lists
  */
 
-/* glNewObjectBufferATI */
-typedef GLuint (APIENTRY * GdkGLProc_glNewObjectBufferATI) (GLsizei size, const GLvoid *pointer, GLenum usage);
-GdkGLProc    gdk_gl_get_glNewObjectBufferATI (void);
-#define      gdk_gl_glNewObjectBufferATI(proc, size, pointer, usage) \
-  ( ((GdkGLProc_glNewObjectBufferATI) (proc)) (size, pointer, usage) )
-
-/* glIsObjectBufferATI */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsObjectBufferATI) (GLuint buffer);
-GdkGLProc    gdk_gl_get_glIsObjectBufferATI (void);
-#define      gdk_gl_glIsObjectBufferATI(proc, buffer) \
-  ( ((GdkGLProc_glIsObjectBufferATI) (proc)) (buffer) )
+/* glColorPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glColorPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glColorPointerListIBM (void);
+#define      gdk_gl_glColorPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glColorPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
 
-/* glUpdateObjectBufferATI */
-typedef void (APIENTRY * GdkGLProc_glUpdateObjectBufferATI) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
-GdkGLProc    gdk_gl_get_glUpdateObjectBufferATI (void);
-#define      gdk_gl_glUpdateObjectBufferATI(proc, buffer, offset, size, pointer, preserve) \
-  ( ((GdkGLProc_glUpdateObjectBufferATI) (proc)) (buffer, offset, size, pointer, preserve) )
+/* glSecondaryColorPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColorPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glSecondaryColorPointerListIBM (void);
+#define      gdk_gl_glSecondaryColorPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glSecondaryColorPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
 
-/* glGetObjectBufferfvATI */
-typedef void (APIENTRY * GdkGLProc_glGetObjectBufferfvATI) (GLuint buffer, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetObjectBufferfvATI (void);
-#define      gdk_gl_glGetObjectBufferfvATI(proc, buffer, pname, params) \
-  ( ((GdkGLProc_glGetObjectBufferfvATI) (proc)) (buffer, pname, params) )
+/* glEdgeFlagPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glEdgeFlagPointerListIBM) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glEdgeFlagPointerListIBM (void);
+#define      gdk_gl_glEdgeFlagPointerListIBM(proc, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glEdgeFlagPointerListIBM) (proc)) (stride, pointer, ptrstride) )
 
-/* glGetObjectBufferivATI */
-typedef void (APIENTRY * GdkGLProc_glGetObjectBufferivATI) (GLuint buffer, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetObjectBufferivATI (void);
-#define      gdk_gl_glGetObjectBufferivATI(proc, buffer, pname, params) \
-  ( ((GdkGLProc_glGetObjectBufferivATI) (proc)) (buffer, pname, params) )
+/* glFogCoordPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glFogCoordPointerListIBM) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glFogCoordPointerListIBM (void);
+#define      gdk_gl_glFogCoordPointerListIBM(proc, type, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glFogCoordPointerListIBM) (proc)) (type, stride, pointer, ptrstride) )
 
-/* glFreeObjectBufferATI */
-typedef void (APIENTRY * GdkGLProc_glFreeObjectBufferATI) (GLuint buffer);
-GdkGLProc    gdk_gl_get_glFreeObjectBufferATI (void);
-#define      gdk_gl_glFreeObjectBufferATI(proc, buffer) \
-  ( ((GdkGLProc_glFreeObjectBufferATI) (proc)) (buffer) )
-
-/* glArrayObjectATI */
-typedef void (APIENTRY * GdkGLProc_glArrayObjectATI) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
-GdkGLProc    gdk_gl_get_glArrayObjectATI (void);
-#define      gdk_gl_glArrayObjectATI(proc, array, size, type, stride, buffer, offset) \
-  ( ((GdkGLProc_glArrayObjectATI) (proc)) (array, size, type, stride, buffer, offset) )
-
-/* glGetArrayObjectfvATI */
-typedef void (APIENTRY * GdkGLProc_glGetArrayObjectfvATI) (GLenum array, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetArrayObjectfvATI (void);
-#define      gdk_gl_glGetArrayObjectfvATI(proc, array, pname, params) \
-  ( ((GdkGLProc_glGetArrayObjectfvATI) (proc)) (array, pname, params) )
-
-/* glGetArrayObjectivATI */
-typedef void (APIENTRY * GdkGLProc_glGetArrayObjectivATI) (GLenum array, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetArrayObjectivATI (void);
-#define      gdk_gl_glGetArrayObjectivATI(proc, array, pname, params) \
-  ( ((GdkGLProc_glGetArrayObjectivATI) (proc)) (array, pname, params) )
+/* glIndexPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glIndexPointerListIBM) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glIndexPointerListIBM (void);
+#define      gdk_gl_glIndexPointerListIBM(proc, type, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glIndexPointerListIBM) (proc)) (type, stride, pointer, ptrstride) )
 
-/* glVariantArrayObjectATI */
-typedef void (APIENTRY * GdkGLProc_glVariantArrayObjectATI) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
-GdkGLProc    gdk_gl_get_glVariantArrayObjectATI (void);
-#define      gdk_gl_glVariantArrayObjectATI(proc, id, type, stride, buffer, offset) \
-  ( ((GdkGLProc_glVariantArrayObjectATI) (proc)) (id, type, stride, buffer, offset) )
+/* glNormalPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glNormalPointerListIBM) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glNormalPointerListIBM (void);
+#define      gdk_gl_glNormalPointerListIBM(proc, type, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glNormalPointerListIBM) (proc)) (type, stride, pointer, ptrstride) )
 
-/* glGetVariantArrayObjectfvATI */
-typedef void (APIENTRY * GdkGLProc_glGetVariantArrayObjectfvATI) (GLuint id, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetVariantArrayObjectfvATI (void);
-#define      gdk_gl_glGetVariantArrayObjectfvATI(proc, id, pname, params) \
-  ( ((GdkGLProc_glGetVariantArrayObjectfvATI) (proc)) (id, pname, params) )
+/* glTexCoordPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glTexCoordPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glTexCoordPointerListIBM (void);
+#define      gdk_gl_glTexCoordPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glTexCoordPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
 
-/* glGetVariantArrayObjectivATI */
-typedef void (APIENTRY * GdkGLProc_glGetVariantArrayObjectivATI) (GLuint id, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetVariantArrayObjectivATI (void);
-#define      gdk_gl_glGetVariantArrayObjectivATI(proc, id, pname, params) \
-  ( ((GdkGLProc_glGetVariantArrayObjectivATI) (proc)) (id, pname, params) )
+/* glVertexPointerListIBM */
+typedef void (APIENTRYP GdkGLProc_glVertexPointerListIBM) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+GdkGLProc    gdk_gl_get_glVertexPointerListIBM (void);
+#define      gdk_gl_glVertexPointerListIBM(proc, size, type, stride, pointer, ptrstride) \
+  ( ((GdkGLProc_glVertexPointerListIBM) (proc)) (size, type, stride, pointer, ptrstride) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_vertex_array_object GdkGL_GL_ATI_vertex_array_object;
+typedef struct _GdkGL_GL_IBM_vertex_array_lists GdkGL_GL_IBM_vertex_array_lists;
 
-struct _GdkGL_GL_ATI_vertex_array_object
+struct _GdkGL_GL_IBM_vertex_array_lists
 {
-  GdkGLProc_glNewObjectBufferATI glNewObjectBufferATI;
-  GdkGLProc_glIsObjectBufferATI glIsObjectBufferATI;
-  GdkGLProc_glUpdateObjectBufferATI glUpdateObjectBufferATI;
-  GdkGLProc_glGetObjectBufferfvATI glGetObjectBufferfvATI;
-  GdkGLProc_glGetObjectBufferivATI glGetObjectBufferivATI;
-  GdkGLProc_glFreeObjectBufferATI glFreeObjectBufferATI;
-  GdkGLProc_glArrayObjectATI glArrayObjectATI;
-  GdkGLProc_glGetArrayObjectfvATI glGetArrayObjectfvATI;
-  GdkGLProc_glGetArrayObjectivATI glGetArrayObjectivATI;
-  GdkGLProc_glVariantArrayObjectATI glVariantArrayObjectATI;
-  GdkGLProc_glGetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI;
-  GdkGLProc_glGetVariantArrayObjectivATI glGetVariantArrayObjectivATI;
+  GdkGLProc_glColorPointerListIBM glColorPointerListIBM;
+  GdkGLProc_glSecondaryColorPointerListIBM glSecondaryColorPointerListIBM;
+  GdkGLProc_glEdgeFlagPointerListIBM glEdgeFlagPointerListIBM;
+  GdkGLProc_glFogCoordPointerListIBM glFogCoordPointerListIBM;
+  GdkGLProc_glIndexPointerListIBM glIndexPointerListIBM;
+  GdkGLProc_glNormalPointerListIBM glNormalPointerListIBM;
+  GdkGLProc_glTexCoordPointerListIBM glTexCoordPointerListIBM;
+  GdkGLProc_glVertexPointerListIBM glVertexPointerListIBM;
 };
 
-GdkGL_GL_ATI_vertex_array_object *gdk_gl_get_GL_ATI_vertex_array_object (void);
+GdkGL_GL_IBM_vertex_array_lists *gdk_gl_get_GL_IBM_vertex_array_lists (void);
 
 /*
- * GL_EXT_vertex_shader
+ * GL_3DFX_tbuffer
  */
 
-/* glBeginVertexShaderEXT */
-typedef void (APIENTRY * GdkGLProc_glBeginVertexShaderEXT) (void);
-GdkGLProc    gdk_gl_get_glBeginVertexShaderEXT (void);
-#define      gdk_gl_glBeginVertexShaderEXT(proc) \
-  ( ((GdkGLProc_glBeginVertexShaderEXT) (proc)) () )
+/* glTbufferMask3DFX */
+typedef void (APIENTRYP GdkGLProc_glTbufferMask3DFX) (GLuint mask);
+GdkGLProc    gdk_gl_get_glTbufferMask3DFX (void);
+#define      gdk_gl_glTbufferMask3DFX(proc, mask) \
+  ( ((GdkGLProc_glTbufferMask3DFX) (proc)) (mask) )
 
-/* glEndVertexShaderEXT */
-typedef void (APIENTRY * GdkGLProc_glEndVertexShaderEXT) (void);
-GdkGLProc    gdk_gl_get_glEndVertexShaderEXT (void);
-#define      gdk_gl_glEndVertexShaderEXT(proc) \
-  ( ((GdkGLProc_glEndVertexShaderEXT) (proc)) () )
+/* proc struct */
 
-/* glBindVertexShaderEXT */
-typedef void (APIENTRY * GdkGLProc_glBindVertexShaderEXT) (GLuint id);
-GdkGLProc    gdk_gl_get_glBindVertexShaderEXT (void);
-#define      gdk_gl_glBindVertexShaderEXT(proc, id) \
-  ( ((GdkGLProc_glBindVertexShaderEXT) (proc)) (id) )
+typedef struct _GdkGL_GL_3DFX_tbuffer GdkGL_GL_3DFX_tbuffer;
 
-/* glGenVertexShadersEXT */
-typedef GLuint (APIENTRY * GdkGLProc_glGenVertexShadersEXT) (GLuint range);
-GdkGLProc    gdk_gl_get_glGenVertexShadersEXT (void);
-#define      gdk_gl_glGenVertexShadersEXT(proc, range) \
-  ( ((GdkGLProc_glGenVertexShadersEXT) (proc)) (range) )
+struct _GdkGL_GL_3DFX_tbuffer
+{
+  GdkGLProc_glTbufferMask3DFX glTbufferMask3DFX;
+};
 
-/* glDeleteVertexShaderEXT */
-typedef void (APIENTRY * GdkGLProc_glDeleteVertexShaderEXT) (GLuint id);
-GdkGLProc    gdk_gl_get_glDeleteVertexShaderEXT (void);
-#define      gdk_gl_glDeleteVertexShaderEXT(proc, id) \
-  ( ((GdkGLProc_glDeleteVertexShaderEXT) (proc)) (id) )
+GdkGL_GL_3DFX_tbuffer *gdk_gl_get_GL_3DFX_tbuffer (void);
 
-/* glShaderOp1EXT */
-typedef void (APIENTRY * GdkGLProc_glShaderOp1EXT) (GLenum op, GLuint res, GLuint arg1);
-GdkGLProc    gdk_gl_get_glShaderOp1EXT (void);
-#define      gdk_gl_glShaderOp1EXT(proc, op, res, arg1) \
-  ( ((GdkGLProc_glShaderOp1EXT) (proc)) (op, res, arg1) )
+/*
+ * GL_EXT_multisample
+ */
 
-/* glShaderOp2EXT */
-typedef void (APIENTRY * GdkGLProc_glShaderOp2EXT) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
-GdkGLProc    gdk_gl_get_glShaderOp2EXT (void);
-#define      gdk_gl_glShaderOp2EXT(proc, op, res, arg1, arg2) \
-  ( ((GdkGLProc_glShaderOp2EXT) (proc)) (op, res, arg1, arg2) )
+/* glSampleMaskEXT */
+typedef void (APIENTRYP GdkGLProc_glSampleMaskEXT) (GLclampf value, GLboolean invert);
+GdkGLProc    gdk_gl_get_glSampleMaskEXT (void);
+#define      gdk_gl_glSampleMaskEXT(proc, value, invert) \
+  ( ((GdkGLProc_glSampleMaskEXT) (proc)) (value, invert) )
 
-/* glShaderOp3EXT */
-typedef void (APIENTRY * GdkGLProc_glShaderOp3EXT) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
-GdkGLProc    gdk_gl_get_glShaderOp3EXT (void);
-#define      gdk_gl_glShaderOp3EXT(proc, op, res, arg1, arg2, arg3) \
-  ( ((GdkGLProc_glShaderOp3EXT) (proc)) (op, res, arg1, arg2, arg3) )
+/* glSamplePatternEXT */
+typedef void (APIENTRYP GdkGLProc_glSamplePatternEXT) (GLenum pattern);
+GdkGLProc    gdk_gl_get_glSamplePatternEXT (void);
+#define      gdk_gl_glSamplePatternEXT(proc, pattern) \
+  ( ((GdkGLProc_glSamplePatternEXT) (proc)) (pattern) )
 
-/* glSwizzleEXT */
-typedef void (APIENTRY * GdkGLProc_glSwizzleEXT) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
-GdkGLProc    gdk_gl_get_glSwizzleEXT (void);
-#define      gdk_gl_glSwizzleEXT(proc, res, in, outX, outY, outZ, outW) \
-  ( ((GdkGLProc_glSwizzleEXT) (proc)) (res, in, outX, outY, outZ, outW) )
+/* proc struct */
 
-/* glWriteMaskEXT */
-typedef void (APIENTRY * GdkGLProc_glWriteMaskEXT) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
-GdkGLProc    gdk_gl_get_glWriteMaskEXT (void);
-#define      gdk_gl_glWriteMaskEXT(proc, res, in, outX, outY, outZ, outW) \
-  ( ((GdkGLProc_glWriteMaskEXT) (proc)) (res, in, outX, outY, outZ, outW) )
+typedef struct _GdkGL_GL_EXT_multisample GdkGL_GL_EXT_multisample;
 
-/* glInsertComponentEXT */
-typedef void (APIENTRY * GdkGLProc_glInsertComponentEXT) (GLuint res, GLuint src, GLuint num);
-GdkGLProc    gdk_gl_get_glInsertComponentEXT (void);
-#define      gdk_gl_glInsertComponentEXT(proc, res, src, num) \
-  ( ((GdkGLProc_glInsertComponentEXT) (proc)) (res, src, num) )
+struct _GdkGL_GL_EXT_multisample
+{
+  GdkGLProc_glSampleMaskEXT glSampleMaskEXT;
+  GdkGLProc_glSamplePatternEXT glSamplePatternEXT;
+};
 
-/* glExtractComponentEXT */
-typedef void (APIENTRY * GdkGLProc_glExtractComponentEXT) (GLuint res, GLuint src, GLuint num);
-GdkGLProc    gdk_gl_get_glExtractComponentEXT (void);
-#define      gdk_gl_glExtractComponentEXT(proc, res, src, num) \
-  ( ((GdkGLProc_glExtractComponentEXT) (proc)) (res, src, num) )
+GdkGL_GL_EXT_multisample *gdk_gl_get_GL_EXT_multisample (void);
 
-/* glGenSymbolsEXT */
-typedef GLuint (APIENTRY * GdkGLProc_glGenSymbolsEXT) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
-GdkGLProc    gdk_gl_get_glGenSymbolsEXT (void);
-#define      gdk_gl_glGenSymbolsEXT(proc, datatype, storagetype, range, components) \
-  ( ((GdkGLProc_glGenSymbolsEXT) (proc)) (datatype, storagetype, range, components) )
+/*
+ * GL_SGIS_texture_color_mask
+ */
 
-/* glSetInvariantEXT */
-typedef void (APIENTRY * GdkGLProc_glSetInvariantEXT) (GLuint id, GLenum type, const GLvoid *addr);
-GdkGLProc    gdk_gl_get_glSetInvariantEXT (void);
-#define      gdk_gl_glSetInvariantEXT(proc, id, type, addr) \
-  ( ((GdkGLProc_glSetInvariantEXT) (proc)) (id, type, addr) )
+/* glTextureColorMaskSGIS */
+typedef void (APIENTRYP GdkGLProc_glTextureColorMaskSGIS) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
+GdkGLProc    gdk_gl_get_glTextureColorMaskSGIS (void);
+#define      gdk_gl_glTextureColorMaskSGIS(proc, red, green, blue, alpha) \
+  ( ((GdkGLProc_glTextureColorMaskSGIS) (proc)) (red, green, blue, alpha) )
 
-/* glSetLocalConstantEXT */
-typedef void (APIENTRY * GdkGLProc_glSetLocalConstantEXT) (GLuint id, GLenum type, const GLvoid *addr);
-GdkGLProc    gdk_gl_get_glSetLocalConstantEXT (void);
-#define      gdk_gl_glSetLocalConstantEXT(proc, id, type, addr) \
-  ( ((GdkGLProc_glSetLocalConstantEXT) (proc)) (id, type, addr) )
+/* proc struct */
 
-/* glVariantbvEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantbvEXT) (GLuint id, const GLbyte *addr);
-GdkGLProc    gdk_gl_get_glVariantbvEXT (void);
-#define      gdk_gl_glVariantbvEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantbvEXT) (proc)) (id, addr) )
+typedef struct _GdkGL_GL_SGIS_texture_color_mask GdkGL_GL_SGIS_texture_color_mask;
 
-/* glVariantsvEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantsvEXT) (GLuint id, const GLshort *addr);
-GdkGLProc    gdk_gl_get_glVariantsvEXT (void);
-#define      gdk_gl_glVariantsvEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantsvEXT) (proc)) (id, addr) )
+struct _GdkGL_GL_SGIS_texture_color_mask
+{
+  GdkGLProc_glTextureColorMaskSGIS glTextureColorMaskSGIS;
+};
 
-/* glVariantivEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantivEXT) (GLuint id, const GLint *addr);
-GdkGLProc    gdk_gl_get_glVariantivEXT (void);
-#define      gdk_gl_glVariantivEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantivEXT) (proc)) (id, addr) )
+GdkGL_GL_SGIS_texture_color_mask *gdk_gl_get_GL_SGIS_texture_color_mask (void);
 
-/* glVariantfvEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantfvEXT) (GLuint id, const GLfloat *addr);
-GdkGLProc    gdk_gl_get_glVariantfvEXT (void);
-#define      gdk_gl_glVariantfvEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantfvEXT) (proc)) (id, addr) )
+/*
+ * GL_SGIX_igloo_interface
+ */
 
-/* glVariantdvEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantdvEXT) (GLuint id, const GLdouble *addr);
-GdkGLProc    gdk_gl_get_glVariantdvEXT (void);
-#define      gdk_gl_glVariantdvEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantdvEXT) (proc)) (id, addr) )
+/* glIglooInterfaceSGIX */
+typedef void (APIENTRYP GdkGLProc_glIglooInterfaceSGIX) (GLenum pname, const GLvoid *params);
+GdkGLProc    gdk_gl_get_glIglooInterfaceSGIX (void);
+#define      gdk_gl_glIglooInterfaceSGIX(proc, pname, params) \
+  ( ((GdkGLProc_glIglooInterfaceSGIX) (proc)) (pname, params) )
 
-/* glVariantubvEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantubvEXT) (GLuint id, const GLubyte *addr);
-GdkGLProc    gdk_gl_get_glVariantubvEXT (void);
-#define      gdk_gl_glVariantubvEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantubvEXT) (proc)) (id, addr) )
+/* proc struct */
 
-/* glVariantusvEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantusvEXT) (GLuint id, const GLushort *addr);
-GdkGLProc    gdk_gl_get_glVariantusvEXT (void);
-#define      gdk_gl_glVariantusvEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantusvEXT) (proc)) (id, addr) )
+typedef struct _GdkGL_GL_SGIX_igloo_interface GdkGL_GL_SGIX_igloo_interface;
 
-/* glVariantuivEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantuivEXT) (GLuint id, const GLuint *addr);
-GdkGLProc    gdk_gl_get_glVariantuivEXT (void);
-#define      gdk_gl_glVariantuivEXT(proc, id, addr) \
-  ( ((GdkGLProc_glVariantuivEXT) (proc)) (id, addr) )
+struct _GdkGL_GL_SGIX_igloo_interface
+{
+  GdkGLProc_glIglooInterfaceSGIX glIglooInterfaceSGIX;
+};
 
-/* glVariantPointerEXT */
-typedef void (APIENTRY * GdkGLProc_glVariantPointerEXT) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
-GdkGLProc    gdk_gl_get_glVariantPointerEXT (void);
-#define      gdk_gl_glVariantPointerEXT(proc, id, type, stride, addr) \
-  ( ((GdkGLProc_glVariantPointerEXT) (proc)) (id, type, stride, addr) )
+GdkGL_GL_SGIX_igloo_interface *gdk_gl_get_GL_SGIX_igloo_interface (void);
 
-/* glEnableVariantClientStateEXT */
-typedef void (APIENTRY * GdkGLProc_glEnableVariantClientStateEXT) (GLuint id);
-GdkGLProc    gdk_gl_get_glEnableVariantClientStateEXT (void);
-#define      gdk_gl_glEnableVariantClientStateEXT(proc, id) \
-  ( ((GdkGLProc_glEnableVariantClientStateEXT) (proc)) (id) )
+/*
+ * GL_NV_fence
+ */
 
-/* glDisableVariantClientStateEXT */
-typedef void (APIENTRY * GdkGLProc_glDisableVariantClientStateEXT) (GLuint id);
-GdkGLProc    gdk_gl_get_glDisableVariantClientStateEXT (void);
-#define      gdk_gl_glDisableVariantClientStateEXT(proc, id) \
-  ( ((GdkGLProc_glDisableVariantClientStateEXT) (proc)) (id) )
+/* glDeleteFencesNV */
+typedef void (APIENTRYP GdkGLProc_glDeleteFencesNV) (GLsizei n, const GLuint *fences);
+GdkGLProc    gdk_gl_get_glDeleteFencesNV (void);
+#define      gdk_gl_glDeleteFencesNV(proc, n, fences) \
+  ( ((GdkGLProc_glDeleteFencesNV) (proc)) (n, fences) )
 
-/* glBindLightParameterEXT */
-typedef GLuint (APIENTRY * GdkGLProc_glBindLightParameterEXT) (GLenum light, GLenum value);
-GdkGLProc    gdk_gl_get_glBindLightParameterEXT (void);
-#define      gdk_gl_glBindLightParameterEXT(proc, light, value) \
-  ( ((GdkGLProc_glBindLightParameterEXT) (proc)) (light, value) )
+/* glGenFencesNV */
+typedef void (APIENTRYP GdkGLProc_glGenFencesNV) (GLsizei n, GLuint *fences);
+GdkGLProc    gdk_gl_get_glGenFencesNV (void);
+#define      gdk_gl_glGenFencesNV(proc, n, fences) \
+  ( ((GdkGLProc_glGenFencesNV) (proc)) (n, fences) )
 
-/* glBindMaterialParameterEXT */
-typedef GLuint (APIENTRY * GdkGLProc_glBindMaterialParameterEXT) (GLenum face, GLenum value);
-GdkGLProc    gdk_gl_get_glBindMaterialParameterEXT (void);
-#define      gdk_gl_glBindMaterialParameterEXT(proc, face, value) \
-  ( ((GdkGLProc_glBindMaterialParameterEXT) (proc)) (face, value) )
+/* glIsFenceNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsFenceNV) (GLuint fence);
+GdkGLProc    gdk_gl_get_glIsFenceNV (void);
+#define      gdk_gl_glIsFenceNV(proc, fence) \
+  ( ((GdkGLProc_glIsFenceNV) (proc)) (fence) )
 
-/* glBindTexGenParameterEXT */
-typedef GLuint (APIENTRY * GdkGLProc_glBindTexGenParameterEXT) (GLenum unit, GLenum coord, GLenum value);
-GdkGLProc    gdk_gl_get_glBindTexGenParameterEXT (void);
-#define      gdk_gl_glBindTexGenParameterEXT(proc, unit, coord, value) \
-  ( ((GdkGLProc_glBindTexGenParameterEXT) (proc)) (unit, coord, value) )
+/* glTestFenceNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glTestFenceNV) (GLuint fence);
+GdkGLProc    gdk_gl_get_glTestFenceNV (void);
+#define      gdk_gl_glTestFenceNV(proc, fence) \
+  ( ((GdkGLProc_glTestFenceNV) (proc)) (fence) )
 
-/* glBindTextureUnitParameterEXT */
-typedef GLuint (APIENTRY * GdkGLProc_glBindTextureUnitParameterEXT) (GLenum unit, GLenum value);
-GdkGLProc    gdk_gl_get_glBindTextureUnitParameterEXT (void);
-#define      gdk_gl_glBindTextureUnitParameterEXT(proc, unit, value) \
-  ( ((GdkGLProc_glBindTextureUnitParameterEXT) (proc)) (unit, value) )
+/* glGetFenceivNV */
+typedef void (APIENTRYP GdkGLProc_glGetFenceivNV) (GLuint fence, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetFenceivNV (void);
+#define      gdk_gl_glGetFenceivNV(proc, fence, pname, params) \
+  ( ((GdkGLProc_glGetFenceivNV) (proc)) (fence, pname, params) )
 
-/* glBindParameterEXT */
-typedef GLuint (APIENTRY * GdkGLProc_glBindParameterEXT) (GLenum value);
-GdkGLProc    gdk_gl_get_glBindParameterEXT (void);
-#define      gdk_gl_glBindParameterEXT(proc, value) \
-  ( ((GdkGLProc_glBindParameterEXT) (proc)) (value) )
+/* glFinishFenceNV */
+typedef void (APIENTRYP GdkGLProc_glFinishFenceNV) (GLuint fence);
+GdkGLProc    gdk_gl_get_glFinishFenceNV (void);
+#define      gdk_gl_glFinishFenceNV(proc, fence) \
+  ( ((GdkGLProc_glFinishFenceNV) (proc)) (fence) )
 
-/* glIsVariantEnabledEXT */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsVariantEnabledEXT) (GLuint id, GLenum cap);
-GdkGLProc    gdk_gl_get_glIsVariantEnabledEXT (void);
-#define      gdk_gl_glIsVariantEnabledEXT(proc, id, cap) \
-  ( ((GdkGLProc_glIsVariantEnabledEXT) (proc)) (id, cap) )
+/* glSetFenceNV */
+typedef void (APIENTRYP GdkGLProc_glSetFenceNV) (GLuint fence, GLenum condition);
+GdkGLProc    gdk_gl_get_glSetFenceNV (void);
+#define      gdk_gl_glSetFenceNV(proc, fence, condition) \
+  ( ((GdkGLProc_glSetFenceNV) (proc)) (fence, condition) )
 
-/* glGetVariantBooleanvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetVariantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data);
-GdkGLProc    gdk_gl_get_glGetVariantBooleanvEXT (void);
-#define      gdk_gl_glGetVariantBooleanvEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetVariantBooleanvEXT) (proc)) (id, value, data) )
+/* proc struct */
 
-/* glGetVariantIntegervEXT */
-typedef void (APIENTRY * GdkGLProc_glGetVariantIntegervEXT) (GLuint id, GLenum value, GLint *data);
-GdkGLProc    gdk_gl_get_glGetVariantIntegervEXT (void);
-#define      gdk_gl_glGetVariantIntegervEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetVariantIntegervEXT) (proc)) (id, value, data) )
+typedef struct _GdkGL_GL_NV_fence GdkGL_GL_NV_fence;
 
-/* glGetVariantFloatvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetVariantFloatvEXT) (GLuint id, GLenum value, GLfloat *data);
-GdkGLProc    gdk_gl_get_glGetVariantFloatvEXT (void);
-#define      gdk_gl_glGetVariantFloatvEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetVariantFloatvEXT) (proc)) (id, value, data) )
+struct _GdkGL_GL_NV_fence
+{
+  GdkGLProc_glDeleteFencesNV glDeleteFencesNV;
+  GdkGLProc_glGenFencesNV glGenFencesNV;
+  GdkGLProc_glIsFenceNV glIsFenceNV;
+  GdkGLProc_glTestFenceNV glTestFenceNV;
+  GdkGLProc_glGetFenceivNV glGetFenceivNV;
+  GdkGLProc_glFinishFenceNV glFinishFenceNV;
+  GdkGLProc_glSetFenceNV glSetFenceNV;
+};
 
-/* glGetVariantPointervEXT */
-typedef void (APIENTRY * GdkGLProc_glGetVariantPointervEXT) (GLuint id, GLenum value, GLvoid* *data);
-GdkGLProc    gdk_gl_get_glGetVariantPointervEXT (void);
-#define      gdk_gl_glGetVariantPointervEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetVariantPointervEXT) (proc)) (id, value, data) )
+GdkGL_GL_NV_fence *gdk_gl_get_GL_NV_fence (void);
 
-/* glGetInvariantBooleanvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetInvariantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data);
-GdkGLProc    gdk_gl_get_glGetInvariantBooleanvEXT (void);
-#define      gdk_gl_glGetInvariantBooleanvEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetInvariantBooleanvEXT) (proc)) (id, value, data) )
+/*
+ * GL_NV_evaluators
+ */
 
-/* glGetInvariantIntegervEXT */
-typedef void (APIENTRY * GdkGLProc_glGetInvariantIntegervEXT) (GLuint id, GLenum value, GLint *data);
-GdkGLProc    gdk_gl_get_glGetInvariantIntegervEXT (void);
-#define      gdk_gl_glGetInvariantIntegervEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetInvariantIntegervEXT) (proc)) (id, value, data) )
+/* glMapControlPointsNV */
+typedef void (APIENTRYP GdkGLProc_glMapControlPointsNV) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
+GdkGLProc    gdk_gl_get_glMapControlPointsNV (void);
+#define      gdk_gl_glMapControlPointsNV(proc, target, index, type, ustride, vstride, uorder, vorder, packed, points) \
+  ( ((GdkGLProc_glMapControlPointsNV) (proc)) (target, index, type, ustride, vstride, uorder, vorder, packed, points) )
 
-/* glGetInvariantFloatvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetInvariantFloatvEXT) (GLuint id, GLenum value, GLfloat *data);
-GdkGLProc    gdk_gl_get_glGetInvariantFloatvEXT (void);
-#define      gdk_gl_glGetInvariantFloatvEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetInvariantFloatvEXT) (proc)) (id, value, data) )
+/* glMapParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glMapParameterivNV) (GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glMapParameterivNV (void);
+#define      gdk_gl_glMapParameterivNV(proc, target, pname, params) \
+  ( ((GdkGLProc_glMapParameterivNV) (proc)) (target, pname, params) )
 
-/* glGetLocalConstantBooleanvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetLocalConstantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data);
-GdkGLProc    gdk_gl_get_glGetLocalConstantBooleanvEXT (void);
-#define      gdk_gl_glGetLocalConstantBooleanvEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetLocalConstantBooleanvEXT) (proc)) (id, value, data) )
+/* glMapParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glMapParameterfvNV) (GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glMapParameterfvNV (void);
+#define      gdk_gl_glMapParameterfvNV(proc, target, pname, params) \
+  ( ((GdkGLProc_glMapParameterfvNV) (proc)) (target, pname, params) )
 
-/* glGetLocalConstantIntegervEXT */
-typedef void (APIENTRY * GdkGLProc_glGetLocalConstantIntegervEXT) (GLuint id, GLenum value, GLint *data);
-GdkGLProc    gdk_gl_get_glGetLocalConstantIntegervEXT (void);
-#define      gdk_gl_glGetLocalConstantIntegervEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetLocalConstantIntegervEXT) (proc)) (id, value, data) )
+/* glGetMapControlPointsNV */
+typedef void (APIENTRYP GdkGLProc_glGetMapControlPointsNV) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
+GdkGLProc    gdk_gl_get_glGetMapControlPointsNV (void);
+#define      gdk_gl_glGetMapControlPointsNV(proc, target, index, type, ustride, vstride, packed, points) \
+  ( ((GdkGLProc_glGetMapControlPointsNV) (proc)) (target, index, type, ustride, vstride, packed, points) )
 
-/* glGetLocalConstantFloatvEXT */
-typedef void (APIENTRY * GdkGLProc_glGetLocalConstantFloatvEXT) (GLuint id, GLenum value, GLfloat *data);
-GdkGLProc    gdk_gl_get_glGetLocalConstantFloatvEXT (void);
-#define      gdk_gl_glGetLocalConstantFloatvEXT(proc, id, value, data) \
-  ( ((GdkGLProc_glGetLocalConstantFloatvEXT) (proc)) (id, value, data) )
+/* glGetMapParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glGetMapParameterivNV) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMapParameterivNV (void);
+#define      gdk_gl_glGetMapParameterivNV(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetMapParameterivNV) (proc)) (target, pname, params) )
+
+/* glGetMapParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetMapParameterfvNV) (GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetMapParameterfvNV (void);
+#define      gdk_gl_glGetMapParameterfvNV(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetMapParameterfvNV) (proc)) (target, pname, params) )
+
+/* glGetMapAttribParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glGetMapAttribParameterivNV) (GLenum target, GLuint index, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMapAttribParameterivNV (void);
+#define      gdk_gl_glGetMapAttribParameterivNV(proc, target, index, pname, params) \
+  ( ((GdkGLProc_glGetMapAttribParameterivNV) (proc)) (target, index, pname, params) )
+
+/* glGetMapAttribParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetMapAttribParameterfvNV) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetMapAttribParameterfvNV (void);
+#define      gdk_gl_glGetMapAttribParameterfvNV(proc, target, index, pname, params) \
+  ( ((GdkGLProc_glGetMapAttribParameterfvNV) (proc)) (target, index, pname, params) )
+
+/* glEvalMapsNV */
+typedef void (APIENTRYP GdkGLProc_glEvalMapsNV) (GLenum target, GLenum mode);
+GdkGLProc    gdk_gl_get_glEvalMapsNV (void);
+#define      gdk_gl_glEvalMapsNV(proc, target, mode) \
+  ( ((GdkGLProc_glEvalMapsNV) (proc)) (target, mode) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_vertex_shader GdkGL_GL_EXT_vertex_shader;
+typedef struct _GdkGL_GL_NV_evaluators GdkGL_GL_NV_evaluators;
 
-struct _GdkGL_GL_EXT_vertex_shader
+struct _GdkGL_GL_NV_evaluators
 {
-  GdkGLProc_glBeginVertexShaderEXT glBeginVertexShaderEXT;
-  GdkGLProc_glEndVertexShaderEXT glEndVertexShaderEXT;
-  GdkGLProc_glBindVertexShaderEXT glBindVertexShaderEXT;
-  GdkGLProc_glGenVertexShadersEXT glGenVertexShadersEXT;
-  GdkGLProc_glDeleteVertexShaderEXT glDeleteVertexShaderEXT;
-  GdkGLProc_glShaderOp1EXT glShaderOp1EXT;
-  GdkGLProc_glShaderOp2EXT glShaderOp2EXT;
-  GdkGLProc_glShaderOp3EXT glShaderOp3EXT;
-  GdkGLProc_glSwizzleEXT glSwizzleEXT;
-  GdkGLProc_glWriteMaskEXT glWriteMaskEXT;
-  GdkGLProc_glInsertComponentEXT glInsertComponentEXT;
-  GdkGLProc_glExtractComponentEXT glExtractComponentEXT;
-  GdkGLProc_glGenSymbolsEXT glGenSymbolsEXT;
-  GdkGLProc_glSetInvariantEXT glSetInvariantEXT;
-  GdkGLProc_glSetLocalConstantEXT glSetLocalConstantEXT;
-  GdkGLProc_glVariantbvEXT glVariantbvEXT;
-  GdkGLProc_glVariantsvEXT glVariantsvEXT;
-  GdkGLProc_glVariantivEXT glVariantivEXT;
-  GdkGLProc_glVariantfvEXT glVariantfvEXT;
-  GdkGLProc_glVariantdvEXT glVariantdvEXT;
-  GdkGLProc_glVariantubvEXT glVariantubvEXT;
-  GdkGLProc_glVariantusvEXT glVariantusvEXT;
-  GdkGLProc_glVariantuivEXT glVariantuivEXT;
-  GdkGLProc_glVariantPointerEXT glVariantPointerEXT;
-  GdkGLProc_glEnableVariantClientStateEXT glEnableVariantClientStateEXT;
-  GdkGLProc_glDisableVariantClientStateEXT glDisableVariantClientStateEXT;
-  GdkGLProc_glBindLightParameterEXT glBindLightParameterEXT;
-  GdkGLProc_glBindMaterialParameterEXT glBindMaterialParameterEXT;
-  GdkGLProc_glBindTexGenParameterEXT glBindTexGenParameterEXT;
-  GdkGLProc_glBindTextureUnitParameterEXT glBindTextureUnitParameterEXT;
-  GdkGLProc_glBindParameterEXT glBindParameterEXT;
-  GdkGLProc_glIsVariantEnabledEXT glIsVariantEnabledEXT;
-  GdkGLProc_glGetVariantBooleanvEXT glGetVariantBooleanvEXT;
-  GdkGLProc_glGetVariantIntegervEXT glGetVariantIntegervEXT;
-  GdkGLProc_glGetVariantFloatvEXT glGetVariantFloatvEXT;
-  GdkGLProc_glGetVariantPointervEXT glGetVariantPointervEXT;
-  GdkGLProc_glGetInvariantBooleanvEXT glGetInvariantBooleanvEXT;
-  GdkGLProc_glGetInvariantIntegervEXT glGetInvariantIntegervEXT;
-  GdkGLProc_glGetInvariantFloatvEXT glGetInvariantFloatvEXT;
-  GdkGLProc_glGetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT;
-  GdkGLProc_glGetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT;
-  GdkGLProc_glGetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT;
+  GdkGLProc_glMapControlPointsNV glMapControlPointsNV;
+  GdkGLProc_glMapParameterivNV glMapParameterivNV;
+  GdkGLProc_glMapParameterfvNV glMapParameterfvNV;
+  GdkGLProc_glGetMapControlPointsNV glGetMapControlPointsNV;
+  GdkGLProc_glGetMapParameterivNV glGetMapParameterivNV;
+  GdkGLProc_glGetMapParameterfvNV glGetMapParameterfvNV;
+  GdkGLProc_glGetMapAttribParameterivNV glGetMapAttribParameterivNV;
+  GdkGLProc_glGetMapAttribParameterfvNV glGetMapAttribParameterfvNV;
+  GdkGLProc_glEvalMapsNV glEvalMapsNV;
 };
 
-GdkGL_GL_EXT_vertex_shader *gdk_gl_get_GL_EXT_vertex_shader (void);
+GdkGL_GL_NV_evaluators *gdk_gl_get_GL_NV_evaluators (void);
 
 /*
- * GL_ATI_vertex_streams
+ * GL_NV_register_combiners2
  */
 
-/* glVertexStream1sATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1sATI) (GLenum stream, GLshort x);
-GdkGLProc    gdk_gl_get_glVertexStream1sATI (void);
-#define      gdk_gl_glVertexStream1sATI(proc, stream, x) \
-  ( ((GdkGLProc_glVertexStream1sATI) (proc)) (stream, x) )
+/* glCombinerStageParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glCombinerStageParameterfvNV) (GLenum stage, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glCombinerStageParameterfvNV (void);
+#define      gdk_gl_glCombinerStageParameterfvNV(proc, stage, pname, params) \
+  ( ((GdkGLProc_glCombinerStageParameterfvNV) (proc)) (stage, pname, params) )
 
-/* glVertexStream1svATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1svATI) (GLenum stream, const GLshort *coords);
-GdkGLProc    gdk_gl_get_glVertexStream1svATI (void);
-#define      gdk_gl_glVertexStream1svATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream1svATI) (proc)) (stream, coords) )
+/* glGetCombinerStageParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetCombinerStageParameterfvNV) (GLenum stage, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetCombinerStageParameterfvNV (void);
+#define      gdk_gl_glGetCombinerStageParameterfvNV(proc, stage, pname, params) \
+  ( ((GdkGLProc_glGetCombinerStageParameterfvNV) (proc)) (stage, pname, params) )
 
-/* glVertexStream1iATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1iATI) (GLenum stream, GLint x);
-GdkGLProc    gdk_gl_get_glVertexStream1iATI (void);
-#define      gdk_gl_glVertexStream1iATI(proc, stream, x) \
-  ( ((GdkGLProc_glVertexStream1iATI) (proc)) (stream, x) )
+/* proc struct */
 
-/* glVertexStream1ivATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1ivATI) (GLenum stream, const GLint *coords);
-GdkGLProc    gdk_gl_get_glVertexStream1ivATI (void);
-#define      gdk_gl_glVertexStream1ivATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream1ivATI) (proc)) (stream, coords) )
+typedef struct _GdkGL_GL_NV_register_combiners2 GdkGL_GL_NV_register_combiners2;
 
-/* glVertexStream1fATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1fATI) (GLenum stream, GLfloat x);
-GdkGLProc    gdk_gl_get_glVertexStream1fATI (void);
-#define      gdk_gl_glVertexStream1fATI(proc, stream, x) \
-  ( ((GdkGLProc_glVertexStream1fATI) (proc)) (stream, x) )
+struct _GdkGL_GL_NV_register_combiners2
+{
+  GdkGLProc_glCombinerStageParameterfvNV glCombinerStageParameterfvNV;
+  GdkGLProc_glGetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV;
+};
 
-/* glVertexStream1fvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1fvATI) (GLenum stream, const GLfloat *coords);
-GdkGLProc    gdk_gl_get_glVertexStream1fvATI (void);
-#define      gdk_gl_glVertexStream1fvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream1fvATI) (proc)) (stream, coords) )
+GdkGL_GL_NV_register_combiners2 *gdk_gl_get_GL_NV_register_combiners2 (void);
 
-/* glVertexStream1dATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1dATI) (GLenum stream, GLdouble x);
-GdkGLProc    gdk_gl_get_glVertexStream1dATI (void);
-#define      gdk_gl_glVertexStream1dATI(proc, stream, x) \
-  ( ((GdkGLProc_glVertexStream1dATI) (proc)) (stream, x) )
+/*
+ * GL_NV_vertex_program
+ */
 
-/* glVertexStream1dvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream1dvATI) (GLenum stream, const GLdouble *coords);
-GdkGLProc    gdk_gl_get_glVertexStream1dvATI (void);
-#define      gdk_gl_glVertexStream1dvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream1dvATI) (proc)) (stream, coords) )
+/* glAreProgramsResidentNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glAreProgramsResidentNV) (GLsizei n, const GLuint *programs, GLboolean *residences);
+GdkGLProc    gdk_gl_get_glAreProgramsResidentNV (void);
+#define      gdk_gl_glAreProgramsResidentNV(proc, n, programs, residences) \
+  ( ((GdkGLProc_glAreProgramsResidentNV) (proc)) (n, programs, residences) )
 
-/* glVertexStream2sATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2sATI) (GLenum stream, GLshort x, GLshort y);
-GdkGLProc    gdk_gl_get_glVertexStream2sATI (void);
-#define      gdk_gl_glVertexStream2sATI(proc, stream, x, y) \
-  ( ((GdkGLProc_glVertexStream2sATI) (proc)) (stream, x, y) )
+/* glBindProgramNV */
+typedef void (APIENTRYP GdkGLProc_glBindProgramNV) (GLenum target, GLuint id);
+GdkGLProc    gdk_gl_get_glBindProgramNV (void);
+#define      gdk_gl_glBindProgramNV(proc, target, id) \
+  ( ((GdkGLProc_glBindProgramNV) (proc)) (target, id) )
 
-/* glVertexStream2svATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2svATI) (GLenum stream, const GLshort *coords);
-GdkGLProc    gdk_gl_get_glVertexStream2svATI (void);
+/* glDeleteProgramsNV */
+typedef void (APIENTRYP GdkGLProc_glDeleteProgramsNV) (GLsizei n, const GLuint *programs);
+GdkGLProc    gdk_gl_get_glDeleteProgramsNV (void);
+#define      gdk_gl_glDeleteProgramsNV(proc, n, programs) \
+  ( ((GdkGLProc_glDeleteProgramsNV) (proc)) (n, programs) )
+
+/* glExecuteProgramNV */
+typedef void (APIENTRYP GdkGLProc_glExecuteProgramNV) (GLenum target, GLuint id, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glExecuteProgramNV (void);
+#define      gdk_gl_glExecuteProgramNV(proc, target, id, params) \
+  ( ((GdkGLProc_glExecuteProgramNV) (proc)) (target, id, params) )
+
+/* glGenProgramsNV */
+typedef void (APIENTRYP GdkGLProc_glGenProgramsNV) (GLsizei n, GLuint *programs);
+GdkGLProc    gdk_gl_get_glGenProgramsNV (void);
+#define      gdk_gl_glGenProgramsNV(proc, n, programs) \
+  ( ((GdkGLProc_glGenProgramsNV) (proc)) (n, programs) )
+
+/* glGetProgramParameterdvNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramParameterdvNV) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
+GdkGLProc    gdk_gl_get_glGetProgramParameterdvNV (void);
+#define      gdk_gl_glGetProgramParameterdvNV(proc, target, index, pname, params) \
+  ( ((GdkGLProc_glGetProgramParameterdvNV) (proc)) (target, index, pname, params) )
+
+/* glGetProgramParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramParameterfvNV) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetProgramParameterfvNV (void);
+#define      gdk_gl_glGetProgramParameterfvNV(proc, target, index, pname, params) \
+  ( ((GdkGLProc_glGetProgramParameterfvNV) (proc)) (target, index, pname, params) )
+
+/* glGetProgramivNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramivNV) (GLuint id, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetProgramivNV (void);
+#define      gdk_gl_glGetProgramivNV(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetProgramivNV) (proc)) (id, pname, params) )
+
+/* glGetProgramStringNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramStringNV) (GLuint id, GLenum pname, GLubyte *program);
+GdkGLProc    gdk_gl_get_glGetProgramStringNV (void);
+#define      gdk_gl_glGetProgramStringNV(proc, id, pname, program) \
+  ( ((GdkGLProc_glGetProgramStringNV) (proc)) (id, pname, program) )
+
+/* glGetTrackMatrixivNV */
+typedef void (APIENTRYP GdkGLProc_glGetTrackMatrixivNV) (GLenum target, GLuint address, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetTrackMatrixivNV (void);
+#define      gdk_gl_glGetTrackMatrixivNV(proc, target, address, pname, params) \
+  ( ((GdkGLProc_glGetTrackMatrixivNV) (proc)) (target, address, pname, params) )
+
+/* glGetVertexAttribdvNV */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribdvNV) (GLuint index, GLenum pname, GLdouble *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribdvNV (void);
+#define      gdk_gl_glGetVertexAttribdvNV(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribdvNV) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribfvNV) (GLuint index, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribfvNV (void);
+#define      gdk_gl_glGetVertexAttribfvNV(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribfvNV) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribivNV */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribivNV) (GLuint index, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribivNV (void);
+#define      gdk_gl_glGetVertexAttribivNV(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribivNV) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribPointervNV */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribPointervNV) (GLuint index, GLenum pname, GLvoid* *pointer);
+GdkGLProc    gdk_gl_get_glGetVertexAttribPointervNV (void);
+#define      gdk_gl_glGetVertexAttribPointervNV(proc, index, pname, pointer) \
+  ( ((GdkGLProc_glGetVertexAttribPointervNV) (proc)) (index, pname, pointer) )
+
+/* glIsProgramNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsProgramNV) (GLuint id);
+GdkGLProc    gdk_gl_get_glIsProgramNV (void);
+#define      gdk_gl_glIsProgramNV(proc, id) \
+  ( ((GdkGLProc_glIsProgramNV) (proc)) (id) )
+
+/* glLoadProgramNV */
+typedef void (APIENTRYP GdkGLProc_glLoadProgramNV) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
+GdkGLProc    gdk_gl_get_glLoadProgramNV (void);
+#define      gdk_gl_glLoadProgramNV(proc, target, id, len, program) \
+  ( ((GdkGLProc_glLoadProgramNV) (proc)) (target, id, len, program) )
+
+/* glProgramParameter4dNV */
+typedef void (APIENTRYP GdkGLProc_glProgramParameter4dNV) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+GdkGLProc    gdk_gl_get_glProgramParameter4dNV (void);
+#define      gdk_gl_glProgramParameter4dNV(proc, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glProgramParameter4dNV) (proc)) (target, index, x, y, z, w) )
+
+/* glProgramParameter4dvNV */
+typedef void (APIENTRYP GdkGLProc_glProgramParameter4dvNV) (GLenum target, GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glProgramParameter4dvNV (void);
+#define      gdk_gl_glProgramParameter4dvNV(proc, target, index, v) \
+  ( ((GdkGLProc_glProgramParameter4dvNV) (proc)) (target, index, v) )
+
+/* glProgramParameter4fNV */
+typedef void (APIENTRYP GdkGLProc_glProgramParameter4fNV) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glProgramParameter4fNV (void);
+#define      gdk_gl_glProgramParameter4fNV(proc, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glProgramParameter4fNV) (proc)) (target, index, x, y, z, w) )
+
+/* glProgramParameter4fvNV */
+typedef void (APIENTRYP GdkGLProc_glProgramParameter4fvNV) (GLenum target, GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glProgramParameter4fvNV (void);
+#define      gdk_gl_glProgramParameter4fvNV(proc, target, index, v) \
+  ( ((GdkGLProc_glProgramParameter4fvNV) (proc)) (target, index, v) )
+
+/* glProgramParameters4dvNV */
+typedef void (APIENTRYP GdkGLProc_glProgramParameters4dvNV) (GLenum target, GLuint index, GLuint count, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glProgramParameters4dvNV (void);
+#define      gdk_gl_glProgramParameters4dvNV(proc, target, index, count, v) \
+  ( ((GdkGLProc_glProgramParameters4dvNV) (proc)) (target, index, count, v) )
+
+/* glProgramParameters4fvNV */
+typedef void (APIENTRYP GdkGLProc_glProgramParameters4fvNV) (GLenum target, GLuint index, GLuint count, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glProgramParameters4fvNV (void);
+#define      gdk_gl_glProgramParameters4fvNV(proc, target, index, count, v) \
+  ( ((GdkGLProc_glProgramParameters4fvNV) (proc)) (target, index, count, v) )
+
+/* glRequestResidentProgramsNV */
+typedef void (APIENTRYP GdkGLProc_glRequestResidentProgramsNV) (GLsizei n, const GLuint *programs);
+GdkGLProc    gdk_gl_get_glRequestResidentProgramsNV (void);
+#define      gdk_gl_glRequestResidentProgramsNV(proc, n, programs) \
+  ( ((GdkGLProc_glRequestResidentProgramsNV) (proc)) (n, programs) )
+
+/* glTrackMatrixNV */
+typedef void (APIENTRYP GdkGLProc_glTrackMatrixNV) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
+GdkGLProc    gdk_gl_get_glTrackMatrixNV (void);
+#define      gdk_gl_glTrackMatrixNV(proc, target, address, matrix, transform) \
+  ( ((GdkGLProc_glTrackMatrixNV) (proc)) (target, address, matrix, transform) )
+
+/* glVertexAttribPointerNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribPointerNV) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexAttribPointerNV (void);
+#define      gdk_gl_glVertexAttribPointerNV(proc, index, fsize, type, stride, pointer) \
+  ( ((GdkGLProc_glVertexAttribPointerNV) (proc)) (index, fsize, type, stride, pointer) )
+
+/* glVertexAttrib1dNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1dNV) (GLuint index, GLdouble x);
+GdkGLProc    gdk_gl_get_glVertexAttrib1dNV (void);
+#define      gdk_gl_glVertexAttrib1dNV(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttrib1dNV) (proc)) (index, x) )
+
+/* glVertexAttrib1dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1dvNV) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib1dvNV (void);
+#define      gdk_gl_glVertexAttrib1dvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib1dvNV) (proc)) (index, v) )
+
+/* glVertexAttrib1fNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1fNV) (GLuint index, GLfloat x);
+GdkGLProc    gdk_gl_get_glVertexAttrib1fNV (void);
+#define      gdk_gl_glVertexAttrib1fNV(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttrib1fNV) (proc)) (index, x) )
+
+/* glVertexAttrib1fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1fvNV) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib1fvNV (void);
+#define      gdk_gl_glVertexAttrib1fvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib1fvNV) (proc)) (index, v) )
+
+/* glVertexAttrib1sNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1sNV) (GLuint index, GLshort x);
+GdkGLProc    gdk_gl_get_glVertexAttrib1sNV (void);
+#define      gdk_gl_glVertexAttrib1sNV(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttrib1sNV) (proc)) (index, x) )
+
+/* glVertexAttrib1svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1svNV) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib1svNV (void);
+#define      gdk_gl_glVertexAttrib1svNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib1svNV) (proc)) (index, v) )
+
+/* glVertexAttrib2dNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2dNV) (GLuint index, GLdouble x, GLdouble y);
+GdkGLProc    gdk_gl_get_glVertexAttrib2dNV (void);
+#define      gdk_gl_glVertexAttrib2dNV(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttrib2dNV) (proc)) (index, x, y) )
+
+/* glVertexAttrib2dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2dvNV) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib2dvNV (void);
+#define      gdk_gl_glVertexAttrib2dvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib2dvNV) (proc)) (index, v) )
+
+/* glVertexAttrib2fNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2fNV) (GLuint index, GLfloat x, GLfloat y);
+GdkGLProc    gdk_gl_get_glVertexAttrib2fNV (void);
+#define      gdk_gl_glVertexAttrib2fNV(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttrib2fNV) (proc)) (index, x, y) )
+
+/* glVertexAttrib2fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2fvNV) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib2fvNV (void);
+#define      gdk_gl_glVertexAttrib2fvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib2fvNV) (proc)) (index, v) )
+
+/* glVertexAttrib2sNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2sNV) (GLuint index, GLshort x, GLshort y);
+GdkGLProc    gdk_gl_get_glVertexAttrib2sNV (void);
+#define      gdk_gl_glVertexAttrib2sNV(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttrib2sNV) (proc)) (index, x, y) )
+
+/* glVertexAttrib2svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2svNV) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib2svNV (void);
+#define      gdk_gl_glVertexAttrib2svNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib2svNV) (proc)) (index, v) )
+
+/* glVertexAttrib3dNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+GdkGLProc    gdk_gl_get_glVertexAttrib3dNV (void);
+#define      gdk_gl_glVertexAttrib3dNV(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttrib3dNV) (proc)) (index, x, y, z) )
+
+/* glVertexAttrib3dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3dvNV) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib3dvNV (void);
+#define      gdk_gl_glVertexAttrib3dvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib3dvNV) (proc)) (index, v) )
+
+/* glVertexAttrib3fNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glVertexAttrib3fNV (void);
+#define      gdk_gl_glVertexAttrib3fNV(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttrib3fNV) (proc)) (index, x, y, z) )
+
+/* glVertexAttrib3fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3fvNV) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib3fvNV (void);
+#define      gdk_gl_glVertexAttrib3fvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib3fvNV) (proc)) (index, v) )
+
+/* glVertexAttrib3sNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3sNV) (GLuint index, GLshort x, GLshort y, GLshort z);
+GdkGLProc    gdk_gl_get_glVertexAttrib3sNV (void);
+#define      gdk_gl_glVertexAttrib3sNV(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttrib3sNV) (proc)) (index, x, y, z) )
+
+/* glVertexAttrib3svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3svNV) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib3svNV (void);
+#define      gdk_gl_glVertexAttrib3svNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib3svNV) (proc)) (index, v) )
+
+/* glVertexAttrib4dNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4dNV (void);
+#define      gdk_gl_glVertexAttrib4dNV(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4dNV) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4dvNV) (GLuint index, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4dvNV (void);
+#define      gdk_gl_glVertexAttrib4dvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4dvNV) (proc)) (index, v) )
+
+/* glVertexAttrib4fNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4fNV (void);
+#define      gdk_gl_glVertexAttrib4fNV(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4fNV) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4fvNV) (GLuint index, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4fvNV (void);
+#define      gdk_gl_glVertexAttrib4fvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4fvNV) (proc)) (index, v) )
+
+/* glVertexAttrib4sNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4sNV) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4sNV (void);
+#define      gdk_gl_glVertexAttrib4sNV(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4sNV) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4svNV) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4svNV (void);
+#define      gdk_gl_glVertexAttrib4svNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4svNV) (proc)) (index, v) )
+
+/* glVertexAttrib4ubNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4ubNV) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4ubNV (void);
+#define      gdk_gl_glVertexAttrib4ubNV(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4ubNV) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4ubvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4ubvNV) (GLuint index, const GLubyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4ubvNV (void);
+#define      gdk_gl_glVertexAttrib4ubvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4ubvNV) (proc)) (index, v) )
+
+/* glVertexAttribs1dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs1dvNV) (GLuint index, GLsizei count, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs1dvNV (void);
+#define      gdk_gl_glVertexAttribs1dvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs1dvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs1fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs1fvNV) (GLuint index, GLsizei count, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs1fvNV (void);
+#define      gdk_gl_glVertexAttribs1fvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs1fvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs1svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs1svNV) (GLuint index, GLsizei count, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs1svNV (void);
+#define      gdk_gl_glVertexAttribs1svNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs1svNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs2dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs2dvNV) (GLuint index, GLsizei count, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs2dvNV (void);
+#define      gdk_gl_glVertexAttribs2dvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs2dvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs2fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs2fvNV) (GLuint index, GLsizei count, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs2fvNV (void);
+#define      gdk_gl_glVertexAttribs2fvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs2fvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs2svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs2svNV) (GLuint index, GLsizei count, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs2svNV (void);
+#define      gdk_gl_glVertexAttribs2svNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs2svNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs3dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs3dvNV) (GLuint index, GLsizei count, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs3dvNV (void);
+#define      gdk_gl_glVertexAttribs3dvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs3dvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs3fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs3fvNV) (GLuint index, GLsizei count, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs3fvNV (void);
+#define      gdk_gl_glVertexAttribs3fvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs3fvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs3svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs3svNV) (GLuint index, GLsizei count, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs3svNV (void);
+#define      gdk_gl_glVertexAttribs3svNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs3svNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs4dvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs4dvNV) (GLuint index, GLsizei count, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs4dvNV (void);
+#define      gdk_gl_glVertexAttribs4dvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs4dvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs4fvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs4fvNV) (GLuint index, GLsizei count, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs4fvNV (void);
+#define      gdk_gl_glVertexAttribs4fvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs4fvNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs4svNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs4svNV) (GLuint index, GLsizei count, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs4svNV (void);
+#define      gdk_gl_glVertexAttribs4svNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs4svNV) (proc)) (index, count, v) )
+
+/* glVertexAttribs4ubvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs4ubvNV) (GLuint index, GLsizei count, const GLubyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs4ubvNV (void);
+#define      gdk_gl_glVertexAttribs4ubvNV(proc, index, count, v) \
+  ( ((GdkGLProc_glVertexAttribs4ubvNV) (proc)) (index, count, v) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_vertex_program GdkGL_GL_NV_vertex_program;
+
+struct _GdkGL_GL_NV_vertex_program
+{
+  GdkGLProc_glAreProgramsResidentNV glAreProgramsResidentNV;
+  GdkGLProc_glBindProgramNV glBindProgramNV;
+  GdkGLProc_glDeleteProgramsNV glDeleteProgramsNV;
+  GdkGLProc_glExecuteProgramNV glExecuteProgramNV;
+  GdkGLProc_glGenProgramsNV glGenProgramsNV;
+  GdkGLProc_glGetProgramParameterdvNV glGetProgramParameterdvNV;
+  GdkGLProc_glGetProgramParameterfvNV glGetProgramParameterfvNV;
+  GdkGLProc_glGetProgramivNV glGetProgramivNV;
+  GdkGLProc_glGetProgramStringNV glGetProgramStringNV;
+  GdkGLProc_glGetTrackMatrixivNV glGetTrackMatrixivNV;
+  GdkGLProc_glGetVertexAttribdvNV glGetVertexAttribdvNV;
+  GdkGLProc_glGetVertexAttribfvNV glGetVertexAttribfvNV;
+  GdkGLProc_glGetVertexAttribivNV glGetVertexAttribivNV;
+  GdkGLProc_glGetVertexAttribPointervNV glGetVertexAttribPointervNV;
+  GdkGLProc_glIsProgramNV glIsProgramNV;
+  GdkGLProc_glLoadProgramNV glLoadProgramNV;
+  GdkGLProc_glProgramParameter4dNV glProgramParameter4dNV;
+  GdkGLProc_glProgramParameter4dvNV glProgramParameter4dvNV;
+  GdkGLProc_glProgramParameter4fNV glProgramParameter4fNV;
+  GdkGLProc_glProgramParameter4fvNV glProgramParameter4fvNV;
+  GdkGLProc_glProgramParameters4dvNV glProgramParameters4dvNV;
+  GdkGLProc_glProgramParameters4fvNV glProgramParameters4fvNV;
+  GdkGLProc_glRequestResidentProgramsNV glRequestResidentProgramsNV;
+  GdkGLProc_glTrackMatrixNV glTrackMatrixNV;
+  GdkGLProc_glVertexAttribPointerNV glVertexAttribPointerNV;
+  GdkGLProc_glVertexAttrib1dNV glVertexAttrib1dNV;
+  GdkGLProc_glVertexAttrib1dvNV glVertexAttrib1dvNV;
+  GdkGLProc_glVertexAttrib1fNV glVertexAttrib1fNV;
+  GdkGLProc_glVertexAttrib1fvNV glVertexAttrib1fvNV;
+  GdkGLProc_glVertexAttrib1sNV glVertexAttrib1sNV;
+  GdkGLProc_glVertexAttrib1svNV glVertexAttrib1svNV;
+  GdkGLProc_glVertexAttrib2dNV glVertexAttrib2dNV;
+  GdkGLProc_glVertexAttrib2dvNV glVertexAttrib2dvNV;
+  GdkGLProc_glVertexAttrib2fNV glVertexAttrib2fNV;
+  GdkGLProc_glVertexAttrib2fvNV glVertexAttrib2fvNV;
+  GdkGLProc_glVertexAttrib2sNV glVertexAttrib2sNV;
+  GdkGLProc_glVertexAttrib2svNV glVertexAttrib2svNV;
+  GdkGLProc_glVertexAttrib3dNV glVertexAttrib3dNV;
+  GdkGLProc_glVertexAttrib3dvNV glVertexAttrib3dvNV;
+  GdkGLProc_glVertexAttrib3fNV glVertexAttrib3fNV;
+  GdkGLProc_glVertexAttrib3fvNV glVertexAttrib3fvNV;
+  GdkGLProc_glVertexAttrib3sNV glVertexAttrib3sNV;
+  GdkGLProc_glVertexAttrib3svNV glVertexAttrib3svNV;
+  GdkGLProc_glVertexAttrib4dNV glVertexAttrib4dNV;
+  GdkGLProc_glVertexAttrib4dvNV glVertexAttrib4dvNV;
+  GdkGLProc_glVertexAttrib4fNV glVertexAttrib4fNV;
+  GdkGLProc_glVertexAttrib4fvNV glVertexAttrib4fvNV;
+  GdkGLProc_glVertexAttrib4sNV glVertexAttrib4sNV;
+  GdkGLProc_glVertexAttrib4svNV glVertexAttrib4svNV;
+  GdkGLProc_glVertexAttrib4ubNV glVertexAttrib4ubNV;
+  GdkGLProc_glVertexAttrib4ubvNV glVertexAttrib4ubvNV;
+  GdkGLProc_glVertexAttribs1dvNV glVertexAttribs1dvNV;
+  GdkGLProc_glVertexAttribs1fvNV glVertexAttribs1fvNV;
+  GdkGLProc_glVertexAttribs1svNV glVertexAttribs1svNV;
+  GdkGLProc_glVertexAttribs2dvNV glVertexAttribs2dvNV;
+  GdkGLProc_glVertexAttribs2fvNV glVertexAttribs2fvNV;
+  GdkGLProc_glVertexAttribs2svNV glVertexAttribs2svNV;
+  GdkGLProc_glVertexAttribs3dvNV glVertexAttribs3dvNV;
+  GdkGLProc_glVertexAttribs3fvNV glVertexAttribs3fvNV;
+  GdkGLProc_glVertexAttribs3svNV glVertexAttribs3svNV;
+  GdkGLProc_glVertexAttribs4dvNV glVertexAttribs4dvNV;
+  GdkGLProc_glVertexAttribs4fvNV glVertexAttribs4fvNV;
+  GdkGLProc_glVertexAttribs4svNV glVertexAttribs4svNV;
+  GdkGLProc_glVertexAttribs4ubvNV glVertexAttribs4ubvNV;
+};
+
+GdkGL_GL_NV_vertex_program *gdk_gl_get_GL_NV_vertex_program (void);
+
+/*
+ * GL_ATI_envmap_bumpmap
+ */
+
+/* glTexBumpParameterivATI */
+typedef void (APIENTRYP GdkGLProc_glTexBumpParameterivATI) (GLenum pname, const GLint *param);
+GdkGLProc    gdk_gl_get_glTexBumpParameterivATI (void);
+#define      gdk_gl_glTexBumpParameterivATI(proc, pname, param) \
+  ( ((GdkGLProc_glTexBumpParameterivATI) (proc)) (pname, param) )
+
+/* glTexBumpParameterfvATI */
+typedef void (APIENTRYP GdkGLProc_glTexBumpParameterfvATI) (GLenum pname, const GLfloat *param);
+GdkGLProc    gdk_gl_get_glTexBumpParameterfvATI (void);
+#define      gdk_gl_glTexBumpParameterfvATI(proc, pname, param) \
+  ( ((GdkGLProc_glTexBumpParameterfvATI) (proc)) (pname, param) )
+
+/* glGetTexBumpParameterivATI */
+typedef void (APIENTRYP GdkGLProc_glGetTexBumpParameterivATI) (GLenum pname, GLint *param);
+GdkGLProc    gdk_gl_get_glGetTexBumpParameterivATI (void);
+#define      gdk_gl_glGetTexBumpParameterivATI(proc, pname, param) \
+  ( ((GdkGLProc_glGetTexBumpParameterivATI) (proc)) (pname, param) )
+
+/* glGetTexBumpParameterfvATI */
+typedef void (APIENTRYP GdkGLProc_glGetTexBumpParameterfvATI) (GLenum pname, GLfloat *param);
+GdkGLProc    gdk_gl_get_glGetTexBumpParameterfvATI (void);
+#define      gdk_gl_glGetTexBumpParameterfvATI(proc, pname, param) \
+  ( ((GdkGLProc_glGetTexBumpParameterfvATI) (proc)) (pname, param) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_ATI_envmap_bumpmap GdkGL_GL_ATI_envmap_bumpmap;
+
+struct _GdkGL_GL_ATI_envmap_bumpmap
+{
+  GdkGLProc_glTexBumpParameterivATI glTexBumpParameterivATI;
+  GdkGLProc_glTexBumpParameterfvATI glTexBumpParameterfvATI;
+  GdkGLProc_glGetTexBumpParameterivATI glGetTexBumpParameterivATI;
+  GdkGLProc_glGetTexBumpParameterfvATI glGetTexBumpParameterfvATI;
+};
+
+GdkGL_GL_ATI_envmap_bumpmap *gdk_gl_get_GL_ATI_envmap_bumpmap (void);
+
+/*
+ * GL_ATI_fragment_shader
+ */
+
+/* glGenFragmentShadersATI */
+typedef GLuint (APIENTRYP GdkGLProc_glGenFragmentShadersATI) (GLuint range);
+GdkGLProc    gdk_gl_get_glGenFragmentShadersATI (void);
+#define      gdk_gl_glGenFragmentShadersATI(proc, range) \
+  ( ((GdkGLProc_glGenFragmentShadersATI) (proc)) (range) )
+
+/* glBindFragmentShaderATI */
+typedef void (APIENTRYP GdkGLProc_glBindFragmentShaderATI) (GLuint id);
+GdkGLProc    gdk_gl_get_glBindFragmentShaderATI (void);
+#define      gdk_gl_glBindFragmentShaderATI(proc, id) \
+  ( ((GdkGLProc_glBindFragmentShaderATI) (proc)) (id) )
+
+/* glDeleteFragmentShaderATI */
+typedef void (APIENTRYP GdkGLProc_glDeleteFragmentShaderATI) (GLuint id);
+GdkGLProc    gdk_gl_get_glDeleteFragmentShaderATI (void);
+#define      gdk_gl_glDeleteFragmentShaderATI(proc, id) \
+  ( ((GdkGLProc_glDeleteFragmentShaderATI) (proc)) (id) )
+
+/* glBeginFragmentShaderATI */
+typedef void (APIENTRYP GdkGLProc_glBeginFragmentShaderATI) (void);
+GdkGLProc    gdk_gl_get_glBeginFragmentShaderATI (void);
+#define      gdk_gl_glBeginFragmentShaderATI(proc) \
+  ( ((GdkGLProc_glBeginFragmentShaderATI) (proc)) () )
+
+/* glEndFragmentShaderATI */
+typedef void (APIENTRYP GdkGLProc_glEndFragmentShaderATI) (void);
+GdkGLProc    gdk_gl_get_glEndFragmentShaderATI (void);
+#define      gdk_gl_glEndFragmentShaderATI(proc) \
+  ( ((GdkGLProc_glEndFragmentShaderATI) (proc)) () )
+
+/* glPassTexCoordATI */
+typedef void (APIENTRYP GdkGLProc_glPassTexCoordATI) (GLuint dst, GLuint coord, GLenum swizzle);
+GdkGLProc    gdk_gl_get_glPassTexCoordATI (void);
+#define      gdk_gl_glPassTexCoordATI(proc, dst, coord, swizzle) \
+  ( ((GdkGLProc_glPassTexCoordATI) (proc)) (dst, coord, swizzle) )
+
+/* glSampleMapATI */
+typedef void (APIENTRYP GdkGLProc_glSampleMapATI) (GLuint dst, GLuint interp, GLenum swizzle);
+GdkGLProc    gdk_gl_get_glSampleMapATI (void);
+#define      gdk_gl_glSampleMapATI(proc, dst, interp, swizzle) \
+  ( ((GdkGLProc_glSampleMapATI) (proc)) (dst, interp, swizzle) )
+
+/* glColorFragmentOp1ATI */
+typedef void (APIENTRYP GdkGLProc_glColorFragmentOp1ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+GdkGLProc    gdk_gl_get_glColorFragmentOp1ATI (void);
+#define      gdk_gl_glColorFragmentOp1ATI(proc, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) \
+  ( ((GdkGLProc_glColorFragmentOp1ATI) (proc)) (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) )
+
+/* glColorFragmentOp2ATI */
+typedef void (APIENTRYP GdkGLProc_glColorFragmentOp2ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+GdkGLProc    gdk_gl_get_glColorFragmentOp2ATI (void);
+#define      gdk_gl_glColorFragmentOp2ATI(proc, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) \
+  ( ((GdkGLProc_glColorFragmentOp2ATI) (proc)) (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) )
+
+/* glColorFragmentOp3ATI */
+typedef void (APIENTRYP GdkGLProc_glColorFragmentOp3ATI) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+GdkGLProc    gdk_gl_get_glColorFragmentOp3ATI (void);
+#define      gdk_gl_glColorFragmentOp3ATI(proc, op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) \
+  ( ((GdkGLProc_glColorFragmentOp3ATI) (proc)) (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) )
+
+/* glAlphaFragmentOp1ATI */
+typedef void (APIENTRYP GdkGLProc_glAlphaFragmentOp1ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+GdkGLProc    gdk_gl_get_glAlphaFragmentOp1ATI (void);
+#define      gdk_gl_glAlphaFragmentOp1ATI(proc, op, dst, dstMod, arg1, arg1Rep, arg1Mod) \
+  ( ((GdkGLProc_glAlphaFragmentOp1ATI) (proc)) (op, dst, dstMod, arg1, arg1Rep, arg1Mod) )
+
+/* glAlphaFragmentOp2ATI */
+typedef void (APIENTRYP GdkGLProc_glAlphaFragmentOp2ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+GdkGLProc    gdk_gl_get_glAlphaFragmentOp2ATI (void);
+#define      gdk_gl_glAlphaFragmentOp2ATI(proc, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) \
+  ( ((GdkGLProc_glAlphaFragmentOp2ATI) (proc)) (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) )
+
+/* glAlphaFragmentOp3ATI */
+typedef void (APIENTRYP GdkGLProc_glAlphaFragmentOp3ATI) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+GdkGLProc    gdk_gl_get_glAlphaFragmentOp3ATI (void);
+#define      gdk_gl_glAlphaFragmentOp3ATI(proc, op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) \
+  ( ((GdkGLProc_glAlphaFragmentOp3ATI) (proc)) (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) )
+
+/* glSetFragmentShaderConstantATI */
+typedef void (APIENTRYP GdkGLProc_glSetFragmentShaderConstantATI) (GLuint dst, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glSetFragmentShaderConstantATI (void);
+#define      gdk_gl_glSetFragmentShaderConstantATI(proc, dst, value) \
+  ( ((GdkGLProc_glSetFragmentShaderConstantATI) (proc)) (dst, value) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_ATI_fragment_shader GdkGL_GL_ATI_fragment_shader;
+
+struct _GdkGL_GL_ATI_fragment_shader
+{
+  GdkGLProc_glGenFragmentShadersATI glGenFragmentShadersATI;
+  GdkGLProc_glBindFragmentShaderATI glBindFragmentShaderATI;
+  GdkGLProc_glDeleteFragmentShaderATI glDeleteFragmentShaderATI;
+  GdkGLProc_glBeginFragmentShaderATI glBeginFragmentShaderATI;
+  GdkGLProc_glEndFragmentShaderATI glEndFragmentShaderATI;
+  GdkGLProc_glPassTexCoordATI glPassTexCoordATI;
+  GdkGLProc_glSampleMapATI glSampleMapATI;
+  GdkGLProc_glColorFragmentOp1ATI glColorFragmentOp1ATI;
+  GdkGLProc_glColorFragmentOp2ATI glColorFragmentOp2ATI;
+  GdkGLProc_glColorFragmentOp3ATI glColorFragmentOp3ATI;
+  GdkGLProc_glAlphaFragmentOp1ATI glAlphaFragmentOp1ATI;
+  GdkGLProc_glAlphaFragmentOp2ATI glAlphaFragmentOp2ATI;
+  GdkGLProc_glAlphaFragmentOp3ATI glAlphaFragmentOp3ATI;
+  GdkGLProc_glSetFragmentShaderConstantATI glSetFragmentShaderConstantATI;
+};
+
+GdkGL_GL_ATI_fragment_shader *gdk_gl_get_GL_ATI_fragment_shader (void);
+
+/*
+ * GL_ATI_pn_triangles
+ */
+
+/* glPNTrianglesiATI */
+typedef void (APIENTRYP GdkGLProc_glPNTrianglesiATI) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glPNTrianglesiATI (void);
+#define      gdk_gl_glPNTrianglesiATI(proc, pname, param) \
+  ( ((GdkGLProc_glPNTrianglesiATI) (proc)) (pname, param) )
+
+/* glPNTrianglesfATI */
+typedef void (APIENTRYP GdkGLProc_glPNTrianglesfATI) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glPNTrianglesfATI (void);
+#define      gdk_gl_glPNTrianglesfATI(proc, pname, param) \
+  ( ((GdkGLProc_glPNTrianglesfATI) (proc)) (pname, param) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_ATI_pn_triangles GdkGL_GL_ATI_pn_triangles;
+
+struct _GdkGL_GL_ATI_pn_triangles
+{
+  GdkGLProc_glPNTrianglesiATI glPNTrianglesiATI;
+  GdkGLProc_glPNTrianglesfATI glPNTrianglesfATI;
+};
+
+GdkGL_GL_ATI_pn_triangles *gdk_gl_get_GL_ATI_pn_triangles (void);
+
+/*
+ * GL_ATI_vertex_array_object
+ */
+
+/* glNewObjectBufferATI */
+typedef GLuint (APIENTRYP GdkGLProc_glNewObjectBufferATI) (GLsizei size, const GLvoid *pointer, GLenum usage);
+GdkGLProc    gdk_gl_get_glNewObjectBufferATI (void);
+#define      gdk_gl_glNewObjectBufferATI(proc, size, pointer, usage) \
+  ( ((GdkGLProc_glNewObjectBufferATI) (proc)) (size, pointer, usage) )
+
+/* glIsObjectBufferATI */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsObjectBufferATI) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glIsObjectBufferATI (void);
+#define      gdk_gl_glIsObjectBufferATI(proc, buffer) \
+  ( ((GdkGLProc_glIsObjectBufferATI) (proc)) (buffer) )
+
+/* glUpdateObjectBufferATI */
+typedef void (APIENTRYP GdkGLProc_glUpdateObjectBufferATI) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
+GdkGLProc    gdk_gl_get_glUpdateObjectBufferATI (void);
+#define      gdk_gl_glUpdateObjectBufferATI(proc, buffer, offset, size, pointer, preserve) \
+  ( ((GdkGLProc_glUpdateObjectBufferATI) (proc)) (buffer, offset, size, pointer, preserve) )
+
+/* glGetObjectBufferfvATI */
+typedef void (APIENTRYP GdkGLProc_glGetObjectBufferfvATI) (GLuint buffer, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetObjectBufferfvATI (void);
+#define      gdk_gl_glGetObjectBufferfvATI(proc, buffer, pname, params) \
+  ( ((GdkGLProc_glGetObjectBufferfvATI) (proc)) (buffer, pname, params) )
+
+/* glGetObjectBufferivATI */
+typedef void (APIENTRYP GdkGLProc_glGetObjectBufferivATI) (GLuint buffer, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetObjectBufferivATI (void);
+#define      gdk_gl_glGetObjectBufferivATI(proc, buffer, pname, params) \
+  ( ((GdkGLProc_glGetObjectBufferivATI) (proc)) (buffer, pname, params) )
+
+/* glFreeObjectBufferATI */
+typedef void (APIENTRYP GdkGLProc_glFreeObjectBufferATI) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glFreeObjectBufferATI (void);
+#define      gdk_gl_glFreeObjectBufferATI(proc, buffer) \
+  ( ((GdkGLProc_glFreeObjectBufferATI) (proc)) (buffer) )
+
+/* glArrayObjectATI */
+typedef void (APIENTRYP GdkGLProc_glArrayObjectATI) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+GdkGLProc    gdk_gl_get_glArrayObjectATI (void);
+#define      gdk_gl_glArrayObjectATI(proc, array, size, type, stride, buffer, offset) \
+  ( ((GdkGLProc_glArrayObjectATI) (proc)) (array, size, type, stride, buffer, offset) )
+
+/* glGetArrayObjectfvATI */
+typedef void (APIENTRYP GdkGLProc_glGetArrayObjectfvATI) (GLenum array, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetArrayObjectfvATI (void);
+#define      gdk_gl_glGetArrayObjectfvATI(proc, array, pname, params) \
+  ( ((GdkGLProc_glGetArrayObjectfvATI) (proc)) (array, pname, params) )
+
+/* glGetArrayObjectivATI */
+typedef void (APIENTRYP GdkGLProc_glGetArrayObjectivATI) (GLenum array, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetArrayObjectivATI (void);
+#define      gdk_gl_glGetArrayObjectivATI(proc, array, pname, params) \
+  ( ((GdkGLProc_glGetArrayObjectivATI) (proc)) (array, pname, params) )
+
+/* glVariantArrayObjectATI */
+typedef void (APIENTRYP GdkGLProc_glVariantArrayObjectATI) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+GdkGLProc    gdk_gl_get_glVariantArrayObjectATI (void);
+#define      gdk_gl_glVariantArrayObjectATI(proc, id, type, stride, buffer, offset) \
+  ( ((GdkGLProc_glVariantArrayObjectATI) (proc)) (id, type, stride, buffer, offset) )
+
+/* glGetVariantArrayObjectfvATI */
+typedef void (APIENTRYP GdkGLProc_glGetVariantArrayObjectfvATI) (GLuint id, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetVariantArrayObjectfvATI (void);
+#define      gdk_gl_glGetVariantArrayObjectfvATI(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetVariantArrayObjectfvATI) (proc)) (id, pname, params) )
+
+/* glGetVariantArrayObjectivATI */
+typedef void (APIENTRYP GdkGLProc_glGetVariantArrayObjectivATI) (GLuint id, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVariantArrayObjectivATI (void);
+#define      gdk_gl_glGetVariantArrayObjectivATI(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetVariantArrayObjectivATI) (proc)) (id, pname, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_ATI_vertex_array_object GdkGL_GL_ATI_vertex_array_object;
+
+struct _GdkGL_GL_ATI_vertex_array_object
+{
+  GdkGLProc_glNewObjectBufferATI glNewObjectBufferATI;
+  GdkGLProc_glIsObjectBufferATI glIsObjectBufferATI;
+  GdkGLProc_glUpdateObjectBufferATI glUpdateObjectBufferATI;
+  GdkGLProc_glGetObjectBufferfvATI glGetObjectBufferfvATI;
+  GdkGLProc_glGetObjectBufferivATI glGetObjectBufferivATI;
+  GdkGLProc_glFreeObjectBufferATI glFreeObjectBufferATI;
+  GdkGLProc_glArrayObjectATI glArrayObjectATI;
+  GdkGLProc_glGetArrayObjectfvATI glGetArrayObjectfvATI;
+  GdkGLProc_glGetArrayObjectivATI glGetArrayObjectivATI;
+  GdkGLProc_glVariantArrayObjectATI glVariantArrayObjectATI;
+  GdkGLProc_glGetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI;
+  GdkGLProc_glGetVariantArrayObjectivATI glGetVariantArrayObjectivATI;
+};
+
+GdkGL_GL_ATI_vertex_array_object *gdk_gl_get_GL_ATI_vertex_array_object (void);
+
+/*
+ * GL_EXT_vertex_shader
+ */
+
+/* glBeginVertexShaderEXT */
+typedef void (APIENTRYP GdkGLProc_glBeginVertexShaderEXT) (void);
+GdkGLProc    gdk_gl_get_glBeginVertexShaderEXT (void);
+#define      gdk_gl_glBeginVertexShaderEXT(proc) \
+  ( ((GdkGLProc_glBeginVertexShaderEXT) (proc)) () )
+
+/* glEndVertexShaderEXT */
+typedef void (APIENTRYP GdkGLProc_glEndVertexShaderEXT) (void);
+GdkGLProc    gdk_gl_get_glEndVertexShaderEXT (void);
+#define      gdk_gl_glEndVertexShaderEXT(proc) \
+  ( ((GdkGLProc_glEndVertexShaderEXT) (proc)) () )
+
+/* glBindVertexShaderEXT */
+typedef void (APIENTRYP GdkGLProc_glBindVertexShaderEXT) (GLuint id);
+GdkGLProc    gdk_gl_get_glBindVertexShaderEXT (void);
+#define      gdk_gl_glBindVertexShaderEXT(proc, id) \
+  ( ((GdkGLProc_glBindVertexShaderEXT) (proc)) (id) )
+
+/* glGenVertexShadersEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glGenVertexShadersEXT) (GLuint range);
+GdkGLProc    gdk_gl_get_glGenVertexShadersEXT (void);
+#define      gdk_gl_glGenVertexShadersEXT(proc, range) \
+  ( ((GdkGLProc_glGenVertexShadersEXT) (proc)) (range) )
+
+/* glDeleteVertexShaderEXT */
+typedef void (APIENTRYP GdkGLProc_glDeleteVertexShaderEXT) (GLuint id);
+GdkGLProc    gdk_gl_get_glDeleteVertexShaderEXT (void);
+#define      gdk_gl_glDeleteVertexShaderEXT(proc, id) \
+  ( ((GdkGLProc_glDeleteVertexShaderEXT) (proc)) (id) )
+
+/* glShaderOp1EXT */
+typedef void (APIENTRYP GdkGLProc_glShaderOp1EXT) (GLenum op, GLuint res, GLuint arg1);
+GdkGLProc    gdk_gl_get_glShaderOp1EXT (void);
+#define      gdk_gl_glShaderOp1EXT(proc, op, res, arg1) \
+  ( ((GdkGLProc_glShaderOp1EXT) (proc)) (op, res, arg1) )
+
+/* glShaderOp2EXT */
+typedef void (APIENTRYP GdkGLProc_glShaderOp2EXT) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
+GdkGLProc    gdk_gl_get_glShaderOp2EXT (void);
+#define      gdk_gl_glShaderOp2EXT(proc, op, res, arg1, arg2) \
+  ( ((GdkGLProc_glShaderOp2EXT) (proc)) (op, res, arg1, arg2) )
+
+/* glShaderOp3EXT */
+typedef void (APIENTRYP GdkGLProc_glShaderOp3EXT) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
+GdkGLProc    gdk_gl_get_glShaderOp3EXT (void);
+#define      gdk_gl_glShaderOp3EXT(proc, op, res, arg1, arg2, arg3) \
+  ( ((GdkGLProc_glShaderOp3EXT) (proc)) (op, res, arg1, arg2, arg3) )
+
+/* glSwizzleEXT */
+typedef void (APIENTRYP GdkGLProc_glSwizzleEXT) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+GdkGLProc    gdk_gl_get_glSwizzleEXT (void);
+#define      gdk_gl_glSwizzleEXT(proc, res, in, outX, outY, outZ, outW) \
+  ( ((GdkGLProc_glSwizzleEXT) (proc)) (res, in, outX, outY, outZ, outW) )
+
+/* glWriteMaskEXT */
+typedef void (APIENTRYP GdkGLProc_glWriteMaskEXT) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+GdkGLProc    gdk_gl_get_glWriteMaskEXT (void);
+#define      gdk_gl_glWriteMaskEXT(proc, res, in, outX, outY, outZ, outW) \
+  ( ((GdkGLProc_glWriteMaskEXT) (proc)) (res, in, outX, outY, outZ, outW) )
+
+/* glInsertComponentEXT */
+typedef void (APIENTRYP GdkGLProc_glInsertComponentEXT) (GLuint res, GLuint src, GLuint num);
+GdkGLProc    gdk_gl_get_glInsertComponentEXT (void);
+#define      gdk_gl_glInsertComponentEXT(proc, res, src, num) \
+  ( ((GdkGLProc_glInsertComponentEXT) (proc)) (res, src, num) )
+
+/* glExtractComponentEXT */
+typedef void (APIENTRYP GdkGLProc_glExtractComponentEXT) (GLuint res, GLuint src, GLuint num);
+GdkGLProc    gdk_gl_get_glExtractComponentEXT (void);
+#define      gdk_gl_glExtractComponentEXT(proc, res, src, num) \
+  ( ((GdkGLProc_glExtractComponentEXT) (proc)) (res, src, num) )
+
+/* glGenSymbolsEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glGenSymbolsEXT) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
+GdkGLProc    gdk_gl_get_glGenSymbolsEXT (void);
+#define      gdk_gl_glGenSymbolsEXT(proc, datatype, storagetype, range, components) \
+  ( ((GdkGLProc_glGenSymbolsEXT) (proc)) (datatype, storagetype, range, components) )
+
+/* glSetInvariantEXT */
+typedef void (APIENTRYP GdkGLProc_glSetInvariantEXT) (GLuint id, GLenum type, const GLvoid *addr);
+GdkGLProc    gdk_gl_get_glSetInvariantEXT (void);
+#define      gdk_gl_glSetInvariantEXT(proc, id, type, addr) \
+  ( ((GdkGLProc_glSetInvariantEXT) (proc)) (id, type, addr) )
+
+/* glSetLocalConstantEXT */
+typedef void (APIENTRYP GdkGLProc_glSetLocalConstantEXT) (GLuint id, GLenum type, const GLvoid *addr);
+GdkGLProc    gdk_gl_get_glSetLocalConstantEXT (void);
+#define      gdk_gl_glSetLocalConstantEXT(proc, id, type, addr) \
+  ( ((GdkGLProc_glSetLocalConstantEXT) (proc)) (id, type, addr) )
+
+/* glVariantbvEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantbvEXT) (GLuint id, const GLbyte *addr);
+GdkGLProc    gdk_gl_get_glVariantbvEXT (void);
+#define      gdk_gl_glVariantbvEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantbvEXT) (proc)) (id, addr) )
+
+/* glVariantsvEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantsvEXT) (GLuint id, const GLshort *addr);
+GdkGLProc    gdk_gl_get_glVariantsvEXT (void);
+#define      gdk_gl_glVariantsvEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantsvEXT) (proc)) (id, addr) )
+
+/* glVariantivEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantivEXT) (GLuint id, const GLint *addr);
+GdkGLProc    gdk_gl_get_glVariantivEXT (void);
+#define      gdk_gl_glVariantivEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantivEXT) (proc)) (id, addr) )
+
+/* glVariantfvEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantfvEXT) (GLuint id, const GLfloat *addr);
+GdkGLProc    gdk_gl_get_glVariantfvEXT (void);
+#define      gdk_gl_glVariantfvEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantfvEXT) (proc)) (id, addr) )
+
+/* glVariantdvEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantdvEXT) (GLuint id, const GLdouble *addr);
+GdkGLProc    gdk_gl_get_glVariantdvEXT (void);
+#define      gdk_gl_glVariantdvEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantdvEXT) (proc)) (id, addr) )
+
+/* glVariantubvEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantubvEXT) (GLuint id, const GLubyte *addr);
+GdkGLProc    gdk_gl_get_glVariantubvEXT (void);
+#define      gdk_gl_glVariantubvEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantubvEXT) (proc)) (id, addr) )
+
+/* glVariantusvEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantusvEXT) (GLuint id, const GLushort *addr);
+GdkGLProc    gdk_gl_get_glVariantusvEXT (void);
+#define      gdk_gl_glVariantusvEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantusvEXT) (proc)) (id, addr) )
+
+/* glVariantuivEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantuivEXT) (GLuint id, const GLuint *addr);
+GdkGLProc    gdk_gl_get_glVariantuivEXT (void);
+#define      gdk_gl_glVariantuivEXT(proc, id, addr) \
+  ( ((GdkGLProc_glVariantuivEXT) (proc)) (id, addr) )
+
+/* glVariantPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glVariantPointerEXT) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
+GdkGLProc    gdk_gl_get_glVariantPointerEXT (void);
+#define      gdk_gl_glVariantPointerEXT(proc, id, type, stride, addr) \
+  ( ((GdkGLProc_glVariantPointerEXT) (proc)) (id, type, stride, addr) )
+
+/* glEnableVariantClientStateEXT */
+typedef void (APIENTRYP GdkGLProc_glEnableVariantClientStateEXT) (GLuint id);
+GdkGLProc    gdk_gl_get_glEnableVariantClientStateEXT (void);
+#define      gdk_gl_glEnableVariantClientStateEXT(proc, id) \
+  ( ((GdkGLProc_glEnableVariantClientStateEXT) (proc)) (id) )
+
+/* glDisableVariantClientStateEXT */
+typedef void (APIENTRYP GdkGLProc_glDisableVariantClientStateEXT) (GLuint id);
+GdkGLProc    gdk_gl_get_glDisableVariantClientStateEXT (void);
+#define      gdk_gl_glDisableVariantClientStateEXT(proc, id) \
+  ( ((GdkGLProc_glDisableVariantClientStateEXT) (proc)) (id) )
+
+/* glBindLightParameterEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glBindLightParameterEXT) (GLenum light, GLenum value);
+GdkGLProc    gdk_gl_get_glBindLightParameterEXT (void);
+#define      gdk_gl_glBindLightParameterEXT(proc, light, value) \
+  ( ((GdkGLProc_glBindLightParameterEXT) (proc)) (light, value) )
+
+/* glBindMaterialParameterEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glBindMaterialParameterEXT) (GLenum face, GLenum value);
+GdkGLProc    gdk_gl_get_glBindMaterialParameterEXT (void);
+#define      gdk_gl_glBindMaterialParameterEXT(proc, face, value) \
+  ( ((GdkGLProc_glBindMaterialParameterEXT) (proc)) (face, value) )
+
+/* glBindTexGenParameterEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glBindTexGenParameterEXT) (GLenum unit, GLenum coord, GLenum value);
+GdkGLProc    gdk_gl_get_glBindTexGenParameterEXT (void);
+#define      gdk_gl_glBindTexGenParameterEXT(proc, unit, coord, value) \
+  ( ((GdkGLProc_glBindTexGenParameterEXT) (proc)) (unit, coord, value) )
+
+/* glBindTextureUnitParameterEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glBindTextureUnitParameterEXT) (GLenum unit, GLenum value);
+GdkGLProc    gdk_gl_get_glBindTextureUnitParameterEXT (void);
+#define      gdk_gl_glBindTextureUnitParameterEXT(proc, unit, value) \
+  ( ((GdkGLProc_glBindTextureUnitParameterEXT) (proc)) (unit, value) )
+
+/* glBindParameterEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glBindParameterEXT) (GLenum value);
+GdkGLProc    gdk_gl_get_glBindParameterEXT (void);
+#define      gdk_gl_glBindParameterEXT(proc, value) \
+  ( ((GdkGLProc_glBindParameterEXT) (proc)) (value) )
+
+/* glIsVariantEnabledEXT */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsVariantEnabledEXT) (GLuint id, GLenum cap);
+GdkGLProc    gdk_gl_get_glIsVariantEnabledEXT (void);
+#define      gdk_gl_glIsVariantEnabledEXT(proc, id, cap) \
+  ( ((GdkGLProc_glIsVariantEnabledEXT) (proc)) (id, cap) )
+
+/* glGetVariantBooleanvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetVariantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data);
+GdkGLProc    gdk_gl_get_glGetVariantBooleanvEXT (void);
+#define      gdk_gl_glGetVariantBooleanvEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetVariantBooleanvEXT) (proc)) (id, value, data) )
+
+/* glGetVariantIntegervEXT */
+typedef void (APIENTRYP GdkGLProc_glGetVariantIntegervEXT) (GLuint id, GLenum value, GLint *data);
+GdkGLProc    gdk_gl_get_glGetVariantIntegervEXT (void);
+#define      gdk_gl_glGetVariantIntegervEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetVariantIntegervEXT) (proc)) (id, value, data) )
+
+/* glGetVariantFloatvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetVariantFloatvEXT) (GLuint id, GLenum value, GLfloat *data);
+GdkGLProc    gdk_gl_get_glGetVariantFloatvEXT (void);
+#define      gdk_gl_glGetVariantFloatvEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetVariantFloatvEXT) (proc)) (id, value, data) )
+
+/* glGetVariantPointervEXT */
+typedef void (APIENTRYP GdkGLProc_glGetVariantPointervEXT) (GLuint id, GLenum value, GLvoid* *data);
+GdkGLProc    gdk_gl_get_glGetVariantPointervEXT (void);
+#define      gdk_gl_glGetVariantPointervEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetVariantPointervEXT) (proc)) (id, value, data) )
+
+/* glGetInvariantBooleanvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetInvariantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data);
+GdkGLProc    gdk_gl_get_glGetInvariantBooleanvEXT (void);
+#define      gdk_gl_glGetInvariantBooleanvEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetInvariantBooleanvEXT) (proc)) (id, value, data) )
+
+/* glGetInvariantIntegervEXT */
+typedef void (APIENTRYP GdkGLProc_glGetInvariantIntegervEXT) (GLuint id, GLenum value, GLint *data);
+GdkGLProc    gdk_gl_get_glGetInvariantIntegervEXT (void);
+#define      gdk_gl_glGetInvariantIntegervEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetInvariantIntegervEXT) (proc)) (id, value, data) )
+
+/* glGetInvariantFloatvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetInvariantFloatvEXT) (GLuint id, GLenum value, GLfloat *data);
+GdkGLProc    gdk_gl_get_glGetInvariantFloatvEXT (void);
+#define      gdk_gl_glGetInvariantFloatvEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetInvariantFloatvEXT) (proc)) (id, value, data) )
+
+/* glGetLocalConstantBooleanvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetLocalConstantBooleanvEXT) (GLuint id, GLenum value, GLboolean *data);
+GdkGLProc    gdk_gl_get_glGetLocalConstantBooleanvEXT (void);
+#define      gdk_gl_glGetLocalConstantBooleanvEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetLocalConstantBooleanvEXT) (proc)) (id, value, data) )
+
+/* glGetLocalConstantIntegervEXT */
+typedef void (APIENTRYP GdkGLProc_glGetLocalConstantIntegervEXT) (GLuint id, GLenum value, GLint *data);
+GdkGLProc    gdk_gl_get_glGetLocalConstantIntegervEXT (void);
+#define      gdk_gl_glGetLocalConstantIntegervEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetLocalConstantIntegervEXT) (proc)) (id, value, data) )
+
+/* glGetLocalConstantFloatvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetLocalConstantFloatvEXT) (GLuint id, GLenum value, GLfloat *data);
+GdkGLProc    gdk_gl_get_glGetLocalConstantFloatvEXT (void);
+#define      gdk_gl_glGetLocalConstantFloatvEXT(proc, id, value, data) \
+  ( ((GdkGLProc_glGetLocalConstantFloatvEXT) (proc)) (id, value, data) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_EXT_vertex_shader GdkGL_GL_EXT_vertex_shader;
+
+struct _GdkGL_GL_EXT_vertex_shader
+{
+  GdkGLProc_glBeginVertexShaderEXT glBeginVertexShaderEXT;
+  GdkGLProc_glEndVertexShaderEXT glEndVertexShaderEXT;
+  GdkGLProc_glBindVertexShaderEXT glBindVertexShaderEXT;
+  GdkGLProc_glGenVertexShadersEXT glGenVertexShadersEXT;
+  GdkGLProc_glDeleteVertexShaderEXT glDeleteVertexShaderEXT;
+  GdkGLProc_glShaderOp1EXT glShaderOp1EXT;
+  GdkGLProc_glShaderOp2EXT glShaderOp2EXT;
+  GdkGLProc_glShaderOp3EXT glShaderOp3EXT;
+  GdkGLProc_glSwizzleEXT glSwizzleEXT;
+  GdkGLProc_glWriteMaskEXT glWriteMaskEXT;
+  GdkGLProc_glInsertComponentEXT glInsertComponentEXT;
+  GdkGLProc_glExtractComponentEXT glExtractComponentEXT;
+  GdkGLProc_glGenSymbolsEXT glGenSymbolsEXT;
+  GdkGLProc_glSetInvariantEXT glSetInvariantEXT;
+  GdkGLProc_glSetLocalConstantEXT glSetLocalConstantEXT;
+  GdkGLProc_glVariantbvEXT glVariantbvEXT;
+  GdkGLProc_glVariantsvEXT glVariantsvEXT;
+  GdkGLProc_glVariantivEXT glVariantivEXT;
+  GdkGLProc_glVariantfvEXT glVariantfvEXT;
+  GdkGLProc_glVariantdvEXT glVariantdvEXT;
+  GdkGLProc_glVariantubvEXT glVariantubvEXT;
+  GdkGLProc_glVariantusvEXT glVariantusvEXT;
+  GdkGLProc_glVariantuivEXT glVariantuivEXT;
+  GdkGLProc_glVariantPointerEXT glVariantPointerEXT;
+  GdkGLProc_glEnableVariantClientStateEXT glEnableVariantClientStateEXT;
+  GdkGLProc_glDisableVariantClientStateEXT glDisableVariantClientStateEXT;
+  GdkGLProc_glBindLightParameterEXT glBindLightParameterEXT;
+  GdkGLProc_glBindMaterialParameterEXT glBindMaterialParameterEXT;
+  GdkGLProc_glBindTexGenParameterEXT glBindTexGenParameterEXT;
+  GdkGLProc_glBindTextureUnitParameterEXT glBindTextureUnitParameterEXT;
+  GdkGLProc_glBindParameterEXT glBindParameterEXT;
+  GdkGLProc_glIsVariantEnabledEXT glIsVariantEnabledEXT;
+  GdkGLProc_glGetVariantBooleanvEXT glGetVariantBooleanvEXT;
+  GdkGLProc_glGetVariantIntegervEXT glGetVariantIntegervEXT;
+  GdkGLProc_glGetVariantFloatvEXT glGetVariantFloatvEXT;
+  GdkGLProc_glGetVariantPointervEXT glGetVariantPointervEXT;
+  GdkGLProc_glGetInvariantBooleanvEXT glGetInvariantBooleanvEXT;
+  GdkGLProc_glGetInvariantIntegervEXT glGetInvariantIntegervEXT;
+  GdkGLProc_glGetInvariantFloatvEXT glGetInvariantFloatvEXT;
+  GdkGLProc_glGetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT;
+  GdkGLProc_glGetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT;
+  GdkGLProc_glGetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT;
+};
+
+GdkGL_GL_EXT_vertex_shader *gdk_gl_get_GL_EXT_vertex_shader (void);
+
+/*
+ * GL_ATI_vertex_streams
+ */
+
+/* glVertexStream1sATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1sATI) (GLenum stream, GLshort x);
+GdkGLProc    gdk_gl_get_glVertexStream1sATI (void);
+#define      gdk_gl_glVertexStream1sATI(proc, stream, x) \
+  ( ((GdkGLProc_glVertexStream1sATI) (proc)) (stream, x) )
+
+/* glVertexStream1svATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1svATI) (GLenum stream, const GLshort *coords);
+GdkGLProc    gdk_gl_get_glVertexStream1svATI (void);
+#define      gdk_gl_glVertexStream1svATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream1svATI) (proc)) (stream, coords) )
+
+/* glVertexStream1iATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1iATI) (GLenum stream, GLint x);
+GdkGLProc    gdk_gl_get_glVertexStream1iATI (void);
+#define      gdk_gl_glVertexStream1iATI(proc, stream, x) \
+  ( ((GdkGLProc_glVertexStream1iATI) (proc)) (stream, x) )
+
+/* glVertexStream1ivATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1ivATI) (GLenum stream, const GLint *coords);
+GdkGLProc    gdk_gl_get_glVertexStream1ivATI (void);
+#define      gdk_gl_glVertexStream1ivATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream1ivATI) (proc)) (stream, coords) )
+
+/* glVertexStream1fATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1fATI) (GLenum stream, GLfloat x);
+GdkGLProc    gdk_gl_get_glVertexStream1fATI (void);
+#define      gdk_gl_glVertexStream1fATI(proc, stream, x) \
+  ( ((GdkGLProc_glVertexStream1fATI) (proc)) (stream, x) )
+
+/* glVertexStream1fvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1fvATI) (GLenum stream, const GLfloat *coords);
+GdkGLProc    gdk_gl_get_glVertexStream1fvATI (void);
+#define      gdk_gl_glVertexStream1fvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream1fvATI) (proc)) (stream, coords) )
+
+/* glVertexStream1dATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1dATI) (GLenum stream, GLdouble x);
+GdkGLProc    gdk_gl_get_glVertexStream1dATI (void);
+#define      gdk_gl_glVertexStream1dATI(proc, stream, x) \
+  ( ((GdkGLProc_glVertexStream1dATI) (proc)) (stream, x) )
+
+/* glVertexStream1dvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream1dvATI) (GLenum stream, const GLdouble *coords);
+GdkGLProc    gdk_gl_get_glVertexStream1dvATI (void);
+#define      gdk_gl_glVertexStream1dvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream1dvATI) (proc)) (stream, coords) )
+
+/* glVertexStream2sATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2sATI) (GLenum stream, GLshort x, GLshort y);
+GdkGLProc    gdk_gl_get_glVertexStream2sATI (void);
+#define      gdk_gl_glVertexStream2sATI(proc, stream, x, y) \
+  ( ((GdkGLProc_glVertexStream2sATI) (proc)) (stream, x, y) )
+
+/* glVertexStream2svATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2svATI) (GLenum stream, const GLshort *coords);
+GdkGLProc    gdk_gl_get_glVertexStream2svATI (void);
 #define      gdk_gl_glVertexStream2svATI(proc, stream, coords) \
   ( ((GdkGLProc_glVertexStream2svATI) (proc)) (stream, coords) )
 
-/* glVertexStream2iATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2iATI) (GLenum stream, GLint x, GLint y);
-GdkGLProc    gdk_gl_get_glVertexStream2iATI (void);
-#define      gdk_gl_glVertexStream2iATI(proc, stream, x, y) \
-  ( ((GdkGLProc_glVertexStream2iATI) (proc)) (stream, x, y) )
+/* glVertexStream2iATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2iATI) (GLenum stream, GLint x, GLint y);
+GdkGLProc    gdk_gl_get_glVertexStream2iATI (void);
+#define      gdk_gl_glVertexStream2iATI(proc, stream, x, y) \
+  ( ((GdkGLProc_glVertexStream2iATI) (proc)) (stream, x, y) )
+
+/* glVertexStream2ivATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2ivATI) (GLenum stream, const GLint *coords);
+GdkGLProc    gdk_gl_get_glVertexStream2ivATI (void);
+#define      gdk_gl_glVertexStream2ivATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream2ivATI) (proc)) (stream, coords) )
+
+/* glVertexStream2fATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2fATI) (GLenum stream, GLfloat x, GLfloat y);
+GdkGLProc    gdk_gl_get_glVertexStream2fATI (void);
+#define      gdk_gl_glVertexStream2fATI(proc, stream, x, y) \
+  ( ((GdkGLProc_glVertexStream2fATI) (proc)) (stream, x, y) )
+
+/* glVertexStream2fvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2fvATI) (GLenum stream, const GLfloat *coords);
+GdkGLProc    gdk_gl_get_glVertexStream2fvATI (void);
+#define      gdk_gl_glVertexStream2fvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream2fvATI) (proc)) (stream, coords) )
+
+/* glVertexStream2dATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2dATI) (GLenum stream, GLdouble x, GLdouble y);
+GdkGLProc    gdk_gl_get_glVertexStream2dATI (void);
+#define      gdk_gl_glVertexStream2dATI(proc, stream, x, y) \
+  ( ((GdkGLProc_glVertexStream2dATI) (proc)) (stream, x, y) )
+
+/* glVertexStream2dvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream2dvATI) (GLenum stream, const GLdouble *coords);
+GdkGLProc    gdk_gl_get_glVertexStream2dvATI (void);
+#define      gdk_gl_glVertexStream2dvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream2dvATI) (proc)) (stream, coords) )
+
+/* glVertexStream3sATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3sATI) (GLenum stream, GLshort x, GLshort y, GLshort z);
+GdkGLProc    gdk_gl_get_glVertexStream3sATI (void);
+#define      gdk_gl_glVertexStream3sATI(proc, stream, x, y, z) \
+  ( ((GdkGLProc_glVertexStream3sATI) (proc)) (stream, x, y, z) )
+
+/* glVertexStream3svATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3svATI) (GLenum stream, const GLshort *coords);
+GdkGLProc    gdk_gl_get_glVertexStream3svATI (void);
+#define      gdk_gl_glVertexStream3svATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream3svATI) (proc)) (stream, coords) )
+
+/* glVertexStream3iATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3iATI) (GLenum stream, GLint x, GLint y, GLint z);
+GdkGLProc    gdk_gl_get_glVertexStream3iATI (void);
+#define      gdk_gl_glVertexStream3iATI(proc, stream, x, y, z) \
+  ( ((GdkGLProc_glVertexStream3iATI) (proc)) (stream, x, y, z) )
+
+/* glVertexStream3ivATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3ivATI) (GLenum stream, const GLint *coords);
+GdkGLProc    gdk_gl_get_glVertexStream3ivATI (void);
+#define      gdk_gl_glVertexStream3ivATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream3ivATI) (proc)) (stream, coords) )
+
+/* glVertexStream3fATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3fATI) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glVertexStream3fATI (void);
+#define      gdk_gl_glVertexStream3fATI(proc, stream, x, y, z) \
+  ( ((GdkGLProc_glVertexStream3fATI) (proc)) (stream, x, y, z) )
+
+/* glVertexStream3fvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3fvATI) (GLenum stream, const GLfloat *coords);
+GdkGLProc    gdk_gl_get_glVertexStream3fvATI (void);
+#define      gdk_gl_glVertexStream3fvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream3fvATI) (proc)) (stream, coords) )
+
+/* glVertexStream3dATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3dATI) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
+GdkGLProc    gdk_gl_get_glVertexStream3dATI (void);
+#define      gdk_gl_glVertexStream3dATI(proc, stream, x, y, z) \
+  ( ((GdkGLProc_glVertexStream3dATI) (proc)) (stream, x, y, z) )
+
+/* glVertexStream3dvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream3dvATI) (GLenum stream, const GLdouble *coords);
+GdkGLProc    gdk_gl_get_glVertexStream3dvATI (void);
+#define      gdk_gl_glVertexStream3dvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream3dvATI) (proc)) (stream, coords) )
+
+/* glVertexStream4sATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4sATI) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
+GdkGLProc    gdk_gl_get_glVertexStream4sATI (void);
+#define      gdk_gl_glVertexStream4sATI(proc, stream, x, y, z, w) \
+  ( ((GdkGLProc_glVertexStream4sATI) (proc)) (stream, x, y, z, w) )
+
+/* glVertexStream4svATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4svATI) (GLenum stream, const GLshort *coords);
+GdkGLProc    gdk_gl_get_glVertexStream4svATI (void);
+#define      gdk_gl_glVertexStream4svATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream4svATI) (proc)) (stream, coords) )
+
+/* glVertexStream4iATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4iATI) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
+GdkGLProc    gdk_gl_get_glVertexStream4iATI (void);
+#define      gdk_gl_glVertexStream4iATI(proc, stream, x, y, z, w) \
+  ( ((GdkGLProc_glVertexStream4iATI) (proc)) (stream, x, y, z, w) )
+
+/* glVertexStream4ivATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4ivATI) (GLenum stream, const GLint *coords);
+GdkGLProc    gdk_gl_get_glVertexStream4ivATI (void);
+#define      gdk_gl_glVertexStream4ivATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream4ivATI) (proc)) (stream, coords) )
+
+/* glVertexStream4fATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4fATI) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glVertexStream4fATI (void);
+#define      gdk_gl_glVertexStream4fATI(proc, stream, x, y, z, w) \
+  ( ((GdkGLProc_glVertexStream4fATI) (proc)) (stream, x, y, z, w) )
+
+/* glVertexStream4fvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4fvATI) (GLenum stream, const GLfloat *coords);
+GdkGLProc    gdk_gl_get_glVertexStream4fvATI (void);
+#define      gdk_gl_glVertexStream4fvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream4fvATI) (proc)) (stream, coords) )
+
+/* glVertexStream4dATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4dATI) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+GdkGLProc    gdk_gl_get_glVertexStream4dATI (void);
+#define      gdk_gl_glVertexStream4dATI(proc, stream, x, y, z, w) \
+  ( ((GdkGLProc_glVertexStream4dATI) (proc)) (stream, x, y, z, w) )
+
+/* glVertexStream4dvATI */
+typedef void (APIENTRYP GdkGLProc_glVertexStream4dvATI) (GLenum stream, const GLdouble *coords);
+GdkGLProc    gdk_gl_get_glVertexStream4dvATI (void);
+#define      gdk_gl_glVertexStream4dvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glVertexStream4dvATI) (proc)) (stream, coords) )
+
+/* glNormalStream3bATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3bATI) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
+GdkGLProc    gdk_gl_get_glNormalStream3bATI (void);
+#define      gdk_gl_glNormalStream3bATI(proc, stream, nx, ny, nz) \
+  ( ((GdkGLProc_glNormalStream3bATI) (proc)) (stream, nx, ny, nz) )
+
+/* glNormalStream3bvATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3bvATI) (GLenum stream, const GLbyte *coords);
+GdkGLProc    gdk_gl_get_glNormalStream3bvATI (void);
+#define      gdk_gl_glNormalStream3bvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glNormalStream3bvATI) (proc)) (stream, coords) )
+
+/* glNormalStream3sATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3sATI) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
+GdkGLProc    gdk_gl_get_glNormalStream3sATI (void);
+#define      gdk_gl_glNormalStream3sATI(proc, stream, nx, ny, nz) \
+  ( ((GdkGLProc_glNormalStream3sATI) (proc)) (stream, nx, ny, nz) )
+
+/* glNormalStream3svATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3svATI) (GLenum stream, const GLshort *coords);
+GdkGLProc    gdk_gl_get_glNormalStream3svATI (void);
+#define      gdk_gl_glNormalStream3svATI(proc, stream, coords) \
+  ( ((GdkGLProc_glNormalStream3svATI) (proc)) (stream, coords) )
+
+/* glNormalStream3iATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3iATI) (GLenum stream, GLint nx, GLint ny, GLint nz);
+GdkGLProc    gdk_gl_get_glNormalStream3iATI (void);
+#define      gdk_gl_glNormalStream3iATI(proc, stream, nx, ny, nz) \
+  ( ((GdkGLProc_glNormalStream3iATI) (proc)) (stream, nx, ny, nz) )
+
+/* glNormalStream3ivATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3ivATI) (GLenum stream, const GLint *coords);
+GdkGLProc    gdk_gl_get_glNormalStream3ivATI (void);
+#define      gdk_gl_glNormalStream3ivATI(proc, stream, coords) \
+  ( ((GdkGLProc_glNormalStream3ivATI) (proc)) (stream, coords) )
+
+/* glNormalStream3fATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3fATI) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
+GdkGLProc    gdk_gl_get_glNormalStream3fATI (void);
+#define      gdk_gl_glNormalStream3fATI(proc, stream, nx, ny, nz) \
+  ( ((GdkGLProc_glNormalStream3fATI) (proc)) (stream, nx, ny, nz) )
+
+/* glNormalStream3fvATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3fvATI) (GLenum stream, const GLfloat *coords);
+GdkGLProc    gdk_gl_get_glNormalStream3fvATI (void);
+#define      gdk_gl_glNormalStream3fvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glNormalStream3fvATI) (proc)) (stream, coords) )
+
+/* glNormalStream3dATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3dATI) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
+GdkGLProc    gdk_gl_get_glNormalStream3dATI (void);
+#define      gdk_gl_glNormalStream3dATI(proc, stream, nx, ny, nz) \
+  ( ((GdkGLProc_glNormalStream3dATI) (proc)) (stream, nx, ny, nz) )
+
+/* glNormalStream3dvATI */
+typedef void (APIENTRYP GdkGLProc_glNormalStream3dvATI) (GLenum stream, const GLdouble *coords);
+GdkGLProc    gdk_gl_get_glNormalStream3dvATI (void);
+#define      gdk_gl_glNormalStream3dvATI(proc, stream, coords) \
+  ( ((GdkGLProc_glNormalStream3dvATI) (proc)) (stream, coords) )
+
+/* glClientActiveVertexStreamATI */
+typedef void (APIENTRYP GdkGLProc_glClientActiveVertexStreamATI) (GLenum stream);
+GdkGLProc    gdk_gl_get_glClientActiveVertexStreamATI (void);
+#define      gdk_gl_glClientActiveVertexStreamATI(proc, stream) \
+  ( ((GdkGLProc_glClientActiveVertexStreamATI) (proc)) (stream) )
+
+/* glVertexBlendEnviATI */
+typedef void (APIENTRYP GdkGLProc_glVertexBlendEnviATI) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glVertexBlendEnviATI (void);
+#define      gdk_gl_glVertexBlendEnviATI(proc, pname, param) \
+  ( ((GdkGLProc_glVertexBlendEnviATI) (proc)) (pname, param) )
+
+/* glVertexBlendEnvfATI */
+typedef void (APIENTRYP GdkGLProc_glVertexBlendEnvfATI) (GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glVertexBlendEnvfATI (void);
+#define      gdk_gl_glVertexBlendEnvfATI(proc, pname, param) \
+  ( ((GdkGLProc_glVertexBlendEnvfATI) (proc)) (pname, param) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_ATI_vertex_streams GdkGL_GL_ATI_vertex_streams;
+
+struct _GdkGL_GL_ATI_vertex_streams
+{
+  GdkGLProc_glVertexStream1sATI glVertexStream1sATI;
+  GdkGLProc_glVertexStream1svATI glVertexStream1svATI;
+  GdkGLProc_glVertexStream1iATI glVertexStream1iATI;
+  GdkGLProc_glVertexStream1ivATI glVertexStream1ivATI;
+  GdkGLProc_glVertexStream1fATI glVertexStream1fATI;
+  GdkGLProc_glVertexStream1fvATI glVertexStream1fvATI;
+  GdkGLProc_glVertexStream1dATI glVertexStream1dATI;
+  GdkGLProc_glVertexStream1dvATI glVertexStream1dvATI;
+  GdkGLProc_glVertexStream2sATI glVertexStream2sATI;
+  GdkGLProc_glVertexStream2svATI glVertexStream2svATI;
+  GdkGLProc_glVertexStream2iATI glVertexStream2iATI;
+  GdkGLProc_glVertexStream2ivATI glVertexStream2ivATI;
+  GdkGLProc_glVertexStream2fATI glVertexStream2fATI;
+  GdkGLProc_glVertexStream2fvATI glVertexStream2fvATI;
+  GdkGLProc_glVertexStream2dATI glVertexStream2dATI;
+  GdkGLProc_glVertexStream2dvATI glVertexStream2dvATI;
+  GdkGLProc_glVertexStream3sATI glVertexStream3sATI;
+  GdkGLProc_glVertexStream3svATI glVertexStream3svATI;
+  GdkGLProc_glVertexStream3iATI glVertexStream3iATI;
+  GdkGLProc_glVertexStream3ivATI glVertexStream3ivATI;
+  GdkGLProc_glVertexStream3fATI glVertexStream3fATI;
+  GdkGLProc_glVertexStream3fvATI glVertexStream3fvATI;
+  GdkGLProc_glVertexStream3dATI glVertexStream3dATI;
+  GdkGLProc_glVertexStream3dvATI glVertexStream3dvATI;
+  GdkGLProc_glVertexStream4sATI glVertexStream4sATI;
+  GdkGLProc_glVertexStream4svATI glVertexStream4svATI;
+  GdkGLProc_glVertexStream4iATI glVertexStream4iATI;
+  GdkGLProc_glVertexStream4ivATI glVertexStream4ivATI;
+  GdkGLProc_glVertexStream4fATI glVertexStream4fATI;
+  GdkGLProc_glVertexStream4fvATI glVertexStream4fvATI;
+  GdkGLProc_glVertexStream4dATI glVertexStream4dATI;
+  GdkGLProc_glVertexStream4dvATI glVertexStream4dvATI;
+  GdkGLProc_glNormalStream3bATI glNormalStream3bATI;
+  GdkGLProc_glNormalStream3bvATI glNormalStream3bvATI;
+  GdkGLProc_glNormalStream3sATI glNormalStream3sATI;
+  GdkGLProc_glNormalStream3svATI glNormalStream3svATI;
+  GdkGLProc_glNormalStream3iATI glNormalStream3iATI;
+  GdkGLProc_glNormalStream3ivATI glNormalStream3ivATI;
+  GdkGLProc_glNormalStream3fATI glNormalStream3fATI;
+  GdkGLProc_glNormalStream3fvATI glNormalStream3fvATI;
+  GdkGLProc_glNormalStream3dATI glNormalStream3dATI;
+  GdkGLProc_glNormalStream3dvATI glNormalStream3dvATI;
+  GdkGLProc_glClientActiveVertexStreamATI glClientActiveVertexStreamATI;
+  GdkGLProc_glVertexBlendEnviATI glVertexBlendEnviATI;
+  GdkGLProc_glVertexBlendEnvfATI glVertexBlendEnvfATI;
+};
+
+GdkGL_GL_ATI_vertex_streams *gdk_gl_get_GL_ATI_vertex_streams (void);
+
+/*
+ * GL_ATI_element_array
+ */
+
+/* glElementPointerATI */
+typedef void (APIENTRYP GdkGLProc_glElementPointerATI) (GLenum type, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glElementPointerATI (void);
+#define      gdk_gl_glElementPointerATI(proc, type, pointer) \
+  ( ((GdkGLProc_glElementPointerATI) (proc)) (type, pointer) )
+
+/* glDrawElementArrayATI */
+typedef void (APIENTRYP GdkGLProc_glDrawElementArrayATI) (GLenum mode, GLsizei count);
+GdkGLProc    gdk_gl_get_glDrawElementArrayATI (void);
+#define      gdk_gl_glDrawElementArrayATI(proc, mode, count) \
+  ( ((GdkGLProc_glDrawElementArrayATI) (proc)) (mode, count) )
+
+/* glDrawRangeElementArrayATI */
+typedef void (APIENTRYP GdkGLProc_glDrawRangeElementArrayATI) (GLenum mode, GLuint start, GLuint end, GLsizei count);
+GdkGLProc    gdk_gl_get_glDrawRangeElementArrayATI (void);
+#define      gdk_gl_glDrawRangeElementArrayATI(proc, mode, start, end, count) \
+  ( ((GdkGLProc_glDrawRangeElementArrayATI) (proc)) (mode, start, end, count) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_ATI_element_array GdkGL_GL_ATI_element_array;
+
+struct _GdkGL_GL_ATI_element_array
+{
+  GdkGLProc_glElementPointerATI glElementPointerATI;
+  GdkGLProc_glDrawElementArrayATI glDrawElementArrayATI;
+  GdkGLProc_glDrawRangeElementArrayATI glDrawRangeElementArrayATI;
+};
+
+GdkGL_GL_ATI_element_array *gdk_gl_get_GL_ATI_element_array (void);
+
+/*
+ * GL_SUN_mesh_array
+ */
+
+/* glDrawMeshArraysSUN */
+typedef void (APIENTRYP GdkGLProc_glDrawMeshArraysSUN) (GLenum mode, GLint first, GLsizei count, GLsizei width);
+GdkGLProc    gdk_gl_get_glDrawMeshArraysSUN (void);
+#define      gdk_gl_glDrawMeshArraysSUN(proc, mode, first, count, width) \
+  ( ((GdkGLProc_glDrawMeshArraysSUN) (proc)) (mode, first, count, width) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_SUN_mesh_array GdkGL_GL_SUN_mesh_array;
+
+struct _GdkGL_GL_SUN_mesh_array
+{
+  GdkGLProc_glDrawMeshArraysSUN glDrawMeshArraysSUN;
+};
+
+GdkGL_GL_SUN_mesh_array *gdk_gl_get_GL_SUN_mesh_array (void);
+
+/*
+ * GL_NV_occlusion_query
+ */
+
+/* glGenOcclusionQueriesNV */
+typedef void (APIENTRYP GdkGLProc_glGenOcclusionQueriesNV) (GLsizei n, GLuint *ids);
+GdkGLProc    gdk_gl_get_glGenOcclusionQueriesNV (void);
+#define      gdk_gl_glGenOcclusionQueriesNV(proc, n, ids) \
+  ( ((GdkGLProc_glGenOcclusionQueriesNV) (proc)) (n, ids) )
+
+/* glDeleteOcclusionQueriesNV */
+typedef void (APIENTRYP GdkGLProc_glDeleteOcclusionQueriesNV) (GLsizei n, const GLuint *ids);
+GdkGLProc    gdk_gl_get_glDeleteOcclusionQueriesNV (void);
+#define      gdk_gl_glDeleteOcclusionQueriesNV(proc, n, ids) \
+  ( ((GdkGLProc_glDeleteOcclusionQueriesNV) (proc)) (n, ids) )
+
+/* glIsOcclusionQueryNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsOcclusionQueryNV) (GLuint id);
+GdkGLProc    gdk_gl_get_glIsOcclusionQueryNV (void);
+#define      gdk_gl_glIsOcclusionQueryNV(proc, id) \
+  ( ((GdkGLProc_glIsOcclusionQueryNV) (proc)) (id) )
+
+/* glBeginOcclusionQueryNV */
+typedef void (APIENTRYP GdkGLProc_glBeginOcclusionQueryNV) (GLuint id);
+GdkGLProc    gdk_gl_get_glBeginOcclusionQueryNV (void);
+#define      gdk_gl_glBeginOcclusionQueryNV(proc, id) \
+  ( ((GdkGLProc_glBeginOcclusionQueryNV) (proc)) (id) )
+
+/* glEndOcclusionQueryNV */
+typedef void (APIENTRYP GdkGLProc_glEndOcclusionQueryNV) (void);
+GdkGLProc    gdk_gl_get_glEndOcclusionQueryNV (void);
+#define      gdk_gl_glEndOcclusionQueryNV(proc) \
+  ( ((GdkGLProc_glEndOcclusionQueryNV) (proc)) () )
+
+/* glGetOcclusionQueryivNV */
+typedef void (APIENTRYP GdkGLProc_glGetOcclusionQueryivNV) (GLuint id, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetOcclusionQueryivNV (void);
+#define      gdk_gl_glGetOcclusionQueryivNV(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetOcclusionQueryivNV) (proc)) (id, pname, params) )
+
+/* glGetOcclusionQueryuivNV */
+typedef void (APIENTRYP GdkGLProc_glGetOcclusionQueryuivNV) (GLuint id, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetOcclusionQueryuivNV (void);
+#define      gdk_gl_glGetOcclusionQueryuivNV(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetOcclusionQueryuivNV) (proc)) (id, pname, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_occlusion_query GdkGL_GL_NV_occlusion_query;
+
+struct _GdkGL_GL_NV_occlusion_query
+{
+  GdkGLProc_glGenOcclusionQueriesNV glGenOcclusionQueriesNV;
+  GdkGLProc_glDeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV;
+  GdkGLProc_glIsOcclusionQueryNV glIsOcclusionQueryNV;
+  GdkGLProc_glBeginOcclusionQueryNV glBeginOcclusionQueryNV;
+  GdkGLProc_glEndOcclusionQueryNV glEndOcclusionQueryNV;
+  GdkGLProc_glGetOcclusionQueryivNV glGetOcclusionQueryivNV;
+  GdkGLProc_glGetOcclusionQueryuivNV glGetOcclusionQueryuivNV;
+};
+
+GdkGL_GL_NV_occlusion_query *gdk_gl_get_GL_NV_occlusion_query (void);
+
+/*
+ * GL_NV_point_sprite
+ */
+
+/* glPointParameteriNV */
+typedef void (APIENTRYP GdkGLProc_glPointParameteriNV) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glPointParameteriNV (void);
+#define      gdk_gl_glPointParameteriNV(proc, pname, param) \
+  ( ((GdkGLProc_glPointParameteriNV) (proc)) (pname, param) )
+
+/* glPointParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glPointParameterivNV) (GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glPointParameterivNV (void);
+#define      gdk_gl_glPointParameterivNV(proc, pname, params) \
+  ( ((GdkGLProc_glPointParameterivNV) (proc)) (pname, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_point_sprite GdkGL_GL_NV_point_sprite;
+
+struct _GdkGL_GL_NV_point_sprite
+{
+  GdkGLProc_glPointParameteriNV glPointParameteriNV;
+  GdkGLProc_glPointParameterivNV glPointParameterivNV;
+};
+
+GdkGL_GL_NV_point_sprite *gdk_gl_get_GL_NV_point_sprite (void);
+
+/*
+ * GL_EXT_stencil_two_side
+ */
+
+/* glActiveStencilFaceEXT */
+typedef void (APIENTRYP GdkGLProc_glActiveStencilFaceEXT) (GLenum face);
+GdkGLProc    gdk_gl_get_glActiveStencilFaceEXT (void);
+#define      gdk_gl_glActiveStencilFaceEXT(proc, face) \
+  ( ((GdkGLProc_glActiveStencilFaceEXT) (proc)) (face) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_EXT_stencil_two_side GdkGL_GL_EXT_stencil_two_side;
+
+struct _GdkGL_GL_EXT_stencil_two_side
+{
+  GdkGLProc_glActiveStencilFaceEXT glActiveStencilFaceEXT;
+};
+
+GdkGL_GL_EXT_stencil_two_side *gdk_gl_get_GL_EXT_stencil_two_side (void);
+
+/*
+ * GL_APPLE_element_array
+ */
+
+/* glElementPointerAPPLE */
+typedef void (APIENTRYP GdkGLProc_glElementPointerAPPLE) (GLenum type, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glElementPointerAPPLE (void);
+#define      gdk_gl_glElementPointerAPPLE(proc, type, pointer) \
+  ( ((GdkGLProc_glElementPointerAPPLE) (proc)) (type, pointer) )
+
+/* glDrawElementArrayAPPLE */
+typedef void (APIENTRYP GdkGLProc_glDrawElementArrayAPPLE) (GLenum mode, GLint first, GLsizei count);
+GdkGLProc    gdk_gl_get_glDrawElementArrayAPPLE (void);
+#define      gdk_gl_glDrawElementArrayAPPLE(proc, mode, first, count) \
+  ( ((GdkGLProc_glDrawElementArrayAPPLE) (proc)) (mode, first, count) )
+
+/* glDrawRangeElementArrayAPPLE */
+typedef void (APIENTRYP GdkGLProc_glDrawRangeElementArrayAPPLE) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
+GdkGLProc    gdk_gl_get_glDrawRangeElementArrayAPPLE (void);
+#define      gdk_gl_glDrawRangeElementArrayAPPLE(proc, mode, start, end, first, count) \
+  ( ((GdkGLProc_glDrawRangeElementArrayAPPLE) (proc)) (mode, start, end, first, count) )
+
+/* glMultiDrawElementArrayAPPLE */
+typedef void (APIENTRYP GdkGLProc_glMultiDrawElementArrayAPPLE) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glMultiDrawElementArrayAPPLE (void);
+#define      gdk_gl_glMultiDrawElementArrayAPPLE(proc, mode, first, count, primcount) \
+  ( ((GdkGLProc_glMultiDrawElementArrayAPPLE) (proc)) (mode, first, count, primcount) )
+
+/* glMultiDrawRangeElementArrayAPPLE */
+typedef void (APIENTRYP GdkGLProc_glMultiDrawRangeElementArrayAPPLE) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glMultiDrawRangeElementArrayAPPLE (void);
+#define      gdk_gl_glMultiDrawRangeElementArrayAPPLE(proc, mode, start, end, first, count, primcount) \
+  ( ((GdkGLProc_glMultiDrawRangeElementArrayAPPLE) (proc)) (mode, start, end, first, count, primcount) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_APPLE_element_array GdkGL_GL_APPLE_element_array;
+
+struct _GdkGL_GL_APPLE_element_array
+{
+  GdkGLProc_glElementPointerAPPLE glElementPointerAPPLE;
+  GdkGLProc_glDrawElementArrayAPPLE glDrawElementArrayAPPLE;
+  GdkGLProc_glDrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE;
+  GdkGLProc_glMultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE;
+  GdkGLProc_glMultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE;
+};
+
+GdkGL_GL_APPLE_element_array *gdk_gl_get_GL_APPLE_element_array (void);
+
+/*
+ * GL_APPLE_fence
+ */
+
+/* glGenFencesAPPLE */
+typedef void (APIENTRYP GdkGLProc_glGenFencesAPPLE) (GLsizei n, GLuint *fences);
+GdkGLProc    gdk_gl_get_glGenFencesAPPLE (void);
+#define      gdk_gl_glGenFencesAPPLE(proc, n, fences) \
+  ( ((GdkGLProc_glGenFencesAPPLE) (proc)) (n, fences) )
+
+/* glDeleteFencesAPPLE */
+typedef void (APIENTRYP GdkGLProc_glDeleteFencesAPPLE) (GLsizei n, const GLuint *fences);
+GdkGLProc    gdk_gl_get_glDeleteFencesAPPLE (void);
+#define      gdk_gl_glDeleteFencesAPPLE(proc, n, fences) \
+  ( ((GdkGLProc_glDeleteFencesAPPLE) (proc)) (n, fences) )
+
+/* glSetFenceAPPLE */
+typedef void (APIENTRYP GdkGLProc_glSetFenceAPPLE) (GLuint fence);
+GdkGLProc    gdk_gl_get_glSetFenceAPPLE (void);
+#define      gdk_gl_glSetFenceAPPLE(proc, fence) \
+  ( ((GdkGLProc_glSetFenceAPPLE) (proc)) (fence) )
+
+/* glIsFenceAPPLE */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsFenceAPPLE) (GLuint fence);
+GdkGLProc    gdk_gl_get_glIsFenceAPPLE (void);
+#define      gdk_gl_glIsFenceAPPLE(proc, fence) \
+  ( ((GdkGLProc_glIsFenceAPPLE) (proc)) (fence) )
+
+/* glTestFenceAPPLE */
+typedef GLboolean (APIENTRYP GdkGLProc_glTestFenceAPPLE) (GLuint fence);
+GdkGLProc    gdk_gl_get_glTestFenceAPPLE (void);
+#define      gdk_gl_glTestFenceAPPLE(proc, fence) \
+  ( ((GdkGLProc_glTestFenceAPPLE) (proc)) (fence) )
+
+/* glFinishFenceAPPLE */
+typedef void (APIENTRYP GdkGLProc_glFinishFenceAPPLE) (GLuint fence);
+GdkGLProc    gdk_gl_get_glFinishFenceAPPLE (void);
+#define      gdk_gl_glFinishFenceAPPLE(proc, fence) \
+  ( ((GdkGLProc_glFinishFenceAPPLE) (proc)) (fence) )
+
+/* glTestObjectAPPLE */
+typedef GLboolean (APIENTRYP GdkGLProc_glTestObjectAPPLE) (GLenum object, GLuint name);
+GdkGLProc    gdk_gl_get_glTestObjectAPPLE (void);
+#define      gdk_gl_glTestObjectAPPLE(proc, object, name) \
+  ( ((GdkGLProc_glTestObjectAPPLE) (proc)) (object, name) )
+
+/* glFinishObjectAPPLE */
+typedef void (APIENTRYP GdkGLProc_glFinishObjectAPPLE) (GLenum object, GLint name);
+GdkGLProc    gdk_gl_get_glFinishObjectAPPLE (void);
+#define      gdk_gl_glFinishObjectAPPLE(proc, object, name) \
+  ( ((GdkGLProc_glFinishObjectAPPLE) (proc)) (object, name) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_APPLE_fence GdkGL_GL_APPLE_fence;
+
+struct _GdkGL_GL_APPLE_fence
+{
+  GdkGLProc_glGenFencesAPPLE glGenFencesAPPLE;
+  GdkGLProc_glDeleteFencesAPPLE glDeleteFencesAPPLE;
+  GdkGLProc_glSetFenceAPPLE glSetFenceAPPLE;
+  GdkGLProc_glIsFenceAPPLE glIsFenceAPPLE;
+  GdkGLProc_glTestFenceAPPLE glTestFenceAPPLE;
+  GdkGLProc_glFinishFenceAPPLE glFinishFenceAPPLE;
+  GdkGLProc_glTestObjectAPPLE glTestObjectAPPLE;
+  GdkGLProc_glFinishObjectAPPLE glFinishObjectAPPLE;
+};
+
+GdkGL_GL_APPLE_fence *gdk_gl_get_GL_APPLE_fence (void);
+
+/*
+ * GL_APPLE_vertex_array_object
+ */
+
+/* glBindVertexArrayAPPLE */
+typedef void (APIENTRYP GdkGLProc_glBindVertexArrayAPPLE) (GLuint array);
+GdkGLProc    gdk_gl_get_glBindVertexArrayAPPLE (void);
+#define      gdk_gl_glBindVertexArrayAPPLE(proc, array) \
+  ( ((GdkGLProc_glBindVertexArrayAPPLE) (proc)) (array) )
+
+/* glDeleteVertexArraysAPPLE */
+typedef void (APIENTRYP GdkGLProc_glDeleteVertexArraysAPPLE) (GLsizei n, const GLuint *arrays);
+GdkGLProc    gdk_gl_get_glDeleteVertexArraysAPPLE (void);
+#define      gdk_gl_glDeleteVertexArraysAPPLE(proc, n, arrays) \
+  ( ((GdkGLProc_glDeleteVertexArraysAPPLE) (proc)) (n, arrays) )
+
+/* glGenVertexArraysAPPLE */
+typedef void (APIENTRYP GdkGLProc_glGenVertexArraysAPPLE) (GLsizei n, GLuint *arrays);
+GdkGLProc    gdk_gl_get_glGenVertexArraysAPPLE (void);
+#define      gdk_gl_glGenVertexArraysAPPLE(proc, n, arrays) \
+  ( ((GdkGLProc_glGenVertexArraysAPPLE) (proc)) (n, arrays) )
+
+/* glIsVertexArrayAPPLE */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsVertexArrayAPPLE) (GLuint array);
+GdkGLProc    gdk_gl_get_glIsVertexArrayAPPLE (void);
+#define      gdk_gl_glIsVertexArrayAPPLE(proc, array) \
+  ( ((GdkGLProc_glIsVertexArrayAPPLE) (proc)) (array) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_APPLE_vertex_array_object GdkGL_GL_APPLE_vertex_array_object;
+
+struct _GdkGL_GL_APPLE_vertex_array_object
+{
+  GdkGLProc_glBindVertexArrayAPPLE glBindVertexArrayAPPLE;
+  GdkGLProc_glDeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE;
+  GdkGLProc_glGenVertexArraysAPPLE glGenVertexArraysAPPLE;
+  GdkGLProc_glIsVertexArrayAPPLE glIsVertexArrayAPPLE;
+};
+
+GdkGL_GL_APPLE_vertex_array_object *gdk_gl_get_GL_APPLE_vertex_array_object (void);
+
+/*
+ * GL_APPLE_vertex_array_range
+ */
+
+/* glVertexArrayRangeAPPLE */
+typedef void (APIENTRYP GdkGLProc_glVertexArrayRangeAPPLE) (GLsizei length, GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexArrayRangeAPPLE (void);
+#define      gdk_gl_glVertexArrayRangeAPPLE(proc, length, pointer) \
+  ( ((GdkGLProc_glVertexArrayRangeAPPLE) (proc)) (length, pointer) )
+
+/* glFlushVertexArrayRangeAPPLE */
+typedef void (APIENTRYP GdkGLProc_glFlushVertexArrayRangeAPPLE) (GLsizei length, GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glFlushVertexArrayRangeAPPLE (void);
+#define      gdk_gl_glFlushVertexArrayRangeAPPLE(proc, length, pointer) \
+  ( ((GdkGLProc_glFlushVertexArrayRangeAPPLE) (proc)) (length, pointer) )
+
+/* glVertexArrayParameteriAPPLE */
+typedef void (APIENTRYP GdkGLProc_glVertexArrayParameteriAPPLE) (GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glVertexArrayParameteriAPPLE (void);
+#define      gdk_gl_glVertexArrayParameteriAPPLE(proc, pname, param) \
+  ( ((GdkGLProc_glVertexArrayParameteriAPPLE) (proc)) (pname, param) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_APPLE_vertex_array_range GdkGL_GL_APPLE_vertex_array_range;
+
+struct _GdkGL_GL_APPLE_vertex_array_range
+{
+  GdkGLProc_glVertexArrayRangeAPPLE glVertexArrayRangeAPPLE;
+  GdkGLProc_glFlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE;
+  GdkGLProc_glVertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE;
+};
+
+GdkGL_GL_APPLE_vertex_array_range *gdk_gl_get_GL_APPLE_vertex_array_range (void);
+
+/*
+ * GL_ATI_draw_buffers
+ */
+
+/* glDrawBuffersATI */
+typedef void (APIENTRYP GdkGLProc_glDrawBuffersATI) (GLsizei n, const GLenum *bufs);
+GdkGLProc    gdk_gl_get_glDrawBuffersATI (void);
+#define      gdk_gl_glDrawBuffersATI(proc, n, bufs) \
+  ( ((GdkGLProc_glDrawBuffersATI) (proc)) (n, bufs) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_ATI_draw_buffers GdkGL_GL_ATI_draw_buffers;
+
+struct _GdkGL_GL_ATI_draw_buffers
+{
+  GdkGLProc_glDrawBuffersATI glDrawBuffersATI;
+};
+
+GdkGL_GL_ATI_draw_buffers *gdk_gl_get_GL_ATI_draw_buffers (void);
+
+/*
+ * GL_NV_fragment_program
+ */
+
+/* glProgramNamedParameter4fNV */
+typedef void (APIENTRYP GdkGLProc_glProgramNamedParameter4fNV) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glProgramNamedParameter4fNV (void);
+#define      gdk_gl_glProgramNamedParameter4fNV(proc, id, len, name, x, y, z, w) \
+  ( ((GdkGLProc_glProgramNamedParameter4fNV) (proc)) (id, len, name, x, y, z, w) )
+
+/* glProgramNamedParameter4dNV */
+typedef void (APIENTRYP GdkGLProc_glProgramNamedParameter4dNV) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+GdkGLProc    gdk_gl_get_glProgramNamedParameter4dNV (void);
+#define      gdk_gl_glProgramNamedParameter4dNV(proc, id, len, name, x, y, z, w) \
+  ( ((GdkGLProc_glProgramNamedParameter4dNV) (proc)) (id, len, name, x, y, z, w) )
+
+/* glProgramNamedParameter4fvNV */
+typedef void (APIENTRYP GdkGLProc_glProgramNamedParameter4fvNV) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
+GdkGLProc    gdk_gl_get_glProgramNamedParameter4fvNV (void);
+#define      gdk_gl_glProgramNamedParameter4fvNV(proc, id, len, name, v) \
+  ( ((GdkGLProc_glProgramNamedParameter4fvNV) (proc)) (id, len, name, v) )
+
+/* glProgramNamedParameter4dvNV */
+typedef void (APIENTRYP GdkGLProc_glProgramNamedParameter4dvNV) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
+GdkGLProc    gdk_gl_get_glProgramNamedParameter4dvNV (void);
+#define      gdk_gl_glProgramNamedParameter4dvNV(proc, id, len, name, v) \
+  ( ((GdkGLProc_glProgramNamedParameter4dvNV) (proc)) (id, len, name, v) )
+
+/* glGetProgramNamedParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramNamedParameterfvNV) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetProgramNamedParameterfvNV (void);
+#define      gdk_gl_glGetProgramNamedParameterfvNV(proc, id, len, name, params) \
+  ( ((GdkGLProc_glGetProgramNamedParameterfvNV) (proc)) (id, len, name, params) )
+
+/* glGetProgramNamedParameterdvNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramNamedParameterdvNV) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
+GdkGLProc    gdk_gl_get_glGetProgramNamedParameterdvNV (void);
+#define      gdk_gl_glGetProgramNamedParameterdvNV(proc, id, len, name, params) \
+  ( ((GdkGLProc_glGetProgramNamedParameterdvNV) (proc)) (id, len, name, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_fragment_program GdkGL_GL_NV_fragment_program;
+
+struct _GdkGL_GL_NV_fragment_program
+{
+  GdkGLProc_glProgramNamedParameter4fNV glProgramNamedParameter4fNV;
+  GdkGLProc_glProgramNamedParameter4dNV glProgramNamedParameter4dNV;
+  GdkGLProc_glProgramNamedParameter4fvNV glProgramNamedParameter4fvNV;
+  GdkGLProc_glProgramNamedParameter4dvNV glProgramNamedParameter4dvNV;
+  GdkGLProc_glGetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV;
+  GdkGLProc_glGetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV;
+};
+
+GdkGL_GL_NV_fragment_program *gdk_gl_get_GL_NV_fragment_program (void);
+
+/*
+ * GL_NV_half_float
+ */
+
+/* glVertex2hNV */
+typedef void (APIENTRYP GdkGLProc_glVertex2hNV) (GLhalfNV x, GLhalfNV y);
+GdkGLProc    gdk_gl_get_glVertex2hNV (void);
+#define      gdk_gl_glVertex2hNV(proc, x, y) \
+  ( ((GdkGLProc_glVertex2hNV) (proc)) (x, y) )
+
+/* glVertex2hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertex2hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertex2hvNV (void);
+#define      gdk_gl_glVertex2hvNV(proc, v) \
+  ( ((GdkGLProc_glVertex2hvNV) (proc)) (v) )
+
+/* glVertex3hNV */
+typedef void (APIENTRYP GdkGLProc_glVertex3hNV) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
+GdkGLProc    gdk_gl_get_glVertex3hNV (void);
+#define      gdk_gl_glVertex3hNV(proc, x, y, z) \
+  ( ((GdkGLProc_glVertex3hNV) (proc)) (x, y, z) )
+
+/* glVertex3hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertex3hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertex3hvNV (void);
+#define      gdk_gl_glVertex3hvNV(proc, v) \
+  ( ((GdkGLProc_glVertex3hvNV) (proc)) (v) )
+
+/* glVertex4hNV */
+typedef void (APIENTRYP GdkGLProc_glVertex4hNV) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
+GdkGLProc    gdk_gl_get_glVertex4hNV (void);
+#define      gdk_gl_glVertex4hNV(proc, x, y, z, w) \
+  ( ((GdkGLProc_glVertex4hNV) (proc)) (x, y, z, w) )
+
+/* glVertex4hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertex4hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertex4hvNV (void);
+#define      gdk_gl_glVertex4hvNV(proc, v) \
+  ( ((GdkGLProc_glVertex4hvNV) (proc)) (v) )
+
+/* glNormal3hNV */
+typedef void (APIENTRYP GdkGLProc_glNormal3hNV) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
+GdkGLProc    gdk_gl_get_glNormal3hNV (void);
+#define      gdk_gl_glNormal3hNV(proc, nx, ny, nz) \
+  ( ((GdkGLProc_glNormal3hNV) (proc)) (nx, ny, nz) )
+
+/* glNormal3hvNV */
+typedef void (APIENTRYP GdkGLProc_glNormal3hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glNormal3hvNV (void);
+#define      gdk_gl_glNormal3hvNV(proc, v) \
+  ( ((GdkGLProc_glNormal3hvNV) (proc)) (v) )
+
+/* glColor3hNV */
+typedef void (APIENTRYP GdkGLProc_glColor3hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
+GdkGLProc    gdk_gl_get_glColor3hNV (void);
+#define      gdk_gl_glColor3hNV(proc, red, green, blue) \
+  ( ((GdkGLProc_glColor3hNV) (proc)) (red, green, blue) )
+
+/* glColor3hvNV */
+typedef void (APIENTRYP GdkGLProc_glColor3hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glColor3hvNV (void);
+#define      gdk_gl_glColor3hvNV(proc, v) \
+  ( ((GdkGLProc_glColor3hvNV) (proc)) (v) )
+
+/* glColor4hNV */
+typedef void (APIENTRYP GdkGLProc_glColor4hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
+GdkGLProc    gdk_gl_get_glColor4hNV (void);
+#define      gdk_gl_glColor4hNV(proc, red, green, blue, alpha) \
+  ( ((GdkGLProc_glColor4hNV) (proc)) (red, green, blue, alpha) )
+
+/* glColor4hvNV */
+typedef void (APIENTRYP GdkGLProc_glColor4hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glColor4hvNV (void);
+#define      gdk_gl_glColor4hvNV(proc, v) \
+  ( ((GdkGLProc_glColor4hvNV) (proc)) (v) )
+
+/* glTexCoord1hNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord1hNV) (GLhalfNV s);
+GdkGLProc    gdk_gl_get_glTexCoord1hNV (void);
+#define      gdk_gl_glTexCoord1hNV(proc, s) \
+  ( ((GdkGLProc_glTexCoord1hNV) (proc)) (s) )
+
+/* glTexCoord1hvNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord1hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glTexCoord1hvNV (void);
+#define      gdk_gl_glTexCoord1hvNV(proc, v) \
+  ( ((GdkGLProc_glTexCoord1hvNV) (proc)) (v) )
+
+/* glTexCoord2hNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2hNV) (GLhalfNV s, GLhalfNV t);
+GdkGLProc    gdk_gl_get_glTexCoord2hNV (void);
+#define      gdk_gl_glTexCoord2hNV(proc, s, t) \
+  ( ((GdkGLProc_glTexCoord2hNV) (proc)) (s, t) )
+
+/* glTexCoord2hvNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord2hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glTexCoord2hvNV (void);
+#define      gdk_gl_glTexCoord2hvNV(proc, v) \
+  ( ((GdkGLProc_glTexCoord2hvNV) (proc)) (v) )
+
+/* glTexCoord3hNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord3hNV) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
+GdkGLProc    gdk_gl_get_glTexCoord3hNV (void);
+#define      gdk_gl_glTexCoord3hNV(proc, s, t, r) \
+  ( ((GdkGLProc_glTexCoord3hNV) (proc)) (s, t, r) )
+
+/* glTexCoord3hvNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord3hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glTexCoord3hvNV (void);
+#define      gdk_gl_glTexCoord3hvNV(proc, v) \
+  ( ((GdkGLProc_glTexCoord3hvNV) (proc)) (v) )
+
+/* glTexCoord4hNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord4hNV) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
+GdkGLProc    gdk_gl_get_glTexCoord4hNV (void);
+#define      gdk_gl_glTexCoord4hNV(proc, s, t, r, q) \
+  ( ((GdkGLProc_glTexCoord4hNV) (proc)) (s, t, r, q) )
+
+/* glTexCoord4hvNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoord4hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glTexCoord4hvNV (void);
+#define      gdk_gl_glTexCoord4hvNV(proc, v) \
+  ( ((GdkGLProc_glTexCoord4hvNV) (proc)) (v) )
+
+/* glMultiTexCoord1hNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1hNV) (GLenum target, GLhalfNV s);
+GdkGLProc    gdk_gl_get_glMultiTexCoord1hNV (void);
+#define      gdk_gl_glMultiTexCoord1hNV(proc, target, s) \
+  ( ((GdkGLProc_glMultiTexCoord1hNV) (proc)) (target, s) )
 
-/* glVertexStream2ivATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2ivATI) (GLenum stream, const GLint *coords);
-GdkGLProc    gdk_gl_get_glVertexStream2ivATI (void);
-#define      gdk_gl_glVertexStream2ivATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream2ivATI) (proc)) (stream, coords) )
+/* glMultiTexCoord1hvNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord1hvNV) (GLenum target, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glMultiTexCoord1hvNV (void);
+#define      gdk_gl_glMultiTexCoord1hvNV(proc, target, v) \
+  ( ((GdkGLProc_glMultiTexCoord1hvNV) (proc)) (target, v) )
+
+/* glMultiTexCoord2hNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2hNV) (GLenum target, GLhalfNV s, GLhalfNV t);
+GdkGLProc    gdk_gl_get_glMultiTexCoord2hNV (void);
+#define      gdk_gl_glMultiTexCoord2hNV(proc, target, s, t) \
+  ( ((GdkGLProc_glMultiTexCoord2hNV) (proc)) (target, s, t) )
+
+/* glMultiTexCoord2hvNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord2hvNV) (GLenum target, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glMultiTexCoord2hvNV (void);
+#define      gdk_gl_glMultiTexCoord2hvNV(proc, target, v) \
+  ( ((GdkGLProc_glMultiTexCoord2hvNV) (proc)) (target, v) )
+
+/* glMultiTexCoord3hNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3hNV) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
+GdkGLProc    gdk_gl_get_glMultiTexCoord3hNV (void);
+#define      gdk_gl_glMultiTexCoord3hNV(proc, target, s, t, r) \
+  ( ((GdkGLProc_glMultiTexCoord3hNV) (proc)) (target, s, t, r) )
+
+/* glMultiTexCoord3hvNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord3hvNV) (GLenum target, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glMultiTexCoord3hvNV (void);
+#define      gdk_gl_glMultiTexCoord3hvNV(proc, target, v) \
+  ( ((GdkGLProc_glMultiTexCoord3hvNV) (proc)) (target, v) )
+
+/* glMultiTexCoord4hNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4hNV) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
+GdkGLProc    gdk_gl_get_glMultiTexCoord4hNV (void);
+#define      gdk_gl_glMultiTexCoord4hNV(proc, target, s, t, r, q) \
+  ( ((GdkGLProc_glMultiTexCoord4hNV) (proc)) (target, s, t, r, q) )
+
+/* glMultiTexCoord4hvNV */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoord4hvNV) (GLenum target, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glMultiTexCoord4hvNV (void);
+#define      gdk_gl_glMultiTexCoord4hvNV(proc, target, v) \
+  ( ((GdkGLProc_glMultiTexCoord4hvNV) (proc)) (target, v) )
+
+/* glFogCoordhNV */
+typedef void (APIENTRYP GdkGLProc_glFogCoordhNV) (GLhalfNV fog);
+GdkGLProc    gdk_gl_get_glFogCoordhNV (void);
+#define      gdk_gl_glFogCoordhNV(proc, fog) \
+  ( ((GdkGLProc_glFogCoordhNV) (proc)) (fog) )
+
+/* glFogCoordhvNV */
+typedef void (APIENTRYP GdkGLProc_glFogCoordhvNV) (const GLhalfNV *fog);
+GdkGLProc    gdk_gl_get_glFogCoordhvNV (void);
+#define      gdk_gl_glFogCoordhvNV(proc, fog) \
+  ( ((GdkGLProc_glFogCoordhvNV) (proc)) (fog) )
+
+/* glSecondaryColor3hNV */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
+GdkGLProc    gdk_gl_get_glSecondaryColor3hNV (void);
+#define      gdk_gl_glSecondaryColor3hNV(proc, red, green, blue) \
+  ( ((GdkGLProc_glSecondaryColor3hNV) (proc)) (red, green, blue) )
+
+/* glSecondaryColor3hvNV */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColor3hvNV) (const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glSecondaryColor3hvNV (void);
+#define      gdk_gl_glSecondaryColor3hvNV(proc, v) \
+  ( ((GdkGLProc_glSecondaryColor3hvNV) (proc)) (v) )
+
+/* glVertexWeighthNV */
+typedef void (APIENTRYP GdkGLProc_glVertexWeighthNV) (GLhalfNV weight);
+GdkGLProc    gdk_gl_get_glVertexWeighthNV (void);
+#define      gdk_gl_glVertexWeighthNV(proc, weight) \
+  ( ((GdkGLProc_glVertexWeighthNV) (proc)) (weight) )
+
+/* glVertexWeighthvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexWeighthvNV) (const GLhalfNV *weight);
+GdkGLProc    gdk_gl_get_glVertexWeighthvNV (void);
+#define      gdk_gl_glVertexWeighthvNV(proc, weight) \
+  ( ((GdkGLProc_glVertexWeighthvNV) (proc)) (weight) )
+
+/* glVertexAttrib1hNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1hNV) (GLuint index, GLhalfNV x);
+GdkGLProc    gdk_gl_get_glVertexAttrib1hNV (void);
+#define      gdk_gl_glVertexAttrib1hNV(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttrib1hNV) (proc)) (index, x) )
+
+/* glVertexAttrib1hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib1hvNV) (GLuint index, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib1hvNV (void);
+#define      gdk_gl_glVertexAttrib1hvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib1hvNV) (proc)) (index, v) )
+
+/* glVertexAttrib2hNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2hNV) (GLuint index, GLhalfNV x, GLhalfNV y);
+GdkGLProc    gdk_gl_get_glVertexAttrib2hNV (void);
+#define      gdk_gl_glVertexAttrib2hNV(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttrib2hNV) (proc)) (index, x, y) )
+
+/* glVertexAttrib2hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib2hvNV) (GLuint index, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib2hvNV (void);
+#define      gdk_gl_glVertexAttrib2hvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib2hvNV) (proc)) (index, v) )
+
+/* glVertexAttrib3hNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3hNV) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
+GdkGLProc    gdk_gl_get_glVertexAttrib3hNV (void);
+#define      gdk_gl_glVertexAttrib3hNV(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttrib3hNV) (proc)) (index, x, y, z) )
+
+/* glVertexAttrib3hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib3hvNV) (GLuint index, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib3hvNV (void);
+#define      gdk_gl_glVertexAttrib3hvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib3hvNV) (proc)) (index, v) )
+
+/* glVertexAttrib4hNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4hNV) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
+GdkGLProc    gdk_gl_get_glVertexAttrib4hNV (void);
+#define      gdk_gl_glVertexAttrib4hNV(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttrib4hNV) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttrib4hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttrib4hvNV) (GLuint index, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttrib4hvNV (void);
+#define      gdk_gl_glVertexAttrib4hvNV(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttrib4hvNV) (proc)) (index, v) )
+
+/* glVertexAttribs1hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs1hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs1hvNV (void);
+#define      gdk_gl_glVertexAttribs1hvNV(proc, index, n, v) \
+  ( ((GdkGLProc_glVertexAttribs1hvNV) (proc)) (index, n, v) )
+
+/* glVertexAttribs2hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs2hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs2hvNV (void);
+#define      gdk_gl_glVertexAttribs2hvNV(proc, index, n, v) \
+  ( ((GdkGLProc_glVertexAttribs2hvNV) (proc)) (index, n, v) )
+
+/* glVertexAttribs3hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs3hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs3hvNV (void);
+#define      gdk_gl_glVertexAttribs3hvNV(proc, index, n, v) \
+  ( ((GdkGLProc_glVertexAttribs3hvNV) (proc)) (index, n, v) )
+
+/* glVertexAttribs4hvNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribs4hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
+GdkGLProc    gdk_gl_get_glVertexAttribs4hvNV (void);
+#define      gdk_gl_glVertexAttribs4hvNV(proc, index, n, v) \
+  ( ((GdkGLProc_glVertexAttribs4hvNV) (proc)) (index, n, v) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_half_float GdkGL_GL_NV_half_float;
+
+struct _GdkGL_GL_NV_half_float
+{
+  GdkGLProc_glVertex2hNV glVertex2hNV;
+  GdkGLProc_glVertex2hvNV glVertex2hvNV;
+  GdkGLProc_glVertex3hNV glVertex3hNV;
+  GdkGLProc_glVertex3hvNV glVertex3hvNV;
+  GdkGLProc_glVertex4hNV glVertex4hNV;
+  GdkGLProc_glVertex4hvNV glVertex4hvNV;
+  GdkGLProc_glNormal3hNV glNormal3hNV;
+  GdkGLProc_glNormal3hvNV glNormal3hvNV;
+  GdkGLProc_glColor3hNV glColor3hNV;
+  GdkGLProc_glColor3hvNV glColor3hvNV;
+  GdkGLProc_glColor4hNV glColor4hNV;
+  GdkGLProc_glColor4hvNV glColor4hvNV;
+  GdkGLProc_glTexCoord1hNV glTexCoord1hNV;
+  GdkGLProc_glTexCoord1hvNV glTexCoord1hvNV;
+  GdkGLProc_glTexCoord2hNV glTexCoord2hNV;
+  GdkGLProc_glTexCoord2hvNV glTexCoord2hvNV;
+  GdkGLProc_glTexCoord3hNV glTexCoord3hNV;
+  GdkGLProc_glTexCoord3hvNV glTexCoord3hvNV;
+  GdkGLProc_glTexCoord4hNV glTexCoord4hNV;
+  GdkGLProc_glTexCoord4hvNV glTexCoord4hvNV;
+  GdkGLProc_glMultiTexCoord1hNV glMultiTexCoord1hNV;
+  GdkGLProc_glMultiTexCoord1hvNV glMultiTexCoord1hvNV;
+  GdkGLProc_glMultiTexCoord2hNV glMultiTexCoord2hNV;
+  GdkGLProc_glMultiTexCoord2hvNV glMultiTexCoord2hvNV;
+  GdkGLProc_glMultiTexCoord3hNV glMultiTexCoord3hNV;
+  GdkGLProc_glMultiTexCoord3hvNV glMultiTexCoord3hvNV;
+  GdkGLProc_glMultiTexCoord4hNV glMultiTexCoord4hNV;
+  GdkGLProc_glMultiTexCoord4hvNV glMultiTexCoord4hvNV;
+  GdkGLProc_glFogCoordhNV glFogCoordhNV;
+  GdkGLProc_glFogCoordhvNV glFogCoordhvNV;
+  GdkGLProc_glSecondaryColor3hNV glSecondaryColor3hNV;
+  GdkGLProc_glSecondaryColor3hvNV glSecondaryColor3hvNV;
+  GdkGLProc_glVertexWeighthNV glVertexWeighthNV;
+  GdkGLProc_glVertexWeighthvNV glVertexWeighthvNV;
+  GdkGLProc_glVertexAttrib1hNV glVertexAttrib1hNV;
+  GdkGLProc_glVertexAttrib1hvNV glVertexAttrib1hvNV;
+  GdkGLProc_glVertexAttrib2hNV glVertexAttrib2hNV;
+  GdkGLProc_glVertexAttrib2hvNV glVertexAttrib2hvNV;
+  GdkGLProc_glVertexAttrib3hNV glVertexAttrib3hNV;
+  GdkGLProc_glVertexAttrib3hvNV glVertexAttrib3hvNV;
+  GdkGLProc_glVertexAttrib4hNV glVertexAttrib4hNV;
+  GdkGLProc_glVertexAttrib4hvNV glVertexAttrib4hvNV;
+  GdkGLProc_glVertexAttribs1hvNV glVertexAttribs1hvNV;
+  GdkGLProc_glVertexAttribs2hvNV glVertexAttribs2hvNV;
+  GdkGLProc_glVertexAttribs3hvNV glVertexAttribs3hvNV;
+  GdkGLProc_glVertexAttribs4hvNV glVertexAttribs4hvNV;
+};
+
+GdkGL_GL_NV_half_float *gdk_gl_get_GL_NV_half_float (void);
+
+/*
+ * GL_NV_pixel_data_range
+ */
+
+/* glPixelDataRangeNV */
+typedef void (APIENTRYP GdkGLProc_glPixelDataRangeNV) (GLenum target, GLsizei length, GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glPixelDataRangeNV (void);
+#define      gdk_gl_glPixelDataRangeNV(proc, target, length, pointer) \
+  ( ((GdkGLProc_glPixelDataRangeNV) (proc)) (target, length, pointer) )
+
+/* glFlushPixelDataRangeNV */
+typedef void (APIENTRYP GdkGLProc_glFlushPixelDataRangeNV) (GLenum target);
+GdkGLProc    gdk_gl_get_glFlushPixelDataRangeNV (void);
+#define      gdk_gl_glFlushPixelDataRangeNV(proc, target) \
+  ( ((GdkGLProc_glFlushPixelDataRangeNV) (proc)) (target) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_pixel_data_range GdkGL_GL_NV_pixel_data_range;
+
+struct _GdkGL_GL_NV_pixel_data_range
+{
+  GdkGLProc_glPixelDataRangeNV glPixelDataRangeNV;
+  GdkGLProc_glFlushPixelDataRangeNV glFlushPixelDataRangeNV;
+};
+
+GdkGL_GL_NV_pixel_data_range *gdk_gl_get_GL_NV_pixel_data_range (void);
+
+/*
+ * GL_NV_primitive_restart
+ */
+
+/* glPrimitiveRestartNV */
+typedef void (APIENTRYP GdkGLProc_glPrimitiveRestartNV) (void);
+GdkGLProc    gdk_gl_get_glPrimitiveRestartNV (void);
+#define      gdk_gl_glPrimitiveRestartNV(proc) \
+  ( ((GdkGLProc_glPrimitiveRestartNV) (proc)) () )
+
+/* glPrimitiveRestartIndexNV */
+typedef void (APIENTRYP GdkGLProc_glPrimitiveRestartIndexNV) (GLuint index);
+GdkGLProc    gdk_gl_get_glPrimitiveRestartIndexNV (void);
+#define      gdk_gl_glPrimitiveRestartIndexNV(proc, index) \
+  ( ((GdkGLProc_glPrimitiveRestartIndexNV) (proc)) (index) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_primitive_restart GdkGL_GL_NV_primitive_restart;
+
+struct _GdkGL_GL_NV_primitive_restart
+{
+  GdkGLProc_glPrimitiveRestartNV glPrimitiveRestartNV;
+  GdkGLProc_glPrimitiveRestartIndexNV glPrimitiveRestartIndexNV;
+};
+
+GdkGL_GL_NV_primitive_restart *gdk_gl_get_GL_NV_primitive_restart (void);
+
+/*
+ * GL_ATI_map_object_buffer
+ */
+
+/* glMapObjectBufferATI */
+typedef GLvoid* (APIENTRYP GdkGLProc_glMapObjectBufferATI) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glMapObjectBufferATI (void);
+#define      gdk_gl_glMapObjectBufferATI(proc, buffer) \
+  ( ((GdkGLProc_glMapObjectBufferATI) (proc)) (buffer) )
+
+/* glUnmapObjectBufferATI */
+typedef void (APIENTRYP GdkGLProc_glUnmapObjectBufferATI) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glUnmapObjectBufferATI (void);
+#define      gdk_gl_glUnmapObjectBufferATI(proc, buffer) \
+  ( ((GdkGLProc_glUnmapObjectBufferATI) (proc)) (buffer) )
 
-/* glVertexStream2fATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2fATI) (GLenum stream, GLfloat x, GLfloat y);
-GdkGLProc    gdk_gl_get_glVertexStream2fATI (void);
-#define      gdk_gl_glVertexStream2fATI(proc, stream, x, y) \
-  ( ((GdkGLProc_glVertexStream2fATI) (proc)) (stream, x, y) )
+/* proc struct */
 
-/* glVertexStream2fvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2fvATI) (GLenum stream, const GLfloat *coords);
-GdkGLProc    gdk_gl_get_glVertexStream2fvATI (void);
-#define      gdk_gl_glVertexStream2fvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream2fvATI) (proc)) (stream, coords) )
+typedef struct _GdkGL_GL_ATI_map_object_buffer GdkGL_GL_ATI_map_object_buffer;
 
-/* glVertexStream2dATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2dATI) (GLenum stream, GLdouble x, GLdouble y);
-GdkGLProc    gdk_gl_get_glVertexStream2dATI (void);
-#define      gdk_gl_glVertexStream2dATI(proc, stream, x, y) \
-  ( ((GdkGLProc_glVertexStream2dATI) (proc)) (stream, x, y) )
+struct _GdkGL_GL_ATI_map_object_buffer
+{
+  GdkGLProc_glMapObjectBufferATI glMapObjectBufferATI;
+  GdkGLProc_glUnmapObjectBufferATI glUnmapObjectBufferATI;
+};
 
-/* glVertexStream2dvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream2dvATI) (GLenum stream, const GLdouble *coords);
-GdkGLProc    gdk_gl_get_glVertexStream2dvATI (void);
-#define      gdk_gl_glVertexStream2dvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream2dvATI) (proc)) (stream, coords) )
+GdkGL_GL_ATI_map_object_buffer *gdk_gl_get_GL_ATI_map_object_buffer (void);
 
-/* glVertexStream3sATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3sATI) (GLenum stream, GLshort x, GLshort y, GLshort z);
-GdkGLProc    gdk_gl_get_glVertexStream3sATI (void);
-#define      gdk_gl_glVertexStream3sATI(proc, stream, x, y, z) \
-  ( ((GdkGLProc_glVertexStream3sATI) (proc)) (stream, x, y, z) )
+/*
+ * GL_ATI_separate_stencil
+ */
 
-/* glVertexStream3svATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3svATI) (GLenum stream, const GLshort *coords);
-GdkGLProc    gdk_gl_get_glVertexStream3svATI (void);
-#define      gdk_gl_glVertexStream3svATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream3svATI) (proc)) (stream, coords) )
+/* glStencilOpSeparateATI */
+typedef void (APIENTRYP GdkGLProc_glStencilOpSeparateATI) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+GdkGLProc    gdk_gl_get_glStencilOpSeparateATI (void);
+#define      gdk_gl_glStencilOpSeparateATI(proc, face, sfail, dpfail, dppass) \
+  ( ((GdkGLProc_glStencilOpSeparateATI) (proc)) (face, sfail, dpfail, dppass) )
 
-/* glVertexStream3iATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3iATI) (GLenum stream, GLint x, GLint y, GLint z);
-GdkGLProc    gdk_gl_get_glVertexStream3iATI (void);
-#define      gdk_gl_glVertexStream3iATI(proc, stream, x, y, z) \
-  ( ((GdkGLProc_glVertexStream3iATI) (proc)) (stream, x, y, z) )
+/* glStencilFuncSeparateATI */
+typedef void (APIENTRYP GdkGLProc_glStencilFuncSeparateATI) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
+GdkGLProc    gdk_gl_get_glStencilFuncSeparateATI (void);
+#define      gdk_gl_glStencilFuncSeparateATI(proc, frontfunc, backfunc, ref, mask) \
+  ( ((GdkGLProc_glStencilFuncSeparateATI) (proc)) (frontfunc, backfunc, ref, mask) )
 
-/* glVertexStream3ivATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3ivATI) (GLenum stream, const GLint *coords);
-GdkGLProc    gdk_gl_get_glVertexStream3ivATI (void);
-#define      gdk_gl_glVertexStream3ivATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream3ivATI) (proc)) (stream, coords) )
+/* proc struct */
 
-/* glVertexStream3fATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3fATI) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
-GdkGLProc    gdk_gl_get_glVertexStream3fATI (void);
-#define      gdk_gl_glVertexStream3fATI(proc, stream, x, y, z) \
-  ( ((GdkGLProc_glVertexStream3fATI) (proc)) (stream, x, y, z) )
+typedef struct _GdkGL_GL_ATI_separate_stencil GdkGL_GL_ATI_separate_stencil;
 
-/* glVertexStream3fvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3fvATI) (GLenum stream, const GLfloat *coords);
-GdkGLProc    gdk_gl_get_glVertexStream3fvATI (void);
-#define      gdk_gl_glVertexStream3fvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream3fvATI) (proc)) (stream, coords) )
+struct _GdkGL_GL_ATI_separate_stencil
+{
+  GdkGLProc_glStencilOpSeparateATI glStencilOpSeparateATI;
+  GdkGLProc_glStencilFuncSeparateATI glStencilFuncSeparateATI;
+};
 
-/* glVertexStream3dATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3dATI) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
-GdkGLProc    gdk_gl_get_glVertexStream3dATI (void);
-#define      gdk_gl_glVertexStream3dATI(proc, stream, x, y, z) \
-  ( ((GdkGLProc_glVertexStream3dATI) (proc)) (stream, x, y, z) )
+GdkGL_GL_ATI_separate_stencil *gdk_gl_get_GL_ATI_separate_stencil (void);
 
-/* glVertexStream3dvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream3dvATI) (GLenum stream, const GLdouble *coords);
-GdkGLProc    gdk_gl_get_glVertexStream3dvATI (void);
-#define      gdk_gl_glVertexStream3dvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream3dvATI) (proc)) (stream, coords) )
+/*
+ * GL_ATI_vertex_attrib_array_object
+ */
 
-/* glVertexStream4sATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4sATI) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
-GdkGLProc    gdk_gl_get_glVertexStream4sATI (void);
-#define      gdk_gl_glVertexStream4sATI(proc, stream, x, y, z, w) \
-  ( ((GdkGLProc_glVertexStream4sATI) (proc)) (stream, x, y, z, w) )
+/* glVertexAttribArrayObjectATI */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribArrayObjectATI) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
+GdkGLProc    gdk_gl_get_glVertexAttribArrayObjectATI (void);
+#define      gdk_gl_glVertexAttribArrayObjectATI(proc, index, size, type, normalized, stride, buffer, offset) \
+  ( ((GdkGLProc_glVertexAttribArrayObjectATI) (proc)) (index, size, type, normalized, stride, buffer, offset) )
 
-/* glVertexStream4svATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4svATI) (GLenum stream, const GLshort *coords);
-GdkGLProc    gdk_gl_get_glVertexStream4svATI (void);
-#define      gdk_gl_glVertexStream4svATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream4svATI) (proc)) (stream, coords) )
+/* glGetVertexAttribArrayObjectfvATI */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribArrayObjectfvATI) (GLuint index, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribArrayObjectfvATI (void);
+#define      gdk_gl_glGetVertexAttribArrayObjectfvATI(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribArrayObjectfvATI) (proc)) (index, pname, params) )
 
-/* glVertexStream4iATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4iATI) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
-GdkGLProc    gdk_gl_get_glVertexStream4iATI (void);
-#define      gdk_gl_glVertexStream4iATI(proc, stream, x, y, z, w) \
-  ( ((GdkGLProc_glVertexStream4iATI) (proc)) (stream, x, y, z, w) )
+/* glGetVertexAttribArrayObjectivATI */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribArrayObjectivATI) (GLuint index, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribArrayObjectivATI (void);
+#define      gdk_gl_glGetVertexAttribArrayObjectivATI(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribArrayObjectivATI) (proc)) (index, pname, params) )
 
-/* glVertexStream4ivATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4ivATI) (GLenum stream, const GLint *coords);
-GdkGLProc    gdk_gl_get_glVertexStream4ivATI (void);
-#define      gdk_gl_glVertexStream4ivATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream4ivATI) (proc)) (stream, coords) )
+/* proc struct */
 
-/* glVertexStream4fATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4fATI) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GdkGLProc    gdk_gl_get_glVertexStream4fATI (void);
-#define      gdk_gl_glVertexStream4fATI(proc, stream, x, y, z, w) \
-  ( ((GdkGLProc_glVertexStream4fATI) (proc)) (stream, x, y, z, w) )
+typedef struct _GdkGL_GL_ATI_vertex_attrib_array_object GdkGL_GL_ATI_vertex_attrib_array_object;
 
-/* glVertexStream4fvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4fvATI) (GLenum stream, const GLfloat *coords);
-GdkGLProc    gdk_gl_get_glVertexStream4fvATI (void);
-#define      gdk_gl_glVertexStream4fvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream4fvATI) (proc)) (stream, coords) )
+struct _GdkGL_GL_ATI_vertex_attrib_array_object
+{
+  GdkGLProc_glVertexAttribArrayObjectATI glVertexAttribArrayObjectATI;
+  GdkGLProc_glGetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI;
+  GdkGLProc_glGetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI;
+};
 
-/* glVertexStream4dATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4dATI) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-GdkGLProc    gdk_gl_get_glVertexStream4dATI (void);
-#define      gdk_gl_glVertexStream4dATI(proc, stream, x, y, z, w) \
-  ( ((GdkGLProc_glVertexStream4dATI) (proc)) (stream, x, y, z, w) )
+GdkGL_GL_ATI_vertex_attrib_array_object *gdk_gl_get_GL_ATI_vertex_attrib_array_object (void);
 
-/* glVertexStream4dvATI */
-typedef void (APIENTRY * GdkGLProc_glVertexStream4dvATI) (GLenum stream, const GLdouble *coords);
-GdkGLProc    gdk_gl_get_glVertexStream4dvATI (void);
-#define      gdk_gl_glVertexStream4dvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glVertexStream4dvATI) (proc)) (stream, coords) )
+/*
+ * GL_EXT_depth_bounds_test
+ */
 
-/* glNormalStream3bATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3bATI) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
-GdkGLProc    gdk_gl_get_glNormalStream3bATI (void);
-#define      gdk_gl_glNormalStream3bATI(proc, stream, nx, ny, nz) \
-  ( ((GdkGLProc_glNormalStream3bATI) (proc)) (stream, nx, ny, nz) )
+/* glDepthBoundsEXT */
+typedef void (APIENTRYP GdkGLProc_glDepthBoundsEXT) (GLclampd zmin, GLclampd zmax);
+GdkGLProc    gdk_gl_get_glDepthBoundsEXT (void);
+#define      gdk_gl_glDepthBoundsEXT(proc, zmin, zmax) \
+  ( ((GdkGLProc_glDepthBoundsEXT) (proc)) (zmin, zmax) )
 
-/* glNormalStream3bvATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3bvATI) (GLenum stream, const GLbyte *coords);
-GdkGLProc    gdk_gl_get_glNormalStream3bvATI (void);
-#define      gdk_gl_glNormalStream3bvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glNormalStream3bvATI) (proc)) (stream, coords) )
+/* proc struct */
 
-/* glNormalStream3sATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3sATI) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
-GdkGLProc    gdk_gl_get_glNormalStream3sATI (void);
-#define      gdk_gl_glNormalStream3sATI(proc, stream, nx, ny, nz) \
-  ( ((GdkGLProc_glNormalStream3sATI) (proc)) (stream, nx, ny, nz) )
+typedef struct _GdkGL_GL_EXT_depth_bounds_test GdkGL_GL_EXT_depth_bounds_test;
 
-/* glNormalStream3svATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3svATI) (GLenum stream, const GLshort *coords);
-GdkGLProc    gdk_gl_get_glNormalStream3svATI (void);
-#define      gdk_gl_glNormalStream3svATI(proc, stream, coords) \
-  ( ((GdkGLProc_glNormalStream3svATI) (proc)) (stream, coords) )
+struct _GdkGL_GL_EXT_depth_bounds_test
+{
+  GdkGLProc_glDepthBoundsEXT glDepthBoundsEXT;
+};
 
-/* glNormalStream3iATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3iATI) (GLenum stream, GLint nx, GLint ny, GLint nz);
-GdkGLProc    gdk_gl_get_glNormalStream3iATI (void);
-#define      gdk_gl_glNormalStream3iATI(proc, stream, nx, ny, nz) \
-  ( ((GdkGLProc_glNormalStream3iATI) (proc)) (stream, nx, ny, nz) )
+GdkGL_GL_EXT_depth_bounds_test *gdk_gl_get_GL_EXT_depth_bounds_test (void);
 
-/* glNormalStream3ivATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3ivATI) (GLenum stream, const GLint *coords);
-GdkGLProc    gdk_gl_get_glNormalStream3ivATI (void);
-#define      gdk_gl_glNormalStream3ivATI(proc, stream, coords) \
-  ( ((GdkGLProc_glNormalStream3ivATI) (proc)) (stream, coords) )
+/*
+ * GL_EXT_blend_equation_separate
+ */
 
-/* glNormalStream3fATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3fATI) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
-GdkGLProc    gdk_gl_get_glNormalStream3fATI (void);
-#define      gdk_gl_glNormalStream3fATI(proc, stream, nx, ny, nz) \
-  ( ((GdkGLProc_glNormalStream3fATI) (proc)) (stream, nx, ny, nz) )
+/* glBlendEquationSeparateEXT */
+typedef void (APIENTRYP GdkGLProc_glBlendEquationSeparateEXT) (GLenum modeRGB, GLenum modeAlpha);
+GdkGLProc    gdk_gl_get_glBlendEquationSeparateEXT (void);
+#define      gdk_gl_glBlendEquationSeparateEXT(proc, modeRGB, modeAlpha) \
+  ( ((GdkGLProc_glBlendEquationSeparateEXT) (proc)) (modeRGB, modeAlpha) )
 
-/* glNormalStream3fvATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3fvATI) (GLenum stream, const GLfloat *coords);
-GdkGLProc    gdk_gl_get_glNormalStream3fvATI (void);
-#define      gdk_gl_glNormalStream3fvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glNormalStream3fvATI) (proc)) (stream, coords) )
+/* proc struct */
 
-/* glNormalStream3dATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3dATI) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
-GdkGLProc    gdk_gl_get_glNormalStream3dATI (void);
-#define      gdk_gl_glNormalStream3dATI(proc, stream, nx, ny, nz) \
-  ( ((GdkGLProc_glNormalStream3dATI) (proc)) (stream, nx, ny, nz) )
+typedef struct _GdkGL_GL_EXT_blend_equation_separate GdkGL_GL_EXT_blend_equation_separate;
 
-/* glNormalStream3dvATI */
-typedef void (APIENTRY * GdkGLProc_glNormalStream3dvATI) (GLenum stream, const GLdouble *coords);
-GdkGLProc    gdk_gl_get_glNormalStream3dvATI (void);
-#define      gdk_gl_glNormalStream3dvATI(proc, stream, coords) \
-  ( ((GdkGLProc_glNormalStream3dvATI) (proc)) (stream, coords) )
+struct _GdkGL_GL_EXT_blend_equation_separate
+{
+  GdkGLProc_glBlendEquationSeparateEXT glBlendEquationSeparateEXT;
+};
 
-/* glClientActiveVertexStreamATI */
-typedef void (APIENTRY * GdkGLProc_glClientActiveVertexStreamATI) (GLenum stream);
-GdkGLProc    gdk_gl_get_glClientActiveVertexStreamATI (void);
-#define      gdk_gl_glClientActiveVertexStreamATI(proc, stream) \
-  ( ((GdkGLProc_glClientActiveVertexStreamATI) (proc)) (stream) )
+GdkGL_GL_EXT_blend_equation_separate *gdk_gl_get_GL_EXT_blend_equation_separate (void);
 
-/* glVertexBlendEnviATI */
-typedef void (APIENTRY * GdkGLProc_glVertexBlendEnviATI) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glVertexBlendEnviATI (void);
-#define      gdk_gl_glVertexBlendEnviATI(proc, pname, param) \
-  ( ((GdkGLProc_glVertexBlendEnviATI) (proc)) (pname, param) )
+/*
+ * GL_EXT_framebuffer_object
+ */
 
-/* glVertexBlendEnvfATI */
-typedef void (APIENTRY * GdkGLProc_glVertexBlendEnvfATI) (GLenum pname, GLfloat param);
-GdkGLProc    gdk_gl_get_glVertexBlendEnvfATI (void);
-#define      gdk_gl_glVertexBlendEnvfATI(proc, pname, param) \
-  ( ((GdkGLProc_glVertexBlendEnvfATI) (proc)) (pname, param) )
+/* glIsRenderbufferEXT */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsRenderbufferEXT) (GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glIsRenderbufferEXT (void);
+#define      gdk_gl_glIsRenderbufferEXT(proc, renderbuffer) \
+  ( ((GdkGLProc_glIsRenderbufferEXT) (proc)) (renderbuffer) )
+
+/* glBindRenderbufferEXT */
+typedef void (APIENTRYP GdkGLProc_glBindRenderbufferEXT) (GLenum target, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glBindRenderbufferEXT (void);
+#define      gdk_gl_glBindRenderbufferEXT(proc, target, renderbuffer) \
+  ( ((GdkGLProc_glBindRenderbufferEXT) (proc)) (target, renderbuffer) )
+
+/* glDeleteRenderbuffersEXT */
+typedef void (APIENTRYP GdkGLProc_glDeleteRenderbuffersEXT) (GLsizei n, const GLuint *renderbuffers);
+GdkGLProc    gdk_gl_get_glDeleteRenderbuffersEXT (void);
+#define      gdk_gl_glDeleteRenderbuffersEXT(proc, n, renderbuffers) \
+  ( ((GdkGLProc_glDeleteRenderbuffersEXT) (proc)) (n, renderbuffers) )
+
+/* glGenRenderbuffersEXT */
+typedef void (APIENTRYP GdkGLProc_glGenRenderbuffersEXT) (GLsizei n, GLuint *renderbuffers);
+GdkGLProc    gdk_gl_get_glGenRenderbuffersEXT (void);
+#define      gdk_gl_glGenRenderbuffersEXT(proc, n, renderbuffers) \
+  ( ((GdkGLProc_glGenRenderbuffersEXT) (proc)) (n, renderbuffers) )
+
+/* glRenderbufferStorageEXT */
+typedef void (APIENTRYP GdkGLProc_glRenderbufferStorageEXT) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glRenderbufferStorageEXT (void);
+#define      gdk_gl_glRenderbufferStorageEXT(proc, target, internalformat, width, height) \
+  ( ((GdkGLProc_glRenderbufferStorageEXT) (proc)) (target, internalformat, width, height) )
+
+/* glGetRenderbufferParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetRenderbufferParameterivEXT) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetRenderbufferParameterivEXT (void);
+#define      gdk_gl_glGetRenderbufferParameterivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetRenderbufferParameterivEXT) (proc)) (target, pname, params) )
+
+/* glIsFramebufferEXT */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsFramebufferEXT) (GLuint framebuffer);
+GdkGLProc    gdk_gl_get_glIsFramebufferEXT (void);
+#define      gdk_gl_glIsFramebufferEXT(proc, framebuffer) \
+  ( ((GdkGLProc_glIsFramebufferEXT) (proc)) (framebuffer) )
+
+/* glBindFramebufferEXT */
+typedef void (APIENTRYP GdkGLProc_glBindFramebufferEXT) (GLenum target, GLuint framebuffer);
+GdkGLProc    gdk_gl_get_glBindFramebufferEXT (void);
+#define      gdk_gl_glBindFramebufferEXT(proc, target, framebuffer) \
+  ( ((GdkGLProc_glBindFramebufferEXT) (proc)) (target, framebuffer) )
+
+/* glDeleteFramebuffersEXT */
+typedef void (APIENTRYP GdkGLProc_glDeleteFramebuffersEXT) (GLsizei n, const GLuint *framebuffers);
+GdkGLProc    gdk_gl_get_glDeleteFramebuffersEXT (void);
+#define      gdk_gl_glDeleteFramebuffersEXT(proc, n, framebuffers) \
+  ( ((GdkGLProc_glDeleteFramebuffersEXT) (proc)) (n, framebuffers) )
+
+/* glGenFramebuffersEXT */
+typedef void (APIENTRYP GdkGLProc_glGenFramebuffersEXT) (GLsizei n, GLuint *framebuffers);
+GdkGLProc    gdk_gl_get_glGenFramebuffersEXT (void);
+#define      gdk_gl_glGenFramebuffersEXT(proc, n, framebuffers) \
+  ( ((GdkGLProc_glGenFramebuffersEXT) (proc)) (n, framebuffers) )
+
+/* glCheckFramebufferStatusEXT */
+typedef GLenum (APIENTRYP GdkGLProc_glCheckFramebufferStatusEXT) (GLenum target);
+GdkGLProc    gdk_gl_get_glCheckFramebufferStatusEXT (void);
+#define      gdk_gl_glCheckFramebufferStatusEXT(proc, target) \
+  ( ((GdkGLProc_glCheckFramebufferStatusEXT) (proc)) (target) )
+
+/* glFramebufferTexture1DEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTexture1DEXT) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glFramebufferTexture1DEXT (void);
+#define      gdk_gl_glFramebufferTexture1DEXT(proc, target, attachment, textarget, texture, level) \
+  ( ((GdkGLProc_glFramebufferTexture1DEXT) (proc)) (target, attachment, textarget, texture, level) )
+
+/* glFramebufferTexture2DEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTexture2DEXT) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glFramebufferTexture2DEXT (void);
+#define      gdk_gl_glFramebufferTexture2DEXT(proc, target, attachment, textarget, texture, level) \
+  ( ((GdkGLProc_glFramebufferTexture2DEXT) (proc)) (target, attachment, textarget, texture, level) )
+
+/* glFramebufferTexture3DEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTexture3DEXT) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+GdkGLProc    gdk_gl_get_glFramebufferTexture3DEXT (void);
+#define      gdk_gl_glFramebufferTexture3DEXT(proc, target, attachment, textarget, texture, level, zoffset) \
+  ( ((GdkGLProc_glFramebufferTexture3DEXT) (proc)) (target, attachment, textarget, texture, level, zoffset) )
+
+/* glFramebufferRenderbufferEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferRenderbufferEXT) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glFramebufferRenderbufferEXT (void);
+#define      gdk_gl_glFramebufferRenderbufferEXT(proc, target, attachment, renderbuffertarget, renderbuffer) \
+  ( ((GdkGLProc_glFramebufferRenderbufferEXT) (proc)) (target, attachment, renderbuffertarget, renderbuffer) )
+
+/* glGetFramebufferAttachmentParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetFramebufferAttachmentParameterivEXT) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetFramebufferAttachmentParameterivEXT (void);
+#define      gdk_gl_glGetFramebufferAttachmentParameterivEXT(proc, target, attachment, pname, params) \
+  ( ((GdkGLProc_glGetFramebufferAttachmentParameterivEXT) (proc)) (target, attachment, pname, params) )
+
+/* glGenerateMipmapEXT */
+typedef void (APIENTRYP GdkGLProc_glGenerateMipmapEXT) (GLenum target);
+GdkGLProc    gdk_gl_get_glGenerateMipmapEXT (void);
+#define      gdk_gl_glGenerateMipmapEXT(proc, target) \
+  ( ((GdkGLProc_glGenerateMipmapEXT) (proc)) (target) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_vertex_streams GdkGL_GL_ATI_vertex_streams;
-
-struct _GdkGL_GL_ATI_vertex_streams
-{
-  GdkGLProc_glVertexStream1sATI glVertexStream1sATI;
-  GdkGLProc_glVertexStream1svATI glVertexStream1svATI;
-  GdkGLProc_glVertexStream1iATI glVertexStream1iATI;
-  GdkGLProc_glVertexStream1ivATI glVertexStream1ivATI;
-  GdkGLProc_glVertexStream1fATI glVertexStream1fATI;
-  GdkGLProc_glVertexStream1fvATI glVertexStream1fvATI;
-  GdkGLProc_glVertexStream1dATI glVertexStream1dATI;
-  GdkGLProc_glVertexStream1dvATI glVertexStream1dvATI;
-  GdkGLProc_glVertexStream2sATI glVertexStream2sATI;
-  GdkGLProc_glVertexStream2svATI glVertexStream2svATI;
-  GdkGLProc_glVertexStream2iATI glVertexStream2iATI;
-  GdkGLProc_glVertexStream2ivATI glVertexStream2ivATI;
-  GdkGLProc_glVertexStream2fATI glVertexStream2fATI;
-  GdkGLProc_glVertexStream2fvATI glVertexStream2fvATI;
-  GdkGLProc_glVertexStream2dATI glVertexStream2dATI;
-  GdkGLProc_glVertexStream2dvATI glVertexStream2dvATI;
-  GdkGLProc_glVertexStream3sATI glVertexStream3sATI;
-  GdkGLProc_glVertexStream3svATI glVertexStream3svATI;
-  GdkGLProc_glVertexStream3iATI glVertexStream3iATI;
-  GdkGLProc_glVertexStream3ivATI glVertexStream3ivATI;
-  GdkGLProc_glVertexStream3fATI glVertexStream3fATI;
-  GdkGLProc_glVertexStream3fvATI glVertexStream3fvATI;
-  GdkGLProc_glVertexStream3dATI glVertexStream3dATI;
-  GdkGLProc_glVertexStream3dvATI glVertexStream3dvATI;
-  GdkGLProc_glVertexStream4sATI glVertexStream4sATI;
-  GdkGLProc_glVertexStream4svATI glVertexStream4svATI;
-  GdkGLProc_glVertexStream4iATI glVertexStream4iATI;
-  GdkGLProc_glVertexStream4ivATI glVertexStream4ivATI;
-  GdkGLProc_glVertexStream4fATI glVertexStream4fATI;
-  GdkGLProc_glVertexStream4fvATI glVertexStream4fvATI;
-  GdkGLProc_glVertexStream4dATI glVertexStream4dATI;
-  GdkGLProc_glVertexStream4dvATI glVertexStream4dvATI;
-  GdkGLProc_glNormalStream3bATI glNormalStream3bATI;
-  GdkGLProc_glNormalStream3bvATI glNormalStream3bvATI;
-  GdkGLProc_glNormalStream3sATI glNormalStream3sATI;
-  GdkGLProc_glNormalStream3svATI glNormalStream3svATI;
-  GdkGLProc_glNormalStream3iATI glNormalStream3iATI;
-  GdkGLProc_glNormalStream3ivATI glNormalStream3ivATI;
-  GdkGLProc_glNormalStream3fATI glNormalStream3fATI;
-  GdkGLProc_glNormalStream3fvATI glNormalStream3fvATI;
-  GdkGLProc_glNormalStream3dATI glNormalStream3dATI;
-  GdkGLProc_glNormalStream3dvATI glNormalStream3dvATI;
-  GdkGLProc_glClientActiveVertexStreamATI glClientActiveVertexStreamATI;
-  GdkGLProc_glVertexBlendEnviATI glVertexBlendEnviATI;
-  GdkGLProc_glVertexBlendEnvfATI glVertexBlendEnvfATI;
+typedef struct _GdkGL_GL_EXT_framebuffer_object GdkGL_GL_EXT_framebuffer_object;
+
+struct _GdkGL_GL_EXT_framebuffer_object
+{
+  GdkGLProc_glIsRenderbufferEXT glIsRenderbufferEXT;
+  GdkGLProc_glBindRenderbufferEXT glBindRenderbufferEXT;
+  GdkGLProc_glDeleteRenderbuffersEXT glDeleteRenderbuffersEXT;
+  GdkGLProc_glGenRenderbuffersEXT glGenRenderbuffersEXT;
+  GdkGLProc_glRenderbufferStorageEXT glRenderbufferStorageEXT;
+  GdkGLProc_glGetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT;
+  GdkGLProc_glIsFramebufferEXT glIsFramebufferEXT;
+  GdkGLProc_glBindFramebufferEXT glBindFramebufferEXT;
+  GdkGLProc_glDeleteFramebuffersEXT glDeleteFramebuffersEXT;
+  GdkGLProc_glGenFramebuffersEXT glGenFramebuffersEXT;
+  GdkGLProc_glCheckFramebufferStatusEXT glCheckFramebufferStatusEXT;
+  GdkGLProc_glFramebufferTexture1DEXT glFramebufferTexture1DEXT;
+  GdkGLProc_glFramebufferTexture2DEXT glFramebufferTexture2DEXT;
+  GdkGLProc_glFramebufferTexture3DEXT glFramebufferTexture3DEXT;
+  GdkGLProc_glFramebufferRenderbufferEXT glFramebufferRenderbufferEXT;
+  GdkGLProc_glGetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT;
+  GdkGLProc_glGenerateMipmapEXT glGenerateMipmapEXT;
 };
 
-GdkGL_GL_ATI_vertex_streams *gdk_gl_get_GL_ATI_vertex_streams (void);
+GdkGL_GL_EXT_framebuffer_object *gdk_gl_get_GL_EXT_framebuffer_object (void);
 
 /*
- * GL_ATI_element_array
+ * GL_GREMEDY_string_marker
  */
 
-/* glElementPointerATI */
-typedef void (APIENTRY * GdkGLProc_glElementPointerATI) (GLenum type, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glElementPointerATI (void);
-#define      gdk_gl_glElementPointerATI(proc, type, pointer) \
-  ( ((GdkGLProc_glElementPointerATI) (proc)) (type, pointer) )
+/* glStringMarkerGREMEDY */
+typedef void (APIENTRYP GdkGLProc_glStringMarkerGREMEDY) (GLsizei len, const GLvoid *string);
+GdkGLProc    gdk_gl_get_glStringMarkerGREMEDY (void);
+#define      gdk_gl_glStringMarkerGREMEDY(proc, len, string) \
+  ( ((GdkGLProc_glStringMarkerGREMEDY) (proc)) (len, string) )
 
-/* glDrawElementArrayATI */
-typedef void (APIENTRY * GdkGLProc_glDrawElementArrayATI) (GLenum mode, GLsizei count);
-GdkGLProc    gdk_gl_get_glDrawElementArrayATI (void);
-#define      gdk_gl_glDrawElementArrayATI(proc, mode, count) \
-  ( ((GdkGLProc_glDrawElementArrayATI) (proc)) (mode, count) )
+/* proc struct */
 
-/* glDrawRangeElementArrayATI */
-typedef void (APIENTRY * GdkGLProc_glDrawRangeElementArrayATI) (GLenum mode, GLuint start, GLuint end, GLsizei count);
-GdkGLProc    gdk_gl_get_glDrawRangeElementArrayATI (void);
-#define      gdk_gl_glDrawRangeElementArrayATI(proc, mode, start, end, count) \
-  ( ((GdkGLProc_glDrawRangeElementArrayATI) (proc)) (mode, start, end, count) )
+typedef struct _GdkGL_GL_GREMEDY_string_marker GdkGL_GL_GREMEDY_string_marker;
+
+struct _GdkGL_GL_GREMEDY_string_marker
+{
+  GdkGLProc_glStringMarkerGREMEDY glStringMarkerGREMEDY;
+};
+
+GdkGL_GL_GREMEDY_string_marker *gdk_gl_get_GL_GREMEDY_string_marker (void);
+
+/*
+ * GL_EXT_stencil_clear_tag
+ */
+
+/* glStencilClearTagEXT */
+typedef void (APIENTRYP GdkGLProc_glStencilClearTagEXT) (GLsizei stencilTagBits, GLuint stencilClearTag);
+GdkGLProc    gdk_gl_get_glStencilClearTagEXT (void);
+#define      gdk_gl_glStencilClearTagEXT(proc, stencilTagBits, stencilClearTag) \
+  ( ((GdkGLProc_glStencilClearTagEXT) (proc)) (stencilTagBits, stencilClearTag) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_element_array GdkGL_GL_ATI_element_array;
+typedef struct _GdkGL_GL_EXT_stencil_clear_tag GdkGL_GL_EXT_stencil_clear_tag;
 
-struct _GdkGL_GL_ATI_element_array
+struct _GdkGL_GL_EXT_stencil_clear_tag
 {
-  GdkGLProc_glElementPointerATI glElementPointerATI;
-  GdkGLProc_glDrawElementArrayATI glDrawElementArrayATI;
-  GdkGLProc_glDrawRangeElementArrayATI glDrawRangeElementArrayATI;
+  GdkGLProc_glStencilClearTagEXT glStencilClearTagEXT;
 };
 
-GdkGL_GL_ATI_element_array *gdk_gl_get_GL_ATI_element_array (void);
+GdkGL_GL_EXT_stencil_clear_tag *gdk_gl_get_GL_EXT_stencil_clear_tag (void);
 
 /*
- * GL_SUN_mesh_array
+ * GL_EXT_framebuffer_blit
  */
 
-/* glDrawMeshArraysSUN */
-typedef void (APIENTRY * GdkGLProc_glDrawMeshArraysSUN) (GLenum mode, GLint first, GLsizei count, GLsizei width);
-GdkGLProc    gdk_gl_get_glDrawMeshArraysSUN (void);
-#define      gdk_gl_glDrawMeshArraysSUN(proc, mode, first, count, width) \
-  ( ((GdkGLProc_glDrawMeshArraysSUN) (proc)) (mode, first, count, width) )
+/* glBlitFramebufferEXT */
+typedef void (APIENTRYP GdkGLProc_glBlitFramebufferEXT) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+GdkGLProc    gdk_gl_get_glBlitFramebufferEXT (void);
+#define      gdk_gl_glBlitFramebufferEXT(proc, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) \
+  ( ((GdkGLProc_glBlitFramebufferEXT) (proc)) (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_SUN_mesh_array GdkGL_GL_SUN_mesh_array;
+typedef struct _GdkGL_GL_EXT_framebuffer_blit GdkGL_GL_EXT_framebuffer_blit;
 
-struct _GdkGL_GL_SUN_mesh_array
+struct _GdkGL_GL_EXT_framebuffer_blit
 {
-  GdkGLProc_glDrawMeshArraysSUN glDrawMeshArraysSUN;
+  GdkGLProc_glBlitFramebufferEXT glBlitFramebufferEXT;
 };
 
-GdkGL_GL_SUN_mesh_array *gdk_gl_get_GL_SUN_mesh_array (void);
+GdkGL_GL_EXT_framebuffer_blit *gdk_gl_get_GL_EXT_framebuffer_blit (void);
 
 /*
- * GL_NV_occlusion_query
+ * GL_EXT_framebuffer_multisample
  */
 
-/* glGenOcclusionQueriesNV */
-typedef void (APIENTRY * GdkGLProc_glGenOcclusionQueriesNV) (GLsizei n, GLuint *ids);
-GdkGLProc    gdk_gl_get_glGenOcclusionQueriesNV (void);
-#define      gdk_gl_glGenOcclusionQueriesNV(proc, n, ids) \
-  ( ((GdkGLProc_glGenOcclusionQueriesNV) (proc)) (n, ids) )
+/* glRenderbufferStorageMultisampleEXT */
+typedef void (APIENTRYP GdkGLProc_glRenderbufferStorageMultisampleEXT) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glRenderbufferStorageMultisampleEXT (void);
+#define      gdk_gl_glRenderbufferStorageMultisampleEXT(proc, target, samples, internalformat, width, height) \
+  ( ((GdkGLProc_glRenderbufferStorageMultisampleEXT) (proc)) (target, samples, internalformat, width, height) )
 
-/* glDeleteOcclusionQueriesNV */
-typedef void (APIENTRY * GdkGLProc_glDeleteOcclusionQueriesNV) (GLsizei n, const GLuint *ids);
-GdkGLProc    gdk_gl_get_glDeleteOcclusionQueriesNV (void);
-#define      gdk_gl_glDeleteOcclusionQueriesNV(proc, n, ids) \
-  ( ((GdkGLProc_glDeleteOcclusionQueriesNV) (proc)) (n, ids) )
+/* proc struct */
 
-/* glIsOcclusionQueryNV */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsOcclusionQueryNV) (GLuint id);
-GdkGLProc    gdk_gl_get_glIsOcclusionQueryNV (void);
-#define      gdk_gl_glIsOcclusionQueryNV(proc, id) \
-  ( ((GdkGLProc_glIsOcclusionQueryNV) (proc)) (id) )
+typedef struct _GdkGL_GL_EXT_framebuffer_multisample GdkGL_GL_EXT_framebuffer_multisample;
 
-/* glBeginOcclusionQueryNV */
-typedef void (APIENTRY * GdkGLProc_glBeginOcclusionQueryNV) (GLuint id);
-GdkGLProc    gdk_gl_get_glBeginOcclusionQueryNV (void);
-#define      gdk_gl_glBeginOcclusionQueryNV(proc, id) \
-  ( ((GdkGLProc_glBeginOcclusionQueryNV) (proc)) (id) )
+struct _GdkGL_GL_EXT_framebuffer_multisample
+{
+  GdkGLProc_glRenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT;
+};
 
-/* glEndOcclusionQueryNV */
-typedef void (APIENTRY * GdkGLProc_glEndOcclusionQueryNV) (void);
-GdkGLProc    gdk_gl_get_glEndOcclusionQueryNV (void);
-#define      gdk_gl_glEndOcclusionQueryNV(proc) \
-  ( ((GdkGLProc_glEndOcclusionQueryNV) (proc)) () )
+GdkGL_GL_EXT_framebuffer_multisample *gdk_gl_get_GL_EXT_framebuffer_multisample (void);
 
-/* glGetOcclusionQueryivNV */
-typedef void (APIENTRY * GdkGLProc_glGetOcclusionQueryivNV) (GLuint id, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetOcclusionQueryivNV (void);
-#define      gdk_gl_glGetOcclusionQueryivNV(proc, id, pname, params) \
-  ( ((GdkGLProc_glGetOcclusionQueryivNV) (proc)) (id, pname, params) )
+/*
+ * GL_EXT_timer_query
+ */
 
-/* glGetOcclusionQueryuivNV */
-typedef void (APIENTRY * GdkGLProc_glGetOcclusionQueryuivNV) (GLuint id, GLenum pname, GLuint *params);
-GdkGLProc    gdk_gl_get_glGetOcclusionQueryuivNV (void);
-#define      gdk_gl_glGetOcclusionQueryuivNV(proc, id, pname, params) \
-  ( ((GdkGLProc_glGetOcclusionQueryuivNV) (proc)) (id, pname, params) )
+/* glGetQueryObjecti64vEXT */
+typedef void (APIENTRYP GdkGLProc_glGetQueryObjecti64vEXT) (GLuint id, GLenum pname, GLint64EXT *params);
+GdkGLProc    gdk_gl_get_glGetQueryObjecti64vEXT (void);
+#define      gdk_gl_glGetQueryObjecti64vEXT(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetQueryObjecti64vEXT) (proc)) (id, pname, params) )
+
+/* glGetQueryObjectui64vEXT */
+typedef void (APIENTRYP GdkGLProc_glGetQueryObjectui64vEXT) (GLuint id, GLenum pname, GLuint64EXT *params);
+GdkGLProc    gdk_gl_get_glGetQueryObjectui64vEXT (void);
+#define      gdk_gl_glGetQueryObjectui64vEXT(proc, id, pname, params) \
+  ( ((GdkGLProc_glGetQueryObjectui64vEXT) (proc)) (id, pname, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_occlusion_query GdkGL_GL_NV_occlusion_query;
+typedef struct _GdkGL_GL_EXT_timer_query GdkGL_GL_EXT_timer_query;
 
-struct _GdkGL_GL_NV_occlusion_query
+struct _GdkGL_GL_EXT_timer_query
 {
-  GdkGLProc_glGenOcclusionQueriesNV glGenOcclusionQueriesNV;
-  GdkGLProc_glDeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV;
-  GdkGLProc_glIsOcclusionQueryNV glIsOcclusionQueryNV;
-  GdkGLProc_glBeginOcclusionQueryNV glBeginOcclusionQueryNV;
-  GdkGLProc_glEndOcclusionQueryNV glEndOcclusionQueryNV;
-  GdkGLProc_glGetOcclusionQueryivNV glGetOcclusionQueryivNV;
-  GdkGLProc_glGetOcclusionQueryuivNV glGetOcclusionQueryuivNV;
+  GdkGLProc_glGetQueryObjecti64vEXT glGetQueryObjecti64vEXT;
+  GdkGLProc_glGetQueryObjectui64vEXT glGetQueryObjectui64vEXT;
 };
 
-GdkGL_GL_NV_occlusion_query *gdk_gl_get_GL_NV_occlusion_query (void);
+GdkGL_GL_EXT_timer_query *gdk_gl_get_GL_EXT_timer_query (void);
 
 /*
- * GL_NV_point_sprite
+ * GL_EXT_gpu_program_parameters
  */
 
-/* glPointParameteriNV */
-typedef void (APIENTRY * GdkGLProc_glPointParameteriNV) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glPointParameteriNV (void);
-#define      gdk_gl_glPointParameteriNV(proc, pname, param) \
-  ( ((GdkGLProc_glPointParameteriNV) (proc)) (pname, param) )
+/* glProgramEnvParameters4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameters4fvEXT) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glProgramEnvParameters4fvEXT (void);
+#define      gdk_gl_glProgramEnvParameters4fvEXT(proc, target, index, count, params) \
+  ( ((GdkGLProc_glProgramEnvParameters4fvEXT) (proc)) (target, index, count, params) )
 
-/* glPointParameterivNV */
-typedef void (APIENTRY * GdkGLProc_glPointParameterivNV) (GLenum pname, const GLint *params);
-GdkGLProc    gdk_gl_get_glPointParameterivNV (void);
-#define      gdk_gl_glPointParameterivNV(proc, pname, params) \
-  ( ((GdkGLProc_glPointParameterivNV) (proc)) (pname, params) )
+/* glProgramLocalParameters4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameters4fvEXT) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glProgramLocalParameters4fvEXT (void);
+#define      gdk_gl_glProgramLocalParameters4fvEXT(proc, target, index, count, params) \
+  ( ((GdkGLProc_glProgramLocalParameters4fvEXT) (proc)) (target, index, count, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_point_sprite GdkGL_GL_NV_point_sprite;
+typedef struct _GdkGL_GL_EXT_gpu_program_parameters GdkGL_GL_EXT_gpu_program_parameters;
 
-struct _GdkGL_GL_NV_point_sprite
+struct _GdkGL_GL_EXT_gpu_program_parameters
 {
-  GdkGLProc_glPointParameteriNV glPointParameteriNV;
-  GdkGLProc_glPointParameterivNV glPointParameterivNV;
+  GdkGLProc_glProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT;
+  GdkGLProc_glProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT;
 };
 
-GdkGL_GL_NV_point_sprite *gdk_gl_get_GL_NV_point_sprite (void);
+GdkGL_GL_EXT_gpu_program_parameters *gdk_gl_get_GL_EXT_gpu_program_parameters (void);
 
 /*
- * GL_EXT_stencil_two_side
+ * GL_APPLE_flush_buffer_range
  */
 
-/* glActiveStencilFaceEXT */
-typedef void (APIENTRY * GdkGLProc_glActiveStencilFaceEXT) (GLenum face);
-GdkGLProc    gdk_gl_get_glActiveStencilFaceEXT (void);
-#define      gdk_gl_glActiveStencilFaceEXT(proc, face) \
-  ( ((GdkGLProc_glActiveStencilFaceEXT) (proc)) (face) )
+/* glBufferParameteriAPPLE */
+typedef void (APIENTRYP GdkGLProc_glBufferParameteriAPPLE) (GLenum target, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glBufferParameteriAPPLE (void);
+#define      gdk_gl_glBufferParameteriAPPLE(proc, target, pname, param) \
+  ( ((GdkGLProc_glBufferParameteriAPPLE) (proc)) (target, pname, param) )
+
+/* glFlushMappedBufferRangeAPPLE */
+typedef void (APIENTRYP GdkGLProc_glFlushMappedBufferRangeAPPLE) (GLenum target, GLintptr offset, GLsizeiptr size);
+GdkGLProc    gdk_gl_get_glFlushMappedBufferRangeAPPLE (void);
+#define      gdk_gl_glFlushMappedBufferRangeAPPLE(proc, target, offset, size) \
+  ( ((GdkGLProc_glFlushMappedBufferRangeAPPLE) (proc)) (target, offset, size) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_EXT_stencil_two_side GdkGL_GL_EXT_stencil_two_side;
+typedef struct _GdkGL_GL_APPLE_flush_buffer_range GdkGL_GL_APPLE_flush_buffer_range;
 
-struct _GdkGL_GL_EXT_stencil_two_side
+struct _GdkGL_GL_APPLE_flush_buffer_range
 {
-  GdkGLProc_glActiveStencilFaceEXT glActiveStencilFaceEXT;
+  GdkGLProc_glBufferParameteriAPPLE glBufferParameteriAPPLE;
+  GdkGLProc_glFlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE;
 };
 
-GdkGL_GL_EXT_stencil_two_side *gdk_gl_get_GL_EXT_stencil_two_side (void);
+GdkGL_GL_APPLE_flush_buffer_range *gdk_gl_get_GL_APPLE_flush_buffer_range (void);
 
 /*
- * GL_APPLE_element_array
+ * GL_NV_gpu_program4
  */
 
-/* glElementPointerAPPLE */
-typedef void (APIENTRY * GdkGLProc_glElementPointerAPPLE) (GLenum type, const GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glElementPointerAPPLE (void);
-#define      gdk_gl_glElementPointerAPPLE(proc, type, pointer) \
-  ( ((GdkGLProc_glElementPointerAPPLE) (proc)) (type, pointer) )
+/* glProgramLocalParameterI4iNV */
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameterI4iNV) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+GdkGLProc    gdk_gl_get_glProgramLocalParameterI4iNV (void);
+#define      gdk_gl_glProgramLocalParameterI4iNV(proc, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glProgramLocalParameterI4iNV) (proc)) (target, index, x, y, z, w) )
+
+/* glProgramLocalParameterI4ivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameterI4ivNV) (GLenum target, GLuint index, const GLint *params);
+GdkGLProc    gdk_gl_get_glProgramLocalParameterI4ivNV (void);
+#define      gdk_gl_glProgramLocalParameterI4ivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glProgramLocalParameterI4ivNV) (proc)) (target, index, params) )
+
+/* glProgramLocalParametersI4ivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParametersI4ivNV) (GLenum target, GLuint index, GLsizei count, const GLint *params);
+GdkGLProc    gdk_gl_get_glProgramLocalParametersI4ivNV (void);
+#define      gdk_gl_glProgramLocalParametersI4ivNV(proc, target, index, count, params) \
+  ( ((GdkGLProc_glProgramLocalParametersI4ivNV) (proc)) (target, index, count, params) )
+
+/* glProgramLocalParameterI4uiNV */
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameterI4uiNV) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+GdkGLProc    gdk_gl_get_glProgramLocalParameterI4uiNV (void);
+#define      gdk_gl_glProgramLocalParameterI4uiNV(proc, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glProgramLocalParameterI4uiNV) (proc)) (target, index, x, y, z, w) )
+
+/* glProgramLocalParameterI4uivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParameterI4uivNV) (GLenum target, GLuint index, const GLuint *params);
+GdkGLProc    gdk_gl_get_glProgramLocalParameterI4uivNV (void);
+#define      gdk_gl_glProgramLocalParameterI4uivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glProgramLocalParameterI4uivNV) (proc)) (target, index, params) )
+
+/* glProgramLocalParametersI4uivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramLocalParametersI4uivNV) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
+GdkGLProc    gdk_gl_get_glProgramLocalParametersI4uivNV (void);
+#define      gdk_gl_glProgramLocalParametersI4uivNV(proc, target, index, count, params) \
+  ( ((GdkGLProc_glProgramLocalParametersI4uivNV) (proc)) (target, index, count, params) )
+
+/* glProgramEnvParameterI4iNV */
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameterI4iNV) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+GdkGLProc    gdk_gl_get_glProgramEnvParameterI4iNV (void);
+#define      gdk_gl_glProgramEnvParameterI4iNV(proc, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glProgramEnvParameterI4iNV) (proc)) (target, index, x, y, z, w) )
+
+/* glProgramEnvParameterI4ivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameterI4ivNV) (GLenum target, GLuint index, const GLint *params);
+GdkGLProc    gdk_gl_get_glProgramEnvParameterI4ivNV (void);
+#define      gdk_gl_glProgramEnvParameterI4ivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glProgramEnvParameterI4ivNV) (proc)) (target, index, params) )
+
+/* glProgramEnvParametersI4ivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParametersI4ivNV) (GLenum target, GLuint index, GLsizei count, const GLint *params);
+GdkGLProc    gdk_gl_get_glProgramEnvParametersI4ivNV (void);
+#define      gdk_gl_glProgramEnvParametersI4ivNV(proc, target, index, count, params) \
+  ( ((GdkGLProc_glProgramEnvParametersI4ivNV) (proc)) (target, index, count, params) )
+
+/* glProgramEnvParameterI4uiNV */
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameterI4uiNV) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+GdkGLProc    gdk_gl_get_glProgramEnvParameterI4uiNV (void);
+#define      gdk_gl_glProgramEnvParameterI4uiNV(proc, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glProgramEnvParameterI4uiNV) (proc)) (target, index, x, y, z, w) )
+
+/* glProgramEnvParameterI4uivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParameterI4uivNV) (GLenum target, GLuint index, const GLuint *params);
+GdkGLProc    gdk_gl_get_glProgramEnvParameterI4uivNV (void);
+#define      gdk_gl_glProgramEnvParameterI4uivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glProgramEnvParameterI4uivNV) (proc)) (target, index, params) )
+
+/* glProgramEnvParametersI4uivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramEnvParametersI4uivNV) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
+GdkGLProc    gdk_gl_get_glProgramEnvParametersI4uivNV (void);
+#define      gdk_gl_glProgramEnvParametersI4uivNV(proc, target, index, count, params) \
+  ( ((GdkGLProc_glProgramEnvParametersI4uivNV) (proc)) (target, index, count, params) )
+
+/* glGetProgramLocalParameterIivNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramLocalParameterIivNV) (GLenum target, GLuint index, GLint *params);
+GdkGLProc    gdk_gl_get_glGetProgramLocalParameterIivNV (void);
+#define      gdk_gl_glGetProgramLocalParameterIivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glGetProgramLocalParameterIivNV) (proc)) (target, index, params) )
+
+/* glGetProgramLocalParameterIuivNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramLocalParameterIuivNV) (GLenum target, GLuint index, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetProgramLocalParameterIuivNV (void);
+#define      gdk_gl_glGetProgramLocalParameterIuivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glGetProgramLocalParameterIuivNV) (proc)) (target, index, params) )
+
+/* glGetProgramEnvParameterIivNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramEnvParameterIivNV) (GLenum target, GLuint index, GLint *params);
+GdkGLProc    gdk_gl_get_glGetProgramEnvParameterIivNV (void);
+#define      gdk_gl_glGetProgramEnvParameterIivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glGetProgramEnvParameterIivNV) (proc)) (target, index, params) )
+
+/* glGetProgramEnvParameterIuivNV */
+typedef void (APIENTRYP GdkGLProc_glGetProgramEnvParameterIuivNV) (GLenum target, GLuint index, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetProgramEnvParameterIuivNV (void);
+#define      gdk_gl_glGetProgramEnvParameterIuivNV(proc, target, index, params) \
+  ( ((GdkGLProc_glGetProgramEnvParameterIuivNV) (proc)) (target, index, params) )
 
-/* glDrawElementArrayAPPLE */
-typedef void (APIENTRY * GdkGLProc_glDrawElementArrayAPPLE) (GLenum mode, GLint first, GLsizei count);
-GdkGLProc    gdk_gl_get_glDrawElementArrayAPPLE (void);
-#define      gdk_gl_glDrawElementArrayAPPLE(proc, mode, first, count) \
-  ( ((GdkGLProc_glDrawElementArrayAPPLE) (proc)) (mode, first, count) )
+/* proc struct */
 
-/* glDrawRangeElementArrayAPPLE */
-typedef void (APIENTRY * GdkGLProc_glDrawRangeElementArrayAPPLE) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
-GdkGLProc    gdk_gl_get_glDrawRangeElementArrayAPPLE (void);
-#define      gdk_gl_glDrawRangeElementArrayAPPLE(proc, mode, start, end, first, count) \
-  ( ((GdkGLProc_glDrawRangeElementArrayAPPLE) (proc)) (mode, start, end, first, count) )
+typedef struct _GdkGL_GL_NV_gpu_program4 GdkGL_GL_NV_gpu_program4;
 
-/* glMultiDrawElementArrayAPPLE */
-typedef void (APIENTRY * GdkGLProc_glMultiDrawElementArrayAPPLE) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
-GdkGLProc    gdk_gl_get_glMultiDrawElementArrayAPPLE (void);
-#define      gdk_gl_glMultiDrawElementArrayAPPLE(proc, mode, first, count, primcount) \
-  ( ((GdkGLProc_glMultiDrawElementArrayAPPLE) (proc)) (mode, first, count, primcount) )
+struct _GdkGL_GL_NV_gpu_program4
+{
+  GdkGLProc_glProgramLocalParameterI4iNV glProgramLocalParameterI4iNV;
+  GdkGLProc_glProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV;
+  GdkGLProc_glProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV;
+  GdkGLProc_glProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV;
+  GdkGLProc_glProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV;
+  GdkGLProc_glProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV;
+  GdkGLProc_glProgramEnvParameterI4iNV glProgramEnvParameterI4iNV;
+  GdkGLProc_glProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV;
+  GdkGLProc_glProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV;
+  GdkGLProc_glProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV;
+  GdkGLProc_glProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV;
+  GdkGLProc_glProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV;
+  GdkGLProc_glGetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV;
+  GdkGLProc_glGetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV;
+  GdkGLProc_glGetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV;
+  GdkGLProc_glGetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV;
+};
 
-/* glMultiDrawRangeElementArrayAPPLE */
-typedef void (APIENTRY * GdkGLProc_glMultiDrawRangeElementArrayAPPLE) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
-GdkGLProc    gdk_gl_get_glMultiDrawRangeElementArrayAPPLE (void);
-#define      gdk_gl_glMultiDrawRangeElementArrayAPPLE(proc, mode, start, end, first, count, primcount) \
-  ( ((GdkGLProc_glMultiDrawRangeElementArrayAPPLE) (proc)) (mode, start, end, first, count, primcount) )
+GdkGL_GL_NV_gpu_program4 *gdk_gl_get_GL_NV_gpu_program4 (void);
+
+/*
+ * GL_NV_geometry_program4
+ */
+
+/* glProgramVertexLimitNV */
+typedef void (APIENTRYP GdkGLProc_glProgramVertexLimitNV) (GLenum target, GLint limit);
+GdkGLProc    gdk_gl_get_glProgramVertexLimitNV (void);
+#define      gdk_gl_glProgramVertexLimitNV(proc, target, limit) \
+  ( ((GdkGLProc_glProgramVertexLimitNV) (proc)) (target, limit) )
+
+/* glFramebufferTextureEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureEXT) (GLenum target, GLenum attachment, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glFramebufferTextureEXT (void);
+#define      gdk_gl_glFramebufferTextureEXT(proc, target, attachment, texture, level) \
+  ( ((GdkGLProc_glFramebufferTextureEXT) (proc)) (target, attachment, texture, level) )
+
+/* glFramebufferTextureLayerEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureLayerEXT) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+GdkGLProc    gdk_gl_get_glFramebufferTextureLayerEXT (void);
+#define      gdk_gl_glFramebufferTextureLayerEXT(proc, target, attachment, texture, level, layer) \
+  ( ((GdkGLProc_glFramebufferTextureLayerEXT) (proc)) (target, attachment, texture, level, layer) )
+
+/* glFramebufferTextureFaceEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferTextureFaceEXT) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+GdkGLProc    gdk_gl_get_glFramebufferTextureFaceEXT (void);
+#define      gdk_gl_glFramebufferTextureFaceEXT(proc, target, attachment, texture, level, face) \
+  ( ((GdkGLProc_glFramebufferTextureFaceEXT) (proc)) (target, attachment, texture, level, face) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_APPLE_element_array GdkGL_GL_APPLE_element_array;
+typedef struct _GdkGL_GL_NV_geometry_program4 GdkGL_GL_NV_geometry_program4;
 
-struct _GdkGL_GL_APPLE_element_array
+struct _GdkGL_GL_NV_geometry_program4
 {
-  GdkGLProc_glElementPointerAPPLE glElementPointerAPPLE;
-  GdkGLProc_glDrawElementArrayAPPLE glDrawElementArrayAPPLE;
-  GdkGLProc_glDrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE;
-  GdkGLProc_glMultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE;
-  GdkGLProc_glMultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE;
+  GdkGLProc_glProgramVertexLimitNV glProgramVertexLimitNV;
+  GdkGLProc_glFramebufferTextureEXT glFramebufferTextureEXT;
+  GdkGLProc_glFramebufferTextureLayerEXT glFramebufferTextureLayerEXT;
+  GdkGLProc_glFramebufferTextureFaceEXT glFramebufferTextureFaceEXT;
 };
 
-GdkGL_GL_APPLE_element_array *gdk_gl_get_GL_APPLE_element_array (void);
+GdkGL_GL_NV_geometry_program4 *gdk_gl_get_GL_NV_geometry_program4 (void);
 
 /*
- * GL_APPLE_fence
+ * GL_EXT_geometry_shader4
  */
 
-/* glGenFencesAPPLE */
-typedef void (APIENTRY * GdkGLProc_glGenFencesAPPLE) (GLsizei n, GLuint *fences);
-GdkGLProc    gdk_gl_get_glGenFencesAPPLE (void);
-#define      gdk_gl_glGenFencesAPPLE(proc, n, fences) \
-  ( ((GdkGLProc_glGenFencesAPPLE) (proc)) (n, fences) )
+/* glProgramParameteriEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramParameteriEXT) (GLuint program, GLenum pname, GLint value);
+GdkGLProc    gdk_gl_get_glProgramParameteriEXT (void);
+#define      gdk_gl_glProgramParameteriEXT(proc, program, pname, value) \
+  ( ((GdkGLProc_glProgramParameteriEXT) (proc)) (program, pname, value) )
 
-/* glDeleteFencesAPPLE */
-typedef void (APIENTRY * GdkGLProc_glDeleteFencesAPPLE) (GLsizei n, const GLuint *fences);
-GdkGLProc    gdk_gl_get_glDeleteFencesAPPLE (void);
-#define      gdk_gl_glDeleteFencesAPPLE(proc, n, fences) \
-  ( ((GdkGLProc_glDeleteFencesAPPLE) (proc)) (n, fences) )
+/* proc struct */
 
-/* glSetFenceAPPLE */
-typedef void (APIENTRY * GdkGLProc_glSetFenceAPPLE) (GLuint fence);
-GdkGLProc    gdk_gl_get_glSetFenceAPPLE (void);
-#define      gdk_gl_glSetFenceAPPLE(proc, fence) \
-  ( ((GdkGLProc_glSetFenceAPPLE) (proc)) (fence) )
+typedef struct _GdkGL_GL_EXT_geometry_shader4 GdkGL_GL_EXT_geometry_shader4;
 
-/* glIsFenceAPPLE */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsFenceAPPLE) (GLuint fence);
-GdkGLProc    gdk_gl_get_glIsFenceAPPLE (void);
-#define      gdk_gl_glIsFenceAPPLE(proc, fence) \
-  ( ((GdkGLProc_glIsFenceAPPLE) (proc)) (fence) )
+struct _GdkGL_GL_EXT_geometry_shader4
+{
+  GdkGLProc_glProgramParameteriEXT glProgramParameteriEXT;
+};
 
-/* glTestFenceAPPLE */
-typedef GLboolean (APIENTRY * GdkGLProc_glTestFenceAPPLE) (GLuint fence);
-GdkGLProc    gdk_gl_get_glTestFenceAPPLE (void);
-#define      gdk_gl_glTestFenceAPPLE(proc, fence) \
-  ( ((GdkGLProc_glTestFenceAPPLE) (proc)) (fence) )
+GdkGL_GL_EXT_geometry_shader4 *gdk_gl_get_GL_EXT_geometry_shader4 (void);
 
-/* glFinishFenceAPPLE */
-typedef void (APIENTRY * GdkGLProc_glFinishFenceAPPLE) (GLuint fence);
-GdkGLProc    gdk_gl_get_glFinishFenceAPPLE (void);
-#define      gdk_gl_glFinishFenceAPPLE(proc, fence) \
-  ( ((GdkGLProc_glFinishFenceAPPLE) (proc)) (fence) )
+/*
+ * GL_NV_vertex_program4
+ */
 
-/* glTestObjectAPPLE */
-typedef GLboolean (APIENTRY * GdkGLProc_glTestObjectAPPLE) (GLenum object, GLuint name);
-GdkGLProc    gdk_gl_get_glTestObjectAPPLE (void);
-#define      gdk_gl_glTestObjectAPPLE(proc, object, name) \
-  ( ((GdkGLProc_glTestObjectAPPLE) (proc)) (object, name) )
+/* glVertexAttribI1iEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1iEXT) (GLuint index, GLint x);
+GdkGLProc    gdk_gl_get_glVertexAttribI1iEXT (void);
+#define      gdk_gl_glVertexAttribI1iEXT(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttribI1iEXT) (proc)) (index, x) )
+
+/* glVertexAttribI2iEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2iEXT) (GLuint index, GLint x, GLint y);
+GdkGLProc    gdk_gl_get_glVertexAttribI2iEXT (void);
+#define      gdk_gl_glVertexAttribI2iEXT(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttribI2iEXT) (proc)) (index, x, y) )
+
+/* glVertexAttribI3iEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3iEXT) (GLuint index, GLint x, GLint y, GLint z);
+GdkGLProc    gdk_gl_get_glVertexAttribI3iEXT (void);
+#define      gdk_gl_glVertexAttribI3iEXT(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttribI3iEXT) (proc)) (index, x, y, z) )
+
+/* glVertexAttribI4iEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4iEXT) (GLuint index, GLint x, GLint y, GLint z, GLint w);
+GdkGLProc    gdk_gl_get_glVertexAttribI4iEXT (void);
+#define      gdk_gl_glVertexAttribI4iEXT(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttribI4iEXT) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttribI1uiEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1uiEXT) (GLuint index, GLuint x);
+GdkGLProc    gdk_gl_get_glVertexAttribI1uiEXT (void);
+#define      gdk_gl_glVertexAttribI1uiEXT(proc, index, x) \
+  ( ((GdkGLProc_glVertexAttribI1uiEXT) (proc)) (index, x) )
+
+/* glVertexAttribI2uiEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2uiEXT) (GLuint index, GLuint x, GLuint y);
+GdkGLProc    gdk_gl_get_glVertexAttribI2uiEXT (void);
+#define      gdk_gl_glVertexAttribI2uiEXT(proc, index, x, y) \
+  ( ((GdkGLProc_glVertexAttribI2uiEXT) (proc)) (index, x, y) )
+
+/* glVertexAttribI3uiEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3uiEXT) (GLuint index, GLuint x, GLuint y, GLuint z);
+GdkGLProc    gdk_gl_get_glVertexAttribI3uiEXT (void);
+#define      gdk_gl_glVertexAttribI3uiEXT(proc, index, x, y, z) \
+  ( ((GdkGLProc_glVertexAttribI3uiEXT) (proc)) (index, x, y, z) )
+
+/* glVertexAttribI4uiEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4uiEXT) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+GdkGLProc    gdk_gl_get_glVertexAttribI4uiEXT (void);
+#define      gdk_gl_glVertexAttribI4uiEXT(proc, index, x, y, z, w) \
+  ( ((GdkGLProc_glVertexAttribI4uiEXT) (proc)) (index, x, y, z, w) )
+
+/* glVertexAttribI1ivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1ivEXT) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI1ivEXT (void);
+#define      gdk_gl_glVertexAttribI1ivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI1ivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI2ivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2ivEXT) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI2ivEXT (void);
+#define      gdk_gl_glVertexAttribI2ivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI2ivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI3ivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3ivEXT) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI3ivEXT (void);
+#define      gdk_gl_glVertexAttribI3ivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI3ivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI4ivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4ivEXT) (GLuint index, const GLint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4ivEXT (void);
+#define      gdk_gl_glVertexAttribI4ivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4ivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI1uivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI1uivEXT) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI1uivEXT (void);
+#define      gdk_gl_glVertexAttribI1uivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI1uivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI2uivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI2uivEXT) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI2uivEXT (void);
+#define      gdk_gl_glVertexAttribI2uivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI2uivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI3uivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI3uivEXT) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI3uivEXT (void);
+#define      gdk_gl_glVertexAttribI3uivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI3uivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI4uivEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4uivEXT) (GLuint index, const GLuint *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4uivEXT (void);
+#define      gdk_gl_glVertexAttribI4uivEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4uivEXT) (proc)) (index, v) )
+
+/* glVertexAttribI4bvEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4bvEXT) (GLuint index, const GLbyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4bvEXT (void);
+#define      gdk_gl_glVertexAttribI4bvEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4bvEXT) (proc)) (index, v) )
+
+/* glVertexAttribI4svEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4svEXT) (GLuint index, const GLshort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4svEXT (void);
+#define      gdk_gl_glVertexAttribI4svEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4svEXT) (proc)) (index, v) )
+
+/* glVertexAttribI4ubvEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4ubvEXT) (GLuint index, const GLubyte *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4ubvEXT (void);
+#define      gdk_gl_glVertexAttribI4ubvEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4ubvEXT) (proc)) (index, v) )
+
+/* glVertexAttribI4usvEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribI4usvEXT) (GLuint index, const GLushort *v);
+GdkGLProc    gdk_gl_get_glVertexAttribI4usvEXT (void);
+#define      gdk_gl_glVertexAttribI4usvEXT(proc, index, v) \
+  ( ((GdkGLProc_glVertexAttribI4usvEXT) (proc)) (index, v) )
+
+/* glVertexAttribIPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribIPointerEXT) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glVertexAttribIPointerEXT (void);
+#define      gdk_gl_glVertexAttribIPointerEXT(proc, index, size, type, stride, pointer) \
+  ( ((GdkGLProc_glVertexAttribIPointerEXT) (proc)) (index, size, type, stride, pointer) )
+
+/* glGetVertexAttribIivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribIivEXT) (GLuint index, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribIivEXT (void);
+#define      gdk_gl_glGetVertexAttribIivEXT(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribIivEXT) (proc)) (index, pname, params) )
+
+/* glGetVertexAttribIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetVertexAttribIuivEXT) (GLuint index, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetVertexAttribIuivEXT (void);
+#define      gdk_gl_glGetVertexAttribIuivEXT(proc, index, pname, params) \
+  ( ((GdkGLProc_glGetVertexAttribIuivEXT) (proc)) (index, pname, params) )
 
-/* glFinishObjectAPPLE */
-typedef void (APIENTRY * GdkGLProc_glFinishObjectAPPLE) (GLenum object, GLint name);
-GdkGLProc    gdk_gl_get_glFinishObjectAPPLE (void);
-#define      gdk_gl_glFinishObjectAPPLE(proc, object, name) \
-  ( ((GdkGLProc_glFinishObjectAPPLE) (proc)) (object, name) )
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_vertex_program4 GdkGL_GL_NV_vertex_program4;
+
+struct _GdkGL_GL_NV_vertex_program4
+{
+  GdkGLProc_glVertexAttribI1iEXT glVertexAttribI1iEXT;
+  GdkGLProc_glVertexAttribI2iEXT glVertexAttribI2iEXT;
+  GdkGLProc_glVertexAttribI3iEXT glVertexAttribI3iEXT;
+  GdkGLProc_glVertexAttribI4iEXT glVertexAttribI4iEXT;
+  GdkGLProc_glVertexAttribI1uiEXT glVertexAttribI1uiEXT;
+  GdkGLProc_glVertexAttribI2uiEXT glVertexAttribI2uiEXT;
+  GdkGLProc_glVertexAttribI3uiEXT glVertexAttribI3uiEXT;
+  GdkGLProc_glVertexAttribI4uiEXT glVertexAttribI4uiEXT;
+  GdkGLProc_glVertexAttribI1ivEXT glVertexAttribI1ivEXT;
+  GdkGLProc_glVertexAttribI2ivEXT glVertexAttribI2ivEXT;
+  GdkGLProc_glVertexAttribI3ivEXT glVertexAttribI3ivEXT;
+  GdkGLProc_glVertexAttribI4ivEXT glVertexAttribI4ivEXT;
+  GdkGLProc_glVertexAttribI1uivEXT glVertexAttribI1uivEXT;
+  GdkGLProc_glVertexAttribI2uivEXT glVertexAttribI2uivEXT;
+  GdkGLProc_glVertexAttribI3uivEXT glVertexAttribI3uivEXT;
+  GdkGLProc_glVertexAttribI4uivEXT glVertexAttribI4uivEXT;
+  GdkGLProc_glVertexAttribI4bvEXT glVertexAttribI4bvEXT;
+  GdkGLProc_glVertexAttribI4svEXT glVertexAttribI4svEXT;
+  GdkGLProc_glVertexAttribI4ubvEXT glVertexAttribI4ubvEXT;
+  GdkGLProc_glVertexAttribI4usvEXT glVertexAttribI4usvEXT;
+  GdkGLProc_glVertexAttribIPointerEXT glVertexAttribIPointerEXT;
+  GdkGLProc_glGetVertexAttribIivEXT glGetVertexAttribIivEXT;
+  GdkGLProc_glGetVertexAttribIuivEXT glGetVertexAttribIuivEXT;
+};
+
+GdkGL_GL_NV_vertex_program4 *gdk_gl_get_GL_NV_vertex_program4 (void);
+
+/*
+ * GL_EXT_gpu_shader4
+ */
+
+/* glGetUniformuivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetUniformuivEXT) (GLuint program, GLint location, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetUniformuivEXT (void);
+#define      gdk_gl_glGetUniformuivEXT(proc, program, location, params) \
+  ( ((GdkGLProc_glGetUniformuivEXT) (proc)) (program, location, params) )
+
+/* glBindFragDataLocationEXT */
+typedef void (APIENTRYP GdkGLProc_glBindFragDataLocationEXT) (GLuint program, GLuint color, const GLchar *name);
+GdkGLProc    gdk_gl_get_glBindFragDataLocationEXT (void);
+#define      gdk_gl_glBindFragDataLocationEXT(proc, program, color, name) \
+  ( ((GdkGLProc_glBindFragDataLocationEXT) (proc)) (program, color, name) )
+
+/* glGetFragDataLocationEXT */
+typedef GLint (APIENTRYP GdkGLProc_glGetFragDataLocationEXT) (GLuint program, const GLchar *name);
+GdkGLProc    gdk_gl_get_glGetFragDataLocationEXT (void);
+#define      gdk_gl_glGetFragDataLocationEXT(proc, program, name) \
+  ( ((GdkGLProc_glGetFragDataLocationEXT) (proc)) (program, name) )
+
+/* glUniform1uiEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform1uiEXT) (GLint location, GLuint v0);
+GdkGLProc    gdk_gl_get_glUniform1uiEXT (void);
+#define      gdk_gl_glUniform1uiEXT(proc, location, v0) \
+  ( ((GdkGLProc_glUniform1uiEXT) (proc)) (location, v0) )
+
+/* glUniform2uiEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform2uiEXT) (GLint location, GLuint v0, GLuint v1);
+GdkGLProc    gdk_gl_get_glUniform2uiEXT (void);
+#define      gdk_gl_glUniform2uiEXT(proc, location, v0, v1) \
+  ( ((GdkGLProc_glUniform2uiEXT) (proc)) (location, v0, v1) )
+
+/* glUniform3uiEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform3uiEXT) (GLint location, GLuint v0, GLuint v1, GLuint v2);
+GdkGLProc    gdk_gl_get_glUniform3uiEXT (void);
+#define      gdk_gl_glUniform3uiEXT(proc, location, v0, v1, v2) \
+  ( ((GdkGLProc_glUniform3uiEXT) (proc)) (location, v0, v1, v2) )
+
+/* glUniform4uiEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform4uiEXT) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+GdkGLProc    gdk_gl_get_glUniform4uiEXT (void);
+#define      gdk_gl_glUniform4uiEXT(proc, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glUniform4uiEXT) (proc)) (location, v0, v1, v2, v3) )
+
+/* glUniform1uivEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform1uivEXT) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform1uivEXT (void);
+#define      gdk_gl_glUniform1uivEXT(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform1uivEXT) (proc)) (location, count, value) )
+
+/* glUniform2uivEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform2uivEXT) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform2uivEXT (void);
+#define      gdk_gl_glUniform2uivEXT(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform2uivEXT) (proc)) (location, count, value) )
+
+/* glUniform3uivEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform3uivEXT) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform3uivEXT (void);
+#define      gdk_gl_glUniform3uivEXT(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform3uivEXT) (proc)) (location, count, value) )
+
+/* glUniform4uivEXT */
+typedef void (APIENTRYP GdkGLProc_glUniform4uivEXT) (GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glUniform4uivEXT (void);
+#define      gdk_gl_glUniform4uivEXT(proc, location, count, value) \
+  ( ((GdkGLProc_glUniform4uivEXT) (proc)) (location, count, value) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_APPLE_fence GdkGL_GL_APPLE_fence;
+typedef struct _GdkGL_GL_EXT_gpu_shader4 GdkGL_GL_EXT_gpu_shader4;
 
-struct _GdkGL_GL_APPLE_fence
+struct _GdkGL_GL_EXT_gpu_shader4
 {
-  GdkGLProc_glGenFencesAPPLE glGenFencesAPPLE;
-  GdkGLProc_glDeleteFencesAPPLE glDeleteFencesAPPLE;
-  GdkGLProc_glSetFenceAPPLE glSetFenceAPPLE;
-  GdkGLProc_glIsFenceAPPLE glIsFenceAPPLE;
-  GdkGLProc_glTestFenceAPPLE glTestFenceAPPLE;
-  GdkGLProc_glFinishFenceAPPLE glFinishFenceAPPLE;
-  GdkGLProc_glTestObjectAPPLE glTestObjectAPPLE;
-  GdkGLProc_glFinishObjectAPPLE glFinishObjectAPPLE;
+  GdkGLProc_glGetUniformuivEXT glGetUniformuivEXT;
+  GdkGLProc_glBindFragDataLocationEXT glBindFragDataLocationEXT;
+  GdkGLProc_glGetFragDataLocationEXT glGetFragDataLocationEXT;
+  GdkGLProc_glUniform1uiEXT glUniform1uiEXT;
+  GdkGLProc_glUniform2uiEXT glUniform2uiEXT;
+  GdkGLProc_glUniform3uiEXT glUniform3uiEXT;
+  GdkGLProc_glUniform4uiEXT glUniform4uiEXT;
+  GdkGLProc_glUniform1uivEXT glUniform1uivEXT;
+  GdkGLProc_glUniform2uivEXT glUniform2uivEXT;
+  GdkGLProc_glUniform3uivEXT glUniform3uivEXT;
+  GdkGLProc_glUniform4uivEXT glUniform4uivEXT;
 };
 
-GdkGL_GL_APPLE_fence *gdk_gl_get_GL_APPLE_fence (void);
+GdkGL_GL_EXT_gpu_shader4 *gdk_gl_get_GL_EXT_gpu_shader4 (void);
 
 /*
- * GL_APPLE_vertex_array_object
+ * GL_EXT_draw_instanced
  */
 
-/* glBindVertexArrayAPPLE */
-typedef void (APIENTRY * GdkGLProc_glBindVertexArrayAPPLE) (GLuint array);
-GdkGLProc    gdk_gl_get_glBindVertexArrayAPPLE (void);
-#define      gdk_gl_glBindVertexArrayAPPLE(proc, array) \
-  ( ((GdkGLProc_glBindVertexArrayAPPLE) (proc)) (array) )
+/* glDrawArraysInstancedEXT */
+typedef void (APIENTRYP GdkGLProc_glDrawArraysInstancedEXT) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glDrawArraysInstancedEXT (void);
+#define      gdk_gl_glDrawArraysInstancedEXT(proc, mode, start, count, primcount) \
+  ( ((GdkGLProc_glDrawArraysInstancedEXT) (proc)) (mode, start, count, primcount) )
 
-/* glDeleteVertexArraysAPPLE */
-typedef void (APIENTRY * GdkGLProc_glDeleteVertexArraysAPPLE) (GLsizei n, const GLuint *arrays);
-GdkGLProc    gdk_gl_get_glDeleteVertexArraysAPPLE (void);
-#define      gdk_gl_glDeleteVertexArraysAPPLE(proc, n, arrays) \
-  ( ((GdkGLProc_glDeleteVertexArraysAPPLE) (proc)) (n, arrays) )
+/* glDrawElementsInstancedEXT */
+typedef void (APIENTRYP GdkGLProc_glDrawElementsInstancedEXT) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+GdkGLProc    gdk_gl_get_glDrawElementsInstancedEXT (void);
+#define      gdk_gl_glDrawElementsInstancedEXT(proc, mode, count, type, indices, primcount) \
+  ( ((GdkGLProc_glDrawElementsInstancedEXT) (proc)) (mode, count, type, indices, primcount) )
 
-/* glGenVertexArraysAPPLE */
-typedef void (APIENTRY * GdkGLProc_glGenVertexArraysAPPLE) (GLsizei n, const GLuint *arrays);
-GdkGLProc    gdk_gl_get_glGenVertexArraysAPPLE (void);
-#define      gdk_gl_glGenVertexArraysAPPLE(proc, n, arrays) \
-  ( ((GdkGLProc_glGenVertexArraysAPPLE) (proc)) (n, arrays) )
+/* proc struct */
 
-/* glIsVertexArrayAPPLE */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsVertexArrayAPPLE) (GLuint array);
-GdkGLProc    gdk_gl_get_glIsVertexArrayAPPLE (void);
-#define      gdk_gl_glIsVertexArrayAPPLE(proc, array) \
-  ( ((GdkGLProc_glIsVertexArrayAPPLE) (proc)) (array) )
+typedef struct _GdkGL_GL_EXT_draw_instanced GdkGL_GL_EXT_draw_instanced;
+
+struct _GdkGL_GL_EXT_draw_instanced
+{
+  GdkGLProc_glDrawArraysInstancedEXT glDrawArraysInstancedEXT;
+  GdkGLProc_glDrawElementsInstancedEXT glDrawElementsInstancedEXT;
+};
+
+GdkGL_GL_EXT_draw_instanced *gdk_gl_get_GL_EXT_draw_instanced (void);
+
+/*
+ * GL_EXT_texture_buffer_object
+ */
+
+/* glTexBufferEXT */
+typedef void (APIENTRYP GdkGLProc_glTexBufferEXT) (GLenum target, GLenum internalformat, GLuint buffer);
+GdkGLProc    gdk_gl_get_glTexBufferEXT (void);
+#define      gdk_gl_glTexBufferEXT(proc, target, internalformat, buffer) \
+  ( ((GdkGLProc_glTexBufferEXT) (proc)) (target, internalformat, buffer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_APPLE_vertex_array_object GdkGL_GL_APPLE_vertex_array_object;
+typedef struct _GdkGL_GL_EXT_texture_buffer_object GdkGL_GL_EXT_texture_buffer_object;
 
-struct _GdkGL_GL_APPLE_vertex_array_object
+struct _GdkGL_GL_EXT_texture_buffer_object
 {
-  GdkGLProc_glBindVertexArrayAPPLE glBindVertexArrayAPPLE;
-  GdkGLProc_glDeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE;
-  GdkGLProc_glGenVertexArraysAPPLE glGenVertexArraysAPPLE;
-  GdkGLProc_glIsVertexArrayAPPLE glIsVertexArrayAPPLE;
+  GdkGLProc_glTexBufferEXT glTexBufferEXT;
 };
 
-GdkGL_GL_APPLE_vertex_array_object *gdk_gl_get_GL_APPLE_vertex_array_object (void);
+GdkGL_GL_EXT_texture_buffer_object *gdk_gl_get_GL_EXT_texture_buffer_object (void);
 
 /*
- * GL_APPLE_vertex_array_range
+ * GL_NV_depth_buffer_float
  */
 
-/* glVertexArrayRangeAPPLE */
-typedef void (APIENTRY * GdkGLProc_glVertexArrayRangeAPPLE) (GLsizei length, GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glVertexArrayRangeAPPLE (void);
-#define      gdk_gl_glVertexArrayRangeAPPLE(proc, length, pointer) \
-  ( ((GdkGLProc_glVertexArrayRangeAPPLE) (proc)) (length, pointer) )
+/* glDepthRangedNV */
+typedef void (APIENTRYP GdkGLProc_glDepthRangedNV) (GLdouble zNear, GLdouble zFar);
+GdkGLProc    gdk_gl_get_glDepthRangedNV (void);
+#define      gdk_gl_glDepthRangedNV(proc, zNear, zFar) \
+  ( ((GdkGLProc_glDepthRangedNV) (proc)) (zNear, zFar) )
 
-/* glFlushVertexArrayRangeAPPLE */
-typedef void (APIENTRY * GdkGLProc_glFlushVertexArrayRangeAPPLE) (GLsizei length, GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glFlushVertexArrayRangeAPPLE (void);
-#define      gdk_gl_glFlushVertexArrayRangeAPPLE(proc, length, pointer) \
-  ( ((GdkGLProc_glFlushVertexArrayRangeAPPLE) (proc)) (length, pointer) )
+/* glClearDepthdNV */
+typedef void (APIENTRYP GdkGLProc_glClearDepthdNV) (GLdouble depth);
+GdkGLProc    gdk_gl_get_glClearDepthdNV (void);
+#define      gdk_gl_glClearDepthdNV(proc, depth) \
+  ( ((GdkGLProc_glClearDepthdNV) (proc)) (depth) )
 
-/* glVertexArrayParameteriAPPLE */
-typedef void (APIENTRY * GdkGLProc_glVertexArrayParameteriAPPLE) (GLenum pname, GLint param);
-GdkGLProc    gdk_gl_get_glVertexArrayParameteriAPPLE (void);
-#define      gdk_gl_glVertexArrayParameteriAPPLE(proc, pname, param) \
-  ( ((GdkGLProc_glVertexArrayParameteriAPPLE) (proc)) (pname, param) )
+/* glDepthBoundsdNV */
+typedef void (APIENTRYP GdkGLProc_glDepthBoundsdNV) (GLdouble zmin, GLdouble zmax);
+GdkGLProc    gdk_gl_get_glDepthBoundsdNV (void);
+#define      gdk_gl_glDepthBoundsdNV(proc, zmin, zmax) \
+  ( ((GdkGLProc_glDepthBoundsdNV) (proc)) (zmin, zmax) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_APPLE_vertex_array_range GdkGL_GL_APPLE_vertex_array_range;
+typedef struct _GdkGL_GL_NV_depth_buffer_float GdkGL_GL_NV_depth_buffer_float;
 
-struct _GdkGL_GL_APPLE_vertex_array_range
+struct _GdkGL_GL_NV_depth_buffer_float
 {
-  GdkGLProc_glVertexArrayRangeAPPLE glVertexArrayRangeAPPLE;
-  GdkGLProc_glFlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE;
-  GdkGLProc_glVertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE;
+  GdkGLProc_glDepthRangedNV glDepthRangedNV;
+  GdkGLProc_glClearDepthdNV glClearDepthdNV;
+  GdkGLProc_glDepthBoundsdNV glDepthBoundsdNV;
 };
 
-GdkGL_GL_APPLE_vertex_array_range *gdk_gl_get_GL_APPLE_vertex_array_range (void);
+GdkGL_GL_NV_depth_buffer_float *gdk_gl_get_GL_NV_depth_buffer_float (void);
 
 /*
- * GL_ATI_draw_buffers
+ * GL_NV_framebuffer_multisample_coverage
  */
 
-/* glDrawBuffersATI */
-typedef void (APIENTRY * GdkGLProc_glDrawBuffersATI) (GLsizei n, const GLenum *bufs);
-GdkGLProc    gdk_gl_get_glDrawBuffersATI (void);
-#define      gdk_gl_glDrawBuffersATI(proc, n, bufs) \
-  ( ((GdkGLProc_glDrawBuffersATI) (proc)) (n, bufs) )
+/* glRenderbufferStorageMultisampleCoverageNV */
+typedef void (APIENTRYP GdkGLProc_glRenderbufferStorageMultisampleCoverageNV) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glRenderbufferStorageMultisampleCoverageNV (void);
+#define      gdk_gl_glRenderbufferStorageMultisampleCoverageNV(proc, target, coverageSamples, colorSamples, internalformat, width, height) \
+  ( ((GdkGLProc_glRenderbufferStorageMultisampleCoverageNV) (proc)) (target, coverageSamples, colorSamples, internalformat, width, height) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_draw_buffers GdkGL_GL_ATI_draw_buffers;
+typedef struct _GdkGL_GL_NV_framebuffer_multisample_coverage GdkGL_GL_NV_framebuffer_multisample_coverage;
 
-struct _GdkGL_GL_ATI_draw_buffers
+struct _GdkGL_GL_NV_framebuffer_multisample_coverage
 {
-  GdkGLProc_glDrawBuffersATI glDrawBuffersATI;
+  GdkGLProc_glRenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV;
 };
 
-GdkGL_GL_ATI_draw_buffers *gdk_gl_get_GL_ATI_draw_buffers (void);
+GdkGL_GL_NV_framebuffer_multisample_coverage *gdk_gl_get_GL_NV_framebuffer_multisample_coverage (void);
 
 /*
- * GL_NV_fragment_program
+ * GL_NV_parameter_buffer_object
  */
 
-/* glProgramNamedParameter4fNV */
-typedef void (APIENTRY * GdkGLProc_glProgramNamedParameter4fNV) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-GdkGLProc    gdk_gl_get_glProgramNamedParameter4fNV (void);
-#define      gdk_gl_glProgramNamedParameter4fNV(proc, id, len, name, x, y, z, w) \
-  ( ((GdkGLProc_glProgramNamedParameter4fNV) (proc)) (id, len, name, x, y, z, w) )
-
-/* glProgramNamedParameter4dNV */
-typedef void (APIENTRY * GdkGLProc_glProgramNamedParameter4dNV) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-GdkGLProc    gdk_gl_get_glProgramNamedParameter4dNV (void);
-#define      gdk_gl_glProgramNamedParameter4dNV(proc, id, len, name, x, y, z, w) \
-  ( ((GdkGLProc_glProgramNamedParameter4dNV) (proc)) (id, len, name, x, y, z, w) )
-
-/* glProgramNamedParameter4fvNV */
-typedef void (APIENTRY * GdkGLProc_glProgramNamedParameter4fvNV) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
-GdkGLProc    gdk_gl_get_glProgramNamedParameter4fvNV (void);
-#define      gdk_gl_glProgramNamedParameter4fvNV(proc, id, len, name, v) \
-  ( ((GdkGLProc_glProgramNamedParameter4fvNV) (proc)) (id, len, name, v) )
-
-/* glProgramNamedParameter4dvNV */
-typedef void (APIENTRY * GdkGLProc_glProgramNamedParameter4dvNV) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
-GdkGLProc    gdk_gl_get_glProgramNamedParameter4dvNV (void);
-#define      gdk_gl_glProgramNamedParameter4dvNV(proc, id, len, name, v) \
-  ( ((GdkGLProc_glProgramNamedParameter4dvNV) (proc)) (id, len, name, v) )
+/* glProgramBufferParametersfvNV */
+typedef void (APIENTRYP GdkGLProc_glProgramBufferParametersfvNV) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glProgramBufferParametersfvNV (void);
+#define      gdk_gl_glProgramBufferParametersfvNV(proc, target, buffer, index, count, params) \
+  ( ((GdkGLProc_glProgramBufferParametersfvNV) (proc)) (target, buffer, index, count, params) )
 
-/* glGetProgramNamedParameterfvNV */
-typedef void (APIENTRY * GdkGLProc_glGetProgramNamedParameterfvNV) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetProgramNamedParameterfvNV (void);
-#define      gdk_gl_glGetProgramNamedParameterfvNV(proc, id, len, name, params) \
-  ( ((GdkGLProc_glGetProgramNamedParameterfvNV) (proc)) (id, len, name, params) )
+/* glProgramBufferParametersIivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramBufferParametersIivNV) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
+GdkGLProc    gdk_gl_get_glProgramBufferParametersIivNV (void);
+#define      gdk_gl_glProgramBufferParametersIivNV(proc, target, buffer, index, count, params) \
+  ( ((GdkGLProc_glProgramBufferParametersIivNV) (proc)) (target, buffer, index, count, params) )
 
-/* glGetProgramNamedParameterdvNV */
-typedef void (APIENTRY * GdkGLProc_glGetProgramNamedParameterdvNV) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
-GdkGLProc    gdk_gl_get_glGetProgramNamedParameterdvNV (void);
-#define      gdk_gl_glGetProgramNamedParameterdvNV(proc, id, len, name, params) \
-  ( ((GdkGLProc_glGetProgramNamedParameterdvNV) (proc)) (id, len, name, params) )
+/* glProgramBufferParametersIuivNV */
+typedef void (APIENTRYP GdkGLProc_glProgramBufferParametersIuivNV) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
+GdkGLProc    gdk_gl_get_glProgramBufferParametersIuivNV (void);
+#define      gdk_gl_glProgramBufferParametersIuivNV(proc, target, buffer, index, count, params) \
+  ( ((GdkGLProc_glProgramBufferParametersIuivNV) (proc)) (target, buffer, index, count, params) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_fragment_program GdkGL_GL_NV_fragment_program;
+typedef struct _GdkGL_GL_NV_parameter_buffer_object GdkGL_GL_NV_parameter_buffer_object;
 
-struct _GdkGL_GL_NV_fragment_program
+struct _GdkGL_GL_NV_parameter_buffer_object
 {
-  GdkGLProc_glProgramNamedParameter4fNV glProgramNamedParameter4fNV;
-  GdkGLProc_glProgramNamedParameter4dNV glProgramNamedParameter4dNV;
-  GdkGLProc_glProgramNamedParameter4fvNV glProgramNamedParameter4fvNV;
-  GdkGLProc_glProgramNamedParameter4dvNV glProgramNamedParameter4dvNV;
-  GdkGLProc_glGetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV;
-  GdkGLProc_glGetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV;
+  GdkGLProc_glProgramBufferParametersfvNV glProgramBufferParametersfvNV;
+  GdkGLProc_glProgramBufferParametersIivNV glProgramBufferParametersIivNV;
+  GdkGLProc_glProgramBufferParametersIuivNV glProgramBufferParametersIuivNV;
 };
 
-GdkGL_GL_NV_fragment_program *gdk_gl_get_GL_NV_fragment_program (void);
+GdkGL_GL_NV_parameter_buffer_object *gdk_gl_get_GL_NV_parameter_buffer_object (void);
 
 /*
- * GL_NV_half_float
+ * GL_EXT_draw_buffers2
  */
 
-/* glVertex2hNV */
-typedef void (APIENTRY * GdkGLProc_glVertex2hNV) (GLhalfNV x, GLhalfNV y);
-GdkGLProc    gdk_gl_get_glVertex2hNV (void);
-#define      gdk_gl_glVertex2hNV(proc, x, y) \
-  ( ((GdkGLProc_glVertex2hNV) (proc)) (x, y) )
+/* glColorMaskIndexedEXT */
+typedef void (APIENTRYP GdkGLProc_glColorMaskIndexedEXT) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+GdkGLProc    gdk_gl_get_glColorMaskIndexedEXT (void);
+#define      gdk_gl_glColorMaskIndexedEXT(proc, index, r, g, b, a) \
+  ( ((GdkGLProc_glColorMaskIndexedEXT) (proc)) (index, r, g, b, a) )
+
+/* glGetBooleanIndexedvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetBooleanIndexedvEXT) (GLenum target, GLuint index, GLboolean *data);
+GdkGLProc    gdk_gl_get_glGetBooleanIndexedvEXT (void);
+#define      gdk_gl_glGetBooleanIndexedvEXT(proc, target, index, data) \
+  ( ((GdkGLProc_glGetBooleanIndexedvEXT) (proc)) (target, index, data) )
+
+/* glGetIntegerIndexedvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetIntegerIndexedvEXT) (GLenum target, GLuint index, GLint *data);
+GdkGLProc    gdk_gl_get_glGetIntegerIndexedvEXT (void);
+#define      gdk_gl_glGetIntegerIndexedvEXT(proc, target, index, data) \
+  ( ((GdkGLProc_glGetIntegerIndexedvEXT) (proc)) (target, index, data) )
+
+/* glEnableIndexedEXT */
+typedef void (APIENTRYP GdkGLProc_glEnableIndexedEXT) (GLenum target, GLuint index);
+GdkGLProc    gdk_gl_get_glEnableIndexedEXT (void);
+#define      gdk_gl_glEnableIndexedEXT(proc, target, index) \
+  ( ((GdkGLProc_glEnableIndexedEXT) (proc)) (target, index) )
+
+/* glDisableIndexedEXT */
+typedef void (APIENTRYP GdkGLProc_glDisableIndexedEXT) (GLenum target, GLuint index);
+GdkGLProc    gdk_gl_get_glDisableIndexedEXT (void);
+#define      gdk_gl_glDisableIndexedEXT(proc, target, index) \
+  ( ((GdkGLProc_glDisableIndexedEXT) (proc)) (target, index) )
+
+/* glIsEnabledIndexedEXT */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsEnabledIndexedEXT) (GLenum target, GLuint index);
+GdkGLProc    gdk_gl_get_glIsEnabledIndexedEXT (void);
+#define      gdk_gl_glIsEnabledIndexedEXT(proc, target, index) \
+  ( ((GdkGLProc_glIsEnabledIndexedEXT) (proc)) (target, index) )
 
-/* glVertex2hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertex2hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertex2hvNV (void);
-#define      gdk_gl_glVertex2hvNV(proc, v) \
-  ( ((GdkGLProc_glVertex2hvNV) (proc)) (v) )
+/* proc struct */
 
-/* glVertex3hNV */
-typedef void (APIENTRY * GdkGLProc_glVertex3hNV) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
-GdkGLProc    gdk_gl_get_glVertex3hNV (void);
-#define      gdk_gl_glVertex3hNV(proc, x, y, z) \
-  ( ((GdkGLProc_glVertex3hNV) (proc)) (x, y, z) )
+typedef struct _GdkGL_GL_EXT_draw_buffers2 GdkGL_GL_EXT_draw_buffers2;
 
-/* glVertex3hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertex3hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertex3hvNV (void);
-#define      gdk_gl_glVertex3hvNV(proc, v) \
-  ( ((GdkGLProc_glVertex3hvNV) (proc)) (v) )
+struct _GdkGL_GL_EXT_draw_buffers2
+{
+  GdkGLProc_glColorMaskIndexedEXT glColorMaskIndexedEXT;
+  GdkGLProc_glGetBooleanIndexedvEXT glGetBooleanIndexedvEXT;
+  GdkGLProc_glGetIntegerIndexedvEXT glGetIntegerIndexedvEXT;
+  GdkGLProc_glEnableIndexedEXT glEnableIndexedEXT;
+  GdkGLProc_glDisableIndexedEXT glDisableIndexedEXT;
+  GdkGLProc_glIsEnabledIndexedEXT glIsEnabledIndexedEXT;
+};
 
-/* glVertex4hNV */
-typedef void (APIENTRY * GdkGLProc_glVertex4hNV) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
-GdkGLProc    gdk_gl_get_glVertex4hNV (void);
-#define      gdk_gl_glVertex4hNV(proc, x, y, z, w) \
-  ( ((GdkGLProc_glVertex4hNV) (proc)) (x, y, z, w) )
+GdkGL_GL_EXT_draw_buffers2 *gdk_gl_get_GL_EXT_draw_buffers2 (void);
 
-/* glVertex4hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertex4hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertex4hvNV (void);
-#define      gdk_gl_glVertex4hvNV(proc, v) \
-  ( ((GdkGLProc_glVertex4hvNV) (proc)) (v) )
+/*
+ * GL_NV_transform_feedback
+ */
 
-/* glNormal3hNV */
-typedef void (APIENTRY * GdkGLProc_glNormal3hNV) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
-GdkGLProc    gdk_gl_get_glNormal3hNV (void);
-#define      gdk_gl_glNormal3hNV(proc, nx, ny, nz) \
-  ( ((GdkGLProc_glNormal3hNV) (proc)) (nx, ny, nz) )
+/* glBeginTransformFeedbackNV */
+typedef void (APIENTRYP GdkGLProc_glBeginTransformFeedbackNV) (GLenum primitiveMode);
+GdkGLProc    gdk_gl_get_glBeginTransformFeedbackNV (void);
+#define      gdk_gl_glBeginTransformFeedbackNV(proc, primitiveMode) \
+  ( ((GdkGLProc_glBeginTransformFeedbackNV) (proc)) (primitiveMode) )
+
+/* glEndTransformFeedbackNV */
+typedef void (APIENTRYP GdkGLProc_glEndTransformFeedbackNV) (void);
+GdkGLProc    gdk_gl_get_glEndTransformFeedbackNV (void);
+#define      gdk_gl_glEndTransformFeedbackNV(proc) \
+  ( ((GdkGLProc_glEndTransformFeedbackNV) (proc)) () )
+
+/* glTransformFeedbackAttribsNV */
+typedef void (APIENTRYP GdkGLProc_glTransformFeedbackAttribsNV) (GLuint count, const GLint *attribs, GLenum bufferMode);
+GdkGLProc    gdk_gl_get_glTransformFeedbackAttribsNV (void);
+#define      gdk_gl_glTransformFeedbackAttribsNV(proc, count, attribs, bufferMode) \
+  ( ((GdkGLProc_glTransformFeedbackAttribsNV) (proc)) (count, attribs, bufferMode) )
+
+/* glBindBufferRangeNV */
+typedef void (APIENTRYP GdkGLProc_glBindBufferRangeNV) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+GdkGLProc    gdk_gl_get_glBindBufferRangeNV (void);
+#define      gdk_gl_glBindBufferRangeNV(proc, target, index, buffer, offset, size) \
+  ( ((GdkGLProc_glBindBufferRangeNV) (proc)) (target, index, buffer, offset, size) )
+
+/* glBindBufferOffsetNV */
+typedef void (APIENTRYP GdkGLProc_glBindBufferOffsetNV) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+GdkGLProc    gdk_gl_get_glBindBufferOffsetNV (void);
+#define      gdk_gl_glBindBufferOffsetNV(proc, target, index, buffer, offset) \
+  ( ((GdkGLProc_glBindBufferOffsetNV) (proc)) (target, index, buffer, offset) )
+
+/* glBindBufferBaseNV */
+typedef void (APIENTRYP GdkGLProc_glBindBufferBaseNV) (GLenum target, GLuint index, GLuint buffer);
+GdkGLProc    gdk_gl_get_glBindBufferBaseNV (void);
+#define      gdk_gl_glBindBufferBaseNV(proc, target, index, buffer) \
+  ( ((GdkGLProc_glBindBufferBaseNV) (proc)) (target, index, buffer) )
+
+/* glTransformFeedbackVaryingsNV */
+typedef void (APIENTRYP GdkGLProc_glTransformFeedbackVaryingsNV) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+GdkGLProc    gdk_gl_get_glTransformFeedbackVaryingsNV (void);
+#define      gdk_gl_glTransformFeedbackVaryingsNV(proc, program, count, varyings, bufferMode) \
+  ( ((GdkGLProc_glTransformFeedbackVaryingsNV) (proc)) (program, count, varyings, bufferMode) )
+
+/* glActiveVaryingNV */
+typedef void (APIENTRYP GdkGLProc_glActiveVaryingNV) (GLuint program, const GLchar *name);
+GdkGLProc    gdk_gl_get_glActiveVaryingNV (void);
+#define      gdk_gl_glActiveVaryingNV(proc, program, name) \
+  ( ((GdkGLProc_glActiveVaryingNV) (proc)) (program, name) )
+
+/* glGetVaryingLocationNV */
+typedef GLint (APIENTRYP GdkGLProc_glGetVaryingLocationNV) (GLuint program, const GLchar *name);
+GdkGLProc    gdk_gl_get_glGetVaryingLocationNV (void);
+#define      gdk_gl_glGetVaryingLocationNV(proc, program, name) \
+  ( ((GdkGLProc_glGetVaryingLocationNV) (proc)) (program, name) )
+
+/* glGetActiveVaryingNV */
+typedef void (APIENTRYP GdkGLProc_glGetActiveVaryingNV) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+GdkGLProc    gdk_gl_get_glGetActiveVaryingNV (void);
+#define      gdk_gl_glGetActiveVaryingNV(proc, program, index, bufSize, length, size, type, name) \
+  ( ((GdkGLProc_glGetActiveVaryingNV) (proc)) (program, index, bufSize, length, size, type, name) )
+
+/* glGetTransformFeedbackVaryingNV */
+typedef void (APIENTRYP GdkGLProc_glGetTransformFeedbackVaryingNV) (GLuint program, GLuint index, GLint *location);
+GdkGLProc    gdk_gl_get_glGetTransformFeedbackVaryingNV (void);
+#define      gdk_gl_glGetTransformFeedbackVaryingNV(proc, program, index, location) \
+  ( ((GdkGLProc_glGetTransformFeedbackVaryingNV) (proc)) (program, index, location) )
 
-/* glNormal3hvNV */
-typedef void (APIENTRY * GdkGLProc_glNormal3hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glNormal3hvNV (void);
-#define      gdk_gl_glNormal3hvNV(proc, v) \
-  ( ((GdkGLProc_glNormal3hvNV) (proc)) (v) )
+/* proc struct */
 
-/* glColor3hNV */
-typedef void (APIENTRY * GdkGLProc_glColor3hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
-GdkGLProc    gdk_gl_get_glColor3hNV (void);
-#define      gdk_gl_glColor3hNV(proc, red, green, blue) \
-  ( ((GdkGLProc_glColor3hNV) (proc)) (red, green, blue) )
+typedef struct _GdkGL_GL_NV_transform_feedback GdkGL_GL_NV_transform_feedback;
 
-/* glColor3hvNV */
-typedef void (APIENTRY * GdkGLProc_glColor3hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glColor3hvNV (void);
-#define      gdk_gl_glColor3hvNV(proc, v) \
-  ( ((GdkGLProc_glColor3hvNV) (proc)) (v) )
+struct _GdkGL_GL_NV_transform_feedback
+{
+  GdkGLProc_glBeginTransformFeedbackNV glBeginTransformFeedbackNV;
+  GdkGLProc_glEndTransformFeedbackNV glEndTransformFeedbackNV;
+  GdkGLProc_glTransformFeedbackAttribsNV glTransformFeedbackAttribsNV;
+  GdkGLProc_glBindBufferRangeNV glBindBufferRangeNV;
+  GdkGLProc_glBindBufferOffsetNV glBindBufferOffsetNV;
+  GdkGLProc_glBindBufferBaseNV glBindBufferBaseNV;
+  GdkGLProc_glTransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV;
+  GdkGLProc_glActiveVaryingNV glActiveVaryingNV;
+  GdkGLProc_glGetVaryingLocationNV glGetVaryingLocationNV;
+  GdkGLProc_glGetActiveVaryingNV glGetActiveVaryingNV;
+  GdkGLProc_glGetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV;
+};
 
-/* glColor4hNV */
-typedef void (APIENTRY * GdkGLProc_glColor4hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
-GdkGLProc    gdk_gl_get_glColor4hNV (void);
-#define      gdk_gl_glColor4hNV(proc, red, green, blue, alpha) \
-  ( ((GdkGLProc_glColor4hNV) (proc)) (red, green, blue, alpha) )
+GdkGL_GL_NV_transform_feedback *gdk_gl_get_GL_NV_transform_feedback (void);
 
-/* glColor4hvNV */
-typedef void (APIENTRY * GdkGLProc_glColor4hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glColor4hvNV (void);
-#define      gdk_gl_glColor4hvNV(proc, v) \
-  ( ((GdkGLProc_glColor4hvNV) (proc)) (v) )
+/*
+ * GL_EXT_bindable_uniform
+ */
 
-/* glTexCoord1hNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord1hNV) (GLhalfNV s);
-GdkGLProc    gdk_gl_get_glTexCoord1hNV (void);
-#define      gdk_gl_glTexCoord1hNV(proc, s) \
-  ( ((GdkGLProc_glTexCoord1hNV) (proc)) (s) )
+/* glUniformBufferEXT */
+typedef void (APIENTRYP GdkGLProc_glUniformBufferEXT) (GLuint program, GLint location, GLuint buffer);
+GdkGLProc    gdk_gl_get_glUniformBufferEXT (void);
+#define      gdk_gl_glUniformBufferEXT(proc, program, location, buffer) \
+  ( ((GdkGLProc_glUniformBufferEXT) (proc)) (program, location, buffer) )
 
-/* glTexCoord1hvNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord1hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glTexCoord1hvNV (void);
-#define      gdk_gl_glTexCoord1hvNV(proc, v) \
-  ( ((GdkGLProc_glTexCoord1hvNV) (proc)) (v) )
+/* glGetUniformBufferSizeEXT */
+typedef GLint (APIENTRYP GdkGLProc_glGetUniformBufferSizeEXT) (GLuint program, GLint location);
+GdkGLProc    gdk_gl_get_glGetUniformBufferSizeEXT (void);
+#define      gdk_gl_glGetUniformBufferSizeEXT(proc, program, location) \
+  ( ((GdkGLProc_glGetUniformBufferSizeEXT) (proc)) (program, location) )
 
-/* glTexCoord2hNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2hNV) (GLhalfNV s, GLhalfNV t);
-GdkGLProc    gdk_gl_get_glTexCoord2hNV (void);
-#define      gdk_gl_glTexCoord2hNV(proc, s, t) \
-  ( ((GdkGLProc_glTexCoord2hNV) (proc)) (s, t) )
+/* glGetUniformOffsetEXT */
+typedef GLintptr (APIENTRYP GdkGLProc_glGetUniformOffsetEXT) (GLuint program, GLint location);
+GdkGLProc    gdk_gl_get_glGetUniformOffsetEXT (void);
+#define      gdk_gl_glGetUniformOffsetEXT(proc, program, location) \
+  ( ((GdkGLProc_glGetUniformOffsetEXT) (proc)) (program, location) )
 
-/* glTexCoord2hvNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord2hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glTexCoord2hvNV (void);
-#define      gdk_gl_glTexCoord2hvNV(proc, v) \
-  ( ((GdkGLProc_glTexCoord2hvNV) (proc)) (v) )
+/* proc struct */
 
-/* glTexCoord3hNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord3hNV) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
-GdkGLProc    gdk_gl_get_glTexCoord3hNV (void);
-#define      gdk_gl_glTexCoord3hNV(proc, s, t, r) \
-  ( ((GdkGLProc_glTexCoord3hNV) (proc)) (s, t, r) )
+typedef struct _GdkGL_GL_EXT_bindable_uniform GdkGL_GL_EXT_bindable_uniform;
 
-/* glTexCoord3hvNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord3hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glTexCoord3hvNV (void);
-#define      gdk_gl_glTexCoord3hvNV(proc, v) \
-  ( ((GdkGLProc_glTexCoord3hvNV) (proc)) (v) )
+struct _GdkGL_GL_EXT_bindable_uniform
+{
+  GdkGLProc_glUniformBufferEXT glUniformBufferEXT;
+  GdkGLProc_glGetUniformBufferSizeEXT glGetUniformBufferSizeEXT;
+  GdkGLProc_glGetUniformOffsetEXT glGetUniformOffsetEXT;
+};
 
-/* glTexCoord4hNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord4hNV) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
-GdkGLProc    gdk_gl_get_glTexCoord4hNV (void);
-#define      gdk_gl_glTexCoord4hNV(proc, s, t, r, q) \
-  ( ((GdkGLProc_glTexCoord4hNV) (proc)) (s, t, r, q) )
+GdkGL_GL_EXT_bindable_uniform *gdk_gl_get_GL_EXT_bindable_uniform (void);
 
-/* glTexCoord4hvNV */
-typedef void (APIENTRY * GdkGLProc_glTexCoord4hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glTexCoord4hvNV (void);
-#define      gdk_gl_glTexCoord4hvNV(proc, v) \
-  ( ((GdkGLProc_glTexCoord4hvNV) (proc)) (v) )
+/*
+ * GL_EXT_texture_integer
+ */
 
-/* glMultiTexCoord1hNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1hNV) (GLenum target, GLhalfNV s);
-GdkGLProc    gdk_gl_get_glMultiTexCoord1hNV (void);
-#define      gdk_gl_glMultiTexCoord1hNV(proc, target, s) \
-  ( ((GdkGLProc_glMultiTexCoord1hNV) (proc)) (target, s) )
+/* glTexParameterIivEXT */
+typedef void (APIENTRYP GdkGLProc_glTexParameterIivEXT) (GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glTexParameterIivEXT (void);
+#define      gdk_gl_glTexParameterIivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glTexParameterIivEXT) (proc)) (target, pname, params) )
+
+/* glTexParameterIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glTexParameterIuivEXT) (GLenum target, GLenum pname, const GLuint *params);
+GdkGLProc    gdk_gl_get_glTexParameterIuivEXT (void);
+#define      gdk_gl_glTexParameterIuivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glTexParameterIuivEXT) (proc)) (target, pname, params) )
+
+/* glGetTexParameterIivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTexParameterIivEXT) (GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetTexParameterIivEXT (void);
+#define      gdk_gl_glGetTexParameterIivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetTexParameterIivEXT) (proc)) (target, pname, params) )
+
+/* glGetTexParameterIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTexParameterIuivEXT) (GLenum target, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetTexParameterIuivEXT (void);
+#define      gdk_gl_glGetTexParameterIuivEXT(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetTexParameterIuivEXT) (proc)) (target, pname, params) )
+
+/* glClearColorIiEXT */
+typedef void (APIENTRYP GdkGLProc_glClearColorIiEXT) (GLint red, GLint green, GLint blue, GLint alpha);
+GdkGLProc    gdk_gl_get_glClearColorIiEXT (void);
+#define      gdk_gl_glClearColorIiEXT(proc, red, green, blue, alpha) \
+  ( ((GdkGLProc_glClearColorIiEXT) (proc)) (red, green, blue, alpha) )
+
+/* glClearColorIuiEXT */
+typedef void (APIENTRYP GdkGLProc_glClearColorIuiEXT) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
+GdkGLProc    gdk_gl_get_glClearColorIuiEXT (void);
+#define      gdk_gl_glClearColorIuiEXT(proc, red, green, blue, alpha) \
+  ( ((GdkGLProc_glClearColorIuiEXT) (proc)) (red, green, blue, alpha) )
 
-/* glMultiTexCoord1hvNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord1hvNV) (GLenum target, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glMultiTexCoord1hvNV (void);
-#define      gdk_gl_glMultiTexCoord1hvNV(proc, target, v) \
-  ( ((GdkGLProc_glMultiTexCoord1hvNV) (proc)) (target, v) )
+/* proc struct */
 
-/* glMultiTexCoord2hNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2hNV) (GLenum target, GLhalfNV s, GLhalfNV t);
-GdkGLProc    gdk_gl_get_glMultiTexCoord2hNV (void);
-#define      gdk_gl_glMultiTexCoord2hNV(proc, target, s, t) \
-  ( ((GdkGLProc_glMultiTexCoord2hNV) (proc)) (target, s, t) )
+typedef struct _GdkGL_GL_EXT_texture_integer GdkGL_GL_EXT_texture_integer;
 
-/* glMultiTexCoord2hvNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord2hvNV) (GLenum target, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glMultiTexCoord2hvNV (void);
-#define      gdk_gl_glMultiTexCoord2hvNV(proc, target, v) \
-  ( ((GdkGLProc_glMultiTexCoord2hvNV) (proc)) (target, v) )
+struct _GdkGL_GL_EXT_texture_integer
+{
+  GdkGLProc_glTexParameterIivEXT glTexParameterIivEXT;
+  GdkGLProc_glTexParameterIuivEXT glTexParameterIuivEXT;
+  GdkGLProc_glGetTexParameterIivEXT glGetTexParameterIivEXT;
+  GdkGLProc_glGetTexParameterIuivEXT glGetTexParameterIuivEXT;
+  GdkGLProc_glClearColorIiEXT glClearColorIiEXT;
+  GdkGLProc_glClearColorIuiEXT glClearColorIuiEXT;
+};
 
-/* glMultiTexCoord3hNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3hNV) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
-GdkGLProc    gdk_gl_get_glMultiTexCoord3hNV (void);
-#define      gdk_gl_glMultiTexCoord3hNV(proc, target, s, t, r) \
-  ( ((GdkGLProc_glMultiTexCoord3hNV) (proc)) (target, s, t, r) )
+GdkGL_GL_EXT_texture_integer *gdk_gl_get_GL_EXT_texture_integer (void);
 
-/* glMultiTexCoord3hvNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord3hvNV) (GLenum target, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glMultiTexCoord3hvNV (void);
-#define      gdk_gl_glMultiTexCoord3hvNV(proc, target, v) \
-  ( ((GdkGLProc_glMultiTexCoord3hvNV) (proc)) (target, v) )
+/*
+ * GL_GREMEDY_frame_terminator
+ */
 
-/* glMultiTexCoord4hNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4hNV) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
-GdkGLProc    gdk_gl_get_glMultiTexCoord4hNV (void);
-#define      gdk_gl_glMultiTexCoord4hNV(proc, target, s, t, r, q) \
-  ( ((GdkGLProc_glMultiTexCoord4hNV) (proc)) (target, s, t, r, q) )
+/* glFrameTerminatorGREMEDY */
+typedef void (APIENTRYP GdkGLProc_glFrameTerminatorGREMEDY) (void);
+GdkGLProc    gdk_gl_get_glFrameTerminatorGREMEDY (void);
+#define      gdk_gl_glFrameTerminatorGREMEDY(proc) \
+  ( ((GdkGLProc_glFrameTerminatorGREMEDY) (proc)) () )
 
-/* glMultiTexCoord4hvNV */
-typedef void (APIENTRY * GdkGLProc_glMultiTexCoord4hvNV) (GLenum target, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glMultiTexCoord4hvNV (void);
-#define      gdk_gl_glMultiTexCoord4hvNV(proc, target, v) \
-  ( ((GdkGLProc_glMultiTexCoord4hvNV) (proc)) (target, v) )
+/* proc struct */
 
-/* glFogCoordhNV */
-typedef void (APIENTRY * GdkGLProc_glFogCoordhNV) (GLhalfNV fog);
-GdkGLProc    gdk_gl_get_glFogCoordhNV (void);
-#define      gdk_gl_glFogCoordhNV(proc, fog) \
-  ( ((GdkGLProc_glFogCoordhNV) (proc)) (fog) )
+typedef struct _GdkGL_GL_GREMEDY_frame_terminator GdkGL_GL_GREMEDY_frame_terminator;
 
-/* glFogCoordhvNV */
-typedef void (APIENTRY * GdkGLProc_glFogCoordhvNV) (const GLhalfNV *fog);
-GdkGLProc    gdk_gl_get_glFogCoordhvNV (void);
-#define      gdk_gl_glFogCoordhvNV(proc, fog) \
-  ( ((GdkGLProc_glFogCoordhvNV) (proc)) (fog) )
+struct _GdkGL_GL_GREMEDY_frame_terminator
+{
+  GdkGLProc_glFrameTerminatorGREMEDY glFrameTerminatorGREMEDY;
+};
 
-/* glSecondaryColor3hNV */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3hNV) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
-GdkGLProc    gdk_gl_get_glSecondaryColor3hNV (void);
-#define      gdk_gl_glSecondaryColor3hNV(proc, red, green, blue) \
-  ( ((GdkGLProc_glSecondaryColor3hNV) (proc)) (red, green, blue) )
+GdkGL_GL_GREMEDY_frame_terminator *gdk_gl_get_GL_GREMEDY_frame_terminator (void);
 
-/* glSecondaryColor3hvNV */
-typedef void (APIENTRY * GdkGLProc_glSecondaryColor3hvNV) (const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glSecondaryColor3hvNV (void);
-#define      gdk_gl_glSecondaryColor3hvNV(proc, v) \
-  ( ((GdkGLProc_glSecondaryColor3hvNV) (proc)) (v) )
+/*
+ * GL_NV_conditional_render
+ */
 
-/* glVertexWeighthNV */
-typedef void (APIENTRY * GdkGLProc_glVertexWeighthNV) (GLhalfNV weight);
-GdkGLProc    gdk_gl_get_glVertexWeighthNV (void);
-#define      gdk_gl_glVertexWeighthNV(proc, weight) \
-  ( ((GdkGLProc_glVertexWeighthNV) (proc)) (weight) )
+/* glBeginConditionalRenderNV */
+typedef void (APIENTRYP GdkGLProc_glBeginConditionalRenderNV) (GLuint id, GLenum mode);
+GdkGLProc    gdk_gl_get_glBeginConditionalRenderNV (void);
+#define      gdk_gl_glBeginConditionalRenderNV(proc, id, mode) \
+  ( ((GdkGLProc_glBeginConditionalRenderNV) (proc)) (id, mode) )
 
-/* glVertexWeighthvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexWeighthvNV) (const GLhalfNV *weight);
-GdkGLProc    gdk_gl_get_glVertexWeighthvNV (void);
-#define      gdk_gl_glVertexWeighthvNV(proc, weight) \
-  ( ((GdkGLProc_glVertexWeighthvNV) (proc)) (weight) )
+/* glEndConditionalRenderNV */
+typedef void (APIENTRYP GdkGLProc_glEndConditionalRenderNV) (void);
+GdkGLProc    gdk_gl_get_glEndConditionalRenderNV (void);
+#define      gdk_gl_glEndConditionalRenderNV(proc) \
+  ( ((GdkGLProc_glEndConditionalRenderNV) (proc)) () )
 
-/* glVertexAttrib1hNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1hNV) (GLuint index, GLhalfNV x);
-GdkGLProc    gdk_gl_get_glVertexAttrib1hNV (void);
-#define      gdk_gl_glVertexAttrib1hNV(proc, index, x) \
-  ( ((GdkGLProc_glVertexAttrib1hNV) (proc)) (index, x) )
+/* proc struct */
 
-/* glVertexAttrib1hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib1hvNV) (GLuint index, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib1hvNV (void);
-#define      gdk_gl_glVertexAttrib1hvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib1hvNV) (proc)) (index, v) )
+typedef struct _GdkGL_GL_NV_conditional_render GdkGL_GL_NV_conditional_render;
 
-/* glVertexAttrib2hNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2hNV) (GLuint index, GLhalfNV x, GLhalfNV y);
-GdkGLProc    gdk_gl_get_glVertexAttrib2hNV (void);
-#define      gdk_gl_glVertexAttrib2hNV(proc, index, x, y) \
-  ( ((GdkGLProc_glVertexAttrib2hNV) (proc)) (index, x, y) )
+struct _GdkGL_GL_NV_conditional_render
+{
+  GdkGLProc_glBeginConditionalRenderNV glBeginConditionalRenderNV;
+  GdkGLProc_glEndConditionalRenderNV glEndConditionalRenderNV;
+};
 
-/* glVertexAttrib2hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib2hvNV) (GLuint index, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib2hvNV (void);
-#define      gdk_gl_glVertexAttrib2hvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib2hvNV) (proc)) (index, v) )
+GdkGL_GL_NV_conditional_render *gdk_gl_get_GL_NV_conditional_render (void);
 
-/* glVertexAttrib3hNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3hNV) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
-GdkGLProc    gdk_gl_get_glVertexAttrib3hNV (void);
-#define      gdk_gl_glVertexAttrib3hNV(proc, index, x, y, z) \
-  ( ((GdkGLProc_glVertexAttrib3hNV) (proc)) (index, x, y, z) )
+/*
+ * GL_NV_present_video
+ */
 
-/* glVertexAttrib3hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib3hvNV) (GLuint index, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib3hvNV (void);
-#define      gdk_gl_glVertexAttrib3hvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib3hvNV) (proc)) (index, v) )
+/* glPresentFrameKeyedNV */
+typedef void (APIENTRYP GdkGLProc_glPresentFrameKeyedNV) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
+GdkGLProc    gdk_gl_get_glPresentFrameKeyedNV (void);
+#define      gdk_gl_glPresentFrameKeyedNV(proc, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) \
+  ( ((GdkGLProc_glPresentFrameKeyedNV) (proc)) (video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) )
+
+/* glPresentFrameDualFillNV */
+typedef void (APIENTRYP GdkGLProc_glPresentFrameDualFillNV) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
+GdkGLProc    gdk_gl_get_glPresentFrameDualFillNV (void);
+#define      gdk_gl_glPresentFrameDualFillNV(proc, video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) \
+  ( ((GdkGLProc_glPresentFrameDualFillNV) (proc)) (video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) )
+
+/* glGetVideoivNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideoivNV) (GLuint video_slot, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVideoivNV (void);
+#define      gdk_gl_glGetVideoivNV(proc, video_slot, pname, params) \
+  ( ((GdkGLProc_glGetVideoivNV) (proc)) (video_slot, pname, params) )
+
+/* glGetVideouivNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideouivNV) (GLuint video_slot, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetVideouivNV (void);
+#define      gdk_gl_glGetVideouivNV(proc, video_slot, pname, params) \
+  ( ((GdkGLProc_glGetVideouivNV) (proc)) (video_slot, pname, params) )
+
+/* glGetVideoi64vNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideoi64vNV) (GLuint video_slot, GLenum pname, GLint64EXT *params);
+GdkGLProc    gdk_gl_get_glGetVideoi64vNV (void);
+#define      gdk_gl_glGetVideoi64vNV(proc, video_slot, pname, params) \
+  ( ((GdkGLProc_glGetVideoi64vNV) (proc)) (video_slot, pname, params) )
+
+/* glGetVideoui64vNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideoui64vNV) (GLuint video_slot, GLenum pname, GLuint64EXT *params);
+GdkGLProc    gdk_gl_get_glGetVideoui64vNV (void);
+#define      gdk_gl_glGetVideoui64vNV(proc, video_slot, pname, params) \
+  ( ((GdkGLProc_glGetVideoui64vNV) (proc)) (video_slot, pname, params) )
 
-/* glVertexAttrib4hNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4hNV) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
-GdkGLProc    gdk_gl_get_glVertexAttrib4hNV (void);
-#define      gdk_gl_glVertexAttrib4hNV(proc, index, x, y, z, w) \
-  ( ((GdkGLProc_glVertexAttrib4hNV) (proc)) (index, x, y, z, w) )
+/* proc struct */
 
-/* glVertexAttrib4hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttrib4hvNV) (GLuint index, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttrib4hvNV (void);
-#define      gdk_gl_glVertexAttrib4hvNV(proc, index, v) \
-  ( ((GdkGLProc_glVertexAttrib4hvNV) (proc)) (index, v) )
+typedef struct _GdkGL_GL_NV_present_video GdkGL_GL_NV_present_video;
 
-/* glVertexAttribs1hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs1hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs1hvNV (void);
-#define      gdk_gl_glVertexAttribs1hvNV(proc, index, n, v) \
-  ( ((GdkGLProc_glVertexAttribs1hvNV) (proc)) (index, n, v) )
+struct _GdkGL_GL_NV_present_video
+{
+  GdkGLProc_glPresentFrameKeyedNV glPresentFrameKeyedNV;
+  GdkGLProc_glPresentFrameDualFillNV glPresentFrameDualFillNV;
+  GdkGLProc_glGetVideoivNV glGetVideoivNV;
+  GdkGLProc_glGetVideouivNV glGetVideouivNV;
+  GdkGLProc_glGetVideoi64vNV glGetVideoi64vNV;
+  GdkGLProc_glGetVideoui64vNV glGetVideoui64vNV;
+};
 
-/* glVertexAttribs2hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs2hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs2hvNV (void);
-#define      gdk_gl_glVertexAttribs2hvNV(proc, index, n, v) \
-  ( ((GdkGLProc_glVertexAttribs2hvNV) (proc)) (index, n, v) )
+GdkGL_GL_NV_present_video *gdk_gl_get_GL_NV_present_video (void);
 
-/* glVertexAttribs3hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs3hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs3hvNV (void);
-#define      gdk_gl_glVertexAttribs3hvNV(proc, index, n, v) \
-  ( ((GdkGLProc_glVertexAttribs3hvNV) (proc)) (index, n, v) )
+/*
+ * GL_EXT_transform_feedback
+ */
 
-/* glVertexAttribs4hvNV */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribs4hvNV) (GLuint index, GLsizei n, const GLhalfNV *v);
-GdkGLProc    gdk_gl_get_glVertexAttribs4hvNV (void);
-#define      gdk_gl_glVertexAttribs4hvNV(proc, index, n, v) \
-  ( ((GdkGLProc_glVertexAttribs4hvNV) (proc)) (index, n, v) )
+/* glBeginTransformFeedbackEXT */
+typedef void (APIENTRYP GdkGLProc_glBeginTransformFeedbackEXT) (GLenum primitiveMode);
+GdkGLProc    gdk_gl_get_glBeginTransformFeedbackEXT (void);
+#define      gdk_gl_glBeginTransformFeedbackEXT(proc, primitiveMode) \
+  ( ((GdkGLProc_glBeginTransformFeedbackEXT) (proc)) (primitiveMode) )
+
+/* glEndTransformFeedbackEXT */
+typedef void (APIENTRYP GdkGLProc_glEndTransformFeedbackEXT) (void);
+GdkGLProc    gdk_gl_get_glEndTransformFeedbackEXT (void);
+#define      gdk_gl_glEndTransformFeedbackEXT(proc) \
+  ( ((GdkGLProc_glEndTransformFeedbackEXT) (proc)) () )
+
+/* glBindBufferRangeEXT */
+typedef void (APIENTRYP GdkGLProc_glBindBufferRangeEXT) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+GdkGLProc    gdk_gl_get_glBindBufferRangeEXT (void);
+#define      gdk_gl_glBindBufferRangeEXT(proc, target, index, buffer, offset, size) \
+  ( ((GdkGLProc_glBindBufferRangeEXT) (proc)) (target, index, buffer, offset, size) )
+
+/* glBindBufferOffsetEXT */
+typedef void (APIENTRYP GdkGLProc_glBindBufferOffsetEXT) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+GdkGLProc    gdk_gl_get_glBindBufferOffsetEXT (void);
+#define      gdk_gl_glBindBufferOffsetEXT(proc, target, index, buffer, offset) \
+  ( ((GdkGLProc_glBindBufferOffsetEXT) (proc)) (target, index, buffer, offset) )
+
+/* glBindBufferBaseEXT */
+typedef void (APIENTRYP GdkGLProc_glBindBufferBaseEXT) (GLenum target, GLuint index, GLuint buffer);
+GdkGLProc    gdk_gl_get_glBindBufferBaseEXT (void);
+#define      gdk_gl_glBindBufferBaseEXT(proc, target, index, buffer) \
+  ( ((GdkGLProc_glBindBufferBaseEXT) (proc)) (target, index, buffer) )
+
+/* glTransformFeedbackVaryingsEXT */
+typedef void (APIENTRYP GdkGLProc_glTransformFeedbackVaryingsEXT) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+GdkGLProc    gdk_gl_get_glTransformFeedbackVaryingsEXT (void);
+#define      gdk_gl_glTransformFeedbackVaryingsEXT(proc, program, count, varyings, bufferMode) \
+  ( ((GdkGLProc_glTransformFeedbackVaryingsEXT) (proc)) (program, count, varyings, bufferMode) )
+
+/* glGetTransformFeedbackVaryingEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTransformFeedbackVaryingEXT) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+GdkGLProc    gdk_gl_get_glGetTransformFeedbackVaryingEXT (void);
+#define      gdk_gl_glGetTransformFeedbackVaryingEXT(proc, program, index, bufSize, length, size, type, name) \
+  ( ((GdkGLProc_glGetTransformFeedbackVaryingEXT) (proc)) (program, index, bufSize, length, size, type, name) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_half_float GdkGL_GL_NV_half_float;
+typedef struct _GdkGL_GL_EXT_transform_feedback GdkGL_GL_EXT_transform_feedback;
 
-struct _GdkGL_GL_NV_half_float
+struct _GdkGL_GL_EXT_transform_feedback
 {
-  GdkGLProc_glVertex2hNV glVertex2hNV;
-  GdkGLProc_glVertex2hvNV glVertex2hvNV;
-  GdkGLProc_glVertex3hNV glVertex3hNV;
-  GdkGLProc_glVertex3hvNV glVertex3hvNV;
-  GdkGLProc_glVertex4hNV glVertex4hNV;
-  GdkGLProc_glVertex4hvNV glVertex4hvNV;
-  GdkGLProc_glNormal3hNV glNormal3hNV;
-  GdkGLProc_glNormal3hvNV glNormal3hvNV;
-  GdkGLProc_glColor3hNV glColor3hNV;
-  GdkGLProc_glColor3hvNV glColor3hvNV;
-  GdkGLProc_glColor4hNV glColor4hNV;
-  GdkGLProc_glColor4hvNV glColor4hvNV;
-  GdkGLProc_glTexCoord1hNV glTexCoord1hNV;
-  GdkGLProc_glTexCoord1hvNV glTexCoord1hvNV;
-  GdkGLProc_glTexCoord2hNV glTexCoord2hNV;
-  GdkGLProc_glTexCoord2hvNV glTexCoord2hvNV;
-  GdkGLProc_glTexCoord3hNV glTexCoord3hNV;
-  GdkGLProc_glTexCoord3hvNV glTexCoord3hvNV;
-  GdkGLProc_glTexCoord4hNV glTexCoord4hNV;
-  GdkGLProc_glTexCoord4hvNV glTexCoord4hvNV;
-  GdkGLProc_glMultiTexCoord1hNV glMultiTexCoord1hNV;
-  GdkGLProc_glMultiTexCoord1hvNV glMultiTexCoord1hvNV;
-  GdkGLProc_glMultiTexCoord2hNV glMultiTexCoord2hNV;
-  GdkGLProc_glMultiTexCoord2hvNV glMultiTexCoord2hvNV;
-  GdkGLProc_glMultiTexCoord3hNV glMultiTexCoord3hNV;
-  GdkGLProc_glMultiTexCoord3hvNV glMultiTexCoord3hvNV;
-  GdkGLProc_glMultiTexCoord4hNV glMultiTexCoord4hNV;
-  GdkGLProc_glMultiTexCoord4hvNV glMultiTexCoord4hvNV;
-  GdkGLProc_glFogCoordhNV glFogCoordhNV;
-  GdkGLProc_glFogCoordhvNV glFogCoordhvNV;
-  GdkGLProc_glSecondaryColor3hNV glSecondaryColor3hNV;
-  GdkGLProc_glSecondaryColor3hvNV glSecondaryColor3hvNV;
-  GdkGLProc_glVertexWeighthNV glVertexWeighthNV;
-  GdkGLProc_glVertexWeighthvNV glVertexWeighthvNV;
-  GdkGLProc_glVertexAttrib1hNV glVertexAttrib1hNV;
-  GdkGLProc_glVertexAttrib1hvNV glVertexAttrib1hvNV;
-  GdkGLProc_glVertexAttrib2hNV glVertexAttrib2hNV;
-  GdkGLProc_glVertexAttrib2hvNV glVertexAttrib2hvNV;
-  GdkGLProc_glVertexAttrib3hNV glVertexAttrib3hNV;
-  GdkGLProc_glVertexAttrib3hvNV glVertexAttrib3hvNV;
-  GdkGLProc_glVertexAttrib4hNV glVertexAttrib4hNV;
-  GdkGLProc_glVertexAttrib4hvNV glVertexAttrib4hvNV;
-  GdkGLProc_glVertexAttribs1hvNV glVertexAttribs1hvNV;
-  GdkGLProc_glVertexAttribs2hvNV glVertexAttribs2hvNV;
-  GdkGLProc_glVertexAttribs3hvNV glVertexAttribs3hvNV;
-  GdkGLProc_glVertexAttribs4hvNV glVertexAttribs4hvNV;
+  GdkGLProc_glBeginTransformFeedbackEXT glBeginTransformFeedbackEXT;
+  GdkGLProc_glEndTransformFeedbackEXT glEndTransformFeedbackEXT;
+  GdkGLProc_glBindBufferRangeEXT glBindBufferRangeEXT;
+  GdkGLProc_glBindBufferOffsetEXT glBindBufferOffsetEXT;
+  GdkGLProc_glBindBufferBaseEXT glBindBufferBaseEXT;
+  GdkGLProc_glTransformFeedbackVaryingsEXT glTransformFeedbackVaryingsEXT;
+  GdkGLProc_glGetTransformFeedbackVaryingEXT glGetTransformFeedbackVaryingEXT;
 };
 
-GdkGL_GL_NV_half_float *gdk_gl_get_GL_NV_half_float (void);
+GdkGL_GL_EXT_transform_feedback *gdk_gl_get_GL_EXT_transform_feedback (void);
 
 /*
- * GL_NV_pixel_data_range
+ * GL_EXT_direct_state_access
  */
 
-/* glPixelDataRangeNV */
-typedef void (APIENTRY * GdkGLProc_glPixelDataRangeNV) (GLenum target, GLsizei length, GLvoid *pointer);
-GdkGLProc    gdk_gl_get_glPixelDataRangeNV (void);
-#define      gdk_gl_glPixelDataRangeNV(proc, target, length, pointer) \
-  ( ((GdkGLProc_glPixelDataRangeNV) (proc)) (target, length, pointer) )
-
-/* glFlushPixelDataRangeNV */
-typedef void (APIENTRY * GdkGLProc_glFlushPixelDataRangeNV) (GLenum target);
-GdkGLProc    gdk_gl_get_glFlushPixelDataRangeNV (void);
-#define      gdk_gl_glFlushPixelDataRangeNV(proc, target) \
-  ( ((GdkGLProc_glFlushPixelDataRangeNV) (proc)) (target) )
+/* glClientAttribDefaultEXT */
+typedef void (APIENTRYP GdkGLProc_glClientAttribDefaultEXT) (GLbitfield mask);
+GdkGLProc    gdk_gl_get_glClientAttribDefaultEXT (void);
+#define      gdk_gl_glClientAttribDefaultEXT(proc, mask) \
+  ( ((GdkGLProc_glClientAttribDefaultEXT) (proc)) (mask) )
+
+/* glPushClientAttribDefaultEXT */
+typedef void (APIENTRYP GdkGLProc_glPushClientAttribDefaultEXT) (GLbitfield mask);
+GdkGLProc    gdk_gl_get_glPushClientAttribDefaultEXT (void);
+#define      gdk_gl_glPushClientAttribDefaultEXT(proc, mask) \
+  ( ((GdkGLProc_glPushClientAttribDefaultEXT) (proc)) (mask) )
+
+/* glMatrixLoadfEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixLoadfEXT) (GLenum mode, const GLfloat *m);
+GdkGLProc    gdk_gl_get_glMatrixLoadfEXT (void);
+#define      gdk_gl_glMatrixLoadfEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixLoadfEXT) (proc)) (mode, m) )
+
+/* glMatrixLoaddEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixLoaddEXT) (GLenum mode, const GLdouble *m);
+GdkGLProc    gdk_gl_get_glMatrixLoaddEXT (void);
+#define      gdk_gl_glMatrixLoaddEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixLoaddEXT) (proc)) (mode, m) )
+
+/* glMatrixMultfEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixMultfEXT) (GLenum mode, const GLfloat *m);
+GdkGLProc    gdk_gl_get_glMatrixMultfEXT (void);
+#define      gdk_gl_glMatrixMultfEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixMultfEXT) (proc)) (mode, m) )
+
+/* glMatrixMultdEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixMultdEXT) (GLenum mode, const GLdouble *m);
+GdkGLProc    gdk_gl_get_glMatrixMultdEXT (void);
+#define      gdk_gl_glMatrixMultdEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixMultdEXT) (proc)) (mode, m) )
+
+/* glMatrixLoadIdentityEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixLoadIdentityEXT) (GLenum mode);
+GdkGLProc    gdk_gl_get_glMatrixLoadIdentityEXT (void);
+#define      gdk_gl_glMatrixLoadIdentityEXT(proc, mode) \
+  ( ((GdkGLProc_glMatrixLoadIdentityEXT) (proc)) (mode) )
+
+/* glMatrixRotatefEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixRotatefEXT) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glMatrixRotatefEXT (void);
+#define      gdk_gl_glMatrixRotatefEXT(proc, mode, angle, x, y, z) \
+  ( ((GdkGLProc_glMatrixRotatefEXT) (proc)) (mode, angle, x, y, z) )
+
+/* glMatrixRotatedEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixRotatedEXT) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
+GdkGLProc    gdk_gl_get_glMatrixRotatedEXT (void);
+#define      gdk_gl_glMatrixRotatedEXT(proc, mode, angle, x, y, z) \
+  ( ((GdkGLProc_glMatrixRotatedEXT) (proc)) (mode, angle, x, y, z) )
+
+/* glMatrixScalefEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixScalefEXT) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glMatrixScalefEXT (void);
+#define      gdk_gl_glMatrixScalefEXT(proc, mode, x, y, z) \
+  ( ((GdkGLProc_glMatrixScalefEXT) (proc)) (mode, x, y, z) )
+
+/* glMatrixScaledEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixScaledEXT) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+GdkGLProc    gdk_gl_get_glMatrixScaledEXT (void);
+#define      gdk_gl_glMatrixScaledEXT(proc, mode, x, y, z) \
+  ( ((GdkGLProc_glMatrixScaledEXT) (proc)) (mode, x, y, z) )
+
+/* glMatrixTranslatefEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixTranslatefEXT) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+GdkGLProc    gdk_gl_get_glMatrixTranslatefEXT (void);
+#define      gdk_gl_glMatrixTranslatefEXT(proc, mode, x, y, z) \
+  ( ((GdkGLProc_glMatrixTranslatefEXT) (proc)) (mode, x, y, z) )
+
+/* glMatrixTranslatedEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixTranslatedEXT) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+GdkGLProc    gdk_gl_get_glMatrixTranslatedEXT (void);
+#define      gdk_gl_glMatrixTranslatedEXT(proc, mode, x, y, z) \
+  ( ((GdkGLProc_glMatrixTranslatedEXT) (proc)) (mode, x, y, z) )
+
+/* glMatrixFrustumEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixFrustumEXT) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+GdkGLProc    gdk_gl_get_glMatrixFrustumEXT (void);
+#define      gdk_gl_glMatrixFrustumEXT(proc, mode, left, right, bottom, top, zNear, zFar) \
+  ( ((GdkGLProc_glMatrixFrustumEXT) (proc)) (mode, left, right, bottom, top, zNear, zFar) )
+
+/* glMatrixOrthoEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixOrthoEXT) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+GdkGLProc    gdk_gl_get_glMatrixOrthoEXT (void);
+#define      gdk_gl_glMatrixOrthoEXT(proc, mode, left, right, bottom, top, zNear, zFar) \
+  ( ((GdkGLProc_glMatrixOrthoEXT) (proc)) (mode, left, right, bottom, top, zNear, zFar) )
+
+/* glMatrixPopEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixPopEXT) (GLenum mode);
+GdkGLProc    gdk_gl_get_glMatrixPopEXT (void);
+#define      gdk_gl_glMatrixPopEXT(proc, mode) \
+  ( ((GdkGLProc_glMatrixPopEXT) (proc)) (mode) )
+
+/* glMatrixPushEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixPushEXT) (GLenum mode);
+GdkGLProc    gdk_gl_get_glMatrixPushEXT (void);
+#define      gdk_gl_glMatrixPushEXT(proc, mode) \
+  ( ((GdkGLProc_glMatrixPushEXT) (proc)) (mode) )
+
+/* glMatrixLoadTransposefEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixLoadTransposefEXT) (GLenum mode, const GLfloat *m);
+GdkGLProc    gdk_gl_get_glMatrixLoadTransposefEXT (void);
+#define      gdk_gl_glMatrixLoadTransposefEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixLoadTransposefEXT) (proc)) (mode, m) )
+
+/* glMatrixLoadTransposedEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixLoadTransposedEXT) (GLenum mode, const GLdouble *m);
+GdkGLProc    gdk_gl_get_glMatrixLoadTransposedEXT (void);
+#define      gdk_gl_glMatrixLoadTransposedEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixLoadTransposedEXT) (proc)) (mode, m) )
+
+/* glMatrixMultTransposefEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixMultTransposefEXT) (GLenum mode, const GLfloat *m);
+GdkGLProc    gdk_gl_get_glMatrixMultTransposefEXT (void);
+#define      gdk_gl_glMatrixMultTransposefEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixMultTransposefEXT) (proc)) (mode, m) )
+
+/* glMatrixMultTransposedEXT */
+typedef void (APIENTRYP GdkGLProc_glMatrixMultTransposedEXT) (GLenum mode, const GLdouble *m);
+GdkGLProc    gdk_gl_get_glMatrixMultTransposedEXT (void);
+#define      gdk_gl_glMatrixMultTransposedEXT(proc, mode, m) \
+  ( ((GdkGLProc_glMatrixMultTransposedEXT) (proc)) (mode, m) )
+
+/* glTextureParameterfEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureParameterfEXT) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glTextureParameterfEXT (void);
+#define      gdk_gl_glTextureParameterfEXT(proc, texture, target, pname, param) \
+  ( ((GdkGLProc_glTextureParameterfEXT) (proc)) (texture, target, pname, param) )
+
+/* glTextureParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureParameterfvEXT) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glTextureParameterfvEXT (void);
+#define      gdk_gl_glTextureParameterfvEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glTextureParameterfvEXT) (proc)) (texture, target, pname, params) )
+
+/* glTextureParameteriEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureParameteriEXT) (GLuint texture, GLenum target, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glTextureParameteriEXT (void);
+#define      gdk_gl_glTextureParameteriEXT(proc, texture, target, pname, param) \
+  ( ((GdkGLProc_glTextureParameteriEXT) (proc)) (texture, target, pname, param) )
+
+/* glTextureParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureParameterivEXT) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glTextureParameterivEXT (void);
+#define      gdk_gl_glTextureParameterivEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glTextureParameterivEXT) (proc)) (texture, target, pname, params) )
+
+/* glTextureImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTextureImage1DEXT (void);
+#define      gdk_gl_glTextureImage1DEXT(proc, texture, target, level, internalformat, width, border, format, type, pixels) \
+  ( ((GdkGLProc_glTextureImage1DEXT) (proc)) (texture, target, level, internalformat, width, border, format, type, pixels) )
+
+/* glTextureImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTextureImage2DEXT (void);
+#define      gdk_gl_glTextureImage2DEXT(proc, texture, target, level, internalformat, width, height, border, format, type, pixels) \
+  ( ((GdkGLProc_glTextureImage2DEXT) (proc)) (texture, target, level, internalformat, width, height, border, format, type, pixels) )
+
+/* glTextureSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTextureSubImage1DEXT (void);
+#define      gdk_gl_glTextureSubImage1DEXT(proc, texture, target, level, xoffset, width, format, type, pixels) \
+  ( ((GdkGLProc_glTextureSubImage1DEXT) (proc)) (texture, target, level, xoffset, width, format, type, pixels) )
+
+/* glTextureSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTextureSubImage2DEXT (void);
+#define      gdk_gl_glTextureSubImage2DEXT(proc, texture, target, level, xoffset, yoffset, width, height, format, type, pixels) \
+  ( ((GdkGLProc_glTextureSubImage2DEXT) (proc)) (texture, target, level, xoffset, yoffset, width, height, format, type, pixels) )
+
+/* glCopyTextureImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+GdkGLProc    gdk_gl_get_glCopyTextureImage1DEXT (void);
+#define      gdk_gl_glCopyTextureImage1DEXT(proc, texture, target, level, internalformat, x, y, width, border) \
+  ( ((GdkGLProc_glCopyTextureImage1DEXT) (proc)) (texture, target, level, internalformat, x, y, width, border) )
+
+/* glCopyTextureImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+GdkGLProc    gdk_gl_get_glCopyTextureImage2DEXT (void);
+#define      gdk_gl_glCopyTextureImage2DEXT(proc, texture, target, level, internalformat, x, y, width, height, border) \
+  ( ((GdkGLProc_glCopyTextureImage2DEXT) (proc)) (texture, target, level, internalformat, x, y, width, height, border) )
+
+/* glCopyTextureSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+GdkGLProc    gdk_gl_get_glCopyTextureSubImage1DEXT (void);
+#define      gdk_gl_glCopyTextureSubImage1DEXT(proc, texture, target, level, xoffset, x, y, width) \
+  ( ((GdkGLProc_glCopyTextureSubImage1DEXT) (proc)) (texture, target, level, xoffset, x, y, width) )
+
+/* glCopyTextureSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyTextureSubImage2DEXT (void);
+#define      gdk_gl_glCopyTextureSubImage2DEXT(proc, texture, target, level, xoffset, yoffset, x, y, width, height) \
+  ( ((GdkGLProc_glCopyTextureSubImage2DEXT) (proc)) (texture, target, level, xoffset, yoffset, x, y, width, height) )
+
+/* glGetTextureImageEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTextureImageEXT) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glGetTextureImageEXT (void);
+#define      gdk_gl_glGetTextureImageEXT(proc, texture, target, level, format, type, pixels) \
+  ( ((GdkGLProc_glGetTextureImageEXT) (proc)) (texture, target, level, format, type, pixels) )
+
+/* glGetTextureParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTextureParameterfvEXT) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetTextureParameterfvEXT (void);
+#define      gdk_gl_glGetTextureParameterfvEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glGetTextureParameterfvEXT) (proc)) (texture, target, pname, params) )
+
+/* glGetTextureParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTextureParameterivEXT) (GLuint texture, GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetTextureParameterivEXT (void);
+#define      gdk_gl_glGetTextureParameterivEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glGetTextureParameterivEXT) (proc)) (texture, target, pname, params) )
+
+/* glGetTextureLevelParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTextureLevelParameterfvEXT) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetTextureLevelParameterfvEXT (void);
+#define      gdk_gl_glGetTextureLevelParameterfvEXT(proc, texture, target, level, pname, params) \
+  ( ((GdkGLProc_glGetTextureLevelParameterfvEXT) (proc)) (texture, target, level, pname, params) )
+
+/* glGetTextureLevelParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTextureLevelParameterivEXT) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetTextureLevelParameterivEXT (void);
+#define      gdk_gl_glGetTextureLevelParameterivEXT(proc, texture, target, level, pname, params) \
+  ( ((GdkGLProc_glGetTextureLevelParameterivEXT) (proc)) (texture, target, level, pname, params) )
+
+/* glTextureImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureImage3DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTextureImage3DEXT (void);
+#define      gdk_gl_glTextureImage3DEXT(proc, texture, target, level, internalformat, width, height, depth, border, format, type, pixels) \
+  ( ((GdkGLProc_glTextureImage3DEXT) (proc)) (texture, target, level, internalformat, width, height, depth, border, format, type, pixels) )
+
+/* glTextureSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glTextureSubImage3DEXT (void);
+#define      gdk_gl_glTextureSubImage3DEXT(proc, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) \
+  ( ((GdkGLProc_glTextureSubImage3DEXT) (proc)) (texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) )
+
+/* glCopyTextureSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyTextureSubImage3DEXT (void);
+#define      gdk_gl_glCopyTextureSubImage3DEXT(proc, texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) \
+  ( ((GdkGLProc_glCopyTextureSubImage3DEXT) (proc)) (texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) )
+
+/* glMultiTexParameterfEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexParameterfEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glMultiTexParameterfEXT (void);
+#define      gdk_gl_glMultiTexParameterfEXT(proc, texunit, target, pname, param) \
+  ( ((GdkGLProc_glMultiTexParameterfEXT) (proc)) (texunit, target, pname, param) )
+
+/* glMultiTexParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexParameterfvEXT) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glMultiTexParameterfvEXT (void);
+#define      gdk_gl_glMultiTexParameterfvEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glMultiTexParameterfvEXT) (proc)) (texunit, target, pname, params) )
+
+/* glMultiTexParameteriEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexParameteriEXT) (GLenum texunit, GLenum target, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glMultiTexParameteriEXT (void);
+#define      gdk_gl_glMultiTexParameteriEXT(proc, texunit, target, pname, param) \
+  ( ((GdkGLProc_glMultiTexParameteriEXT) (proc)) (texunit, target, pname, param) )
+
+/* glMultiTexParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexParameterivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glMultiTexParameterivEXT (void);
+#define      gdk_gl_glMultiTexParameterivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glMultiTexParameterivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glMultiTexImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glMultiTexImage1DEXT (void);
+#define      gdk_gl_glMultiTexImage1DEXT(proc, texunit, target, level, internalformat, width, border, format, type, pixels) \
+  ( ((GdkGLProc_glMultiTexImage1DEXT) (proc)) (texunit, target, level, internalformat, width, border, format, type, pixels) )
+
+/* glMultiTexImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glMultiTexImage2DEXT (void);
+#define      gdk_gl_glMultiTexImage2DEXT(proc, texunit, target, level, internalformat, width, height, border, format, type, pixels) \
+  ( ((GdkGLProc_glMultiTexImage2DEXT) (proc)) (texunit, target, level, internalformat, width, height, border, format, type, pixels) )
+
+/* glMultiTexSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glMultiTexSubImage1DEXT (void);
+#define      gdk_gl_glMultiTexSubImage1DEXT(proc, texunit, target, level, xoffset, width, format, type, pixels) \
+  ( ((GdkGLProc_glMultiTexSubImage1DEXT) (proc)) (texunit, target, level, xoffset, width, format, type, pixels) )
+
+/* glMultiTexSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glMultiTexSubImage2DEXT (void);
+#define      gdk_gl_glMultiTexSubImage2DEXT(proc, texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) \
+  ( ((GdkGLProc_glMultiTexSubImage2DEXT) (proc)) (texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) )
+
+/* glCopyMultiTexImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+GdkGLProc    gdk_gl_get_glCopyMultiTexImage1DEXT (void);
+#define      gdk_gl_glCopyMultiTexImage1DEXT(proc, texunit, target, level, internalformat, x, y, width, border) \
+  ( ((GdkGLProc_glCopyMultiTexImage1DEXT) (proc)) (texunit, target, level, internalformat, x, y, width, border) )
+
+/* glCopyMultiTexImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+GdkGLProc    gdk_gl_get_glCopyMultiTexImage2DEXT (void);
+#define      gdk_gl_glCopyMultiTexImage2DEXT(proc, texunit, target, level, internalformat, x, y, width, height, border) \
+  ( ((GdkGLProc_glCopyMultiTexImage2DEXT) (proc)) (texunit, target, level, internalformat, x, y, width, height, border) )
+
+/* glCopyMultiTexSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+GdkGLProc    gdk_gl_get_glCopyMultiTexSubImage1DEXT (void);
+#define      gdk_gl_glCopyMultiTexSubImage1DEXT(proc, texunit, target, level, xoffset, x, y, width) \
+  ( ((GdkGLProc_glCopyMultiTexSubImage1DEXT) (proc)) (texunit, target, level, xoffset, x, y, width) )
+
+/* glCopyMultiTexSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyMultiTexSubImage2DEXT (void);
+#define      gdk_gl_glCopyMultiTexSubImage2DEXT(proc, texunit, target, level, xoffset, yoffset, x, y, width, height) \
+  ( ((GdkGLProc_glCopyMultiTexSubImage2DEXT) (proc)) (texunit, target, level, xoffset, yoffset, x, y, width, height) )
+
+/* glGetMultiTexImageEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexImageEXT) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glGetMultiTexImageEXT (void);
+#define      gdk_gl_glGetMultiTexImageEXT(proc, texunit, target, level, format, type, pixels) \
+  ( ((GdkGLProc_glGetMultiTexImageEXT) (proc)) (texunit, target, level, format, type, pixels) )
+
+/* glGetMultiTexParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexParameterfvEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexParameterfvEXT (void);
+#define      gdk_gl_glGetMultiTexParameterfvEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexParameterfvEXT) (proc)) (texunit, target, pname, params) )
+
+/* glGetMultiTexParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexParameterivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexParameterivEXT (void);
+#define      gdk_gl_glGetMultiTexParameterivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexParameterivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glGetMultiTexLevelParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexLevelParameterfvEXT) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexLevelParameterfvEXT (void);
+#define      gdk_gl_glGetMultiTexLevelParameterfvEXT(proc, texunit, target, level, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexLevelParameterfvEXT) (proc)) (texunit, target, level, pname, params) )
+
+/* glGetMultiTexLevelParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexLevelParameterivEXT) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexLevelParameterivEXT (void);
+#define      gdk_gl_glGetMultiTexLevelParameterivEXT(proc, texunit, target, level, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexLevelParameterivEXT) (proc)) (texunit, target, level, pname, params) )
+
+/* glMultiTexImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glMultiTexImage3DEXT (void);
+#define      gdk_gl_glMultiTexImage3DEXT(proc, texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) \
+  ( ((GdkGLProc_glMultiTexImage3DEXT) (proc)) (texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) )
+
+/* glMultiTexSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+GdkGLProc    gdk_gl_get_glMultiTexSubImage3DEXT (void);
+#define      gdk_gl_glMultiTexSubImage3DEXT(proc, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) \
+  ( ((GdkGLProc_glMultiTexSubImage3DEXT) (proc)) (texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) )
+
+/* glCopyMultiTexSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glCopyMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glCopyMultiTexSubImage3DEXT (void);
+#define      gdk_gl_glCopyMultiTexSubImage3DEXT(proc, texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) \
+  ( ((GdkGLProc_glCopyMultiTexSubImage3DEXT) (proc)) (texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) )
+
+/* glBindMultiTextureEXT */
+typedef void (APIENTRYP GdkGLProc_glBindMultiTextureEXT) (GLenum texunit, GLenum target, GLuint texture);
+GdkGLProc    gdk_gl_get_glBindMultiTextureEXT (void);
+#define      gdk_gl_glBindMultiTextureEXT(proc, texunit, target, texture) \
+  ( ((GdkGLProc_glBindMultiTextureEXT) (proc)) (texunit, target, texture) )
+
+/* glEnableClientStateIndexedEXT */
+typedef void (APIENTRYP GdkGLProc_glEnableClientStateIndexedEXT) (GLenum array, GLuint index);
+GdkGLProc    gdk_gl_get_glEnableClientStateIndexedEXT (void);
+#define      gdk_gl_glEnableClientStateIndexedEXT(proc, array, index) \
+  ( ((GdkGLProc_glEnableClientStateIndexedEXT) (proc)) (array, index) )
+
+/* glDisableClientStateIndexedEXT */
+typedef void (APIENTRYP GdkGLProc_glDisableClientStateIndexedEXT) (GLenum array, GLuint index);
+GdkGLProc    gdk_gl_get_glDisableClientStateIndexedEXT (void);
+#define      gdk_gl_glDisableClientStateIndexedEXT(proc, array, index) \
+  ( ((GdkGLProc_glDisableClientStateIndexedEXT) (proc)) (array, index) )
+
+/* glMultiTexCoordPointerEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexCoordPointerEXT) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+GdkGLProc    gdk_gl_get_glMultiTexCoordPointerEXT (void);
+#define      gdk_gl_glMultiTexCoordPointerEXT(proc, texunit, size, type, stride, pointer) \
+  ( ((GdkGLProc_glMultiTexCoordPointerEXT) (proc)) (texunit, size, type, stride, pointer) )
+
+/* glMultiTexEnvfEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexEnvfEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glMultiTexEnvfEXT (void);
+#define      gdk_gl_glMultiTexEnvfEXT(proc, texunit, target, pname, param) \
+  ( ((GdkGLProc_glMultiTexEnvfEXT) (proc)) (texunit, target, pname, param) )
+
+/* glMultiTexEnvfvEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexEnvfvEXT) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glMultiTexEnvfvEXT (void);
+#define      gdk_gl_glMultiTexEnvfvEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glMultiTexEnvfvEXT) (proc)) (texunit, target, pname, params) )
+
+/* glMultiTexEnviEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexEnviEXT) (GLenum texunit, GLenum target, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glMultiTexEnviEXT (void);
+#define      gdk_gl_glMultiTexEnviEXT(proc, texunit, target, pname, param) \
+  ( ((GdkGLProc_glMultiTexEnviEXT) (proc)) (texunit, target, pname, param) )
+
+/* glMultiTexEnvivEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexEnvivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glMultiTexEnvivEXT (void);
+#define      gdk_gl_glMultiTexEnvivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glMultiTexEnvivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glMultiTexGendEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexGendEXT) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
+GdkGLProc    gdk_gl_get_glMultiTexGendEXT (void);
+#define      gdk_gl_glMultiTexGendEXT(proc, texunit, coord, pname, param) \
+  ( ((GdkGLProc_glMultiTexGendEXT) (proc)) (texunit, coord, pname, param) )
+
+/* glMultiTexGendvEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexGendvEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
+GdkGLProc    gdk_gl_get_glMultiTexGendvEXT (void);
+#define      gdk_gl_glMultiTexGendvEXT(proc, texunit, coord, pname, params) \
+  ( ((GdkGLProc_glMultiTexGendvEXT) (proc)) (texunit, coord, pname, params) )
+
+/* glMultiTexGenfEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexGenfEXT) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
+GdkGLProc    gdk_gl_get_glMultiTexGenfEXT (void);
+#define      gdk_gl_glMultiTexGenfEXT(proc, texunit, coord, pname, param) \
+  ( ((GdkGLProc_glMultiTexGenfEXT) (proc)) (texunit, coord, pname, param) )
+
+/* glMultiTexGenfvEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexGenfvEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glMultiTexGenfvEXT (void);
+#define      gdk_gl_glMultiTexGenfvEXT(proc, texunit, coord, pname, params) \
+  ( ((GdkGLProc_glMultiTexGenfvEXT) (proc)) (texunit, coord, pname, params) )
+
+/* glMultiTexGeniEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexGeniEXT) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
+GdkGLProc    gdk_gl_get_glMultiTexGeniEXT (void);
+#define      gdk_gl_glMultiTexGeniEXT(proc, texunit, coord, pname, param) \
+  ( ((GdkGLProc_glMultiTexGeniEXT) (proc)) (texunit, coord, pname, param) )
+
+/* glMultiTexGenivEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexGenivEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glMultiTexGenivEXT (void);
+#define      gdk_gl_glMultiTexGenivEXT(proc, texunit, coord, pname, params) \
+  ( ((GdkGLProc_glMultiTexGenivEXT) (proc)) (texunit, coord, pname, params) )
+
+/* glGetMultiTexEnvfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexEnvfvEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexEnvfvEXT (void);
+#define      gdk_gl_glGetMultiTexEnvfvEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexEnvfvEXT) (proc)) (texunit, target, pname, params) )
+
+/* glGetMultiTexEnvivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexEnvivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexEnvivEXT (void);
+#define      gdk_gl_glGetMultiTexEnvivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexEnvivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glGetMultiTexGendvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexGendvEXT) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexGendvEXT (void);
+#define      gdk_gl_glGetMultiTexGendvEXT(proc, texunit, coord, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexGendvEXT) (proc)) (texunit, coord, pname, params) )
+
+/* glGetMultiTexGenfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexGenfvEXT) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexGenfvEXT (void);
+#define      gdk_gl_glGetMultiTexGenfvEXT(proc, texunit, coord, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexGenfvEXT) (proc)) (texunit, coord, pname, params) )
+
+/* glGetMultiTexGenivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexGenivEXT) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexGenivEXT (void);
+#define      gdk_gl_glGetMultiTexGenivEXT(proc, texunit, coord, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexGenivEXT) (proc)) (texunit, coord, pname, params) )
+
+/* glGetFloatIndexedvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetFloatIndexedvEXT) (GLenum target, GLuint index, GLfloat *data);
+GdkGLProc    gdk_gl_get_glGetFloatIndexedvEXT (void);
+#define      gdk_gl_glGetFloatIndexedvEXT(proc, target, index, data) \
+  ( ((GdkGLProc_glGetFloatIndexedvEXT) (proc)) (target, index, data) )
+
+/* glGetDoubleIndexedvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetDoubleIndexedvEXT) (GLenum target, GLuint index, GLdouble *data);
+GdkGLProc    gdk_gl_get_glGetDoubleIndexedvEXT (void);
+#define      gdk_gl_glGetDoubleIndexedvEXT(proc, target, index, data) \
+  ( ((GdkGLProc_glGetDoubleIndexedvEXT) (proc)) (target, index, data) )
+
+/* glGetPointerIndexedvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetPointerIndexedvEXT) (GLenum target, GLuint index, GLvoid* *data);
+GdkGLProc    gdk_gl_get_glGetPointerIndexedvEXT (void);
+#define      gdk_gl_glGetPointerIndexedvEXT(proc, target, index, data) \
+  ( ((GdkGLProc_glGetPointerIndexedvEXT) (proc)) (target, index, data) )
+
+/* glCompressedTextureImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedTextureImage3DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedTextureImage3DEXT (void);
+#define      gdk_gl_glCompressedTextureImage3DEXT(proc, texture, target, level, internalformat, width, height, depth, border, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedTextureImage3DEXT) (proc)) (texture, target, level, internalformat, width, height, depth, border, imageSize, bits) )
+
+/* glCompressedTextureImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedTextureImage2DEXT (void);
+#define      gdk_gl_glCompressedTextureImage2DEXT(proc, texture, target, level, internalformat, width, height, border, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedTextureImage2DEXT) (proc)) (texture, target, level, internalformat, width, height, border, imageSize, bits) )
+
+/* glCompressedTextureImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedTextureImage1DEXT (void);
+#define      gdk_gl_glCompressedTextureImage1DEXT(proc, texture, target, level, internalformat, width, border, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedTextureImage1DEXT) (proc)) (texture, target, level, internalformat, width, border, imageSize, bits) )
+
+/* glCompressedTextureSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedTextureSubImage3DEXT (void);
+#define      gdk_gl_glCompressedTextureSubImage3DEXT(proc, texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedTextureSubImage3DEXT) (proc)) (texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) )
+
+/* glCompressedTextureSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedTextureSubImage2DEXT (void);
+#define      gdk_gl_glCompressedTextureSubImage2DEXT(proc, texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedTextureSubImage2DEXT) (proc)) (texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) )
+
+/* glCompressedTextureSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedTextureSubImage1DEXT (void);
+#define      gdk_gl_glCompressedTextureSubImage1DEXT(proc, texture, target, level, xoffset, width, format, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedTextureSubImage1DEXT) (proc)) (texture, target, level, xoffset, width, format, imageSize, bits) )
+
+/* glGetCompressedTextureImageEXT */
+typedef void (APIENTRYP GdkGLProc_glGetCompressedTextureImageEXT) (GLuint texture, GLenum target, GLint lod, GLvoid *img);
+GdkGLProc    gdk_gl_get_glGetCompressedTextureImageEXT (void);
+#define      gdk_gl_glGetCompressedTextureImageEXT(proc, texture, target, lod, img) \
+  ( ((GdkGLProc_glGetCompressedTextureImageEXT) (proc)) (texture, target, lod, img) )
+
+/* glCompressedMultiTexImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedMultiTexImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedMultiTexImage3DEXT (void);
+#define      gdk_gl_glCompressedMultiTexImage3DEXT(proc, texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedMultiTexImage3DEXT) (proc)) (texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) )
+
+/* glCompressedMultiTexImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedMultiTexImage2DEXT (void);
+#define      gdk_gl_glCompressedMultiTexImage2DEXT(proc, texunit, target, level, internalformat, width, height, border, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedMultiTexImage2DEXT) (proc)) (texunit, target, level, internalformat, width, height, border, imageSize, bits) )
+
+/* glCompressedMultiTexImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedMultiTexImage1DEXT (void);
+#define      gdk_gl_glCompressedMultiTexImage1DEXT(proc, texunit, target, level, internalformat, width, border, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedMultiTexImage1DEXT) (proc)) (texunit, target, level, internalformat, width, border, imageSize, bits) )
+
+/* glCompressedMultiTexSubImage3DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedMultiTexSubImage3DEXT (void);
+#define      gdk_gl_glCompressedMultiTexSubImage3DEXT(proc, texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedMultiTexSubImage3DEXT) (proc)) (texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) )
+
+/* glCompressedMultiTexSubImage2DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedMultiTexSubImage2DEXT (void);
+#define      gdk_gl_glCompressedMultiTexSubImage2DEXT(proc, texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedMultiTexSubImage2DEXT) (proc)) (texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) )
+
+/* glCompressedMultiTexSubImage1DEXT */
+typedef void (APIENTRYP GdkGLProc_glCompressedMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+GdkGLProc    gdk_gl_get_glCompressedMultiTexSubImage1DEXT (void);
+#define      gdk_gl_glCompressedMultiTexSubImage1DEXT(proc, texunit, target, level, xoffset, width, format, imageSize, bits) \
+  ( ((GdkGLProc_glCompressedMultiTexSubImage1DEXT) (proc)) (texunit, target, level, xoffset, width, format, imageSize, bits) )
+
+/* glGetCompressedMultiTexImageEXT */
+typedef void (APIENTRYP GdkGLProc_glGetCompressedMultiTexImageEXT) (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
+GdkGLProc    gdk_gl_get_glGetCompressedMultiTexImageEXT (void);
+#define      gdk_gl_glGetCompressedMultiTexImageEXT(proc, texunit, target, lod, img) \
+  ( ((GdkGLProc_glGetCompressedMultiTexImageEXT) (proc)) (texunit, target, lod, img) )
+
+/* glNamedProgramStringEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramStringEXT) (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
+GdkGLProc    gdk_gl_get_glNamedProgramStringEXT (void);
+#define      gdk_gl_glNamedProgramStringEXT(proc, program, target, format, len, string) \
+  ( ((GdkGLProc_glNamedProgramStringEXT) (proc)) (program, target, format, len, string) )
+
+/* glNamedProgramLocalParameter4dEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameter4dEXT) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameter4dEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameter4dEXT(proc, program, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glNamedProgramLocalParameter4dEXT) (proc)) (program, target, index, x, y, z, w) )
+
+/* glNamedProgramLocalParameter4dvEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameter4dvEXT) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameter4dvEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameter4dvEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glNamedProgramLocalParameter4dvEXT) (proc)) (program, target, index, params) )
+
+/* glNamedProgramLocalParameter4fEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameter4fEXT) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameter4fEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameter4fEXT(proc, program, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glNamedProgramLocalParameter4fEXT) (proc)) (program, target, index, x, y, z, w) )
+
+/* glNamedProgramLocalParameter4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameter4fvEXT) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameter4fvEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameter4fvEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glNamedProgramLocalParameter4fvEXT) (proc)) (program, target, index, params) )
+
+/* glGetNamedProgramLocalParameterdvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedProgramLocalParameterdvEXT) (GLuint program, GLenum target, GLuint index, GLdouble *params);
+GdkGLProc    gdk_gl_get_glGetNamedProgramLocalParameterdvEXT (void);
+#define      gdk_gl_glGetNamedProgramLocalParameterdvEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glGetNamedProgramLocalParameterdvEXT) (proc)) (program, target, index, params) )
+
+/* glGetNamedProgramLocalParameterfvEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedProgramLocalParameterfvEXT) (GLuint program, GLenum target, GLuint index, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetNamedProgramLocalParameterfvEXT (void);
+#define      gdk_gl_glGetNamedProgramLocalParameterfvEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glGetNamedProgramLocalParameterfvEXT) (proc)) (program, target, index, params) )
+
+/* glGetNamedProgramivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedProgramivEXT) (GLuint program, GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetNamedProgramivEXT (void);
+#define      gdk_gl_glGetNamedProgramivEXT(proc, program, target, pname, params) \
+  ( ((GdkGLProc_glGetNamedProgramivEXT) (proc)) (program, target, pname, params) )
+
+/* glGetNamedProgramStringEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedProgramStringEXT) (GLuint program, GLenum target, GLenum pname, GLvoid *string);
+GdkGLProc    gdk_gl_get_glGetNamedProgramStringEXT (void);
+#define      gdk_gl_glGetNamedProgramStringEXT(proc, program, target, pname, string) \
+  ( ((GdkGLProc_glGetNamedProgramStringEXT) (proc)) (program, target, pname, string) )
+
+/* glNamedProgramLocalParameters4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameters4fvEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameters4fvEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameters4fvEXT(proc, program, target, index, count, params) \
+  ( ((GdkGLProc_glNamedProgramLocalParameters4fvEXT) (proc)) (program, target, index, count, params) )
+
+/* glNamedProgramLocalParameterI4iEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameterI4iEXT) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameterI4iEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameterI4iEXT(proc, program, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glNamedProgramLocalParameterI4iEXT) (proc)) (program, target, index, x, y, z, w) )
+
+/* glNamedProgramLocalParameterI4ivEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameterI4ivEXT) (GLuint program, GLenum target, GLuint index, const GLint *params);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameterI4ivEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameterI4ivEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glNamedProgramLocalParameterI4ivEXT) (proc)) (program, target, index, params) )
+
+/* glNamedProgramLocalParametersI4ivEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParametersI4ivEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParametersI4ivEXT (void);
+#define      gdk_gl_glNamedProgramLocalParametersI4ivEXT(proc, program, target, index, count, params) \
+  ( ((GdkGLProc_glNamedProgramLocalParametersI4ivEXT) (proc)) (program, target, index, count, params) )
+
+/* glNamedProgramLocalParameterI4uiEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameterI4uiEXT) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameterI4uiEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameterI4uiEXT(proc, program, target, index, x, y, z, w) \
+  ( ((GdkGLProc_glNamedProgramLocalParameterI4uiEXT) (proc)) (program, target, index, x, y, z, w) )
+
+/* glNamedProgramLocalParameterI4uivEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParameterI4uivEXT) (GLuint program, GLenum target, GLuint index, const GLuint *params);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParameterI4uivEXT (void);
+#define      gdk_gl_glNamedProgramLocalParameterI4uivEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glNamedProgramLocalParameterI4uivEXT) (proc)) (program, target, index, params) )
+
+/* glNamedProgramLocalParametersI4uivEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedProgramLocalParametersI4uivEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
+GdkGLProc    gdk_gl_get_glNamedProgramLocalParametersI4uivEXT (void);
+#define      gdk_gl_glNamedProgramLocalParametersI4uivEXT(proc, program, target, index, count, params) \
+  ( ((GdkGLProc_glNamedProgramLocalParametersI4uivEXT) (proc)) (program, target, index, count, params) )
+
+/* glGetNamedProgramLocalParameterIivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedProgramLocalParameterIivEXT) (GLuint program, GLenum target, GLuint index, GLint *params);
+GdkGLProc    gdk_gl_get_glGetNamedProgramLocalParameterIivEXT (void);
+#define      gdk_gl_glGetNamedProgramLocalParameterIivEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glGetNamedProgramLocalParameterIivEXT) (proc)) (program, target, index, params) )
+
+/* glGetNamedProgramLocalParameterIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedProgramLocalParameterIuivEXT) (GLuint program, GLenum target, GLuint index, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetNamedProgramLocalParameterIuivEXT (void);
+#define      gdk_gl_glGetNamedProgramLocalParameterIuivEXT(proc, program, target, index, params) \
+  ( ((GdkGLProc_glGetNamedProgramLocalParameterIuivEXT) (proc)) (program, target, index, params) )
+
+/* glTextureParameterIivEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureParameterIivEXT) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glTextureParameterIivEXT (void);
+#define      gdk_gl_glTextureParameterIivEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glTextureParameterIivEXT) (proc)) (texture, target, pname, params) )
+
+/* glTextureParameterIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureParameterIuivEXT) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
+GdkGLProc    gdk_gl_get_glTextureParameterIuivEXT (void);
+#define      gdk_gl_glTextureParameterIuivEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glTextureParameterIuivEXT) (proc)) (texture, target, pname, params) )
+
+/* glGetTextureParameterIivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTextureParameterIivEXT) (GLuint texture, GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetTextureParameterIivEXT (void);
+#define      gdk_gl_glGetTextureParameterIivEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glGetTextureParameterIivEXT) (proc)) (texture, target, pname, params) )
+
+/* glGetTextureParameterIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetTextureParameterIuivEXT) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetTextureParameterIuivEXT (void);
+#define      gdk_gl_glGetTextureParameterIuivEXT(proc, texture, target, pname, params) \
+  ( ((GdkGLProc_glGetTextureParameterIuivEXT) (proc)) (texture, target, pname, params) )
+
+/* glMultiTexParameterIivEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexParameterIivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glMultiTexParameterIivEXT (void);
+#define      gdk_gl_glMultiTexParameterIivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glMultiTexParameterIivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glMultiTexParameterIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexParameterIuivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
+GdkGLProc    gdk_gl_get_glMultiTexParameterIuivEXT (void);
+#define      gdk_gl_glMultiTexParameterIuivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glMultiTexParameterIuivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glGetMultiTexParameterIivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexParameterIivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexParameterIivEXT (void);
+#define      gdk_gl_glGetMultiTexParameterIivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexParameterIivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glGetMultiTexParameterIuivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetMultiTexParameterIuivEXT) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
+GdkGLProc    gdk_gl_get_glGetMultiTexParameterIuivEXT (void);
+#define      gdk_gl_glGetMultiTexParameterIuivEXT(proc, texunit, target, pname, params) \
+  ( ((GdkGLProc_glGetMultiTexParameterIuivEXT) (proc)) (texunit, target, pname, params) )
+
+/* glProgramUniform1fEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform1fEXT) (GLuint program, GLint location, GLfloat v0);
+GdkGLProc    gdk_gl_get_glProgramUniform1fEXT (void);
+#define      gdk_gl_glProgramUniform1fEXT(proc, program, location, v0) \
+  ( ((GdkGLProc_glProgramUniform1fEXT) (proc)) (program, location, v0) )
+
+/* glProgramUniform2fEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform2fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
+GdkGLProc    gdk_gl_get_glProgramUniform2fEXT (void);
+#define      gdk_gl_glProgramUniform2fEXT(proc, program, location, v0, v1) \
+  ( ((GdkGLProc_glProgramUniform2fEXT) (proc)) (program, location, v0, v1) )
+
+/* glProgramUniform3fEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform3fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+GdkGLProc    gdk_gl_get_glProgramUniform3fEXT (void);
+#define      gdk_gl_glProgramUniform3fEXT(proc, program, location, v0, v1, v2) \
+  ( ((GdkGLProc_glProgramUniform3fEXT) (proc)) (program, location, v0, v1, v2) )
+
+/* glProgramUniform4fEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform4fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+GdkGLProc    gdk_gl_get_glProgramUniform4fEXT (void);
+#define      gdk_gl_glProgramUniform4fEXT(proc, program, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glProgramUniform4fEXT) (proc)) (program, location, v0, v1, v2, v3) )
+
+/* glProgramUniform1iEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform1iEXT) (GLuint program, GLint location, GLint v0);
+GdkGLProc    gdk_gl_get_glProgramUniform1iEXT (void);
+#define      gdk_gl_glProgramUniform1iEXT(proc, program, location, v0) \
+  ( ((GdkGLProc_glProgramUniform1iEXT) (proc)) (program, location, v0) )
+
+/* glProgramUniform2iEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform2iEXT) (GLuint program, GLint location, GLint v0, GLint v1);
+GdkGLProc    gdk_gl_get_glProgramUniform2iEXT (void);
+#define      gdk_gl_glProgramUniform2iEXT(proc, program, location, v0, v1) \
+  ( ((GdkGLProc_glProgramUniform2iEXT) (proc)) (program, location, v0, v1) )
+
+/* glProgramUniform3iEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform3iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
+GdkGLProc    gdk_gl_get_glProgramUniform3iEXT (void);
+#define      gdk_gl_glProgramUniform3iEXT(proc, program, location, v0, v1, v2) \
+  ( ((GdkGLProc_glProgramUniform3iEXT) (proc)) (program, location, v0, v1, v2) )
+
+/* glProgramUniform4iEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform4iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+GdkGLProc    gdk_gl_get_glProgramUniform4iEXT (void);
+#define      gdk_gl_glProgramUniform4iEXT(proc, program, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glProgramUniform4iEXT) (proc)) (program, location, v0, v1, v2, v3) )
+
+/* glProgramUniform1fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform1fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniform1fvEXT (void);
+#define      gdk_gl_glProgramUniform1fvEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform1fvEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform2fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform2fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniform2fvEXT (void);
+#define      gdk_gl_glProgramUniform2fvEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform2fvEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform3fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform3fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniform3fvEXT (void);
+#define      gdk_gl_glProgramUniform3fvEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform3fvEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform4fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniform4fvEXT (void);
+#define      gdk_gl_glProgramUniform4fvEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform4fvEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform1ivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform1ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform1ivEXT (void);
+#define      gdk_gl_glProgramUniform1ivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform1ivEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform2ivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform2ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform2ivEXT (void);
+#define      gdk_gl_glProgramUniform2ivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform2ivEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform3ivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform3ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform3ivEXT (void);
+#define      gdk_gl_glProgramUniform3ivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform3ivEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform4ivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform4ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform4ivEXT (void);
+#define      gdk_gl_glProgramUniform4ivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform4ivEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniformMatrix2fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix2fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix2fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix2fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix3fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix3fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix3fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix3fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix4fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix4fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix4fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix2x3fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix2x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix2x3fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix2x3fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix2x3fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix3x2fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix3x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix3x2fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix3x2fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix3x2fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix2x4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix2x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix2x4fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix2x4fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix2x4fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix4x2fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix4x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix4x2fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix4x2fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix4x2fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix3x4fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix3x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix3x4fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix3x4fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix3x4fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniformMatrix4x3fvEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformMatrix4x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+GdkGLProc    gdk_gl_get_glProgramUniformMatrix4x3fvEXT (void);
+#define      gdk_gl_glProgramUniformMatrix4x3fvEXT(proc, program, location, count, transpose, value) \
+  ( ((GdkGLProc_glProgramUniformMatrix4x3fvEXT) (proc)) (program, location, count, transpose, value) )
+
+/* glProgramUniform1uiEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform1uiEXT) (GLuint program, GLint location, GLuint v0);
+GdkGLProc    gdk_gl_get_glProgramUniform1uiEXT (void);
+#define      gdk_gl_glProgramUniform1uiEXT(proc, program, location, v0) \
+  ( ((GdkGLProc_glProgramUniform1uiEXT) (proc)) (program, location, v0) )
+
+/* glProgramUniform2uiEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform2uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1);
+GdkGLProc    gdk_gl_get_glProgramUniform2uiEXT (void);
+#define      gdk_gl_glProgramUniform2uiEXT(proc, program, location, v0, v1) \
+  ( ((GdkGLProc_glProgramUniform2uiEXT) (proc)) (program, location, v0, v1) )
+
+/* glProgramUniform3uiEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform3uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
+GdkGLProc    gdk_gl_get_glProgramUniform3uiEXT (void);
+#define      gdk_gl_glProgramUniform3uiEXT(proc, program, location, v0, v1, v2) \
+  ( ((GdkGLProc_glProgramUniform3uiEXT) (proc)) (program, location, v0, v1, v2) )
+
+/* glProgramUniform4uiEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform4uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+GdkGLProc    gdk_gl_get_glProgramUniform4uiEXT (void);
+#define      gdk_gl_glProgramUniform4uiEXT(proc, program, location, v0, v1, v2, v3) \
+  ( ((GdkGLProc_glProgramUniform4uiEXT) (proc)) (program, location, v0, v1, v2, v3) )
+
+/* glProgramUniform1uivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform1uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform1uivEXT (void);
+#define      gdk_gl_glProgramUniform1uivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform1uivEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform2uivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform2uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform2uivEXT (void);
+#define      gdk_gl_glProgramUniform2uivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform2uivEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform3uivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform3uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform3uivEXT (void);
+#define      gdk_gl_glProgramUniform3uivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform3uivEXT) (proc)) (program, location, count, value) )
+
+/* glProgramUniform4uivEXT */
+typedef void (APIENTRYP GdkGLProc_glProgramUniform4uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+GdkGLProc    gdk_gl_get_glProgramUniform4uivEXT (void);
+#define      gdk_gl_glProgramUniform4uivEXT(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniform4uivEXT) (proc)) (program, location, count, value) )
+
+/* glNamedBufferDataEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedBufferDataEXT) (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
+GdkGLProc    gdk_gl_get_glNamedBufferDataEXT (void);
+#define      gdk_gl_glNamedBufferDataEXT(proc, buffer, size, data, usage) \
+  ( ((GdkGLProc_glNamedBufferDataEXT) (proc)) (buffer, size, data, usage) )
+
+/* glNamedBufferSubDataEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
+GdkGLProc    gdk_gl_get_glNamedBufferSubDataEXT (void);
+#define      gdk_gl_glNamedBufferSubDataEXT(proc, buffer, offset, size, data) \
+  ( ((GdkGLProc_glNamedBufferSubDataEXT) (proc)) (buffer, offset, size, data) )
+
+/* glMapNamedBufferEXT */
+typedef GLvoid* (APIENTRYP GdkGLProc_glMapNamedBufferEXT) (GLuint buffer, GLenum access);
+GdkGLProc    gdk_gl_get_glMapNamedBufferEXT (void);
+#define      gdk_gl_glMapNamedBufferEXT(proc, buffer, access) \
+  ( ((GdkGLProc_glMapNamedBufferEXT) (proc)) (buffer, access) )
+
+/* glUnmapNamedBufferEXT */
+typedef GLboolean (APIENTRYP GdkGLProc_glUnmapNamedBufferEXT) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glUnmapNamedBufferEXT (void);
+#define      gdk_gl_glUnmapNamedBufferEXT(proc, buffer) \
+  ( ((GdkGLProc_glUnmapNamedBufferEXT) (proc)) (buffer) )
+
+/* glGetNamedBufferParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedBufferParameterivEXT) (GLuint buffer, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetNamedBufferParameterivEXT (void);
+#define      gdk_gl_glGetNamedBufferParameterivEXT(proc, buffer, pname, params) \
+  ( ((GdkGLProc_glGetNamedBufferParameterivEXT) (proc)) (buffer, pname, params) )
+
+/* glGetNamedBufferPointervEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedBufferPointervEXT) (GLuint buffer, GLenum pname, GLvoid* *params);
+GdkGLProc    gdk_gl_get_glGetNamedBufferPointervEXT (void);
+#define      gdk_gl_glGetNamedBufferPointervEXT(proc, buffer, pname, params) \
+  ( ((GdkGLProc_glGetNamedBufferPointervEXT) (proc)) (buffer, pname, params) )
+
+/* glGetNamedBufferSubDataEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
+GdkGLProc    gdk_gl_get_glGetNamedBufferSubDataEXT (void);
+#define      gdk_gl_glGetNamedBufferSubDataEXT(proc, buffer, offset, size, data) \
+  ( ((GdkGLProc_glGetNamedBufferSubDataEXT) (proc)) (buffer, offset, size, data) )
+
+/* glTextureBufferEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureBufferEXT) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
+GdkGLProc    gdk_gl_get_glTextureBufferEXT (void);
+#define      gdk_gl_glTextureBufferEXT(proc, texture, target, internalformat, buffer) \
+  ( ((GdkGLProc_glTextureBufferEXT) (proc)) (texture, target, internalformat, buffer) )
+
+/* glMultiTexBufferEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexBufferEXT) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
+GdkGLProc    gdk_gl_get_glMultiTexBufferEXT (void);
+#define      gdk_gl_glMultiTexBufferEXT(proc, texunit, target, internalformat, buffer) \
+  ( ((GdkGLProc_glMultiTexBufferEXT) (proc)) (texunit, target, internalformat, buffer) )
+
+/* glNamedRenderbufferStorageEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedRenderbufferStorageEXT) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glNamedRenderbufferStorageEXT (void);
+#define      gdk_gl_glNamedRenderbufferStorageEXT(proc, renderbuffer, internalformat, width, height) \
+  ( ((GdkGLProc_glNamedRenderbufferStorageEXT) (proc)) (renderbuffer, internalformat, width, height) )
+
+/* glGetNamedRenderbufferParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedRenderbufferParameterivEXT) (GLuint renderbuffer, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetNamedRenderbufferParameterivEXT (void);
+#define      gdk_gl_glGetNamedRenderbufferParameterivEXT(proc, renderbuffer, pname, params) \
+  ( ((GdkGLProc_glGetNamedRenderbufferParameterivEXT) (proc)) (renderbuffer, pname, params) )
+
+/* glCheckNamedFramebufferStatusEXT */
+typedef GLenum (APIENTRYP GdkGLProc_glCheckNamedFramebufferStatusEXT) (GLuint framebuffer, GLenum target);
+GdkGLProc    gdk_gl_get_glCheckNamedFramebufferStatusEXT (void);
+#define      gdk_gl_glCheckNamedFramebufferStatusEXT(proc, framebuffer, target) \
+  ( ((GdkGLProc_glCheckNamedFramebufferStatusEXT) (proc)) (framebuffer, target) )
+
+/* glNamedFramebufferTexture1DEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedFramebufferTexture1DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glNamedFramebufferTexture1DEXT (void);
+#define      gdk_gl_glNamedFramebufferTexture1DEXT(proc, framebuffer, attachment, textarget, texture, level) \
+  ( ((GdkGLProc_glNamedFramebufferTexture1DEXT) (proc)) (framebuffer, attachment, textarget, texture, level) )
+
+/* glNamedFramebufferTexture2DEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedFramebufferTexture2DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glNamedFramebufferTexture2DEXT (void);
+#define      gdk_gl_glNamedFramebufferTexture2DEXT(proc, framebuffer, attachment, textarget, texture, level) \
+  ( ((GdkGLProc_glNamedFramebufferTexture2DEXT) (proc)) (framebuffer, attachment, textarget, texture, level) )
+
+/* glNamedFramebufferTexture3DEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedFramebufferTexture3DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+GdkGLProc    gdk_gl_get_glNamedFramebufferTexture3DEXT (void);
+#define      gdk_gl_glNamedFramebufferTexture3DEXT(proc, framebuffer, attachment, textarget, texture, level, zoffset) \
+  ( ((GdkGLProc_glNamedFramebufferTexture3DEXT) (proc)) (framebuffer, attachment, textarget, texture, level, zoffset) )
+
+/* glNamedFramebufferRenderbufferEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedFramebufferRenderbufferEXT) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glNamedFramebufferRenderbufferEXT (void);
+#define      gdk_gl_glNamedFramebufferRenderbufferEXT(proc, framebuffer, attachment, renderbuffertarget, renderbuffer) \
+  ( ((GdkGLProc_glNamedFramebufferRenderbufferEXT) (proc)) (framebuffer, attachment, renderbuffertarget, renderbuffer) )
+
+/* glGetNamedFramebufferAttachmentParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetNamedFramebufferAttachmentParameterivEXT) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetNamedFramebufferAttachmentParameterivEXT (void);
+#define      gdk_gl_glGetNamedFramebufferAttachmentParameterivEXT(proc, framebuffer, attachment, pname, params) \
+  ( ((GdkGLProc_glGetNamedFramebufferAttachmentParameterivEXT) (proc)) (framebuffer, attachment, pname, params) )
+
+/* glGenerateTextureMipmapEXT */
+typedef void (APIENTRYP GdkGLProc_glGenerateTextureMipmapEXT) (GLuint texture, GLenum target);
+GdkGLProc    gdk_gl_get_glGenerateTextureMipmapEXT (void);
+#define      gdk_gl_glGenerateTextureMipmapEXT(proc, texture, target) \
+  ( ((GdkGLProc_glGenerateTextureMipmapEXT) (proc)) (texture, target) )
+
+/* glGenerateMultiTexMipmapEXT */
+typedef void (APIENTRYP GdkGLProc_glGenerateMultiTexMipmapEXT) (GLenum texunit, GLenum target);
+GdkGLProc    gdk_gl_get_glGenerateMultiTexMipmapEXT (void);
+#define      gdk_gl_glGenerateMultiTexMipmapEXT(proc, texunit, target) \
+  ( ((GdkGLProc_glGenerateMultiTexMipmapEXT) (proc)) (texunit, target) )
+
+/* glFramebufferDrawBufferEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferDrawBufferEXT) (GLuint framebuffer, GLenum mode);
+GdkGLProc    gdk_gl_get_glFramebufferDrawBufferEXT (void);
+#define      gdk_gl_glFramebufferDrawBufferEXT(proc, framebuffer, mode) \
+  ( ((GdkGLProc_glFramebufferDrawBufferEXT) (proc)) (framebuffer, mode) )
+
+/* glFramebufferDrawBuffersEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferDrawBuffersEXT) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
+GdkGLProc    gdk_gl_get_glFramebufferDrawBuffersEXT (void);
+#define      gdk_gl_glFramebufferDrawBuffersEXT(proc, framebuffer, n, bufs) \
+  ( ((GdkGLProc_glFramebufferDrawBuffersEXT) (proc)) (framebuffer, n, bufs) )
+
+/* glFramebufferReadBufferEXT */
+typedef void (APIENTRYP GdkGLProc_glFramebufferReadBufferEXT) (GLuint framebuffer, GLenum mode);
+GdkGLProc    gdk_gl_get_glFramebufferReadBufferEXT (void);
+#define      gdk_gl_glFramebufferReadBufferEXT(proc, framebuffer, mode) \
+  ( ((GdkGLProc_glFramebufferReadBufferEXT) (proc)) (framebuffer, mode) )
+
+/* glGetFramebufferParameterivEXT */
+typedef void (APIENTRYP GdkGLProc_glGetFramebufferParameterivEXT) (GLuint framebuffer, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetFramebufferParameterivEXT (void);
+#define      gdk_gl_glGetFramebufferParameterivEXT(proc, framebuffer, pname, params) \
+  ( ((GdkGLProc_glGetFramebufferParameterivEXT) (proc)) (framebuffer, pname, params) )
+
+/* glNamedRenderbufferStorageMultisampleEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedRenderbufferStorageMultisampleEXT) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glNamedRenderbufferStorageMultisampleEXT (void);
+#define      gdk_gl_glNamedRenderbufferStorageMultisampleEXT(proc, renderbuffer, samples, internalformat, width, height) \
+  ( ((GdkGLProc_glNamedRenderbufferStorageMultisampleEXT) (proc)) (renderbuffer, samples, internalformat, width, height) )
+
+/* glNamedRenderbufferStorageMultisampleCoverageEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedRenderbufferStorageMultisampleCoverageEXT) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+GdkGLProc    gdk_gl_get_glNamedRenderbufferStorageMultisampleCoverageEXT (void);
+#define      gdk_gl_glNamedRenderbufferStorageMultisampleCoverageEXT(proc, renderbuffer, coverageSamples, colorSamples, internalformat, width, height) \
+  ( ((GdkGLProc_glNamedRenderbufferStorageMultisampleCoverageEXT) (proc)) (renderbuffer, coverageSamples, colorSamples, internalformat, width, height) )
+
+/* glNamedFramebufferTextureEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedFramebufferTextureEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
+GdkGLProc    gdk_gl_get_glNamedFramebufferTextureEXT (void);
+#define      gdk_gl_glNamedFramebufferTextureEXT(proc, framebuffer, attachment, texture, level) \
+  ( ((GdkGLProc_glNamedFramebufferTextureEXT) (proc)) (framebuffer, attachment, texture, level) )
+
+/* glNamedFramebufferTextureLayerEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedFramebufferTextureLayerEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
+GdkGLProc    gdk_gl_get_glNamedFramebufferTextureLayerEXT (void);
+#define      gdk_gl_glNamedFramebufferTextureLayerEXT(proc, framebuffer, attachment, texture, level, layer) \
+  ( ((GdkGLProc_glNamedFramebufferTextureLayerEXT) (proc)) (framebuffer, attachment, texture, level, layer) )
+
+/* glNamedFramebufferTextureFaceEXT */
+typedef void (APIENTRYP GdkGLProc_glNamedFramebufferTextureFaceEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
+GdkGLProc    gdk_gl_get_glNamedFramebufferTextureFaceEXT (void);
+#define      gdk_gl_glNamedFramebufferTextureFaceEXT(proc, framebuffer, attachment, texture, level, face) \
+  ( ((GdkGLProc_glNamedFramebufferTextureFaceEXT) (proc)) (framebuffer, attachment, texture, level, face) )
+
+/* glTextureRenderbufferEXT */
+typedef void (APIENTRYP GdkGLProc_glTextureRenderbufferEXT) (GLuint texture, GLenum target, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glTextureRenderbufferEXT (void);
+#define      gdk_gl_glTextureRenderbufferEXT(proc, texture, target, renderbuffer) \
+  ( ((GdkGLProc_glTextureRenderbufferEXT) (proc)) (texture, target, renderbuffer) )
+
+/* glMultiTexRenderbufferEXT */
+typedef void (APIENTRYP GdkGLProc_glMultiTexRenderbufferEXT) (GLenum texunit, GLenum target, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glMultiTexRenderbufferEXT (void);
+#define      gdk_gl_glMultiTexRenderbufferEXT(proc, texunit, target, renderbuffer) \
+  ( ((GdkGLProc_glMultiTexRenderbufferEXT) (proc)) (texunit, target, renderbuffer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_pixel_data_range GdkGL_GL_NV_pixel_data_range;
+typedef struct _GdkGL_GL_EXT_direct_state_access GdkGL_GL_EXT_direct_state_access;
 
-struct _GdkGL_GL_NV_pixel_data_range
+struct _GdkGL_GL_EXT_direct_state_access
 {
-  GdkGLProc_glPixelDataRangeNV glPixelDataRangeNV;
-  GdkGLProc_glFlushPixelDataRangeNV glFlushPixelDataRangeNV;
+  GdkGLProc_glClientAttribDefaultEXT glClientAttribDefaultEXT;
+  GdkGLProc_glPushClientAttribDefaultEXT glPushClientAttribDefaultEXT;
+  GdkGLProc_glMatrixLoadfEXT glMatrixLoadfEXT;
+  GdkGLProc_glMatrixLoaddEXT glMatrixLoaddEXT;
+  GdkGLProc_glMatrixMultfEXT glMatrixMultfEXT;
+  GdkGLProc_glMatrixMultdEXT glMatrixMultdEXT;
+  GdkGLProc_glMatrixLoadIdentityEXT glMatrixLoadIdentityEXT;
+  GdkGLProc_glMatrixRotatefEXT glMatrixRotatefEXT;
+  GdkGLProc_glMatrixRotatedEXT glMatrixRotatedEXT;
+  GdkGLProc_glMatrixScalefEXT glMatrixScalefEXT;
+  GdkGLProc_glMatrixScaledEXT glMatrixScaledEXT;
+  GdkGLProc_glMatrixTranslatefEXT glMatrixTranslatefEXT;
+  GdkGLProc_glMatrixTranslatedEXT glMatrixTranslatedEXT;
+  GdkGLProc_glMatrixFrustumEXT glMatrixFrustumEXT;
+  GdkGLProc_glMatrixOrthoEXT glMatrixOrthoEXT;
+  GdkGLProc_glMatrixPopEXT glMatrixPopEXT;
+  GdkGLProc_glMatrixPushEXT glMatrixPushEXT;
+  GdkGLProc_glMatrixLoadTransposefEXT glMatrixLoadTransposefEXT;
+  GdkGLProc_glMatrixLoadTransposedEXT glMatrixLoadTransposedEXT;
+  GdkGLProc_glMatrixMultTransposefEXT glMatrixMultTransposefEXT;
+  GdkGLProc_glMatrixMultTransposedEXT glMatrixMultTransposedEXT;
+  GdkGLProc_glTextureParameterfEXT glTextureParameterfEXT;
+  GdkGLProc_glTextureParameterfvEXT glTextureParameterfvEXT;
+  GdkGLProc_glTextureParameteriEXT glTextureParameteriEXT;
+  GdkGLProc_glTextureParameterivEXT glTextureParameterivEXT;
+  GdkGLProc_glTextureImage1DEXT glTextureImage1DEXT;
+  GdkGLProc_glTextureImage2DEXT glTextureImage2DEXT;
+  GdkGLProc_glTextureSubImage1DEXT glTextureSubImage1DEXT;
+  GdkGLProc_glTextureSubImage2DEXT glTextureSubImage2DEXT;
+  GdkGLProc_glCopyTextureImage1DEXT glCopyTextureImage1DEXT;
+  GdkGLProc_glCopyTextureImage2DEXT glCopyTextureImage2DEXT;
+  GdkGLProc_glCopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT;
+  GdkGLProc_glCopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT;
+  GdkGLProc_glGetTextureImageEXT glGetTextureImageEXT;
+  GdkGLProc_glGetTextureParameterfvEXT glGetTextureParameterfvEXT;
+  GdkGLProc_glGetTextureParameterivEXT glGetTextureParameterivEXT;
+  GdkGLProc_glGetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT;
+  GdkGLProc_glGetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT;
+  GdkGLProc_glTextureImage3DEXT glTextureImage3DEXT;
+  GdkGLProc_glTextureSubImage3DEXT glTextureSubImage3DEXT;
+  GdkGLProc_glCopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT;
+  GdkGLProc_glMultiTexParameterfEXT glMultiTexParameterfEXT;
+  GdkGLProc_glMultiTexParameterfvEXT glMultiTexParameterfvEXT;
+  GdkGLProc_glMultiTexParameteriEXT glMultiTexParameteriEXT;
+  GdkGLProc_glMultiTexParameterivEXT glMultiTexParameterivEXT;
+  GdkGLProc_glMultiTexImage1DEXT glMultiTexImage1DEXT;
+  GdkGLProc_glMultiTexImage2DEXT glMultiTexImage2DEXT;
+  GdkGLProc_glMultiTexSubImage1DEXT glMultiTexSubImage1DEXT;
+  GdkGLProc_glMultiTexSubImage2DEXT glMultiTexSubImage2DEXT;
+  GdkGLProc_glCopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT;
+  GdkGLProc_glCopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT;
+  GdkGLProc_glCopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT;
+  GdkGLProc_glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT;
+  GdkGLProc_glGetMultiTexImageEXT glGetMultiTexImageEXT;
+  GdkGLProc_glGetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT;
+  GdkGLProc_glGetMultiTexParameterivEXT glGetMultiTexParameterivEXT;
+  GdkGLProc_glGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT;
+  GdkGLProc_glGetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT;
+  GdkGLProc_glMultiTexImage3DEXT glMultiTexImage3DEXT;
+  GdkGLProc_glMultiTexSubImage3DEXT glMultiTexSubImage3DEXT;
+  GdkGLProc_glCopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT;
+  GdkGLProc_glBindMultiTextureEXT glBindMultiTextureEXT;
+  GdkGLProc_glEnableClientStateIndexedEXT glEnableClientStateIndexedEXT;
+  GdkGLProc_glDisableClientStateIndexedEXT glDisableClientStateIndexedEXT;
+  GdkGLProc_glMultiTexCoordPointerEXT glMultiTexCoordPointerEXT;
+  GdkGLProc_glMultiTexEnvfEXT glMultiTexEnvfEXT;
+  GdkGLProc_glMultiTexEnvfvEXT glMultiTexEnvfvEXT;
+  GdkGLProc_glMultiTexEnviEXT glMultiTexEnviEXT;
+  GdkGLProc_glMultiTexEnvivEXT glMultiTexEnvivEXT;
+  GdkGLProc_glMultiTexGendEXT glMultiTexGendEXT;
+  GdkGLProc_glMultiTexGendvEXT glMultiTexGendvEXT;
+  GdkGLProc_glMultiTexGenfEXT glMultiTexGenfEXT;
+  GdkGLProc_glMultiTexGenfvEXT glMultiTexGenfvEXT;
+  GdkGLProc_glMultiTexGeniEXT glMultiTexGeniEXT;
+  GdkGLProc_glMultiTexGenivEXT glMultiTexGenivEXT;
+  GdkGLProc_glGetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT;
+  GdkGLProc_glGetMultiTexEnvivEXT glGetMultiTexEnvivEXT;
+  GdkGLProc_glGetMultiTexGendvEXT glGetMultiTexGendvEXT;
+  GdkGLProc_glGetMultiTexGenfvEXT glGetMultiTexGenfvEXT;
+  GdkGLProc_glGetMultiTexGenivEXT glGetMultiTexGenivEXT;
+  GdkGLProc_glGetFloatIndexedvEXT glGetFloatIndexedvEXT;
+  GdkGLProc_glGetDoubleIndexedvEXT glGetDoubleIndexedvEXT;
+  GdkGLProc_glGetPointerIndexedvEXT glGetPointerIndexedvEXT;
+  GdkGLProc_glCompressedTextureImage3DEXT glCompressedTextureImage3DEXT;
+  GdkGLProc_glCompressedTextureImage2DEXT glCompressedTextureImage2DEXT;
+  GdkGLProc_glCompressedTextureImage1DEXT glCompressedTextureImage1DEXT;
+  GdkGLProc_glCompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT;
+  GdkGLProc_glCompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT;
+  GdkGLProc_glCompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT;
+  GdkGLProc_glGetCompressedTextureImageEXT glGetCompressedTextureImageEXT;
+  GdkGLProc_glCompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT;
+  GdkGLProc_glCompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT;
+  GdkGLProc_glCompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT;
+  GdkGLProc_glCompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT;
+  GdkGLProc_glCompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT;
+  GdkGLProc_glCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT;
+  GdkGLProc_glGetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT;
+  GdkGLProc_glNamedProgramStringEXT glNamedProgramStringEXT;
+  GdkGLProc_glNamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT;
+  GdkGLProc_glNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT;
+  GdkGLProc_glNamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT;
+  GdkGLProc_glNamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT;
+  GdkGLProc_glGetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT;
+  GdkGLProc_glGetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT;
+  GdkGLProc_glGetNamedProgramivEXT glGetNamedProgramivEXT;
+  GdkGLProc_glGetNamedProgramStringEXT glGetNamedProgramStringEXT;
+  GdkGLProc_glNamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT;
+  GdkGLProc_glNamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT;
+  GdkGLProc_glNamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT;
+  GdkGLProc_glNamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT;
+  GdkGLProc_glNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT;
+  GdkGLProc_glNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT;
+  GdkGLProc_glNamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT;
+  GdkGLProc_glGetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT;
+  GdkGLProc_glGetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT;
+  GdkGLProc_glTextureParameterIivEXT glTextureParameterIivEXT;
+  GdkGLProc_glTextureParameterIuivEXT glTextureParameterIuivEXT;
+  GdkGLProc_glGetTextureParameterIivEXT glGetTextureParameterIivEXT;
+  GdkGLProc_glGetTextureParameterIuivEXT glGetTextureParameterIuivEXT;
+  GdkGLProc_glMultiTexParameterIivEXT glMultiTexParameterIivEXT;
+  GdkGLProc_glMultiTexParameterIuivEXT glMultiTexParameterIuivEXT;
+  GdkGLProc_glGetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT;
+  GdkGLProc_glGetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT;
+  GdkGLProc_glProgramUniform1fEXT glProgramUniform1fEXT;
+  GdkGLProc_glProgramUniform2fEXT glProgramUniform2fEXT;
+  GdkGLProc_glProgramUniform3fEXT glProgramUniform3fEXT;
+  GdkGLProc_glProgramUniform4fEXT glProgramUniform4fEXT;
+  GdkGLProc_glProgramUniform1iEXT glProgramUniform1iEXT;
+  GdkGLProc_glProgramUniform2iEXT glProgramUniform2iEXT;
+  GdkGLProc_glProgramUniform3iEXT glProgramUniform3iEXT;
+  GdkGLProc_glProgramUniform4iEXT glProgramUniform4iEXT;
+  GdkGLProc_glProgramUniform1fvEXT glProgramUniform1fvEXT;
+  GdkGLProc_glProgramUniform2fvEXT glProgramUniform2fvEXT;
+  GdkGLProc_glProgramUniform3fvEXT glProgramUniform3fvEXT;
+  GdkGLProc_glProgramUniform4fvEXT glProgramUniform4fvEXT;
+  GdkGLProc_glProgramUniform1ivEXT glProgramUniform1ivEXT;
+  GdkGLProc_glProgramUniform2ivEXT glProgramUniform2ivEXT;
+  GdkGLProc_glProgramUniform3ivEXT glProgramUniform3ivEXT;
+  GdkGLProc_glProgramUniform4ivEXT glProgramUniform4ivEXT;
+  GdkGLProc_glProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT;
+  GdkGLProc_glProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT;
+  GdkGLProc_glProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT;
+  GdkGLProc_glProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT;
+  GdkGLProc_glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT;
+  GdkGLProc_glProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT;
+  GdkGLProc_glProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT;
+  GdkGLProc_glProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT;
+  GdkGLProc_glProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT;
+  GdkGLProc_glProgramUniform1uiEXT glProgramUniform1uiEXT;
+  GdkGLProc_glProgramUniform2uiEXT glProgramUniform2uiEXT;
+  GdkGLProc_glProgramUniform3uiEXT glProgramUniform3uiEXT;
+  GdkGLProc_glProgramUniform4uiEXT glProgramUniform4uiEXT;
+  GdkGLProc_glProgramUniform1uivEXT glProgramUniform1uivEXT;
+  GdkGLProc_glProgramUniform2uivEXT glProgramUniform2uivEXT;
+  GdkGLProc_glProgramUniform3uivEXT glProgramUniform3uivEXT;
+  GdkGLProc_glProgramUniform4uivEXT glProgramUniform4uivEXT;
+  GdkGLProc_glNamedBufferDataEXT glNamedBufferDataEXT;
+  GdkGLProc_glNamedBufferSubDataEXT glNamedBufferSubDataEXT;
+  GdkGLProc_glMapNamedBufferEXT glMapNamedBufferEXT;
+  GdkGLProc_glUnmapNamedBufferEXT glUnmapNamedBufferEXT;
+  GdkGLProc_glGetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT;
+  GdkGLProc_glGetNamedBufferPointervEXT glGetNamedBufferPointervEXT;
+  GdkGLProc_glGetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT;
+  GdkGLProc_glTextureBufferEXT glTextureBufferEXT;
+  GdkGLProc_glMultiTexBufferEXT glMultiTexBufferEXT;
+  GdkGLProc_glNamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT;
+  GdkGLProc_glGetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT;
+  GdkGLProc_glCheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT;
+  GdkGLProc_glNamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT;
+  GdkGLProc_glNamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT;
+  GdkGLProc_glNamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT;
+  GdkGLProc_glNamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT;
+  GdkGLProc_glGetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT;
+  GdkGLProc_glGenerateTextureMipmapEXT glGenerateTextureMipmapEXT;
+  GdkGLProc_glGenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT;
+  GdkGLProc_glFramebufferDrawBufferEXT glFramebufferDrawBufferEXT;
+  GdkGLProc_glFramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT;
+  GdkGLProc_glFramebufferReadBufferEXT glFramebufferReadBufferEXT;
+  GdkGLProc_glGetFramebufferParameterivEXT glGetFramebufferParameterivEXT;
+  GdkGLProc_glNamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT;
+  GdkGLProc_glNamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT;
+  GdkGLProc_glNamedFramebufferTextureEXT glNamedFramebufferTextureEXT;
+  GdkGLProc_glNamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT;
+  GdkGLProc_glNamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT;
+  GdkGLProc_glTextureRenderbufferEXT glTextureRenderbufferEXT;
+  GdkGLProc_glMultiTexRenderbufferEXT glMultiTexRenderbufferEXT;
 };
 
-GdkGL_GL_NV_pixel_data_range *gdk_gl_get_GL_NV_pixel_data_range (void);
+GdkGL_GL_EXT_direct_state_access *gdk_gl_get_GL_EXT_direct_state_access (void);
 
 /*
- * GL_NV_primitive_restart
+ * GL_NV_explicit_multisample
  */
 
-/* glPrimitiveRestartNV */
-typedef void (APIENTRY * GdkGLProc_glPrimitiveRestartNV) (void);
-GdkGLProc    gdk_gl_get_glPrimitiveRestartNV (void);
-#define      gdk_gl_glPrimitiveRestartNV(proc) \
-  ( ((GdkGLProc_glPrimitiveRestartNV) (proc)) () )
+/* glGetMultisamplefvNV */
+typedef void (APIENTRYP GdkGLProc_glGetMultisamplefvNV) (GLenum pname, GLuint index, GLfloat *val);
+GdkGLProc    gdk_gl_get_glGetMultisamplefvNV (void);
+#define      gdk_gl_glGetMultisamplefvNV(proc, pname, index, val) \
+  ( ((GdkGLProc_glGetMultisamplefvNV) (proc)) (pname, index, val) )
 
-/* glPrimitiveRestartIndexNV */
-typedef void (APIENTRY * GdkGLProc_glPrimitiveRestartIndexNV) (GLuint index);
-GdkGLProc    gdk_gl_get_glPrimitiveRestartIndexNV (void);
-#define      gdk_gl_glPrimitiveRestartIndexNV(proc, index) \
-  ( ((GdkGLProc_glPrimitiveRestartIndexNV) (proc)) (index) )
+/* glSampleMaskIndexedNV */
+typedef void (APIENTRYP GdkGLProc_glSampleMaskIndexedNV) (GLuint index, GLbitfield mask);
+GdkGLProc    gdk_gl_get_glSampleMaskIndexedNV (void);
+#define      gdk_gl_glSampleMaskIndexedNV(proc, index, mask) \
+  ( ((GdkGLProc_glSampleMaskIndexedNV) (proc)) (index, mask) )
+
+/* glTexRenderbufferNV */
+typedef void (APIENTRYP GdkGLProc_glTexRenderbufferNV) (GLenum target, GLuint renderbuffer);
+GdkGLProc    gdk_gl_get_glTexRenderbufferNV (void);
+#define      gdk_gl_glTexRenderbufferNV(proc, target, renderbuffer) \
+  ( ((GdkGLProc_glTexRenderbufferNV) (proc)) (target, renderbuffer) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_NV_primitive_restart GdkGL_GL_NV_primitive_restart;
+typedef struct _GdkGL_GL_NV_explicit_multisample GdkGL_GL_NV_explicit_multisample;
 
-struct _GdkGL_GL_NV_primitive_restart
+struct _GdkGL_GL_NV_explicit_multisample
 {
-  GdkGLProc_glPrimitiveRestartNV glPrimitiveRestartNV;
-  GdkGLProc_glPrimitiveRestartIndexNV glPrimitiveRestartIndexNV;
+  GdkGLProc_glGetMultisamplefvNV glGetMultisamplefvNV;
+  GdkGLProc_glSampleMaskIndexedNV glSampleMaskIndexedNV;
+  GdkGLProc_glTexRenderbufferNV glTexRenderbufferNV;
 };
 
-GdkGL_GL_NV_primitive_restart *gdk_gl_get_GL_NV_primitive_restart (void);
+GdkGL_GL_NV_explicit_multisample *gdk_gl_get_GL_NV_explicit_multisample (void);
 
 /*
- * GL_ATI_map_object_buffer
+ * GL_NV_transform_feedback2
  */
 
-/* glMapObjectBufferATI */
-typedef GLvoid* (APIENTRY * GdkGLProc_glMapObjectBufferATI) (GLuint buffer);
-GdkGLProc    gdk_gl_get_glMapObjectBufferATI (void);
-#define      gdk_gl_glMapObjectBufferATI(proc, buffer) \
-  ( ((GdkGLProc_glMapObjectBufferATI) (proc)) (buffer) )
+/* glBindTransformFeedbackNV */
+typedef void (APIENTRYP GdkGLProc_glBindTransformFeedbackNV) (GLenum target, GLuint id);
+GdkGLProc    gdk_gl_get_glBindTransformFeedbackNV (void);
+#define      gdk_gl_glBindTransformFeedbackNV(proc, target, id) \
+  ( ((GdkGLProc_glBindTransformFeedbackNV) (proc)) (target, id) )
+
+/* glDeleteTransformFeedbacksNV */
+typedef void (APIENTRYP GdkGLProc_glDeleteTransformFeedbacksNV) (GLsizei n, const GLuint *ids);
+GdkGLProc    gdk_gl_get_glDeleteTransformFeedbacksNV (void);
+#define      gdk_gl_glDeleteTransformFeedbacksNV(proc, n, ids) \
+  ( ((GdkGLProc_glDeleteTransformFeedbacksNV) (proc)) (n, ids) )
+
+/* glGenTransformFeedbacksNV */
+typedef void (APIENTRYP GdkGLProc_glGenTransformFeedbacksNV) (GLsizei n, GLuint *ids);
+GdkGLProc    gdk_gl_get_glGenTransformFeedbacksNV (void);
+#define      gdk_gl_glGenTransformFeedbacksNV(proc, n, ids) \
+  ( ((GdkGLProc_glGenTransformFeedbacksNV) (proc)) (n, ids) )
+
+/* glIsTransformFeedbackNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsTransformFeedbackNV) (GLuint id);
+GdkGLProc    gdk_gl_get_glIsTransformFeedbackNV (void);
+#define      gdk_gl_glIsTransformFeedbackNV(proc, id) \
+  ( ((GdkGLProc_glIsTransformFeedbackNV) (proc)) (id) )
+
+/* glPauseTransformFeedbackNV */
+typedef void (APIENTRYP GdkGLProc_glPauseTransformFeedbackNV) (void);
+GdkGLProc    gdk_gl_get_glPauseTransformFeedbackNV (void);
+#define      gdk_gl_glPauseTransformFeedbackNV(proc) \
+  ( ((GdkGLProc_glPauseTransformFeedbackNV) (proc)) () )
+
+/* glResumeTransformFeedbackNV */
+typedef void (APIENTRYP GdkGLProc_glResumeTransformFeedbackNV) (void);
+GdkGLProc    gdk_gl_get_glResumeTransformFeedbackNV (void);
+#define      gdk_gl_glResumeTransformFeedbackNV(proc) \
+  ( ((GdkGLProc_glResumeTransformFeedbackNV) (proc)) () )
+
+/* glDrawTransformFeedbackNV */
+typedef void (APIENTRYP GdkGLProc_glDrawTransformFeedbackNV) (GLenum mode, GLuint id);
+GdkGLProc    gdk_gl_get_glDrawTransformFeedbackNV (void);
+#define      gdk_gl_glDrawTransformFeedbackNV(proc, mode, id) \
+  ( ((GdkGLProc_glDrawTransformFeedbackNV) (proc)) (mode, id) )
 
-/* glUnmapObjectBufferATI */
-typedef void (APIENTRY * GdkGLProc_glUnmapObjectBufferATI) (GLuint buffer);
-GdkGLProc    gdk_gl_get_glUnmapObjectBufferATI (void);
-#define      gdk_gl_glUnmapObjectBufferATI(proc, buffer) \
-  ( ((GdkGLProc_glUnmapObjectBufferATI) (proc)) (buffer) )
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_transform_feedback2 GdkGL_GL_NV_transform_feedback2;
+
+struct _GdkGL_GL_NV_transform_feedback2
+{
+  GdkGLProc_glBindTransformFeedbackNV glBindTransformFeedbackNV;
+  GdkGLProc_glDeleteTransformFeedbacksNV glDeleteTransformFeedbacksNV;
+  GdkGLProc_glGenTransformFeedbacksNV glGenTransformFeedbacksNV;
+  GdkGLProc_glIsTransformFeedbackNV glIsTransformFeedbackNV;
+  GdkGLProc_glPauseTransformFeedbackNV glPauseTransformFeedbackNV;
+  GdkGLProc_glResumeTransformFeedbackNV glResumeTransformFeedbackNV;
+  GdkGLProc_glDrawTransformFeedbackNV glDrawTransformFeedbackNV;
+};
+
+GdkGL_GL_NV_transform_feedback2 *gdk_gl_get_GL_NV_transform_feedback2 (void);
+
+/*
+ * GL_AMD_performance_monitor
+ */
+
+/* glGetPerfMonitorGroupsAMD */
+typedef void (APIENTRYP GdkGLProc_glGetPerfMonitorGroupsAMD) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
+GdkGLProc    gdk_gl_get_glGetPerfMonitorGroupsAMD (void);
+#define      gdk_gl_glGetPerfMonitorGroupsAMD(proc, numGroups, groupsSize, groups) \
+  ( ((GdkGLProc_glGetPerfMonitorGroupsAMD) (proc)) (numGroups, groupsSize, groups) )
+
+/* glGetPerfMonitorCountersAMD */
+typedef void (APIENTRYP GdkGLProc_glGetPerfMonitorCountersAMD) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
+GdkGLProc    gdk_gl_get_glGetPerfMonitorCountersAMD (void);
+#define      gdk_gl_glGetPerfMonitorCountersAMD(proc, group, numCounters, maxActiveCounters, counterSize, counters) \
+  ( ((GdkGLProc_glGetPerfMonitorCountersAMD) (proc)) (group, numCounters, maxActiveCounters, counterSize, counters) )
+
+/* glGetPerfMonitorGroupStringAMD */
+typedef void (APIENTRYP GdkGLProc_glGetPerfMonitorGroupStringAMD) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
+GdkGLProc    gdk_gl_get_glGetPerfMonitorGroupStringAMD (void);
+#define      gdk_gl_glGetPerfMonitorGroupStringAMD(proc, group, bufSize, length, groupString) \
+  ( ((GdkGLProc_glGetPerfMonitorGroupStringAMD) (proc)) (group, bufSize, length, groupString) )
+
+/* glGetPerfMonitorCounterStringAMD */
+typedef void (APIENTRYP GdkGLProc_glGetPerfMonitorCounterStringAMD) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
+GdkGLProc    gdk_gl_get_glGetPerfMonitorCounterStringAMD (void);
+#define      gdk_gl_glGetPerfMonitorCounterStringAMD(proc, group, counter, bufSize, length, counterString) \
+  ( ((GdkGLProc_glGetPerfMonitorCounterStringAMD) (proc)) (group, counter, bufSize, length, counterString) )
+
+/* glGetPerfMonitorCounterInfoAMD */
+typedef void (APIENTRYP GdkGLProc_glGetPerfMonitorCounterInfoAMD) (GLuint group, GLuint counter, GLenum pname, void *data);
+GdkGLProc    gdk_gl_get_glGetPerfMonitorCounterInfoAMD (void);
+#define      gdk_gl_glGetPerfMonitorCounterInfoAMD(proc, group, counter, pname, data) \
+  ( ((GdkGLProc_glGetPerfMonitorCounterInfoAMD) (proc)) (group, counter, pname, data) )
+
+/* glGenPerfMonitorsAMD */
+typedef void (APIENTRYP GdkGLProc_glGenPerfMonitorsAMD) (GLsizei n, GLuint *monitors);
+GdkGLProc    gdk_gl_get_glGenPerfMonitorsAMD (void);
+#define      gdk_gl_glGenPerfMonitorsAMD(proc, n, monitors) \
+  ( ((GdkGLProc_glGenPerfMonitorsAMD) (proc)) (n, monitors) )
+
+/* glDeletePerfMonitorsAMD */
+typedef void (APIENTRYP GdkGLProc_glDeletePerfMonitorsAMD) (GLsizei n, GLuint *monitors);
+GdkGLProc    gdk_gl_get_glDeletePerfMonitorsAMD (void);
+#define      gdk_gl_glDeletePerfMonitorsAMD(proc, n, monitors) \
+  ( ((GdkGLProc_glDeletePerfMonitorsAMD) (proc)) (n, monitors) )
+
+/* glSelectPerfMonitorCountersAMD */
+typedef void (APIENTRYP GdkGLProc_glSelectPerfMonitorCountersAMD) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
+GdkGLProc    gdk_gl_get_glSelectPerfMonitorCountersAMD (void);
+#define      gdk_gl_glSelectPerfMonitorCountersAMD(proc, monitor, enable, group, numCounters, counterList) \
+  ( ((GdkGLProc_glSelectPerfMonitorCountersAMD) (proc)) (monitor, enable, group, numCounters, counterList) )
+
+/* glBeginPerfMonitorAMD */
+typedef void (APIENTRYP GdkGLProc_glBeginPerfMonitorAMD) (GLuint monitor);
+GdkGLProc    gdk_gl_get_glBeginPerfMonitorAMD (void);
+#define      gdk_gl_glBeginPerfMonitorAMD(proc, monitor) \
+  ( ((GdkGLProc_glBeginPerfMonitorAMD) (proc)) (monitor) )
+
+/* glEndPerfMonitorAMD */
+typedef void (APIENTRYP GdkGLProc_glEndPerfMonitorAMD) (GLuint monitor);
+GdkGLProc    gdk_gl_get_glEndPerfMonitorAMD (void);
+#define      gdk_gl_glEndPerfMonitorAMD(proc, monitor) \
+  ( ((GdkGLProc_glEndPerfMonitorAMD) (proc)) (monitor) )
+
+/* glGetPerfMonitorCounterDataAMD */
+typedef void (APIENTRYP GdkGLProc_glGetPerfMonitorCounterDataAMD) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
+GdkGLProc    gdk_gl_get_glGetPerfMonitorCounterDataAMD (void);
+#define      gdk_gl_glGetPerfMonitorCounterDataAMD(proc, monitor, pname, dataSize, data, bytesWritten) \
+  ( ((GdkGLProc_glGetPerfMonitorCounterDataAMD) (proc)) (monitor, pname, dataSize, data, bytesWritten) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_map_object_buffer GdkGL_GL_ATI_map_object_buffer;
+typedef struct _GdkGL_GL_AMD_performance_monitor GdkGL_GL_AMD_performance_monitor;
 
-struct _GdkGL_GL_ATI_map_object_buffer
+struct _GdkGL_GL_AMD_performance_monitor
 {
-  GdkGLProc_glMapObjectBufferATI glMapObjectBufferATI;
-  GdkGLProc_glUnmapObjectBufferATI glUnmapObjectBufferATI;
+  GdkGLProc_glGetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD;
+  GdkGLProc_glGetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD;
+  GdkGLProc_glGetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD;
+  GdkGLProc_glGetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD;
+  GdkGLProc_glGetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD;
+  GdkGLProc_glGenPerfMonitorsAMD glGenPerfMonitorsAMD;
+  GdkGLProc_glDeletePerfMonitorsAMD glDeletePerfMonitorsAMD;
+  GdkGLProc_glSelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD;
+  GdkGLProc_glBeginPerfMonitorAMD glBeginPerfMonitorAMD;
+  GdkGLProc_glEndPerfMonitorAMD glEndPerfMonitorAMD;
+  GdkGLProc_glGetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD;
 };
 
-GdkGL_GL_ATI_map_object_buffer *gdk_gl_get_GL_ATI_map_object_buffer (void);
+GdkGL_GL_AMD_performance_monitor *gdk_gl_get_GL_AMD_performance_monitor (void);
 
 /*
- * GL_ATI_separate_stencil
+ * GL_AMD_vertex_shader_tesselator
  */
 
-/* glStencilOpSeparateATI */
-typedef void (APIENTRY * GdkGLProc_glStencilOpSeparateATI) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
-GdkGLProc    gdk_gl_get_glStencilOpSeparateATI (void);
-#define      gdk_gl_glStencilOpSeparateATI(proc, face, sfail, dpfail, dppass) \
-  ( ((GdkGLProc_glStencilOpSeparateATI) (proc)) (face, sfail, dpfail, dppass) )
+/* glTessellationFactorAMD */
+typedef void (APIENTRYP GdkGLProc_glTessellationFactorAMD) (GLfloat factor);
+GdkGLProc    gdk_gl_get_glTessellationFactorAMD (void);
+#define      gdk_gl_glTessellationFactorAMD(proc, factor) \
+  ( ((GdkGLProc_glTessellationFactorAMD) (proc)) (factor) )
 
-/* glStencilFuncSeparateATI */
-typedef void (APIENTRY * GdkGLProc_glStencilFuncSeparateATI) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
-GdkGLProc    gdk_gl_get_glStencilFuncSeparateATI (void);
-#define      gdk_gl_glStencilFuncSeparateATI(proc, frontfunc, backfunc, ref, mask) \
-  ( ((GdkGLProc_glStencilFuncSeparateATI) (proc)) (frontfunc, backfunc, ref, mask) )
+/* glTessellationModeAMD */
+typedef void (APIENTRYP GdkGLProc_glTessellationModeAMD) (GLenum mode);
+GdkGLProc    gdk_gl_get_glTessellationModeAMD (void);
+#define      gdk_gl_glTessellationModeAMD(proc, mode) \
+  ( ((GdkGLProc_glTessellationModeAMD) (proc)) (mode) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_separate_stencil GdkGL_GL_ATI_separate_stencil;
+typedef struct _GdkGL_GL_AMD_vertex_shader_tesselator GdkGL_GL_AMD_vertex_shader_tesselator;
 
-struct _GdkGL_GL_ATI_separate_stencil
+struct _GdkGL_GL_AMD_vertex_shader_tesselator
 {
-  GdkGLProc_glStencilOpSeparateATI glStencilOpSeparateATI;
-  GdkGLProc_glStencilFuncSeparateATI glStencilFuncSeparateATI;
+  GdkGLProc_glTessellationFactorAMD glTessellationFactorAMD;
+  GdkGLProc_glTessellationModeAMD glTessellationModeAMD;
 };
 
-GdkGL_GL_ATI_separate_stencil *gdk_gl_get_GL_ATI_separate_stencil (void);
+GdkGL_GL_AMD_vertex_shader_tesselator *gdk_gl_get_GL_AMD_vertex_shader_tesselator (void);
 
 /*
- * GL_ATI_vertex_attrib_array_object
+ * GL_EXT_provoking_vertex
  */
 
-/* glVertexAttribArrayObjectATI */
-typedef void (APIENTRY * GdkGLProc_glVertexAttribArrayObjectATI) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
-GdkGLProc    gdk_gl_get_glVertexAttribArrayObjectATI (void);
-#define      gdk_gl_glVertexAttribArrayObjectATI(proc, index, size, type, normalized, stride, buffer, offset) \
-  ( ((GdkGLProc_glVertexAttribArrayObjectATI) (proc)) (index, size, type, normalized, stride, buffer, offset) )
+/* glProvokingVertexEXT */
+typedef void (APIENTRYP GdkGLProc_glProvokingVertexEXT) (GLenum mode);
+GdkGLProc    gdk_gl_get_glProvokingVertexEXT (void);
+#define      gdk_gl_glProvokingVertexEXT(proc, mode) \
+  ( ((GdkGLProc_glProvokingVertexEXT) (proc)) (mode) )
 
-/* glGetVertexAttribArrayObjectfvATI */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribArrayObjectfvATI) (GLuint index, GLenum pname, GLfloat *params);
-GdkGLProc    gdk_gl_get_glGetVertexAttribArrayObjectfvATI (void);
-#define      gdk_gl_glGetVertexAttribArrayObjectfvATI(proc, index, pname, params) \
-  ( ((GdkGLProc_glGetVertexAttribArrayObjectfvATI) (proc)) (index, pname, params) )
+/* proc struct */
 
-/* glGetVertexAttribArrayObjectivATI */
-typedef void (APIENTRY * GdkGLProc_glGetVertexAttribArrayObjectivATI) (GLuint index, GLenum pname, GLint *params);
-GdkGLProc    gdk_gl_get_glGetVertexAttribArrayObjectivATI (void);
-#define      gdk_gl_glGetVertexAttribArrayObjectivATI(proc, index, pname, params) \
-  ( ((GdkGLProc_glGetVertexAttribArrayObjectivATI) (proc)) (index, pname, params) )
+typedef struct _GdkGL_GL_EXT_provoking_vertex GdkGL_GL_EXT_provoking_vertex;
+
+struct _GdkGL_GL_EXT_provoking_vertex
+{
+  GdkGLProc_glProvokingVertexEXT glProvokingVertexEXT;
+};
+
+GdkGL_GL_EXT_provoking_vertex *gdk_gl_get_GL_EXT_provoking_vertex (void);
+
+/*
+ * GL_AMD_draw_buffers_blend
+ */
+
+/* glBlendFuncIndexedAMD */
+typedef void (APIENTRYP GdkGLProc_glBlendFuncIndexedAMD) (GLuint buf, GLenum src, GLenum dst);
+GdkGLProc    gdk_gl_get_glBlendFuncIndexedAMD (void);
+#define      gdk_gl_glBlendFuncIndexedAMD(proc, buf, src, dst) \
+  ( ((GdkGLProc_glBlendFuncIndexedAMD) (proc)) (buf, src, dst) )
+
+/* glBlendFuncSeparateIndexedAMD */
+typedef void (APIENTRYP GdkGLProc_glBlendFuncSeparateIndexedAMD) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+GdkGLProc    gdk_gl_get_glBlendFuncSeparateIndexedAMD (void);
+#define      gdk_gl_glBlendFuncSeparateIndexedAMD(proc, buf, srcRGB, dstRGB, srcAlpha, dstAlpha) \
+  ( ((GdkGLProc_glBlendFuncSeparateIndexedAMD) (proc)) (buf, srcRGB, dstRGB, srcAlpha, dstAlpha) )
+
+/* glBlendEquationIndexedAMD */
+typedef void (APIENTRYP GdkGLProc_glBlendEquationIndexedAMD) (GLuint buf, GLenum mode);
+GdkGLProc    gdk_gl_get_glBlendEquationIndexedAMD (void);
+#define      gdk_gl_glBlendEquationIndexedAMD(proc, buf, mode) \
+  ( ((GdkGLProc_glBlendEquationIndexedAMD) (proc)) (buf, mode) )
+
+/* glBlendEquationSeparateIndexedAMD */
+typedef void (APIENTRYP GdkGLProc_glBlendEquationSeparateIndexedAMD) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+GdkGLProc    gdk_gl_get_glBlendEquationSeparateIndexedAMD (void);
+#define      gdk_gl_glBlendEquationSeparateIndexedAMD(proc, buf, modeRGB, modeAlpha) \
+  ( ((GdkGLProc_glBlendEquationSeparateIndexedAMD) (proc)) (buf, modeRGB, modeAlpha) )
 
 /* proc struct */
 
-typedef struct _GdkGL_GL_ATI_vertex_attrib_array_object GdkGL_GL_ATI_vertex_attrib_array_object;
+typedef struct _GdkGL_GL_AMD_draw_buffers_blend GdkGL_GL_AMD_draw_buffers_blend;
 
-struct _GdkGL_GL_ATI_vertex_attrib_array_object
+struct _GdkGL_GL_AMD_draw_buffers_blend
 {
-  GdkGLProc_glVertexAttribArrayObjectATI glVertexAttribArrayObjectATI;
-  GdkGLProc_glGetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI;
-  GdkGLProc_glGetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI;
+  GdkGLProc_glBlendFuncIndexedAMD glBlendFuncIndexedAMD;
+  GdkGLProc_glBlendFuncSeparateIndexedAMD glBlendFuncSeparateIndexedAMD;
+  GdkGLProc_glBlendEquationIndexedAMD glBlendEquationIndexedAMD;
+  GdkGLProc_glBlendEquationSeparateIndexedAMD glBlendEquationSeparateIndexedAMD;
 };
 
-GdkGL_GL_ATI_vertex_attrib_array_object *gdk_gl_get_GL_ATI_vertex_attrib_array_object (void);
+GdkGL_GL_AMD_draw_buffers_blend *gdk_gl_get_GL_AMD_draw_buffers_blend (void);
 
 /*
  * GL_APPLE_texture_range
  */
 
 /* glTextureRangeAPPLE */
-typedef void (APIENTRY * GdkGLProc_glTextureRangeAPPLE) (GLenum target, GLsizei length, const GLvoid *pointer);
+typedef void (APIENTRYP GdkGLProc_glTextureRangeAPPLE) (GLenum target, GLsizei length, const GLvoid *pointer);
 GdkGLProc    gdk_gl_get_glTextureRangeAPPLE (void);
 #define      gdk_gl_glTextureRangeAPPLE(proc, target, length, pointer) \
   ( ((GdkGLProc_glTextureRangeAPPLE) (proc)) (target, length, pointer) )
 
 /* glGetTexParameterPointervAPPLE */
-typedef void (APIENTRY * GdkGLProc_glGetTexParameterPointervAPPLE) (GLenum target, GLenum pname, GLvoid **params);
+typedef void (APIENTRYP GdkGLProc_glGetTexParameterPointervAPPLE) (GLenum target, GLenum pname, GLvoid* *params);
 GdkGLProc    gdk_gl_get_glGetTexParameterPointervAPPLE (void);
 #define      gdk_gl_glGetTexParameterPointervAPPLE(proc, target, pname, params) \
   ( ((GdkGLProc_glGetTexParameterPointervAPPLE) (proc)) (target, pname, params) )
@@ -7870,43 +13320,43 @@ GdkGL_GL_APPLE_texture_range *gdk_gl_get_GL_APPLE_texture_range (void);
  */
 
 /* glEnableVertexAttribAPPLE */
-typedef void (APIENTRY * GdkGLProc_glEnableVertexAttribAPPLE) (GLuint index, GLenum pname);
+typedef void (APIENTRYP GdkGLProc_glEnableVertexAttribAPPLE) (GLuint index, GLenum pname);
 GdkGLProc    gdk_gl_get_glEnableVertexAttribAPPLE (void);
 #define      gdk_gl_glEnableVertexAttribAPPLE(proc, index, pname) \
   ( ((GdkGLProc_glEnableVertexAttribAPPLE) (proc)) (index, pname) )
 
 /* glDisableVertexAttribAPPLE */
-typedef void (APIENTRY * GdkGLProc_glDisableVertexAttribAPPLE) (GLuint index, GLenum pname);
+typedef void (APIENTRYP GdkGLProc_glDisableVertexAttribAPPLE) (GLuint index, GLenum pname);
 GdkGLProc    gdk_gl_get_glDisableVertexAttribAPPLE (void);
 #define      gdk_gl_glDisableVertexAttribAPPLE(proc, index, pname) \
   ( ((GdkGLProc_glDisableVertexAttribAPPLE) (proc)) (index, pname) )
 
 /* glIsVertexAttribEnabledAPPLE */
-typedef GLboolean (APIENTRY * GdkGLProc_glIsVertexAttribEnabledAPPLE) (GLuint index, GLenum pname);
+typedef GLboolean (APIENTRYP GdkGLProc_glIsVertexAttribEnabledAPPLE) (GLuint index, GLenum pname);
 GdkGLProc    gdk_gl_get_glIsVertexAttribEnabledAPPLE (void);
 #define      gdk_gl_glIsVertexAttribEnabledAPPLE(proc, index, pname) \
   ( ((GdkGLProc_glIsVertexAttribEnabledAPPLE) (proc)) (index, pname) )
 
 /* glMapVertexAttrib1dAPPLE */
-typedef void (APIENTRY * GdkGLProc_glMapVertexAttrib1dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
+typedef void (APIENTRYP GdkGLProc_glMapVertexAttrib1dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
 GdkGLProc    gdk_gl_get_glMapVertexAttrib1dAPPLE (void);
 #define      gdk_gl_glMapVertexAttrib1dAPPLE(proc, index, size, u1, u2, stride, order, points) \
   ( ((GdkGLProc_glMapVertexAttrib1dAPPLE) (proc)) (index, size, u1, u2, stride, order, points) )
 
 /* glMapVertexAttrib1fAPPLE */
-typedef void (APIENTRY * GdkGLProc_glMapVertexAttrib1fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
+typedef void (APIENTRYP GdkGLProc_glMapVertexAttrib1fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
 GdkGLProc    gdk_gl_get_glMapVertexAttrib1fAPPLE (void);
 #define      gdk_gl_glMapVertexAttrib1fAPPLE(proc, index, size, u1, u2, stride, order, points) \
   ( ((GdkGLProc_glMapVertexAttrib1fAPPLE) (proc)) (index, size, u1, u2, stride, order, points) )
 
 /* glMapVertexAttrib2dAPPLE */
-typedef void (APIENTRY * GdkGLProc_glMapVertexAttrib2dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
+typedef void (APIENTRYP GdkGLProc_glMapVertexAttrib2dAPPLE) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
 GdkGLProc    gdk_gl_get_glMapVertexAttrib2dAPPLE (void);
 #define      gdk_gl_glMapVertexAttrib2dAPPLE(proc, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) \
   ( ((GdkGLProc_glMapVertexAttrib2dAPPLE) (proc)) (index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) )
 
 /* glMapVertexAttrib2fAPPLE */
-typedef void (APIENTRY * GdkGLProc_glMapVertexAttrib2fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
+typedef void (APIENTRYP GdkGLProc_glMapVertexAttrib2fAPPLE) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
 GdkGLProc    gdk_gl_get_glMapVertexAttrib2fAPPLE (void);
 #define      gdk_gl_glMapVertexAttrib2fAPPLE(proc, index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) \
   ( ((GdkGLProc_glMapVertexAttrib2fAPPLE) (proc)) (index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) )
@@ -7928,6 +13378,426 @@ struct _GdkGL_GL_APPLE_vertex_program_evaluators
 
 GdkGL_GL_APPLE_vertex_program_evaluators *gdk_gl_get_GL_APPLE_vertex_program_evaluators (void);
 
+/*
+ * GL_APPLE_object_purgeable
+ */
+
+/* glObjectPurgeableAPPLE */
+typedef GLenum (APIENTRYP GdkGLProc_glObjectPurgeableAPPLE) (GLenum objectType, GLuint name, GLenum option);
+GdkGLProc    gdk_gl_get_glObjectPurgeableAPPLE (void);
+#define      gdk_gl_glObjectPurgeableAPPLE(proc, objectType, name, option) \
+  ( ((GdkGLProc_glObjectPurgeableAPPLE) (proc)) (objectType, name, option) )
+
+/* glObjectUnpurgeableAPPLE */
+typedef GLenum (APIENTRYP GdkGLProc_glObjectUnpurgeableAPPLE) (GLenum objectType, GLuint name, GLenum option);
+GdkGLProc    gdk_gl_get_glObjectUnpurgeableAPPLE (void);
+#define      gdk_gl_glObjectUnpurgeableAPPLE(proc, objectType, name, option) \
+  ( ((GdkGLProc_glObjectUnpurgeableAPPLE) (proc)) (objectType, name, option) )
+
+/* glGetObjectParameterivAPPLE */
+typedef void (APIENTRYP GdkGLProc_glGetObjectParameterivAPPLE) (GLenum objectType, GLuint name, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetObjectParameterivAPPLE (void);
+#define      gdk_gl_glGetObjectParameterivAPPLE(proc, objectType, name, pname, params) \
+  ( ((GdkGLProc_glGetObjectParameterivAPPLE) (proc)) (objectType, name, pname, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_APPLE_object_purgeable GdkGL_GL_APPLE_object_purgeable;
+
+struct _GdkGL_GL_APPLE_object_purgeable
+{
+  GdkGLProc_glObjectPurgeableAPPLE glObjectPurgeableAPPLE;
+  GdkGLProc_glObjectUnpurgeableAPPLE glObjectUnpurgeableAPPLE;
+  GdkGLProc_glGetObjectParameterivAPPLE glGetObjectParameterivAPPLE;
+};
+
+GdkGL_GL_APPLE_object_purgeable *gdk_gl_get_GL_APPLE_object_purgeable (void);
+
+/*
+ * GL_NV_video_capture
+ */
+
+/* glBeginVideoCaptureNV */
+typedef void (APIENTRYP GdkGLProc_glBeginVideoCaptureNV) (GLuint video_capture_slot);
+GdkGLProc    gdk_gl_get_glBeginVideoCaptureNV (void);
+#define      gdk_gl_glBeginVideoCaptureNV(proc, video_capture_slot) \
+  ( ((GdkGLProc_glBeginVideoCaptureNV) (proc)) (video_capture_slot) )
+
+/* glBindVideoCaptureStreamBufferNV */
+typedef void (APIENTRYP GdkGLProc_glBindVideoCaptureStreamBufferNV) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
+GdkGLProc    gdk_gl_get_glBindVideoCaptureStreamBufferNV (void);
+#define      gdk_gl_glBindVideoCaptureStreamBufferNV(proc, video_capture_slot, stream, frame_region, offset) \
+  ( ((GdkGLProc_glBindVideoCaptureStreamBufferNV) (proc)) (video_capture_slot, stream, frame_region, offset) )
+
+/* glBindVideoCaptureStreamTextureNV */
+typedef void (APIENTRYP GdkGLProc_glBindVideoCaptureStreamTextureNV) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
+GdkGLProc    gdk_gl_get_glBindVideoCaptureStreamTextureNV (void);
+#define      gdk_gl_glBindVideoCaptureStreamTextureNV(proc, video_capture_slot, stream, frame_region, target, texture) \
+  ( ((GdkGLProc_glBindVideoCaptureStreamTextureNV) (proc)) (video_capture_slot, stream, frame_region, target, texture) )
+
+/* glEndVideoCaptureNV */
+typedef void (APIENTRYP GdkGLProc_glEndVideoCaptureNV) (GLuint video_capture_slot);
+GdkGLProc    gdk_gl_get_glEndVideoCaptureNV (void);
+#define      gdk_gl_glEndVideoCaptureNV(proc, video_capture_slot) \
+  ( ((GdkGLProc_glEndVideoCaptureNV) (proc)) (video_capture_slot) )
+
+/* glGetVideoCaptureivNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideoCaptureivNV) (GLuint video_capture_slot, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVideoCaptureivNV (void);
+#define      gdk_gl_glGetVideoCaptureivNV(proc, video_capture_slot, pname, params) \
+  ( ((GdkGLProc_glGetVideoCaptureivNV) (proc)) (video_capture_slot, pname, params) )
+
+/* glGetVideoCaptureStreamivNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideoCaptureStreamivNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
+GdkGLProc    gdk_gl_get_glGetVideoCaptureStreamivNV (void);
+#define      gdk_gl_glGetVideoCaptureStreamivNV(proc, video_capture_slot, stream, pname, params) \
+  ( ((GdkGLProc_glGetVideoCaptureStreamivNV) (proc)) (video_capture_slot, stream, pname, params) )
+
+/* glGetVideoCaptureStreamfvNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideoCaptureStreamfvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
+GdkGLProc    gdk_gl_get_glGetVideoCaptureStreamfvNV (void);
+#define      gdk_gl_glGetVideoCaptureStreamfvNV(proc, video_capture_slot, stream, pname, params) \
+  ( ((GdkGLProc_glGetVideoCaptureStreamfvNV) (proc)) (video_capture_slot, stream, pname, params) )
+
+/* glGetVideoCaptureStreamdvNV */
+typedef void (APIENTRYP GdkGLProc_glGetVideoCaptureStreamdvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
+GdkGLProc    gdk_gl_get_glGetVideoCaptureStreamdvNV (void);
+#define      gdk_gl_glGetVideoCaptureStreamdvNV(proc, video_capture_slot, stream, pname, params) \
+  ( ((GdkGLProc_glGetVideoCaptureStreamdvNV) (proc)) (video_capture_slot, stream, pname, params) )
+
+/* glVideoCaptureNV */
+typedef GLenum (APIENTRYP GdkGLProc_glVideoCaptureNV) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
+GdkGLProc    gdk_gl_get_glVideoCaptureNV (void);
+#define      gdk_gl_glVideoCaptureNV(proc, video_capture_slot, sequence_num, capture_time) \
+  ( ((GdkGLProc_glVideoCaptureNV) (proc)) (video_capture_slot, sequence_num, capture_time) )
+
+/* glVideoCaptureStreamParameterivNV */
+typedef void (APIENTRYP GdkGLProc_glVideoCaptureStreamParameterivNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
+GdkGLProc    gdk_gl_get_glVideoCaptureStreamParameterivNV (void);
+#define      gdk_gl_glVideoCaptureStreamParameterivNV(proc, video_capture_slot, stream, pname, params) \
+  ( ((GdkGLProc_glVideoCaptureStreamParameterivNV) (proc)) (video_capture_slot, stream, pname, params) )
+
+/* glVideoCaptureStreamParameterfvNV */
+typedef void (APIENTRYP GdkGLProc_glVideoCaptureStreamParameterfvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
+GdkGLProc    gdk_gl_get_glVideoCaptureStreamParameterfvNV (void);
+#define      gdk_gl_glVideoCaptureStreamParameterfvNV(proc, video_capture_slot, stream, pname, params) \
+  ( ((GdkGLProc_glVideoCaptureStreamParameterfvNV) (proc)) (video_capture_slot, stream, pname, params) )
+
+/* glVideoCaptureStreamParameterdvNV */
+typedef void (APIENTRYP GdkGLProc_glVideoCaptureStreamParameterdvNV) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
+GdkGLProc    gdk_gl_get_glVideoCaptureStreamParameterdvNV (void);
+#define      gdk_gl_glVideoCaptureStreamParameterdvNV(proc, video_capture_slot, stream, pname, params) \
+  ( ((GdkGLProc_glVideoCaptureStreamParameterdvNV) (proc)) (video_capture_slot, stream, pname, params) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_video_capture GdkGL_GL_NV_video_capture;
+
+struct _GdkGL_GL_NV_video_capture
+{
+  GdkGLProc_glBeginVideoCaptureNV glBeginVideoCaptureNV;
+  GdkGLProc_glBindVideoCaptureStreamBufferNV glBindVideoCaptureStreamBufferNV;
+  GdkGLProc_glBindVideoCaptureStreamTextureNV glBindVideoCaptureStreamTextureNV;
+  GdkGLProc_glEndVideoCaptureNV glEndVideoCaptureNV;
+  GdkGLProc_glGetVideoCaptureivNV glGetVideoCaptureivNV;
+  GdkGLProc_glGetVideoCaptureStreamivNV glGetVideoCaptureStreamivNV;
+  GdkGLProc_glGetVideoCaptureStreamfvNV glGetVideoCaptureStreamfvNV;
+  GdkGLProc_glGetVideoCaptureStreamdvNV glGetVideoCaptureStreamdvNV;
+  GdkGLProc_glVideoCaptureNV glVideoCaptureNV;
+  GdkGLProc_glVideoCaptureStreamParameterivNV glVideoCaptureStreamParameterivNV;
+  GdkGLProc_glVideoCaptureStreamParameterfvNV glVideoCaptureStreamParameterfvNV;
+  GdkGLProc_glVideoCaptureStreamParameterdvNV glVideoCaptureStreamParameterdvNV;
+};
+
+GdkGL_GL_NV_video_capture *gdk_gl_get_GL_NV_video_capture (void);
+
+/*
+ * GL_NV_copy_image
+ */
+
+/* glCopyImageSubDataNV */
+typedef void (APIENTRYP GdkGLProc_glCopyImageSubDataNV) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+GdkGLProc    gdk_gl_get_glCopyImageSubDataNV (void);
+#define      gdk_gl_glCopyImageSubDataNV(proc, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) \
+  ( ((GdkGLProc_glCopyImageSubDataNV) (proc)) (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_copy_image GdkGL_GL_NV_copy_image;
+
+struct _GdkGL_GL_NV_copy_image
+{
+  GdkGLProc_glCopyImageSubDataNV glCopyImageSubDataNV;
+};
+
+GdkGL_GL_NV_copy_image *gdk_gl_get_GL_NV_copy_image (void);
+
+/*
+ * GL_EXT_separate_shader_objects
+ */
+
+/* glUseShaderProgramEXT */
+typedef void (APIENTRYP GdkGLProc_glUseShaderProgramEXT) (GLenum type, GLuint program);
+GdkGLProc    gdk_gl_get_glUseShaderProgramEXT (void);
+#define      gdk_gl_glUseShaderProgramEXT(proc, type, program) \
+  ( ((GdkGLProc_glUseShaderProgramEXT) (proc)) (type, program) )
+
+/* glActiveProgramEXT */
+typedef void (APIENTRYP GdkGLProc_glActiveProgramEXT) (GLuint program);
+GdkGLProc    gdk_gl_get_glActiveProgramEXT (void);
+#define      gdk_gl_glActiveProgramEXT(proc, program) \
+  ( ((GdkGLProc_glActiveProgramEXT) (proc)) (program) )
+
+/* glCreateShaderProgramEXT */
+typedef GLuint (APIENTRYP GdkGLProc_glCreateShaderProgramEXT) (GLenum type, const GLchar *string);
+GdkGLProc    gdk_gl_get_glCreateShaderProgramEXT (void);
+#define      gdk_gl_glCreateShaderProgramEXT(proc, type, string) \
+  ( ((GdkGLProc_glCreateShaderProgramEXT) (proc)) (type, string) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_EXT_separate_shader_objects GdkGL_GL_EXT_separate_shader_objects;
+
+struct _GdkGL_GL_EXT_separate_shader_objects
+{
+  GdkGLProc_glUseShaderProgramEXT glUseShaderProgramEXT;
+  GdkGLProc_glActiveProgramEXT glActiveProgramEXT;
+  GdkGLProc_glCreateShaderProgramEXT glCreateShaderProgramEXT;
+};
+
+GdkGL_GL_EXT_separate_shader_objects *gdk_gl_get_GL_EXT_separate_shader_objects (void);
+
+/*
+ * GL_NV_shader_buffer_load
+ */
+
+/* glMakeBufferResidentNV */
+typedef void (APIENTRYP GdkGLProc_glMakeBufferResidentNV) (GLenum target, GLenum access);
+GdkGLProc    gdk_gl_get_glMakeBufferResidentNV (void);
+#define      gdk_gl_glMakeBufferResidentNV(proc, target, access) \
+  ( ((GdkGLProc_glMakeBufferResidentNV) (proc)) (target, access) )
+
+/* glMakeBufferNonResidentNV */
+typedef void (APIENTRYP GdkGLProc_glMakeBufferNonResidentNV) (GLenum target);
+GdkGLProc    gdk_gl_get_glMakeBufferNonResidentNV (void);
+#define      gdk_gl_glMakeBufferNonResidentNV(proc, target) \
+  ( ((GdkGLProc_glMakeBufferNonResidentNV) (proc)) (target) )
+
+/* glIsBufferResidentNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsBufferResidentNV) (GLenum target);
+GdkGLProc    gdk_gl_get_glIsBufferResidentNV (void);
+#define      gdk_gl_glIsBufferResidentNV(proc, target) \
+  ( ((GdkGLProc_glIsBufferResidentNV) (proc)) (target) )
+
+/* glNamedMakeBufferResidentNV */
+typedef void (APIENTRYP GdkGLProc_glNamedMakeBufferResidentNV) (GLuint buffer, GLenum access);
+GdkGLProc    gdk_gl_get_glNamedMakeBufferResidentNV (void);
+#define      gdk_gl_glNamedMakeBufferResidentNV(proc, buffer, access) \
+  ( ((GdkGLProc_glNamedMakeBufferResidentNV) (proc)) (buffer, access) )
+
+/* glNamedMakeBufferNonResidentNV */
+typedef void (APIENTRYP GdkGLProc_glNamedMakeBufferNonResidentNV) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glNamedMakeBufferNonResidentNV (void);
+#define      gdk_gl_glNamedMakeBufferNonResidentNV(proc, buffer) \
+  ( ((GdkGLProc_glNamedMakeBufferNonResidentNV) (proc)) (buffer) )
+
+/* glIsNamedBufferResidentNV */
+typedef GLboolean (APIENTRYP GdkGLProc_glIsNamedBufferResidentNV) (GLuint buffer);
+GdkGLProc    gdk_gl_get_glIsNamedBufferResidentNV (void);
+#define      gdk_gl_glIsNamedBufferResidentNV(proc, buffer) \
+  ( ((GdkGLProc_glIsNamedBufferResidentNV) (proc)) (buffer) )
+
+/* glGetBufferParameterui64vNV */
+typedef void (APIENTRYP GdkGLProc_glGetBufferParameterui64vNV) (GLenum target, GLenum pname, GLuint64EXT *params);
+GdkGLProc    gdk_gl_get_glGetBufferParameterui64vNV (void);
+#define      gdk_gl_glGetBufferParameterui64vNV(proc, target, pname, params) \
+  ( ((GdkGLProc_glGetBufferParameterui64vNV) (proc)) (target, pname, params) )
+
+/* glGetNamedBufferParameterui64vNV */
+typedef void (APIENTRYP GdkGLProc_glGetNamedBufferParameterui64vNV) (GLuint buffer, GLenum pname, GLuint64EXT *params);
+GdkGLProc    gdk_gl_get_glGetNamedBufferParameterui64vNV (void);
+#define      gdk_gl_glGetNamedBufferParameterui64vNV(proc, buffer, pname, params) \
+  ( ((GdkGLProc_glGetNamedBufferParameterui64vNV) (proc)) (buffer, pname, params) )
+
+/* glGetIntegerui64vNV */
+typedef void (APIENTRYP GdkGLProc_glGetIntegerui64vNV) (GLenum value, GLuint64EXT *result);
+GdkGLProc    gdk_gl_get_glGetIntegerui64vNV (void);
+#define      gdk_gl_glGetIntegerui64vNV(proc, value, result) \
+  ( ((GdkGLProc_glGetIntegerui64vNV) (proc)) (value, result) )
+
+/* glUniformui64NV */
+typedef void (APIENTRYP GdkGLProc_glUniformui64NV) (GLint location, GLuint64EXT value);
+GdkGLProc    gdk_gl_get_glUniformui64NV (void);
+#define      gdk_gl_glUniformui64NV(proc, location, value) \
+  ( ((GdkGLProc_glUniformui64NV) (proc)) (location, value) )
+
+/* glUniformui64vNV */
+typedef void (APIENTRYP GdkGLProc_glUniformui64vNV) (GLint location, GLsizei count, const GLuint64EXT *value);
+GdkGLProc    gdk_gl_get_glUniformui64vNV (void);
+#define      gdk_gl_glUniformui64vNV(proc, location, count, value) \
+  ( ((GdkGLProc_glUniformui64vNV) (proc)) (location, count, value) )
+
+/* glGetUniformui64vNV */
+typedef void (APIENTRYP GdkGLProc_glGetUniformui64vNV) (GLuint program, GLint location, GLuint64EXT *params);
+GdkGLProc    gdk_gl_get_glGetUniformui64vNV (void);
+#define      gdk_gl_glGetUniformui64vNV(proc, program, location, params) \
+  ( ((GdkGLProc_glGetUniformui64vNV) (proc)) (program, location, params) )
+
+/* glProgramUniformui64NV */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformui64NV) (GLuint program, GLint location, GLuint64EXT value);
+GdkGLProc    gdk_gl_get_glProgramUniformui64NV (void);
+#define      gdk_gl_glProgramUniformui64NV(proc, program, location, value) \
+  ( ((GdkGLProc_glProgramUniformui64NV) (proc)) (program, location, value) )
+
+/* glProgramUniformui64vNV */
+typedef void (APIENTRYP GdkGLProc_glProgramUniformui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+GdkGLProc    gdk_gl_get_glProgramUniformui64vNV (void);
+#define      gdk_gl_glProgramUniformui64vNV(proc, program, location, count, value) \
+  ( ((GdkGLProc_glProgramUniformui64vNV) (proc)) (program, location, count, value) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_shader_buffer_load GdkGL_GL_NV_shader_buffer_load;
+
+struct _GdkGL_GL_NV_shader_buffer_load
+{
+  GdkGLProc_glMakeBufferResidentNV glMakeBufferResidentNV;
+  GdkGLProc_glMakeBufferNonResidentNV glMakeBufferNonResidentNV;
+  GdkGLProc_glIsBufferResidentNV glIsBufferResidentNV;
+  GdkGLProc_glNamedMakeBufferResidentNV glNamedMakeBufferResidentNV;
+  GdkGLProc_glNamedMakeBufferNonResidentNV glNamedMakeBufferNonResidentNV;
+  GdkGLProc_glIsNamedBufferResidentNV glIsNamedBufferResidentNV;
+  GdkGLProc_glGetBufferParameterui64vNV glGetBufferParameterui64vNV;
+  GdkGLProc_glGetNamedBufferParameterui64vNV glGetNamedBufferParameterui64vNV;
+  GdkGLProc_glGetIntegerui64vNV glGetIntegerui64vNV;
+  GdkGLProc_glUniformui64NV glUniformui64NV;
+  GdkGLProc_glUniformui64vNV glUniformui64vNV;
+  GdkGLProc_glGetUniformui64vNV glGetUniformui64vNV;
+  GdkGLProc_glProgramUniformui64NV glProgramUniformui64NV;
+  GdkGLProc_glProgramUniformui64vNV glProgramUniformui64vNV;
+};
+
+GdkGL_GL_NV_shader_buffer_load *gdk_gl_get_GL_NV_shader_buffer_load (void);
+
+/*
+ * GL_NV_vertex_buffer_unified_memory
+ */
+
+/* glBufferAddressRangeNV */
+typedef void (APIENTRYP GdkGLProc_glBufferAddressRangeNV) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
+GdkGLProc    gdk_gl_get_glBufferAddressRangeNV (void);
+#define      gdk_gl_glBufferAddressRangeNV(proc, pname, index, address, length) \
+  ( ((GdkGLProc_glBufferAddressRangeNV) (proc)) (pname, index, address, length) )
+
+/* glVertexFormatNV */
+typedef void (APIENTRYP GdkGLProc_glVertexFormatNV) (GLint size, GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glVertexFormatNV (void);
+#define      gdk_gl_glVertexFormatNV(proc, size, type, stride) \
+  ( ((GdkGLProc_glVertexFormatNV) (proc)) (size, type, stride) )
+
+/* glNormalFormatNV */
+typedef void (APIENTRYP GdkGLProc_glNormalFormatNV) (GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glNormalFormatNV (void);
+#define      gdk_gl_glNormalFormatNV(proc, type, stride) \
+  ( ((GdkGLProc_glNormalFormatNV) (proc)) (type, stride) )
+
+/* glColorFormatNV */
+typedef void (APIENTRYP GdkGLProc_glColorFormatNV) (GLint size, GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glColorFormatNV (void);
+#define      gdk_gl_glColorFormatNV(proc, size, type, stride) \
+  ( ((GdkGLProc_glColorFormatNV) (proc)) (size, type, stride) )
+
+/* glIndexFormatNV */
+typedef void (APIENTRYP GdkGLProc_glIndexFormatNV) (GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glIndexFormatNV (void);
+#define      gdk_gl_glIndexFormatNV(proc, type, stride) \
+  ( ((GdkGLProc_glIndexFormatNV) (proc)) (type, stride) )
+
+/* glTexCoordFormatNV */
+typedef void (APIENTRYP GdkGLProc_glTexCoordFormatNV) (GLint size, GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glTexCoordFormatNV (void);
+#define      gdk_gl_glTexCoordFormatNV(proc, size, type, stride) \
+  ( ((GdkGLProc_glTexCoordFormatNV) (proc)) (size, type, stride) )
+
+/* glEdgeFlagFormatNV */
+typedef void (APIENTRYP GdkGLProc_glEdgeFlagFormatNV) (GLsizei stride);
+GdkGLProc    gdk_gl_get_glEdgeFlagFormatNV (void);
+#define      gdk_gl_glEdgeFlagFormatNV(proc, stride) \
+  ( ((GdkGLProc_glEdgeFlagFormatNV) (proc)) (stride) )
+
+/* glSecondaryColorFormatNV */
+typedef void (APIENTRYP GdkGLProc_glSecondaryColorFormatNV) (GLint size, GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glSecondaryColorFormatNV (void);
+#define      gdk_gl_glSecondaryColorFormatNV(proc, size, type, stride) \
+  ( ((GdkGLProc_glSecondaryColorFormatNV) (proc)) (size, type, stride) )
+
+/* glFogCoordFormatNV */
+typedef void (APIENTRYP GdkGLProc_glFogCoordFormatNV) (GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glFogCoordFormatNV (void);
+#define      gdk_gl_glFogCoordFormatNV(proc, type, stride) \
+  ( ((GdkGLProc_glFogCoordFormatNV) (proc)) (type, stride) )
+
+/* glVertexAttribFormatNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribFormatNV) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
+GdkGLProc    gdk_gl_get_glVertexAttribFormatNV (void);
+#define      gdk_gl_glVertexAttribFormatNV(proc, index, size, type, normalized, stride) \
+  ( ((GdkGLProc_glVertexAttribFormatNV) (proc)) (index, size, type, normalized, stride) )
+
+/* glVertexAttribIFormatNV */
+typedef void (APIENTRYP GdkGLProc_glVertexAttribIFormatNV) (GLuint index, GLint size, GLenum type, GLsizei stride);
+GdkGLProc    gdk_gl_get_glVertexAttribIFormatNV (void);
+#define      gdk_gl_glVertexAttribIFormatNV(proc, index, size, type, stride) \
+  ( ((GdkGLProc_glVertexAttribIFormatNV) (proc)) (index, size, type, stride) )
+
+/* glGetIntegerui64i_vNV */
+typedef void (APIENTRYP GdkGLProc_glGetIntegerui64i_vNV) (GLenum value, GLuint index, GLuint64EXT *result);
+GdkGLProc    gdk_gl_get_glGetIntegerui64i_vNV (void);
+#define      gdk_gl_glGetIntegerui64i_vNV(proc, value, index, result) \
+  ( ((GdkGLProc_glGetIntegerui64i_vNV) (proc)) (value, index, result) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_vertex_buffer_unified_memory GdkGL_GL_NV_vertex_buffer_unified_memory;
+
+struct _GdkGL_GL_NV_vertex_buffer_unified_memory
+{
+  GdkGLProc_glBufferAddressRangeNV glBufferAddressRangeNV;
+  GdkGLProc_glVertexFormatNV glVertexFormatNV;
+  GdkGLProc_glNormalFormatNV glNormalFormatNV;
+  GdkGLProc_glColorFormatNV glColorFormatNV;
+  GdkGLProc_glIndexFormatNV glIndexFormatNV;
+  GdkGLProc_glTexCoordFormatNV glTexCoordFormatNV;
+  GdkGLProc_glEdgeFlagFormatNV glEdgeFlagFormatNV;
+  GdkGLProc_glSecondaryColorFormatNV glSecondaryColorFormatNV;
+  GdkGLProc_glFogCoordFormatNV glFogCoordFormatNV;
+  GdkGLProc_glVertexAttribFormatNV glVertexAttribFormatNV;
+  GdkGLProc_glVertexAttribIFormatNV glVertexAttribIFormatNV;
+  GdkGLProc_glGetIntegerui64i_vNV glGetIntegerui64i_vNV;
+};
+
+GdkGL_GL_NV_vertex_buffer_unified_memory *gdk_gl_get_GL_NV_vertex_buffer_unified_memory (void);
+
+/*
+ * GL_NV_texture_barrier
+ */
+
+/* glTextureBarrierNV */
+typedef void (APIENTRYP GdkGLProc_glTextureBarrierNV) (void);
+GdkGLProc    gdk_gl_get_glTextureBarrierNV (void);
+#define      gdk_gl_glTextureBarrierNV(proc) \
+  ( ((GdkGLProc_glTextureBarrierNV) (proc)) () )
+
+/* proc struct */
+
+typedef struct _GdkGL_GL_NV_texture_barrier GdkGL_GL_NV_texture_barrier;
+
+struct _GdkGL_GL_NV_texture_barrier
+{
+  GdkGLProc_glTextureBarrierNV glTextureBarrierNV;
+};
+
+GdkGL_GL_NV_texture_barrier *gdk_gl_get_GL_NV_texture_barrier (void);
+
 /*
  * GL_ATI_blend_equation_separate
  */
@@ -8089,27 +13959,6 @@ struct _GdkGL_GL_Autodesk_valid_back_buffer_hint
 
 GdkGL_GL_Autodesk_valid_back_buffer_hint *gdk_gl_get_GL_Autodesk_valid_back_buffer_hint (void);
 
-/*
- * GL_EXT_depth_bounds_test
- */
-
-/* glDepthBoundsEXT */
-typedef void (APIENTRY * GdkGLProc_glDepthBoundsEXT) (GLclampd zmin, GLclampd zmax);
-GdkGLProc    gdk_gl_get_glDepthBoundsEXT (void);
-#define      gdk_gl_glDepthBoundsEXT(proc, zmin, zmax) \
-  ( ((GdkGLProc_glDepthBoundsEXT) (proc)) (zmin, zmax) )
-
-/* proc struct */
-
-typedef struct _GdkGL_GL_EXT_depth_bounds_test GdkGL_GL_EXT_depth_bounds_test;
-
-struct _GdkGL_GL_EXT_depth_bounds_test
-{
-  GdkGLProc_glDepthBoundsEXT glDepthBoundsEXT;
-};
-
-GdkGL_GL_EXT_depth_bounds_test *gdk_gl_get_GL_EXT_depth_bounds_test (void);
-
 /*
  * GL_EXT_fragment_lighting
  */
diff --git a/gdk/gdkglinit.c b/gdk/gdkglinit.c
index b2fcb45..40aca90 100644
--- a/gdk/gdkglinit.c
+++ b/gdk/gdkglinit.c
@@ -16,8 +16,11 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include <string.h>
-#include <stdlib.h>
 
 #include "gdkglprivate.h"
 #include "gdkglquery.h"
@@ -41,9 +44,9 @@ static const guint gdk_gl_ndebug_keys = G_N_ELEMENTS (gdk_gl_debug_keys);
 
 /**
  * gdk_gl_parse_args:
- * @argc: the number of command line arguments.
- * @argv: the array of command line arguments.
- * 
+ * @argc: (inout): the number of command line arguments.
+ * @argv: (array length=argc) (inout) (allow-none): the array of command line arguments.
+ *
  * Parses command line arguments, and initializes global
  * attributes of GdkGLExt.
  *
@@ -52,17 +55,15 @@ static const guint gdk_gl_ndebug_keys = G_N_ELEMENTS (gdk_gl_debug_keys);
  *
  * You shouldn't call this function explicitely if you are using
  * gdk_gl_init(), or gdk_gl_init_check().
- *
- * Return value: %TRUE if initialization succeeded, otherwise %FALSE.
  **/
-gboolean
+static void
 gdk_gl_parse_args (int    *argc,
                    char ***argv)
 {
   const gchar *env_string;
 
   if (gdk_gl_initialized)
-    return TRUE;
+    return;
 
   env_string = g_getenv ("GDK_GL_NO_STANDARD_COLORMAP");
   if (env_string != NULL)
@@ -92,7 +93,7 @@ gdk_gl_parse_args (int    *argc,
   if (argc && argv)
     {
       gint i, j, k;
-      
+
       for (i = 1; i < *argc;)
 	{
           if (strcmp ("--gdk-gl-no-standard-colormap", (*argv)[i]) == 0)
@@ -110,7 +111,7 @@ gdk_gl_parse_args (int    *argc,
                    (strncmp ("--gdk-gl-debug=", (*argv)[i], 15) == 0))
 	    {
 	      gchar *equal_pos = strchr ((*argv)[i], '=');
-	      
+
 	      if (equal_pos != NULL)
 		{
 		  gdk_gl_debug_flags |= g_parse_debug_string (equal_pos+1,
@@ -131,7 +132,7 @@ gdk_gl_parse_args (int    *argc,
 		   (strncmp ("--gdk-gl-no-debug=", (*argv)[i], 18) == 0))
 	    {
 	      gchar *equal_pos = strchr ((*argv)[i], '=');
-	      
+
 	      if (equal_pos != NULL)
 		{
 		  gdk_gl_debug_flags &= ~g_parse_debug_string (equal_pos+1,
@@ -151,13 +152,13 @@ gdk_gl_parse_args (int    *argc,
 #endif /* G_ENABLE_DEBUG */
 	  i += 1;
 	}
-      
+
       for (i = 1; i < *argc; i++)
 	{
 	  for (k = i; k < *argc; k++)
 	    if ((*argv)[k] != NULL)
 	      break;
-	  
+
 	  if (k > i)
 	    {
 	      k -= i;
@@ -171,27 +172,25 @@ gdk_gl_parse_args (int    *argc,
 
   /* Set the 'initialized' flag. */
   gdk_gl_initialized = TRUE;
-
-  return TRUE;
 }
 
 /**
  * gdk_gl_init_check:
- * @argc: Address of the <parameter>argc</parameter> parameter of your 
+ * @argc: (inout): Address of the <parameter>argc</parameter> parameter of your
  *        <function>main()</function> function. Changed if any arguments
  *        were handled.
- * @argv: Address of the <parameter>argv</parameter> parameter of 
+ * @argv: (array length=argc) (inout) (allow-none): Address of the <parameter>argv</parameter> parameter of
  *        <function>main()</function>. Any parameters understood by
  *        gdk_gl_init() are stripped before return.
- * 
- * This function does the same work as gdk_gl_init() with only 
- * a single change: It does not terminate the program if the library can't be 
+ *
+ * This function does the same work as gdk_gl_init() with only
+ * a single change: It does not terminate the program if the library can't be
  * initialized. Instead it returns %FALSE on failure.
  *
- * This way the application can fall back to some other means of communication 
+ * This way the application can fall back to some other means of communication
  * with the user - for example a curses or command line interface.
- * 
- * Return value: %TRUE if the GUI has been successfully initialized, 
+ *
+ * Return value: %TRUE if the GUI has been successfully initialized,
  *               %FALSE otherwise.
  **/
 gboolean
@@ -199,11 +198,7 @@ gdk_gl_init_check (int    *argc,
                    char ***argv)
 {
   /* Parse args and init GdkGLExt library. */
-  if (!gdk_gl_parse_args (argc, argv))
-    {
-      g_warning ("GdkGLExt library initialization fails.");
-      return FALSE;
-    }
+  gdk_gl_parse_args (argc, argv);
 
   /* Is OpenGL supported? */
   if (!gdk_gl_query_extension ())
@@ -217,29 +212,27 @@ gdk_gl_init_check (int    *argc,
 
 /**
  * gdk_gl_init:
- * @argc: Address of the <parameter>argc</parameter> parameter of your 
- *        <function>main()</function> function. Changed if any arguments
- *        were handled.
- * @argv: Address of the <parameter>argv</parameter> parameter of 
- *        <function>main()</function>. Any parameters understood by
- *        gdk_gl_init() are stripped before return.
- * 
- * Call this function before using any other GdkGLExt functions in your 
- * applications.  It will initialize everything needed to operate the library
- * and parses some standard command line options. @argc and 
- * @argv are adjusted accordingly so your own code will 
- * never see those standard arguments.
+ * @argc: (inout): Address of the <parameter>argc</parameter> parameter of your
+ * main() function. Changed if any arguments were handled.
+ * @argv: (array length=argc) (inout) (allow-none): Address of the <parameter>argv</parameter> parameter of
+ * main(). Any parameters understood by gdk_gl_init() are stripped
+ * before return.
+ *
+ * Call this function before using any other GdkGLExt functions in your
+ * applications.  It will initialize everything needed to operate the
+ * library and parses some standard command line options. @argc and
+ * @argv are adjusted accordingly so your own code will never see those
+ * standard arguments.
  *
- * <note><para>
- * This function will terminate your program if it was unable to initialize 
- * the library for some reason. If you want your program to fall back to a 
- * textual interface you want to call gdk_gl_init_check() instead.
- * </para></note>
+ * <note><para>This function will terminate your program if it was
+ * unable to initialize the library for some reason. If you want your
+ * program to fall back to a textual interface you want to call
+ * gdk_gl_init_check() instead.</para></note>
  **/
 void
 gdk_gl_init (int    *argc,
              char ***argv)
 {
   if (!gdk_gl_init_check (argc, argv))
-    exit (1);
+    g_error ("GdkGLExt library initialization fails.");
 }
diff --git a/gdk/gdkglinit.h b/gdk/gdkglinit.h
index c0abdd1..0661b10 100644
--- a/gdk/gdkglinit.h
+++ b/gdk/gdkglinit.h
@@ -28,9 +28,6 @@ G_BEGIN_DECLS
  * Initialization routines.
  */
 
-gboolean gdk_gl_parse_args (int    *argc,
-                            char ***argv);
-
 gboolean gdk_gl_init_check (int    *argc,
                             char ***argv);
 
diff --git a/gdk/gdkglpixmap.c b/gdk/gdkglpixmap.c
index b2971fe..75af9e7 100644
--- a/gdk/gdkglpixmap.c
+++ b/gdk/gdkglpixmap.c
@@ -16,7 +16,11 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
-#include <gtk/gtkversion.h>
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
+#include <gtk/gtk.h>
 
 #include "gdkglprivate.h"
 #include "gdkglconfig.h"
@@ -96,82 +100,100 @@ static void   gdk_gl_pixmap_draw_image     (GdkDrawable      *drawable,
                                             gint              ydest,
                                             gint              width,
                                             gint              height);
-static gint         gdk_gl_pixmap_get_depth              (GdkDrawable *drawable);
-static void         gdk_gl_pixmap_get_size               (GdkDrawable *drawable,
-                                                          gint        *width,
-                                                          gint        *height);
-static void         gdk_gl_pixmap_set_colormap           (GdkDrawable *drawable,
-                                                          GdkColormap *cmap);
-static GdkColormap *gdk_gl_pixmap_get_colormap           (GdkDrawable *drawable);
-static GdkVisual   *gdk_gl_pixmap_get_visual             (GdkDrawable *drawable);
-#if !(GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0)
-static GdkScreen   *gdk_gl_pixmap_get_screen             (GdkDrawable *drawable);
-#endif
-static GdkImage    *gdk_gl_pixmap_get_image              (GdkDrawable *drawable,
-                                                          gint         x,
-                                                          gint         y,
-                                                          gint         width,
-                                                          gint         height);
-static GdkRegion   *gdk_gl_pixmap_get_clip_region        (GdkDrawable *drawable);
-static GdkRegion   *gdk_gl_pixmap_get_visible_region     (GdkDrawable *drawable);
-static GdkDrawable *gdk_gl_pixmap_get_composite_drawable (GdkDrawable *drawable,
-                                                          gint         x,
-                                                          gint         y,
-                                                          gint         width,
-                                                          gint         height,
-                                                          gint        *composite_x_offset,
-                                                          gint        *composite_y_offset);
-static void         gdk_gl_pixmap_draw_pixbuf   (GdkDrawable *drawable,
-                                                 GdkGC       *gc,
-                                                 GdkPixbuf   *pixbuf,
-                                                 gint         src_x,
-                                                 gint         src_y,
-                                                 gint         dest_x,
-                                                 gint         dest_y,
-                                                 gint         width,
-                                                 gint         height,
-                                                 GdkRgbDither dither,
-                                                 gint         x_dither,
-                                                 gint         y_dither);
-static GdkImage    *gdk_gl_pixmap_copy_to_image (GdkDrawable *drawable,
-                                                 GdkImage    *image,
-                                                 gint         src_x,
-                                                 gint         src_y,
-                                                 gint         dest_x,
-                                                 gint         dest_y,
-                                                 gint         width,
-                                                 gint         height);
-
-static void gdk_gl_pixmap_class_init (GdkGLPixmapClass *klass);
-static void gdk_gl_pixmap_finalize   (GObject          *object);
-
-static gpointer parent_class = NULL;
-
-GType
-gdk_gl_pixmap_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLPixmapClass),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_pixmap_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLPixmap),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (GDK_TYPE_DRAWABLE,
-                                     "GdkGLPixmap",
-                                     &type_info, 0);
-    }
 
-  return type;
+static gint             gdk_gl_pixmap_get_depth               (GdkDrawable      *drawable);
+static void             gdk_gl_pixmap_get_size                (GdkDrawable      *drawable,
+                                                               gint             *width,
+                                                               gint             *height);
+static void             gdk_gl_pixmap_set_colormap            (GdkDrawable      *drawable,
+                                                               GdkColormap      *cmap);
+static GdkColormap *    gdk_gl_pixmap_get_colormap            (GdkDrawable      *drawable);
+static GdkVisual   *    gdk_gl_pixmap_get_visual              (GdkDrawable      *drawable);
+static GdkScreen   *    gdk_gl_pixmap_get_screen              (GdkDrawable      *drawable);
+static GdkImage    *    gdk_gl_pixmap_get_image               (GdkDrawable      *drawable,
+                                                               gint              x,
+                                                               gint              y,
+                                                               gint              width,
+                                                               gint              height);
+static GdkRegion   *    gdk_gl_pixmap_get_clip_region         (GdkDrawable      *drawable);
+static GdkRegion   *    gdk_gl_pixmap_get_visible_region      (GdkDrawable      *drawable);
+static GdkDrawable *    gdk_gl_pixmap_get_composite_drawable  (GdkDrawable      *drawable,
+                                                               gint              x,
+                                                               gint              y,
+                                                               gint              width,
+                                                               gint              height,
+                                                               gint             *composite_x_offset,
+                                                               gint             *composite_y_offset);
+static void             gdk_gl_pixmap_draw_pixbuf             (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               GdkPixbuf        *pixbuf,
+                                                               gint              src_x,
+                                                               gint              src_y,
+                                                               gint              dest_x,
+                                                               gint              dest_y,
+                                                               gint              width,
+                                                               gint              height,
+                                                               GdkRgbDither      dither,
+                                                               gint              x_dither,
+                                                               gint              y_dither);
+static GdkImage    *    gdk_gl_pixmap_copy_to_image           (GdkDrawable      *drawable,
+                                                               GdkImage         *image,
+                                                               gint              src_x,
+                                                               gint              src_y,
+                                                               gint              dest_x,
+                                                               gint              dest_y,
+                                                               gint              width,
+                                                               gint              height);
+static void             gdk_gl_pixmap_draw_glyphs_transformed (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               PangoMatrix      *matrix,
+                                                               PangoFont        *font,
+                                                               gint              x,
+                                                               gint              y,
+                                                               PangoGlyphString *glyphs);
+static void             gdk_gl_pixmap_draw_trapezoids         (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               GdkTrapezoid     *trapezoids,
+                                                               gint              n_trapezoids);
+static cairo_surface_t *gdk_gl_pixmap_ref_cairo_surface       (GdkDrawable      *drawable);
+static GdkDrawable *    gdk_gl_pixmap_get_source_drawable     (GdkDrawable      *drawable);
+static void             gdk_gl_pixmap_set_cairo_clip          (GdkDrawable      *drawable,
+                                                               cairo_t          *cr);
+static cairo_surface_t *gdk_gl_pixmap_create_cairo_surface    (GdkDrawable      *drawable,
+                                                               int               width,
+                                                               int               height);
+static void             gdk_gl_pixmap_draw_drawable_with_src  (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               GdkDrawable      *src,
+                                                               gint              xsrc,
+                                                               gint              ysrc,
+                                                               gint              xdest,
+                                                               gint              ydest,
+                                                               gint              width,
+                                                               gint              height,
+                                                               GdkDrawable      *original_src);
+
+G_DEFINE_TYPE (GdkGLPixmap,                     \
+               gdk_gl_pixmap,                   \
+               GDK_TYPE_DRAWABLE)
+
+static void
+gdk_gl_pixmap_init (GdkGLPixmap *self)
+{
+}
+
+static void
+gdk_gl_pixmap_finalize (GObject *object)
+{
+  GdkGLPixmap *glpixmap = GDK_GL_PIXMAP (object);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  if (glpixmap->drawable != NULL)
+    g_object_remove_weak_pointer (G_OBJECT (glpixmap->drawable),
+                                  (gpointer *) &(glpixmap->drawable));
+
+  G_OBJECT_CLASS (gdk_gl_pixmap_parent_class)->finalize (object);
 }
 
 static void
@@ -182,8 +204,6 @@ gdk_gl_pixmap_class_init (GdkGLPixmapClass *klass)
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-  parent_class = g_type_class_peek_parent (klass);
-
   object_class->finalize = gdk_gl_pixmap_finalize;
 
   drawable_class->create_gc              = gdk_gl_pixmap_create_gc;
@@ -203,33 +223,20 @@ gdk_gl_pixmap_class_init (GdkGLPixmapClass *klass)
   drawable_class->set_colormap           = gdk_gl_pixmap_set_colormap;
   drawable_class->get_colormap           = gdk_gl_pixmap_get_colormap;
   drawable_class->get_visual             = gdk_gl_pixmap_get_visual;
-#if !(GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0)
   drawable_class->get_screen             = gdk_gl_pixmap_get_screen;
-#endif
   drawable_class->get_image              = gdk_gl_pixmap_get_image;
   drawable_class->get_clip_region        = gdk_gl_pixmap_get_clip_region;
   drawable_class->get_visible_region     = gdk_gl_pixmap_get_visible_region;
   drawable_class->get_composite_drawable = gdk_gl_pixmap_get_composite_drawable;
-#if GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0
-  drawable_class->_draw_pixbuf           = gdk_gl_pixmap_draw_pixbuf;
-#else
   drawable_class->draw_pixbuf            = gdk_gl_pixmap_draw_pixbuf;
-#endif
   drawable_class->_copy_to_image         = gdk_gl_pixmap_copy_to_image;
-}
-
-static void
-gdk_gl_pixmap_finalize (GObject *object)
-{
-  GdkGLPixmap *glpixmap = GDK_GL_PIXMAP (object);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  if (glpixmap->drawable != NULL)
-    g_object_remove_weak_pointer (G_OBJECT (glpixmap->drawable),
-                                  (gpointer *) &(glpixmap->drawable));
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  drawable_class->draw_glyphs_transformed = gdk_gl_pixmap_draw_glyphs_transformed;
+  drawable_class->draw_trapezoids        = gdk_gl_pixmap_draw_trapezoids;
+  drawable_class->ref_cairo_surface      = gdk_gl_pixmap_ref_cairo_surface;
+  drawable_class->get_source_drawable    = gdk_gl_pixmap_get_source_drawable;
+  drawable_class->set_cairo_clip         = gdk_gl_pixmap_set_cairo_clip;
+  drawable_class->create_cairo_surface   = gdk_gl_pixmap_create_cairo_surface;
+  drawable_class->draw_drawable_with_src = gdk_gl_pixmap_draw_drawable_with_src;
 }
 
 static GdkGC *
@@ -498,8 +505,6 @@ gdk_gl_pixmap_get_visual (GdkDrawable *drawable)
   return GDK_DRAWABLE_GET_CLASS (real_drawable)->get_visual (real_drawable);
 }
 
-#if !(GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0)
-
 static GdkScreen *
 gdk_gl_pixmap_get_screen (GdkDrawable *drawable)
 {
@@ -508,8 +513,6 @@ gdk_gl_pixmap_get_screen (GdkDrawable *drawable)
   return GDK_DRAWABLE_GET_CLASS (real_drawable)->get_screen (real_drawable);
 }
 
-#endif
-
 static GdkImage *
 gdk_gl_pixmap_get_image (GdkDrawable *drawable,
                          gint         x,
@@ -578,20 +581,6 @@ gdk_gl_pixmap_draw_pixbuf (GdkDrawable *drawable,
 {
   GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
 
-#if GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0
-  GDK_DRAWABLE_GET_CLASS (real_drawable)->_draw_pixbuf (real_drawable,
-                                                        gc,
-                                                        pixbuf,
-                                                        src_x,
-                                                        src_y,
-                                                        dest_x,
-                                                        dest_y,
-                                                        width,
-                                                        height,
-                                                        dither,
-                                                        x_dither,
-                                                        y_dither);
-#else
   GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_pixbuf (real_drawable,
                                                        gc,
                                                        pixbuf,
@@ -604,7 +593,6 @@ gdk_gl_pixmap_draw_pixbuf (GdkDrawable *drawable,
                                                        dither,
                                                        x_dither,
                                                        y_dither);
-#endif
 }
 
 static GdkImage *
@@ -629,6 +617,103 @@ gdk_gl_pixmap_copy_to_image (GdkDrawable *drawable,
                                                                  height);
 }
 
+static void
+gdk_gl_pixmap_draw_glyphs_transformed (GdkDrawable      *drawable,
+                                       GdkGC            *gc,
+                                       PangoMatrix      *matrix,
+                                       PangoFont        *font,
+                                       gint              x,
+                                       gint              y,
+                                       PangoGlyphString *glyphs)
+{
+  GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_glyphs_transformed (real_drawable,
+                                                                   gc,
+                                                                   matrix,
+                                                                   font,
+                                                                   x,
+                                                                   y,
+                                                                   glyphs);
+}
+
+static void
+gdk_gl_pixmap_draw_trapezoids (GdkDrawable     *drawable,
+                               GdkGC	       *gc,
+                               GdkTrapezoid    *trapezoids,
+                               gint             n_trapezoids)
+{
+  GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_trapezoids (real_drawable,
+                                                           gc,
+                                                           trapezoids,
+                                                           n_trapezoids);
+}
+
+static cairo_surface_t *
+gdk_gl_pixmap_ref_cairo_surface (GdkDrawable *drawable)
+{
+  GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
+
+  return GDK_DRAWABLE_GET_CLASS (real_drawable)->ref_cairo_surface (real_drawable);
+}
+
+static GdkDrawable *
+gdk_gl_pixmap_get_source_drawable (GdkDrawable *drawable)
+{
+  GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
+
+  return GDK_DRAWABLE_GET_CLASS (real_drawable)->get_source_drawable (real_drawable);
+}
+
+static void
+gdk_gl_pixmap_set_cairo_clip (GdkDrawable *drawable,
+                              cairo_t     *cr)
+{
+  GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->set_cairo_clip (real_drawable, cr);
+}
+
+static cairo_surface_t *
+gdk_gl_pixmap_create_cairo_surface (GdkDrawable *drawable,
+                                    int          width,
+                                    int          height)
+{
+  GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
+
+  return GDK_DRAWABLE_GET_CLASS (real_drawable)->create_cairo_surface (real_drawable,
+                                                                       width,
+                                                                       height);
+}
+
+static void
+gdk_gl_pixmap_draw_drawable_with_src (GdkDrawable *drawable,
+                                      GdkGC	  *gc,
+                                      GdkDrawable *src,
+                                      gint         xsrc,
+                                      gint         ysrc,
+                                      gint         xdest,
+                                      gint         ydest,
+                                      gint         width,
+                                      gint         height,
+                                      GdkDrawable *original_src)
+{
+  GdkDrawable *real_drawable = ((GdkGLPixmap *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_drawable_with_src (real_drawable,
+                                                                  gc,
+                                                                  src,
+                                                                  xsrc,
+                                                                  ysrc,
+                                                                  xdest,
+                                                                  ydest,
+                                                                  width,
+                                                                  height,
+                                                                  original_src);
+}
+
 /*< private >*/
 void
 _gdk_gl_pixmap_get_size (GdkGLDrawable *gldrawable,
@@ -646,22 +731,6 @@ _gdk_gl_pixmap_get_size (GdkGLDrawable *gldrawable,
                                                     height);
 }
 
-/**
- * gdk_gl_pixmap_destroy:
- * @glpixmap: a #GdkGLPixmap.
- *
- * Destroys the OpenGL resources associated with @glpixmap and
- * decrements @glpixmap's reference count.
- **/
-void
-gdk_gl_pixmap_destroy (GdkGLPixmap *glpixmap)
-{
-  g_return_if_fail (GDK_IS_GL_PIXMAP (glpixmap));
-
-  _gdk_gl_pixmap_destroy (glpixmap);
-  g_object_unref (G_OBJECT (glpixmap));
-}
-
 /**
  * gdk_gl_pixmap_get_pixmap:
  * @glpixmap: a #GdkGLPixmap.
@@ -671,7 +740,7 @@ gdk_gl_pixmap_destroy (GdkGLPixmap *glpixmap)
  * Notice that #GdkGLPixmap is not #GdkPixmap, but another
  * #GdkDrawable which have an associated #GdkPixmap.
  *
- * Return value: the #GdkPixmap associated with @glpixmap.
+ * Return value: (transfer none): the #GdkPixmap associated with @glpixmap.
  **/
 GdkPixmap *
 gdk_gl_pixmap_get_pixmap (GdkGLPixmap *glpixmap)
@@ -692,14 +761,14 @@ static GQuark quark_gl_pixmap = 0;
  * gdk_pixmap_set_gl_capability:
  * @pixmap: the #GdkPixmap to be used as the rendering area.
  * @glconfig: a #GdkGLConfig.
- * @attrib_list: this must be set to NULL or empty (first attribute of None).
+ * @attrib_list: (array) (allow-none): this must be set to NULL or empty (first attribute of None).
  *
  * Set the OpenGL-capability to the @pixmap.
  * This function creates a new #GdkGLPixmap held by the @pixmap.
  * attrib_list is currently unused. This must be set to NULL or empty
  * (first attribute of None).
  *
- * Return value: the #GdkGLPixmap used by the @pixmap if it is successful,
+ * Return value: (transfer none): the #GdkGLPixmap used by the @pixmap if it is successful,
  *               NULL otherwise.
  **/
 GdkGLPixmap *
@@ -792,7 +861,7 @@ gdk_pixmap_is_gl_capable (GdkPixmap *pixmap)
  *
  * Returns the #GdkGLPixmap held by the @pixmap.
  *
- * Return value: the #GdkGLPixmap.
+ * Return value: (transfer none): the #GdkGLPixmap.
  **/
 GdkGLPixmap *
 gdk_pixmap_get_gl_pixmap (GdkPixmap *pixmap)
diff --git a/gdk/gdkglpixmap.h b/gdk/gdkglpixmap.h
index 38593a1..a2a181e 100644
--- a/gdk/gdkglpixmap.h
+++ b/gdk/gdkglpixmap.h
@@ -22,7 +22,7 @@
 #include <gdk/gdkgldefs.h>
 #include <gdk/gdkgltypes.h>
 
-#include <gdk/gdkpixmap.h>
+#include <gdk/gdk.h>
 
 G_BEGIN_DECLS
 
@@ -57,8 +57,6 @@ GdkGLPixmap *gdk_gl_pixmap_new              (GdkGLConfig *glconfig,
                                              GdkPixmap   *pixmap,
                                              const int   *attrib_list);
 
-void         gdk_gl_pixmap_destroy          (GdkGLPixmap *glpixmap);
-
 GdkPixmap   *gdk_gl_pixmap_get_pixmap       (GdkGLPixmap *glpixmap);
 
 /*
diff --git a/gdk/gdkglquery.c b/gdk/gdkglquery.c
index f581cf6..0df6f7c 100644
--- a/gdk/gdkglquery.c
+++ b/gdk/gdkglquery.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include <stdlib.h>
 #include <string.h>
 
@@ -27,7 +31,11 @@
 #include <windows.h>
 #endif
 
+#ifdef GDK_WINDOWING_QUARTZ
+#include <OpenGL/gl.h>
+#else
 #include <GL/gl.h>
+#endif
 
 /*
  * This code is based on glutExtensionSupported().
diff --git a/gdk/gdkglquery.h b/gdk/gdkglquery.h
index bf71e63..a1d5982 100644
--- a/gdk/gdkglquery.h
+++ b/gdk/gdkglquery.h
@@ -28,20 +28,16 @@ G_BEGIN_DECLS
 gboolean  gdk_gl_query_extension             (void);
 #endif /* GDK_MULTIHEAD_SAFE */
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
 gboolean  gdk_gl_query_extension_for_display (GdkDisplay *display);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
 #ifndef GDK_MULTIHEAD_SAFE
 gboolean  gdk_gl_query_version               (int        *major,
                                               int        *minor);
 #endif /* GDK_MULTIHEAD_SAFE */
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
 gboolean  gdk_gl_query_version_for_display   (GdkDisplay *display,
                                               int        *major,
                                               int        *minor);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
 gboolean  gdk_gl_query_gl_extension          (const char *extension);
 
diff --git a/gdk/gdkglshapes.h b/gdk/gdkglshapes.h
deleted file mode 100644
index 0cfa574..0000000
--- a/gdk/gdkglshapes.h
+++ /dev/null
@@ -1,60 +0,0 @@
-/* GdkGLExt - OpenGL Extension to GDK
- * Copyright (C) 2002-2004  Naofumi Yasufuku
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
- */
-
-#ifndef __GDK_GL_SHAPES_H__
-#define __GDK_GL_SHAPES_H__
-
-#include <gdk/gdkgldefs.h>
-#include <gdk/gdkgltypes.h>
-
-G_BEGIN_DECLS
-
-void gdk_gl_draw_cube         (gboolean solid,
-                               double   size);
-
-void gdk_gl_draw_sphere       (gboolean solid,
-                               double   radius,
-                               int      slices,
-                               int      stacks);
-
-void gdk_gl_draw_cone         (gboolean solid,
-                               double   base,
-                               double   height,
-                               int      slices,
-                               int      stacks);
-
-void gdk_gl_draw_torus        (gboolean solid,
-                               double   inner_radius,
-                               double   outer_radius,
-                               int      nsides,
-                               int      rings);
-
-void gdk_gl_draw_tetrahedron  (gboolean solid);
-
-void gdk_gl_draw_octahedron   (gboolean solid);
-
-void gdk_gl_draw_dodecahedron (gboolean solid);
-
-void gdk_gl_draw_icosahedron  (gboolean solid);
-
-void gdk_gl_draw_teapot       (gboolean solid,
-                               double   scale);
-
-G_END_DECLS
-
-#endif /* __GDK_GL_SHAPES_H__ */
diff --git a/gdk/gdkgltypes.h b/gdk/gdkgltypes.h
index 2bdb1c5..28f6310 100644
--- a/gdk/gdkgltypes.h
+++ b/gdk/gdkgltypes.h
@@ -19,7 +19,7 @@
 #ifndef __GDK_GL_TYPES_H__
 #define __GDK_GL_TYPES_H__
 
-#include <gdk/gdktypes.h>
+#include <gdk/gdk.h>
 
 G_BEGIN_DECLS
  
diff --git a/gdk/gdkglversion.c b/gdk/gdkglversion.c
index 1cfa836..972dae3 100644
--- a/gdk/gdkglversion.c
+++ b/gdk/gdkglversion.c
@@ -16,10 +16,73 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglversion.h"
 
-const guint gdkglext_major_version = GDKGLEXT_MAJOR_VERSION;
-const guint gdkglext_minor_version = GDKGLEXT_MINOR_VERSION;
-const guint gdkglext_micro_version = GDKGLEXT_MICRO_VERSION;
-const guint gdkglext_interface_age = GDKGLEXT_INTERFACE_AGE;
-const guint gdkglext_binary_age    = GDKGLEXT_BINARY_AGE;
+/**
+ * gdk_gl_get_major_version:
+ *
+ * Returns the GtkGLExt library major version number.
+ *
+ * Returns: The major version number of the GtkGLExt library.
+ **/
+int
+gdk_gl_get_major_version (void)
+{
+        return (GDKGLEXT_MAJOR_VERSION);
+}
+
+/**
+ * gdk_gl_get_minor_version:
+ *
+ * Returns the GtkGLExt library minor version number.
+ *
+ * Returns: The minor version number of the GtkGLExt library.
+ **/
+int
+gdk_gl_get_minor_version (void)
+{
+        return (GDKGLEXT_MINOR_VERSION);
+}
+
+/**
+ * gdk_gl_get_micro_version:
+ *
+ * Returns the GtkGLExt library micro version number.
+ *
+ * Returns: The micro version number of the GtkGLExt library.
+ **/
+int
+gdk_gl_get_micro_version (void)
+{
+        return (GDKGLEXT_MICRO_VERSION);
+}
+
+/**
+ * gdk_gl_get_interface_age:
+ *
+ * Returns the GtkGLExt library interface age.
+ *
+ * Returns: The interface age of the GtkGLExt library.
+ **/
+int
+gdk_gl_get_interface_age (void)
+{
+        return (GDKGLEXT_INTERFACE_AGE);
+}
+
+/**
+ * gdk_gl_get_binary_age:
+ *
+ * Returns the GtkGLExt library binary age.
+ *
+ * Returns: The binary age of the GtkGLExt library.
+ **/
+int
+gdk_gl_get_binary_age (void)
+{
+        return (GDKGLEXT_BINARY_AGE);
+}
diff --git a/gdk/gdkglversion.h.in b/gdk/gdkglversion.h.in
index c0f66cf..597daaf 100644
--- a/gdk/gdkglversion.h.in
+++ b/gdk/gdkglversion.h.in
@@ -44,14 +44,20 @@ G_BEGIN_DECLS
   (GDKGLEXT_MAJOR_VERSION == (major) && GDKGLEXT_MINOR_VERSION == (minor) && \
    GDKGLEXT_MICRO_VERSION >= (micro)))
 
-/*
- * Library version.
- */
-GDK_GL_VAR const guint gdkglext_major_version;
-GDK_GL_VAR const guint gdkglext_minor_version;
-GDK_GL_VAR const guint gdkglext_micro_version;
-GDK_GL_VAR const guint gdkglext_interface_age;
-GDK_GL_VAR const guint gdkglext_binary_age;
+int
+gdk_gl_get_major_version (void);
+
+int
+gdk_gl_get_minor_version (void);
+
+int
+gdk_gl_get_micro_version (void);
+
+int
+gdk_gl_get_interface_age (void);
+
+int
+gdk_gl_get_binary_age (void);
 
 G_END_DECLS
 
diff --git a/gdk/gdkglwindow.c b/gdk/gdkglwindow.c
index 05eb44b..d4cc576 100644
--- a/gdk/gdkglwindow.c
+++ b/gdk/gdkglwindow.c
@@ -16,7 +16,11 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
-#include <gtk/gtkversion.h>
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
+#include <gtk/gtk.h>
 
 #include "gdkglprivate.h"
 #include "gdkglconfig.h"
@@ -96,82 +100,100 @@ static void   gdk_gl_window_draw_image     (GdkDrawable      *drawable,
                                             gint              ydest,
                                             gint              width,
                                             gint              height);
-static gint         gdk_gl_window_get_depth              (GdkDrawable *drawable);
-static void         gdk_gl_window_get_size               (GdkDrawable *drawable,
-                                                          gint        *width,
-                                                          gint        *height);
-static void         gdk_gl_window_set_colormap           (GdkDrawable *drawable,
-                                                          GdkColormap *cmap);
-static GdkColormap *gdk_gl_window_get_colormap           (GdkDrawable *drawable);
-static GdkVisual   *gdk_gl_window_get_visual             (GdkDrawable *drawable);
-#if !(GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0)
-static GdkScreen   *gdk_gl_window_get_screen             (GdkDrawable *drawable);
-#endif
-static GdkImage    *gdk_gl_window_get_image              (GdkDrawable *drawable,
-                                                          gint         x,
-                                                          gint         y,
-                                                          gint         width,
-                                                          gint         height);
-static GdkRegion   *gdk_gl_window_get_clip_region        (GdkDrawable *drawable);
-static GdkRegion   *gdk_gl_window_get_visible_region     (GdkDrawable *drawable);
-static GdkDrawable *gdk_gl_window_get_composite_drawable (GdkDrawable *drawable,
-                                                          gint         x,
-                                                          gint         y,
-                                                          gint         width,
-                                                          gint         height,
-                                                          gint        *composite_x_offset,
-                                                          gint        *composite_y_offset);
-static void         gdk_gl_window_draw_pixbuf   (GdkDrawable *drawable,
-                                                 GdkGC       *gc,
-                                                 GdkPixbuf   *pixbuf,
-                                                 gint         src_x,
-                                                 gint         src_y,
-                                                 gint         dest_x,
-                                                 gint         dest_y,
-                                                 gint         width,
-                                                 gint         height,
-                                                 GdkRgbDither dither,
-                                                 gint         x_dither,
-                                                 gint         y_dither);
-static GdkImage    *gdk_gl_window_copy_to_image (GdkDrawable *drawable,
-                                                 GdkImage    *image,
-                                                 gint         src_x,
-                                                 gint         src_y,
-                                                 gint         dest_x,
-                                                 gint         dest_y,
-                                                 gint         width,
-                                                 gint         height);
-
-static void gdk_gl_window_class_init (GdkGLWindowClass *klass);
-static void gdk_gl_window_finalize   (GObject          *object);
-
-static gpointer parent_class = NULL;
-
-GType
-gdk_gl_window_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLWindowClass),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_window_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLWindow),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (GDK_TYPE_DRAWABLE,
-                                     "GdkGLWindow",
-                                     &type_info, 0);
-    }
 
-  return type;
+static gint             gdk_gl_window_get_depth               (GdkDrawable      *drawable);
+static void             gdk_gl_window_get_size                (GdkDrawable      *drawable,
+                                                               gint             *width,
+                                                               gint             *height);
+static void             gdk_gl_window_set_colormap            (GdkDrawable      *drawable,
+                                                               GdkColormap      *cmap);
+static GdkColormap *    gdk_gl_window_get_colormap            (GdkDrawable      *drawable);
+static GdkVisual   *    gdk_gl_window_get_visual              (GdkDrawable      *drawable);
+static GdkScreen   *    gdk_gl_window_get_screen              (GdkDrawable      *drawable);
+static GdkImage    *    gdk_gl_window_get_image               (GdkDrawable      *drawable,
+                                                               gint              x,
+                                                               gint              y,
+                                                               gint              width,
+                                                               gint              height);
+static GdkRegion   *    gdk_gl_window_get_clip_region         (GdkDrawable      *drawable);
+static GdkRegion   *    gdk_gl_window_get_visible_region      (GdkDrawable      *drawable);
+static GdkDrawable *    gdk_gl_window_get_composite_drawable  (GdkDrawable      *drawable,
+                                                               gint              x,
+                                                               gint              y,
+                                                               gint              width,
+                                                               gint              height,
+                                                               gint             *composite_x_offset,
+                                                               gint             *composite_y_offset);
+static void             gdk_gl_window_draw_pixbuf             (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               GdkPixbuf        *pixbuf,
+                                                               gint              src_x,
+                                                               gint              src_y,
+                                                               gint              dest_x,
+                                                               gint              dest_y,
+                                                               gint              width,
+                                                               gint              height,
+                                                               GdkRgbDither      dither,
+                                                               gint              x_dither,
+                                                               gint              y_dither);
+static GdkImage    *    gdk_gl_window_copy_to_image           (GdkDrawable      *drawable,
+                                                               GdkImage         *image,
+                                                               gint              src_x,
+                                                               gint              src_y,
+                                                               gint              dest_x,
+                                                               gint              dest_y,
+                                                               gint              width,
+                                                               gint              height);
+static void             gdk_gl_window_draw_glyphs_transformed (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               PangoMatrix      *matrix,
+                                                               PangoFont        *font,
+                                                               gint              x,
+                                                               gint              y,
+                                                               PangoGlyphString *glyphs);
+static void             gdk_gl_window_draw_trapezoids         (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               GdkTrapezoid     *trapezoids,
+                                                               gint              n_trapezoids);
+static cairo_surface_t *gdk_gl_window_ref_cairo_surface       (GdkDrawable      *drawable);
+static GdkDrawable *    gdk_gl_window_get_source_drawable     (GdkDrawable      *drawable);
+static void             gdk_gl_window_set_cairo_clip          (GdkDrawable      *drawable,
+                                                               cairo_t          *cr);
+static cairo_surface_t *gdk_gl_window_create_cairo_surface    (GdkDrawable      *drawable,
+                                                               int               width,
+                                                               int               height);
+static void             gdk_gl_window_draw_drawable_with_src  (GdkDrawable      *drawable,
+                                                               GdkGC            *gc,
+                                                               GdkDrawable      *src,
+                                                               gint              xsrc,
+                                                               gint              ysrc,
+                                                               gint              xdest,
+                                                               gint              ydest,
+                                                               gint              width,
+                                                               gint              height,
+                                                               GdkDrawable      *original_src);
+
+G_DEFINE_TYPE (GdkGLWindow,                     \
+               gdk_gl_window,                   \
+               GDK_TYPE_DRAWABLE)
+
+static void
+gdk_gl_window_init (GdkGLWindow *self)
+{
+}
+
+static void
+gdk_gl_window_finalize (GObject *object)
+{
+  GdkGLWindow *glwindow = GDK_GL_WINDOW (object);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  if (glwindow->drawable != NULL)
+    g_object_remove_weak_pointer (G_OBJECT (glwindow->drawable),
+                                  (gpointer *) &(glwindow->drawable));
+
+  G_OBJECT_CLASS (gdk_gl_window_parent_class)->finalize (object);
 }
 
 static void
@@ -182,8 +204,6 @@ gdk_gl_window_class_init (GdkGLWindowClass *klass)
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-  parent_class = g_type_class_peek_parent (klass);
-
   object_class->finalize = gdk_gl_window_finalize;
 
   drawable_class->create_gc              = gdk_gl_window_create_gc;
@@ -203,33 +223,20 @@ gdk_gl_window_class_init (GdkGLWindowClass *klass)
   drawable_class->set_colormap           = gdk_gl_window_set_colormap;
   drawable_class->get_colormap           = gdk_gl_window_get_colormap;
   drawable_class->get_visual             = gdk_gl_window_get_visual;
-#if !(GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0)
   drawable_class->get_screen             = gdk_gl_window_get_screen;
-#endif
   drawable_class->get_image              = gdk_gl_window_get_image;
   drawable_class->get_clip_region        = gdk_gl_window_get_clip_region;
   drawable_class->get_visible_region     = gdk_gl_window_get_visible_region;
   drawable_class->get_composite_drawable = gdk_gl_window_get_composite_drawable;
-#if GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0
-  drawable_class->_draw_pixbuf           = gdk_gl_window_draw_pixbuf;
-#else
   drawable_class->draw_pixbuf            = gdk_gl_window_draw_pixbuf;
-#endif
   drawable_class->_copy_to_image         = gdk_gl_window_copy_to_image;
-}
-
-static void
-gdk_gl_window_finalize (GObject *object)
-{
-  GdkGLWindow *glwindow = GDK_GL_WINDOW (object);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  if (glwindow->drawable != NULL)
-    g_object_remove_weak_pointer (G_OBJECT (glwindow->drawable),
-                                  (gpointer *) &(glwindow->drawable));
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  drawable_class->draw_glyphs_transformed = gdk_gl_window_draw_glyphs_transformed;
+  drawable_class->draw_trapezoids        = gdk_gl_window_draw_trapezoids;
+  drawable_class->ref_cairo_surface      = gdk_gl_window_ref_cairo_surface;
+  drawable_class->get_source_drawable    = gdk_gl_window_get_source_drawable;
+  drawable_class->set_cairo_clip         = gdk_gl_window_set_cairo_clip;
+  drawable_class->create_cairo_surface   = gdk_gl_window_create_cairo_surface;
+  drawable_class->draw_drawable_with_src = gdk_gl_window_draw_drawable_with_src;
 }
 
 static GdkGC *
@@ -498,8 +505,6 @@ gdk_gl_window_get_visual (GdkDrawable *drawable)
   return GDK_DRAWABLE_GET_CLASS (real_drawable)->get_visual (real_drawable);
 }
 
-#if !(GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0)
-
 static GdkScreen *
 gdk_gl_window_get_screen (GdkDrawable *drawable)
 {
@@ -508,8 +513,6 @@ gdk_gl_window_get_screen (GdkDrawable *drawable)
   return GDK_DRAWABLE_GET_CLASS (real_drawable)->get_screen (real_drawable);
 }
 
-#endif
-
 static GdkImage *
 gdk_gl_window_get_image (GdkDrawable *drawable,
                          gint         x,
@@ -578,20 +581,6 @@ gdk_gl_window_draw_pixbuf (GdkDrawable *drawable,
 {
   GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
 
-#if GTK_MAJOR_VERSION == 2 && GTK_MINOR_VERSION == 0
-  GDK_DRAWABLE_GET_CLASS (real_drawable)->_draw_pixbuf (real_drawable,
-                                                        gc,
-                                                        pixbuf,
-                                                        src_x,
-                                                        src_y,
-                                                        dest_x,
-                                                        dest_y,
-                                                        width,
-                                                        height,
-                                                        dither,
-                                                        x_dither,
-                                                        y_dither);
-#else
   GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_pixbuf (real_drawable,
                                                        gc,
                                                        pixbuf,
@@ -604,7 +593,6 @@ gdk_gl_window_draw_pixbuf (GdkDrawable *drawable,
                                                        dither,
                                                        x_dither,
                                                        y_dither);
-#endif
 }
 
 static GdkImage *
@@ -629,6 +617,104 @@ gdk_gl_window_copy_to_image (GdkDrawable *drawable,
                                                                  height);
 }
 
+static void
+gdk_gl_window_draw_glyphs_transformed (GdkDrawable      *drawable,
+                                       GdkGC            *gc,
+                                       PangoMatrix      *matrix,
+                                       PangoFont        *font,
+                                       gint              x,
+                                       gint              y,
+                                       PangoGlyphString *glyphs)
+{
+  GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_glyphs_transformed (real_drawable,
+                                                                   gc,
+                                                                   matrix,
+                                                                   font,
+                                                                   x,
+                                                                   y,
+                                                                   glyphs);
+}
+
+static void
+gdk_gl_window_draw_trapezoids (GdkDrawable     *drawable,
+                               GdkGC	       *gc,
+                               GdkTrapezoid    *trapezoids,
+                               gint             n_trapezoids)
+{
+  GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_trapezoids (real_drawable,
+                                                           gc,
+                                                           trapezoids,
+                                                           n_trapezoids);
+}
+
+static cairo_surface_t *
+gdk_gl_window_ref_cairo_surface (GdkDrawable *drawable)
+{
+  GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
+
+  return GDK_DRAWABLE_GET_CLASS (real_drawable)->ref_cairo_surface (real_drawable);
+}
+
+static GdkDrawable *
+gdk_gl_window_get_source_drawable (GdkDrawable *drawable)
+{
+  GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
+
+  return GDK_DRAWABLE_GET_CLASS (real_drawable)->get_source_drawable (real_drawable);
+}
+
+static void
+gdk_gl_window_set_cairo_clip (GdkDrawable *drawable,
+                              cairo_t     *cr)
+{
+  GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->set_cairo_clip (real_drawable, cr);
+}
+
+static cairo_surface_t *
+gdk_gl_window_create_cairo_surface (GdkDrawable *drawable,
+                                    int          width,
+                                    int          height)
+{
+  GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
+
+  return GDK_DRAWABLE_GET_CLASS (real_drawable)->create_cairo_surface (real_drawable,
+                                                                       width,
+                                                                       height);
+}
+
+static void
+gdk_gl_window_draw_drawable_with_src (GdkDrawable *drawable,
+                                      GdkGC	  *gc,
+                                      GdkDrawable *src,
+                                      gint         xsrc,
+                                      gint         ysrc,
+                                      gint         xdest,
+                                      gint         ydest,
+                                      gint         width,
+                                      gint         height,
+                                      GdkDrawable *original_src)
+{
+  GdkDrawable *real_drawable = ((GdkGLWindow *) drawable)->drawable;
+
+  GDK_DRAWABLE_GET_CLASS (real_drawable)->draw_drawable_with_src (real_drawable,
+                                                                  gc,
+                                                                  src,
+                                                                  xsrc,
+                                                                  ysrc,
+                                                                  xdest,
+                                                                  ydest,
+                                                                  width,
+                                                                  height,
+                                                                  original_src);
+}
+
+
 /*< private >*/
 void
 _gdk_gl_window_get_size (GdkGLDrawable *gldrawable,
@@ -646,22 +732,6 @@ _gdk_gl_window_get_size (GdkGLDrawable *gldrawable,
                                                     height);
 }
 
-/**
- * gdk_gl_window_destroy:
- * @glwindow: a #GdkGLWindow.
- *
- * Destroys the OpenGL resources associated with @glwindow and
- * decrements @glwindow's reference count.
- **/
-void
-gdk_gl_window_destroy (GdkGLWindow *glwindow)
-{
-  g_return_if_fail (GDK_IS_GL_WINDOW (glwindow));
-
-  _gdk_gl_window_destroy (glwindow);
-  g_object_unref (G_OBJECT (glwindow));
-}
-
 /**
  * gdk_gl_window_get_window:
  * @glwindow: a #GdkGLWindow.
@@ -671,7 +741,7 @@ gdk_gl_window_destroy (GdkGLWindow *glwindow)
  * Notice that #GdkGLWindow is not #GdkWindow, but another
  * #GdkDrawable which have an associated #GdkWindow.
  *
- * Return value: the #GdkWindow associated with @glwindow.
+ * Return value: (transfer none): the #GdkWindow associated with @glwindow.
  **/
 GdkWindow *
 gdk_gl_window_get_window (GdkGLWindow *glwindow)
@@ -692,14 +762,14 @@ static GQuark quark_gl_window = 0;
  * gdk_window_set_gl_capability:
  * @window: the #GdkWindow to be used as the rendering area.
  * @glconfig: a #GdkGLConfig.
- * @attrib_list: this must be set to NULL or empty (first attribute of None).
+ * @attrib_list: (array) (allow-none): this must be set to NULL or empty (first attribute of None).
  *
  * Set the OpenGL-capability to the @window.
  * This function creates a new #GdkGLWindow held by the @window.
  * attrib_list is currently unused. This must be set to NULL or empty
  * (first attribute of None).
  *
- * Return value: the #GdkGLWindow used by the @window if it is successful,
+ * Return value: (transfer none): the #GdkGLWindow used by the @window if it is successful,
  *               NULL otherwise.
  **/
 GdkGLWindow *
@@ -806,7 +876,7 @@ gdk_window_is_gl_capable (GdkWindow *window)
  *
  * Returns the #GdkGLWindow held by the @window.
  *
- * Return value: the #GdkGLWindow.
+ * Return value: (transfer none): the #GdkGLWindow.
  **/
 GdkGLWindow *
 gdk_window_get_gl_window (GdkWindow *window)
diff --git a/gdk/gdkglwindow.h b/gdk/gdkglwindow.h
index 9e68659..d6af4e2 100644
--- a/gdk/gdkglwindow.h
+++ b/gdk/gdkglwindow.h
@@ -22,7 +22,7 @@
 #include <gdk/gdkgldefs.h>
 #include <gdk/gdkgltypes.h>
 
-#include <gdk/gdkwindow.h>
+#include <gdk/gdk.h>
 
 G_BEGIN_DECLS
 
@@ -57,8 +57,6 @@ GdkGLWindow *gdk_gl_window_new              (GdkGLConfig *glconfig,
                                              GdkWindow   *window,
                                              const int   *attrib_list);
 
-void         gdk_gl_window_destroy          (GdkGLWindow *glwindow);
-
 GdkWindow   *gdk_gl_window_get_window       (GdkGLWindow *glwindow);
 
 /*
diff --git a/gdk/glext/Makefile.am b/gdk/glext/Makefile.am
deleted file mode 100644
index 6be0312..0000000
--- a/gdk/glext/Makefile.am
+++ /dev/null
@@ -1,25 +0,0 @@
-## -*- Makefile -*-
-## Makefile.am for gtkglext/gdk/glext
-
-EXTRA_DIST = \
-	README			\
-	list-ext.pl		\
-	gen-gdkglglext-c.pl	\
-	gen-gdkglglext-h.pl	\
-	gen-gdkglglxext-c.pl	\
-	gen-gdkglglxext-h.pl	\
-	gen-gdkglwglext-c.pl	\
-	gen-gdkglwglext-h.pl	\
-	common-header.h
-
-gdkglext_glext_public_h_sources = \
-	glext.h		\
-	glxext.h	\
-	wglext.h	\
-	glext-extra.h	\
-	glxext-extra.h	\
-	wglext-extra.h
-
-gdkglextglextincludedir = $(includedir)/gtkglext-@GTKGLEXT_API_VERSION@/gdk/glext
-gdkglextglextinclude_HEADERS = $(gdkglext_glext_public_h_sources)
-
diff --git a/gdk/glext/gen-gdkglglext-c.pl b/gdk/glext/gen-gdkglglext-c.pl
index b590c93..be71802 100755
--- a/gdk/glext/gen-gdkglglext-c.pl
+++ b/gdk/glext/gen-gdkglglext-c.pl
@@ -2,8 +2,8 @@
 #
 # gen-gdkglglext-c.pl
 #
-# Script for generating gdk/gdkglglext.c from SGI's OpenGL extension
-# header.
+# Script for generating gdk/gdkglglext.c from The Khronos Group's OpenGL
+# extension header.
 #
 # written by Naofumi Yasufuku <naofumi@users.sourceforge.net>
 #
@@ -20,6 +20,10 @@ print <<EOF;
  * This is a generated file.  Please modify "gen-gdkglglext-c.pl".
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglprivate.h"
 #include "gdkglquery.h"
 #include "gdkglcontext.h"
diff --git a/gdk/glext/gen-gdkglglext-h.pl b/gdk/glext/gen-gdkglglext-h.pl
index 7d72810..8aef463 100755
--- a/gdk/glext/gen-gdkglglext-h.pl
+++ b/gdk/glext/gen-gdkglglext-h.pl
@@ -2,8 +2,8 @@
 #
 # gen-gdkglglext-h.pl
 #
-# Script for generating gdk/gdkglglext.h from SGI's OpenGL extension
-# header.
+# Script for generating gdk/gdkglglext.h from The Khronos Group's OpenGL
+# extension header.
 #
 # written by Naofumi Yasufuku <naofumi@users.sourceforge.net>
 #
diff --git a/gdk/glext/gen-gdkglglxext-c.pl b/gdk/glext/gen-gdkglglxext-c.pl
index 161ee50..69df05c 100755
--- a/gdk/glext/gen-gdkglglxext-c.pl
+++ b/gdk/glext/gen-gdkglglxext-c.pl
@@ -2,8 +2,8 @@
 #
 # gen-gdkglglxext-c.pl
 #
-# Script for generating gdk/x11/gdkglglxext.c from SGI's OpenGL extension
-# header.
+# Script for generating gdk/x11/gdkglglxext.c from The Khronos Group's
+# OpenGL extension header.
 #
 # written by Naofumi Yasufuku <naofumi@users.sourceforge.net>
 #
@@ -20,6 +20,10 @@ print <<EOF;
  * This is a generated file.  Please modify "gen-gdkglglxext-c.pl".
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglx.h"
 #include "gdkglprivate-x11.h"
 #include "gdkglglxext.h"
diff --git a/gdk/glext/gen-gdkglglxext-h.pl b/gdk/glext/gen-gdkglglxext-h.pl
index ec62532..95617be 100755
--- a/gdk/glext/gen-gdkglglxext-h.pl
+++ b/gdk/glext/gen-gdkglglxext-h.pl
@@ -2,8 +2,8 @@
 #
 # gen-gdkglglxext-h.pl
 #
-# Script for generating gdk/x11/gdkglglxext.h from SGI's OpenGL extension
-# header.
+# Script for generating gdk/x11/gdkglglxext.h from The Khronos Group's
+# OpenGL extension header.
 #
 # written by Naofumi Yasufuku <naofumi@users.sourceforge.net>
 #
diff --git a/gdk/glext/gen-gdkglwglext-c.pl b/gdk/glext/gen-gdkglwglext-c.pl
index 94e73e4..6942096 100755
--- a/gdk/glext/gen-gdkglwglext-c.pl
+++ b/gdk/glext/gen-gdkglwglext-c.pl
@@ -2,8 +2,8 @@
 #
 # gen-gdkglwglext-c.pl
 #
-# Script for generating gdk/win32/gdkglwglext.c from SGI's OpenGL extension
-# header.
+# Script for generating gdk/win32/gdkglwglext.c from The Khronos Group's
+# OpenGL extension header.
 #
 # written by Naofumi Yasufuku <naofumi@users.sourceforge.net>
 #
@@ -20,6 +20,10 @@ print <<EOF;
  * This is a generated file.  Please modify "gen-gdkglwglext-c.pl".
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglwglext.h"
diff --git a/gdk/glext/gen-gdkglwglext-h.pl b/gdk/glext/gen-gdkglwglext-h.pl
index f9c3971..d9e20be 100755
--- a/gdk/glext/gen-gdkglwglext-h.pl
+++ b/gdk/glext/gen-gdkglwglext-h.pl
@@ -2,8 +2,8 @@
 #
 # gen-gdkglwglext-h.pl
 #
-# Script for generating gdk/win32/gdkglwglext.h from SGI's OpenGL extension
-# header.
+# Script for generating gdk/win32/gdkglwglext.h from The Khronos Group's
+# OpenGL extension header.
 #
 # written by Naofumi Yasufuku <naofumi@users.sourceforge.net>
 #
diff --git a/gdk/glext/glext-extra.h b/gdk/glext/glext-extra.h
index 50ef94f..5a809c8 100644
--- a/gdk/glext/glext-extra.h
+++ b/gdk/glext/glext-extra.h
@@ -47,84 +47,10 @@ extern "C" {
  * APPLE
  */
 
-#ifndef GL_APPLE_texture_range
-#define GL_TEXTURE_RANGE_LENGTH_APPLE      0x85B7
-#define GL_TEXTURE_RANGE_POINTER_APPLE     0x85B8
-#define GL_TEXTURE_STORAGE_HINT_APPLE      0x85BC
-#endif
-#if !defined(GL_APPLE_vertex_array_range) && !defined(GL_APPLE_texture_range)
-#define GL_STORAGE_PRIVATE_APPLE           0x85BD
-#define GL_STORAGE_CACHED_APPLE            0x85BE
-#define GL_STORAGE_SHARED_APPLE            0x85BF
-#endif
-
-#ifndef GL_APPLE_float_pixels
-#define GL_COLOR_FLOAT_APPLE               0x8A0F
-#define GL_RGBA_FLOAT32_APPLE              0x8814
-#define GL_RGB_FLOAT32_APPLE               0x8815
-#define GL_ALPHA_FLOAT32_APPLE             0x8816
-#define GL_INTENSITY_FLOAT32_APPLE         0x8817
-#define GL_LUMINANCE_FLOAT32_APPLE         0x8818
-#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE   0x8819
-#define GL_RGBA_FLOAT16_APPLE              0x881A
-#define GL_RGB_FLOAT16_APPLE               0x881B
-#define GL_ALPHA_FLOAT16_APPLE             0x881C
-#define GL_INTENSITY_FLOAT16_APPLE         0x881D
-#define GL_LUMINANCE_FLOAT16_APPLE         0x881E
-#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE   0x881F
-#endif
-
-#ifndef GL_APPLE_vertex_program_evaluators
-#define GL_VERTEX_ATTRIB_MAP1_ARB                        0x8A00
-#define GL_VERTEX_ATTRIB_MAP2_ARB                        0x8A01
-#define GL_VERTEX_ATTRIB_MAP1_SIZE_ARB                   0x8A02
-#define GL_VERTEX_ATTRIB_MAP1_COEFF_ARB                  0x8A03
-#define GL_VERTEX_ATTRIB_MAP1_ORDER_ARB                  0x8A04
-#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_ARB                 0x8A05
-#define GL_VERTEX_ATTRIB_MAP2_SIZE_ARB                   0x8A06
-#define GL_VERTEX_ATTRIB_MAP2_COEFF_ARB                  0x8A07
-#define GL_VERTEX_ATTRIB_MAP2_ORDER_ARB                  0x8A08
-#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_ARB                 0x8A09
-#endif
-
 #ifndef GL_APPLE_packed_pixels
 #define GL_APPLE_packed_pixels 1
 #endif
 
-#ifndef GL_APPLE_texture_range
-#define GL_APPLE_texture_range 1
-#ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glTextureRangeAPPLE (GLenum, GLsizei, const GLvoid *);
-GLAPI void APIENTRY glGetTexParameterPointervAPPLE (GLenum, GLenum, GLvoid **);
-#endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid **params);
-#endif
-
-#ifndef GL_APPLE_float_pixels
-#define GL_APPLE_float_pixels 1
-#endif
-
-#ifndef GL_APPLE_vertex_program_evaluators
-#define GL_APPLE_vertex_program_evaluators 1
-#ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glEnableVertexAttribAPPLE (GLuint index, GLenum pname);
-GLAPI void APIENTRY glDisableVertexAttribAPPLE (GLuint index, GLenum pname);
-GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname);
-GLAPI void APIENTRY glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
-GLAPI void APIENTRY glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
-GLAPI void APIENTRY glMapVertexAttrib2dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
-GLAPI void APIENTRY glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
-#endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
-typedef void (APIENTRY * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
-typedef GLboolean (APIENTRY * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
-typedef void (APIENTRY * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
-typedef void (APIENTRY * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
-typedef void (APIENTRY * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
-typedef void (APIENTRY * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
-#endif
-
 /*
  * ARB
  */
@@ -270,11 +196,6 @@ typedef GLboolean (APIENTRY * PFNGLVALIDBACKBUFFERHINTPROC) (GLint x, GLint y, G
  * EXT
  */
 
-#ifndef GL_EXT_depth_bounds_test
-#define GL_DEPTH_BOUNDS_TEST_EXT          0x8890
-#define GL_DEPTH_BOUNDS_EXT               0x8891
-#endif
-
 #ifndef GL_EXT_fragment_lighting
 #define GL_FRAGMENT_LIGHTING_EXT                               0x8400
 #define GL_FRAGMENT_COLOR_MATERIAL_EXT                         0x8401
@@ -346,11 +267,6 @@ typedef GLboolean (APIENTRY * PFNGLVALIDBACKBUFFERHINTPROC) (GLint x, GLint y, G
 */
 #endif
 
-#ifndef GL_EXT_texgen_reflection
-#define GL_NORMAL_MAP_EXT                 0x8511
-#define GL_REFLECTION_MAP_EXT             0x8512
-#endif
-
 #ifndef GL_EXT_texture_edge_clamp
 #define GL_CLAMP_TO_EDGE_EXT              0x812F
 #endif
@@ -362,14 +278,6 @@ typedef GLboolean (APIENTRY * PFNGLVALIDBACKBUFFERHINTPROC) (GLint x, GLint y, G
 #define GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT 0x84F8
 #endif
 
-#ifndef GL_EXT_depth_bounds_test
-#define GL_EXT_depth_bounds_test 1
-#ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glDepthBoundsEXT (GLclampd, GLclampd);
-#endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
-#endif
-
 #ifndef GL_EXT_fragment_lighting
 #define GL_EXT_fragment_lighting 1
 #ifdef GL_GLEXT_PROTOTYPES
diff --git a/gdk/glext/glext.h b/gdk/glext/glext.h
index ae3e045..473b22a 100644
--- a/gdk/glext/glext.h
+++ b/gdk/glext/glext.h
@@ -6,35 +6,36 @@ extern "C" {
 #endif
 
 /*
-** License Applicability. Except to the extent portions of this file are
-** made subject to an alternative license as permitted in the SGI Free
-** Software License B, Version 1.1 (the "License"), the contents of this
-** file are subject only to the provisions of the License. You may not use
-** this file except in compliance with the License. You may obtain a copy
-** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
-** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
+** Copyright (c) 2007-2009 The Khronos Group Inc.
 ** 
-** http://oss.sgi.com/projects/FreeB
+** Permission is hereby granted, free of charge, to any person obtaining a
+** copy of this software and/or associated documentation files (the
+** "Materials"), to deal in the Materials without restriction, including
+** without limitation the rights to use, copy, modify, merge, publish,
+** distribute, sublicense, and/or sell copies of the Materials, and to
+** permit persons to whom the Materials are furnished to do so, subject to
+** the following conditions:
 ** 
-** Note that, as provided in the License, the Software is distributed on an
-** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
-** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
-** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
-** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
+** The above copyright notice and this permission notice shall be included
+** in all copies or substantial portions of the Materials.
 ** 
-** Original Code. The Original Code is: OpenGL Sample Implementation,
-** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
-** Inc. The Original Code is Copyright (c) 1991-2002 Silicon Graphics, Inc.
-** Copyright in any portions created by third parties is as indicated
-** elsewhere herein. All Rights Reserved.
-** 
-** Additional Notice Provisions: This software was created using the
-** OpenGL(R) version 1.2.1 Sample Implementation published by SGI, but has
-** not been independently verified as being compliant with the OpenGL(R)
-** version 1.2.1 Specification.
+** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 */
 
-#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__)
+/* Header file version number, required by OpenGL ABI for Linux */
+/* glext.h last updated $Date: 2009-09-24 13:55:03 -0700 (Thu, 24 Sep 2009) $ */
+/* Current version at http://www.opengl.org/registry/ */
+#define GL_GLEXT_VERSION 56
+
+/* Function declaration macros - to move into glplatform.h */
+
+#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 #endif
@@ -42,24 +43,21 @@ extern "C" {
 #ifndef APIENTRY
 #define APIENTRY
 #endif
+#ifndef APIENTRYP
+#define APIENTRYP APIENTRY *
+#endif
 #ifndef GLAPI
 #define GLAPI extern
 #endif
 
 /*************************************************************/
 
-/* Header file version number, required by OpenGL ABI for Linux */
-/* glext.h last updated 2003/5/9 */
-/* Current version at http://oss.sgi.com/projects/ogl-sample/registry/ */
-#define GL_GLEXT_VERSION 18
-
 #ifndef GL_VERSION_1_2
 #define GL_UNSIGNED_BYTE_3_3_2            0x8032
 #define GL_UNSIGNED_SHORT_4_4_4_4         0x8033
 #define GL_UNSIGNED_SHORT_5_5_5_1         0x8034
 #define GL_UNSIGNED_INT_8_8_8_8           0x8035
 #define GL_UNSIGNED_INT_10_10_10_2        0x8036
-#define GL_RESCALE_NORMAL                 0x803A
 #define GL_TEXTURE_BINDING_3D             0x806A
 #define GL_PACK_SKIP_IMAGES               0x806B
 #define GL_PACK_IMAGE_HEIGHT              0x806C
@@ -86,17 +84,21 @@ extern "C" {
 #define GL_TEXTURE_MAX_LOD                0x813B
 #define GL_TEXTURE_BASE_LEVEL             0x813C
 #define GL_TEXTURE_MAX_LEVEL              0x813D
-#define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8
-#define GL_SINGLE_COLOR                   0x81F9
-#define GL_SEPARATE_SPECULAR_COLOR        0x81FA
 #define GL_SMOOTH_POINT_SIZE_RANGE        0x0B12
 #define GL_SMOOTH_POINT_SIZE_GRANULARITY  0x0B13
 #define GL_SMOOTH_LINE_WIDTH_RANGE        0x0B22
 #define GL_SMOOTH_LINE_WIDTH_GRANULARITY  0x0B23
-#define GL_ALIASED_POINT_SIZE_RANGE       0x846D
 #define GL_ALIASED_LINE_WIDTH_RANGE       0x846E
 #endif
 
+#ifndef GL_VERSION_1_2_DEPRECATED
+#define GL_RESCALE_NORMAL                 0x803A
+#define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8
+#define GL_SINGLE_COLOR                   0x81F9
+#define GL_SEPARATE_SPECULAR_COLOR        0x81FA
+#define GL_ALIASED_POINT_SIZE_RANGE       0x846D
+#endif
+
 #ifndef GL_ARB_imaging
 #define GL_CONSTANT_COLOR                 0x8001
 #define GL_ONE_MINUS_CONSTANT_COLOR       0x8002
@@ -109,6 +111,9 @@ extern "C" {
 #define GL_BLEND_EQUATION                 0x8009
 #define GL_FUNC_SUBTRACT                  0x800A
 #define GL_FUNC_REVERSE_SUBTRACT          0x800B
+#endif
+
+#ifndef GL_ARB_imaging_DEPRECATED
 #define GL_CONVOLUTION_1D                 0x8010
 #define GL_CONVOLUTION_2D                 0x8011
 #define GL_SEPARABLE_2D                   0x8012
@@ -209,12 +214,6 @@ extern "C" {
 #define GL_TEXTURE30                      0x84DE
 #define GL_TEXTURE31                      0x84DF
 #define GL_ACTIVE_TEXTURE                 0x84E0
-#define GL_CLIENT_ACTIVE_TEXTURE          0x84E1
-#define GL_MAX_TEXTURE_UNITS              0x84E2
-#define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3
-#define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4
-#define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5
-#define GL_TRANSPOSE_COLOR_MATRIX         0x84E6
 #define GL_MULTISAMPLE                    0x809D
 #define GL_SAMPLE_ALPHA_TO_COVERAGE       0x809E
 #define GL_SAMPLE_ALPHA_TO_ONE            0x809F
@@ -223,9 +222,6 @@ extern "C" {
 #define GL_SAMPLES                        0x80A9
 #define GL_SAMPLE_COVERAGE_VALUE          0x80AA
 #define GL_SAMPLE_COVERAGE_INVERT         0x80AB
-#define GL_MULTISAMPLE_BIT                0x20000000
-#define GL_NORMAL_MAP                     0x8511
-#define GL_REFLECTION_MAP                 0x8512
 #define GL_TEXTURE_CUBE_MAP               0x8513
 #define GL_TEXTURE_BINDING_CUBE_MAP       0x8514
 #define GL_TEXTURE_CUBE_MAP_POSITIVE_X    0x8515
@@ -236,10 +232,6 @@ extern "C" {
 #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    0x851A
 #define GL_PROXY_TEXTURE_CUBE_MAP         0x851B
 #define GL_MAX_CUBE_MAP_TEXTURE_SIZE      0x851C
-#define GL_COMPRESSED_ALPHA               0x84E9
-#define GL_COMPRESSED_LUMINANCE           0x84EA
-#define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB
-#define GL_COMPRESSED_INTENSITY           0x84EC
 #define GL_COMPRESSED_RGB                 0x84ED
 #define GL_COMPRESSED_RGBA                0x84EE
 #define GL_TEXTURE_COMPRESSION_HINT       0x84EF
@@ -248,7 +240,22 @@ extern "C" {
 #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
 #define GL_COMPRESSED_TEXTURE_FORMATS     0x86A3
 #define GL_CLAMP_TO_BORDER                0x812D
-#define GL_CLAMP_TO_BORDER_SGIS           0x812D
+#endif
+
+#ifndef GL_VERSION_1_3_DEPRECATED
+#define GL_CLIENT_ACTIVE_TEXTURE          0x84E1
+#define GL_MAX_TEXTURE_UNITS              0x84E2
+#define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3
+#define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4
+#define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5
+#define GL_TRANSPOSE_COLOR_MATRIX         0x84E6
+#define GL_MULTISAMPLE_BIT                0x20000000
+#define GL_NORMAL_MAP                     0x8511
+#define GL_REFLECTION_MAP                 0x8512
+#define GL_COMPRESSED_ALPHA               0x84E9
+#define GL_COMPRESSED_LUMINANCE           0x84EA
+#define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB
+#define GL_COMPRESSED_INTENSITY           0x84EC
 #define GL_COMBINE                        0x8570
 #define GL_COMBINE_RGB                    0x8571
 #define GL_COMBINE_ALPHA                  0x8572
@@ -280,16 +287,26 @@ extern "C" {
 #define GL_BLEND_SRC_RGB                  0x80C9
 #define GL_BLEND_DST_ALPHA                0x80CA
 #define GL_BLEND_SRC_ALPHA                0x80CB
-#define GL_POINT_SIZE_MIN                 0x8126
-#define GL_POINT_SIZE_MAX                 0x8127
 #define GL_POINT_FADE_THRESHOLD_SIZE      0x8128
-#define GL_POINT_DISTANCE_ATTENUATION     0x8129
-#define GL_GENERATE_MIPMAP                0x8191
-#define GL_GENERATE_MIPMAP_HINT           0x8192
 #define GL_DEPTH_COMPONENT16              0x81A5
 #define GL_DEPTH_COMPONENT24              0x81A6
 #define GL_DEPTH_COMPONENT32              0x81A7
 #define GL_MIRRORED_REPEAT                0x8370
+#define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
+#define GL_TEXTURE_LOD_BIAS               0x8501
+#define GL_INCR_WRAP                      0x8507
+#define GL_DECR_WRAP                      0x8508
+#define GL_TEXTURE_DEPTH_SIZE             0x884A
+#define GL_TEXTURE_COMPARE_MODE           0x884C
+#define GL_TEXTURE_COMPARE_FUNC           0x884D
+#endif
+
+#ifndef GL_VERSION_1_4_DEPRECATED
+#define GL_POINT_SIZE_MIN                 0x8126
+#define GL_POINT_SIZE_MAX                 0x8127
+#define GL_POINT_DISTANCE_ATTENUATION     0x8129
+#define GL_GENERATE_MIPMAP                0x8191
+#define GL_GENERATE_MIPMAP_HINT           0x8192
 #define GL_FOG_COORDINATE_SOURCE          0x8450
 #define GL_FOG_COORDINATE                 0x8451
 #define GL_FRAGMENT_DEPTH                 0x8452
@@ -305,18 +322,571 @@ extern "C" {
 #define GL_SECONDARY_COLOR_ARRAY_STRIDE   0x845C
 #define GL_SECONDARY_COLOR_ARRAY_POINTER  0x845D
 #define GL_SECONDARY_COLOR_ARRAY          0x845E
-#define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
 #define GL_TEXTURE_FILTER_CONTROL         0x8500
-#define GL_TEXTURE_LOD_BIAS               0x8501
-#define GL_INCR_WRAP                      0x8507
-#define GL_DECR_WRAP                      0x8508
-#define GL_TEXTURE_DEPTH_SIZE             0x884A
 #define GL_DEPTH_TEXTURE_MODE             0x884B
-#define GL_TEXTURE_COMPARE_MODE           0x884C
-#define GL_TEXTURE_COMPARE_FUNC           0x884D
 #define GL_COMPARE_R_TO_TEXTURE           0x884E
 #endif
 
+#ifndef GL_VERSION_1_5
+#define GL_BUFFER_SIZE                    0x8764
+#define GL_BUFFER_USAGE                   0x8765
+#define GL_QUERY_COUNTER_BITS             0x8864
+#define GL_CURRENT_QUERY                  0x8865
+#define GL_QUERY_RESULT                   0x8866
+#define GL_QUERY_RESULT_AVAILABLE         0x8867
+#define GL_ARRAY_BUFFER                   0x8892
+#define GL_ELEMENT_ARRAY_BUFFER           0x8893
+#define GL_ARRAY_BUFFER_BINDING           0x8894
+#define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895
+#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
+#define GL_READ_ONLY                      0x88B8
+#define GL_WRITE_ONLY                     0x88B9
+#define GL_READ_WRITE                     0x88BA
+#define GL_BUFFER_ACCESS                  0x88BB
+#define GL_BUFFER_MAPPED                  0x88BC
+#define GL_BUFFER_MAP_POINTER             0x88BD
+#define GL_STREAM_DRAW                    0x88E0
+#define GL_STREAM_READ                    0x88E1
+#define GL_STREAM_COPY                    0x88E2
+#define GL_STATIC_DRAW                    0x88E4
+#define GL_STATIC_READ                    0x88E5
+#define GL_STATIC_COPY                    0x88E6
+#define GL_DYNAMIC_DRAW                   0x88E8
+#define GL_DYNAMIC_READ                   0x88E9
+#define GL_DYNAMIC_COPY                   0x88EA
+#define GL_SAMPLES_PASSED                 0x8914
+#endif
+
+#ifndef GL_VERSION_1_5_DEPRECATED
+#define GL_VERTEX_ARRAY_BUFFER_BINDING    0x8896
+#define GL_NORMAL_ARRAY_BUFFER_BINDING    0x8897
+#define GL_COLOR_ARRAY_BUFFER_BINDING     0x8898
+#define GL_INDEX_ARRAY_BUFFER_BINDING     0x8899
+#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
+#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
+#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
+#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
+#define GL_WEIGHT_ARRAY_BUFFER_BINDING    0x889E
+#define GL_FOG_COORD_SRC                  0x8450
+#define GL_FOG_COORD                      0x8451
+#define GL_CURRENT_FOG_COORD              0x8453
+#define GL_FOG_COORD_ARRAY_TYPE           0x8454
+#define GL_FOG_COORD_ARRAY_STRIDE         0x8455
+#define GL_FOG_COORD_ARRAY_POINTER        0x8456
+#define GL_FOG_COORD_ARRAY                0x8457
+#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
+#define GL_SRC0_RGB                       0x8580
+#define GL_SRC1_RGB                       0x8581
+#define GL_SRC2_RGB                       0x8582
+#define GL_SRC0_ALPHA                     0x8588
+#define GL_SRC1_ALPHA                     0x8589
+#define GL_SRC2_ALPHA                     0x858A
+#endif
+
+#ifndef GL_VERSION_2_0
+#define GL_BLEND_EQUATION_RGB             0x8009
+#define GL_VERTEX_ATTRIB_ARRAY_ENABLED    0x8622
+#define GL_VERTEX_ATTRIB_ARRAY_SIZE       0x8623
+#define GL_VERTEX_ATTRIB_ARRAY_STRIDE     0x8624
+#define GL_VERTEX_ATTRIB_ARRAY_TYPE       0x8625
+#define GL_CURRENT_VERTEX_ATTRIB          0x8626
+#define GL_VERTEX_PROGRAM_POINT_SIZE      0x8642
+#define GL_VERTEX_ATTRIB_ARRAY_POINTER    0x8645
+#define GL_STENCIL_BACK_FUNC              0x8800
+#define GL_STENCIL_BACK_FAIL              0x8801
+#define GL_STENCIL_BACK_PASS_DEPTH_FAIL   0x8802
+#define GL_STENCIL_BACK_PASS_DEPTH_PASS   0x8803
+#define GL_MAX_DRAW_BUFFERS               0x8824
+#define GL_DRAW_BUFFER0                   0x8825
+#define GL_DRAW_BUFFER1                   0x8826
+#define GL_DRAW_BUFFER2                   0x8827
+#define GL_DRAW_BUFFER3                   0x8828
+#define GL_DRAW_BUFFER4                   0x8829
+#define GL_DRAW_BUFFER5                   0x882A
+#define GL_DRAW_BUFFER6                   0x882B
+#define GL_DRAW_BUFFER7                   0x882C
+#define GL_DRAW_BUFFER8                   0x882D
+#define GL_DRAW_BUFFER9                   0x882E
+#define GL_DRAW_BUFFER10                  0x882F
+#define GL_DRAW_BUFFER11                  0x8830
+#define GL_DRAW_BUFFER12                  0x8831
+#define GL_DRAW_BUFFER13                  0x8832
+#define GL_DRAW_BUFFER14                  0x8833
+#define GL_DRAW_BUFFER15                  0x8834
+#define GL_BLEND_EQUATION_ALPHA           0x883D
+#define GL_MAX_VERTEX_ATTRIBS             0x8869
+#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
+#define GL_MAX_TEXTURE_IMAGE_UNITS        0x8872
+#define GL_FRAGMENT_SHADER                0x8B30
+#define GL_VERTEX_SHADER                  0x8B31
+#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
+#define GL_MAX_VERTEX_UNIFORM_COMPONENTS  0x8B4A
+#define GL_MAX_VARYING_FLOATS             0x8B4B
+#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
+#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
+#define GL_SHADER_TYPE                    0x8B4F
+#define GL_FLOAT_VEC2                     0x8B50
+#define GL_FLOAT_VEC3                     0x8B51
+#define GL_FLOAT_VEC4                     0x8B52
+#define GL_INT_VEC2                       0x8B53
+#define GL_INT_VEC3                       0x8B54
+#define GL_INT_VEC4                       0x8B55
+#define GL_BOOL                           0x8B56
+#define GL_BOOL_VEC2                      0x8B57
+#define GL_BOOL_VEC3                      0x8B58
+#define GL_BOOL_VEC4                      0x8B59
+#define GL_FLOAT_MAT2                     0x8B5A
+#define GL_FLOAT_MAT3                     0x8B5B
+#define GL_FLOAT_MAT4                     0x8B5C
+#define GL_SAMPLER_1D                     0x8B5D
+#define GL_SAMPLER_2D                     0x8B5E
+#define GL_SAMPLER_3D                     0x8B5F
+#define GL_SAMPLER_CUBE                   0x8B60
+#define GL_SAMPLER_1D_SHADOW              0x8B61
+#define GL_SAMPLER_2D_SHADOW              0x8B62
+#define GL_DELETE_STATUS                  0x8B80
+#define GL_COMPILE_STATUS                 0x8B81
+#define GL_LINK_STATUS                    0x8B82
+#define GL_VALIDATE_STATUS                0x8B83
+#define GL_INFO_LOG_LENGTH                0x8B84
+#define GL_ATTACHED_SHADERS               0x8B85
+#define GL_ACTIVE_UNIFORMS                0x8B86
+#define GL_ACTIVE_UNIFORM_MAX_LENGTH      0x8B87
+#define GL_SHADER_SOURCE_LENGTH           0x8B88
+#define GL_ACTIVE_ATTRIBUTES              0x8B89
+#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    0x8B8A
+#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
+#define GL_SHADING_LANGUAGE_VERSION       0x8B8C
+#define GL_CURRENT_PROGRAM                0x8B8D
+#define GL_POINT_SPRITE_COORD_ORIGIN      0x8CA0
+#define GL_LOWER_LEFT                     0x8CA1
+#define GL_UPPER_LEFT                     0x8CA2
+#define GL_STENCIL_BACK_REF               0x8CA3
+#define GL_STENCIL_BACK_VALUE_MASK        0x8CA4
+#define GL_STENCIL_BACK_WRITEMASK         0x8CA5
+#endif
+
+#ifndef GL_VERSION_2_0_DEPRECATED
+#define GL_VERTEX_PROGRAM_TWO_SIDE        0x8643
+#define GL_POINT_SPRITE                   0x8861
+#define GL_COORD_REPLACE                  0x8862
+#define GL_MAX_TEXTURE_COORDS             0x8871
+#endif
+
+#ifndef GL_VERSION_2_1
+#define GL_PIXEL_PACK_BUFFER              0x88EB
+#define GL_PIXEL_UNPACK_BUFFER            0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING      0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING    0x88EF
+#define GL_FLOAT_MAT2x3                   0x8B65
+#define GL_FLOAT_MAT2x4                   0x8B66
+#define GL_FLOAT_MAT3x2                   0x8B67
+#define GL_FLOAT_MAT3x4                   0x8B68
+#define GL_FLOAT_MAT4x2                   0x8B69
+#define GL_FLOAT_MAT4x3                   0x8B6A
+#define GL_SRGB                           0x8C40
+#define GL_SRGB8                          0x8C41
+#define GL_SRGB_ALPHA                     0x8C42
+#define GL_SRGB8_ALPHA8                   0x8C43
+#define GL_COMPRESSED_SRGB                0x8C48
+#define GL_COMPRESSED_SRGB_ALPHA          0x8C49
+#endif
+
+#ifndef GL_VERSION_2_1_DEPRECATED
+#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
+#define GL_SLUMINANCE_ALPHA               0x8C44
+#define GL_SLUMINANCE8_ALPHA8             0x8C45
+#define GL_SLUMINANCE                     0x8C46
+#define GL_SLUMINANCE8                    0x8C47
+#define GL_COMPRESSED_SLUMINANCE          0x8C4A
+#define GL_COMPRESSED_SLUMINANCE_ALPHA    0x8C4B
+#endif
+
+#ifndef GL_VERSION_3_0
+#define GL_COMPARE_REF_TO_TEXTURE         0x884E
+#define GL_CLIP_DISTANCE0                 0x3000
+#define GL_CLIP_DISTANCE1                 0x3001
+#define GL_CLIP_DISTANCE2                 0x3002
+#define GL_CLIP_DISTANCE3                 0x3003
+#define GL_CLIP_DISTANCE4                 0x3004
+#define GL_CLIP_DISTANCE5                 0x3005
+#define GL_CLIP_DISTANCE6                 0x3006
+#define GL_CLIP_DISTANCE7                 0x3007
+#define GL_MAX_CLIP_DISTANCES             0x0D32
+#define GL_MAJOR_VERSION                  0x821B
+#define GL_MINOR_VERSION                  0x821C
+#define GL_NUM_EXTENSIONS                 0x821D
+#define GL_CONTEXT_FLAGS                  0x821E
+#define GL_DEPTH_BUFFER                   0x8223
+#define GL_STENCIL_BUFFER                 0x8224
+#define GL_COMPRESSED_RED                 0x8225
+#define GL_COMPRESSED_RG                  0x8226
+#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x0001
+#define GL_RGBA32F                        0x8814
+#define GL_RGB32F                         0x8815
+#define GL_RGBA16F                        0x881A
+#define GL_RGB16F                         0x881B
+#define GL_VERTEX_ATTRIB_ARRAY_INTEGER    0x88FD
+#define GL_MAX_ARRAY_TEXTURE_LAYERS       0x88FF
+#define GL_MIN_PROGRAM_TEXEL_OFFSET       0x8904
+#define GL_MAX_PROGRAM_TEXEL_OFFSET       0x8905
+#define GL_CLAMP_READ_COLOR               0x891C
+#define GL_FIXED_ONLY                     0x891D
+#define GL_MAX_VARYING_COMPONENTS         0x8B4B
+#define GL_TEXTURE_1D_ARRAY               0x8C18
+#define GL_PROXY_TEXTURE_1D_ARRAY         0x8C19
+#define GL_TEXTURE_2D_ARRAY               0x8C1A
+#define GL_PROXY_TEXTURE_2D_ARRAY         0x8C1B
+#define GL_TEXTURE_BINDING_1D_ARRAY       0x8C1C
+#define GL_TEXTURE_BINDING_2D_ARRAY       0x8C1D
+#define GL_R11F_G11F_B10F                 0x8C3A
+#define GL_UNSIGNED_INT_10F_11F_11F_REV   0x8C3B
+#define GL_RGB9_E5                        0x8C3D
+#define GL_UNSIGNED_INT_5_9_9_9_REV       0x8C3E
+#define GL_TEXTURE_SHARED_SIZE            0x8C3F
+#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
+#define GL_TRANSFORM_FEEDBACK_VARYINGS    0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
+#define GL_PRIMITIVES_GENERATED           0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
+#define GL_RASTERIZER_DISCARD             0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
+#define GL_INTERLEAVED_ATTRIBS            0x8C8C
+#define GL_SEPARATE_ATTRIBS               0x8C8D
+#define GL_TRANSFORM_FEEDBACK_BUFFER      0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
+#define GL_RGBA32UI                       0x8D70
+#define GL_RGB32UI                        0x8D71
+#define GL_RGBA16UI                       0x8D76
+#define GL_RGB16UI                        0x8D77
+#define GL_RGBA8UI                        0x8D7C
+#define GL_RGB8UI                         0x8D7D
+#define GL_RGBA32I                        0x8D82
+#define GL_RGB32I                         0x8D83
+#define GL_RGBA16I                        0x8D88
+#define GL_RGB16I                         0x8D89
+#define GL_RGBA8I                         0x8D8E
+#define GL_RGB8I                          0x8D8F
+#define GL_RED_INTEGER                    0x8D94
+#define GL_GREEN_INTEGER                  0x8D95
+#define GL_BLUE_INTEGER                   0x8D96
+#define GL_RGB_INTEGER                    0x8D98
+#define GL_RGBA_INTEGER                   0x8D99
+#define GL_BGR_INTEGER                    0x8D9A
+#define GL_BGRA_INTEGER                   0x8D9B
+#define GL_SAMPLER_1D_ARRAY               0x8DC0
+#define GL_SAMPLER_2D_ARRAY               0x8DC1
+#define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3
+#define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4
+#define GL_SAMPLER_CUBE_SHADOW            0x8DC5
+#define GL_UNSIGNED_INT_VEC2              0x8DC6
+#define GL_UNSIGNED_INT_VEC3              0x8DC7
+#define GL_UNSIGNED_INT_VEC4              0x8DC8
+#define GL_INT_SAMPLER_1D                 0x8DC9
+#define GL_INT_SAMPLER_2D                 0x8DCA
+#define GL_INT_SAMPLER_3D                 0x8DCB
+#define GL_INT_SAMPLER_CUBE               0x8DCC
+#define GL_INT_SAMPLER_1D_ARRAY           0x8DCE
+#define GL_INT_SAMPLER_2D_ARRAY           0x8DCF
+#define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1
+#define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2
+#define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3
+#define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4
+#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6
+#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7
+#define GL_QUERY_WAIT                     0x8E13
+#define GL_QUERY_NO_WAIT                  0x8E14
+#define GL_QUERY_BY_REGION_WAIT           0x8E15
+#define GL_QUERY_BY_REGION_NO_WAIT        0x8E16
+#define GL_BUFFER_ACCESS_FLAGS            0x911F
+#define GL_BUFFER_MAP_LENGTH              0x9120
+#define GL_BUFFER_MAP_OFFSET              0x9121
+/* Reuse tokens from ARB_depth_buffer_float */
+/* reuse GL_DEPTH_COMPONENT32F */
+/* reuse GL_DEPTH32F_STENCIL8 */
+/* reuse GL_FLOAT_32_UNSIGNED_INT_24_8_REV */
+/* Reuse tokens from ARB_framebuffer_object */
+/* reuse GL_INVALID_FRAMEBUFFER_OPERATION */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE */
+/* reuse GL_FRAMEBUFFER_DEFAULT */
+/* reuse GL_FRAMEBUFFER_UNDEFINED */
+/* reuse GL_DEPTH_STENCIL_ATTACHMENT */
+/* reuse GL_INDEX */
+/* reuse GL_MAX_RENDERBUFFER_SIZE */
+/* reuse GL_DEPTH_STENCIL */
+/* reuse GL_UNSIGNED_INT_24_8 */
+/* reuse GL_DEPTH24_STENCIL8 */
+/* reuse GL_TEXTURE_STENCIL_SIZE */
+/* reuse GL_TEXTURE_RED_TYPE */
+/* reuse GL_TEXTURE_GREEN_TYPE */
+/* reuse GL_TEXTURE_BLUE_TYPE */
+/* reuse GL_TEXTURE_ALPHA_TYPE */
+/* reuse GL_TEXTURE_DEPTH_TYPE */
+/* reuse GL_UNSIGNED_NORMALIZED */
+/* reuse GL_FRAMEBUFFER_BINDING */
+/* reuse GL_DRAW_FRAMEBUFFER_BINDING */
+/* reuse GL_RENDERBUFFER_BINDING */
+/* reuse GL_READ_FRAMEBUFFER */
+/* reuse GL_DRAW_FRAMEBUFFER */
+/* reuse GL_READ_FRAMEBUFFER_BINDING */
+/* reuse GL_RENDERBUFFER_SAMPLES */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
+/* reuse GL_FRAMEBUFFER_COMPLETE */
+/* reuse GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT */
+/* reuse GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT */
+/* reuse GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER */
+/* reuse GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER */
+/* reuse GL_FRAMEBUFFER_UNSUPPORTED */
+/* reuse GL_MAX_COLOR_ATTACHMENTS */
+/* reuse GL_COLOR_ATTACHMENT0 */
+/* reuse GL_COLOR_ATTACHMENT1 */
+/* reuse GL_COLOR_ATTACHMENT2 */
+/* reuse GL_COLOR_ATTACHMENT3 */
+/* reuse GL_COLOR_ATTACHMENT4 */
+/* reuse GL_COLOR_ATTACHMENT5 */
+/* reuse GL_COLOR_ATTACHMENT6 */
+/* reuse GL_COLOR_ATTACHMENT7 */
+/* reuse GL_COLOR_ATTACHMENT8 */
+/* reuse GL_COLOR_ATTACHMENT9 */
+/* reuse GL_COLOR_ATTACHMENT10 */
+/* reuse GL_COLOR_ATTACHMENT11 */
+/* reuse GL_COLOR_ATTACHMENT12 */
+/* reuse GL_COLOR_ATTACHMENT13 */
+/* reuse GL_COLOR_ATTACHMENT14 */
+/* reuse GL_COLOR_ATTACHMENT15 */
+/* reuse GL_DEPTH_ATTACHMENT */
+/* reuse GL_STENCIL_ATTACHMENT */
+/* reuse GL_FRAMEBUFFER */
+/* reuse GL_RENDERBUFFER */
+/* reuse GL_RENDERBUFFER_WIDTH */
+/* reuse GL_RENDERBUFFER_HEIGHT */
+/* reuse GL_RENDERBUFFER_INTERNAL_FORMAT */
+/* reuse GL_STENCIL_INDEX1 */
+/* reuse GL_STENCIL_INDEX4 */
+/* reuse GL_STENCIL_INDEX8 */
+/* reuse GL_STENCIL_INDEX16 */
+/* reuse GL_RENDERBUFFER_RED_SIZE */
+/* reuse GL_RENDERBUFFER_GREEN_SIZE */
+/* reuse GL_RENDERBUFFER_BLUE_SIZE */
+/* reuse GL_RENDERBUFFER_ALPHA_SIZE */
+/* reuse GL_RENDERBUFFER_DEPTH_SIZE */
+/* reuse GL_RENDERBUFFER_STENCIL_SIZE */
+/* reuse GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE */
+/* reuse GL_MAX_SAMPLES */
+/* Reuse tokens from ARB_framebuffer_sRGB */
+/* reuse GL_FRAMEBUFFER_SRGB */
+/* Reuse tokens from ARB_half_float_vertex */
+/* reuse GL_HALF_FLOAT */
+/* Reuse tokens from ARB_map_buffer_range */
+/* reuse GL_MAP_READ_BIT */
+/* reuse GL_MAP_WRITE_BIT */
+/* reuse GL_MAP_INVALIDATE_RANGE_BIT */
+/* reuse GL_MAP_INVALIDATE_BUFFER_BIT */
+/* reuse GL_MAP_FLUSH_EXPLICIT_BIT */
+/* reuse GL_MAP_UNSYNCHRONIZED_BIT */
+/* Reuse tokens from ARB_texture_compression_rgtc */
+/* reuse GL_COMPRESSED_RED_RGTC1 */
+/* reuse GL_COMPRESSED_SIGNED_RED_RGTC1 */
+/* reuse GL_COMPRESSED_RG_RGTC2 */
+/* reuse GL_COMPRESSED_SIGNED_RG_RGTC2 */
+/* Reuse tokens from ARB_texture_rg */
+/* reuse GL_RG */
+/* reuse GL_RG_INTEGER */
+/* reuse GL_R8 */
+/* reuse GL_R16 */
+/* reuse GL_RG8 */
+/* reuse GL_RG16 */
+/* reuse GL_R16F */
+/* reuse GL_R32F */
+/* reuse GL_RG16F */
+/* reuse GL_RG32F */
+/* reuse GL_R8I */
+/* reuse GL_R8UI */
+/* reuse GL_R16I */
+/* reuse GL_R16UI */
+/* reuse GL_R32I */
+/* reuse GL_R32UI */
+/* reuse GL_RG8I */
+/* reuse GL_RG8UI */
+/* reuse GL_RG16I */
+/* reuse GL_RG16UI */
+/* reuse GL_RG32I */
+/* reuse GL_RG32UI */
+/* Reuse tokens from ARB_vertex_array_object */
+/* reuse GL_VERTEX_ARRAY_BINDING */
+#endif
+
+#ifndef GL_VERSION_3_0_DEPRECATED
+#define GL_CLAMP_VERTEX_COLOR             0x891A
+#define GL_CLAMP_FRAGMENT_COLOR           0x891B
+#define GL_ALPHA_INTEGER                  0x8D97
+/* Reuse tokens from ARB_framebuffer_object */
+/* reuse GL_TEXTURE_LUMINANCE_TYPE */
+/* reuse GL_TEXTURE_INTENSITY_TYPE */
+#endif
+
+#ifndef GL_VERSION_3_1
+#define GL_SAMPLER_2D_RECT                0x8B63
+#define GL_SAMPLER_2D_RECT_SHADOW         0x8B64
+#define GL_SAMPLER_BUFFER                 0x8DC2
+#define GL_INT_SAMPLER_2D_RECT            0x8DCD
+#define GL_INT_SAMPLER_BUFFER             0x8DD0
+#define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8
+#define GL_TEXTURE_BUFFER                 0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE        0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER         0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT          0x8C2E
+#define GL_TEXTURE_RECTANGLE              0x84F5
+#define GL_TEXTURE_BINDING_RECTANGLE      0x84F6
+#define GL_PROXY_TEXTURE_RECTANGLE        0x84F7
+#define GL_MAX_RECTANGLE_TEXTURE_SIZE     0x84F8
+#define GL_RED_SNORM                      0x8F90
+#define GL_RG_SNORM                       0x8F91
+#define GL_RGB_SNORM                      0x8F92
+#define GL_RGBA_SNORM                     0x8F93
+#define GL_R8_SNORM                       0x8F94
+#define GL_RG8_SNORM                      0x8F95
+#define GL_RGB8_SNORM                     0x8F96
+#define GL_RGBA8_SNORM                    0x8F97
+#define GL_R16_SNORM                      0x8F98
+#define GL_RG16_SNORM                     0x8F99
+#define GL_RGB16_SNORM                    0x8F9A
+#define GL_RGBA16_SNORM                   0x8F9B
+#define GL_SIGNED_NORMALIZED              0x8F9C
+#define GL_PRIMITIVE_RESTART              0x8F9D
+#define GL_PRIMITIVE_RESTART_INDEX        0x8F9E
+/* Reuse tokens from ARB_copy_buffer */
+/* reuse GL_COPY_READ_BUFFER */
+/* reuse GL_COPY_WRITE_BUFFER */
+/* Would reuse tokens from ARB_draw_instanced, but it has none */
+/* Reuse tokens from ARB_uniform_buffer_object */
+/* reuse GL_UNIFORM_BUFFER */
+/* reuse GL_UNIFORM_BUFFER_BINDING */
+/* reuse GL_UNIFORM_BUFFER_START */
+/* reuse GL_UNIFORM_BUFFER_SIZE */
+/* reuse GL_MAX_VERTEX_UNIFORM_BLOCKS */
+/* reuse GL_MAX_FRAGMENT_UNIFORM_BLOCKS */
+/* reuse GL_MAX_COMBINED_UNIFORM_BLOCKS */
+/* reuse GL_MAX_UNIFORM_BUFFER_BINDINGS */
+/* reuse GL_MAX_UNIFORM_BLOCK_SIZE */
+/* reuse GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS */
+/* reuse GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS */
+/* reuse GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT */
+/* reuse GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */
+/* reuse GL_ACTIVE_UNIFORM_BLOCKS */
+/* reuse GL_UNIFORM_TYPE */
+/* reuse GL_UNIFORM_SIZE */
+/* reuse GL_UNIFORM_NAME_LENGTH */
+/* reuse GL_UNIFORM_BLOCK_INDEX */
+/* reuse GL_UNIFORM_OFFSET */
+/* reuse GL_UNIFORM_ARRAY_STRIDE */
+/* reuse GL_UNIFORM_MATRIX_STRIDE */
+/* reuse GL_UNIFORM_IS_ROW_MAJOR */
+/* reuse GL_UNIFORM_BLOCK_BINDING */
+/* reuse GL_UNIFORM_BLOCK_DATA_SIZE */
+/* reuse GL_UNIFORM_BLOCK_NAME_LENGTH */
+/* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS */
+/* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES */
+/* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER */
+/* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER */
+/* reuse GL_INVALID_INDEX */
+#endif
+
+#ifndef GL_VERSION_3_2
+#define GL_CONTEXT_CORE_PROFILE_BIT       0x00000001
+#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
+#define GL_LINES_ADJACENCY                0x000A
+#define GL_LINE_STRIP_ADJACENCY           0x000B
+#define GL_TRIANGLES_ADJACENCY            0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY       0x000D
+#define GL_PROGRAM_POINT_SIZE             0x8642
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
+#define GL_GEOMETRY_SHADER                0x8DD9
+#define GL_GEOMETRY_VERTICES_OUT          0x8916
+#define GL_GEOMETRY_INPUT_TYPE            0x8917
+#define GL_GEOMETRY_OUTPUT_TYPE           0x8918
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES   0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
+#define GL_MAX_VERTEX_OUTPUT_COMPONENTS   0x9122
+#define GL_MAX_GEOMETRY_INPUT_COMPONENTS  0x9123
+#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
+#define GL_MAX_FRAGMENT_INPUT_COMPONENTS  0x9125
+#define GL_CONTEXT_PROFILE_MASK           0x9126
+/* reuse GL_MAX_VARYING_COMPONENTS */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
+/* Reuse tokens from ARB_depth_clamp */
+/* reuse GL_DEPTH_CLAMP */
+/* Would reuse tokens from ARB_draw_elements_base_vertex, but it has none */
+/* Would reuse tokens from ARB_fragment_coord_conventions, but it has none */
+/* Reuse tokens from ARB_provoking_vertex */
+/* reuse GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION */
+/* reuse GL_FIRST_VERTEX_CONVENTION */
+/* reuse GL_LAST_VERTEX_CONVENTION */
+/* reuse GL_PROVOKING_VERTEX */
+/* Reuse tokens from ARB_seamless_cube_map */
+/* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS */
+/* Reuse tokens from ARB_sync */
+/* reuse GL_MAX_SERVER_WAIT_TIMEOUT */
+/* reuse GL_OBJECT_TYPE */
+/* reuse GL_SYNC_CONDITION */
+/* reuse GL_SYNC_STATUS */
+/* reuse GL_SYNC_FLAGS */
+/* reuse GL_SYNC_FENCE */
+/* reuse GL_SYNC_GPU_COMMANDS_COMPLETE */
+/* reuse GL_UNSIGNALED */
+/* reuse GL_SIGNALED */
+/* reuse GL_ALREADY_SIGNALED */
+/* reuse GL_TIMEOUT_EXPIRED */
+/* reuse GL_CONDITION_SATISFIED */
+/* reuse GL_WAIT_FAILED */
+/* reuse GL_TIMEOUT_IGNORED */
+/* reuse GL_SYNC_FLUSH_COMMANDS_BIT */
+/* reuse GL_TIMEOUT_IGNORED */
+/* Reuse tokens from ARB_texture_multisample */
+/* reuse GL_SAMPLE_POSITION */
+/* reuse GL_SAMPLE_MASK */
+/* reuse GL_SAMPLE_MASK_VALUE */
+/* reuse GL_MAX_SAMPLE_MASK_WORDS */
+/* reuse GL_TEXTURE_2D_MULTISAMPLE */
+/* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE */
+/* reuse GL_TEXTURE_2D_MULTISAMPLE_ARRAY */
+/* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY */
+/* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE */
+/* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY */
+/* reuse GL_TEXTURE_SAMPLES */
+/* reuse GL_TEXTURE_FIXED_SAMPLE_LOCATIONS */
+/* reuse GL_SAMPLER_2D_MULTISAMPLE */
+/* reuse GL_INT_SAMPLER_2D_MULTISAMPLE */
+/* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE */
+/* reuse GL_SAMPLER_2D_MULTISAMPLE_ARRAY */
+/* reuse GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
+/* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
+/* reuse GL_MAX_COLOR_TEXTURE_SAMPLES */
+/* reuse GL_MAX_DEPTH_TEXTURE_SAMPLES */
+/* reuse GL_MAX_INTEGER_SAMPLES */
+/* Don't need to reuse tokens from ARB_vertex_array_bgra since they're already in 1.2 core */
+#endif
+
 #ifndef GL_ARB_multitexture
 #define GL_TEXTURE0_ARB                   0x84C0
 #define GL_TEXTURE1_ARB                   0x84C1
@@ -667,6 +1237,476 @@ extern "C" {
 #define GL_DYNAMIC_COPY_ARB               0x88EA
 #endif
 
+#ifndef GL_ARB_occlusion_query
+#define GL_QUERY_COUNTER_BITS_ARB         0x8864
+#define GL_CURRENT_QUERY_ARB              0x8865
+#define GL_QUERY_RESULT_ARB               0x8866
+#define GL_QUERY_RESULT_AVAILABLE_ARB     0x8867
+#define GL_SAMPLES_PASSED_ARB             0x8914
+#endif
+
+#ifndef GL_ARB_shader_objects
+#define GL_PROGRAM_OBJECT_ARB             0x8B40
+#define GL_SHADER_OBJECT_ARB              0x8B48
+#define GL_OBJECT_TYPE_ARB                0x8B4E
+#define GL_OBJECT_SUBTYPE_ARB             0x8B4F
+#define GL_FLOAT_VEC2_ARB                 0x8B50
+#define GL_FLOAT_VEC3_ARB                 0x8B51
+#define GL_FLOAT_VEC4_ARB                 0x8B52
+#define GL_INT_VEC2_ARB                   0x8B53
+#define GL_INT_VEC3_ARB                   0x8B54
+#define GL_INT_VEC4_ARB                   0x8B55
+#define GL_BOOL_ARB                       0x8B56
+#define GL_BOOL_VEC2_ARB                  0x8B57
+#define GL_BOOL_VEC3_ARB                  0x8B58
+#define GL_BOOL_VEC4_ARB                  0x8B59
+#define GL_FLOAT_MAT2_ARB                 0x8B5A
+#define GL_FLOAT_MAT3_ARB                 0x8B5B
+#define GL_FLOAT_MAT4_ARB                 0x8B5C
+#define GL_SAMPLER_1D_ARB                 0x8B5D
+#define GL_SAMPLER_2D_ARB                 0x8B5E
+#define GL_SAMPLER_3D_ARB                 0x8B5F
+#define GL_SAMPLER_CUBE_ARB               0x8B60
+#define GL_SAMPLER_1D_SHADOW_ARB          0x8B61
+#define GL_SAMPLER_2D_SHADOW_ARB          0x8B62
+#define GL_SAMPLER_2D_RECT_ARB            0x8B63
+#define GL_SAMPLER_2D_RECT_SHADOW_ARB     0x8B64
+#define GL_OBJECT_DELETE_STATUS_ARB       0x8B80
+#define GL_OBJECT_COMPILE_STATUS_ARB      0x8B81
+#define GL_OBJECT_LINK_STATUS_ARB         0x8B82
+#define GL_OBJECT_VALIDATE_STATUS_ARB     0x8B83
+#define GL_OBJECT_INFO_LOG_LENGTH_ARB     0x8B84
+#define GL_OBJECT_ATTACHED_OBJECTS_ARB    0x8B85
+#define GL_OBJECT_ACTIVE_UNIFORMS_ARB     0x8B86
+#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
+#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
+#endif
+
+#ifndef GL_ARB_vertex_shader
+#define GL_VERTEX_SHADER_ARB              0x8B31
+#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
+#define GL_MAX_VARYING_FLOATS_ARB         0x8B4B
+#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
+#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
+#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB   0x8B89
+#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
+#endif
+
+#ifndef GL_ARB_fragment_shader
+#define GL_FRAGMENT_SHADER_ARB            0x8B30
+#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
+#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
+#endif
+
+#ifndef GL_ARB_shading_language_100
+#define GL_SHADING_LANGUAGE_VERSION_ARB   0x8B8C
+#endif
+
+#ifndef GL_ARB_texture_non_power_of_two
+#endif
+
+#ifndef GL_ARB_point_sprite
+#define GL_POINT_SPRITE_ARB               0x8861
+#define GL_COORD_REPLACE_ARB              0x8862
+#endif
+
+#ifndef GL_ARB_fragment_program_shadow
+#endif
+
+#ifndef GL_ARB_draw_buffers
+#define GL_MAX_DRAW_BUFFERS_ARB           0x8824
+#define GL_DRAW_BUFFER0_ARB               0x8825
+#define GL_DRAW_BUFFER1_ARB               0x8826
+#define GL_DRAW_BUFFER2_ARB               0x8827
+#define GL_DRAW_BUFFER3_ARB               0x8828
+#define GL_DRAW_BUFFER4_ARB               0x8829
+#define GL_DRAW_BUFFER5_ARB               0x882A
+#define GL_DRAW_BUFFER6_ARB               0x882B
+#define GL_DRAW_BUFFER7_ARB               0x882C
+#define GL_DRAW_BUFFER8_ARB               0x882D
+#define GL_DRAW_BUFFER9_ARB               0x882E
+#define GL_DRAW_BUFFER10_ARB              0x882F
+#define GL_DRAW_BUFFER11_ARB              0x8830
+#define GL_DRAW_BUFFER12_ARB              0x8831
+#define GL_DRAW_BUFFER13_ARB              0x8832
+#define GL_DRAW_BUFFER14_ARB              0x8833
+#define GL_DRAW_BUFFER15_ARB              0x8834
+#endif
+
+#ifndef GL_ARB_texture_rectangle
+#define GL_TEXTURE_RECTANGLE_ARB          0x84F5
+#define GL_TEXTURE_BINDING_RECTANGLE_ARB  0x84F6
+#define GL_PROXY_TEXTURE_RECTANGLE_ARB    0x84F7
+#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
+#endif
+
+#ifndef GL_ARB_color_buffer_float
+#define GL_RGBA_FLOAT_MODE_ARB            0x8820
+#define GL_CLAMP_VERTEX_COLOR_ARB         0x891A
+#define GL_CLAMP_FRAGMENT_COLOR_ARB       0x891B
+#define GL_CLAMP_READ_COLOR_ARB           0x891C
+#define GL_FIXED_ONLY_ARB                 0x891D
+#endif
+
+#ifndef GL_ARB_half_float_pixel
+#define GL_HALF_FLOAT_ARB                 0x140B
+#endif
+
+#ifndef GL_ARB_texture_float
+#define GL_TEXTURE_RED_TYPE_ARB           0x8C10
+#define GL_TEXTURE_GREEN_TYPE_ARB         0x8C11
+#define GL_TEXTURE_BLUE_TYPE_ARB          0x8C12
+#define GL_TEXTURE_ALPHA_TYPE_ARB         0x8C13
+#define GL_TEXTURE_LUMINANCE_TYPE_ARB     0x8C14
+#define GL_TEXTURE_INTENSITY_TYPE_ARB     0x8C15
+#define GL_TEXTURE_DEPTH_TYPE_ARB         0x8C16
+#define GL_UNSIGNED_NORMALIZED_ARB        0x8C17
+#define GL_RGBA32F_ARB                    0x8814
+#define GL_RGB32F_ARB                     0x8815
+#define GL_ALPHA32F_ARB                   0x8816
+#define GL_INTENSITY32F_ARB               0x8817
+#define GL_LUMINANCE32F_ARB               0x8818
+#define GL_LUMINANCE_ALPHA32F_ARB         0x8819
+#define GL_RGBA16F_ARB                    0x881A
+#define GL_RGB16F_ARB                     0x881B
+#define GL_ALPHA16F_ARB                   0x881C
+#define GL_INTENSITY16F_ARB               0x881D
+#define GL_LUMINANCE16F_ARB               0x881E
+#define GL_LUMINANCE_ALPHA16F_ARB         0x881F
+#endif
+
+#ifndef GL_ARB_pixel_buffer_object
+#define GL_PIXEL_PACK_BUFFER_ARB          0x88EB
+#define GL_PIXEL_UNPACK_BUFFER_ARB        0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING_ARB  0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
+#endif
+
+#ifndef GL_ARB_depth_buffer_float
+#define GL_DEPTH_COMPONENT32F             0x8CAC
+#define GL_DEPTH32F_STENCIL8              0x8CAD
+#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
+#endif
+
+#ifndef GL_ARB_draw_instanced
+#endif
+
+#ifndef GL_ARB_framebuffer_object
+#define GL_INVALID_FRAMEBUFFER_OPERATION  0x0506
+#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
+#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
+#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
+#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
+#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
+#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
+#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
+#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
+#define GL_FRAMEBUFFER_DEFAULT            0x8218
+#define GL_FRAMEBUFFER_UNDEFINED          0x8219
+#define GL_DEPTH_STENCIL_ATTACHMENT       0x821A
+#define GL_MAX_RENDERBUFFER_SIZE          0x84E8
+#define GL_DEPTH_STENCIL                  0x84F9
+#define GL_UNSIGNED_INT_24_8              0x84FA
+#define GL_DEPTH24_STENCIL8               0x88F0
+#define GL_TEXTURE_STENCIL_SIZE           0x88F1
+#define GL_TEXTURE_RED_TYPE               0x8C10
+#define GL_TEXTURE_GREEN_TYPE             0x8C11
+#define GL_TEXTURE_BLUE_TYPE              0x8C12
+#define GL_TEXTURE_ALPHA_TYPE             0x8C13
+#define GL_TEXTURE_DEPTH_TYPE             0x8C16
+#define GL_UNSIGNED_NORMALIZED            0x8C17
+#define GL_FRAMEBUFFER_BINDING            0x8CA6
+#define GL_DRAW_FRAMEBUFFER_BINDING       GL_FRAMEBUFFER_BINDING
+#define GL_RENDERBUFFER_BINDING           0x8CA7
+#define GL_READ_FRAMEBUFFER               0x8CA8
+#define GL_DRAW_FRAMEBUFFER               0x8CA9
+#define GL_READ_FRAMEBUFFER_BINDING       0x8CAA
+#define GL_RENDERBUFFER_SAMPLES           0x8CAB
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
+#define GL_FRAMEBUFFER_COMPLETE           0x8CD5
+#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
+#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
+#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
+#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
+#define GL_FRAMEBUFFER_UNSUPPORTED        0x8CDD
+#define GL_MAX_COLOR_ATTACHMENTS          0x8CDF
+#define GL_COLOR_ATTACHMENT0              0x8CE0
+#define GL_COLOR_ATTACHMENT1              0x8CE1
+#define GL_COLOR_ATTACHMENT2              0x8CE2
+#define GL_COLOR_ATTACHMENT3              0x8CE3
+#define GL_COLOR_ATTACHMENT4              0x8CE4
+#define GL_COLOR_ATTACHMENT5              0x8CE5
+#define GL_COLOR_ATTACHMENT6              0x8CE6
+#define GL_COLOR_ATTACHMENT7              0x8CE7
+#define GL_COLOR_ATTACHMENT8              0x8CE8
+#define GL_COLOR_ATTACHMENT9              0x8CE9
+#define GL_COLOR_ATTACHMENT10             0x8CEA
+#define GL_COLOR_ATTACHMENT11             0x8CEB
+#define GL_COLOR_ATTACHMENT12             0x8CEC
+#define GL_COLOR_ATTACHMENT13             0x8CED
+#define GL_COLOR_ATTACHMENT14             0x8CEE
+#define GL_COLOR_ATTACHMENT15             0x8CEF
+#define GL_DEPTH_ATTACHMENT               0x8D00
+#define GL_STENCIL_ATTACHMENT             0x8D20
+#define GL_FRAMEBUFFER                    0x8D40
+#define GL_RENDERBUFFER                   0x8D41
+#define GL_RENDERBUFFER_WIDTH             0x8D42
+#define GL_RENDERBUFFER_HEIGHT            0x8D43
+#define GL_RENDERBUFFER_INTERNAL_FORMAT   0x8D44
+#define GL_STENCIL_INDEX1                 0x8D46
+#define GL_STENCIL_INDEX4                 0x8D47
+#define GL_STENCIL_INDEX8                 0x8D48
+#define GL_STENCIL_INDEX16                0x8D49
+#define GL_RENDERBUFFER_RED_SIZE          0x8D50
+#define GL_RENDERBUFFER_GREEN_SIZE        0x8D51
+#define GL_RENDERBUFFER_BLUE_SIZE         0x8D52
+#define GL_RENDERBUFFER_ALPHA_SIZE        0x8D53
+#define GL_RENDERBUFFER_DEPTH_SIZE        0x8D54
+#define GL_RENDERBUFFER_STENCIL_SIZE      0x8D55
+#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
+#define GL_MAX_SAMPLES                    0x8D57
+#endif
+
+#ifndef GL_ARB_framebuffer_object_DEPRECATED
+#define GL_INDEX                          0x8222
+#define GL_TEXTURE_LUMINANCE_TYPE         0x8C14
+#define GL_TEXTURE_INTENSITY_TYPE         0x8C15
+#endif
+
+#ifndef GL_ARB_framebuffer_sRGB
+#define GL_FRAMEBUFFER_SRGB               0x8DB9
+#endif
+
+#ifndef GL_ARB_geometry_shader4
+#define GL_LINES_ADJACENCY_ARB            0x000A
+#define GL_LINE_STRIP_ADJACENCY_ARB       0x000B
+#define GL_TRIANGLES_ADJACENCY_ARB        0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY_ARB   0x000D
+#define GL_PROGRAM_POINT_SIZE_ARB         0x8642
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
+#define GL_GEOMETRY_SHADER_ARB            0x8DD9
+#define GL_GEOMETRY_VERTICES_OUT_ARB      0x8DDA
+#define GL_GEOMETRY_INPUT_TYPE_ARB        0x8DDB
+#define GL_GEOMETRY_OUTPUT_TYPE_ARB       0x8DDC
+#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
+#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
+/* reuse GL_MAX_VARYING_COMPONENTS */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
+#endif
+
+#ifndef GL_ARB_half_float_vertex
+#define GL_HALF_FLOAT                     0x140B
+#endif
+
+#ifndef GL_ARB_instanced_arrays
+#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
+#endif
+
+#ifndef GL_ARB_map_buffer_range
+#define GL_MAP_READ_BIT                   0x0001
+#define GL_MAP_WRITE_BIT                  0x0002
+#define GL_MAP_INVALIDATE_RANGE_BIT       0x0004
+#define GL_MAP_INVALIDATE_BUFFER_BIT      0x0008
+#define GL_MAP_FLUSH_EXPLICIT_BIT         0x0010
+#define GL_MAP_UNSYNCHRONIZED_BIT         0x0020
+#endif
+
+#ifndef GL_ARB_texture_buffer_object
+#define GL_TEXTURE_BUFFER_ARB             0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB    0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER_ARB     0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT_ARB      0x8C2E
+#endif
+
+#ifndef GL_ARB_texture_compression_rgtc
+#define GL_COMPRESSED_RED_RGTC1           0x8DBB
+#define GL_COMPRESSED_SIGNED_RED_RGTC1    0x8DBC
+#define GL_COMPRESSED_RG_RGTC2            0x8DBD
+#define GL_COMPRESSED_SIGNED_RG_RGTC2     0x8DBE
+#endif
+
+#ifndef GL_ARB_texture_rg
+#define GL_RG                             0x8227
+#define GL_RG_INTEGER                     0x8228
+#define GL_R8                             0x8229
+#define GL_R16                            0x822A
+#define GL_RG8                            0x822B
+#define GL_RG16                           0x822C
+#define GL_R16F                           0x822D
+#define GL_R32F                           0x822E
+#define GL_RG16F                          0x822F
+#define GL_RG32F                          0x8230
+#define GL_R8I                            0x8231
+#define GL_R8UI                           0x8232
+#define GL_R16I                           0x8233
+#define GL_R16UI                          0x8234
+#define GL_R32I                           0x8235
+#define GL_R32UI                          0x8236
+#define GL_RG8I                           0x8237
+#define GL_RG8UI                          0x8238
+#define GL_RG16I                          0x8239
+#define GL_RG16UI                         0x823A
+#define GL_RG32I                          0x823B
+#define GL_RG32UI                         0x823C
+#endif
+
+#ifndef GL_ARB_vertex_array_object
+#define GL_VERTEX_ARRAY_BINDING           0x85B5
+#endif
+
+#ifndef GL_ARB_uniform_buffer_object
+#define GL_UNIFORM_BUFFER                 0x8A11
+#define GL_UNIFORM_BUFFER_BINDING         0x8A28
+#define GL_UNIFORM_BUFFER_START           0x8A29
+#define GL_UNIFORM_BUFFER_SIZE            0x8A2A
+#define GL_MAX_VERTEX_UNIFORM_BLOCKS      0x8A2B
+#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS    0x8A2C
+#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS    0x8A2D
+#define GL_MAX_COMBINED_UNIFORM_BLOCKS    0x8A2E
+#define GL_MAX_UNIFORM_BUFFER_BINDINGS    0x8A2F
+#define GL_MAX_UNIFORM_BLOCK_SIZE         0x8A30
+#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
+#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
+#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
+#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
+#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
+#define GL_ACTIVE_UNIFORM_BLOCKS          0x8A36
+#define GL_UNIFORM_TYPE                   0x8A37
+#define GL_UNIFORM_SIZE                   0x8A38
+#define GL_UNIFORM_NAME_LENGTH            0x8A39
+#define GL_UNIFORM_BLOCK_INDEX            0x8A3A
+#define GL_UNIFORM_OFFSET                 0x8A3B
+#define GL_UNIFORM_ARRAY_STRIDE           0x8A3C
+#define GL_UNIFORM_MATRIX_STRIDE          0x8A3D
+#define GL_UNIFORM_IS_ROW_MAJOR           0x8A3E
+#define GL_UNIFORM_BLOCK_BINDING          0x8A3F
+#define GL_UNIFORM_BLOCK_DATA_SIZE        0x8A40
+#define GL_UNIFORM_BLOCK_NAME_LENGTH      0x8A41
+#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  0x8A42
+#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
+#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
+#define GL_INVALID_INDEX                  0xFFFFFFFFu
+#endif
+
+#ifndef GL_ARB_compatibility
+/* ARB_compatibility just defines tokens from core 3.0 */
+#endif
+
+#ifndef GL_ARB_copy_buffer
+#define GL_COPY_READ_BUFFER               0x8F36
+#define GL_COPY_WRITE_BUFFER              0x8F37
+#endif
+
+#ifndef GL_ARB_shader_texture_lod
+#endif
+
+#ifndef GL_ARB_depth_clamp
+#define GL_DEPTH_CLAMP                    0x864F
+#endif
+
+#ifndef GL_ARB_draw_elements_base_vertex
+#endif
+
+#ifndef GL_ARB_fragment_coord_conventions
+#endif
+
+#ifndef GL_ARB_provoking_vertex
+#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
+#define GL_FIRST_VERTEX_CONVENTION        0x8E4D
+#define GL_LAST_VERTEX_CONVENTION         0x8E4E
+#define GL_PROVOKING_VERTEX               0x8E4F
+#endif
+
+#ifndef GL_ARB_seamless_cube_map
+#define GL_TEXTURE_CUBE_MAP_SEAMLESS      0x884F
+#endif
+
+#ifndef GL_ARB_sync
+#define GL_MAX_SERVER_WAIT_TIMEOUT        0x9111
+#define GL_OBJECT_TYPE                    0x9112
+#define GL_SYNC_CONDITION                 0x9113
+#define GL_SYNC_STATUS                    0x9114
+#define GL_SYNC_FLAGS                     0x9115
+#define GL_SYNC_FENCE                     0x9116
+#define GL_SYNC_GPU_COMMANDS_COMPLETE     0x9117
+#define GL_UNSIGNALED                     0x9118
+#define GL_SIGNALED                       0x9119
+#define GL_ALREADY_SIGNALED               0x911A
+#define GL_TIMEOUT_EXPIRED                0x911B
+#define GL_CONDITION_SATISFIED            0x911C
+#define GL_WAIT_FAILED                    0x911D
+#define GL_SYNC_FLUSH_COMMANDS_BIT        0x00000001
+#define GL_TIMEOUT_IGNORED                0xFFFFFFFFFFFFFFFFull
+#endif
+
+#ifndef GL_ARB_texture_multisample
+#define GL_SAMPLE_POSITION                0x8E50
+#define GL_SAMPLE_MASK                    0x8E51
+#define GL_SAMPLE_MASK_VALUE              0x8E52
+#define GL_MAX_SAMPLE_MASK_WORDS          0x8E59
+#define GL_TEXTURE_2D_MULTISAMPLE         0x9100
+#define GL_PROXY_TEXTURE_2D_MULTISAMPLE   0x9101
+#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY   0x9102
+#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
+#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
+#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
+#define GL_TEXTURE_SAMPLES                0x9106
+#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
+#define GL_SAMPLER_2D_MULTISAMPLE         0x9108
+#define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109
+#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
+#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B
+#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
+#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
+#define GL_MAX_COLOR_TEXTURE_SAMPLES      0x910E
+#define GL_MAX_DEPTH_TEXTURE_SAMPLES      0x910F
+#define GL_MAX_INTEGER_SAMPLES            0x9110
+#endif
+
+#ifndef GL_ARB_vertex_array_bgra
+/* reuse GL_BGRA */
+#endif
+
+#ifndef GL_ARB_draw_buffers_blend
+#endif
+
+#ifndef GL_ARB_sample_shading
+#define GL_SAMPLE_SHADING                 0x8C36
+#define GL_MIN_SAMPLE_SHADING_VALUE       0x8C37
+#endif
+
+#ifndef GL_ARB_texture_cube_map_array
+#define GL_TEXTURE_CUBE_MAP_ARRAY         0x9009
+#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
+#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   0x900B
+#define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C
+#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D
+#define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
+#endif
+
+#ifndef GL_ARB_texture_gather
+#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
+#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS 0x8F9F
+#endif
+
+#ifndef GL_ARB_texture_query_lod
+#endif
+
 #ifndef GL_EXT_abgr
 #define GL_ABGR_EXT                       0x8000
 #endif
@@ -997,6 +2037,10 @@ extern "C" {
 #define GL_CLAMP_TO_EDGE_SGIS             0x812F
 #endif
 
+#ifndef GL_SGIS_texture_border_clamp
+#define GL_CLAMP_TO_BORDER_SGIS           0x812D
+#endif
+
 #ifndef GL_EXT_blend_minmax
 #define GL_FUNC_ADD_EXT                   0x8006
 #define GL_MIN_EXT                        0x8007
@@ -2540,6 +3584,11 @@ extern "C" {
 #define GL_DRAW_BUFFER15_ATI              0x8834
 #endif
 
+#ifndef GL_ATI_pixel_format_float
+#define GL_TYPE_RGBA_FLOAT_ATI            0x8820
+#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
+#endif
+
 #ifndef GL_ATI_texture_env_combine3
 #define GL_MODULATE_ADD_ATI               0x8744
 #define GL_MODULATE_SIGNED_ADD_ATI        0x8745
@@ -2626,15 +3675,830 @@ extern "C" {
 #ifndef GL_ATI_vertex_attrib_array_object
 #endif
 
+#ifndef GL_OES_read_format
+#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
+#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
+#endif
+
+#ifndef GL_EXT_depth_bounds_test
+#define GL_DEPTH_BOUNDS_TEST_EXT          0x8890
+#define GL_DEPTH_BOUNDS_EXT               0x8891
+#endif
+
+#ifndef GL_EXT_texture_mirror_clamp
+#define GL_MIRROR_CLAMP_EXT               0x8742
+#define GL_MIRROR_CLAMP_TO_EDGE_EXT       0x8743
+#define GL_MIRROR_CLAMP_TO_BORDER_EXT     0x8912
+#endif
+
+#ifndef GL_EXT_blend_equation_separate
+#define GL_BLEND_EQUATION_RGB_EXT         0x8009
+#define GL_BLEND_EQUATION_ALPHA_EXT       0x883D
+#endif
+
+#ifndef GL_MESA_pack_invert
+#define GL_PACK_INVERT_MESA               0x8758
+#endif
+
+#ifndef GL_MESA_ycbcr_texture
+#define GL_UNSIGNED_SHORT_8_8_MESA        0x85BA
+#define GL_UNSIGNED_SHORT_8_8_REV_MESA    0x85BB
+#define GL_YCBCR_MESA                     0x8757
+#endif
+
+#ifndef GL_EXT_pixel_buffer_object
+#define GL_PIXEL_PACK_BUFFER_EXT          0x88EB
+#define GL_PIXEL_UNPACK_BUFFER_EXT        0x88EC
+#define GL_PIXEL_PACK_BUFFER_BINDING_EXT  0x88ED
+#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
+#endif
+
+#ifndef GL_NV_fragment_program_option
+#endif
+
+#ifndef GL_NV_fragment_program2
+#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
+#define GL_MAX_PROGRAM_CALL_DEPTH_NV      0x88F5
+#define GL_MAX_PROGRAM_IF_DEPTH_NV        0x88F6
+#define GL_MAX_PROGRAM_LOOP_DEPTH_NV      0x88F7
+#define GL_MAX_PROGRAM_LOOP_COUNT_NV      0x88F8
+#endif
+
+#ifndef GL_NV_vertex_program2_option
+/* reuse GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV */
+/* reuse GL_MAX_PROGRAM_CALL_DEPTH_NV */
+#endif
+
+#ifndef GL_NV_vertex_program3
+/* reuse GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB */
+#endif
+
+#ifndef GL_EXT_framebuffer_object
+#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
+#define GL_MAX_RENDERBUFFER_SIZE_EXT      0x84E8
+#define GL_FRAMEBUFFER_BINDING_EXT        0x8CA6
+#define GL_RENDERBUFFER_BINDING_EXT       0x8CA7
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
+#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
+#define GL_FRAMEBUFFER_COMPLETE_EXT       0x8CD5
+#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
+#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
+#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
+#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
+#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
+#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
+#define GL_FRAMEBUFFER_UNSUPPORTED_EXT    0x8CDD
+#define GL_MAX_COLOR_ATTACHMENTS_EXT      0x8CDF
+#define GL_COLOR_ATTACHMENT0_EXT          0x8CE0
+#define GL_COLOR_ATTACHMENT1_EXT          0x8CE1
+#define GL_COLOR_ATTACHMENT2_EXT          0x8CE2
+#define GL_COLOR_ATTACHMENT3_EXT          0x8CE3
+#define GL_COLOR_ATTACHMENT4_EXT          0x8CE4
+#define GL_COLOR_ATTACHMENT5_EXT          0x8CE5
+#define GL_COLOR_ATTACHMENT6_EXT          0x8CE6
+#define GL_COLOR_ATTACHMENT7_EXT          0x8CE7
+#define GL_COLOR_ATTACHMENT8_EXT          0x8CE8
+#define GL_COLOR_ATTACHMENT9_EXT          0x8CE9
+#define GL_COLOR_ATTACHMENT10_EXT         0x8CEA
+#define GL_COLOR_ATTACHMENT11_EXT         0x8CEB
+#define GL_COLOR_ATTACHMENT12_EXT         0x8CEC
+#define GL_COLOR_ATTACHMENT13_EXT         0x8CED
+#define GL_COLOR_ATTACHMENT14_EXT         0x8CEE
+#define GL_COLOR_ATTACHMENT15_EXT         0x8CEF
+#define GL_DEPTH_ATTACHMENT_EXT           0x8D00
+#define GL_STENCIL_ATTACHMENT_EXT         0x8D20
+#define GL_FRAMEBUFFER_EXT                0x8D40
+#define GL_RENDERBUFFER_EXT               0x8D41
+#define GL_RENDERBUFFER_WIDTH_EXT         0x8D42
+#define GL_RENDERBUFFER_HEIGHT_EXT        0x8D43
+#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
+#define GL_STENCIL_INDEX1_EXT             0x8D46
+#define GL_STENCIL_INDEX4_EXT             0x8D47
+#define GL_STENCIL_INDEX8_EXT             0x8D48
+#define GL_STENCIL_INDEX16_EXT            0x8D49
+#define GL_RENDERBUFFER_RED_SIZE_EXT      0x8D50
+#define GL_RENDERBUFFER_GREEN_SIZE_EXT    0x8D51
+#define GL_RENDERBUFFER_BLUE_SIZE_EXT     0x8D52
+#define GL_RENDERBUFFER_ALPHA_SIZE_EXT    0x8D53
+#define GL_RENDERBUFFER_DEPTH_SIZE_EXT    0x8D54
+#define GL_RENDERBUFFER_STENCIL_SIZE_EXT  0x8D55
+#endif
+
+#ifndef GL_GREMEDY_string_marker
+#endif
+
+#ifndef GL_EXT_packed_depth_stencil
+#define GL_DEPTH_STENCIL_EXT              0x84F9
+#define GL_UNSIGNED_INT_24_8_EXT          0x84FA
+#define GL_DEPTH24_STENCIL8_EXT           0x88F0
+#define GL_TEXTURE_STENCIL_SIZE_EXT       0x88F1
+#endif
+
+#ifndef GL_EXT_stencil_clear_tag
+#define GL_STENCIL_TAG_BITS_EXT           0x88F2
+#define GL_STENCIL_CLEAR_TAG_VALUE_EXT    0x88F3
+#endif
+
+#ifndef GL_EXT_texture_sRGB
+#define GL_SRGB_EXT                       0x8C40
+#define GL_SRGB8_EXT                      0x8C41
+#define GL_SRGB_ALPHA_EXT                 0x8C42
+#define GL_SRGB8_ALPHA8_EXT               0x8C43
+#define GL_SLUMINANCE_ALPHA_EXT           0x8C44
+#define GL_SLUMINANCE8_ALPHA8_EXT         0x8C45
+#define GL_SLUMINANCE_EXT                 0x8C46
+#define GL_SLUMINANCE8_EXT                0x8C47
+#define GL_COMPRESSED_SRGB_EXT            0x8C48
+#define GL_COMPRESSED_SRGB_ALPHA_EXT      0x8C49
+#define GL_COMPRESSED_SLUMINANCE_EXT      0x8C4A
+#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
+#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT  0x8C4C
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
+#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
+#endif
+
+#ifndef GL_EXT_framebuffer_blit
+#define GL_READ_FRAMEBUFFER_EXT           0x8CA8
+#define GL_DRAW_FRAMEBUFFER_EXT           0x8CA9
+#define GL_DRAW_FRAMEBUFFER_BINDING_EXT   GL_FRAMEBUFFER_BINDING_EXT
+#define GL_READ_FRAMEBUFFER_BINDING_EXT   0x8CAA
+#endif
+
+#ifndef GL_EXT_framebuffer_multisample
+#define GL_RENDERBUFFER_SAMPLES_EXT       0x8CAB
+#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
+#define GL_MAX_SAMPLES_EXT                0x8D57
+#endif
+
+#ifndef GL_MESAX_texture_stack
+#define GL_TEXTURE_1D_STACK_MESAX         0x8759
+#define GL_TEXTURE_2D_STACK_MESAX         0x875A
+#define GL_PROXY_TEXTURE_1D_STACK_MESAX   0x875B
+#define GL_PROXY_TEXTURE_2D_STACK_MESAX   0x875C
+#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
+#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
+#endif
+
+#ifndef GL_EXT_timer_query
+#define GL_TIME_ELAPSED_EXT               0x88BF
+#endif
+
+#ifndef GL_EXT_gpu_program_parameters
+#endif
+
+#ifndef GL_APPLE_flush_buffer_range
+#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
+#define GL_BUFFER_FLUSHING_UNMAP_APPLE    0x8A13
+#endif
+
+#ifndef GL_NV_gpu_program4
+#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV    0x8904
+#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV    0x8905
+#define GL_PROGRAM_ATTRIB_COMPONENTS_NV   0x8906
+#define GL_PROGRAM_RESULT_COMPONENTS_NV   0x8907
+#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
+#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
+#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
+#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
+#endif
+
+#ifndef GL_NV_geometry_program4
+#define GL_LINES_ADJACENCY_EXT            0x000A
+#define GL_LINE_STRIP_ADJACENCY_EXT       0x000B
+#define GL_TRIANGLES_ADJACENCY_EXT        0x000C
+#define GL_TRIANGLE_STRIP_ADJACENCY_EXT   0x000D
+#define GL_GEOMETRY_PROGRAM_NV            0x8C26
+#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
+#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
+#define GL_GEOMETRY_VERTICES_OUT_EXT      0x8DDA
+#define GL_GEOMETRY_INPUT_TYPE_EXT        0x8DDB
+#define GL_GEOMETRY_OUTPUT_TYPE_EXT       0x8DDC
+#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
+#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
+#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
+#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
+#define GL_PROGRAM_POINT_SIZE_EXT         0x8642
+#endif
+
+#ifndef GL_EXT_geometry_shader4
+#define GL_GEOMETRY_SHADER_EXT            0x8DD9
+/* reuse GL_GEOMETRY_VERTICES_OUT_EXT */
+/* reuse GL_GEOMETRY_INPUT_TYPE_EXT */
+/* reuse GL_GEOMETRY_OUTPUT_TYPE_EXT */
+/* reuse GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT */
+#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
+#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
+#define GL_MAX_VARYING_COMPONENTS_EXT     0x8B4B
+#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
+#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
+#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
+/* reuse GL_LINES_ADJACENCY_EXT */
+/* reuse GL_LINE_STRIP_ADJACENCY_EXT */
+/* reuse GL_TRIANGLES_ADJACENCY_EXT */
+/* reuse GL_TRIANGLE_STRIP_ADJACENCY_EXT */
+/* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT */
+/* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT */
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
+/* reuse GL_PROGRAM_POINT_SIZE_EXT */
+#endif
+
+#ifndef GL_NV_vertex_program4
+#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
+#endif
+
+#ifndef GL_EXT_gpu_shader4
+#define GL_SAMPLER_1D_ARRAY_EXT           0x8DC0
+#define GL_SAMPLER_2D_ARRAY_EXT           0x8DC1
+#define GL_SAMPLER_BUFFER_EXT             0x8DC2
+#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT    0x8DC3
+#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT    0x8DC4
+#define GL_SAMPLER_CUBE_SHADOW_EXT        0x8DC5
+#define GL_UNSIGNED_INT_VEC2_EXT          0x8DC6
+#define GL_UNSIGNED_INT_VEC3_EXT          0x8DC7
+#define GL_UNSIGNED_INT_VEC4_EXT          0x8DC8
+#define GL_INT_SAMPLER_1D_EXT             0x8DC9
+#define GL_INT_SAMPLER_2D_EXT             0x8DCA
+#define GL_INT_SAMPLER_3D_EXT             0x8DCB
+#define GL_INT_SAMPLER_CUBE_EXT           0x8DCC
+#define GL_INT_SAMPLER_2D_RECT_EXT        0x8DCD
+#define GL_INT_SAMPLER_1D_ARRAY_EXT       0x8DCE
+#define GL_INT_SAMPLER_2D_ARRAY_EXT       0x8DCF
+#define GL_INT_SAMPLER_BUFFER_EXT         0x8DD0
+#define GL_UNSIGNED_INT_SAMPLER_1D_EXT    0x8DD1
+#define GL_UNSIGNED_INT_SAMPLER_2D_EXT    0x8DD2
+#define GL_UNSIGNED_INT_SAMPLER_3D_EXT    0x8DD3
+#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT  0x8DD4
+#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
+#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
+#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
+#endif
+
+#ifndef GL_EXT_draw_instanced
+#endif
+
+#ifndef GL_EXT_packed_float
+#define GL_R11F_G11F_B10F_EXT             0x8C3A
+#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
+#define GL_RGBA_SIGNED_COMPONENTS_EXT     0x8C3C
+#endif
+
+#ifndef GL_EXT_texture_array
+#define GL_TEXTURE_1D_ARRAY_EXT           0x8C18
+#define GL_PROXY_TEXTURE_1D_ARRAY_EXT     0x8C19
+#define GL_TEXTURE_2D_ARRAY_EXT           0x8C1A
+#define GL_PROXY_TEXTURE_2D_ARRAY_EXT     0x8C1B
+#define GL_TEXTURE_BINDING_1D_ARRAY_EXT   0x8C1C
+#define GL_TEXTURE_BINDING_2D_ARRAY_EXT   0x8C1D
+#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT   0x88FF
+#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
+/* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
+#endif
+
+#ifndef GL_EXT_texture_buffer_object
+#define GL_TEXTURE_BUFFER_EXT             0x8C2A
+#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT    0x8C2B
+#define GL_TEXTURE_BINDING_BUFFER_EXT     0x8C2C
+#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
+#define GL_TEXTURE_BUFFER_FORMAT_EXT      0x8C2E
+#endif
+
+#ifndef GL_EXT_texture_compression_latc
+#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
+#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
+#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
+#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
+#endif
+
+#ifndef GL_EXT_texture_compression_rgtc
+#define GL_COMPRESSED_RED_RGTC1_EXT       0x8DBB
+#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
+#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
+#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
+#endif
+
+#ifndef GL_EXT_texture_shared_exponent
+#define GL_RGB9_E5_EXT                    0x8C3D
+#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT   0x8C3E
+#define GL_TEXTURE_SHARED_SIZE_EXT        0x8C3F
+#endif
+
+#ifndef GL_NV_depth_buffer_float
+#define GL_DEPTH_COMPONENT32F_NV          0x8DAB
+#define GL_DEPTH32F_STENCIL8_NV           0x8DAC
+#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
+#define GL_DEPTH_BUFFER_FLOAT_MODE_NV     0x8DAF
+#endif
+
+#ifndef GL_NV_fragment_program4
+#endif
+
+#ifndef GL_NV_framebuffer_multisample_coverage
+#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
+#define GL_RENDERBUFFER_COLOR_SAMPLES_NV  0x8E10
+#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
+#define GL_MULTISAMPLE_COVERAGE_MODES_NV  0x8E12
+#endif
+
+#ifndef GL_EXT_framebuffer_sRGB
+#define GL_FRAMEBUFFER_SRGB_EXT           0x8DB9
+#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT   0x8DBA
+#endif
+
+#ifndef GL_NV_geometry_shader4
+#endif
+
+#ifndef GL_NV_parameter_buffer_object
+#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
+#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
+#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
+#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
+#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
+#endif
+
+#ifndef GL_EXT_draw_buffers2
+#endif
+
+#ifndef GL_NV_transform_feedback
+#define GL_BACK_PRIMARY_COLOR_NV          0x8C77
+#define GL_BACK_SECONDARY_COLOR_NV        0x8C78
+#define GL_TEXTURE_COORD_NV               0x8C79
+#define GL_CLIP_DISTANCE_NV               0x8C7A
+#define GL_VERTEX_ID_NV                   0x8C7B
+#define GL_PRIMITIVE_ID_NV                0x8C7C
+#define GL_GENERIC_ATTRIB_NV              0x8C7D
+#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV  0x8C7E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
+#define GL_ACTIVE_VARYINGS_NV             0x8C81
+#define GL_ACTIVE_VARYING_MAX_LENGTH_NV   0x8C82
+#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
+#define GL_TRANSFORM_FEEDBACK_RECORD_NV   0x8C86
+#define GL_PRIMITIVES_GENERATED_NV        0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
+#define GL_RASTERIZER_DISCARD_NV          0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV 0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
+#define GL_INTERLEAVED_ATTRIBS_NV         0x8C8C
+#define GL_SEPARATE_ATTRIBS_NV            0x8C8D
+#define GL_TRANSFORM_FEEDBACK_BUFFER_NV   0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
+#endif
+
+#ifndef GL_EXT_bindable_uniform
+#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
+#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
+#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
+#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT  0x8DED
+#define GL_UNIFORM_BUFFER_EXT             0x8DEE
+#define GL_UNIFORM_BUFFER_BINDING_EXT     0x8DEF
+#endif
+
+#ifndef GL_EXT_texture_integer
+#define GL_RGBA32UI_EXT                   0x8D70
+#define GL_RGB32UI_EXT                    0x8D71
+#define GL_ALPHA32UI_EXT                  0x8D72
+#define GL_INTENSITY32UI_EXT              0x8D73
+#define GL_LUMINANCE32UI_EXT              0x8D74
+#define GL_LUMINANCE_ALPHA32UI_EXT        0x8D75
+#define GL_RGBA16UI_EXT                   0x8D76
+#define GL_RGB16UI_EXT                    0x8D77
+#define GL_ALPHA16UI_EXT                  0x8D78
+#define GL_INTENSITY16UI_EXT              0x8D79
+#define GL_LUMINANCE16UI_EXT              0x8D7A
+#define GL_LUMINANCE_ALPHA16UI_EXT        0x8D7B
+#define GL_RGBA8UI_EXT                    0x8D7C
+#define GL_RGB8UI_EXT                     0x8D7D
+#define GL_ALPHA8UI_EXT                   0x8D7E
+#define GL_INTENSITY8UI_EXT               0x8D7F
+#define GL_LUMINANCE8UI_EXT               0x8D80
+#define GL_LUMINANCE_ALPHA8UI_EXT         0x8D81
+#define GL_RGBA32I_EXT                    0x8D82
+#define GL_RGB32I_EXT                     0x8D83
+#define GL_ALPHA32I_EXT                   0x8D84
+#define GL_INTENSITY32I_EXT               0x8D85
+#define GL_LUMINANCE32I_EXT               0x8D86
+#define GL_LUMINANCE_ALPHA32I_EXT         0x8D87
+#define GL_RGBA16I_EXT                    0x8D88
+#define GL_RGB16I_EXT                     0x8D89
+#define GL_ALPHA16I_EXT                   0x8D8A
+#define GL_INTENSITY16I_EXT               0x8D8B
+#define GL_LUMINANCE16I_EXT               0x8D8C
+#define GL_LUMINANCE_ALPHA16I_EXT         0x8D8D
+#define GL_RGBA8I_EXT                     0x8D8E
+#define GL_RGB8I_EXT                      0x8D8F
+#define GL_ALPHA8I_EXT                    0x8D90
+#define GL_INTENSITY8I_EXT                0x8D91
+#define GL_LUMINANCE8I_EXT                0x8D92
+#define GL_LUMINANCE_ALPHA8I_EXT          0x8D93
+#define GL_RED_INTEGER_EXT                0x8D94
+#define GL_GREEN_INTEGER_EXT              0x8D95
+#define GL_BLUE_INTEGER_EXT               0x8D96
+#define GL_ALPHA_INTEGER_EXT              0x8D97
+#define GL_RGB_INTEGER_EXT                0x8D98
+#define GL_RGBA_INTEGER_EXT               0x8D99
+#define GL_BGR_INTEGER_EXT                0x8D9A
+#define GL_BGRA_INTEGER_EXT               0x8D9B
+#define GL_LUMINANCE_INTEGER_EXT          0x8D9C
+#define GL_LUMINANCE_ALPHA_INTEGER_EXT    0x8D9D
+#define GL_RGBA_INTEGER_MODE_EXT          0x8D9E
+#endif
+
+#ifndef GL_GREMEDY_frame_terminator
+#endif
+
+#ifndef GL_NV_conditional_render
+#define GL_QUERY_WAIT_NV                  0x8E13
+#define GL_QUERY_NO_WAIT_NV               0x8E14
+#define GL_QUERY_BY_REGION_WAIT_NV        0x8E15
+#define GL_QUERY_BY_REGION_NO_WAIT_NV     0x8E16
+#endif
+
+#ifndef GL_NV_present_video
+#define GL_FRAME_NV                       0x8E26
+#define GL_FIELDS_NV                      0x8E27
+#define GL_CURRENT_TIME_NV                0x8E28
+#define GL_NUM_FILL_STREAMS_NV            0x8E29
+#define GL_PRESENT_TIME_NV                0x8E2A
+#define GL_PRESENT_DURATION_NV            0x8E2B
+#endif
+
+#ifndef GL_EXT_transform_feedback
+#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT  0x8C8E
+#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
+#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
+#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
+#define GL_INTERLEAVED_ATTRIBS_EXT        0x8C8C
+#define GL_SEPARATE_ATTRIBS_EXT           0x8C8D
+#define GL_PRIMITIVES_GENERATED_EXT       0x8C87
+#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
+#define GL_RASTERIZER_DISCARD_EXT         0x8C89
+#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
+#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
+#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
+#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
+#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
+#endif
+
+#ifndef GL_EXT_direct_state_access
+#define GL_PROGRAM_MATRIX_EXT             0x8E2D
+#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT   0x8E2E
+#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
+#endif
+
+#ifndef GL_EXT_vertex_array_bgra
+/* reuse GL_BGRA */
+#endif
+
+#ifndef GL_EXT_texture_swizzle
+#define GL_TEXTURE_SWIZZLE_R_EXT          0x8E42
+#define GL_TEXTURE_SWIZZLE_G_EXT          0x8E43
+#define GL_TEXTURE_SWIZZLE_B_EXT          0x8E44
+#define GL_TEXTURE_SWIZZLE_A_EXT          0x8E45
+#define GL_TEXTURE_SWIZZLE_RGBA_EXT       0x8E46
+#endif
+
+#ifndef GL_NV_explicit_multisample
+#define GL_SAMPLE_POSITION_NV             0x8E50
+#define GL_SAMPLE_MASK_NV                 0x8E51
+#define GL_SAMPLE_MASK_VALUE_NV           0x8E52
+#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
+#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
+#define GL_TEXTURE_RENDERBUFFER_NV        0x8E55
+#define GL_SAMPLER_RENDERBUFFER_NV        0x8E56
+#define GL_INT_SAMPLER_RENDERBUFFER_NV    0x8E57
+#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
+#define GL_MAX_SAMPLE_MASK_WORDS_NV       0x8E59
+#endif
+
+#ifndef GL_NV_transform_feedback2
+#define GL_TRANSFORM_FEEDBACK_NV          0x8E22
+#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
+#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
+#define GL_TRANSFORM_FEEDBACK_BINDING_NV  0x8E25
+#endif
+
+#ifndef GL_ATI_meminfo
+#define GL_VBO_FREE_MEMORY_ATI            0x87FB
+#define GL_TEXTURE_FREE_MEMORY_ATI        0x87FC
+#define GL_RENDERBUFFER_FREE_MEMORY_ATI   0x87FD
+#endif
+
+#ifndef GL_AMD_performance_monitor
+#define GL_COUNTER_TYPE_AMD               0x8BC0
+#define GL_COUNTER_RANGE_AMD              0x8BC1
+#define GL_UNSIGNED_INT64_AMD             0x8BC2
+#define GL_PERCENTAGE_AMD                 0x8BC3
+#define GL_PERFMON_RESULT_AVAILABLE_AMD   0x8BC4
+#define GL_PERFMON_RESULT_SIZE_AMD        0x8BC5
+#define GL_PERFMON_RESULT_AMD             0x8BC6
+#endif
+
+#ifndef GL_AMD_texture_texture4
+#endif
+
+#ifndef GL_AMD_vertex_shader_tesselator
+#define GL_SAMPLER_BUFFER_AMD             0x9001
+#define GL_INT_SAMPLER_BUFFER_AMD         0x9002
+#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
+#define GL_TESSELLATION_MODE_AMD          0x9004
+#define GL_TESSELLATION_FACTOR_AMD        0x9005
+#define GL_DISCRETE_AMD                   0x9006
+#define GL_CONTINUOUS_AMD                 0x9007
+#endif
+
+#ifndef GL_EXT_provoking_vertex
+#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
+#define GL_FIRST_VERTEX_CONVENTION_EXT    0x8E4D
+#define GL_LAST_VERTEX_CONVENTION_EXT     0x8E4E
+#define GL_PROVOKING_VERTEX_EXT           0x8E4F
+#endif
+
+#ifndef GL_EXT_texture_snorm
+#define GL_ALPHA_SNORM                    0x9010
+#define GL_LUMINANCE_SNORM                0x9011
+#define GL_LUMINANCE_ALPHA_SNORM          0x9012
+#define GL_INTENSITY_SNORM                0x9013
+#define GL_ALPHA8_SNORM                   0x9014
+#define GL_LUMINANCE8_SNORM               0x9015
+#define GL_LUMINANCE8_ALPHA8_SNORM        0x9016
+#define GL_INTENSITY8_SNORM               0x9017
+#define GL_ALPHA16_SNORM                  0x9018
+#define GL_LUMINANCE16_SNORM              0x9019
+#define GL_LUMINANCE16_ALPHA16_SNORM      0x901A
+#define GL_INTENSITY16_SNORM              0x901B
+/* reuse GL_RED_SNORM */
+/* reuse GL_RG_SNORM */
+/* reuse GL_RGB_SNORM */
+/* reuse GL_RGBA_SNORM */
+/* reuse GL_R8_SNORM */
+/* reuse GL_RG8_SNORM */
+/* reuse GL_RGB8_SNORM */
+/* reuse GL_RGBA8_SNORM */
+/* reuse GL_R16_SNORM */
+/* reuse GL_RG16_SNORM */
+/* reuse GL_RGB16_SNORM */
+/* reuse GL_RGBA16_SNORM */
+/* reuse GL_SIGNED_NORMALIZED */
+#endif
+
+#ifndef GL_AMD_draw_buffers_blend
+#endif
+
+#ifndef GL_APPLE_texture_range
+#define GL_TEXTURE_RANGE_LENGTH_APPLE     0x85B7
+#define GL_TEXTURE_RANGE_POINTER_APPLE    0x85B8
+#define GL_TEXTURE_STORAGE_HINT_APPLE     0x85BC
+#define GL_STORAGE_PRIVATE_APPLE          0x85BD
+/* reuse GL_STORAGE_CACHED_APPLE */
+/* reuse GL_STORAGE_SHARED_APPLE */
+#endif
+
+#ifndef GL_APPLE_float_pixels
+#define GL_HALF_APPLE                     0x140B
+#define GL_RGBA_FLOAT32_APPLE             0x8814
+#define GL_RGB_FLOAT32_APPLE              0x8815
+#define GL_ALPHA_FLOAT32_APPLE            0x8816
+#define GL_INTENSITY_FLOAT32_APPLE        0x8817
+#define GL_LUMINANCE_FLOAT32_APPLE        0x8818
+#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE  0x8819
+#define GL_RGBA_FLOAT16_APPLE             0x881A
+#define GL_RGB_FLOAT16_APPLE              0x881B
+#define GL_ALPHA_FLOAT16_APPLE            0x881C
+#define GL_INTENSITY_FLOAT16_APPLE        0x881D
+#define GL_LUMINANCE_FLOAT16_APPLE        0x881E
+#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE  0x881F
+#define GL_COLOR_FLOAT_APPLE              0x8A0F
+#endif
+
+#ifndef GL_APPLE_vertex_program_evaluators
+#define GL_VERTEX_ATTRIB_MAP1_APPLE       0x8A00
+#define GL_VERTEX_ATTRIB_MAP2_APPLE       0x8A01
+#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE  0x8A02
+#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
+#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
+#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
+#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE  0x8A06
+#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
+#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
+#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
+#endif
+
+#ifndef GL_APPLE_aux_depth_stencil
+#define GL_AUX_DEPTH_STENCIL_APPLE        0x8A14
+#endif
+
+#ifndef GL_APPLE_object_purgeable
+#define GL_BUFFER_OBJECT_APPLE            0x85B3
+#define GL_RELEASED_APPLE                 0x8A19
+#define GL_VOLATILE_APPLE                 0x8A1A
+#define GL_RETAINED_APPLE                 0x8A1B
+#define GL_UNDEFINED_APPLE                0x8A1C
+#define GL_PURGEABLE_APPLE                0x8A1D
+#endif
+
+#ifndef GL_APPLE_row_bytes
+#define GL_PACK_ROW_BYTES_APPLE           0x8A15
+#define GL_UNPACK_ROW_BYTES_APPLE         0x8A16
+#endif
+
+#ifndef GL_APPLE_rgb_422
+#define GL_RGB_422_APPLE                  0x8A1F
+/* reuse GL_UNSIGNED_SHORT_8_8_APPLE */
+/* reuse GL_UNSIGNED_SHORT_8_8_REV_APPLE */
+#endif
+
+#ifndef GL_NV_video_capture
+#define GL_VIDEO_BUFFER_NV                0x9020
+#define GL_VIDEO_BUFFER_BINDING_NV        0x9021
+#define GL_FIELD_UPPER_NV                 0x9022
+#define GL_FIELD_LOWER_NV                 0x9023
+#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV   0x9024
+#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
+#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
+#define GL_LAST_VIDEO_CAPTURE_STATUS_NV   0x9027
+#define GL_VIDEO_BUFFER_PITCH_NV          0x9028
+#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
+#define GL_VIDEO_COLOR_CONVERSION_MAX_NV  0x902A
+#define GL_VIDEO_COLOR_CONVERSION_MIN_NV  0x902B
+#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
+#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
+#define GL_PARTIAL_SUCCESS_NV             0x902E
+#define GL_SUCCESS_NV                     0x902F
+#define GL_FAILURE_NV                     0x9030
+#define GL_YCBYCR8_422_NV                 0x9031
+#define GL_YCBAYCR8A_4224_NV              0x9032
+#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV  0x9033
+#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
+#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV  0x9035
+#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
+#define GL_Z4Y12Z4CB12Z4CR12_444_NV       0x9037
+#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV   0x9038
+#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV  0x9039
+#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
+#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
+#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
+#endif
+
+#ifndef GL_NV_copy_image
+#endif
+
+#ifndef GL_EXT_separate_shader_objects
+#define GL_ACTIVE_PROGRAM_EXT             0x8B8D
+#endif
+
+#ifndef GL_NV_parameter_buffer_object2
+#endif
+
+#ifndef GL_NV_shader_buffer_load
+#define GL_BUFFER_GPU_ADDRESS_NV          0x8F1D
+#define GL_GPU_ADDRESS_NV                 0x8F34
+#define GL_MAX_SHADER_BUFFER_ADDRESS_NV   0x8F35
+#endif
+
+#ifndef GL_NV_vertex_buffer_unified_memory
+#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
+#define GL_ELEMENT_ARRAY_UNIFIED_NV       0x8F1F
+#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
+#define GL_VERTEX_ARRAY_ADDRESS_NV        0x8F21
+#define GL_NORMAL_ARRAY_ADDRESS_NV        0x8F22
+#define GL_COLOR_ARRAY_ADDRESS_NV         0x8F23
+#define GL_INDEX_ARRAY_ADDRESS_NV         0x8F24
+#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
+#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV     0x8F26
+#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
+#define GL_FOG_COORD_ARRAY_ADDRESS_NV     0x8F28
+#define GL_ELEMENT_ARRAY_ADDRESS_NV       0x8F29
+#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV  0x8F2A
+#define GL_VERTEX_ARRAY_LENGTH_NV         0x8F2B
+#define GL_NORMAL_ARRAY_LENGTH_NV         0x8F2C
+#define GL_COLOR_ARRAY_LENGTH_NV          0x8F2D
+#define GL_INDEX_ARRAY_LENGTH_NV          0x8F2E
+#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV  0x8F2F
+#define GL_EDGE_FLAG_ARRAY_LENGTH_NV      0x8F30
+#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
+#define GL_FOG_COORD_ARRAY_LENGTH_NV      0x8F32
+#define GL_ELEMENT_ARRAY_LENGTH_NV        0x8F33
+#endif
+
+#ifndef GL_NV_texture_barrier
+#endif
+
 
 /*************************************************************/
 
+#include <stddef.h>
+#ifndef GL_VERSION_2_0
+/* GL type for program/shader text */
+typedef char GLchar;
+#endif
+
+#ifndef GL_VERSION_1_5
+/* GL types for handling large vertex buffer objects */
+typedef ptrdiff_t GLintptr;
+typedef ptrdiff_t GLsizeiptr;
+#endif
+
+#ifndef GL_ARB_vertex_buffer_object
+/* GL types for handling large vertex buffer objects */
+typedef ptrdiff_t GLintptrARB;
+typedef ptrdiff_t GLsizeiptrARB;
+#endif
+
+#ifndef GL_ARB_shader_objects
+/* GL types for program/shader text and shader object handles */
+typedef char GLcharARB;
+typedef unsigned int GLhandleARB;
+#endif
+
+/* GL type for "half" precision (s10e5) float data in host memory */
+#ifndef GL_ARB_half_float_pixel
+typedef unsigned short GLhalfARB;
+#endif
+
+#ifndef GL_NV_half_float
+typedef unsigned short GLhalfNV;
+#endif
+
+#ifndef GLEXT_64_TYPES_DEFINED
+/* This code block is duplicated in glxext.h, so must be protected */
+#define GLEXT_64_TYPES_DEFINED
+/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
+/* (as used in the GL_EXT_timer_query extension). */
+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+#include <inttypes.h>
+#elif defined(__sun__) || defined(__digital__)
+#include <inttypes.h>
+#if defined(__STDC__)
+#if defined(__arch64__) || defined(_LP64)
+typedef long int int64_t;
+typedef unsigned long int uint64_t;
+#else
+typedef long long int int64_t;
+typedef unsigned long long int uint64_t;
+#endif /* __arch64__ */
+#endif /* __STDC__ */
+#elif defined( __VMS ) || defined(__sgi)
+#include <inttypes.h>
+#elif defined(__SCO__) || defined(__USLC__)
+#include <stdint.h>
+#elif defined(__UNIXOS2__) || defined(__SOL64__)
+typedef long int int32_t;
+typedef long long int int64_t;
+typedef unsigned long long int uint64_t;
+#elif defined(_WIN32) && defined(__GNUC__)
+#include <stdint.h>
+#elif defined(_WIN32)
+typedef __int32 int32_t;
+typedef __int64 int64_t;
+typedef unsigned __int64 uint64_t;
+#else
+/* Fallback if nothing above works */
+#include <inttypes.h>
+#endif
+#endif
+
+#ifndef GL_EXT_timer_query
+typedef int64_t GLint64EXT;
+typedef uint64_t GLuint64EXT;
+#endif
+
+#ifndef ARB_sync
+typedef int64_t GLint64;
+typedef uint64_t GLuint64;
+typedef struct __GLsync *GLsync;
+#endif
+
 #ifndef GL_VERSION_1_2
 #define GL_VERSION_1_2 1
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glBlendColor (GLclampf, GLclampf, GLclampf, GLclampf);
 GLAPI void APIENTRY glBlendEquation (GLenum);
 GLAPI void APIENTRY glDrawRangeElements (GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTexImage3D (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTexSubImage3D (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glCopyTexSubImage3D (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+#endif
+
+#ifndef GL_VERSION_1_2_DEPRECATED
+#define GL_VERSION_1_2_DEPRECATED 1
+#ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glColorTable (GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
 GLAPI void APIENTRY glColorTableParameterfv (GLenum, GLenum, const GLfloat *);
 GLAPI void APIENTRY glColorTableParameteriv (GLenum, GLenum, const GLint *);
@@ -2667,54 +4531,68 @@ GLAPI void APIENTRY glHistogram (GLenum, GLsizei, GLenum, GLboolean);
 GLAPI void APIENTRY glMinmax (GLenum, GLenum, GLboolean);
 GLAPI void APIENTRY glResetHistogram (GLenum);
 GLAPI void APIENTRY glResetMinmax (GLenum);
-GLAPI void APIENTRY glTexImage3D (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
-GLAPI void APIENTRY glTexSubImage3D (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
-GLAPI void APIENTRY glCopyTexSubImage3D (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
-typedef void (APIENTRY * PFNGLBLENDEQUATIONPROC) (GLenum mode);
-typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
-typedef void (APIENTRY * PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
-typedef void (APIENTRY * PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
-typedef void (APIENTRY * PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
-typedef void (APIENTRY * PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (APIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
-typedef void (APIENTRY * PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
-typedef void (APIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
-typedef void (APIENTRY * PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
-typedef void (APIENTRY * PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
-typedef void (APIENTRY * PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
-typedef void (APIENTRY * PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
-typedef void (APIENTRY * PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
-typedef void (APIENTRY * PFNGLRESETHISTOGRAMPROC) (GLenum target);
-typedef void (APIENTRY * PFNGLRESETMINMAXPROC) (GLenum target);
-typedef void (APIENTRY * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-typedef void (APIENTRY * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
-typedef void (APIENTRY * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
+typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
+typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
+typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
+typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+typedef void (APIENTRYP PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
+typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLRESETMINMAXPROC) (GLenum target);
 #endif
 
 #ifndef GL_VERSION_1_3
 #define GL_VERSION_1_3 1
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glActiveTexture (GLenum);
+GLAPI void APIENTRY glSampleCoverage (GLclampf, GLboolean);
+GLAPI void APIENTRY glCompressedTexImage3D (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTexImage2D (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTexImage1D (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glGetCompressedTexImage (GLenum, GLint, GLvoid *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);
+typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);
+#endif
+
+#ifndef GL_VERSION_1_3_DEPRECATED
+#define GL_VERSION_1_3_DEPRECATED 1
+#ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glClientActiveTexture (GLenum);
 GLAPI void APIENTRY glMultiTexCoord1d (GLenum, GLdouble);
 GLAPI void APIENTRY glMultiTexCoord1dv (GLenum, const GLdouble *);
@@ -2752,78 +4630,74 @@ GLAPI void APIENTRY glLoadTransposeMatrixf (const GLfloat *);
 GLAPI void APIENTRY glLoadTransposeMatrixd (const GLdouble *);
 GLAPI void APIENTRY glMultTransposeMatrixf (const GLfloat *);
 GLAPI void APIENTRY glMultTransposeMatrixd (const GLdouble *);
-GLAPI void APIENTRY glSampleCoverage (GLclampf, GLboolean);
-GLAPI void APIENTRY glCompressedTexImage3D (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
-GLAPI void APIENTRY glCompressedTexImage2D (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
-GLAPI void APIENTRY glCompressedTexImage1D (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
-GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
-GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
-GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
-GLAPI void APIENTRY glGetCompressedTexImage (GLenum, GLint, GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLACTIVETEXTUREPROC) (GLenum texture);
-typedef void (APIENTRY * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
-typedef void (APIENTRY * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);
-typedef void (APIENTRY * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);
-typedef void (APIENTRY * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m);
-typedef void (APIENTRY * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m);
-typedef void (APIENTRY * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);
+typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);
+typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);
+typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m);
+typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m);
 #endif
 
 #ifndef GL_VERSION_1_4
 #define GL_VERSION_1_4 1
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glBlendFuncSeparate (GLenum, GLenum, GLenum, GLenum);
-GLAPI void APIENTRY glFogCoordf (GLfloat);
-GLAPI void APIENTRY glFogCoordfv (const GLfloat *);
-GLAPI void APIENTRY glFogCoordd (GLdouble);
-GLAPI void APIENTRY glFogCoorddv (const GLdouble *);
-GLAPI void APIENTRY glFogCoordPointer (GLenum, GLsizei, const GLvoid *);
 GLAPI void APIENTRY glMultiDrawArrays (GLenum, GLint *, GLsizei *, GLsizei);
 GLAPI void APIENTRY glMultiDrawElements (GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei);
 GLAPI void APIENTRY glPointParameterf (GLenum, GLfloat);
 GLAPI void APIENTRY glPointParameterfv (GLenum, const GLfloat *);
 GLAPI void APIENTRY glPointParameteri (GLenum, GLint);
 GLAPI void APIENTRY glPointParameteriv (GLenum, const GLint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
+typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
+#endif
+
+#ifndef GL_VERSION_1_4_DEPRECATED
+#define GL_VERSION_1_4_DEPRECATED 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glFogCoordf (GLfloat);
+GLAPI void APIENTRY glFogCoordfv (const GLfloat *);
+GLAPI void APIENTRY glFogCoordd (GLdouble);
+GLAPI void APIENTRY glFogCoorddv (const GLdouble *);
+GLAPI void APIENTRY glFogCoordPointer (GLenum, GLsizei, const GLvoid *);
 GLAPI void APIENTRY glSecondaryColor3b (GLbyte, GLbyte, GLbyte);
 GLAPI void APIENTRY glSecondaryColor3bv (const GLbyte *);
 GLAPI void APIENTRY glSecondaryColor3d (GLdouble, GLdouble, GLdouble);
@@ -2858,51 +4732,462 @@ GLAPI void APIENTRY glWindowPos3iv (const GLint *);
 GLAPI void APIENTRY glWindowPos3s (GLshort, GLshort, GLshort);
 GLAPI void APIENTRY glWindowPos3sv (const GLshort *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
-typedef void (APIENTRY * PFNGLFOGCOORDFPROC) (GLfloat coord);
-typedef void (APIENTRY * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
-typedef void (APIENTRY * PFNGLFOGCOORDDPROC) (GLdouble coord);
-typedef void (APIENTRY * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
-typedef void (APIENTRY * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
-typedef void (APIENTRY * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2IVPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3IVPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3SVPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLFOGCOORDFPROC) (GLfloat coord);
+typedef void (APIENTRYP PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
+typedef void (APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord);
+typedef void (APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
+typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC) (const GLshort *v);
+#endif
+
+#ifndef GL_VERSION_1_5
+#define GL_VERSION_1_5 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGenQueries (GLsizei, GLuint *);
+GLAPI void APIENTRY glDeleteQueries (GLsizei, const GLuint *);
+GLAPI GLboolean APIENTRY glIsQuery (GLuint);
+GLAPI void APIENTRY glBeginQuery (GLenum, GLuint);
+GLAPI void APIENTRY glEndQuery (GLenum);
+GLAPI void APIENTRY glGetQueryiv (GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetQueryObjectiv (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetQueryObjectuiv (GLuint, GLenum, GLuint *);
+GLAPI void APIENTRY glBindBuffer (GLenum, GLuint);
+GLAPI void APIENTRY glDeleteBuffers (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenBuffers (GLsizei, GLuint *);
+GLAPI GLboolean APIENTRY glIsBuffer (GLuint);
+GLAPI void APIENTRY glBufferData (GLenum, GLsizeiptr, const GLvoid *, GLenum);
+GLAPI void APIENTRY glBufferSubData (GLenum, GLintptr, GLsizeiptr, const GLvoid *);
+GLAPI void APIENTRY glGetBufferSubData (GLenum, GLintptr, GLsizeiptr, GLvoid *);
+GLAPI GLvoid* APIENTRY glMapBuffer (GLenum, GLenum);
+GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum);
+GLAPI void APIENTRY glGetBufferParameteriv (GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetBufferPointerv (GLenum, GLenum, GLvoid* *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
+typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
+typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
+typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
+typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
+typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
+typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);
+typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
+typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
+typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
+typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
+typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *params);
+#endif
+
+#ifndef GL_VERSION_2_0
+#define GL_VERSION_2_0 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBlendEquationSeparate (GLenum, GLenum);
+GLAPI void APIENTRY glDrawBuffers (GLsizei, const GLenum *);
+GLAPI void APIENTRY glStencilOpSeparate (GLenum, GLenum, GLenum, GLenum);
+GLAPI void APIENTRY glStencilFuncSeparate (GLenum, GLenum, GLint, GLuint);
+GLAPI void APIENTRY glStencilMaskSeparate (GLenum, GLuint);
+GLAPI void APIENTRY glAttachShader (GLuint, GLuint);
+GLAPI void APIENTRY glBindAttribLocation (GLuint, GLuint, const GLchar *);
+GLAPI void APIENTRY glCompileShader (GLuint);
+GLAPI GLuint APIENTRY glCreateProgram (void);
+GLAPI GLuint APIENTRY glCreateShader (GLenum);
+GLAPI void APIENTRY glDeleteProgram (GLuint);
+GLAPI void APIENTRY glDeleteShader (GLuint);
+GLAPI void APIENTRY glDetachShader (GLuint, GLuint);
+GLAPI void APIENTRY glDisableVertexAttribArray (GLuint);
+GLAPI void APIENTRY glEnableVertexAttribArray (GLuint);
+GLAPI void APIENTRY glGetActiveAttrib (GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
+GLAPI void APIENTRY glGetActiveUniform (GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
+GLAPI void APIENTRY glGetAttachedShaders (GLuint, GLsizei, GLsizei *, GLuint *);
+GLAPI GLint APIENTRY glGetAttribLocation (GLuint, const GLchar *);
+GLAPI void APIENTRY glGetProgramiv (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetProgramInfoLog (GLuint, GLsizei, GLsizei *, GLchar *);
+GLAPI void APIENTRY glGetShaderiv (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetShaderInfoLog (GLuint, GLsizei, GLsizei *, GLchar *);
+GLAPI void APIENTRY glGetShaderSource (GLuint, GLsizei, GLsizei *, GLchar *);
+GLAPI GLint APIENTRY glGetUniformLocation (GLuint, const GLchar *);
+GLAPI void APIENTRY glGetUniformfv (GLuint, GLint, GLfloat *);
+GLAPI void APIENTRY glGetUniformiv (GLuint, GLint, GLint *);
+GLAPI void APIENTRY glGetVertexAttribdv (GLuint, GLenum, GLdouble *);
+GLAPI void APIENTRY glGetVertexAttribfv (GLuint, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetVertexAttribiv (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint, GLenum, GLvoid* *);
+GLAPI GLboolean APIENTRY glIsProgram (GLuint);
+GLAPI GLboolean APIENTRY glIsShader (GLuint);
+GLAPI void APIENTRY glLinkProgram (GLuint);
+GLAPI void APIENTRY glShaderSource (GLuint, GLsizei, const GLchar* *, const GLint *);
+GLAPI void APIENTRY glUseProgram (GLuint);
+GLAPI void APIENTRY glUniform1f (GLint, GLfloat);
+GLAPI void APIENTRY glUniform2f (GLint, GLfloat, GLfloat);
+GLAPI void APIENTRY glUniform3f (GLint, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glUniform4f (GLint, GLfloat, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glUniform1i (GLint, GLint);
+GLAPI void APIENTRY glUniform2i (GLint, GLint, GLint);
+GLAPI void APIENTRY glUniform3i (GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glUniform4i (GLint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glUniform1fv (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform2fv (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform3fv (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform4fv (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform1iv (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniform2iv (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniform3iv (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniform4iv (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniformMatrix2fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix3fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix4fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glValidateProgram (GLuint);
+GLAPI void APIENTRY glVertexAttrib1d (GLuint, GLdouble);
+GLAPI void APIENTRY glVertexAttrib1dv (GLuint, const GLdouble *);
+GLAPI void APIENTRY glVertexAttrib1f (GLuint, GLfloat);
+GLAPI void APIENTRY glVertexAttrib1fv (GLuint, const GLfloat *);
+GLAPI void APIENTRY glVertexAttrib1s (GLuint, GLshort);
+GLAPI void APIENTRY glVertexAttrib1sv (GLuint, const GLshort *);
+GLAPI void APIENTRY glVertexAttrib2d (GLuint, GLdouble, GLdouble);
+GLAPI void APIENTRY glVertexAttrib2dv (GLuint, const GLdouble *);
+GLAPI void APIENTRY glVertexAttrib2f (GLuint, GLfloat, GLfloat);
+GLAPI void APIENTRY glVertexAttrib2fv (GLuint, const GLfloat *);
+GLAPI void APIENTRY glVertexAttrib2s (GLuint, GLshort, GLshort);
+GLAPI void APIENTRY glVertexAttrib2sv (GLuint, const GLshort *);
+GLAPI void APIENTRY glVertexAttrib3d (GLuint, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glVertexAttrib3dv (GLuint, const GLdouble *);
+GLAPI void APIENTRY glVertexAttrib3f (GLuint, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glVertexAttrib3fv (GLuint, const GLfloat *);
+GLAPI void APIENTRY glVertexAttrib3s (GLuint, GLshort, GLshort, GLshort);
+GLAPI void APIENTRY glVertexAttrib3sv (GLuint, const GLshort *);
+GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint, const GLbyte *);
+GLAPI void APIENTRY glVertexAttrib4Niv (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint, const GLshort *);
+GLAPI void APIENTRY glVertexAttrib4Nub (GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
+GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint, const GLubyte *);
+GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint, const GLushort *);
+GLAPI void APIENTRY glVertexAttrib4bv (GLuint, const GLbyte *);
+GLAPI void APIENTRY glVertexAttrib4d (GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glVertexAttrib4dv (GLuint, const GLdouble *);
+GLAPI void APIENTRY glVertexAttrib4f (GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glVertexAttrib4fv (GLuint, const GLfloat *);
+GLAPI void APIENTRY glVertexAttrib4iv (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttrib4s (GLuint, GLshort, GLshort, GLshort, GLshort);
+GLAPI void APIENTRY glVertexAttrib4sv (GLuint, const GLshort *);
+GLAPI void APIENTRY glVertexAttrib4ubv (GLuint, const GLubyte *);
+GLAPI void APIENTRY glVertexAttrib4uiv (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttrib4usv (GLuint, const GLushort *);
+GLAPI void APIENTRY glVertexAttribPointer (GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
+typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
+typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
+typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
+typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
+typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
+typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);
+typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);
+typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
+typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);
+typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
+typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
+typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
+typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
+typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
+typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
+typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
+typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
+typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
+typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
+typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
+typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);
+typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);
+typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
+typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
+typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);
+typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
+typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
+typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
+typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
+typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
+typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
+#endif
+
+#ifndef GL_VERSION_2_1
+#define GL_VERSION_2_1 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glUniformMatrix2x3fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix3x2fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix2x4fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix4x2fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix3x4fv (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix4x3fv (GLint, GLsizei, GLboolean, const GLfloat *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+#endif
+
+#ifndef GL_VERSION_3_0
+#define GL_VERSION_3_0 1
+/* OpenGL 3.0 also reuses entry points from these extensions: */
+/* ARB_framebuffer_object */
+/* ARB_map_buffer_range */
+/* ARB_vertex_array_object */
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glColorMaski (GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
+GLAPI void APIENTRY glGetBooleani_v (GLenum, GLuint, GLboolean *);
+GLAPI void APIENTRY glGetIntegeri_v (GLenum, GLuint, GLint *);
+GLAPI void APIENTRY glEnablei (GLenum, GLuint);
+GLAPI void APIENTRY glDisablei (GLenum, GLuint);
+GLAPI GLboolean APIENTRY glIsEnabledi (GLenum, GLuint);
+GLAPI void APIENTRY glBeginTransformFeedback (GLenum);
+GLAPI void APIENTRY glEndTransformFeedback (void);
+GLAPI void APIENTRY glBindBufferRange (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
+GLAPI void APIENTRY glBindBufferBase (GLenum, GLuint, GLuint);
+GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint, GLsizei, const GLchar* *, GLenum);
+GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
+GLAPI void APIENTRY glClampColor (GLenum, GLenum);
+GLAPI void APIENTRY glBeginConditionalRender (GLuint, GLenum);
+GLAPI void APIENTRY glEndConditionalRender (void);
+GLAPI void APIENTRY glVertexAttribIPointer (GLuint, GLint, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glGetVertexAttribIiv (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint, GLenum, GLuint *);
+GLAPI void APIENTRY glVertexAttribI1i (GLuint, GLint);
+GLAPI void APIENTRY glVertexAttribI2i (GLuint, GLint, GLint);
+GLAPI void APIENTRY glVertexAttribI3i (GLuint, GLint, GLint, GLint);
+GLAPI void APIENTRY glVertexAttribI4i (GLuint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glVertexAttribI1ui (GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI2ui (GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI3ui (GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI4ui (GLuint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI1iv (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI2iv (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI3iv (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI4iv (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI1uiv (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI2uiv (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI3uiv (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI4uiv (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI4bv (GLuint, const GLbyte *);
+GLAPI void APIENTRY glVertexAttribI4sv (GLuint, const GLshort *);
+GLAPI void APIENTRY glVertexAttribI4ubv (GLuint, const GLubyte *);
+GLAPI void APIENTRY glVertexAttribI4usv (GLuint, const GLushort *);
+GLAPI void APIENTRY glGetUniformuiv (GLuint, GLint, GLuint *);
+GLAPI void APIENTRY glBindFragDataLocation (GLuint, GLuint, const GLchar *);
+GLAPI GLint APIENTRY glGetFragDataLocation (GLuint, const GLchar *);
+GLAPI void APIENTRY glUniform1ui (GLint, GLuint);
+GLAPI void APIENTRY glUniform2ui (GLint, GLuint, GLuint);
+GLAPI void APIENTRY glUniform3ui (GLint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glUniform4ui (GLint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glUniform1uiv (GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glUniform2uiv (GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glUniform3uiv (GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glUniform4uiv (GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glTexParameterIiv (GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glTexParameterIuiv (GLenum, GLenum, const GLuint *);
+GLAPI void APIENTRY glGetTexParameterIiv (GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetTexParameterIuiv (GLenum, GLenum, GLuint *);
+GLAPI void APIENTRY glClearBufferiv (GLenum, GLint, const GLint *);
+GLAPI void APIENTRY glClearBufferuiv (GLenum, GLint, const GLuint *);
+GLAPI void APIENTRY glClearBufferfv (GLenum, GLint, const GLfloat *);
+GLAPI void APIENTRY glClearBufferfi (GLenum, GLint, GLfloat, GLint);
+GLAPI const GLubyte * APIENTRY glGetStringi (GLenum, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
+typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
+typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);
+typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);
+typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);
+typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
+typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);
+typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
+typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
+typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
+typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
+typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
+typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
+typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
+typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
+typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
+typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
+typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
+typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
+typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
+typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
+typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
+#endif
+
+#ifndef GL_VERSION_3_1
+#define GL_VERSION_3_1 1
+/* OpenGL 3.1 also reuses entry points from these extensions: */
+/* ARB_copy_buffer */
+/* ARB_uniform_buffer_object */
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glDrawArraysInstanced (GLenum, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glDrawElementsInstanced (GLenum, GLsizei, GLenum, const GLvoid *, GLsizei);
+GLAPI void APIENTRY glTexBuffer (GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);
+typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);
+#endif
+
+#ifndef GL_VERSION_3_2
+#define GL_VERSION_3_2 1
+/* OpenGL 3.2 also reuses entry points from these extensions: */
+/* ARB_draw_elements_base_vertex */
+/* ARB_provoking_vertex */
+/* ARB_sync */
+/* ARB_texture_multisample */
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetInteger64i_v (GLenum, GLuint, GLint64 *);
+GLAPI void APIENTRY glGetBufferParameteri64v (GLenum, GLenum, GLint64 *);
+GLAPI void APIENTRY glProgramParameteri (GLuint, GLenum, GLint);
+GLAPI void APIENTRY glFramebufferTexture (GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glFramebufferTextureFace (GLenum, GLenum, GLuint, GLint, GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
+typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
 #endif
 
 #ifndef GL_ARB_multitexture
@@ -2943,40 +5228,40 @@ GLAPI void APIENTRY glMultiTexCoord4ivARB (GLenum, const GLint *);
 GLAPI void APIENTRY glMultiTexCoord4sARB (GLenum, GLshort, GLshort, GLshort, GLshort);
 GLAPI void APIENTRY glMultiTexCoord4svARB (GLenum, const GLshort *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
-typedef void (APIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
+typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
 #endif
 
 #ifndef GL_ARB_transpose_matrix
@@ -2987,10 +5272,10 @@ GLAPI void APIENTRY glLoadTransposeMatrixdARB (const GLdouble *);
 GLAPI void APIENTRY glMultTransposeMatrixfARB (const GLfloat *);
 GLAPI void APIENTRY glMultTransposeMatrixdARB (const GLdouble *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
-typedef void (APIENTRY * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
-typedef void (APIENTRY * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
-typedef void (APIENTRY * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
+typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
+typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
+typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
+typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
 #endif
 
 #ifndef GL_ARB_multisample
@@ -2998,7 +5283,7 @@ typedef void (APIENTRY * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glSampleCoverageARB (GLclampf, GLboolean);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
+typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
 #endif
 
 #ifndef GL_ARB_texture_env_add
@@ -3020,13 +5305,13 @@ GLAPI void APIENTRY glCompressedTexSubImage2DARB (GLenum, GLint, GLint, GLint, G
 GLAPI void APIENTRY glCompressedTexSubImage1DARB (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
 GLAPI void APIENTRY glGetCompressedTexImageARB (GLenum, GLint, GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
-typedef void (APIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, GLvoid *img);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
+typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, GLvoid *img);
 #endif
 
 #ifndef GL_ARB_texture_border_clamp
@@ -3039,8 +5324,8 @@ typedef void (APIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLin
 GLAPI void APIENTRY glPointParameterfARB (GLenum, GLfloat);
 GLAPI void APIENTRY glPointParameterfvARB (GLenum, const GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
 #endif
 
 #ifndef GL_ARB_vertex_blend
@@ -3057,16 +5342,16 @@ GLAPI void APIENTRY glWeightuivARB (GLint, const GLuint *);
 GLAPI void APIENTRY glWeightPointerARB (GLint, GLenum, GLsizei, const GLvoid *);
 GLAPI void APIENTRY glVertexBlendARB (GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
-typedef void (APIENTRY * PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
-typedef void (APIENTRY * PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
-typedef void (APIENTRY * PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
-typedef void (APIENTRY * PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
-typedef void (APIENTRY * PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
-typedef void (APIENTRY * PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
-typedef void (APIENTRY * PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
-typedef void (APIENTRY * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLVERTEXBLENDARBPROC) (GLint count);
+typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
+typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
+typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
+typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
+typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
+typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
+typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
+typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
+typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count);
 #endif
 
 #ifndef GL_ARB_matrix_palette
@@ -3078,11 +5363,11 @@ GLAPI void APIENTRY glMatrixIndexusvARB (GLint, const GLushort *);
 GLAPI void APIENTRY glMatrixIndexuivARB (GLint, const GLuint *);
 GLAPI void APIENTRY glMatrixIndexPointerARB (GLint, GLenum, GLsizei, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
-typedef void (APIENTRY * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
-typedef void (APIENTRY * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
-typedef void (APIENTRY * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
-typedef void (APIENTRY * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
+typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
+typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
+typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
+typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif
 
 #ifndef GL_ARB_texture_env_combine
@@ -3133,22 +5418,22 @@ GLAPI void APIENTRY glWindowPos3ivARB (const GLint *);
 GLAPI void APIENTRY glWindowPos3sARB (GLshort, GLshort, GLshort);
 GLAPI void APIENTRY glWindowPos3svARB (const GLshort *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);
 #endif
 
 #ifndef GL_ARB_vertex_program
@@ -3217,68 +5502,68 @@ GLAPI void APIENTRY glGetVertexAttribivARB (GLuint, GLenum, GLint *);
 GLAPI void APIENTRY glGetVertexAttribPointervARB (GLuint, GLenum, GLvoid* *);
 GLAPI GLboolean APIENTRY glIsProgramARB (GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
-typedef void (APIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
-typedef void (APIENTRY * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
-typedef void (APIENTRY * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
-typedef void (APIENTRY * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
-typedef void (APIENTRY * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
-typedef void (APIENTRY * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
-typedef void (APIENTRY * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
-typedef void (APIENTRY * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
-typedef void (APIENTRY * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, GLvoid *string);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
-typedef GLboolean (APIENTRY * PFNGLISPROGRAMARBPROC) (GLuint program);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
+typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
+typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
+typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
+typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
+typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, GLvoid *string);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
+typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program);
 #endif
 
 #ifndef GL_ARB_fragment_program
@@ -3288,11 +5573,6 @@ typedef GLboolean (APIENTRY * PFNGLISPROGRAMARBPROC) (GLuint program);
 
 #ifndef GL_ARB_vertex_buffer_object
 #define GL_ARB_vertex_buffer_object 1
-/* GL types for handling large vertex buffer objects */
-/* Only used by this extension for now; later needs to be moved earlier in glext.h */
-#include <stddef.h>
-typedef ptrdiff_t GLintptrARB;
-typedef ptrdiff_t GLsizeiptrARB;
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glBindBufferARB (GLenum, GLuint);
 GLAPI void APIENTRY glDeleteBuffersARB (GLsizei, const GLuint *);
@@ -3306,121 +5586,563 @@ GLAPI GLboolean APIENTRY glUnmapBufferARB (GLenum);
 GLAPI void APIENTRY glGetBufferParameterivARB (GLenum, GLenum, GLint *);
 GLAPI void APIENTRY glGetBufferPointervARB (GLenum, GLenum, GLvoid* *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
-typedef void (APIENTRY * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
-typedef void (APIENTRY * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
-typedef GLboolean (APIENTRY * PFNGLISBUFFERARBPROC) (GLuint buffer);
-typedef void (APIENTRY * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
-typedef void (APIENTRY * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
-typedef void (APIENTRY * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
-typedef GLvoid* (APIENTRY * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
-typedef GLboolean (APIENTRY * PFNGLUNMAPBUFFERARBPROC) (GLenum target);
-typedef void (APIENTRY * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid* *params);
+typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
+typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
+typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
+typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer);
+typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
+typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
+typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
+typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
+typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid* *params);
+#endif
+
+#ifndef GL_ARB_occlusion_query
+#define GL_ARB_occlusion_query 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGenQueriesARB (GLsizei, GLuint *);
+GLAPI void APIENTRY glDeleteQueriesARB (GLsizei, const GLuint *);
+GLAPI GLboolean APIENTRY glIsQueryARB (GLuint);
+GLAPI void APIENTRY glBeginQueryARB (GLenum, GLuint);
+GLAPI void APIENTRY glEndQueryARB (GLenum);
+GLAPI void APIENTRY glGetQueryivARB (GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetQueryObjectivARB (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetQueryObjectuivARB (GLuint, GLenum, GLuint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);
+typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);
+typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
+typedef void (APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);
+#endif
+
+#ifndef GL_ARB_shader_objects
+#define GL_ARB_shader_objects 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glDeleteObjectARB (GLhandleARB);
+GLAPI GLhandleARB APIENTRY glGetHandleARB (GLenum);
+GLAPI void APIENTRY glDetachObjectARB (GLhandleARB, GLhandleARB);
+GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB (GLenum);
+GLAPI void APIENTRY glShaderSourceARB (GLhandleARB, GLsizei, const GLcharARB* *, const GLint *);
+GLAPI void APIENTRY glCompileShaderARB (GLhandleARB);
+GLAPI GLhandleARB APIENTRY glCreateProgramObjectARB (void);
+GLAPI void APIENTRY glAttachObjectARB (GLhandleARB, GLhandleARB);
+GLAPI void APIENTRY glLinkProgramARB (GLhandleARB);
+GLAPI void APIENTRY glUseProgramObjectARB (GLhandleARB);
+GLAPI void APIENTRY glValidateProgramARB (GLhandleARB);
+GLAPI void APIENTRY glUniform1fARB (GLint, GLfloat);
+GLAPI void APIENTRY glUniform2fARB (GLint, GLfloat, GLfloat);
+GLAPI void APIENTRY glUniform3fARB (GLint, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glUniform4fARB (GLint, GLfloat, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glUniform1iARB (GLint, GLint);
+GLAPI void APIENTRY glUniform2iARB (GLint, GLint, GLint);
+GLAPI void APIENTRY glUniform3iARB (GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glUniform4iARB (GLint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glUniform1fvARB (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform2fvARB (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform3fvARB (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform4fvARB (GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glUniform1ivARB (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniform2ivARB (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniform3ivARB (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniform4ivARB (GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glUniformMatrix2fvARB (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix3fvARB (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glUniformMatrix4fvARB (GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glGetObjectParameterfvARB (GLhandleARB, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetObjectParameterivARB (GLhandleARB, GLenum, GLint *);
+GLAPI void APIENTRY glGetInfoLogARB (GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
+GLAPI void APIENTRY glGetAttachedObjectsARB (GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
+GLAPI GLint APIENTRY glGetUniformLocationARB (GLhandleARB, const GLcharARB *);
+GLAPI void APIENTRY glGetActiveUniformARB (GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
+GLAPI void APIENTRY glGetUniformfvARB (GLhandleARB, GLint, GLfloat *);
+GLAPI void APIENTRY glGetUniformivARB (GLhandleARB, GLint, GLint *);
+GLAPI void APIENTRY glGetShaderSourceARB (GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
+typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname);
+typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
+typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
+typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
+typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
+typedef GLhandleARB (APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
+typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
+typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
+typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
+typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
+typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
+typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
+typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
+typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
+typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
+typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
+typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
+typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
+typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
+typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
+typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
+#endif
+
+#ifndef GL_ARB_vertex_shader
+#define GL_ARB_vertex_shader 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBindAttribLocationARB (GLhandleARB, GLuint, const GLcharARB *);
+GLAPI void APIENTRY glGetActiveAttribARB (GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
+GLAPI GLint APIENTRY glGetAttribLocationARB (GLhandleARB, const GLcharARB *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
+typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
+typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
 #endif
 
-#ifndef GL_EXT_abgr
-#define GL_EXT_abgr 1
+#ifndef GL_ARB_fragment_shader
+#define GL_ARB_fragment_shader 1
 #endif
 
-#ifndef GL_EXT_blend_color
-#define GL_EXT_blend_color 1
+#ifndef GL_ARB_shading_language_100
+#define GL_ARB_shading_language_100 1
+#endif
+
+#ifndef GL_ARB_texture_non_power_of_two
+#define GL_ARB_texture_non_power_of_two 1
+#endif
+
+#ifndef GL_ARB_point_sprite
+#define GL_ARB_point_sprite 1
+#endif
+
+#ifndef GL_ARB_fragment_program_shadow
+#define GL_ARB_fragment_program_shadow 1
+#endif
+
+#ifndef GL_ARB_draw_buffers
+#define GL_ARB_draw_buffers 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glBlendColorEXT (GLclampf, GLclampf, GLclampf, GLclampf);
+GLAPI void APIENTRY glDrawBuffersARB (GLsizei, const GLenum *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);
 #endif
 
-#ifndef GL_EXT_polygon_offset
-#define GL_EXT_polygon_offset 1
+#ifndef GL_ARB_texture_rectangle
+#define GL_ARB_texture_rectangle 1
+#endif
+
+#ifndef GL_ARB_color_buffer_float
+#define GL_ARB_color_buffer_float 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glPolygonOffsetEXT (GLfloat, GLfloat);
+GLAPI void APIENTRY glClampColorARB (GLenum, GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
+typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
 #endif
 
-#ifndef GL_EXT_texture
-#define GL_EXT_texture 1
+#ifndef GL_ARB_half_float_pixel
+#define GL_ARB_half_float_pixel 1
 #endif
 
-#ifndef GL_EXT_texture3D
-#define GL_EXT_texture3D 1
+#ifndef GL_ARB_texture_float
+#define GL_ARB_texture_float 1
+#endif
+
+#ifndef GL_ARB_pixel_buffer_object
+#define GL_ARB_pixel_buffer_object 1
+#endif
+
+#ifndef GL_ARB_depth_buffer_float
+#define GL_ARB_depth_buffer_float 1
+#endif
+
+#ifndef GL_ARB_draw_instanced
+#define GL_ARB_draw_instanced 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glTexImage3DEXT (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
-GLAPI void APIENTRY glTexSubImage3DEXT (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum, GLsizei, GLenum, const GLvoid *, GLsizei);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-typedef void (APIENTRY * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
+typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
 #endif
 
-#ifndef GL_SGIS_texture_filter4
-#define GL_SGIS_texture_filter4 1
+#ifndef GL_ARB_framebuffer_object
+#define GL_ARB_framebuffer_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glGetTexFilterFuncSGIS (GLenum, GLenum, GLfloat *);
-GLAPI void APIENTRY glTexFilterFuncSGIS (GLenum, GLenum, GLsizei, const GLfloat *);
+GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint);
+GLAPI void APIENTRY glBindRenderbuffer (GLenum, GLuint);
+GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenRenderbuffers (GLsizei, GLuint *);
+GLAPI void APIENTRY glRenderbufferStorage (GLenum, GLenum, GLsizei, GLsizei);
+GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum, GLenum, GLint *);
+GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint);
+GLAPI void APIENTRY glBindFramebuffer (GLenum, GLuint);
+GLAPI void APIENTRY glDeleteFramebuffers (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenFramebuffers (GLsizei, GLuint *);
+GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum);
+GLAPI void APIENTRY glFramebufferTexture1D (GLenum, GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glFramebufferTexture2D (GLenum, GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glFramebufferTexture3D (GLenum, GLenum, GLenum, GLuint, GLint, GLint);
+GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum, GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGenerateMipmap (GLenum);
+GLAPI void APIENTRY glBlitFramebuffer (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
+GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum, GLsizei, GLenum, GLsizei, GLsizei);
+GLAPI void APIENTRY glFramebufferTextureLayer (GLenum, GLenum, GLuint, GLint, GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
-typedef void (APIENTRY * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
+typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
+typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
+typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
+typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
+typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
+typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
+typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+#endif
+
+#ifndef GL_ARB_framebuffer_sRGB
+#define GL_ARB_framebuffer_sRGB 1
+#endif
+
+#ifndef GL_ARB_geometry_shader4
+#define GL_ARB_geometry_shader4 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProgramParameteriARB (GLuint, GLenum, GLint);
+GLAPI void APIENTRY glFramebufferTextureARB (GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum, GLenum, GLuint, GLint, GLint);
+GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum, GLenum, GLuint, GLint, GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
 #endif
 
-#ifndef GL_EXT_subtexture
-#define GL_EXT_subtexture 1
+#ifndef GL_ARB_half_float_vertex
+#define GL_ARB_half_float_vertex 1
+#endif
+
+#ifndef GL_ARB_instanced_arrays
+#define GL_ARB_instanced_arrays 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glTexSubImage1DEXT (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
-GLAPI void APIENTRY glTexSubImage2DEXT (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glVertexAttribDivisorARB (GLuint, GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
-typedef void (APIENTRY * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
 #endif
 
-#ifndef GL_EXT_copy_texture
-#define GL_EXT_copy_texture 1
+#ifndef GL_ARB_map_buffer_range
+#define GL_ARB_map_buffer_range 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glCopyTexImage1DEXT (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
-GLAPI void APIENTRY glCopyTexImage2DEXT (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
-GLAPI void APIENTRY glCopyTexSubImage1DEXT (GLenum, GLint, GLint, GLint, GLint, GLsizei);
-GLAPI void APIENTRY glCopyTexSubImage2DEXT (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
-GLAPI void APIENTRY glCopyTexSubImage3DEXT (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+GLAPI GLvoid* APIENTRY glMapBufferRange (GLenum, GLintptr, GLsizeiptr, GLbitfield);
+GLAPI void APIENTRY glFlushMappedBufferRange (GLenum, GLintptr, GLsizeiptr);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
-typedef void (APIENTRY * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
-typedef void (APIENTRY * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
-typedef void (APIENTRY * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
-typedef void (APIENTRY * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
+typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
 #endif
 
-#ifndef GL_EXT_histogram
-#define GL_EXT_histogram 1
+#ifndef GL_ARB_texture_buffer_object
+#define GL_ARB_texture_buffer_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glGetHistogramEXT (GLenum, GLboolean, GLenum, GLenum, GLvoid *);
-GLAPI void APIENTRY glGetHistogramParameterfvEXT (GLenum, GLenum, GLfloat *);
-GLAPI void APIENTRY glGetHistogramParameterivEXT (GLenum, GLenum, GLint *);
-GLAPI void APIENTRY glGetMinmaxEXT (GLenum, GLboolean, GLenum, GLenum, GLvoid *);
-GLAPI void APIENTRY glGetMinmaxParameterfvEXT (GLenum, GLenum, GLfloat *);
-GLAPI void APIENTRY glGetMinmaxParameterivEXT (GLenum, GLenum, GLint *);
-GLAPI void APIENTRY glHistogramEXT (GLenum, GLsizei, GLenum, GLboolean);
-GLAPI void APIENTRY glMinmaxEXT (GLenum, GLenum, GLboolean);
-GLAPI void APIENTRY glResetHistogramEXT (GLenum);
-GLAPI void APIENTRY glResetMinmaxEXT (GLenum);
+GLAPI void APIENTRY glTexBufferARB (GLenum, GLenum, GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
-typedef void (APIENTRY * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
-typedef void (APIENTRY * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
-typedef void (APIENTRY * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
-typedef void (APIENTRY * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
-typedef void (APIENTRY * PFNGLRESETMINMAXEXTPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
 #endif
 
-#ifndef GL_EXT_convolution
-#define GL_EXT_convolution 1
+#ifndef GL_ARB_texture_compression_rgtc
+#define GL_ARB_texture_compression_rgtc 1
+#endif
+
+#ifndef GL_ARB_texture_rg
+#define GL_ARB_texture_rg 1
+#endif
+
+#ifndef GL_ARB_vertex_array_object
+#define GL_ARB_vertex_array_object 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glConvolutionFilter1DEXT (GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
-GLAPI void APIENTRY glConvolutionFilter2DEXT (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
-GLAPI void APIENTRY glConvolutionParameterfEXT (GLenum, GLenum, GLfloat);
+GLAPI void APIENTRY glBindVertexArray (GLuint);
+GLAPI void APIENTRY glDeleteVertexArrays (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenVertexArrays (GLsizei, GLuint *);
+GLAPI GLboolean APIENTRY glIsVertexArray (GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);
+typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
+typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
+typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);
+#endif
+
+#ifndef GL_ARB_uniform_buffer_object
+#define GL_ARB_uniform_buffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetUniformIndices (GLuint, GLsizei, const GLchar* *, GLuint *);
+GLAPI void APIENTRY glGetActiveUniformsiv (GLuint, GLsizei, const GLuint *, GLenum, GLint *);
+GLAPI void APIENTRY glGetActiveUniformName (GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
+GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint, const GLchar *);
+GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint, GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
+GLAPI void APIENTRY glUniformBlockBinding (GLuint, GLuint, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
+typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
+typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
+typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
+typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
+#endif
+
+#ifndef GL_ARB_compatibility
+#define GL_ARB_compatibility 1
+#endif
+
+#ifndef GL_ARB_copy_buffer
+#define GL_ARB_copy_buffer 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glCopyBufferSubData (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
+#endif
+
+#ifndef GL_ARB_shader_texture_lod
+#define GL_ARB_shader_texture_lod 1
+#endif
+
+#ifndef GL_ARB_depth_clamp
+#define GL_ARB_depth_clamp 1
+#endif
+
+#ifndef GL_ARB_draw_elements_base_vertex
+#define GL_ARB_draw_elements_base_vertex 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum, GLsizei, GLenum, const GLvoid *, GLint);
+GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *, GLint);
+GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum, GLsizei, GLenum, const GLvoid *, GLsizei, GLint);
+GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei, const GLint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
+typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
+typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
+#endif
+
+#ifndef GL_ARB_fragment_coord_conventions
+#define GL_ARB_fragment_coord_conventions 1
+#endif
+
+#ifndef GL_ARB_provoking_vertex
+#define GL_ARB_provoking_vertex 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProvokingVertex (GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
+#endif
+
+#ifndef GL_ARB_seamless_cube_map
+#define GL_ARB_seamless_cube_map 1
+#endif
+
+#ifndef GL_ARB_sync
+#define GL_ARB_sync 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI GLsync APIENTRY glFenceSync (GLenum, GLbitfield);
+GLAPI GLboolean APIENTRY glIsSync (GLsync);
+GLAPI void APIENTRY glDeleteSync (GLsync);
+GLAPI GLenum APIENTRY glClientWaitSync (GLsync, GLbitfield, GLuint64);
+GLAPI void APIENTRY glWaitSync (GLsync, GLbitfield, GLuint64);
+GLAPI void APIENTRY glGetInteger64v (GLenum, GLint64 *);
+GLAPI void APIENTRY glGetSynciv (GLsync, GLenum, GLsizei, GLsizei *, GLint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);
+typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);
+typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);
+typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
+typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
+typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *params);
+typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
+#endif
+
+#ifndef GL_ARB_texture_multisample
+#define GL_ARB_texture_multisample 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTexImage2DMultisample (GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
+GLAPI void APIENTRY glTexImage3DMultisample (GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
+GLAPI void APIENTRY glGetMultisamplefv (GLenum, GLuint, GLfloat *);
+GLAPI void APIENTRY glSampleMaski (GLuint, GLbitfield);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
+typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
+typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
+typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);
+#endif
+
+#ifndef GL_ARB_vertex_array_bgra
+#define GL_ARB_vertex_array_bgra 1
+#endif
+
+#ifndef GL_ARB_draw_buffers_blend
+#define GL_ARB_draw_buffers_blend 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBlendEquationi (GLuint, GLenum);
+GLAPI void APIENTRY glBlendEquationSeparatei (GLuint, GLenum, GLenum);
+GLAPI void APIENTRY glBlendFunci (GLuint, GLenum, GLenum);
+GLAPI void APIENTRY glBlendFuncSeparatei (GLuint, GLenum, GLenum, GLenum, GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
+typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
+typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+#endif
+
+#ifndef GL_ARB_sample_shading
+#define GL_ARB_sample_shading 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glMinSampleShading (GLclampf);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLclampf value);
+#endif
+
+#ifndef GL_ARB_texture_cube_map_array
+#define GL_ARB_texture_cube_map_array 1
+#endif
+
+#ifndef GL_ARB_texture_gather
+#define GL_ARB_texture_gather 1
+#endif
+
+#ifndef GL_ARB_texture_query_lod
+#define GL_ARB_texture_query_lod 1
+#endif
+
+#ifndef GL_EXT_abgr
+#define GL_EXT_abgr 1
+#endif
+
+#ifndef GL_EXT_blend_color
+#define GL_EXT_blend_color 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBlendColorEXT (GLclampf, GLclampf, GLclampf, GLclampf);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
+#endif
+
+#ifndef GL_EXT_polygon_offset
+#define GL_EXT_polygon_offset 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glPolygonOffsetEXT (GLfloat, GLfloat);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
+#endif
+
+#ifndef GL_EXT_texture
+#define GL_EXT_texture 1
+#endif
+
+#ifndef GL_EXT_texture3D
+#define GL_EXT_texture3D 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTexImage3DEXT (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTexSubImage3DEXT (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+#endif
+
+#ifndef GL_SGIS_texture_filter4
+#define GL_SGIS_texture_filter4 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetTexFilterFuncSGIS (GLenum, GLenum, GLfloat *);
+GLAPI void APIENTRY glTexFilterFuncSGIS (GLenum, GLenum, GLsizei, const GLfloat *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
+typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
+#endif
+
+#ifndef GL_EXT_subtexture
+#define GL_EXT_subtexture 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTexSubImage1DEXT (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTexSubImage2DEXT (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+#endif
+
+#ifndef GL_EXT_copy_texture
+#define GL_EXT_copy_texture 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glCopyTexImage1DEXT (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
+GLAPI void APIENTRY glCopyTexImage2DEXT (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
+GLAPI void APIENTRY glCopyTexSubImage1DEXT (GLenum, GLint, GLint, GLint, GLint, GLsizei);
+GLAPI void APIENTRY glCopyTexSubImage2DEXT (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glCopyTexSubImage3DEXT (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+#endif
+
+#ifndef GL_EXT_histogram
+#define GL_EXT_histogram 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetHistogramEXT (GLenum, GLboolean, GLenum, GLenum, GLvoid *);
+GLAPI void APIENTRY glGetHistogramParameterfvEXT (GLenum, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetHistogramParameterivEXT (GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetMinmaxEXT (GLenum, GLboolean, GLenum, GLenum, GLvoid *);
+GLAPI void APIENTRY glGetMinmaxParameterfvEXT (GLenum, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetMinmaxParameterivEXT (GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glHistogramEXT (GLenum, GLsizei, GLenum, GLboolean);
+GLAPI void APIENTRY glMinmaxEXT (GLenum, GLenum, GLboolean);
+GLAPI void APIENTRY glResetHistogramEXT (GLenum);
+GLAPI void APIENTRY glResetMinmaxEXT (GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
+typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
+typedef void (APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
+typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target);
+#endif
+
+#ifndef GL_EXT_convolution
+#define GL_EXT_convolution 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glConvolutionFilter1DEXT (GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glConvolutionFilter2DEXT (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glConvolutionParameterfEXT (GLenum, GLenum, GLfloat);
 GLAPI void APIENTRY glConvolutionParameterfvEXT (GLenum, GLenum, const GLfloat *);
 GLAPI void APIENTRY glConvolutionParameteriEXT (GLenum, GLenum, GLint);
 GLAPI void APIENTRY glConvolutionParameterivEXT (GLenum, GLenum, const GLint *);
@@ -3432,23 +6154,23 @@ GLAPI void APIENTRY glGetConvolutionParameterivEXT (GLenum, GLenum, GLint *);
 GLAPI void APIENTRY glGetSeparableFilterEXT (GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *);
 GLAPI void APIENTRY glSeparableFilter2DEXT (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
-typedef void (APIENTRY * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
-typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (APIENTRY * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
-typedef void (APIENTRY * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
-typedef void (APIENTRY * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
-typedef void (APIENTRY * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
+typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
+typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
+typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
+typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
+typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
 #endif
 
-#ifndef GL_EXT_color_matrix
-#define GL_EXT_color_matrix 1
+#ifndef GL_SGI_color_matrix
+#define GL_SGI_color_matrix 1
 #endif
 
 #ifndef GL_SGI_color_table
@@ -3462,13 +6184,13 @@ GLAPI void APIENTRY glGetColorTableSGI (GLenum, GLenum, GLenum, GLvoid *);
 GLAPI void APIENTRY glGetColorTableParameterfvSGI (GLenum, GLenum, GLfloat *);
 GLAPI void APIENTRY glGetColorTableParameterivSGI (GLenum, GLenum, GLint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
-typedef void (APIENTRY * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
-typedef void (APIENTRY * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);
 #endif
 
 #ifndef GL_SGIX_pixel_texture
@@ -3476,7 +6198,7 @@ typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, G
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glPixelTexGenSGIX (GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
 #endif
 
 #ifndef GL_SGIS_pixel_texture
@@ -3489,12 +6211,12 @@ GLAPI void APIENTRY glPixelTexGenParameterfvSGIS (GLenum, const GLfloat *);
 GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS (GLenum, GLint *);
 GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS (GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);
 #endif
 
 #ifndef GL_SGIS_texture4D
@@ -3503,8 +6225,8 @@ typedef void (APIENTRY * PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname,
 GLAPI void APIENTRY glTexImage4DSGIS (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
 GLAPI void APIENTRY glTexSubImage4DSGIS (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
-typedef void (APIENTRY * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
 #endif
 
 #ifndef GL_SGI_texture_color_table
@@ -3525,12 +6247,12 @@ GLAPI void APIENTRY glGenTexturesEXT (GLsizei, GLuint *);
 GLAPI GLboolean APIENTRY glIsTextureEXT (GLuint);
 GLAPI void APIENTRY glPrioritizeTexturesEXT (GLsizei, const GLuint *, const GLclampf *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef GLboolean (APIENTRY * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
-typedef void (APIENTRY * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
-typedef void (APIENTRY * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
-typedef void (APIENTRY * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
-typedef GLboolean (APIENTRY * PFNGLISTEXTUREEXTPROC) (GLuint texture);
-typedef void (APIENTRY * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
+typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
+typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
+typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
+typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
+typedef GLboolean (APIENTRYP PFNGLISTEXTUREEXTPROC) (GLuint texture);
+typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
 #endif
 
 #ifndef GL_SGIS_detail_texture
@@ -3539,8 +6261,8 @@ typedef void (APIENTRY * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuin
 GLAPI void APIENTRY glDetailTexFuncSGIS (GLenum, GLsizei, const GLfloat *);
 GLAPI void APIENTRY glGetDetailTexFuncSGIS (GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
-typedef void (APIENTRY * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
+typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
+typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
 #endif
 
 #ifndef GL_SGIS_sharpen_texture
@@ -3549,8 +6271,8 @@ typedef void (APIENTRY * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat
 GLAPI void APIENTRY glSharpenTexFuncSGIS (GLenum, GLsizei, const GLfloat *);
 GLAPI void APIENTRY glGetSharpenTexFuncSGIS (GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
-typedef void (APIENTRY * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
+typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
+typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
 #endif
 
 #ifndef GL_EXT_packed_pixels
@@ -3567,8 +6289,8 @@ typedef void (APIENTRY * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat
 GLAPI void APIENTRY glSampleMaskSGIS (GLclampf, GLboolean);
 GLAPI void APIENTRY glSamplePatternSGIS (GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
-typedef void (APIENTRY * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
+typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
+typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
 #endif
 
 #ifndef GL_EXT_rescale_normal
@@ -3588,15 +6310,15 @@ GLAPI void APIENTRY glNormalPointerEXT (GLenum, GLsizei, GLsizei, const GLvoid *
 GLAPI void APIENTRY glTexCoordPointerEXT (GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
 GLAPI void APIENTRY glVertexPointerEXT (GLint, GLenum, GLsizei, GLsizei, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLARRAYELEMENTEXTPROC) (GLint i);
-typedef void (APIENTRY * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
-typedef void (APIENTRY * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
-typedef void (APIENTRY * PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);
-typedef void (APIENTRY * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i);
+typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
+typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
+typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);
+typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
 #endif
 
 #ifndef GL_EXT_misc_attribute
@@ -3628,7 +6350,7 @@ typedef void (APIENTRY * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GL
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glBlendEquationEXT (GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
 #endif
 
 #ifndef GL_EXT_blend_subtract
@@ -3659,10 +6381,10 @@ GLAPI void APIENTRY glSpriteParameterfvSGIX (GLenum, const GLfloat *);
 GLAPI void APIENTRY glSpriteParameteriSGIX (GLenum, GLint);
 GLAPI void APIENTRY glSpriteParameterivSGIX (GLenum, const GLint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);
 #endif
 
 #ifndef GL_SGIX_texture_multi_buffer
@@ -3675,8 +6397,8 @@ typedef void (APIENTRY * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GL
 GLAPI void APIENTRY glPointParameterfEXT (GLenum, GLfloat);
 GLAPI void APIENTRY glPointParameterfvEXT (GLenum, const GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);
 #endif
 
 #ifndef GL_SGIS_point_parameters
@@ -3685,8 +6407,8 @@ typedef void (APIENTRY * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfl
 GLAPI void APIENTRY glPointParameterfSGIS (GLenum, GLfloat);
 GLAPI void APIENTRY glPointParameterfvSGIS (GLenum, const GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
 #endif
 
 #ifndef GL_SGIX_instruments
@@ -3699,12 +6421,12 @@ GLAPI void APIENTRY glReadInstrumentsSGIX (GLint);
 GLAPI void APIENTRY glStartInstrumentsSGIX (void);
 GLAPI void APIENTRY glStopInstrumentsSGIX (GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef GLint (APIENTRY * PFNGLGETINSTRUMENTSSGIXPROC) (void);
-typedef void (APIENTRY * PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
-typedef GLint (APIENTRY * PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
-typedef void (APIENTRY * PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
-typedef void (APIENTRY * PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
-typedef void (APIENTRY * PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
+typedef GLint (APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC) (void);
+typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
+typedef GLint (APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
+typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
+typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
+typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
 #endif
 
 #ifndef GL_SGIX_texture_scale_bias
@@ -3716,7 +6438,7 @@ typedef void (APIENTRY * PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glFrameZoomSGIX (GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
+typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
 #endif
 
 #ifndef GL_SGIX_tag_sample_buffer
@@ -3724,7 +6446,7 @@ typedef void (APIENTRY * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glTagSampleBufferSGIX (void);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
+typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
 #endif
 
 #ifndef GL_SGIX_polynomial_ffd
@@ -3735,10 +6457,10 @@ GLAPI void APIENTRY glDeformationMap3fSGIX (GLenum, GLfloat, GLfloat, GLint, GLi
 GLAPI void APIENTRY glDeformSGIX (GLbitfield);
 GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX (GLbitfield);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
-typedef void (APIENTRY * PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
-typedef void (APIENTRY * PFNGLDEFORMSGIXPROC) (GLbitfield mask);
-typedef void (APIENTRY * PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);
+typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
+typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
+typedef void (APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask);
+typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);
 #endif
 
 #ifndef GL_SGIX_reference_plane
@@ -3746,7 +6468,7 @@ typedef void (APIENTRY * PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield ma
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glReferencePlaneSGIX (const GLdouble *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);
+typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);
 #endif
 
 #ifndef GL_SGIX_flush_raster
@@ -3754,7 +6476,7 @@ typedef void (APIENTRY * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation)
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glFlushRasterSGIX (void);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLFLUSHRASTERSGIXPROC) (void);
+typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC) (void);
 #endif
 
 #ifndef GL_SGIX_depth_texture
@@ -3767,8 +6489,8 @@ typedef void (APIENTRY * PFNGLFLUSHRASTERSGIXPROC) (void);
 GLAPI void APIENTRY glFogFuncSGIS (GLsizei, const GLfloat *);
 GLAPI void APIENTRY glGetFogFuncSGIS (GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
-typedef void (APIENTRY * PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
+typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
+typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
 #endif
 
 #ifndef GL_SGIX_fog_offset
@@ -3785,12 +6507,12 @@ GLAPI void APIENTRY glImageTransformParameterfvHP (GLenum, GLenum, const GLfloat
 GLAPI void APIENTRY glGetImageTransformParameterivHP (GLenum, GLenum, GLint *);
 GLAPI void APIENTRY glGetImageTransformParameterfvHP (GLenum, GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
 #endif
 
 #ifndef GL_HP_convolution_border_modes
@@ -3807,8 +6529,8 @@ typedef void (APIENTRY * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target
 GLAPI void APIENTRY glColorSubTableEXT (GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
 GLAPI void APIENTRY glCopyColorSubTableEXT (GLenum, GLsizei, GLint, GLint, GLsizei);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
-typedef void (APIENTRY * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
+typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
 #endif
 
 #ifndef GL_PGI_vertex_hints
@@ -3820,7 +6542,7 @@ typedef void (APIENTRY * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glHintPGI (GLenum, GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLHINTPGIPROC) (GLenum target, GLint mode);
+typedef void (APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode);
 #endif
 
 #ifndef GL_EXT_paletted_texture
@@ -3831,10 +6553,10 @@ GLAPI void APIENTRY glGetColorTableEXT (GLenum, GLenum, GLenum, GLvoid *);
 GLAPI void APIENTRY glGetColorTableParameterivEXT (GLenum, GLenum, GLint *);
 GLAPI void APIENTRY glGetColorTableParameterfvEXT (GLenum, GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *data);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *data);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
 #endif
 
 #ifndef GL_EXT_clip_volume_hint
@@ -3851,12 +6573,12 @@ GLAPI void APIENTRY glListParameterfvSGIX (GLuint, GLenum, const GLfloat *);
 GLAPI void APIENTRY glListParameteriSGIX (GLuint, GLenum, GLint);
 GLAPI void APIENTRY glListParameterivSGIX (GLuint, GLenum, const GLint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);
 #endif
 
 #ifndef GL_SGIX_ir_instrument1
@@ -3884,7 +6606,7 @@ typedef void (APIENTRY * PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pnam
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glIndexMaterialEXT (GLenum, GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
+typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
 #endif
 
 #ifndef GL_EXT_index_func
@@ -3892,7 +6614,7 @@ typedef void (APIENTRY * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glIndexFuncEXT (GLenum, GLclampf);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
+typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
 #endif
 
 #ifndef GL_EXT_index_array_formats
@@ -3905,8 +6627,8 @@ typedef void (APIENTRY * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
 GLAPI void APIENTRY glLockArraysEXT (GLint, GLsizei);
 GLAPI void APIENTRY glUnlockArraysEXT (void);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
-typedef void (APIENTRY * PFNGLUNLOCKARRAYSEXTPROC) (void);
+typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
+typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC) (void);
 #endif
 
 #ifndef GL_EXT_cull_vertex
@@ -3915,8 +6637,8 @@ typedef void (APIENTRY * PFNGLUNLOCKARRAYSEXTPROC) (void);
 GLAPI void APIENTRY glCullParameterdvEXT (GLenum, GLdouble *);
 GLAPI void APIENTRY glCullParameterfvEXT (GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
-typedef void (APIENTRY * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
+typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);
 #endif
 
 #ifndef GL_SGIX_ycrcb
@@ -3945,24 +6667,24 @@ GLAPI void APIENTRY glGetFragmentMaterialfvSGIX (GLenum, GLenum, GLfloat *);
 GLAPI void APIENTRY glGetFragmentMaterialivSGIX (GLenum, GLenum, GLint *);
 GLAPI void APIENTRY glLightEnviSGIX (GLenum, GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
 #endif
 
 #ifndef GL_IBM_rasterpos_clip
@@ -3978,7 +6700,7 @@ typedef void (APIENTRY * PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glDrawRangeElementsEXT (GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
+typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
 #endif
 
 #ifndef GL_WIN_phong_shading
@@ -3996,9 +6718,9 @@ GLAPI void APIENTRY glApplyTextureEXT (GLenum);
 GLAPI void APIENTRY glTextureLightEXT (GLenum);
 GLAPI void APIENTRY glTextureMaterialEXT (GLenum, GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
-typedef void (APIENTRY * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
-typedef void (APIENTRY * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
+typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
+typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
 #endif
 
 #ifndef GL_SGIX_blend_alpha_minmax
@@ -4019,12 +6741,12 @@ GLAPI GLuint APIENTRY glGenAsyncMarkersSGIX (GLsizei);
 GLAPI void APIENTRY glDeleteAsyncMarkersSGIX (GLuint, GLsizei);
 GLAPI GLboolean APIENTRY glIsAsyncMarkerSGIX (GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
-typedef GLint (APIENTRY * PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
-typedef GLint (APIENTRY * PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
-typedef GLuint (APIENTRY * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
-typedef void (APIENTRY * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
-typedef GLboolean (APIENTRY * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
+typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
+typedef GLint (APIENTRYP PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
+typedef GLint (APIENTRYP PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
+typedef GLuint (APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
+typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
+typedef GLboolean (APIENTRYP PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
 #endif
 
 #ifndef GL_SGIX_async_pixel
@@ -4043,10 +6765,10 @@ GLAPI void APIENTRY glNormalPointervINTEL (GLenum, const GLvoid* *);
 GLAPI void APIENTRY glColorPointervINTEL (GLint, GLenum, const GLvoid* *);
 GLAPI void APIENTRY glTexCoordPointervINTEL (GLint, GLenum, const GLvoid* *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
-typedef void (APIENTRY * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const GLvoid* *pointer);
-typedef void (APIENTRY * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
-typedef void (APIENTRY * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
+typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
+typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const GLvoid* *pointer);
+typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
+typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
 #endif
 
 #ifndef GL_HP_occlusion_test
@@ -4061,10 +6783,10 @@ GLAPI void APIENTRY glPixelTransformParameterfEXT (GLenum, GLenum, GLfloat);
 GLAPI void APIENTRY glPixelTransformParameterivEXT (GLenum, GLenum, const GLint *);
 GLAPI void APIENTRY glPixelTransformParameterfvEXT (GLenum, GLenum, const GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
 #endif
 
 #ifndef GL_EXT_pixel_transform_color_table
@@ -4100,23 +6822,23 @@ GLAPI void APIENTRY glSecondaryColor3usEXT (GLushort, GLushort, GLushort);
 GLAPI void APIENTRY glSecondaryColor3usvEXT (const GLushort *);
 GLAPI void APIENTRY glSecondaryColorPointerEXT (GLint, GLenum, GLsizei, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
-typedef void (APIENTRY * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
+typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif
 
 #ifndef GL_EXT_texture_perturb_normal
@@ -4124,7 +6846,7 @@ typedef void (APIENTRY * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glTextureNormalEXT (GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
 #endif
 
 #ifndef GL_EXT_multi_draw_arrays
@@ -4133,8 +6855,8 @@ typedef void (APIENTRY * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
 GLAPI void APIENTRY glMultiDrawArraysEXT (GLenum, GLint *, GLsizei *, GLsizei);
 GLAPI void APIENTRY glMultiDrawElementsEXT (GLenum, const GLsizei *, GLenum, const GLvoid* *, GLsizei);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
-typedef void (APIENTRY * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
+typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, GLint *first, GLsizei *count, GLsizei primcount);
+typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
 #endif
 
 #ifndef GL_EXT_fog_coord
@@ -4146,11 +6868,11 @@ GLAPI void APIENTRY glFogCoorddEXT (GLdouble);
 GLAPI void APIENTRY glFogCoorddvEXT (const GLdouble *);
 GLAPI void APIENTRY glFogCoordPointerEXT (GLenum, GLsizei, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
-typedef void (APIENTRY * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
-typedef void (APIENTRY * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
-typedef void (APIENTRY * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
-typedef void (APIENTRY * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
+typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
+typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
+typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
+typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif
 
 #ifndef GL_REND_screen_coordinates
@@ -4183,28 +6905,28 @@ GLAPI void APIENTRY glBinormal3svEXT (const GLshort *);
 GLAPI void APIENTRY glTangentPointerEXT (GLenum, GLsizei, const GLvoid *);
 GLAPI void APIENTRY glBinormalPointerEXT (GLenum, GLsizei, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
-typedef void (APIENTRY * PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
-typedef void (APIENTRY * PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
-typedef void (APIENTRY * PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
-typedef void (APIENTRY * PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
-typedef void (APIENTRY * PFNGLTANGENT3IVEXTPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
-typedef void (APIENTRY * PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
-typedef void (APIENTRY * PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
-typedef void (APIENTRY * PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
-typedef void (APIENTRY * PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
-typedef void (APIENTRY * PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
-typedef void (APIENTRY * PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
-typedef void (APIENTRY * PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
+typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
+typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
+typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
+typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
+typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
+typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
+typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
+typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
+typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
+typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
+typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
+typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif
 
 #ifndef GL_EXT_texture_env_combine
@@ -4228,7 +6950,7 @@ typedef void (APIENTRY * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stri
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glFinishTextureSUNX (void);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLFINISHTEXTURESUNXPROC) (void);
+typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC) (void);
 #endif
 
 #ifndef GL_SUN_global_alpha
@@ -4243,14 +6965,14 @@ GLAPI void APIENTRY glGlobalAlphaFactorubSUN (GLubyte);
 GLAPI void APIENTRY glGlobalAlphaFactorusSUN (GLushort);
 GLAPI void APIENTRY glGlobalAlphaFactoruiSUN (GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
-typedef void (APIENTRY * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
+typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
 #endif
 
 #ifndef GL_SUN_triangle_list
@@ -4264,13 +6986,13 @@ GLAPI void APIENTRY glReplacementCodeusvSUN (const GLushort *);
 GLAPI void APIENTRY glReplacementCodeubvSUN (const GLubyte *);
 GLAPI void APIENTRY glReplacementCodePointerSUN (GLenum, GLsizei, const GLvoid* *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const GLvoid* *pointer);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const GLvoid* *pointer);
 #endif
 
 #ifndef GL_SUN_vertex
@@ -4317,46 +7039,46 @@ GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLu
 GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
 GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
-typedef void (APIENTRY * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
-typedef void (APIENTRY * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
-typedef void (APIENTRY * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
-typedef void (APIENTRY * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
-typedef void (APIENTRY * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
-typedef void (APIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
-typedef void (APIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
-typedef void (APIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
+typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
+typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
+typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
+typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
+typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
+typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
+typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
 #endif
 
 #ifndef GL_EXT_blend_func_separate
@@ -4364,7 +7086,7 @@ typedef void (APIENTRY * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3F
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum, GLenum, GLenum, GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
 #endif
 
 #ifndef GL_INGR_blend_func_separate
@@ -4372,7 +7094,7 @@ typedef void (APIENTRY * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLen
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum, GLenum, GLenum, GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
+typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
 #endif
 
 #ifndef GL_INGR_color_clamp
@@ -4418,9 +7140,9 @@ GLAPI void APIENTRY glVertexWeightfEXT (GLfloat);
 GLAPI void APIENTRY glVertexWeightfvEXT (const GLfloat *);
 GLAPI void APIENTRY glVertexWeightPointerEXT (GLsizei, GLenum, GLsizei, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
-typedef void (APIENTRY * PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
-typedef void (APIENTRY * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
+typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
+typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
 #endif
 
 #ifndef GL_NV_light_max_exponent
@@ -4433,8 +7155,8 @@ typedef void (APIENTRY * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei size, GLenum
 GLAPI void APIENTRY glFlushVertexArrayRangeNV (void);
 GLAPI void APIENTRY glVertexArrayRangeNV (GLsizei, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
-typedef void (APIENTRY * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
+typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const GLvoid *pointer);
 #endif
 
 #ifndef GL_NV_register_combiners
@@ -4454,19 +7176,19 @@ GLAPI void APIENTRY glGetCombinerOutputParameterivNV (GLenum, GLenum, GLenum, GL
 GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV (GLenum, GLenum, GLfloat *);
 GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV (GLenum, GLenum, GLint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
-typedef void (APIENTRY * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
-typedef void (APIENTRY * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
-typedef void (APIENTRY * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
-typedef void (APIENTRY * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
+typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
+typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);
 #endif
 
 #ifndef GL_NV_fog_distance
@@ -4490,7 +7212,7 @@ typedef void (APIENTRY * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum va
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glResizeBuffersMESA (void);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLRESIZEBUFFERSMESAPROC) (void);
+typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) (void);
 #endif
 
 #ifndef GL_MESA_window_pos
@@ -4521,30 +7243,30 @@ GLAPI void APIENTRY glWindowPos4ivMESA (const GLint *);
 GLAPI void APIENTRY glWindowPos4sMESA (GLshort, GLshort, GLshort, GLshort);
 GLAPI void APIENTRY glWindowPos4svMESA (const GLshort *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
-typedef void (APIENTRY * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
-typedef void (APIENTRY * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
-typedef void (APIENTRY * PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
-typedef void (APIENTRY * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (APIENTRY * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
+typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
+typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
+typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
+typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
 #endif
 
 #ifndef GL_IBM_cull_vertex
@@ -4554,11 +7276,11 @@ typedef void (APIENTRY * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
 #ifndef GL_IBM_multimode_draw_arrays
 #define GL_IBM_multimode_draw_arrays 1
 #ifdef GL_GLEXT_PROTOTYPES
-GLAPI void APIENTRY glMultiModeDrawArraysIBM (GLenum, const GLint *, const GLsizei *, GLsizei, GLint);
-GLAPI void APIENTRY glMultiModeDrawElementsIBM (const GLenum *, const GLsizei *, GLenum, const GLvoid* *, GLsizei, GLint);
+GLAPI void APIENTRY glMultiModeDrawArraysIBM (const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
+GLAPI void APIENTRY glMultiModeDrawElementsIBM (const GLenum *, const GLsizei *, GLenum, const GLvoid* const *, GLsizei, GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
-typedef void (APIENTRY * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, GLint modestride);
+typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
+typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
 #endif
 
 #ifndef GL_IBM_vertex_array_lists
@@ -4573,14 +7295,14 @@ GLAPI void APIENTRY glNormalPointerListIBM (GLenum, GLint, const GLvoid* *, GLin
 GLAPI void APIENTRY glTexCoordPointerListIBM (GLint, GLenum, GLint, const GLvoid* *, GLint);
 GLAPI void APIENTRY glVertexPointerListIBM (GLint, GLenum, GLint, const GLvoid* *, GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-typedef void (APIENTRY * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-typedef void (APIENTRY * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
-typedef void (APIENTRY * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-typedef void (APIENTRY * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-typedef void (APIENTRY * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-typedef void (APIENTRY * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
-typedef void (APIENTRY * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
+typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
 #endif
 
 #ifndef GL_SGIX_subsample
@@ -4612,7 +7334,7 @@ typedef void (APIENTRY * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glTbufferMask3DFX (GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
+typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
 #endif
 
 #ifndef GL_EXT_multisample
@@ -4621,8 +7343,8 @@ typedef void (APIENTRY * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
 GLAPI void APIENTRY glSampleMaskEXT (GLclampf, GLboolean);
 GLAPI void APIENTRY glSamplePatternEXT (GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
-typedef void (APIENTRY * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
+typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
+typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
 #endif
 
 #ifndef GL_SGIX_vertex_preclip
@@ -4646,7 +7368,7 @@ typedef void (APIENTRY * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glTextureColorMaskSGIS (GLboolean, GLboolean, GLboolean, GLboolean);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
+typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
 #endif
 
 #ifndef GL_SGIX_igloo_interface
@@ -4654,7 +7376,7 @@ typedef void (APIENTRY * PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolea
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glIglooInterfaceSGIX (GLenum, const GLvoid *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const GLvoid *params);
+typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const GLvoid *params);
 #endif
 
 #ifndef GL_EXT_texture_env_dot3
@@ -4676,13 +7398,13 @@ GLAPI void APIENTRY glGetFenceivNV (GLuint, GLenum, GLint *);
 GLAPI void APIENTRY glFinishFenceNV (GLuint);
 GLAPI void APIENTRY glSetFenceNV (GLuint, GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
-typedef void (APIENTRY * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
-typedef GLboolean (APIENTRY * PFNGLISFENCENVPROC) (GLuint fence);
-typedef GLboolean (APIENTRY * PFNGLTESTFENCENVPROC) (GLuint fence);
-typedef void (APIENTRY * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLFINISHFENCENVPROC) (GLuint fence);
-typedef void (APIENTRY * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
+typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
+typedef void (APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
+typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);
+typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);
+typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);
+typedef void (APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
 #endif
 
 #ifndef GL_NV_evaluators
@@ -4698,15 +7420,15 @@ GLAPI void APIENTRY glGetMapAttribParameterivNV (GLenum, GLuint, GLenum, GLint *
 GLAPI void APIENTRY glGetMapAttribParameterfvNV (GLenum, GLuint, GLenum, GLfloat *);
 GLAPI void APIENTRY glEvalMapsNV (GLenum, GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
-typedef void (APIENTRY * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
-typedef void (APIENTRY * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
-typedef void (APIENTRY * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
+typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
+typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
+typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
 #endif
 
 #ifndef GL_NV_packed_depth_stencil
@@ -4719,8 +7441,8 @@ typedef void (APIENTRY * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
 GLAPI void APIENTRY glCombinerStageParameterfvNV (GLenum, GLenum, const GLfloat *);
 GLAPI void APIENTRY glGetCombinerStageParameterfvNV (GLenum, GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
-typedef void (APIENTRY * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);
 #endif
 
 #ifndef GL_NV_texture_compression_vtc
@@ -4811,70 +7533,70 @@ GLAPI void APIENTRY glVertexAttribs4fvNV (GLuint, GLsizei, const GLfloat *);
 GLAPI void APIENTRY glVertexAttribs4svNV (GLuint, GLsizei, const GLshort *);
 GLAPI void APIENTRY glVertexAttribs4ubvNV (GLuint, GLsizei, const GLubyte *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef GLboolean (APIENTRY * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
-typedef void (APIENTRY * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
-typedef void (APIENTRY * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
-typedef void (APIENTRY * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
-typedef void (APIENTRY * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
-typedef void (APIENTRY * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
-typedef void (APIENTRY * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
-typedef GLboolean (APIENTRY * PFNGLISPROGRAMNVPROC) (GLuint id);
-typedef void (APIENTRY * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
-typedef void (APIENTRY * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint count, const GLdouble *v);
-typedef void (APIENTRY * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint count, const GLfloat *v);
-typedef void (APIENTRY * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
-typedef void (APIENTRY * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);
+typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
+typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
+typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
+typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
+typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
+typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
+typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
+typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint count, const GLdouble *v);
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint count, const GLfloat *v);
+typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
+typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);
 #endif
 
 #ifndef GL_SGIX_texture_coordinate_clamp
@@ -4909,10 +7631,10 @@ GLAPI void APIENTRY glTexBumpParameterfvATI (GLenum, const GLfloat *);
 GLAPI void APIENTRY glGetTexBumpParameterivATI (GLenum, GLint *);
 GLAPI void APIENTRY glGetTexBumpParameterfvATI (GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
-typedef void (APIENTRY * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
-typedef void (APIENTRY * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
-typedef void (APIENTRY * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
+typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
+typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
+typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
+typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
 #endif
 
 #ifndef GL_ATI_fragment_shader
@@ -4933,20 +7655,20 @@ GLAPI void APIENTRY glAlphaFragmentOp2ATI (GLenum, GLuint, GLuint, GLuint, GLuin
 GLAPI void APIENTRY glAlphaFragmentOp3ATI (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
 GLAPI void APIENTRY glSetFragmentShaderConstantATI (GLuint, const GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef GLuint (APIENTRY * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
-typedef void (APIENTRY * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
-typedef void (APIENTRY * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
-typedef void (APIENTRY * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
-typedef void (APIENTRY * PFNGLENDFRAGMENTSHADERATIPROC) (void);
-typedef void (APIENTRY * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
-typedef void (APIENTRY * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
-typedef void (APIENTRY * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
-typedef void (APIENTRY * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
-typedef void (APIENTRY * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
-typedef void (APIENTRY * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
-typedef void (APIENTRY * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
-typedef void (APIENTRY * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
-typedef void (APIENTRY * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);
+typedef GLuint (APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
+typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
+typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) (void);
+typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
+typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
+typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
+typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
+typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
+typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);
 #endif
 
 #ifndef GL_ATI_pn_triangles
@@ -4955,8 +7677,8 @@ typedef void (APIENTRY * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, con
 GLAPI void APIENTRY glPNTrianglesiATI (GLenum, GLint);
 GLAPI void APIENTRY glPNTrianglesfATI (GLenum, GLfloat);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
 #endif
 
 #ifndef GL_ATI_vertex_array_object
@@ -4975,18 +7697,18 @@ GLAPI void APIENTRY glVariantArrayObjectATI (GLuint, GLenum, GLsizei, GLuint, GL
 GLAPI void APIENTRY glGetVariantArrayObjectfvATI (GLuint, GLenum, GLfloat *);
 GLAPI void APIENTRY glGetVariantArrayObjectivATI (GLuint, GLenum, GLint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef GLuint (APIENTRY * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);
-typedef GLboolean (APIENTRY * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
-typedef void (APIENTRY * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
-typedef void (APIENTRY * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
-typedef void (APIENTRY * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
-typedef void (APIENTRY * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
-typedef void (APIENTRY * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
+typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);
+typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
+typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
+typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
+typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
+typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
 #endif
 
 #ifndef GL_EXT_vertex_shader
@@ -5035,48 +7757,48 @@ GLAPI void APIENTRY glGetLocalConstantBooleanvEXT (GLuint, GLenum, GLboolean *);
 GLAPI void APIENTRY glGetLocalConstantIntegervEXT (GLuint, GLenum, GLint *);
 GLAPI void APIENTRY glGetLocalConstantFloatvEXT (GLuint, GLenum, GLfloat *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBEGINVERTEXSHADEREXTPROC) (void);
-typedef void (APIENTRY * PFNGLENDVERTEXSHADEREXTPROC) (void);
-typedef void (APIENTRY * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
-typedef GLuint (APIENTRY * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
-typedef void (APIENTRY * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
-typedef void (APIENTRY * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
-typedef void (APIENTRY * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
-typedef void (APIENTRY * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
-typedef void (APIENTRY * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
-typedef void (APIENTRY * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
-typedef void (APIENTRY * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
-typedef void (APIENTRY * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
-typedef GLuint (APIENTRY * PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
-typedef void (APIENTRY * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
-typedef void (APIENTRY * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
-typedef void (APIENTRY * PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
-typedef void (APIENTRY * PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
-typedef void (APIENTRY * PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
-typedef void (APIENTRY * PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
-typedef void (APIENTRY * PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
-typedef void (APIENTRY * PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
-typedef void (APIENTRY * PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
-typedef void (APIENTRY * PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
-typedef void (APIENTRY * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
-typedef void (APIENTRY * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
-typedef void (APIENTRY * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
-typedef GLuint (APIENTRY * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
-typedef GLuint (APIENTRY * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
-typedef GLuint (APIENTRY * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
-typedef GLuint (APIENTRY * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
-typedef GLuint (APIENTRY * PFNGLBINDPARAMETEREXTPROC) (GLenum value);
-typedef GLboolean (APIENTRY * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
-typedef void (APIENTRY * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
-typedef void (APIENTRY * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
-typedef void (APIENTRY * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
-typedef void (APIENTRY * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid* *data);
-typedef void (APIENTRY * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
-typedef void (APIENTRY * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
-typedef void (APIENTRY * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
-typedef void (APIENTRY * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
-typedef void (APIENTRY * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
-typedef void (APIENTRY * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
+typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) (void);
+typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC) (void);
+typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
+typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
+typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
+typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
+typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
+typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
+typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
+typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
+typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
+typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
+typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
+typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
+typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
+typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
+typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
+typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
+typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
+typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
+typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
+typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
+typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
+typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
+typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
+typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
+typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
+typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value);
+typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
+typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
+typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
+typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
+typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid* *data);
+typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
+typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
+typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
+typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
+typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
+typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
 #endif
 
 #ifndef GL_ATI_vertex_streams
@@ -5128,51 +7850,51 @@ GLAPI void APIENTRY glClientActiveVertexStreamATI (GLenum);
 GLAPI void APIENTRY glVertexBlendEnviATI (GLenum, GLint);
 GLAPI void APIENTRY glVertexBlendEnvfATI (GLenum, GLfloat);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
-typedef void (APIENTRY * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
-typedef void (APIENTRY * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
-typedef void (APIENTRY * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
+typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
+typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
+typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
 #endif
 
 #ifndef GL_ATI_element_array
@@ -5182,9 +7904,9 @@ GLAPI void APIENTRY glElementPointerATI (GLenum, const GLvoid *);
 GLAPI void APIENTRY glDrawElementArrayATI (GLenum, GLsizei);
 GLAPI void APIENTRY glDrawRangeElementArrayATI (GLenum, GLuint, GLuint, GLsizei);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
-typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
+typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
+typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
 #endif
 
 #ifndef GL_SUN_mesh_array
@@ -5192,7 +7914,7 @@ typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glDrawMeshArraysSUN (GLenum, GLint, GLsizei, GLsizei);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);
+typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);
 #endif
 
 #ifndef GL_SUN_slice_accum
@@ -5218,13 +7940,13 @@ GLAPI void APIENTRY glEndOcclusionQueryNV (void);
 GLAPI void APIENTRY glGetOcclusionQueryivNV (GLuint, GLenum, GLint *);
 GLAPI void APIENTRY glGetOcclusionQueryuivNV (GLuint, GLenum, GLuint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
-typedef void (APIENTRY * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
-typedef GLboolean (APIENTRY * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
-typedef void (APIENTRY * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
-typedef void (APIENTRY * PFNGLENDOCCLUSIONQUERYNVPROC) (void);
-typedef void (APIENTRY * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
-typedef void (APIENTRY * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
+typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
+typedef GLboolean (APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) (void);
+typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);
 #endif
 
 #ifndef GL_NV_point_sprite
@@ -5233,8 +7955,8 @@ typedef void (APIENTRY * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pna
 GLAPI void APIENTRY glPointParameteriNV (GLenum, GLint);
 GLAPI void APIENTRY glPointParameterivNV (GLenum, const GLint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
-typedef void (APIENTRY * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
 #endif
 
 #ifndef GL_NV_texture_shader3
@@ -5254,7 +7976,7 @@ typedef void (APIENTRY * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glActiveStencilFaceEXT (GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
+typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
 #endif
 
 #ifndef GL_ATI_text_fragment_shader
@@ -5274,11 +7996,11 @@ GLAPI void APIENTRY glDrawRangeElementArrayAPPLE (GLenum, GLuint, GLuint, GLint,
 GLAPI void APIENTRY glMultiDrawElementArrayAPPLE (GLenum, const GLint *, const GLsizei *, GLsizei);
 GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE (GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const GLvoid *pointer);
-typedef void (APIENTRY * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
-typedef void (APIENTRY * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
-typedef void (APIENTRY * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
-typedef void (APIENTRY * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
+typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
+typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
+typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
+typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
 #endif
 
 #ifndef GL_APPLE_fence
@@ -5293,14 +8015,14 @@ GLAPI void APIENTRY glFinishFenceAPPLE (GLuint);
 GLAPI GLboolean APIENTRY glTestObjectAPPLE (GLenum, GLuint);
 GLAPI void APIENTRY glFinishObjectAPPLE (GLenum, GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
-typedef void (APIENTRY * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
-typedef void (APIENTRY * PFNGLSETFENCEAPPLEPROC) (GLuint fence);
-typedef GLboolean (APIENTRY * PFNGLISFENCEAPPLEPROC) (GLuint fence);
-typedef GLboolean (APIENTRY * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
-typedef void (APIENTRY * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
-typedef GLboolean (APIENTRY * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
-typedef void (APIENTRY * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
+typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
+typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
+typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC) (GLuint fence);
+typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence);
+typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
+typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
+typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
+typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
 #endif
 
 #ifndef GL_APPLE_vertex_array_object
@@ -5308,13 +8030,13 @@ typedef void (APIENTRY * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name)
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glBindVertexArrayAPPLE (GLuint);
 GLAPI void APIENTRY glDeleteVertexArraysAPPLE (GLsizei, const GLuint *);
-GLAPI void APIENTRY glGenVertexArraysAPPLE (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenVertexArraysAPPLE (GLsizei, GLuint *);
 GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE (GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
-typedef void (APIENTRY * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
-typedef void (APIENTRY * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
-typedef GLboolean (APIENTRY * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
+typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
+typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
+typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays);
+typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
 #endif
 
 #ifndef GL_APPLE_vertex_array_range
@@ -5324,9 +8046,9 @@ GLAPI void APIENTRY glVertexArrayRangeAPPLE (GLsizei, GLvoid *);
 GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE (GLsizei, GLvoid *);
 GLAPI void APIENTRY glVertexArrayParameteriAPPLE (GLenum, GLint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
-typedef void (APIENTRY * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
-typedef void (APIENTRY * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
+typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
+typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
 #endif
 
 #ifndef GL_APPLE_ycbcr_422
@@ -5342,7 +8064,14 @@ typedef void (APIENTRY * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLi
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glDrawBuffersATI (GLsizei, const GLenum *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);
+typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);
+#endif
+
+#ifndef GL_ATI_pixel_format_float
+#define GL_ATI_pixel_format_float 1
+/* This is really a WGL extension, but defines some associated GL enums.
+ * ATI does not export "GL_ATI_pixel_format_float" in the GL_EXTENSIONS string.
+ */
 #endif
 
 #ifndef GL_ATI_texture_env_combine3
@@ -5368,19 +8097,16 @@ GLAPI void APIENTRY glProgramNamedParameter4dvNV (GLuint, GLsizei, const GLubyte
 GLAPI void APIENTRY glGetProgramNamedParameterfvNV (GLuint, GLsizei, const GLubyte *, GLfloat *);
 GLAPI void APIENTRY glGetProgramNamedParameterdvNV (GLuint, GLsizei, const GLubyte *, GLdouble *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
-typedef void (APIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
-typedef void (APIENTRY * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
-typedef void (APIENTRY * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
-typedef void (APIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
+typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
+typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
+typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
 #endif
 
 #ifndef GL_NV_half_float
 #define GL_NV_half_float 1
-/* GL type for representing NVIDIA "half" floating point type in host memory */
-/* Only used by this extension for now; later needs to be moved earlier in glext.h */
-typedef unsigned short GLhalfNV;
 #ifdef GL_GLEXT_PROTOTYPES
 GLAPI void APIENTRY glVertex2hNV (GLhalfNV, GLhalfNV);
 GLAPI void APIENTRY glVertex2hvNV (const GLhalfNV *);
@@ -5429,52 +8155,52 @@ GLAPI void APIENTRY glVertexAttribs2hvNV (GLuint, GLsizei, const GLhalfNV *);
 GLAPI void APIENTRY glVertexAttribs3hvNV (GLuint, GLsizei, const GLhalfNV *);
 GLAPI void APIENTRY glVertexAttribs4hvNV (GLuint, GLsizei, const GLhalfNV *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
-typedef void (APIENTRY * PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
-typedef void (APIENTRY * PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
-typedef void (APIENTRY * PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
-typedef void (APIENTRY * PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
-typedef void (APIENTRY * PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
-typedef void (APIENTRY * PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
-typedef void (APIENTRY * PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
-typedef void (APIENTRY * PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
-typedef void (APIENTRY * PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
-typedef void (APIENTRY * PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
-typedef void (APIENTRY * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
-typedef void (APIENTRY * PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
-typedef void (APIENTRY * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
-typedef void (APIENTRY * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
-typedef void (APIENTRY * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
-typedef void (APIENTRY * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
+typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
+typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
+typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
+typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
+typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
+typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
+typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
+typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
+typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
+typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
+typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
+typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
+typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
+typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
 #endif
 
 #ifndef GL_NV_pixel_data_range
@@ -5483,8 +8209,8 @@ typedef void (APIENTRY * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n,
 GLAPI void APIENTRY glPixelDataRangeNV (GLenum, GLsizei, GLvoid *);
 GLAPI void APIENTRY glFlushPixelDataRangeNV (GLenum);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, GLvoid *pointer);
-typedef void (APIENTRY * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, GLvoid *pointer);
+typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
 #endif
 
 #ifndef GL_NV_primitive_restart
@@ -5493,8 +8219,8 @@ typedef void (APIENTRY * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
 GLAPI void APIENTRY glPrimitiveRestartNV (void);
 GLAPI void APIENTRY glPrimitiveRestartIndexNV (GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLPRIMITIVERESTARTNVPROC) (void);
-typedef void (APIENTRY * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
+typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC) (void);
+typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
 #endif
 
 #ifndef GL_NV_texture_expand_normal
@@ -5511,8 +8237,8 @@ typedef void (APIENTRY * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
 GLAPI GLvoid* APIENTRY glMapObjectBufferATI (GLuint);
 GLAPI void APIENTRY glUnmapObjectBufferATI (GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef GLvoid* (APIENTRY * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
-typedef void (APIENTRY * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
+typedef GLvoid* (APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
+typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
 #endif
 
 #ifndef GL_ATI_separate_stencil
@@ -5521,8 +8247,8 @@ typedef void (APIENTRY * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
 GLAPI void APIENTRY glStencilOpSeparateATI (GLenum, GLenum, GLenum, GLenum);
 GLAPI void APIENTRY glStencilFuncSeparateATI (GLenum, GLenum, GLint, GLuint);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
-typedef void (APIENTRY * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
+typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
+typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
 #endif
 
 #ifndef GL_ATI_vertex_attrib_array_object
@@ -5532,9 +8258,1203 @@ GLAPI void APIENTRY glVertexAttribArrayObjectATI (GLuint, GLint, GLenum, GLboole
 GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI (GLuint, GLenum, GLfloat *);
 GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI (GLuint, GLenum, GLint *);
 #endif /* GL_GLEXT_PROTOTYPES */
-typedef void (APIENTRY * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
-typedef void (APIENTRY * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);
+#endif
+
+#ifndef GL_OES_read_format
+#define GL_OES_read_format 1
+#endif
+
+#ifndef GL_EXT_depth_bounds_test
+#define GL_EXT_depth_bounds_test 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glDepthBoundsEXT (GLclampd, GLclampd);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
+#endif
+
+#ifndef GL_EXT_texture_mirror_clamp
+#define GL_EXT_texture_mirror_clamp 1
+#endif
+
+#ifndef GL_EXT_blend_equation_separate
+#define GL_EXT_blend_equation_separate 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBlendEquationSeparateEXT (GLenum, GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
+#endif
+
+#ifndef GL_MESA_pack_invert
+#define GL_MESA_pack_invert 1
+#endif
+
+#ifndef GL_MESA_ycbcr_texture
+#define GL_MESA_ycbcr_texture 1
+#endif
+
+#ifndef GL_EXT_pixel_buffer_object
+#define GL_EXT_pixel_buffer_object 1
+#endif
+
+#ifndef GL_NV_fragment_program_option
+#define GL_NV_fragment_program_option 1
+#endif
+
+#ifndef GL_NV_fragment_program2
+#define GL_NV_fragment_program2 1
+#endif
+
+#ifndef GL_NV_vertex_program2_option
+#define GL_NV_vertex_program2_option 1
+#endif
+
+#ifndef GL_NV_vertex_program3
+#define GL_NV_vertex_program3 1
+#endif
+
+#ifndef GL_EXT_framebuffer_object
+#define GL_EXT_framebuffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI GLboolean APIENTRY glIsRenderbufferEXT (GLuint);
+GLAPI void APIENTRY glBindRenderbufferEXT (GLenum, GLuint);
+GLAPI void APIENTRY glDeleteRenderbuffersEXT (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenRenderbuffersEXT (GLsizei, GLuint *);
+GLAPI void APIENTRY glRenderbufferStorageEXT (GLenum, GLenum, GLsizei, GLsizei);
+GLAPI void APIENTRY glGetRenderbufferParameterivEXT (GLenum, GLenum, GLint *);
+GLAPI GLboolean APIENTRY glIsFramebufferEXT (GLuint);
+GLAPI void APIENTRY glBindFramebufferEXT (GLenum, GLuint);
+GLAPI void APIENTRY glDeleteFramebuffersEXT (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenFramebuffersEXT (GLsizei, GLuint *);
+GLAPI GLenum APIENTRY glCheckFramebufferStatusEXT (GLenum);
+GLAPI void APIENTRY glFramebufferTexture1DEXT (GLenum, GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glFramebufferTexture2DEXT (GLenum, GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glFramebufferTexture3DEXT (GLenum, GLenum, GLenum, GLuint, GLint, GLint);
+GLAPI void APIENTRY glFramebufferRenderbufferEXT (GLenum, GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glGetFramebufferAttachmentParameterivEXT (GLenum, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGenerateMipmapEXT (GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);
+typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);
+typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
+typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
+typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
+typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);
+typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);
+typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
+#endif
+
+#ifndef GL_GREMEDY_string_marker
+#define GL_GREMEDY_string_marker 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glStringMarkerGREMEDY (GLsizei, const GLvoid *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const GLvoid *string);
+#endif
+
+#ifndef GL_EXT_packed_depth_stencil
+#define GL_EXT_packed_depth_stencil 1
+#endif
+
+#ifndef GL_EXT_stencil_clear_tag
+#define GL_EXT_stencil_clear_tag 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glStencilClearTagEXT (GLsizei, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag);
+#endif
+
+#ifndef GL_EXT_texture_sRGB
+#define GL_EXT_texture_sRGB 1
+#endif
+
+#ifndef GL_EXT_framebuffer_blit
+#define GL_EXT_framebuffer_blit 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBlitFramebufferEXT (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+#endif
+
+#ifndef GL_EXT_framebuffer_multisample
+#define GL_EXT_framebuffer_multisample 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glRenderbufferStorageMultisampleEXT (GLenum, GLsizei, GLenum, GLsizei, GLsizei);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+#endif
+
+#ifndef GL_MESAX_texture_stack
+#define GL_MESAX_texture_stack 1
+#endif
+
+#ifndef GL_EXT_timer_query
+#define GL_EXT_timer_query 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetQueryObjecti64vEXT (GLuint, GLenum, GLint64EXT *);
+GLAPI void APIENTRY glGetQueryObjectui64vEXT (GLuint, GLenum, GLuint64EXT *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
+typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);
+#endif
+
+#ifndef GL_EXT_gpu_program_parameters
+#define GL_EXT_gpu_program_parameters 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProgramEnvParameters4fvEXT (GLenum, GLuint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glProgramLocalParameters4fvEXT (GLenum, GLuint, GLsizei, const GLfloat *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+#endif
+
+#ifndef GL_APPLE_flush_buffer_range
+#define GL_APPLE_flush_buffer_range 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBufferParameteriAPPLE (GLenum, GLenum, GLint);
+GLAPI void APIENTRY glFlushMappedBufferRangeAPPLE (GLenum, GLintptr, GLsizeiptr);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
+#endif
+
+#ifndef GL_NV_gpu_program4
+#define GL_NV_gpu_program4 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProgramLocalParameterI4iNV (GLenum, GLuint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glProgramLocalParameterI4ivNV (GLenum, GLuint, const GLint *);
+GLAPI void APIENTRY glProgramLocalParametersI4ivNV (GLenum, GLuint, GLsizei, const GLint *);
+GLAPI void APIENTRY glProgramLocalParameterI4uiNV (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glProgramLocalParameterI4uivNV (GLenum, GLuint, const GLuint *);
+GLAPI void APIENTRY glProgramLocalParametersI4uivNV (GLenum, GLuint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glProgramEnvParameterI4iNV (GLenum, GLuint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glProgramEnvParameterI4ivNV (GLenum, GLuint, const GLint *);
+GLAPI void APIENTRY glProgramEnvParametersI4ivNV (GLenum, GLuint, GLsizei, const GLint *);
+GLAPI void APIENTRY glProgramEnvParameterI4uiNV (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glProgramEnvParameterI4uivNV (GLenum, GLuint, const GLuint *);
+GLAPI void APIENTRY glProgramEnvParametersI4uivNV (GLenum, GLuint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glGetProgramLocalParameterIivNV (GLenum, GLuint, GLint *);
+GLAPI void APIENTRY glGetProgramLocalParameterIuivNV (GLenum, GLuint, GLuint *);
+GLAPI void APIENTRY glGetProgramEnvParameterIivNV (GLenum, GLuint, GLint *);
+GLAPI void APIENTRY glGetProgramEnvParameterIuivNV (GLenum, GLuint, GLuint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
+typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
+typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
+typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
+#endif
+
+#ifndef GL_NV_geometry_program4
+#define GL_NV_geometry_program4 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProgramVertexLimitNV (GLenum, GLint);
+GLAPI void APIENTRY glFramebufferTextureEXT (GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glFramebufferTextureLayerEXT (GLenum, GLenum, GLuint, GLint, GLint);
+GLAPI void APIENTRY glFramebufferTextureFaceEXT (GLenum, GLenum, GLuint, GLint, GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
+#endif
+
+#ifndef GL_EXT_geometry_shader4
+#define GL_EXT_geometry_shader4 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProgramParameteriEXT (GLuint, GLenum, GLint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
+#endif
+
+#ifndef GL_NV_vertex_program4
+#define GL_NV_vertex_program4 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glVertexAttribI1iEXT (GLuint, GLint);
+GLAPI void APIENTRY glVertexAttribI2iEXT (GLuint, GLint, GLint);
+GLAPI void APIENTRY glVertexAttribI3iEXT (GLuint, GLint, GLint, GLint);
+GLAPI void APIENTRY glVertexAttribI4iEXT (GLuint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glVertexAttribI1uiEXT (GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI2uiEXT (GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI3uiEXT (GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI4uiEXT (GLuint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glVertexAttribI1ivEXT (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI2ivEXT (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI3ivEXT (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI4ivEXT (GLuint, const GLint *);
+GLAPI void APIENTRY glVertexAttribI1uivEXT (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI2uivEXT (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI3uivEXT (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI4uivEXT (GLuint, const GLuint *);
+GLAPI void APIENTRY glVertexAttribI4bvEXT (GLuint, const GLbyte *);
+GLAPI void APIENTRY glVertexAttribI4svEXT (GLuint, const GLshort *);
+GLAPI void APIENTRY glVertexAttribI4ubvEXT (GLuint, const GLubyte *);
+GLAPI void APIENTRY glVertexAttribI4usvEXT (GLuint, const GLushort *);
+GLAPI void APIENTRY glVertexAttribIPointerEXT (GLuint, GLint, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glGetVertexAttribIivEXT (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetVertexAttribIuivEXT (GLuint, GLenum, GLuint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
+#endif
+
+#ifndef GL_EXT_gpu_shader4
+#define GL_EXT_gpu_shader4 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetUniformuivEXT (GLuint, GLint, GLuint *);
+GLAPI void APIENTRY glBindFragDataLocationEXT (GLuint, GLuint, const GLchar *);
+GLAPI GLint APIENTRY glGetFragDataLocationEXT (GLuint, const GLchar *);
+GLAPI void APIENTRY glUniform1uiEXT (GLint, GLuint);
+GLAPI void APIENTRY glUniform2uiEXT (GLint, GLuint, GLuint);
+GLAPI void APIENTRY glUniform3uiEXT (GLint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glUniform4uiEXT (GLint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glUniform1uivEXT (GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glUniform2uivEXT (GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glUniform3uivEXT (GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glUniform4uivEXT (GLint, GLsizei, const GLuint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
+typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
+typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
+typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
+typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
+typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
+typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
+#endif
+
+#ifndef GL_EXT_draw_instanced
+#define GL_EXT_draw_instanced 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum, GLsizei, GLenum, const GLvoid *, GLsizei);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
+typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
+#endif
+
+#ifndef GL_EXT_packed_float
+#define GL_EXT_packed_float 1
+#endif
+
+#ifndef GL_EXT_texture_array
+#define GL_EXT_texture_array 1
+#endif
+
+#ifndef GL_EXT_texture_buffer_object
+#define GL_EXT_texture_buffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTexBufferEXT (GLenum, GLenum, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
+#endif
+
+#ifndef GL_EXT_texture_compression_latc
+#define GL_EXT_texture_compression_latc 1
+#endif
+
+#ifndef GL_EXT_texture_compression_rgtc
+#define GL_EXT_texture_compression_rgtc 1
+#endif
+
+#ifndef GL_EXT_texture_shared_exponent
+#define GL_EXT_texture_shared_exponent 1
+#endif
+
+#ifndef GL_NV_depth_buffer_float
+#define GL_NV_depth_buffer_float 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glDepthRangedNV (GLdouble, GLdouble);
+GLAPI void APIENTRY glClearDepthdNV (GLdouble);
+GLAPI void APIENTRY glDepthBoundsdNV (GLdouble, GLdouble);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
+typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
+typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
+#endif
+
+#ifndef GL_NV_fragment_program4
+#define GL_NV_fragment_program4 1
+#endif
+
+#ifndef GL_NV_framebuffer_multisample_coverage
+#define GL_NV_framebuffer_multisample_coverage 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+#endif
+
+#ifndef GL_EXT_framebuffer_sRGB
+#define GL_EXT_framebuffer_sRGB 1
+#endif
+
+#ifndef GL_NV_geometry_shader4
+#define GL_NV_geometry_shader4 1
+#endif
+
+#ifndef GL_NV_parameter_buffer_object
+#define GL_NV_parameter_buffer_object 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProgramBufferParametersfvNV (GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glProgramBufferParametersIivNV (GLenum, GLuint, GLuint, GLsizei, const GLint *);
+GLAPI void APIENTRY glProgramBufferParametersIuivNV (GLenum, GLuint, GLuint, GLsizei, const GLuint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
+typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
+typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
+#endif
+
+#ifndef GL_EXT_draw_buffers2
+#define GL_EXT_draw_buffers2 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glColorMaskIndexedEXT (GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
+GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum, GLuint, GLboolean *);
+GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum, GLuint, GLint *);
+GLAPI void APIENTRY glEnableIndexedEXT (GLenum, GLuint);
+GLAPI void APIENTRY glDisableIndexedEXT (GLenum, GLuint);
+GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
+typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
+typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
+typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
+typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
+typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
+#endif
+
+#ifndef GL_NV_transform_feedback
+#define GL_NV_transform_feedback 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBeginTransformFeedbackNV (GLenum);
+GLAPI void APIENTRY glEndTransformFeedbackNV (void);
+GLAPI void APIENTRY glTransformFeedbackAttribsNV (GLuint, const GLint *, GLenum);
+GLAPI void APIENTRY glBindBufferRangeNV (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
+GLAPI void APIENTRY glBindBufferOffsetNV (GLenum, GLuint, GLuint, GLintptr);
+GLAPI void APIENTRY glBindBufferBaseNV (GLenum, GLuint, GLuint);
+GLAPI void APIENTRY glTransformFeedbackVaryingsNV (GLuint, GLsizei, const GLchar* *, GLenum);
+GLAPI void APIENTRY glActiveVaryingNV (GLuint, const GLchar *);
+GLAPI GLint APIENTRY glGetVaryingLocationNV (GLuint, const GLchar *);
+GLAPI void APIENTRY glGetActiveVaryingNV (GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
+GLAPI void APIENTRY glGetTransformFeedbackVaryingNV (GLuint, GLuint, GLint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
+typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
+typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
+typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
+typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
+typedef GLint (APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
+typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
+#endif
+
+#ifndef GL_EXT_bindable_uniform
+#define GL_EXT_bindable_uniform 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glUniformBufferEXT (GLuint, GLint, GLuint);
+GLAPI GLint APIENTRY glGetUniformBufferSizeEXT (GLuint, GLint);
+GLAPI GLintptr APIENTRY glGetUniformOffsetEXT (GLuint, GLint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
+typedef GLint (APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
+typedef GLintptr (APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
+#endif
+
+#ifndef GL_EXT_texture_integer
+#define GL_EXT_texture_integer 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTexParameterIivEXT (GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glTexParameterIuivEXT (GLenum, GLenum, const GLuint *);
+GLAPI void APIENTRY glGetTexParameterIivEXT (GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetTexParameterIuivEXT (GLenum, GLenum, GLuint *);
+GLAPI void APIENTRY glClearColorIiEXT (GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glClearColorIuiEXT (GLuint, GLuint, GLuint, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
+typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
+typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
+#endif
+
+#ifndef GL_GREMEDY_frame_terminator
+#define GL_GREMEDY_frame_terminator 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glFrameTerminatorGREMEDY (void);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC) (void);
+#endif
+
+#ifndef GL_NV_conditional_render
+#define GL_NV_conditional_render 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint, GLenum);
+GLAPI void APIENTRY glEndConditionalRenderNV (void);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
+typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void);
+#endif
+
+#ifndef GL_NV_present_video
+#define GL_NV_present_video 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glPresentFrameKeyedNV (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
+GLAPI void APIENTRY glPresentFrameDualFillNV (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
+GLAPI void APIENTRY glGetVideoivNV (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetVideouivNV (GLuint, GLenum, GLuint *);
+GLAPI void APIENTRY glGetVideoi64vNV (GLuint, GLenum, GLint64EXT *);
+GLAPI void APIENTRY glGetVideoui64vNV (GLuint, GLenum, GLuint64EXT *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
+typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
+typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);
+typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);
+#endif
+
+#ifndef GL_EXT_transform_feedback
+#define GL_EXT_transform_feedback 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBeginTransformFeedbackEXT (GLenum);
+GLAPI void APIENTRY glEndTransformFeedbackEXT (void);
+GLAPI void APIENTRY glBindBufferRangeEXT (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
+GLAPI void APIENTRY glBindBufferOffsetEXT (GLenum, GLuint, GLuint, GLintptr);
+GLAPI void APIENTRY glBindBufferBaseEXT (GLenum, GLuint, GLuint);
+GLAPI void APIENTRY glTransformFeedbackVaryingsEXT (GLuint, GLsizei, const GLchar* *, GLenum);
+GLAPI void APIENTRY glGetTransformFeedbackVaryingEXT (GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
+typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
+typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
+typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
+typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
+typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
+typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
+#endif
+
+#ifndef GL_EXT_direct_state_access
+#define GL_EXT_direct_state_access 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield);
+GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield);
+GLAPI void APIENTRY glMatrixLoadfEXT (GLenum, const GLfloat *);
+GLAPI void APIENTRY glMatrixLoaddEXT (GLenum, const GLdouble *);
+GLAPI void APIENTRY glMatrixMultfEXT (GLenum, const GLfloat *);
+GLAPI void APIENTRY glMatrixMultdEXT (GLenum, const GLdouble *);
+GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum);
+GLAPI void APIENTRY glMatrixRotatefEXT (GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glMatrixRotatedEXT (GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glMatrixScalefEXT (GLenum, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glMatrixScaledEXT (GLenum, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glMatrixFrustumEXT (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glMatrixOrthoEXT (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glMatrixPopEXT (GLenum);
+GLAPI void APIENTRY glMatrixPushEXT (GLenum);
+GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum, const GLfloat *);
+GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum, const GLdouble *);
+GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum, const GLfloat *);
+GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum, const GLdouble *);
+GLAPI void APIENTRY glTextureParameterfEXT (GLuint, GLenum, GLenum, GLfloat);
+GLAPI void APIENTRY glTextureParameterfvEXT (GLuint, GLenum, GLenum, const GLfloat *);
+GLAPI void APIENTRY glTextureParameteriEXT (GLuint, GLenum, GLenum, GLint);
+GLAPI void APIENTRY glTextureParameterivEXT (GLuint, GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glTextureImage1DEXT (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTextureImage2DEXT (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
+GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
+GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
+GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glGetTextureImageEXT (GLuint, GLenum, GLint, GLenum, GLenum, GLvoid *);
+GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint, GLenum, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint, GLenum, GLint, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint, GLenum, GLint, GLenum, GLint *);
+GLAPI void APIENTRY glTextureImage3DEXT (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum, GLenum, GLenum, GLfloat);
+GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum, GLenum, GLenum, const GLfloat *);
+GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum, GLenum, GLenum, GLint);
+GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum, GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
+GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
+GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
+GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum, GLenum, GLint, GLenum, GLenum, GLvoid *);
+GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum, GLenum, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum, GLenum, GLint, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum, GLenum, GLint, GLenum, GLint *);
+GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *);
+GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
+GLAPI void APIENTRY glBindMultiTextureEXT (GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum, GLuint);
+GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum, GLuint);
+GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum, GLint, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum, GLenum, GLenum, GLfloat);
+GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum, GLenum, GLenum, const GLfloat *);
+GLAPI void APIENTRY glMultiTexEnviEXT (GLenum, GLenum, GLenum, GLint);
+GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum, GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glMultiTexGendEXT (GLenum, GLenum, GLenum, GLdouble);
+GLAPI void APIENTRY glMultiTexGendvEXT (GLenum, GLenum, GLenum, const GLdouble *);
+GLAPI void APIENTRY glMultiTexGenfEXT (GLenum, GLenum, GLenum, GLfloat);
+GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum, GLenum, GLenum, const GLfloat *);
+GLAPI void APIENTRY glMultiTexGeniEXT (GLenum, GLenum, GLenum, GLint);
+GLAPI void APIENTRY glMultiTexGenivEXT (GLenum, GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum, GLenum, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum, GLenum, GLenum, GLdouble *);
+GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum, GLenum, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum, GLuint, GLfloat *);
+GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum, GLuint, GLdouble *);
+GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum, GLuint, GLvoid* *);
+GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint, GLenum, GLint, GLvoid *);
+GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum, GLenum, GLint, GLvoid *);
+GLAPI void APIENTRY glNamedProgramStringEXT (GLuint, GLenum, GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
+GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint, GLenum, GLuint, const GLdouble *);
+GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint, GLenum, GLuint, const GLfloat *);
+GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint, GLenum, GLuint, GLdouble *);
+GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint, GLenum, GLuint, GLfloat *);
+GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint, GLenum, GLenum, GLvoid *);
+GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint, GLenum, GLuint, const GLint *);
+GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint, GLenum, GLuint, GLsizei, const GLint *);
+GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint, GLenum, GLuint, const GLuint *);
+GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint, GLenum, GLuint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint, GLenum, GLuint, GLint *);
+GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint, GLenum, GLuint, GLuint *);
+GLAPI void APIENTRY glTextureParameterIivEXT (GLuint, GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint, GLenum, GLenum, const GLuint *);
+GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint, GLenum, GLenum, GLuint *);
+GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum, GLenum, GLenum, const GLint *);
+GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum, GLenum, GLenum, const GLuint *);
+GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum, GLenum, GLenum, GLuint *);
+GLAPI void APIENTRY glProgramUniform1fEXT (GLuint, GLint, GLfloat);
+GLAPI void APIENTRY glProgramUniform2fEXT (GLuint, GLint, GLfloat, GLfloat);
+GLAPI void APIENTRY glProgramUniform3fEXT (GLuint, GLint, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glProgramUniform4fEXT (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
+GLAPI void APIENTRY glProgramUniform1iEXT (GLuint, GLint, GLint);
+GLAPI void APIENTRY glProgramUniform2iEXT (GLuint, GLint, GLint, GLint);
+GLAPI void APIENTRY glProgramUniform3iEXT (GLuint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glProgramUniform4iEXT (GLuint, GLint, GLint, GLint, GLint, GLint);
+GLAPI void APIENTRY glProgramUniform1fvEXT (GLuint, GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glProgramUniform2fvEXT (GLuint, GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glProgramUniform3fvEXT (GLuint, GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glProgramUniform4fvEXT (GLuint, GLint, GLsizei, const GLfloat *);
+GLAPI void APIENTRY glProgramUniform1ivEXT (GLuint, GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glProgramUniform2ivEXT (GLuint, GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glProgramUniform3ivEXT (GLuint, GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glProgramUniform4ivEXT (GLuint, GLint, GLsizei, const GLint *);
+GLAPI void APIENTRY glProgramUniformMatrix2fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix3fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix4fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
+GLAPI void APIENTRY glProgramUniform1uiEXT (GLuint, GLint, GLuint);
+GLAPI void APIENTRY glProgramUniform2uiEXT (GLuint, GLint, GLuint, GLuint);
+GLAPI void APIENTRY glProgramUniform3uiEXT (GLuint, GLint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glProgramUniform4uiEXT (GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
+GLAPI void APIENTRY glProgramUniform1uivEXT (GLuint, GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glProgramUniform2uivEXT (GLuint, GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint, GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint, GLint, GLsizei, const GLuint *);
+GLAPI void APIENTRY glNamedBufferDataEXT (GLuint, GLsizeiptr, const GLvoid *, GLenum);
+GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint, GLintptr, GLsizeiptr, const GLvoid *);
+GLAPI GLvoid* APIENTRY glMapNamedBufferEXT (GLuint, GLenum);
+GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint);
+GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint, GLenum, GLvoid* *);
+GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint, GLintptr, GLsizeiptr, GLvoid *);
+GLAPI void APIENTRY glTextureBufferEXT (GLuint, GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glMultiTexBufferEXT (GLenum, GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint, GLenum, GLsizei, GLsizei);
+GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint, GLenum, GLint *);
+GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint, GLenum);
+GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint, GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint, GLenum, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint, GLenum, GLenum, GLuint, GLint, GLint);
+GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint, GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint, GLenum, GLenum, GLint *);
+GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint, GLenum);
+GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum, GLenum);
+GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint, GLenum);
+GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint, GLsizei, const GLenum *);
+GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint, GLenum);
+GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint, GLsizei, GLenum, GLsizei, GLsizei);
+GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
+GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint, GLenum, GLuint, GLint);
+GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint, GLenum, GLuint, GLint, GLint);
+GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint, GLenum, GLuint, GLint, GLenum);
+GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint, GLenum, GLuint);
+GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum, GLenum, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
+typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
+typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);
+typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);
+typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);
+typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);
+typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
+typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
+typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
+typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode);
+typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
+typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
+typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
+typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
+typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
+typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
+typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
+typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
+typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
+typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
+typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
+typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
+typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
+typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
+typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
+typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
+typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);
+typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);
+typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLvoid* *data);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, GLvoid *img);
+typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
+typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
+typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);
+typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, GLvoid *string);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);
+typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
+typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);
+typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);
+typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
+typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
+typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
+typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
+typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
+typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
+typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, GLvoid* *params);
+typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
+typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
+typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
+typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
+typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
+typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
+typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
+typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
+typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
+typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
+typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
+typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
+typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
+typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
+typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
+#endif
+
+#ifndef GL_EXT_vertex_array_bgra
+#define GL_EXT_vertex_array_bgra 1
+#endif
+
+#ifndef GL_EXT_texture_swizzle
+#define GL_EXT_texture_swizzle 1
+#endif
+
+#ifndef GL_NV_explicit_multisample
+#define GL_NV_explicit_multisample 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetMultisamplefvNV (GLenum, GLuint, GLfloat *);
+GLAPI void APIENTRY glSampleMaskIndexedNV (GLuint, GLbitfield);
+GLAPI void APIENTRY glTexRenderbufferNV (GLenum, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);
+typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
+typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);
+#endif
+
+#ifndef GL_NV_transform_feedback2
+#define GL_NV_transform_feedback2 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBindTransformFeedbackNV (GLenum, GLuint);
+GLAPI void APIENTRY glDeleteTransformFeedbacksNV (GLsizei, const GLuint *);
+GLAPI void APIENTRY glGenTransformFeedbacksNV (GLsizei, GLuint *);
+GLAPI GLboolean APIENTRY glIsTransformFeedbackNV (GLuint);
+GLAPI void APIENTRY glPauseTransformFeedbackNV (void);
+GLAPI void APIENTRY glResumeTransformFeedbackNV (void);
+GLAPI void APIENTRY glDrawTransformFeedbackNV (GLenum, GLuint);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
+typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);
+typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);
+typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
+typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
+typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
+typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);
+#endif
+
+#ifndef GL_ATI_meminfo
+#define GL_ATI_meminfo 1
+#endif
+
+#ifndef GL_AMD_performance_monitor
+#define GL_AMD_performance_monitor 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glGetPerfMonitorGroupsAMD (GLint *, GLsizei, GLuint *);
+GLAPI void APIENTRY glGetPerfMonitorCountersAMD (GLuint, GLint *, GLint *, GLsizei, GLuint *);
+GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint, GLsizei, GLsizei *, GLchar *);
+GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
+GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint, GLuint, GLenum, void *);
+GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei, GLuint *);
+GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei, GLuint *);
+GLAPI void APIENTRY glSelectPerfMonitorCountersAMD (GLuint, GLboolean, GLuint, GLint, GLuint *);
+GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint);
+GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint);
+GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint, GLenum, GLsizei, GLuint *, GLint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
+typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
+typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
+typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
+typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data);
+typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
+typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
+typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
+typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
+typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
+typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
+#endif
+
+#ifndef GL_AMD_texture_texture4
+#define GL_AMD_texture_texture4 1
+#endif
+
+#ifndef GL_AMD_vertex_shader_tesselator
+#define GL_AMD_vertex_shader_tesselator 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTessellationFactorAMD (GLfloat);
+GLAPI void APIENTRY glTessellationModeAMD (GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
+typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
+#endif
+
+#ifndef GL_EXT_provoking_vertex
+#define GL_EXT_provoking_vertex 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glProvokingVertexEXT (GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);
+#endif
+
+#ifndef GL_EXT_texture_snorm
+#define GL_EXT_texture_snorm 1
+#endif
+
+#ifndef GL_AMD_draw_buffers_blend
+#define GL_AMD_draw_buffers_blend 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint, GLenum, GLenum);
+GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint, GLenum, GLenum, GLenum, GLenum);
+GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint, GLenum);
+GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint, GLenum, GLenum);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
+typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
+typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
+typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
+#endif
+
+#ifndef GL_APPLE_texture_range
+#define GL_APPLE_texture_range 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTextureRangeAPPLE (GLenum, GLsizei, const GLvoid *);
+GLAPI void APIENTRY glGetTexParameterPointervAPPLE (GLenum, GLenum, GLvoid* *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const GLvoid *pointer);
+typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid* *params);
+#endif
+
+#ifndef GL_APPLE_float_pixels
+#define GL_APPLE_float_pixels 1
+#endif
+
+#ifndef GL_APPLE_vertex_program_evaluators
+#define GL_APPLE_vertex_program_evaluators 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glEnableVertexAttribAPPLE (GLuint, GLenum);
+GLAPI void APIENTRY glDisableVertexAttribAPPLE (GLuint, GLenum);
+GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint, GLenum);
+GLAPI void APIENTRY glMapVertexAttrib1dAPPLE (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
+GLAPI void APIENTRY glMapVertexAttrib1fAPPLE (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
+GLAPI void APIENTRY glMapVertexAttrib2dAPPLE (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
+GLAPI void APIENTRY glMapVertexAttrib2fAPPLE (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
+typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
+typedef GLboolean (APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
+typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
+typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
+typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
+typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
+#endif
+
+#ifndef GL_APPLE_aux_depth_stencil
+#define GL_APPLE_aux_depth_stencil 1
+#endif
+
+#ifndef GL_APPLE_object_purgeable
+#define GL_APPLE_object_purgeable 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI GLenum APIENTRY glObjectPurgeableAPPLE (GLenum, GLuint, GLenum);
+GLAPI GLenum APIENTRY glObjectUnpurgeableAPPLE (GLenum, GLuint, GLenum);
+GLAPI void APIENTRY glGetObjectParameterivAPPLE (GLenum, GLuint, GLenum, GLint *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef GLenum (APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
+typedef GLenum (APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
+typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);
+#endif
+
+#ifndef GL_APPLE_row_bytes
+#define GL_APPLE_row_bytes 1
+#endif
+
+#ifndef GL_APPLE_rgb_422
+#define GL_APPLE_rgb_422 1
+#endif
+
+#ifndef GL_NV_video_capture
+#define GL_NV_video_capture 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBeginVideoCaptureNV (GLuint);
+GLAPI void APIENTRY glBindVideoCaptureStreamBufferNV (GLuint, GLuint, GLenum, GLintptrARB);
+GLAPI void APIENTRY glBindVideoCaptureStreamTextureNV (GLuint, GLuint, GLenum, GLenum, GLuint);
+GLAPI void APIENTRY glEndVideoCaptureNV (GLuint);
+GLAPI void APIENTRY glGetVideoCaptureivNV (GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetVideoCaptureStreamivNV (GLuint, GLuint, GLenum, GLint *);
+GLAPI void APIENTRY glGetVideoCaptureStreamfvNV (GLuint, GLuint, GLenum, GLfloat *);
+GLAPI void APIENTRY glGetVideoCaptureStreamdvNV (GLuint, GLuint, GLenum, GLdouble *);
+GLAPI GLenum APIENTRY glVideoCaptureNV (GLuint, GLuint *, GLuint64EXT *);
+GLAPI void APIENTRY glVideoCaptureStreamParameterivNV (GLuint, GLuint, GLenum, const GLint *);
+GLAPI void APIENTRY glVideoCaptureStreamParameterfvNV (GLuint, GLuint, GLenum, const GLfloat *);
+GLAPI void APIENTRY glVideoCaptureStreamParameterdvNV (GLuint, GLuint, GLenum, const GLdouble *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
+typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
+typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
+typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
+typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
+typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
+typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
+typedef GLenum (APIENTRYP PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
+typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
+typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
+typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
+#endif
+
+#ifndef GL_NV_copy_image
+#define GL_NV_copy_image 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glCopyImageSubDataNV (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+#endif
+
+#ifndef GL_EXT_separate_shader_objects
+#define GL_EXT_separate_shader_objects 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glUseShaderProgramEXT (GLenum, GLuint);
+GLAPI void APIENTRY glActiveProgramEXT (GLuint);
+GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum, const GLchar *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
+typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
+typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);
+#endif
+
+#ifndef GL_NV_parameter_buffer_object2
+#define GL_NV_parameter_buffer_object2 1
+#endif
+
+#ifndef GL_NV_shader_buffer_load
+#define GL_NV_shader_buffer_load 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glMakeBufferResidentNV (GLenum, GLenum);
+GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum);
+GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum);
+GLAPI void APIENTRY glNamedMakeBufferResidentNV (GLuint, GLenum);
+GLAPI void APIENTRY glNamedMakeBufferNonResidentNV (GLuint);
+GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint);
+GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum, GLenum, GLuint64EXT *);
+GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint, GLenum, GLuint64EXT *);
+GLAPI void APIENTRY glGetIntegerui64vNV (GLenum, GLuint64EXT *);
+GLAPI void APIENTRY glUniformui64NV (GLint, GLuint64EXT);
+GLAPI void APIENTRY glUniformui64vNV (GLint, GLsizei, const GLuint64EXT *);
+GLAPI void APIENTRY glGetUniformui64vNV (GLuint, GLint, GLuint64EXT *);
+GLAPI void APIENTRY glProgramUniformui64NV (GLuint, GLint, GLuint64EXT);
+GLAPI void APIENTRY glProgramUniformui64vNV (GLuint, GLint, GLsizei, const GLuint64EXT *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
+typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
+typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
+typedef void (APIENTRYP PFNGLNAMEDMAKEBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
+typedef void (APIENTRYP PFNGLNAMEDMAKEBUFFERNONRESIDENTNVPROC) (GLuint buffer);
+typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
+typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);
+typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);
+typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);
+typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
+typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
+typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
+typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
+#endif
+
+#ifndef GL_NV_vertex_buffer_unified_memory
+#define GL_NV_vertex_buffer_unified_memory 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glBufferAddressRangeNV (GLenum, GLuint, GLuint64EXT, GLsizeiptr);
+GLAPI void APIENTRY glVertexFormatNV (GLint, GLenum, GLsizei);
+GLAPI void APIENTRY glNormalFormatNV (GLenum, GLsizei);
+GLAPI void APIENTRY glColorFormatNV (GLint, GLenum, GLsizei);
+GLAPI void APIENTRY glIndexFormatNV (GLenum, GLsizei);
+GLAPI void APIENTRY glTexCoordFormatNV (GLint, GLenum, GLsizei);
+GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei);
+GLAPI void APIENTRY glSecondaryColorFormatNV (GLint, GLenum, GLsizei);
+GLAPI void APIENTRY glFogCoordFormatNV (GLenum, GLsizei);
+GLAPI void APIENTRY glVertexAttribFormatNV (GLuint, GLint, GLenum, GLboolean, GLsizei);
+GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint, GLint, GLenum, GLsizei);
+GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum, GLuint, GLuint64EXT *);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
+typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
+typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
+typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
+typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);
+#endif
+
+#ifndef GL_NV_texture_barrier
+#define GL_NV_texture_barrier 1
+#ifdef GL_GLEXT_PROTOTYPES
+GLAPI void APIENTRY glTextureBarrierNV (void);
+#endif /* GL_GLEXT_PROTOTYPES */
+typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void);
 #endif
 
 
diff --git a/gdk/glext/glxext-extra.h b/gdk/glext/glxext-extra.h
index 17a8c9e..e12fcbc 100644
--- a/gdk/glext/glxext-extra.h
+++ b/gdk/glext/glxext-extra.h
@@ -67,26 +67,10 @@ extern "C" {
  * MESA
  */
 
-#ifndef GLX_MESA_agp_offset
-#define GLX_MESA_agp_offset 1
-#ifdef GLX_GLXEXT_PROTOTYPES
-extern GLuint glXGetAGPOffsetMESA (const GLvoid *);
-#endif /* GLX_GLXEXT_PROTOTYPES */
-typedef GLuint ( * PFNGLXGETAGPOFFSETMESAPROC) (const GLvoid *pointer);
-#endif
-
 /*
  * NV
  */
 
-#ifndef GLX_NV_float_buffer
-#define GLX_FLOAT_COMPONENTS_NV         0x20B0
-#endif
-
-#ifndef GLX_NV_float_buffer
-#define GLX_NV_float_buffer 1
-#endif
-
 #ifndef GLX_NV_vertex_array_range
 #define GLX_NV_vertex_array_range 1
 #ifdef GLX_GLXEXT_PROTOTYPES
diff --git a/gdk/glext/glxext.h b/gdk/glext/glxext.h
index 39b8ad6..c2c6635 100644
--- a/gdk/glext/glxext.h
+++ b/gdk/glext/glxext.h
@@ -6,35 +6,31 @@ extern "C" {
 #endif
 
 /*
-** License Applicability. Except to the extent portions of this file are
-** made subject to an alternative license as permitted in the SGI Free
-** Software License B, Version 1.1 (the "License"), the contents of this
-** file are subject only to the provisions of the License. You may not use
-** this file except in compliance with the License. You may obtain a copy
-** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
-** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
+** Copyright (c) 2007-2009 The Khronos Group Inc.
 ** 
-** http://oss.sgi.com/projects/FreeB
+** Permission is hereby granted, free of charge, to any person obtaining a
+** copy of this software and/or associated documentation files (the
+** "Materials"), to deal in the Materials without restriction, including
+** without limitation the rights to use, copy, modify, merge, publish,
+** distribute, sublicense, and/or sell copies of the Materials, and to
+** permit persons to whom the Materials are furnished to do so, subject to
+** the following conditions:
 ** 
-** Note that, as provided in the License, the Software is distributed on an
-** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
-** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
-** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
-** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
+** The above copyright notice and this permission notice shall be included
+** in all copies or substantial portions of the Materials.
 ** 
-** Original Code. The Original Code is: OpenGL Sample Implementation,
-** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
-** Inc. The Original Code is Copyright (c) 1991-2002 Silicon Graphics, Inc.
-** Copyright in any portions created by third parties is as indicated
-** elsewhere herein. All Rights Reserved.
-** 
-** Additional Notice Provisions: This software was created using the
-** OpenGL(R) version 1.2.1 Sample Implementation published by SGI, but has
-** not been independently verified as being compliant with the OpenGL(R)
-** version 1.2.1 Specification.
+** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 */
 
-#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__)
+/* Function declaration macros - to move into glplatform.h */
+
+#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 #endif
@@ -42,6 +38,9 @@ extern "C" {
 #ifndef APIENTRY
 #define APIENTRY
 #endif
+#ifndef APIENTRYP
+#define APIENTRYP APIENTRY *
+#endif
 #ifndef GLAPI
 #define GLAPI extern
 #endif
@@ -49,9 +48,9 @@ extern "C" {
 /*************************************************************/
 
 /* Header file version number, required by OpenGL ABI for Linux */
-/* glxext.h last updated 2002/03/22 */
-/* Current version at http://oss.sgi.com/projects/ogl-sample/registry/ */
-#define GLX_GLXEXT_VERSION 5
+/* glxext.h last updated 2009/09/11 */
+/* Current version at http://www.opengl.org/registry/ */
+#define GLX_GLXEXT_VERSION 24
 
 #ifndef GLX_VERSION_1_3
 #define GLX_WINDOW_BIT                     0x00000001
@@ -125,6 +124,25 @@ extern "C" {
 #define GLX_SAMPLES_ARB                    100001
 #endif
 
+#ifndef GLX_ARB_fbconfig_float
+#define GLX_RGBA_FLOAT_TYPE_ARB            0x20B9
+#define GLX_RGBA_FLOAT_BIT_ARB             0x00000004
+#endif
+
+#ifndef GLX_ARB_create_context
+#define GLX_CONTEXT_DEBUG_BIT_ARB          0x00000001
+#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
+#define GLX_CONTEXT_MAJOR_VERSION_ARB      0x2091
+#define GLX_CONTEXT_MINOR_VERSION_ARB      0x2092
+#define GLX_CONTEXT_FLAGS_ARB              0x2094
+#endif
+
+#ifndef GLX_ARB_create_context_profile
+#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB   0x00000001
+#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
+#define GLX_CONTEXT_PROFILE_MASK_ARB       0x9126
+#endif
+
 #ifndef GLX_SGIS_multisample
 #define GLX_SAMPLE_BUFFERS_SGIS            100000
 #define GLX_SAMPLES_SGIS                   100001
@@ -279,6 +297,100 @@ extern "C" {
 #ifndef GLX_OML_sync_control
 #endif
 
+#ifndef GLX_NV_float_buffer
+#define GLX_FLOAT_COMPONENTS_NV            0x20B0
+#endif
+
+#ifndef GLX_SGIX_hyperpipe
+#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
+#define GLX_BAD_HYPERPIPE_CONFIG_SGIX      91
+#define GLX_BAD_HYPERPIPE_SGIX             92
+#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX    0x00000001
+#define GLX_HYPERPIPE_RENDER_PIPE_SGIX     0x00000002
+#define GLX_PIPE_RECT_SGIX                 0x00000001
+#define GLX_PIPE_RECT_LIMITS_SGIX          0x00000002
+#define GLX_HYPERPIPE_STEREO_SGIX          0x00000003
+#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX   0x00000004
+#define GLX_HYPERPIPE_ID_SGIX              0x8030
+#endif
+
+#ifndef GLX_MESA_agp_offset
+#endif
+
+#ifndef GLX_EXT_fbconfig_packed_float
+#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT   0x20B1
+#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT    0x00000008
+#endif
+
+#ifndef GLX_EXT_framebuffer_sRGB
+#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT   0x20B2
+#endif
+
+#ifndef GLX_EXT_texture_from_pixmap
+#define GLX_TEXTURE_1D_BIT_EXT             0x00000001
+#define GLX_TEXTURE_2D_BIT_EXT             0x00000002
+#define GLX_TEXTURE_RECTANGLE_BIT_EXT      0x00000004
+#define GLX_BIND_TO_TEXTURE_RGB_EXT        0x20D0
+#define GLX_BIND_TO_TEXTURE_RGBA_EXT       0x20D1
+#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT     0x20D2
+#define GLX_BIND_TO_TEXTURE_TARGETS_EXT    0x20D3
+#define GLX_Y_INVERTED_EXT                 0x20D4
+#define GLX_TEXTURE_FORMAT_EXT             0x20D5
+#define GLX_TEXTURE_TARGET_EXT             0x20D6
+#define GLX_MIPMAP_TEXTURE_EXT             0x20D7
+#define GLX_TEXTURE_FORMAT_NONE_EXT        0x20D8
+#define GLX_TEXTURE_FORMAT_RGB_EXT         0x20D9
+#define GLX_TEXTURE_FORMAT_RGBA_EXT        0x20DA
+#define GLX_TEXTURE_1D_EXT                 0x20DB
+#define GLX_TEXTURE_2D_EXT                 0x20DC
+#define GLX_TEXTURE_RECTANGLE_EXT          0x20DD
+#define GLX_FRONT_LEFT_EXT                 0x20DE
+#define GLX_FRONT_RIGHT_EXT                0x20DF
+#define GLX_BACK_LEFT_EXT                  0x20E0
+#define GLX_BACK_RIGHT_EXT                 0x20E1
+#define GLX_FRONT_EXT                      GLX_FRONT_LEFT_EXT
+#define GLX_BACK_EXT                       GLX_BACK_LEFT_EXT
+#define GLX_AUX0_EXT                       0x20E2
+#define GLX_AUX1_EXT                       0x20E3
+#define GLX_AUX2_EXT                       0x20E4
+#define GLX_AUX3_EXT                       0x20E5
+#define GLX_AUX4_EXT                       0x20E6
+#define GLX_AUX5_EXT                       0x20E7
+#define GLX_AUX6_EXT                       0x20E8
+#define GLX_AUX7_EXT                       0x20E9
+#define GLX_AUX8_EXT                       0x20EA
+#define GLX_AUX9_EXT                       0x20EB
+#endif
+
+#ifndef GLX_NV_present_video
+#define GLX_NUM_VIDEO_SLOTS_NV             0x20F0
+#endif
+
+#ifndef GLX_NV_video_out
+#define GLX_VIDEO_OUT_COLOR_NV             0x20C3
+#define GLX_VIDEO_OUT_ALPHA_NV             0x20C4
+#define GLX_VIDEO_OUT_DEPTH_NV             0x20C5
+#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV   0x20C6
+#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV   0x20C7
+#define GLX_VIDEO_OUT_FRAME_NV             0x20C8
+#define GLX_VIDEO_OUT_FIELD_1_NV           0x20C9
+#define GLX_VIDEO_OUT_FIELD_2_NV           0x20CA
+#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV 0x20CB
+#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV 0x20CC
+#endif
+
+#ifndef GLX_NV_swap_group
+#endif
+
+#ifndef GLX_NV_video_capture
+#define GLX_DEVICE_ID_NV                   0x20CD
+#define GLX_UNIQUE_ID_NV                   0x20CE
+#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV     0x20CF
+#endif
+
+#ifndef GLX_NV_copy_image
+#endif
+
 
 /*************************************************************/
 
@@ -312,6 +424,54 @@ typedef struct {
 } GLXBufferClobberEventSGIX;
 #endif
 
+/* The next two typedefs are placeholders until NVIDIA clarifies these types */
+#ifndef GLX_NV_video_output
+/* GtkGLExt replaced the following typedef: */
+/* typedef struct { unsigned int dummy; } *GLXVideoDeviceNV; */
+typedef unsigned int GLXVideoDeviceNV;
+#endif
+
+#ifndef GLX_NV_video_capture
+typedef struct { unsigned int dummy; } *GLXVideoCaptureDeviceNV;
+#endif
+
+#ifndef GLEXT_64_TYPES_DEFINED
+/* This code block is duplicated in glext.h, so must be protected */
+#define GLEXT_64_TYPES_DEFINED
+/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
+/* (as used in the GLX_OML_sync_control extension). */
+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+#include <inttypes.h>
+#elif defined(__sun__) || defined(__digital__)
+#include <inttypes.h>
+#if defined(__STDC__)
+#if defined(__arch64__) || defined(_LP64)
+typedef long int int64_t;
+typedef unsigned long int uint64_t;
+#else
+typedef long long int int64_t;
+typedef unsigned long long int uint64_t;
+#endif /* __arch64__ */
+#endif /* __STDC__ */
+#elif defined( __VMS ) || defined(__sgi)
+#include <inttypes.h>
+#elif defined(__SCO__) || defined(__USLC__)
+#include <stdint.h>
+#elif defined(__UNIXOS2__) || defined(__SOL64__)
+typedef long int int32_t;
+typedef long long int int64_t;
+typedef unsigned long long int uint64_t;
+#elif defined(_WIN32) && defined(__GNUC__)
+#include <stdint.h>
+#elif defined(_WIN32)
+typedef __int32 int32_t;
+typedef __int64 int64_t;
+typedef unsigned __int64 uint64_t;
+#else
+#include <inttypes.h>     /* Fallback option */
+#endif
+#endif
+
 #ifndef GLX_VERSION_1_3
 #define GLX_VERSION_1_3 1
 #ifdef GLX_GLXEXT_PROTOTYPES
@@ -374,6 +534,22 @@ typedef __GLXextFuncPtr ( * PFNGLXGETPROCADDRESSARBPROC) (const GLubyte *procNam
 #define GLX_ARB_multisample 1
 #endif
 
+#ifndef GLX_ARB_fbconfig_float
+#define GLX_ARB_fbconfig_float 1
+#endif
+
+#ifndef GLX_ARB_create_context
+#define GLX_ARB_create_context 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern GLXContext glXCreateContextAttribsARB (Display *, GLXFBConfig, GLXContext, Bool, const int *);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef GLXContext ( * PFNGLXCREATECONTEXTATTRIBSARBPROC) (Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);
+#endif
+
+#ifndef GLX_ARB_create_context_profile
+#define GLX_ARB_create_context_profile 1
+#endif
+
 #ifndef GLX_SGIS_multisample
 #define GLX_SGIS_multisample 1
 #endif
@@ -419,9 +595,9 @@ extern void glXDestroyGLXVideoSourceSGIX (Display *, GLXVideoSourceSGIX);
 #endif /* GLX_GLXEXT_PROTOTYPES */
 typedef GLXVideoSourceSGIX ( * PFNGLXCREATEGLXVIDEOSOURCESGIXPROC) (Display *display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode);
 typedef void ( * PFNGLXDESTROYGLXVIDEOSOURCESGIXPROC) (Display *dpy, GLXVideoSourceSGIX glxvideosource);
+#endif /* _VL_H */
 #endif
 
-#endif /* _VL_H */
 #ifndef GLX_EXT_visual_rating
 #define GLX_EXT_visual_rating 1
 #endif
@@ -507,9 +683,9 @@ typedef int ( * PFNGLXCHANNELRECTSYNCSGIXPROC) (Display *display, int screen, in
 extern Bool glXAssociateDMPbufferSGIX (Display *, GLXPbufferSGIX, DMparams *, DMbuffer);
 #endif /* GLX_GLXEXT_PROTOTYPES */
 typedef Bool ( * PFNGLXASSOCIATEDMPBUFFERSGIXPROC) (Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer);
+#endif /* _DM_BUFFER_H_ */
 #endif
 
-#endif /* _DM_BUFFER_H_ */
 #ifndef GLX_SGIX_swap_group
 #define GLX_SGIX_swap_group 1
 #ifdef GLX_GLXEXT_PROTOTYPES
@@ -578,11 +754,6 @@ typedef Bool ( * PFNGLXSET3DFXMODEMESAPROC) (int mode);
 
 #ifndef GLX_OML_sync_control
 #define GLX_OML_sync_control 1
-#if defined(__STDC_VERSION__)
-#if __STDC_VERSION__ >= 199901L
-/* Include ISO C99 integer types for OML_sync_control; need a better test */
-#include <inttypes.h>
-
 #ifdef GLX_GLXEXT_PROTOTYPES
 extern Bool glXGetSyncValuesOML (Display *, GLXDrawable, int64_t *, int64_t *, int64_t *);
 extern Bool glXGetMscRateOML (Display *, GLXDrawable, int32_t *, int32_t *);
@@ -597,8 +768,153 @@ typedef Bool ( * PFNGLXWAITFORMSCOMLPROC) (Display *dpy, GLXDrawable drawable, i
 typedef Bool ( * PFNGLXWAITFORSBCOMLPROC) (Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc);
 #endif
 
-#endif /* C99 version test */
-#endif /* STDC test */
+#ifndef GLX_NV_float_buffer
+#define GLX_NV_float_buffer 1
+#endif
+
+#ifndef GLX_SGIX_hyperpipe
+#define GLX_SGIX_hyperpipe 1
+
+typedef struct {
+    char    pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+    int     networkId;
+} GLXHyperpipeNetworkSGIX;
+
+typedef struct {
+    char    pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+    int     channel;
+    unsigned int
+      participationType;
+    int     timeSlice;
+} GLXHyperpipeConfigSGIX;
+
+typedef struct {
+    char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+    int srcXOrigin, srcYOrigin, srcWidth, srcHeight;
+    int destXOrigin, destYOrigin, destWidth, destHeight;
+} GLXPipeRect;
+
+typedef struct {
+    char pipeName[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX];
+    int XOrigin, YOrigin, maxHeight, maxWidth;
+} GLXPipeRectLimits;
+
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern GLXHyperpipeNetworkSGIX * glXQueryHyperpipeNetworkSGIX (Display *, int *);
+extern int glXHyperpipeConfigSGIX (Display *, int, int, GLXHyperpipeConfigSGIX *, int *);
+extern GLXHyperpipeConfigSGIX * glXQueryHyperpipeConfigSGIX (Display *, int, int *);
+extern int glXDestroyHyperpipeConfigSGIX (Display *, int);
+extern int glXBindHyperpipeSGIX (Display *, int);
+extern int glXQueryHyperpipeBestAttribSGIX (Display *, int, int, int, void *, void *);
+extern int glXHyperpipeAttribSGIX (Display *, int, int, int, void *);
+extern int glXQueryHyperpipeAttribSGIX (Display *, int, int, int, void *);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef GLXHyperpipeNetworkSGIX * ( * PFNGLXQUERYHYPERPIPENETWORKSGIXPROC) (Display *dpy, int *npipes);
+typedef int ( * PFNGLXHYPERPIPECONFIGSGIXPROC) (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
+typedef GLXHyperpipeConfigSGIX * ( * PFNGLXQUERYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId, int *npipes);
+typedef int ( * PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) (Display *dpy, int hpId);
+typedef int ( * PFNGLXBINDHYPERPIPESGIXPROC) (Display *dpy, int hpId);
+typedef int ( * PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
+typedef int ( * PFNGLXHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *attribList);
+typedef int ( * PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
+#endif
+
+#ifndef GLX_MESA_agp_offset
+#define GLX_MESA_agp_offset 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern unsigned int glXGetAGPOffsetMESA (const void *);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef unsigned int ( * PFNGLXGETAGPOFFSETMESAPROC) (const void *pointer);
+#endif
+
+#ifndef GLX_EXT_fbconfig_packed_float
+#define GLX_EXT_fbconfig_packed_float 1
+#endif
+
+#ifndef GLX_EXT_framebuffer_sRGB
+#define GLX_EXT_framebuffer_sRGB 1
+#endif
+
+#ifndef GLX_EXT_texture_from_pixmap
+#define GLX_EXT_texture_from_pixmap 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern void glXBindTexImageEXT (Display *, GLXDrawable, int, const int *);
+extern void glXReleaseTexImageEXT (Display *, GLXDrawable, int);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef void ( * PFNGLXBINDTEXIMAGEEXTPROC) (Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list);
+typedef void ( * PFNGLXRELEASETEXIMAGEEXTPROC) (Display *dpy, GLXDrawable drawable, int buffer);
+#endif
+
+#ifndef GLX_NV_present_video
+#define GLX_NV_present_video 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern unsigned int * glXEnumerateVideoDevicesNV (Display *, int, int *);
+extern int glXBindVideoDeviceNV (Display *, unsigned int, unsigned int, const int *);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef unsigned int * ( * PFNGLXENUMERATEVIDEODEVICESNVPROC) (Display *dpy, int screen, int *nelements);
+typedef int ( * PFNGLXBINDVIDEODEVICENVPROC) (Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);
+#endif
+
+#ifndef GLX_NV_video_output
+#define GLX_NV_video_output 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern int glXGetVideoDeviceNV (Display *, int, int, GLXVideoDeviceNV *);
+extern int glXReleaseVideoDeviceNV (Display *, int, GLXVideoDeviceNV);
+extern int glXBindVideoImageNV (Display *, GLXVideoDeviceNV, GLXPbuffer, int);
+extern int glXReleaseVideoImageNV (Display *, GLXPbuffer);
+extern int glXSendPbufferToVideoNV (Display *, GLXPbuffer, int, unsigned long *, GLboolean);
+extern int glXGetVideoInfoNV (Display *, int, GLXVideoDeviceNV, unsigned long *, unsigned long *);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef int ( * PFNGLXGETVIDEODEVICENVPROC) (Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
+typedef int ( * PFNGLXRELEASEVIDEODEVICENVPROC) (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice);
+typedef int ( * PFNGLXBINDVIDEOIMAGENVPROC) (Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
+typedef int ( * PFNGLXRELEASEVIDEOIMAGENVPROC) (Display *dpy, GLXPbuffer pbuf);
+typedef int ( * PFNGLXSENDPBUFFERTOVIDEONVPROC) (Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);
+typedef int ( * PFNGLXGETVIDEOINFONVPROC) (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
+#endif
+
+#ifndef GLX_NV_swap_group
+#define GLX_NV_swap_group 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern Bool glXJoinSwapGroupNV (Display *, GLXDrawable, GLuint);
+extern Bool glXBindSwapBarrierNV (Display *, GLuint, GLuint);
+extern Bool glXQuerySwapGroupNV (Display *, GLXDrawable, GLuint *, GLuint *);
+extern Bool glXQueryMaxSwapGroupsNV (Display *, int, GLuint *, GLuint *);
+extern Bool glXQueryFrameCountNV (Display *, int, GLuint *);
+extern Bool glXResetFrameCountNV (Display *, int);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef Bool ( * PFNGLXJOINSWAPGROUPNVPROC) (Display *dpy, GLXDrawable drawable, GLuint group);
+typedef Bool ( * PFNGLXBINDSWAPBARRIERNVPROC) (Display *dpy, GLuint group, GLuint barrier);
+typedef Bool ( * PFNGLXQUERYSWAPGROUPNVPROC) (Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
+typedef Bool ( * PFNGLXQUERYMAXSWAPGROUPSNVPROC) (Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
+typedef Bool ( * PFNGLXQUERYFRAMECOUNTNVPROC) (Display *dpy, int screen, GLuint *count);
+typedef Bool ( * PFNGLXRESETFRAMECOUNTNVPROC) (Display *dpy, int screen);
+#endif
+
+#ifndef GLX_NV_video_capture
+#define GLX_NV_video_capture 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern int glXBindVideoCaptureDeviceNV (Display *, unsigned int, GLXVideoCaptureDeviceNV);
+extern GLXVideoCaptureDeviceNV * glXEnumerateVideoCaptureDevicesNV (Display *, int, int *);
+extern void glXLockVideoCaptureDeviceNV (Display *, GLXVideoCaptureDeviceNV);
+extern int glXQueryVideoCaptureDeviceNV (Display *, GLXVideoCaptureDeviceNV, int, int *);
+extern void glXReleaseVideoCaptureDeviceNV (Display *, GLXVideoCaptureDeviceNV);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef int ( * PFNGLXBINDVIDEOCAPTUREDEVICENVPROC) (Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
+typedef GLXVideoCaptureDeviceNV * ( * PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC) (Display *dpy, int screen, int *nelements);
+typedef void ( * PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC) (Display *dpy, GLXVideoCaptureDeviceNV device);
+typedef int ( * PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC) (Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
+typedef void ( * PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC) (Display *dpy, GLXVideoCaptureDeviceNV device);
+#endif
+
+#ifndef GLX_NV_copy_image
+#define GLX_NV_copy_image 1
+#ifdef GLX_GLXEXT_PROTOTYPES
+extern void glXCopyImageSubDataNV (Display *, GLXContext, GLuint, GLenum, GLint, GLint, GLint, GLint, GLXContext, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
+#endif /* GLX_GLXEXT_PROTOTYPES */
+typedef void ( * PFNGLXCOPYIMAGESUBDATANVPROC) (Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+#endif
+
 
 #ifdef __cplusplus
 }
diff --git a/gdk/glext/glxext.h.patch b/gdk/glext/glxext.h.patch
new file mode 100644
index 0000000..eab5300
--- /dev/null
+++ b/gdk/glext/glxext.h.patch
@@ -0,0 +1,13 @@
+--- glxext.h.orig	2009-09-11 17:06:19.000000000 +0530
++++ glxext.h	2009-09-30 18:47:25.000000000 +0530
+@@ -426,7 +426,9 @@
+ 
+ /* The next two typedefs are placeholders until NVIDIA clarifies these types */
+ #ifndef GLX_NV_video_output
+-typedef struct { unsigned int dummy; } *GLXVideoDeviceNV;
++/* GtkGLExt replaced the following typedef: */
++/* typedef struct { unsigned int dummy; } *GLXVideoDeviceNV; */
++typedef unsigned int GLXVideoDeviceNV;
+ #endif
+ 
+ #ifndef GLX_NV_video_capture
diff --git a/gdk/glext/wglext-extra.h b/gdk/glext/wglext-extra.h
index ceba327..5e8250e 100644
--- a/gdk/glext/wglext-extra.h
+++ b/gdk/glext/wglext-extra.h
@@ -51,16 +51,6 @@ extern "C" {
  * ATI
  */
 
-#ifndef WGL_ATI_pixel_format_float
-#define WGL_TYPE_RGBA_FLOAT_ATI            0x21A0
-#define GL_TYPE_RGBA_FLOAT_ATI             0x8820
-#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
-#endif
-
-#ifndef WGL_ATI_pixel_format_float
-#define WGL_ATI_pixel_format_float  1
-#endif
-
 /*
  * 3DFX
  */
@@ -77,30 +67,6 @@ extern "C" {
  * I3D
  */
 
-#ifndef WGL_I3D_unknown_genlock_extension_name
-#define WGL_GENLOCK_SOURCE_MULTIVIEW_I3D     0x2044
-#define WGL_GENLOCK_SOURCE_EXTENAL_SYNC_I3D  0x2045
-#define WGL_GENLOCK_SOURCE_EXTENAL_FIELD_I3D 0x2046
-#define WGL_GENLOCK_SOURCE_EXTENAL_TTL_I3D   0x2047
-#define WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D  0x2048
-#define WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D 0x2049
-#define WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D  0x204A
-#define WGL_GENLOCK_SOURCE_EDGE_RISING_I3D   0x204B
-#define WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D     0x204C
-#endif
-
-#ifndef WGL_I3D_unknown_gamma_extension_name
-#define WGL_GAMMA_TABLE_SIZE_I3D       0x204E
-#define WGL_GAMMA_EXCLUDE_DESKTOP_I3D  0x204F
-#endif
-
-#ifndef WGL_I3D_unknown_digital_video_cursor_extension_name
-#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D 0x2050
-#define WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D       0x2051
-#define WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D          0x2052
-#define WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D          0x2053
-#endif
-
 /*
  * NV
  */
diff --git a/gdk/glext/wglext.h b/gdk/glext/wglext.h
index 4474687..df96fbe 100644
--- a/gdk/glext/wglext.h
+++ b/gdk/glext/wglext.h
@@ -6,35 +6,31 @@ extern "C" {
 #endif
 
 /*
-** License Applicability. Except to the extent portions of this file are
-** made subject to an alternative license as permitted in the SGI Free
-** Software License B, Version 1.1 (the "License"), the contents of this
-** file are subject only to the provisions of the License. You may not use
-** this file except in compliance with the License. You may obtain a copy
-** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
-** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
+** Copyright (c) 2007-2009 The Khronos Group Inc.
 ** 
-** http://oss.sgi.com/projects/FreeB
+** Permission is hereby granted, free of charge, to any person obtaining a
+** copy of this software and/or associated documentation files (the
+** "Materials"), to deal in the Materials without restriction, including
+** without limitation the rights to use, copy, modify, merge, publish,
+** distribute, sublicense, and/or sell copies of the Materials, and to
+** permit persons to whom the Materials are furnished to do so, subject to
+** the following conditions:
 ** 
-** Note that, as provided in the License, the Software is distributed on an
-** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
-** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
-** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
-** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
+** The above copyright notice and this permission notice shall be included
+** in all copies or substantial portions of the Materials.
 ** 
-** Original Code. The Original Code is: OpenGL Sample Implementation,
-** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
-** Inc. The Original Code is Copyright (c) 1991-2002 Silicon Graphics, Inc.
-** Copyright in any portions created by third parties is as indicated
-** elsewhere herein. All Rights Reserved.
-** 
-** Additional Notice Provisions: This software was created using the
-** OpenGL(R) version 1.2.1 Sample Implementation published by SGI, but has
-** not been independently verified as being compliant with the OpenGL(R)
-** version 1.2.1 Specification.
+** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 */
 
-#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__)
+/* Function declaration macros - to move into glplatform.h */
+
+#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
 #define WIN32_LEAN_AND_MEAN 1
 #include <windows.h>
 #endif
@@ -42,6 +38,9 @@ extern "C" {
 #ifndef APIENTRY
 #define APIENTRY
 #endif
+#ifndef APIENTRYP
+#define APIENTRYP APIENTRY *
+#endif
 #ifndef GLAPI
 #define GLAPI extern
 #endif
@@ -49,9 +48,9 @@ extern "C" {
 /*************************************************************/
 
 /* Header file version number */
-/* wglext.h last updated 2002/03/22 */
-/* Current version at http://oss.sgi.com/projects/ogl-sample/registry/ */
-#define WGL_WGLEXT_VERSION 4
+/* wglext.h last updated 2009/09/16 */
+/* Current version at http://www.opengl.org/registry/ */
+#define WGL_WGLEXT_VERSION 17
 
 #ifndef WGL_ARB_buffer_region
 #define WGL_FRONT_COLOR_BUFFER_BIT_ARB 0x00000001
@@ -172,6 +171,27 @@ extern "C" {
 #define WGL_AUX9_ARB                   0x2090
 #endif
 
+#ifndef WGL_ARB_pixel_format_float
+#define WGL_TYPE_RGBA_FLOAT_ARB        0x21A0
+#endif
+
+#ifndef WGL_ARB_create_context
+#define WGL_CONTEXT_DEBUG_BIT_ARB      0x00000001
+#define WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
+#define WGL_CONTEXT_MAJOR_VERSION_ARB  0x2091
+#define WGL_CONTEXT_MINOR_VERSION_ARB  0x2092
+#define WGL_CONTEXT_LAYER_PLANE_ARB    0x2093
+#define WGL_CONTEXT_FLAGS_ARB          0x2094
+#define ERROR_INVALID_VERSION_ARB      0x2095
+#endif
+
+#ifndef WGL_ARB_create_context_profile
+#define WGL_CONTEXT_PROFILE_MASK_ARB   0x9126
+#define WGL_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001
+#define WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
+#define ERROR_INVALID_PROFILE_ARB      0x2096
+#endif
+
 #ifndef WGL_EXT_make_current_read
 #define ERROR_INVALID_PIXEL_TYPE_EXT   0x2043
 #endif
@@ -296,6 +316,10 @@ extern "C" {
 #define WGL_TEXTURE_RECTANGLE_NV       0x20A2
 #endif
 
+#ifndef WGL_ATI_pixel_format_float
+#define WGL_TYPE_RGBA_FLOAT_ATI        0x21A0
+#endif
+
 #ifndef WGL_NV_float_buffer
 #define WGL_FLOAT_COMPONENTS_NV        0x20B0
 #define WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV 0x20B1
@@ -308,6 +332,70 @@ extern "C" {
 #define WGL_TEXTURE_FLOAT_RGBA_NV      0x20B8
 #endif
 
+#ifndef WGL_3DL_stereo_control
+#define WGL_STEREO_EMITTER_ENABLE_3DL  0x2055
+#define WGL_STEREO_EMITTER_DISABLE_3DL 0x2056
+#define WGL_STEREO_POLARITY_NORMAL_3DL 0x2057
+#define WGL_STEREO_POLARITY_INVERT_3DL 0x2058
+#endif
+
+#ifndef WGL_EXT_pixel_format_packed_float
+#define WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT 0x20A8
+#endif
+
+#ifndef WGL_EXT_framebuffer_sRGB
+#define WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20A9
+#endif
+
+#ifndef WGL_NV_present_video
+#define WGL_NUM_VIDEO_SLOTS_NV         0x20F0
+#endif
+
+#ifndef WGL_NV_video_out
+#define WGL_BIND_TO_VIDEO_RGB_NV       0x20C0
+#define WGL_BIND_TO_VIDEO_RGBA_NV      0x20C1
+#define WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV 0x20C2
+#define WGL_VIDEO_OUT_COLOR_NV         0x20C3
+#define WGL_VIDEO_OUT_ALPHA_NV         0x20C4
+#define WGL_VIDEO_OUT_DEPTH_NV         0x20C5
+#define WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV 0x20C6
+#define WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV 0x20C7
+#define WGL_VIDEO_OUT_FRAME            0x20C8
+#define WGL_VIDEO_OUT_FIELD_1          0x20C9
+#define WGL_VIDEO_OUT_FIELD_2          0x20CA
+#define WGL_VIDEO_OUT_STACKED_FIELDS_1_2 0x20CB
+#define WGL_VIDEO_OUT_STACKED_FIELDS_2_1 0x20CC
+#endif
+
+#ifndef WGL_NV_swap_group
+#endif
+
+#ifndef WGL_NV_gpu_affinity
+#define WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV 0x20D0
+#define WGL_ERROR_MISSING_AFFINITY_MASK_NV 0x20D1
+#endif
+
+#ifndef WGL_AMD_gpu_association
+#define WGL_GPU_VENDOR_AMD             0x1F00
+#define WGL_GPU_RENDERER_STRING_AMD    0x1F01
+#define WGL_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
+#define WGL_GPU_FASTEST_TARGET_GPUS_AMD 0x21A2
+#define WGL_GPU_RAM_AMD                0x21A3
+#define WGL_GPU_CLOCK_AMD              0x21A4
+#define WGL_GPU_NUM_PIPES_AMD          0x21A5
+#define WGL_GPU_NUM_SIMD_AMD           0x21A6
+#define WGL_GPU_NUM_RB_AMD             0x21A7
+#define WGL_GPU_NUM_SPI_AMD            0x21A8
+#endif
+
+#ifndef NV_video_capture
+#define WGL_UNIQUE_ID_NV               0x20CE
+#define WGL_NUM_VIDEO_CAPTURE_SLOTS_NV 0x20CF
+#endif
+
+#ifndef NV_copy_image
+#endif
+
 
 /*************************************************************/
 
@@ -317,6 +405,27 @@ DECLARE_HANDLE(HPBUFFERARB);
 #ifndef WGL_EXT_pbuffer
 DECLARE_HANDLE(HPBUFFEREXT);
 #endif
+#ifndef WGL_NV_present_video
+DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);
+#endif
+#ifndef WGL_NV_video_output
+DECLARE_HANDLE(HPVIDEODEV);
+#endif
+#ifndef WGL_NV_gpu_affinity
+DECLARE_HANDLE(HPGPUNV);
+DECLARE_HANDLE(HGPUNV);
+
+typedef struct _GPU_DEVICE {
+    DWORD  cb;
+    CHAR   DeviceName[32];
+    CHAR   DeviceString[128];
+    DWORD  Flags;
+    RECT   rcVirtualScreen;
+} GPU_DEVICE, *PGPU_DEVICE;
+#endif
+#ifndef WGL_NV_video_capture
+DECLARE_HANDLE(HVIDEOINPUTDEVICENV);
+#endif
 
 #ifndef WGL_ARB_buffer_region
 #define WGL_ARB_buffer_region 1
@@ -394,6 +503,22 @@ typedef BOOL (WINAPI * PFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int
 typedef BOOL (WINAPI * PFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB hPbuffer, const int *piAttribList);
 #endif
 
+#ifndef WGL_ARB_pixel_format_float
+#define WGL_ARB_pixel_format_float 1
+#endif
+
+#ifndef WGL_ARB_create_context
+#define WGL_ARB_create_context 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern HGLRC WINAPI wglCreateContextAttribsARB (HDC, HGLRC, const int *);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef HGLRC (WINAPI * PFNWGLCREATECONTEXTATTRIBSARBPROC) (HDC hDC, HGLRC hShareContext, const int *attribList);
+#endif
+
+#ifndef WGL_ARB_create_context_profile
+#define WGL_ARB_create_context_profile 1
+#endif
+
 #ifndef WGL_EXT_display_color_table
 #define WGL_EXT_display_color_table 1
 #ifdef WGL_WGLEXT_PROTOTYPES
@@ -600,6 +725,142 @@ typedef BOOL (WINAPI * PFNWGLENDFRAMETRACKINGI3DPROC) (void);
 typedef BOOL (WINAPI * PFNWGLQUERYFRAMETRACKINGI3DPROC) (DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage);
 #endif
 
+#ifndef WGL_ATI_pixel_format_float
+#define WGL_ATI_pixel_format_float 1
+#endif
+
+#ifndef WGL_NV_float_buffer
+#define WGL_NV_float_buffer 1
+#endif
+
+#ifndef WGL_3DL_stereo_control
+#define WGL_3DL_stereo_control 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern BOOL WINAPI wglSetStereoEmitterState3DL (HDC, UINT);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef BOOL (WINAPI * PFNWGLSETSTEREOEMITTERSTATE3DLPROC) (HDC hDC, UINT uState);
+#endif
+
+#ifndef WGL_EXT_pixel_format_packed_float
+#define WGL_EXT_pixel_format_packed_float 1
+#endif
+
+#ifndef WGL_EXT_framebuffer_sRGB
+#define WGL_EXT_framebuffer_sRGB 1
+#endif
+
+#ifndef WGL_NV_present_video
+#define WGL_NV_present_video 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern int WINAPI wglEnumerateVideoDevicesNV (HDC, HVIDEOOUTPUTDEVICENV *);
+extern BOOL WINAPI wglBindVideoDeviceNV (HDC, unsigned int, HVIDEOOUTPUTDEVICENV, const int *);
+extern BOOL WINAPI wglQueryCurrentContextNV (int, int *);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef int (WINAPI * PFNWGLENUMERATEVIDEODEVICESNVPROC) (HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList);
+typedef BOOL (WINAPI * PFNWGLBINDVIDEODEVICENVPROC) (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
+typedef BOOL (WINAPI * PFNWGLQUERYCURRENTCONTEXTNVPROC) (int iAttribute, int *piValue);
+#endif
+
+#ifndef WGL_NV_video_output
+#define WGL_NV_video_output 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern BOOL WINAPI wglGetVideoDeviceNV (HDC, int, HPVIDEODEV *);
+extern BOOL WINAPI wglReleaseVideoDeviceNV (HPVIDEODEV);
+extern BOOL WINAPI wglBindVideoImageNV (HPVIDEODEV, HPBUFFERARB, int);
+extern BOOL WINAPI wglReleaseVideoImageNV (HPBUFFERARB, int);
+extern BOOL WINAPI wglSendPbufferToVideoNV (HPBUFFERARB, int, unsigned long *, BOOL);
+extern BOOL WINAPI wglGetVideoInfoNV (HPVIDEODEV, unsigned long *, unsigned long *);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef BOOL (WINAPI * PFNWGLGETVIDEODEVICENVPROC) (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
+typedef BOOL (WINAPI * PFNWGLRELEASEVIDEODEVICENVPROC) (HPVIDEODEV hVideoDevice);
+typedef BOOL (WINAPI * PFNWGLBINDVIDEOIMAGENVPROC) (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
+typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOIMAGENVPROC) (HPBUFFERARB hPbuffer, int iVideoBuffer);
+typedef BOOL (WINAPI * PFNWGLSENDPBUFFERTOVIDEONVPROC) (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
+typedef BOOL (WINAPI * PFNWGLGETVIDEOINFONVPROC) (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
+#endif
+
+#ifndef WGL_NV_swap_group
+#define WGL_NV_swap_group 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern BOOL WINAPI wglJoinSwapGroupNV (HDC, GLuint);
+extern BOOL WINAPI wglBindSwapBarrierNV (GLuint, GLuint);
+extern BOOL WINAPI wglQuerySwapGroupNV (HDC, GLuint *, GLuint *);
+extern BOOL WINAPI wglQueryMaxSwapGroupsNV (HDC, GLuint *, GLuint *);
+extern BOOL WINAPI wglQueryFrameCountNV (HDC, GLuint *);
+extern BOOL WINAPI wglResetFrameCountNV (HDC);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef BOOL (WINAPI * PFNWGLJOINSWAPGROUPNVPROC) (HDC hDC, GLuint group);
+typedef BOOL (WINAPI * PFNWGLBINDSWAPBARRIERNVPROC) (GLuint group, GLuint barrier);
+typedef BOOL (WINAPI * PFNWGLQUERYSWAPGROUPNVPROC) (HDC hDC, GLuint *group, GLuint *barrier);
+typedef BOOL (WINAPI * PFNWGLQUERYMAXSWAPGROUPSNVPROC) (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
+typedef BOOL (WINAPI * PFNWGLQUERYFRAMECOUNTNVPROC) (HDC hDC, GLuint *count);
+typedef BOOL (WINAPI * PFNWGLRESETFRAMECOUNTNVPROC) (HDC hDC);
+#endif
+
+#ifndef WGL_NV_gpu_affinity
+#define WGL_NV_gpu_affinity 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern BOOL WINAPI wglEnumGpusNV (UINT, HGPUNV *);
+extern BOOL WINAPI wglEnumGpuDevicesNV (HGPUNV, UINT, PGPU_DEVICE);
+extern HDC WINAPI wglCreateAffinityDCNV (const HGPUNV *);
+extern BOOL WINAPI wglEnumGpusFromAffinityDCNV (HDC, UINT, HGPUNV *);
+extern BOOL WINAPI wglDeleteDCNV (HDC);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef BOOL (WINAPI * PFNWGLENUMGPUSNVPROC) (UINT iGpuIndex, HGPUNV *phGpu);
+typedef BOOL (WINAPI * PFNWGLENUMGPUDEVICESNVPROC) (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
+typedef HDC (WINAPI * PFNWGLCREATEAFFINITYDCNVPROC) (const HGPUNV *phGpuList);
+typedef BOOL (WINAPI * PFNWGLENUMGPUSFROMAFFINITYDCNVPROC) (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
+typedef BOOL (WINAPI * PFNWGLDELETEDCNVPROC) (HDC hdc);
+#endif
+
+#ifndef WGL_AMD_gpu_association
+#define WGL_AMD_gpu_association 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern UINT WINAPI wglGetGPUIDsAMD (UINT, UINT *);
+extern INT WINAPI wglGetGPUInfoAMD (UINT, int, GLenum, UINT, void *);
+extern UINT WINAPI wglGetContextGPUIDAMD (HGLRC);
+extern HGLRC WINAPI wglCreateAssociatedContextAMD (UINT);
+extern HGLRC WINAPI wglCreateAssociatedContextAttribsAMD (UINT, HGLRC, const int *);
+extern BOOL WINAPI wglDeleteAssociatedContextAMD (HGLRC);
+extern BOOL WINAPI wglMakeAssociatedContextCurrentAMD (HGLRC);
+extern HGLRC WINAPI wglGetCurrentAssociatedContextAMD (void);
+extern VOID WINAPI wglBlitContextFramebufferAMD (HGLRC, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef UINT (WINAPI * PFNWGLGETGPUIDSAMDPROC) (UINT maxCount, UINT *ids);
+typedef INT (WINAPI * PFNWGLGETGPUINFOAMDPROC) (UINT id, int property, GLenum dataType, UINT size, void *data);
+typedef UINT (WINAPI * PFNWGLGETCONTEXTGPUIDAMDPROC) (HGLRC hglrc);
+typedef HGLRC (WINAPI * PFNWGLCREATEASSOCIATEDCONTEXTAMDPROC) (UINT id);
+typedef HGLRC (WINAPI * PFNWGLCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) (UINT id, HGLRC hShareContext, const int *attribList);
+typedef BOOL (WINAPI * PFNWGLDELETEASSOCIATEDCONTEXTAMDPROC) (HGLRC hglrc);
+typedef BOOL (WINAPI * PFNWGLMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) (HGLRC hglrc);
+typedef HGLRC (WINAPI * PFNWGLGETCURRENTASSOCIATEDCONTEXTAMDPROC) (void);
+typedef VOID (WINAPI * PFNWGLBLITCONTEXTFRAMEBUFFERAMDPROC) (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+#endif
+
+#ifndef WGL_NV_video_capture
+#define WGL_NV_video_capture 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern BOOL WINAPI wglBindVideoCaptureDeviceNV (UINT, HVIDEOINPUTDEVICENV);
+extern UINT WINAPI wglEnumerateVideoCaptureDevicesNV (HDC, HVIDEOINPUTDEVICENV *);
+extern BOOL WINAPI wglLockVideoCaptureDeviceNV (HDC, HVIDEOINPUTDEVICENV);
+extern BOOL WINAPI wglQueryVideoCaptureDeviceNV (HDC, HVIDEOINPUTDEVICENV, int, int *);
+extern BOOL WINAPI wglReleaseVideoCaptureDeviceNV (HDC, HVIDEOINPUTDEVICENV);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef BOOL (WINAPI * PFNWGLBINDVIDEOCAPTUREDEVICENVPROC) (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
+typedef UINT (WINAPI * PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC) (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);
+typedef BOOL (WINAPI * PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+typedef BOOL (WINAPI * PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
+typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+#endif
+
+#ifndef WGL_NV_copy_image
+#define WGL_NV_copy_image 1
+#ifdef WGL_WGLEXT_PROTOTYPES
+extern BOOL WINAPI wglCopyImageSubDataNV (HGLRC, GLuint, GLenum, GLint, GLint, GLint, GLint, HGLRC, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
+#endif /* WGL_WGLEXT_PROTOTYPES */
+typedef BOOL (WINAPI * PFNWGLCOPYIMAGESUBDATANVPROC) (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+#endif
+
 
 #ifdef __cplusplus
 }
diff --git a/gdk/gtkglenumtypes.c.template b/gdk/gtkglenumtypes.c.template
new file mode 100644
index 0000000..ea74620
--- /dev/null
+++ b/gdk/gtkglenumtypes.c.template
@@ -0,0 +1,33 @@
+/*** BEGIN file-header ***/
+/* Generated data (by glib-mkenums) */
+
+#include "gdkgl.h"
+
+/*** END file-header ***/
+
+/*** BEGIN file-production ***/
+/* enumerations from "@filename@" */
+/*** END file-production ***/
+
+/*** BEGIN value-header ***/
+GType
+@enum_name@_get_type (void)
+{
+    static GType etype = 0;
+    if (G_UNLIKELY(etype == 0)) {
+        static const G@Type@Value values[] = {
+/*** END value-header ***/
+
+/*** BEGIN value-production ***/
+            { @VALUENAME@, "@VALUENAME@", "@valuenick@" },
+/*** END value-production ***/
+
+/*** BEGIN value-tail ***/
+            { 0, NULL, NULL }
+        };
+        etype = g_@type@_register_static (g_intern_static_string ("@EnumName@"), values);
+    }
+    return etype;
+}
+
+/*** END value-tail ***/
diff --git a/gdk/gtkglenumtypes.h.template b/gdk/gtkglenumtypes.h.template
new file mode 100644
index 0000000..3d9f2f0
--- /dev/null
+++ b/gdk/gtkglenumtypes.h.template
@@ -0,0 +1,27 @@
+/*** BEGIN file-header ***/
+
+/* Generated data (by glib-mkenums) */
+
+#ifndef __GDK_GL_ENUM_TYPES_H__
+#define __GDK_GL_ENUM_TYPES_H__
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+/*** END file-header ***/
+
+/*** BEGIN file-production ***/
+
+/* enumerations from "@filename@" */
+/*** END file-production ***/
+
+/*** BEGIN value-header ***/
+GType @enum_name@_get_type (void) G_GNUC_CONST;
+#define @ENUMPREFIX@_TYPE_@ENUMSHORT@ (@enum_name@_get_type ())
+/*** END value-header ***/
+
+/*** BEGIN file-tail ***/
+G_END_DECLS
+
+#endif /* __GDK_GL_ENUM_TYPES_H__ */
+/*** END file-tail ***/
diff --git a/gdk/quartz/Makefile.am b/gdk/quartz/Makefile.am
new file mode 100644
index 0000000..9157ee9
--- /dev/null
+++ b/gdk/quartz/Makefile.am
@@ -0,0 +1,46 @@
+## -*- Makefile -*-
+## Makefile.am for gtkglext/gdk/quartz
+
+AM_CPPFLAGS = \
+	-DG_LOG_DOMAIN=\"GdkGLExt\"	\
+	-DGDK_GL_COMPILATION		\
+	-DINSIDE_GDK_GL_QUARTZ		\
+	-I$(top_srcdir)			\
+	-I$(top_srcdir)/gdk		\
+	-I$(top_builddir)/gdk		\
+	$(GTKGLEXT_DEBUG_FLAGS)		\
+	$(GDK_CFLAGS)			\
+	$(GL_CFLAGS)			\
+        $(GDKGLEXT_WIN_CFLAGS)
+
+AM_LDFLAGS = $(GDK_LIBS) $(GL_LIBS) $(GDKGLEXT_WIN_LIBS)
+
+gdkglext_quartz_public_h_sources = 
+gdkglext_quartz_private_h_sources = \
+	gdkglconfig-quartz.h	\
+	gdkglcontext-quartz.h	\
+	gdkglpixmap-quartz.h	\
+	gdkglwindow-quartz.h	\
+	gdkglprivate-quartz.h
+
+gdkglext_quartz_c_sources = \
+	gdkglquery-quartz.m	\
+	gdkglconfig-quartz.m	\
+	gdkglcontext-quartz.m	\
+	gdkgldrawable-quartz.m	\
+	gdkglpixmap-quartz.m	\
+	gdkglwindow-quartz.m	
+
+gdkglext_quartz_headers = \
+	$(gdkglext_quartz_public_h_sources)
+
+gdkglext_quartz_sources = \
+	$(gdkglext_quartz_private_h_sources)	\
+	$(gdkglext_quartz_c_sources)
+
+gdkglextquartzincludedir = $(includedir)/gtkglext-@GTKGLEXT_API_VERSION@/gdk/quartz
+gdkglextquartzinclude_HEADERS = $(gdkglext_quartz_headers)
+
+noinst_LTLIBRARIES = libgdkglext-quartz.la
+
+libgdkglext_quartz_la_SOURCES = $(gdkglext_quartz_sources)
diff --git a/gdk/quartz/gdkglconfig-quartz.h b/gdk/quartz/gdkglconfig-quartz.h
new file mode 100644
index 0000000..de2741c
--- /dev/null
+++ b/gdk/quartz/gdkglconfig-quartz.h
@@ -0,0 +1,42 @@
+#ifndef __GDK_GL_CONFIG_QUARTZ_H__
+#define __GDK_GL_CONFIG_QUARTZ_H__
+
+#include <gdk/gdkglconfig.h>
+#include <gdk/quartz/gdkglquartz.h>
+
+G_BEGIN_DECLS
+
+typedef struct _GdkGLConfigImplQuartz      GdkGLConfigImplQuartz;
+typedef struct _GdkGLConfigImplQuartzClass GdkGLConfigImplQuartzClass;
+  
+#define GDK_TYPE_GL_CONFIG_IMPL_QUARTZ              (gdk_gl_config_impl_quartz_get_type ())
+#define GDK_GL_CONFIG_IMPL_QUARTZ(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_CONFIG_IMPL_QUARTZ, GdkGLConfigImplQuartz))
+#define GDK_GL_CONFIG_IMPL_QUARTZ_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_CONFIG_IMPL_QUARTZ, GdkGLConfigImplQuartzClass))
+#define GDK_IS_GL_CONFIG_IMPL_QUARTZ(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_CONFIG_IMPL_QUARTZ))
+#define GDK_IS_GL_CONFIG_IMPL_QUARTZ_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_CONFIG_IMPL_QUARTZ))
+#define GDK_GL_CONFIG_IMPL_QUARTZ_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_CONFIG_IMPL_QUARTZ, GdkGLConfigImplQuartzClass))
+  
+  struct _GdkGLConfigImplQuartz
+  {
+    GdkGLConfig parent_instance;
+    
+    int screen_num;
+    
+    GdkScreen *screen;
+    
+    GdkColormap *colormap;
+    
+    NSOpenGLPixelFormat *quartzPixelFormat;
+  };
+
+struct _GdkGLConfigImplQuartzClass
+{
+  GdkGLConfigClass parent_class;
+};
+
+GType gdk_gl_config_impl_quartz_get_type (void);
+
+G_END_DECLS
+
+
+#endif
diff --git a/gdk/quartz/gdkglconfig-quartz.m b/gdk/quartz/gdkglconfig-quartz.m
new file mode 100644
index 0000000..3cfbd69
--- /dev/null
+++ b/gdk/quartz/gdkglconfig-quartz.m
@@ -0,0 +1,306 @@
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
+
+#include "gdkglprivate-quartz.h"
+#include "gdkglconfig-quartz.h"
+
+
+static void gdk_gl_config_impl_quartz_class_init (GdkGLConfigImplQuartzClass *klass);
+static void gdk_gl_config_impl_quartz_finalize   (GObject                    *object);
+
+static gpointer parent_class = NULL;
+
+GType
+gdk_gl_config_impl_quartz_get_type (void)
+{
+  static GType type = 0;
+  
+  if (!type)
+    {
+    static const GTypeInfo type_info = {
+      sizeof (GdkGLConfigImplQuartzClass),
+      (GBaseInitFunc) NULL,
+      (GBaseFinalizeFunc) NULL,
+      (GClassInitFunc) gdk_gl_config_impl_quartz_class_init,
+      (GClassFinalizeFunc) NULL,
+      NULL,                   /* class_data */
+      sizeof (GdkGLConfigImplQuartz),
+      0,                      /* n_preallocs */
+      (GInstanceInitFunc) NULL
+    };
+    
+    type = g_type_register_static (GDK_TYPE_GL_CONFIG,
+                     "GdkGLConfigImplQuartz",
+                     &type_info, 0);
+    }
+  
+  return type;
+}
+
+static void
+gdk_gl_config_impl_quartz_class_init (GdkGLConfigImplQuartzClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  parent_class = g_type_class_peek_parent (klass);
+  object_class->finalize = gdk_gl_config_impl_quartz_finalize;
+}
+
+static void
+gdk_gl_config_impl_quartz_finalize (GObject *object)
+{
+  GdkGLConfigImplQuartz *impl = GDK_GL_CONFIG_IMPL_QUARTZ (object);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  [impl->quartzPixelFormat release];
+  g_object_unref (G_OBJECT (impl->colormap));
+  
+  G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+
+/**
+ * gdk_gl_config_get_colormap:
+ * @glconfig: a #GdkGLConfig.
+ *
+ * Gets the #GdkColormap that is appropriate for the OpenGL frame buffer
+ * configuration.
+ *
+ * Return value: the appropriate #GdkColormap.
+ **/
+GdkColormap *
+gdk_gl_config_get_colormap (GdkGLConfig *glconfig)
+{
+  g_return_val_if_fail (GDK_IS_GL_CONFIG_IMPL_QUARTZ (glconfig), NULL);
+  
+  return GDK_GL_CONFIG_IMPL_QUARTZ (glconfig)->colormap;
+}
+
+/**
+ * gdk_gl_config_get_visual:
+ * @glconfig: a #GdkGLConfig.
+ *
+ * Gets the #GdkVisual that is appropriate for the OpenGL frame buffer
+ * configuration.
+ *
+ * Return value: the appropriate #GdkVisual.
+ **/
+GdkVisual *
+gdk_gl_config_get_visual (GdkGLConfig *glconfig)
+{
+  g_return_val_if_fail (GDK_IS_GL_CONFIG_IMPL_QUARTZ (glconfig), NULL);
+  
+  return gdk_colormap_get_visual (GDK_GL_CONFIG_IMPL_QUARTZ (glconfig)->colormap);
+}
+
+static GdkGLConfig *
+gdk_gl_config_new_common (GdkScreen *screen,
+                          const int *attrib_list)
+{
+#define MAX_ATTRS 100
+  GdkGLConfig *glconfig;
+  GdkGLConfigImplQuartz *impl;
+  static NSOpenGLPixelFormatAttribute attrlist[MAX_ATTRS];
+  unsigned i=0;
+  int *p;
+  
+  glconfig = g_object_new (GDK_TYPE_GL_CONFIG_IMPL_QUARTZ, NULL);
+  impl = GDK_GL_CONFIG_IMPL_QUARTZ (glconfig);
+  
+  impl->screen = screen;
+  impl->colormap =gdk_screen_get_system_colormap (screen); // gdk_colormap_get_system();
+  
+  glconfig->is_rgba = TRUE;
+  glconfig->is_stereo = FALSE;
+  glconfig->is_double_buffered = FALSE;
+  glconfig->n_aux_buffers = 0;
+  glconfig->layer_plane = 0;
+  glconfig->has_alpha = TRUE;
+  glconfig->has_depth_buffer = FALSE;
+  glconfig->has_stencil_buffer = FALSE;
+  glconfig->has_accum_buffer = FALSE;
+  glconfig->n_sample_buffers = 0;
+  
+  
+  p = (int *) attrib_list;
+  while ((*p != GDK_GL_ATTRIB_LIST_NONE) && (i+2<MAX_ATTRS))
+    {
+    switch (*p)
+        {
+      case GDK_GL_BUFFER_SIZE:
+        /* Specifies the number of color bitplanes in each color buffer. */
+        attrlist[i++] = NSOpenGLPFAColorSize;
+        attrlist[i++] = *(++p);
+        break;
+      case GDK_GL_DOUBLEBUFFER:
+        /* The buffer is double-buffered. */
+        attrlist[i++] =NSOpenGLPFADoubleBuffer;
+        glconfig->is_double_buffered = TRUE;
+        break;
+      case GDK_GL_STEREO:
+        /* The buffer is stereoscopic.
+         This flag is not supported in the current generic implementation. */
+        attrlist[i++] = NSOpenGLPFAStereo;
+        glconfig->is_stereo = TRUE;
+        break;
+      case GDK_GL_AUX_BUFFERS:
+        /* Specifies the number of auxiliary buffers.
+         Auxiliary buffers are not supported. */
+        attrlist[i++] = NSOpenGLPFAAuxBuffers;
+        glconfig->n_aux_buffers = attrlist[i++] =  *(++p);
+        break;
+      case GDK_GL_DEPTH_SIZE:
+        /* Specifies the depth of the depth (z-axis) buffer. */
+        attrlist[i++] =  NSOpenGLPFADepthSize ;
+        attrlist[i++] = *(++p);
+        glconfig->has_depth_buffer = TRUE;
+        break;
+      case GDK_GL_STENCIL_SIZE:
+        /* Specifies the depth of the stencil buffer. */
+        attrlist[i++] =  NSOpenGLPFAStencilSize ;
+        attrlist[i++] = *(++p);
+        glconfig->has_stencil_buffer = TRUE;
+        break;
+      case GDK_GL_ALPHA_SIZE:        
+        attrlist[i++] =  NSOpenGLPFAAlphaSize ;
+        attrlist[i++] = *(++p);
+        glconfig->has_stencil_buffer = TRUE;
+        break;        
+      case GDK_GL_USE_GL:        
+      case GDK_GL_RGBA:
+      case GDK_GL_LEVEL:        
+      case GDK_GL_RED_SIZE:
+      case GDK_GL_GREEN_SIZE:
+      case GDK_GL_BLUE_SIZE:
+      case GDK_GL_ACCUM_RED_SIZE:
+      case GDK_GL_ACCUM_GREEN_SIZE:
+      case GDK_GL_ACCUM_BLUE_SIZE:
+      case GDK_GL_ACCUM_ALPHA_SIZE:
+        break;
+        }
+    ++p;
+    }
+  attrlist[i] = 0;
+  impl->quartzPixelFormat = [[NSOpenGLPixelFormat alloc] initWithAttributes:attrlist];
+  
+  return glconfig;
+#undef MAX_ATTRS  
+}
+
+GdkGLConfig *
+gdk_gl_config_new (const int *attrib_list)
+{
+  GdkScreen *screen;
+  
+  GDK_GL_NOTE_FUNC ();
+  
+  g_return_val_if_fail (attrib_list != NULL, NULL);
+  
+  screen = gdk_screen_get_default ();
+  
+  return gdk_gl_config_new_common (screen, attrib_list);
+}
+
+/**
+ * gdk_gl_config_new_for_screen:
+ * @screen: target screen.
+ * @attrib_list: a list of attribute/value pairs. The last attribute must
+ *               be GDK_GL_ATTRIB_LIST_NONE.
+ *
+ * Returns an OpenGL frame buffer configuration that match the specified
+ * attributes.
+ *
+ * Return value: the new #GdkGLConfig.
+ **/
+GdkGLConfig *
+gdk_gl_config_new_for_screen (GdkScreen *screen,
+                              const int *attrib_list)
+{
+  GDK_GL_NOTE_FUNC ();
+  
+  g_return_val_if_fail (GDK_IS_SCREEN (screen), NULL);
+  g_return_val_if_fail (attrib_list != NULL, NULL);
+  
+  return gdk_gl_config_new_common (screen, attrib_list);
+}
+
+/**
+ * gdk_gl_config_get_attrib:
+ * @glconfig: a #GdkGLConfig.
+ * @attribute: the attribute to be returned.
+ * @value: returns the requested value.
+ *
+ * Gets information about a OpenGL frame buffer configuration.
+ *
+ * Return value: TRUE if it succeeded, FALSE otherwise.
+ **/
+gboolean
+gdk_gl_config_get_attrib (GdkGLConfig *glconfig,
+                          int          attribute,
+                          int         *value)
+{
+#if 1
+  GdkGLConfigImplQuartz *impl;
+  NSOpenGLPixelFormat   *lPixelFormat;
+  GLint lScreen=0;
+  NSOpenGLPixelFormatAttribute attrib;
+  g_return_val_if_fail (GDK_IS_GL_CONFIG_IMPL_QUARTZ(glconfig), FALSE);
+  
+  impl = GDK_GL_CONFIG_IMPL_QUARTZ (glconfig);
+  lPixelFormat = impl->quartzPixelFormat;
+  switch (attribute)
+    {
+    case GDK_GL_USE_GL:
+    case GDK_GL_RGBA:      
+          *value = 1;
+        return TRUE;
+        break;
+    case GDK_GL_BUFFER_SIZE:
+      attrib = NSOpenGLPFAColorSize;
+      break;
+    case GDK_GL_DOUBLEBUFFER:
+      attrib = NSOpenGLPFADoubleBuffer;
+      break;
+    case GDK_GL_STEREO:
+      attrib = NSOpenGLPFAStereo;
+      break;
+    case GDK_GL_AUX_BUFFERS:
+      attrib = NSOpenGLPFAAuxBuffers;
+      break;
+    case GDK_GL_DEPTH_SIZE:
+      attrib = NSOpenGLPFADepthSize;
+      break;
+    case GDK_GL_STENCIL_SIZE:
+      attrib = NSOpenGLPFAStencilSize;      
+      break;
+    case GDK_GL_ALPHA_SIZE:
+      attrib = NSOpenGLPFAAlphaSize;      
+      break;
+    case GDK_GL_RED_SIZE:
+    case GDK_GL_GREEN_SIZE:
+    case GDK_GL_BLUE_SIZE:
+      //attrib = NSOpenGLPFAColorSize;
+      *value=1;
+      return TRUE;
+      break;
+    case GDK_GL_ACCUM_RED_SIZE:
+    case GDK_GL_ACCUM_GREEN_SIZE:
+    case GDK_GL_ACCUM_BLUE_SIZE:
+    case GDK_GL_ACCUM_ALPHA_SIZE:    
+      attrib = NSOpenGLPFAAccumSize;
+      break;
+    case GDK_GL_LEVEL:            
+    default:
+      return FALSE;
+    }
+  
+  [lPixelFormat getValues:value forAttribute:attrib forVirtualScreen:lScreen];
+  return TRUE;
+#else
+  return FALSE;
+#endif
+}
diff --git a/gdk/quartz/gdkglcontext-quartz.h b/gdk/quartz/gdkglcontext-quartz.h
new file mode 100644
index 0000000..6584b74
--- /dev/null
+++ b/gdk/quartz/gdkglcontext-quartz.h
@@ -0,0 +1,44 @@
+#ifndef __GDK_GL_CONTEXT_QUARTZ_H__
+#define __GDK_GL_CONTEXT_QUARTZ_H__
+
+#include <gdk/gdkglcontext.h>
+
+G_BEGIN_DECLS
+
+typedef struct _GdkGLContextImplQuartz      GdkGLContextImplQuartz;
+typedef struct _GdkGLContextImplQuartzClass GdkGLContextImplQuartzClass;
+  
+#define GDK_TYPE_GL_CONTEXT_IMPL_QUARTZ              (gdk_gl_context_impl_quartz_get_type ())
+#define GDK_GL_CONTEXT_IMPL_QUARTZ(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_CONTEXT_IMPL_QUARTZ, GdkGLContextImplQuartz))
+#define GDK_GL_CONTEXT_IMPL_QUARTZ_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_CONTEXT_IMPL_QUARTZ, GdkGLContextImplQuartzClass))
+#define GDK_IS_GL_CONTEXT_IMPL_QUARTZ(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_CONTEXT_IMPL_QUARTZ))
+#define GDK_IS_GL_CONTEXT_IMPL_QUARTZ_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_CONTEXT_IMPL_QUARTZ))
+#define GDK_GL_CONTEXT_IMPL_QUARTZ_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_CONTEXT_IMPL_QUARTZ, GdkGLContextImplQuartzClass))
+  
+  struct _GdkGLContextImplQuartz
+  {
+    GdkGLContext parent_instance;
+    
+    GdkGLContext *share_list;
+    gboolean is_direct;
+    int render_type;
+    
+    GdkGLConfig *glconfig;
+    
+    GdkGLDrawable *gldrawable;
+    
+    NSOpenGLContext *quartzContext;
+    
+    guint is_destroyed : 1;
+  };
+
+struct _GdkGLContextImplQuartzClass
+{
+  GdkGLContextClass parent_class;
+};
+
+GType gdk_gl_context_impl_quartz_get_type (void);
+
+G_END_DECLS
+
+#endif
diff --git a/gdk/quartz/gdkglcontext-quartz.m b/gdk/quartz/gdkglcontext-quartz.m
new file mode 100644
index 0000000..2e9279d
--- /dev/null
+++ b/gdk/quartz/gdkglcontext-quartz.m
@@ -0,0 +1,342 @@
+#include <gdk/gdk.h>            /* for gdk_error_trap_(push|pop) () */
+
+#include "gdkglprivate-quartz.h"
+#include "gdkgldrawable.h"
+#include "gdkglconfig-quartz.h"
+#include "gdkglcontext-quartz.h"
+#include "gdkglwindow-quartz.h"
+#include "gdkglpixmap-quartz.h"
+
+static void          gdk_gl_context_insert (GdkGLContext *glcontext);
+static void          gdk_gl_context_remove (GdkGLContext *glcontext);
+
+static GdkGLContext *gdk_gl_context_lookup (NSOpenGLContext    *quartzContext);
+
+
+static void gdk_gl_context_impl_quartz_class_init (GdkGLContextImplQuartzClass *klass);
+static void gdk_gl_context_impl_quartz_finalize   (GObject                  *object);
+
+static gpointer parent_class = NULL;
+
+
+GType
+gdk_gl_context_impl_quartz_get_type (void)
+{
+  static GType type = 0;
+  
+  if (!type)
+    {
+    static const GTypeInfo type_info = {
+      sizeof (GdkGLContextImplQuartzClass),
+      (GBaseInitFunc) NULL,
+      (GBaseFinalizeFunc) NULL,
+      (GClassInitFunc) gdk_gl_context_impl_quartz_class_init,
+      (GClassFinalizeFunc) NULL,
+      NULL,                   /* class_data */
+      sizeof (GdkGLContextImplQuartz),
+      0,                      /* n_preallocs */
+      (GInstanceInitFunc) NULL
+    };
+    
+    type = g_type_register_static (GDK_TYPE_GL_CONTEXT,
+                     "GdkGLContextImplQuartz",
+                     &type_info, 0);
+    }
+  
+  return type;
+}
+
+static void
+gdk_gl_context_impl_quartz_class_init (GdkGLContextImplQuartzClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  parent_class = g_type_class_peek_parent (klass);
+  
+  object_class->finalize = gdk_gl_context_impl_quartz_finalize;
+}
+
+void
+_gdk_gl_context_destroy (GdkGLContext *glcontext)
+{
+  GdkGLContextImplQuartz *impl = GDK_GL_CONTEXT_IMPL_QUARTZ (glcontext);
+
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  if (impl->is_destroyed)
+    return;
+  
+  gdk_gl_context_remove (glcontext);
+  
+  
+  
+  if (impl->gldrawable != NULL)
+    {
+    g_object_remove_weak_pointer (G_OBJECT (impl->gldrawable),
+                    (gpointer *) &(impl->gldrawable));
+    impl->gldrawable = NULL;
+    }
+  
+  
+  impl->is_destroyed = TRUE;
+}
+
+static void
+gdk_gl_context_impl_quartz_finalize (GObject *object)
+{
+  GdkGLContextImplQuartz *impl = GDK_GL_CONTEXT_IMPL_QUARTZ (object);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  [[NSNotificationCenter defaultCenter] removeObserver:impl->quartzContext];
+  [impl->quartzContext release];
+  
+  _gdk_gl_context_destroy (GDK_GL_CONTEXT (object));
+  
+//  g_object_unref (G_OBJECT (impl->glconfig));
+  
+  if (impl->share_list != NULL)
+    g_object_unref (G_OBJECT (impl->share_list));
+  
+  G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+
+/*
+ * GdkGLContext hash table.
+ */
+
+static GHashTable *gl_context_ht = NULL;
+
+static void
+gdk_gl_context_insert (GdkGLContext *glcontext)
+{
+  GdkGLContextImplQuartz *impl;
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  if (gl_context_ht == NULL)
+    {
+      GDK_GL_NOTE (MISC, g_message (" -- Create GL context hash table."));
+      gl_context_ht = g_hash_table_new (g_direct_hash, g_direct_equal);
+    }
+  impl = GDK_GL_CONTEXT_IMPL_QUARTZ (glcontext);
+
+  g_hash_table_insert (gl_context_ht, impl->quartzContext, glcontext);
+}
+
+
+static void
+gdk_gl_context_remove (GdkGLContext *glcontext)
+{
+  GdkGLContextImplQuartz *impl;
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  if (gl_context_ht == NULL)
+    return;
+
+  impl = GDK_GL_CONTEXT_IMPL_QUARTZ (glcontext);
+
+  g_hash_table_remove (gl_context_ht, impl->quartzContext);
+
+  if (g_hash_table_size (gl_context_ht) == 0)
+    {
+      GDK_GL_NOTE (MISC, g_message (" -- Destroy GL context hash table."));
+      g_hash_table_destroy (gl_context_ht);
+      gl_context_ht = NULL;
+    }
+}
+
+
+GdkGLDrawable *gdk_gl_context_get_gl_drawable (GdkGLContext  *glcontext)
+{
+  g_return_val_if_fail (GDK_IS_GL_CONTEXT_IMPL_QUARTZ (glcontext), NULL);
+  
+  return GDK_GL_CONTEXT_IMPL_QUARTZ (glcontext)->gldrawable;
+}
+
+GdkGLContext *
+gdk_gl_context_get_current (void)
+{
+
+  static GdkGLContext *current = NULL;
+  NSOpenGLContext *quartzContext;
+  
+  GDK_GL_NOTE_FUNC ();
+  
+  quartzContext = [NSOpenGLContext currentContext];
+  
+  if (quartzContext == NULL)
+    return NULL;
+  
+  if (current && GDK_GL_CONTEXT_IMPL_QUARTZ(current)->quartzContext == quartzContext)
+    return current;
+  
+  current = gdk_gl_context_lookup (quartzContext);
+  
+  return current;
+}
+
+static GdkGLContext *
+gdk_gl_context_new_common (GdkGLConfig   *glconfig,
+                           GdkGLContext  *share_list,
+                           int            render_type,
+               NSOpenGLContext *quartzContext
+            )
+{
+  GdkGLContext *glcontext;
+  GdkGLContextImplQuartz *impl;
+
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  /*
+   * Instantiate the GdkGLContextImplX11 object.
+   */
+  
+  glcontext = g_object_new (GDK_TYPE_GL_CONTEXT_IMPL_QUARTZ, NULL);
+  impl = GDK_GL_CONTEXT_IMPL_QUARTZ (glcontext);
+  impl->quartzContext = quartzContext;
+  
+  if (share_list != NULL && GDK_IS_GL_CONTEXT (share_list))
+    {
+    impl->share_list = share_list;
+    g_object_ref (G_OBJECT (impl->share_list));
+    }
+  else
+    {
+    impl->share_list = NULL;
+    }
+    
+  return glcontext;
+}
+
+
+/*< private >*/
+GdkGLContext *_gdk_quartz_gl_context_pixmap_new (GdkGLDrawable *gldrawable,
+                         GdkGLContext  *share_list,
+                         gboolean       direct,
+                         int            render_type)
+{
+  GdkGLConfig *glconfig;
+  GdkGLContextImplQuartz *share_impl = NULL;
+  NSOpenGLContext *quartzContext;
+  static NSOpenGLPixelFormatAttribute attribs[] = {NSOpenGLPFAOffScreen,
+    NSOpenGLPFADepthSize , 1,
+    NSOpenGLPFAColorSize, 24,
+    NSOpenGLPFAAlphaSize, 8,
+  0};
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  NSOpenGLPixelFormat *quartzPixelFormat;
+  /*
+   * Create an OpenGL rendering context.
+   */
+  
+  glconfig = gdk_gl_drawable_get_gl_config (gldrawable);
+  
+  
+  if (share_list != NULL && GDK_IS_GL_CONTEXT (share_list))
+    {
+    share_impl = GDK_GL_CONTEXT_IMPL_QUARTZ (share_list);
+    }
+  
+  //if (glconfig != NULL && GDK_IS_GL_CONFIG_IMPL_QUARTZ(glconfig))
+//  {
+//    GdkGLConfigImplQuartz *glQuartzConfig = GDK_GL_CONFIG_IMPL_QUARTZ(glconfig) ;
+//    quartzPixelFormat =   glQuartzConfig -> quartzPixelFormat;
+//  }
+//  else 
+
+  quartzPixelFormat = [[[NSOpenGLPixelFormat alloc] initWithAttributes:attribs] autorelease];
+  
+  quartzContext = [[NSOpenGLContext alloc] initWithFormat:quartzPixelFormat shareContext:nil];
+  
+  if(GDK_IS_GL_PIXMAP_IMPL_QUARTZ(gldrawable))
+  {
+    GdkGLPixmapImplQuartz *pixmapQuartz=GDK_GL_PIXMAP_IMPL_QUARTZ (gldrawable);
+    GdkPixbuf *pixbuf=pixmapQuartz->glPixbuf;
+    
+    pixmapQuartz->quartzContext = quartzContext;
+        
+    [quartzContext setOffScreen:gdk_pixbuf_get_pixels(pixbuf)
+             width:gdk_pixbuf_get_width(pixbuf)
+             height:gdk_pixbuf_get_height(pixbuf)
+             rowbytes:gdk_pixbuf_get_rowstride(pixbuf)];
+  }
+  
+  
+  return gdk_gl_context_new_common (glconfig,
+                    share_list,
+                    render_type,
+                    quartzContext
+                    );
+  
+}
+
+GdkGLContext *
+_gdk_quartz_gl_context_window_new (GdkGLDrawable *gldrawable,
+                         GdkGLContext  *share_list,
+                         gboolean       direct,
+                         int            render_type)
+{
+  GdkGLConfig *glconfig;
+  GdkGLContextImplQuartz *share_impl = NULL;
+  NSOpenGLContext *quartzContext;
+  NSOpenGLPixelFormatAttribute attribs[] = {0};
+  NSView *quartzView;
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  NSOpenGLPixelFormat *quartzPixelFormat;
+  /*
+   * Create an OpenGL rendering context.
+   */
+  
+  glconfig = gdk_gl_drawable_get_gl_config (gldrawable);
+  
+  
+  if (share_list != NULL && GDK_IS_GL_CONTEXT (share_list))
+    {
+    share_impl = GDK_GL_CONTEXT_IMPL_QUARTZ (share_list);
+    }
+  
+  if (glconfig != NULL && GDK_IS_GL_CONFIG_IMPL_QUARTZ(glconfig))
+  {
+    GdkGLConfigImplQuartz *glQuartzConfig = GDK_GL_CONFIG_IMPL_QUARTZ(glconfig) ;
+    quartzPixelFormat =   glQuartzConfig -> quartzPixelFormat;
+  }
+  else quartzPixelFormat = [[[NSOpenGLPixelFormat alloc] initWithAttributes:attribs] autorelease];
+  
+  quartzContext = [[NSOpenGLContext alloc] initWithFormat:quartzPixelFormat shareContext:nil];
+  
+  if(GDK_IS_GL_WINDOW_IMPL_QUARTZ(gldrawable))
+  {
+  GDK_GL_WINDOW_IMPL_QUARTZ (gldrawable)->quartzContext = quartzContext;
+  quartzView = GDK_GL_WINDOW_IMPL_QUARTZ (gldrawable)->quartzView;
+  [[NSNotificationCenter defaultCenter] 
+     addObserver:quartzContext
+     selector: @selector(update)
+     name: NSViewFrameDidChangeNotification 
+     object:quartzView
+     ];
+    
+  }
+  
+  
+  return gdk_gl_context_new_common (glconfig,
+                    share_list,
+                    render_type,
+                    quartzContext
+                    );
+}
+
+static GdkGLContext *
+gdk_gl_context_lookup (NSOpenGLContext *glxcontext)
+{
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  if (gl_context_ht == NULL)
+    return NULL;
+  
+  return g_hash_table_lookup (gl_context_ht, &glxcontext);
+}
diff --git a/gdk/quartz/gdkgldrawable-quartz.m b/gdk/quartz/gdkgldrawable-quartz.m
new file mode 100644
index 0000000..f45ff67
--- /dev/null
+++ b/gdk/quartz/gdkgldrawable-quartz.m
@@ -0,0 +1,16 @@
+#include "gdkglprivate-quartz.h"
+#include <OpenGL/gl.h>
+
+/*< private >*/
+void
+_gdk_gl_drawable_impl_quartz_wait_gl (GdkGLDrawable *gldrawable)
+{
+  glFinish ();
+}
+
+/*< private >*/
+void
+_gdk_gl_drawable_impl_quartz_wait_gdk (GdkGLDrawable *gldrawable)
+{
+
+}
diff --git a/gdk/quartz/gdkglpixmap-quartz.h b/gdk/quartz/gdkglpixmap-quartz.h
new file mode 100644
index 0000000..05e7e8b
--- /dev/null
+++ b/gdk/quartz/gdkglpixmap-quartz.h
@@ -0,0 +1,49 @@
+#ifndef __GDK_GL_PIXMAP_QUARTZ_H__
+#define __GDK_GL_PIXMAP_QUARTZ_H__
+
+#include <gdk/gdkglpixmap.h>
+#include <gdk/quartz/gdkglquartz.h>
+
+G_BEGIN_DECLS
+
+typedef struct _GdkGLPixmapImplQuartz      GdkGLPixmapImplQuartz;
+typedef struct _GdkGLPixmapImplQuartzClass GdkGLPixmapImplQuartzClass;
+  
+#define GDK_TYPE_GL_PIXMAP_IMPL_QUARTZ              (gdk_gl_pixmap_impl_quartz_get_type ())
+#define GDK_GL_PIXMAP_IMPL_QUARTZ(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_PIXMAP_IMPL_QUARTZ, GdkGLPixmapImplQuartz))
+#define GDK_GL_PIXMAP_IMPL_QUARTZ_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_PIXMAP_IMPL_QUARTZ, GdkGLPixmapImplQuartzClass))
+#define GDK_IS_GL_PIXMAP_IMPL_QUARTZ(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_PIXMAP_IMPL_QUARTZ))
+#define GDK_IS_GL_PIXMAP_IMPL_QUARTZ_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_PIXMAP_IMPL_QUARTZ))
+#define GDK_GL_PIXMAP_IMPL_QUARTZ_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_PIXMAP_IMPL_QUARTZ, GdkGLPixmapImplQuartzClass))
+  
+struct _GdkGLPixmapImplQuartz
+  {
+    GdkGLPixmap parent_instance;
+    
+//    GdkPixmap   *bufPixmap;
+    NSOpenGLContext    *quartzContext;
+    
+//    int width;
+//    int height;
+//    int depth;
+    
+    GdkPixbuf *glPixbuf;
+    
+    GdkGLConfig *glconfig;
+    
+    
+    guint is_destroyed : 1;
+  };
+
+struct _GdkGLPixmapImplQuartzClass
+{
+  GdkGLPixmapClass parent_class;
+};
+
+GType gdk_gl_pixmap_impl_quartz_get_type (void);
+
+
+G_END_DECLS
+
+
+#endif
diff --git a/gdk/quartz/gdkglpixmap-quartz.m b/gdk/quartz/gdkglpixmap-quartz.m
new file mode 100644
index 0000000..2284d10
--- /dev/null
+++ b/gdk/quartz/gdkglpixmap-quartz.m
@@ -0,0 +1,305 @@
+#include "gdkglprivate-quartz.h"
+#include "gdkglconfig-quartz.h"
+#include "gdkglcontext-quartz.h"
+#include "gdkglpixmap-quartz.h"
+
+static void gdk_gl_pixmap_sync_gl  (GdkGLPixmap *glpixmap);
+static void gdk_gl_pixmap_sync_buffers  (GdkGLPixmap *glpixmap);
+static void gdk_gl_pixmap_sync_gdk (GdkGLPixmap *glpixmap);
+
+
+static gboolean     gdk_gl_pixmap_impl_quartz_make_context_current (GdkGLDrawable *draw,
+                                                                 GdkGLDrawable *read,
+                                                                 GdkGLContext  *glcontext);
+static gboolean     gdk_gl_pixmap_impl_quartz_is_double_buffered   (GdkGLDrawable *gldrawable);
+static void         gdk_gl_pixmap_impl_quartz_swap_buffers         (GdkGLDrawable *gldrawable);
+
+static void         gdk_gl_pixmap_impl_quartz_wait_gl              (GdkGLDrawable *gldrawable);
+static void         gdk_gl_pixmap_impl_quartz_wait_gdk             (GdkGLDrawable *gldrawable);
+
+static gboolean     gdk_gl_pixmap_impl_quartz_gl_begin             (GdkGLDrawable *draw,
+                                                                    GdkGLDrawable *read,
+                                                                    GdkGLContext  *glcontext);
+static void         gdk_gl_pixmap_impl_quartz_gl_end               (GdkGLDrawable *gldrawable);
+static GdkGLConfig *gdk_gl_pixmap_impl_quartz_get_gl_config        (GdkGLDrawable *gldrawable);
+
+static void gdk_gl_pixmap_impl_quartz_class_init (GdkGLPixmapImplQuartzClass *klass);
+static void gdk_gl_pixmap_impl_quartz_finalize   (GObject                 *object);
+static void gdk_gl_pixmap_impl_quartz_gl_drawable_interface_init (GdkGLDrawableClass *iface);
+
+static gpointer parent_class = NULL;
+
+GType
+gdk_gl_pixmap_impl_quartz_get_type (void)
+{
+  static GType type = 0;
+  
+  if (!type)
+    {
+    static const GTypeInfo type_info = {
+      sizeof (GdkGLPixmapImplQuartzClass),
+      (GBaseInitFunc) NULL,
+      (GBaseFinalizeFunc) NULL,
+      (GClassInitFunc) gdk_gl_pixmap_impl_quartz_class_init,
+      (GClassFinalizeFunc) NULL,
+      NULL,                   /* class_data */
+      sizeof (GdkGLPixmapImplQuartz),
+      0,                      /* n_preallocs */
+      (GInstanceInitFunc) NULL
+    };
+    static const GInterfaceInfo gl_drawable_interface_info = {
+      (GInterfaceInitFunc) gdk_gl_pixmap_impl_quartz_gl_drawable_interface_init,
+      (GInterfaceFinalizeFunc) NULL,
+      NULL                    /* interface_data */
+    };
+    
+    type = g_type_register_static (GDK_TYPE_GL_PIXMAP,
+                     "GdkGLPixmapImplQuartz",
+                     &type_info, 0);
+    g_type_add_interface_static (type,
+                   GDK_TYPE_GL_DRAWABLE,
+                   &gl_drawable_interface_info);
+    }
+  
+  return type;
+}
+
+static void
+gdk_gl_pixmap_impl_quartz_class_init (GdkGLPixmapImplQuartzClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  parent_class = g_type_class_peek_parent (klass);
+  
+  object_class->finalize = gdk_gl_pixmap_impl_quartz_finalize;
+}
+
+void
+_gdk_gl_pixmap_destroy (GdkGLPixmap *glpixmap)
+{
+  GdkGLPixmapImplQuartz *impl = GDK_GL_PIXMAP_IMPL_QUARTZ (glpixmap);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  if (impl->is_destroyed)
+    return;
+  
+  impl->is_destroyed = TRUE;
+}
+
+static void
+gdk_gl_pixmap_impl_quartz_finalize (GObject *object)
+{
+  GdkGLPixmapImplQuartz *impl = GDK_GL_PIXMAP_IMPL_QUARTZ (object);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  _gdk_gl_pixmap_destroy (GDK_GL_PIXMAP (object));
+  
+  g_object_unref (G_OBJECT (impl->glconfig));
+  
+  g_object_unref (G_OBJECT (impl->glPixbuf));
+  
+  G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_pixmap_impl_quartz_gl_drawable_interface_init (GdkGLDrawableClass *iface)
+{
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  iface->create_new_context   = _gdk_quartz_gl_context_pixmap_new;
+  iface->make_context_current =  gdk_gl_pixmap_impl_quartz_make_context_current;
+  iface->is_double_buffered   =  gdk_gl_pixmap_impl_quartz_is_double_buffered;
+  iface->swap_buffers         =  gdk_gl_pixmap_impl_quartz_swap_buffers;
+  iface->wait_gl              =  gdk_gl_pixmap_impl_quartz_wait_gl;
+  iface->wait_gdk             =  gdk_gl_pixmap_impl_quartz_wait_gdk;
+  iface->gl_begin             =  gdk_gl_pixmap_impl_quartz_make_context_current;
+  iface->gl_end               =  gdk_gl_pixmap_impl_quartz_gl_end;
+  iface->get_gl_config        =  gdk_gl_pixmap_impl_quartz_get_gl_config;
+  iface->get_size             = _gdk_gl_pixmap_get_size;
+}
+
+GdkGLPixmap *
+gdk_gl_pixmap_new (GdkGLConfig *glconfig,
+                   GdkPixmap   *pixmap,
+                   const int   *attrib_list)
+{
+  GdkGLPixmap *glpixmap;
+  GdkGLPixmapImplQuartz *impl;
+  
+  gint width, height;
+//  gint depth;  
+
+  
+  GDK_GL_NOTE_FUNC ();
+  
+  g_return_val_if_fail (GDK_IS_GL_CONFIG_IMPL_QUARTZ (glconfig), NULL);
+  g_return_val_if_fail (GDK_IS_PIXMAP (pixmap), NULL);
+  
+  /*
+   * Create offscreen rendering area.
+   */
+  
+  gdk_drawable_get_size (GDK_DRAWABLE (pixmap), &width, &height);
+  
+//  depth = gdk_drawable_get_depth (GDK_DRAWABLE (pixmap));
+//  if(depth != 32) goto FAIL;
+//  depth = 32;
+  
+  glpixmap = g_object_new (GDK_TYPE_GL_PIXMAP_IMPL_QUARTZ, NULL);
+  impl = GDK_GL_PIXMAP_IMPL_QUARTZ (glpixmap);
+  
+  glpixmap->drawable = GDK_DRAWABLE (pixmap);
+  g_object_add_weak_pointer (G_OBJECT (glpixmap->drawable),
+                 (gpointer *) &(glpixmap->drawable));
+  
+  
+  impl->glPixbuf  = gdk_pixbuf_new (GDK_COLORSPACE_RGB, TRUE, 8, width, height);
+  
+//  impl->width = width;
+//  impl->height = height;
+//  impl->depth = depth;
+//  impl->bufPixmap = pixmap;
+  
+  impl->glconfig = glconfig;
+  g_object_ref (G_OBJECT (impl->glconfig));
+    
+  impl->is_destroyed = FALSE;
+  
+  return glpixmap;
+  
+FAIL:
+  
+  return NULL;  
+}
+
+static gboolean
+gdk_gl_pixmap_impl_quartz_make_context_current (GdkGLDrawable *draw,
+                                             GdkGLDrawable *read,
+                                             GdkGLContext  *glcontext)
+{
+  NSOpenGLContext *quartzContext = GDK_GL_CONTEXT_IMPL_QUARTZ(glcontext)->quartzContext; 
+  GdkGLPixmapImplQuartz *impl = GDK_GL_PIXMAP_IMPL_QUARTZ(draw);
+  GdkPixbuf    *pixbuf = impl->glPixbuf;
+  impl->quartzContext = quartzContext;
+  
+  
+  [quartzContext setOffScreen:gdk_pixbuf_get_pixels(pixbuf)
+              width:gdk_pixbuf_get_width(pixbuf)
+             height:gdk_pixbuf_get_height(pixbuf)
+             rowbytes:gdk_pixbuf_get_rowstride(pixbuf)];
+  
+  [quartzContext makeCurrentContext];
+  return TRUE;
+}
+
+static gboolean
+gdk_gl_pixmap_impl_quartz_is_double_buffered (GdkGLDrawable *gldrawable)
+{
+  g_return_val_if_fail (GDK_IS_GL_PIXMAP_IMPL_QUARTZ (gldrawable), FALSE);
+  
+  return gdk_gl_config_is_double_buffered (GDK_GL_PIXMAP_IMPL_QUARTZ (gldrawable)->glconfig);
+}
+
+static void
+gdk_gl_pixmap_impl_quartz_swap_buffers (GdkGLDrawable *gldrawable)
+{
+  
+  NSOpenGLContext *quartzContext=GDK_GL_PIXMAP_IMPL_QUARTZ (gldrawable)->quartzContext;
+  [quartzContext flushBuffer];
+  
+}
+
+static void gdk_gl_pixmap_sync_buffers  (GdkGLPixmap *glpixmap)
+{
+//  GdkPixmap   *pixmap = glpixmap->drawable;
+  GdkPixbuf    *pixbuf = GDK_GL_PIXMAP_IMPL_QUARTZ (glpixmap)->glPixbuf;
+//  gint     width, height;
+  gint     pwidth, pheight;
+  NSOpenGLContext *quartzContext=GDK_GL_PIXMAP_IMPL_QUARTZ (glpixmap)->quartzContext;
+  
+//  gdk_drawable_get_size (GDK_DRAWABLE (pixmap), &width, &height);
+  
+  pwidth = gdk_pixbuf_get_width(pixbuf);
+  pheight = gdk_pixbuf_get_height(pixbuf);
+  
+//  if(pwidth==width && pheight==height) return;
+  
+//  g_object_unref (G_OBJECT (pixbuf));
+//  pixbuf = gdk_pixbuf_new (GDK_COLORSPACE_RGB, TRUE, 8, width, height);
+//  GDK_GL_PIXMAP_IMPL_QUARTZ (glpixmap)->glPixbuf =  pixbuf;
+  
+  [quartzContext setOffScreen:gdk_pixbuf_get_pixels(pixbuf)
+              width:pwidth
+             height:pheight
+             rowbytes:gdk_pixbuf_get_rowstride(pixbuf)];
+}
+
+static void gdk_gl_pixmap_sync_gl  (GdkGLPixmap *glpixmap)
+{
+  GdkPixmap   *pixmap = glpixmap->drawable;
+  GdkPixbuf    *pixbuf = GDK_GL_PIXMAP_IMPL_QUARTZ (glpixmap)->glPixbuf;
+  
+  
+  gdk_draw_pixbuf(pixmap,
+                    NULL,
+                    pixbuf,
+                    0,  0,
+                    0 , 0,
+                    gdk_pixbuf_get_width(pixbuf),
+          gdk_pixbuf_get_height(pixbuf),
+                    GDK_RGB_DITHER_NORMAL,
+                    0, 0);
+}
+
+static void gdk_gl_pixmap_sync_gdk (GdkGLPixmap *glpixmap)
+{
+  gdk_gl_pixmap_sync_gl  (glpixmap);
+}
+
+static void         gdk_gl_pixmap_impl_quartz_wait_gl              (GdkGLDrawable *gldrawable)
+{
+  glFinish ();
+  
+  /* Sync. */
+  gdk_gl_pixmap_sync_gl (GDK_GL_PIXMAP (gldrawable));
+}
+static void         gdk_gl_pixmap_impl_quartz_wait_gdk             (GdkGLDrawable *gldrawable)
+{
+
+//  gdk_gl_pixmap_sync_buffers( GDK_GL_PIXMAP(gldrawable));
+}
+
+static gboolean
+ gdk_gl_pixmap_impl_quartz_gl_begin (GdkGLDrawable *draw,
+ GdkGLDrawable *read,
+ GdkGLContext  *glcontext)
+{
+  gboolean ret;
+  
+  ret = gdk_gl_pixmap_impl_quartz_make_context_current (draw, read, glcontext);
+  if (!ret)
+    return FALSE;
+  
+  gdk_gl_pixmap_impl_quartz_wait_gdk (draw);
+  
+  return TRUE;
+}
+
+
+static void
+gdk_gl_pixmap_impl_quartz_gl_end (GdkGLDrawable *gldrawable)
+{
+   gdk_gl_pixmap_impl_quartz_wait_gl (gldrawable);
+}
+
+static GdkGLConfig *
+gdk_gl_pixmap_impl_quartz_get_gl_config (GdkGLDrawable *gldrawable)
+{
+  g_return_val_if_fail (GDK_IS_GL_PIXMAP_IMPL_QUARTZ (gldrawable), NULL);
+  
+  return GDK_GL_PIXMAP_IMPL_QUARTZ (gldrawable)->glconfig;
+}
diff --git a/gdk/quartz/gdkglprivate-quartz.h b/gdk/quartz/gdkglprivate-quartz.h
new file mode 100644
index 0000000..6b11da7
--- /dev/null
+++ b/gdk/quartz/gdkglprivate-quartz.h
@@ -0,0 +1,26 @@
+#ifndef __GDK_GL_PRIVATE_QUARTZ_H__
+#define __GDK_GL_PRIVATE_QUARTZ_H__
+
+#include <gdk/gdkprivate.h>
+
+#include <gdk/gdkglprivate.h>
+
+
+G_BEGIN_DECLS
+
+GdkGLContext *_gdk_quartz_gl_context_window_new (GdkGLDrawable *gldrawable,
+                                                 GdkGLContext  *share_list,
+                                                 gboolean       direct,
+                                                 int            render_type);
+
+GdkGLContext *_gdk_quartz_gl_context_pixmap_new (GdkGLDrawable *gldrawable,
+                                                 GdkGLContext  *share_list,
+                                                 gboolean       direct,
+                                                 int            render_type);
+
+void _gdk_gl_drawable_impl_quartz_wait_gl  (GdkGLDrawable *gldrawable);
+void _gdk_gl_drawable_impl_quartz_wait_gdk (GdkGLDrawable *gldrawable);
+
+G_BEGIN_DECLS
+
+#endif /* __GDK_GL_PRIVATE_QUARTZ_H__ */
diff --git a/gdk/quartz/gdkglquartz.h b/gdk/quartz/gdkglquartz.h
new file mode 100644
index 0000000..8330ed1
--- /dev/null
+++ b/gdk/quartz/gdkglquartz.h
@@ -0,0 +1,9 @@
+
+#ifndef __GDK_GL_X_H__
+#define __GDK_GL_X_H__
+
+#include <gdk/gdkquartz.h>
+
+#include <OpenGL/gl.h>
+
+#endif
\ No newline at end of file
diff --git a/gdk/quartz/gdkglquery-quartz.m b/gdk/quartz/gdkglquery-quartz.m
new file mode 100644
index 0000000..e1da650
--- /dev/null
+++ b/gdk/quartz/gdkglquery-quartz.m
@@ -0,0 +1,212 @@
+/* GdkGLExt - OpenGL Extension to GDK
+ * Copyright (C) 2002-2004  Naofumi Yasufuku
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
+ */
+
+#include <string.h>
+
+#include <mach-o/dyld.h>
+
+#include "gdkglquartz.h"
+#include "gdkglprivate-quartz.h"
+#include "gdkglconfig-quartz.h"
+#include "gdkglquery.h"
+
+#include <gdk/gdkdisplay.h>
+
+/**
+ * gdk_gl_query_extension:
+ *
+ * Indicates whether the window system supports the OpenGL extension
+ * (GLX, WGL, etc.).
+ *
+ * Return value: TRUE if OpenGL is supported, FALSE otherwise.
+ **/
+gboolean
+gdk_gl_query_extension (void)
+{
+  return TRUE;
+}
+
+
+/**
+ * gdk_gl_query_extension_for_display:
+ * @display: the #GdkDisplay where the query is sent to.
+ *
+ * Indicates whether the window system supports the OpenGL extension
+ * (GLX, WGL, etc.).
+ *
+ * Return value: TRUE if OpenGL is supported, FALSE otherwise.
+ **/
+gboolean
+gdk_gl_query_extension_for_display (GdkDisplay *display)
+{
+  return TRUE;
+}
+
+
+/**
+ * gdk_gl_query_version:
+ * @major: returns the major version number of the OpenGL extension.
+ * @minor: returns the minor version number of the OpenGL extension.
+ *
+ * Returns the version numbers of the OpenGL extension to the window system.
+ *
+ * In the X Window System, it returns the GLX version.
+ *
+ * In the Microsoft Windows, it returns the Windows version.
+ *
+ * Return value: FALSE if it fails, TRUE otherwise.
+ **/
+gboolean
+gdk_gl_query_version (int *major,
+                      int *minor)
+{
+  *major = 1;
+  *minor = 0;
+  return TRUE;
+}
+
+
+/**
+ * gdk_gl_query_version_for_display:
+ * @display: the #GdkDisplay where the query is sent to.
+ * @major: returns the major version number of the OpenGL extension.
+ * @minor: returns the minor version number of the OpenGL extension.
+ *
+ * Returns the version numbers of the OpenGL extension to the window system.
+ *
+ * In the X Window System, it returns the GLX version.
+ *
+ * In the Microsoft Windows, it returns the Windows version.
+ *
+ * Return value: FALSE if it fails, TRUE otherwise.
+ **/
+gboolean
+gdk_gl_query_version_for_display (GdkDisplay *display,
+                                  int        *major,
+                                  int        *minor)
+{
+  *major = 1;
+  *minor = 0;
+  return TRUE;
+}
+
+
+
+
+/**
+ * gdk_gl_get_proc_address:
+ * @proc_name: function name.
+ *
+ * Returns the address of the OpenGL, GLU, or GLX function.
+ *
+ * Return value: the address of the function named by @proc_name.
+ **/
+
+
+
+#define _GDK_GL_LIBGL_PATH  "/System/Library/Frameworks/OpenGL.framework/Libraries/libGL.dylib"
+#define _GDK_GL_LIBGLU_PATH "/System/Library/Frameworks/OpenGL.framework/Libraries/libGLU.dylib"
+
+GdkGLProc
+gdk_gl_get_proc_address (const char *proc_name)
+{
+  const char *image_name;
+  static const struct mach_header *libgl_image = NULL;
+  static const struct mach_header *libglu_image = NULL;
+  NSSymbol symbol;
+  char *symbol_name;
+
+
+  GDK_GL_NOTE_FUNC ();
+
+  if (strncmp ("glu", proc_name, 3) != 0)
+    {
+      /* libGL */
+
+      if (libgl_image == NULL)
+        {
+          image_name = g_getenv ("GDK_GL_LIBGL_PATH");
+          if (image_name == NULL)
+            image_name = _GDK_GL_LIBGL_PATH;
+
+          GDK_GL_NOTE (MISC, g_message (" - Add Mach-O image %s", image_name));
+
+          libgl_image = NSAddImage (image_name, NSADDIMAGE_OPTION_RETURN_ON_ERROR);
+          if (libgl_image == NULL)
+            {
+              g_warning ("Cannot add Mach-O image %s", image_name);
+              return NULL;
+            }
+        }
+
+
+
+
+      /* Try Mach-O dyld */
+
+      symbol_name = g_strconcat ("_", proc_name, NULL);
+
+      symbol = NSLookupSymbolInImage (libgl_image,
+                                      symbol_name,
+                                      NSLOOKUPSYMBOLINIMAGE_OPTION_BIND |
+                                      NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR);
+      GDK_GL_NOTE (MISC, g_message (" - NSLookupSymbolInImage () - %s",
+                                    symbol ? "succeeded" : "failed"));
+
+      g_free (symbol_name);
+
+      if (symbol != NULL)
+        return NSAddressOfSymbol (symbol);
+    }
+  else
+    {
+      /* libGLU */
+
+      if (libglu_image == NULL)
+        {
+          image_name = g_getenv ("GDK_GL_LIBGLU_PATH");
+          if (image_name == NULL)
+            image_name = _GDK_GL_LIBGLU_PATH;
+
+          GDK_GL_NOTE (MISC, g_message (" - Add Mach-O image %s", image_name));
+
+          libglu_image = NSAddImage (image_name, NSADDIMAGE_OPTION_RETURN_ON_ERROR);
+          if (libglu_image == NULL)
+            {
+              g_warning ("Cannot add Mach-O image %s", image_name);
+              return NULL;
+            }
+        }
+
+      symbol_name = g_strconcat ("_", proc_name, NULL);
+
+      symbol = NSLookupSymbolInImage (libglu_image,
+                                      symbol_name,
+                                      NSLOOKUPSYMBOLINIMAGE_OPTION_BIND |
+                                      NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR);
+      GDK_GL_NOTE (MISC, g_message (" - NSLookupSymbolInImage () - %s",
+                                    symbol ? "succeeded" : "failed"));
+
+      g_free (symbol_name);
+
+      if (symbol != NULL)
+        return NSAddressOfSymbol (symbol);
+    }
+
+  return NULL;
+}
diff --git a/gdk/quartz/gdkglwindow-quartz.h b/gdk/quartz/gdkglwindow-quartz.h
new file mode 100644
index 0000000..d95d7c3
--- /dev/null
+++ b/gdk/quartz/gdkglwindow-quartz.h
@@ -0,0 +1,41 @@
+#ifndef __GDK_GL_WINDOW_QUARTZ_H__
+#define __GDK_GL_WINDOW_QUARTZ_H__
+
+#include <gdk/gdkglwindow.h>
+#include <gdk/quartz/gdkglquartz.h>
+
+G_BEGIN_DECLS
+                         
+typedef struct _GdkGLWindowImplQuartz      GdkGLWindowImplQuartz;
+typedef struct _GdkGLWindowImplQuartzClass GdkGLWindowImplQuartzClass;
+  
+#define GDK_TYPE_GL_WINDOW_IMPL_QUARTZ              (gdk_gl_window_impl_quartz_get_type ())
+#define GDK_GL_WINDOW_IMPL_QUARTZ(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GDK_TYPE_GL_WINDOW_IMPL_QUARTZ, GdkGLWindowImplQuartz))
+#define GDK_GL_WINDOW_IMPL_QUARTZ_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GDK_TYPE_GL_WINDOW_IMPL_QUARTZ, GdkGLWindowImplQuartzClass))
+#define GDK_IS_GL_WINDOW_IMPL_QUARTZ(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GDK_TYPE_GL_WINDOW_IMPL_QUARTZ))
+#define GDK_IS_GL_WINDOW_IMPL_QUARTZ_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GDK_TYPE_GL_WINDOW_IMPL_QUARTZ))
+#define GDK_GL_WINDOW_IMPL_QUARTZ_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GDK_TYPE_GL_WINDOW_IMPL_QUARTZ, GdkGLWindowImplQuartzClass))
+  
+struct _GdkGLWindowImplQuartz
+{
+  GdkGLWindow parent_instance;
+
+  NSView        *quartzView;
+  NSOpenGLContext    *quartzContext;
+
+  GdkGLConfig *glconfig;
+    
+  guint is_destroyed : 1;
+};
+
+struct _GdkGLWindowImplQuartzClass
+{
+  GdkGLWindowClass parent_class;
+};
+
+GType gdk_gl_window_impl_quartz_get_type (void);
+
+G_END_DECLS
+
+
+#endif
diff --git a/gdk/quartz/gdkglwindow-quartz.m b/gdk/quartz/gdkglwindow-quartz.m
new file mode 100644
index 0000000..c47baab
--- /dev/null
+++ b/gdk/quartz/gdkglwindow-quartz.m
@@ -0,0 +1,204 @@
+#include "gdkglprivate-quartz.h"
+#include "gdkglconfig-quartz.h"
+#include "gdkglcontext-quartz.h"
+#include "gdkglwindow-quartz.h"
+
+#include <gdk/gdkglquery.h>
+
+static gboolean     gdk_gl_window_impl_quartz_make_context_current (GdkGLDrawable *draw,
+                                                                    GdkGLDrawable *read,
+                                                                    GdkGLContext  *glcontext);
+static gboolean     gdk_gl_window_impl_quartz_is_double_buffered   (GdkGLDrawable *gldrawable);
+static void         gdk_gl_window_impl_quartz_swap_buffers         (GdkGLDrawable *gldrawable);
+
+static gboolean        gdk_gl_window_impl_quartz_gl_begin            (GdkGLDrawable *draw,
+                                                                      GdkGLDrawable *read,
+                                                                      GdkGLContext  *glcontext);
+
+static void         gdk_gl_window_impl_quartz_gl_end               (GdkGLDrawable *gldrawable);
+static GdkGLConfig *gdk_gl_window_impl_quartz_get_gl_config        (GdkGLDrawable *gldrawable);
+
+static void gdk_gl_window_impl_quartz_class_init (GdkGLWindowImplQuartzClass *klass);
+static void gdk_gl_window_impl_quartz_finalize   (GObject                 *object);
+static void gdk_gl_window_impl_quartz_gl_drawable_interface_init (GdkGLDrawableClass *iface);
+
+static gpointer parent_class = NULL;
+
+GType
+gdk_gl_window_impl_quartz_get_type (void)
+{
+  static GType type = 0;
+  
+  if (!type)
+    {
+    static const GTypeInfo type_info = {
+      sizeof (GdkGLWindowImplQuartzClass),
+      (GBaseInitFunc) NULL,
+      (GBaseFinalizeFunc) NULL,
+      (GClassInitFunc) gdk_gl_window_impl_quartz_class_init,
+      (GClassFinalizeFunc) NULL,
+      NULL,                   /* class_data */
+      sizeof (GdkGLWindowImplQuartz),
+      0,                      /* n_preallocs */
+      (GInstanceInitFunc) NULL
+    };
+    static const GInterfaceInfo gl_drawable_interface_info = {
+      (GInterfaceInitFunc) gdk_gl_window_impl_quartz_gl_drawable_interface_init,
+      (GInterfaceFinalizeFunc) NULL,
+      NULL                    /* interface_data */
+    };
+    
+    type = g_type_register_static (GDK_TYPE_GL_WINDOW,
+                     "GdkGLWindowImplQuartz",
+                     &type_info, 0);
+    g_type_add_interface_static (type,
+                   GDK_TYPE_GL_DRAWABLE,
+                   &gl_drawable_interface_info);
+    }
+  
+  return type;
+}
+
+static void
+gdk_gl_window_impl_quartz_class_init (GdkGLWindowImplQuartzClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  parent_class = g_type_class_peek_parent (klass);
+  
+  object_class->finalize = gdk_gl_window_impl_quartz_finalize;
+}
+
+void
+_gdk_gl_window_destroy (GdkGLWindow *glwindow)
+{
+  GdkGLWindowImplQuartz *impl = GDK_GL_WINDOW_IMPL_QUARTZ (glwindow);
+
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  if (impl->is_destroyed)
+    return;
+  
+  impl->is_destroyed = TRUE;
+}
+
+static void
+gdk_gl_window_impl_quartz_finalize (GObject *object)
+{
+  GdkGLWindowImplQuartz *impl = GDK_GL_WINDOW_IMPL_QUARTZ (object);
+  
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  _gdk_gl_window_destroy (GDK_GL_WINDOW (object));
+  
+  g_object_unref (G_OBJECT (impl->glconfig));
+  
+  G_OBJECT_CLASS (parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_window_impl_quartz_gl_drawable_interface_init (GdkGLDrawableClass *iface)
+{
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+  
+  iface->create_new_context   = _gdk_quartz_gl_context_window_new;
+  iface->make_context_current =  gdk_gl_window_impl_quartz_make_context_current;
+  iface->is_double_buffered   =  gdk_gl_window_impl_quartz_is_double_buffered;
+  iface->swap_buffers         =  gdk_gl_window_impl_quartz_swap_buffers;
+  iface->wait_gl              = _gdk_gl_drawable_impl_quartz_wait_gl;
+  iface->wait_gdk             = _gdk_gl_drawable_impl_quartz_wait_gdk;
+  iface->gl_begin             =  gdk_gl_window_impl_quartz_gl_begin;
+  iface->gl_end               =  gdk_gl_window_impl_quartz_gl_end;
+  iface->get_gl_config        =  gdk_gl_window_impl_quartz_get_gl_config;
+  iface->get_size             = _gdk_gl_window_get_size;
+}
+
+
+GdkGLWindow *
+gdk_gl_window_new (GdkGLConfig *glconfig,
+                   GdkWindow   *window,
+                   const int   *attrib_list)
+{
+  GdkGLWindow *glwindow;
+  GdkGLWindowImplQuartz *impl;
+  NSView *quartzView;
+  
+  GDK_GL_NOTE_FUNC ();
+  
+  g_return_val_if_fail (GDK_IS_GL_CONFIG_IMPL_QUARTZ (glconfig), NULL);
+  g_return_val_if_fail (GDK_IS_WINDOW (window), NULL);
+  
+  quartzView = gdk_quartz_window_get_nsview(window);
+
+  
+  glwindow = g_object_new (GDK_TYPE_GL_WINDOW_IMPL_QUARTZ, NULL);
+  impl = GDK_GL_WINDOW_IMPL_QUARTZ (glwindow);
+  
+  glwindow->drawable = GDK_DRAWABLE (window);
+  g_object_add_weak_pointer (G_OBJECT (glwindow->drawable),
+                 (gpointer *) &(glwindow->drawable));
+  
+  
+  impl->glconfig = glconfig;
+  g_object_ref (G_OBJECT (impl->glconfig));
+  
+  impl->quartzView = quartzView;
+  
+  impl->is_destroyed = FALSE;
+  
+  return glwindow;
+}
+
+static gboolean
+gdk_gl_window_impl_quartz_is_double_buffered (GdkGLDrawable *gldrawable)
+{
+  g_return_val_if_fail (GDK_IS_GL_WINDOW_IMPL_QUARTZ (gldrawable), FALSE);
+  
+  return gdk_gl_config_is_double_buffered (GDK_GL_WINDOW_IMPL_QUARTZ (gldrawable)->glconfig);
+}
+
+static void
+gdk_gl_window_impl_quartz_swap_buffers (GdkGLDrawable *gldrawable)
+{
+  NSOpenGLContext *quartzContext=GDK_GL_WINDOW_IMPL_QUARTZ (gldrawable)->quartzContext;
+  [quartzContext flushBuffer];
+}
+
+static gboolean     gdk_gl_window_impl_quartz_make_context_current (GdkGLDrawable *draw,
+                                                                    GdkGLDrawable *read,
+                                                                    GdkGLContext  *glcontext)
+{
+  NSOpenGLContext *quartzContext = GDK_GL_CONTEXT_IMPL_QUARTZ(glcontext)->quartzContext; 
+  [quartzContext makeCurrentContext];
+  return TRUE;
+}
+
+static gboolean      gdk_gl_window_impl_quartz_gl_begin            (GdkGLDrawable *draw,
+                                                                    GdkGLDrawable *read,
+                                                                    GdkGLContext  *glcontext)
+{
+  NSOpenGLContext *quartzContext = GDK_GL_CONTEXT_IMPL_QUARTZ(glcontext)->quartzContext; 
+  NSView      *view = GDK_GL_WINDOW_IMPL_QUARTZ (draw)->quartzView;
+  gboolean    ret=gdk_gl_window_impl_quartz_make_context_current (draw, read, glcontext);
+  if (([quartzContext view] != view) && ![view isHidden]) {
+        [quartzContext setView:view];
+    }
+  return ret;
+}
+
+static void
+gdk_gl_window_impl_quartz_gl_end (GdkGLDrawable *gldrawable)
+{
+  /* do nothing */
+}
+
+static GdkGLConfig *
+gdk_gl_window_impl_quartz_get_gl_config (GdkGLDrawable *gldrawable)
+{
+  g_return_val_if_fail (GDK_IS_GL_WINDOW_IMPL_QUARTZ(gldrawable), NULL);
+  
+  return GDK_GL_WINDOW_IMPL_QUARTZ (gldrawable)->glconfig;
+}
diff --git a/gdk/win32/Makefile.am b/gdk/win32/Makefile.am
index b5077a8..81dd064 100644
--- a/gdk/win32/Makefile.am
+++ b/gdk/win32/Makefile.am
@@ -1,7 +1,7 @@
 ## -*- Makefile -*-
 ## Makefile.am for gtkglext/gdk/win32
 
-INCLUDES = \
+AM_CPPFLAGS = \
 	-DG_LOG_DOMAIN=\"GdkGLExt\"	\
 	-DGDK_GL_COMPILATION		\
 	-DINSIDE_GDK_GL_WIN32		\
@@ -9,14 +9,10 @@ INCLUDES = \
 	-I$(top_srcdir)/gdk		\
 	-I$(top_builddir)/gdk		\
 	$(GTKGLEXT_DEBUG_FLAGS)		\
-	$(GDKGLEXT_DEP_CFLAGS)		\
-	$(GDKGLEXT_WIN_EXTRA_DEFS)	\
-	-DG_DISABLE_DEPRECATED		\
-	-DGDK_DISABLE_DEPRECATED	\
-	-DGDK_PIXBUF_DISABLE_DEPRECATED
-
-LDADDS = \
-	$(GDKGLEXT_DEP_LIBS)
+	$(GDK_CFLAGS)			\
+	$(GL_CFLAGS)			\
+	$(GDKGLEXT_WIN_CFLAGS)		\
+	$(PANGOWIN32_CFLAGS)
 
 gdkglext_win32_public_h_sources = \
 	gdkglwin32.h		\
@@ -36,7 +32,6 @@ gdkglext_win32_c_sources = \
 	gdkgldrawable-win32.c	\
 	gdkglpixmap-win32.c	\
 	gdkglwindow-win32.c	\
-	gdkglfont-win32.c	\
 	gdkglwglext.c
 
 gdkglext_win32_headers = \
@@ -52,4 +47,4 @@ gdkglextwin32include_HEADERS = $(gdkglext_win32_headers)
 noinst_LTLIBRARIES = libgdkglext-win32.la
 
 libgdkglext_win32_la_SOURCES = $(gdkglext_win32_sources)
-
+libgdkglext_win32_la_LDFLAGS = $(GDK_LIBS) $(GL_LIBS) $(GDKGLEXT_WIN_LIBS) $(PANGOWIN32_LIBS)
diff --git a/gdk/win32/gdkglconfig-win32.c b/gdk/win32/gdkglconfig-win32.c
index 50c1fbf..2f24bc0 100644
--- a/gdk/win32/gdkglconfig-win32.c
+++ b/gdk/win32/gdkglconfig-win32.c
@@ -16,68 +16,45 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglconfig-win32.h"
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
 #include <gdk/gdkscreen.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
-static void gdk_gl_config_impl_win32_class_init (GdkGLConfigImplWin32Class *klass);
-static void gdk_gl_config_impl_win32_finalize   (GObject                   *object);
 
-static gpointer parent_class = NULL;
+G_DEFINE_TYPE (GdkGLConfigImplWin32,            \
+               gdk_gl_config_impl_win32,        \
+               GDK_TYPE_GL_CONFIG)
 
-GType
-gdk_gl_config_impl_win32_get_type (void)
+static void
+gdk_gl_config_impl_win32_init (GdkGLConfigImplWin32 *self)
 {
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLConfigImplWin32Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_config_impl_win32_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLConfigImplWin32),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_CONFIG,
-                                     "GdkGLConfigImplWin32",
-                                     &type_info, 0);
-    }
-
-  return type;
 }
 
 static void
-gdk_gl_config_impl_win32_class_init (GdkGLConfigImplWin32Class *klass)
+gdk_gl_config_impl_win32_finalize (GObject *object)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  GdkGLConfigImplWin32 *impl = GDK_GL_CONFIG_IMPL_WIN32 (object);
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-  parent_class = g_type_class_peek_parent (klass);
+  g_object_unref (G_OBJECT (impl->colormap));
 
-  object_class->finalize = gdk_gl_config_impl_win32_finalize;
+  G_OBJECT_CLASS (gdk_gl_config_impl_win32_parent_class)->finalize (object);
 }
 
 static void
-gdk_gl_config_impl_win32_finalize (GObject *object)
+gdk_gl_config_impl_win32_class_init (GdkGLConfigImplWin32Class *klass)
 {
-  GdkGLConfigImplWin32 *impl = GDK_GL_CONFIG_IMPL_WIN32 (object);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-  g_object_unref (G_OBJECT (impl->colormap));
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  object_class->finalize = gdk_gl_config_impl_win32_finalize;
 }
 
 /*
@@ -391,8 +368,6 @@ gdk_gl_config_setup_pfd (CONST PIXELFORMATDESCRIPTOR *req_pfd,
  * !!! RGB palette management should be implemented...
  */
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 static GdkColormap *
 gdk_gl_config_setup_colormap (GdkScreen             *screen,
                               PIXELFORMATDESCRIPTOR *pfd,
@@ -429,46 +404,6 @@ gdk_gl_config_setup_colormap (GdkScreen             *screen,
   return NULL;
 }
 
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
-static GdkColormap *
-gdk_gl_config_setup_colormap (GdkScreen             *screen,
-                              PIXELFORMATDESCRIPTOR *pfd,
-                              gboolean               is_rgba)
-{
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  if (is_rgba)
-    {
-      /*
-       * For RGBA mode.
-       */
-
-      /* Default colormap. */
-
-      GDK_GL_NOTE (MISC, g_message (" -- Colormap: system default"));
-
-      return g_object_ref (G_OBJECT (gdk_colormap_get_system ()));
-    }
-  else
-    {
-      /*
-       * For color index mode.
-       */
-
-      /* New private colormap. */
-
-      GDK_GL_NOTE (MISC, g_message (" -- Colormap: new allocated writable"));
-
-      return gdk_colormap_new (gdk_visual_get_system (), TRUE);
-    }
-
-  /* not reached */
-  return NULL;
-}
-
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 static void
 gdk_gl_config_init_attrib (GdkGLConfig *glconfig)
 {
@@ -587,17 +522,11 @@ gdk_gl_config_new (const int *attrib_list)
 
   g_return_val_if_fail (attrib_list != NULL, NULL);
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   screen = gdk_screen_get_default ();
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  screen = NULL;
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   return gdk_gl_config_new_common (screen, attrib_list);
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 GdkGLConfig *
 gdk_gl_config_new_for_screen (GdkScreen *screen,
                               const int *attrib_list)
@@ -610,8 +539,6 @@ gdk_gl_config_new_for_screen (GdkScreen *screen,
   return gdk_gl_config_new_common (screen, attrib_list);
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 GdkGLConfig *
 gdk_win32_gl_config_new_from_pixel_format (int pixel_format)
 {
@@ -657,11 +584,7 @@ gdk_win32_gl_config_new_from_pixel_format (int pixel_format)
 
   impl->pfd = pfd;
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   impl->screen = gdk_screen_get_default ();
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  impl->screen = NULL;
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   /*
    * Get an appropriate colormap.
diff --git a/gdk/win32/gdkglcontext-win32.c b/gdk/win32/gdkglcontext-win32.c
index 408e080..afd0f37 100644
--- a/gdk/win32/gdkglcontext-win32.c
+++ b/gdk/win32/gdkglcontext-win32.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglconfig-win32.h"
@@ -24,52 +28,14 @@
 static void          gdk_gl_context_insert (GdkGLContext *glcontext);
 static void          gdk_gl_context_remove (GdkGLContext *glcontext);
 static GdkGLContext *gdk_gl_context_lookup (HGLRC         hglrc);
-static guint         gdk_gl_context_hash   (HGLRC        *hglrc);
-static gboolean      gdk_gl_context_equal  (HGLRC        *a,
-                                            HGLRC        *b);
-
-static void gdk_gl_context_impl_win32_class_init (GdkGLContextImplWin32Class *klass);
-static void gdk_gl_context_impl_win32_finalize   (GObject                    *object);
-
-static gpointer parent_class = NULL;
-
-GType
-gdk_gl_context_impl_win32_get_type (void)
-{
-  static GType type = 0;
 
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLContextImplWin32Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_context_impl_win32_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLContextImplWin32),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_CONTEXT,
-                                     "GdkGLContextImplWin32",
-                                     &type_info, 0);
-    }
-
-  return type;
-}
+G_DEFINE_TYPE (GdkGLContextImplWin32,              \
+               gdk_gl_context_impl_win32,          \
+               GDK_TYPE_GL_CONTEXT)
 
 static void
-gdk_gl_context_impl_win32_class_init (GdkGLContextImplWin32Class *klass)
+gdk_gl_context_impl_win32_init (GdkGLContextImplWin32 *self)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_context_impl_win32_finalize;
 }
 
 void
@@ -133,7 +99,17 @@ gdk_gl_context_impl_win32_finalize (GObject *object)
   if (impl->share_list != NULL)
     g_object_unref (G_OBJECT (impl->share_list));
 
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  G_OBJECT_CLASS (gdk_gl_context_impl_win32_parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_context_impl_win32_class_init (GdkGLContextImplWin32Class *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  object_class->finalize = gdk_gl_context_impl_win32_finalize;
 }
 
 static GdkGLContext *
@@ -432,13 +408,16 @@ gdk_gl_context_insert (GdkGLContext *glcontext)
   if (gl_context_ht == NULL)
     {
       GDK_GL_NOTE (MISC, g_message (" -- Create GL context hash table."));
-      gl_context_ht = g_hash_table_new ((GHashFunc) gdk_gl_context_hash,
-                                        (GEqualFunc) gdk_gl_context_equal);
+
+      /* We do not know the storage type of HGLRC. We assume that it is
+         a pointer as NULL values are specified for this type. */
+      gl_context_ht = g_hash_table_new (g_direct_hash,
+                                        g_direct_equal);
     }
 
   impl = GDK_GL_CONTEXT_IMPL_WIN32 (glcontext);
 
-  g_hash_table_insert (gl_context_ht, &(impl->hglrc), glcontext);
+  g_hash_table_insert (gl_context_ht, impl->hglrc, glcontext);
 }
 
 static void
@@ -455,7 +434,7 @@ gdk_gl_context_remove (GdkGLContext *glcontext)
 
   impl = GDK_GL_CONTEXT_IMPL_WIN32 (glcontext);
 
-  g_hash_table_remove (gl_context_ht, &(impl->hglrc));
+  g_hash_table_remove (gl_context_ht, impl->hglrc);
 
   if (g_hash_table_size (gl_context_ht) == 0)
     {
@@ -473,18 +452,5 @@ gdk_gl_context_lookup (HGLRC hglrc)
   if (gl_context_ht == NULL)
     return NULL;
 
-  return g_hash_table_lookup (gl_context_ht, &hglrc);
-}
-
-static guint
-gdk_gl_context_hash (HGLRC *hglrc)
-{
-  return (guint) *hglrc;
-}
-
-static gboolean
-gdk_gl_context_equal (HGLRC *a,
-                      HGLRC *b)
-{
-  return (*a == *b);
+  return g_hash_table_lookup (gl_context_ht, hglrc);
 }
diff --git a/gdk/win32/gdkgldrawable-win32.c b/gdk/win32/gdkgldrawable-win32.c
index 20f50cf..bfbb552 100644
--- a/gdk/win32/gdkgldrawable-win32.c
+++ b/gdk/win32/gdkgldrawable-win32.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglpixmap-win32.h"
diff --git a/gdk/win32/gdkglfont-win32.c b/gdk/win32/gdkglfont-win32.c
deleted file mode 100644
index 880715b..0000000
--- a/gdk/win32/gdkglfont-win32.c
+++ /dev/null
@@ -1,109 +0,0 @@
-/* GdkGLExt - OpenGL Extension to GDK
- * Copyright (C) 2002-2004  Naofumi Yasufuku
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
- */
-
-#include <pango/pangowin32.h>
-
-#include "gdkglwin32.h"
-#include "gdkglprivate-win32.h"
-#include "gdkglfont.h"
-
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-#include <gdk/gdkdisplay.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
-PangoFont *
-gdk_gl_font_use_pango_font (const PangoFontDescription *font_desc,
-                            int                         first,
-                            int                         count,
-                            int                         list_base)
-{
-  PangoFontMap *font_map;
-  PangoFont *font = NULL;
-  LOGFONT *logfont = NULL;
-  PangoWin32FontCache *font_cache;
-  HFONT hfont;
-  HDC hdc;
-
-  g_return_val_if_fail (font_desc != NULL, NULL);
-
-  GDK_GL_NOTE_FUNC ();
-
-  font_map = pango_win32_font_map_for_display ();
-
-  font = pango_font_map_load_font (font_map, NULL, font_desc);
-  if (font == NULL)
-    {
-      g_warning ("cannot load PangoFont");
-      goto FAIL;
-    }
-
-  logfont = pango_win32_font_logfont (font);
-  if (logfont == NULL)
-    {
-      g_warning ("cannot get LOGFONT struct");
-      font = NULL;
-      goto FAIL;
-    }
-
-  font_cache = pango_win32_font_map_get_font_cache (font_map);
-
-  hfont = pango_win32_font_cache_load (font_cache, logfont);
-
-  hdc = CreateCompatibleDC (NULL);
-  if (hdc == NULL)
-    {
-      g_warning ("cannot create a memory DC");
-      font = NULL;
-      goto FAIL;
-    }
-
-  SelectObject (hdc, hfont);
-
-  if (!wglUseFontBitmaps (hdc, first, count, list_base))
-    {
-      g_warning ("cannot create the font display lists");
-      font = NULL;
-      goto FAIL;
-    }
-
-  if (!DeleteDC (hdc))
-    g_warning ("cannot delete the memory DC");
-
-  pango_win32_font_cache_unload (font_cache, hfont);
-
- FAIL:
-
-  if (logfont != NULL)
-    g_free (logfont);
-
-  return font;
-}
-
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
-PangoFont *
-gdk_gl_font_use_pango_font_for_display (GdkDisplay                 *display,
-                                        const PangoFontDescription *font_desc,
-                                        int                         first,
-                                        int                         count,
-                                        int                         list_base)
-{
-  return gdk_gl_font_use_pango_font (font_desc, first, count, list_base);
-}
-
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
diff --git a/gdk/win32/gdkglpixmap-win32.c b/gdk/win32/gdkglpixmap-win32.c
index 093297f..36e53dc 100644
--- a/gdk/win32/gdkglpixmap-win32.c
+++ b/gdk/win32/gdkglpixmap-win32.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglconfig-win32.h"
@@ -38,57 +42,19 @@ static gboolean     gdk_gl_pixmap_impl_win32_gl_begin             (GdkGLDrawable
 static void         gdk_gl_pixmap_impl_win32_gl_end               (GdkGLDrawable *gldrawable);
 static GdkGLConfig *gdk_gl_pixmap_impl_win32_get_gl_config        (GdkGLDrawable *gldrawable);
 
-static void gdk_gl_pixmap_impl_win32_class_init (GdkGLPixmapImplWin32Class *klass);
-static void gdk_gl_pixmap_impl_win32_finalize   (GObject                   *object);
 static void gdk_gl_pixmap_impl_win32_gl_drawable_interface_init (GdkGLDrawableClass *iface);
 
-static gpointer parent_class = NULL;
-
-GType
-gdk_gl_pixmap_impl_win32_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLPixmapImplWin32Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_pixmap_impl_win32_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLPixmapImplWin32),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-      static const GInterfaceInfo gl_drawable_interface_info = {
-        (GInterfaceInitFunc) gdk_gl_pixmap_impl_win32_gl_drawable_interface_init,
-        (GInterfaceFinalizeFunc) NULL,
-        NULL                    /* interface_data */
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_PIXMAP,
-                                     "GdkGLPixmapImplWin32",
-                                     &type_info, 0);
-      g_type_add_interface_static (type,
-                                   GDK_TYPE_GL_DRAWABLE,
-                                   &gl_drawable_interface_info);
-    }
-
-  return type;
-}
+G_DEFINE_TYPE_EXTENDED (GdkGLPixmapImplWin32,
+                        gdk_gl_pixmap_impl_win32,
+                        GDK_TYPE_GL_PIXMAP,
+                        0,
+                        G_IMPLEMENT_INTERFACE
+                        (GDK_TYPE_GL_DRAWABLE,
+                         gdk_gl_pixmap_impl_win32_gl_drawable_interface_init));
 
 static void
-gdk_gl_pixmap_impl_win32_class_init (GdkGLPixmapImplWin32Class *klass)
+gdk_gl_pixmap_impl_win32_init (GdkGLPixmapImplWin32 *self)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_pixmap_impl_win32_finalize;
 }
 
 void
@@ -132,7 +98,17 @@ gdk_gl_pixmap_impl_win32_finalize (GObject *object)
 
   g_object_unref (G_OBJECT (impl->glconfig));
 
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  G_OBJECT_CLASS (gdk_gl_pixmap_impl_win32_parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_pixmap_impl_win32_class_init (GdkGLPixmapImplWin32Class *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  object_class->finalize = gdk_gl_pixmap_impl_win32_finalize;
 }
 
 static void
diff --git a/gdk/win32/gdkglquery-win32.c b/gdk/win32/gdkglquery-win32.c
index 97e4e63..2db8fc4 100644
--- a/gdk/win32/gdkglquery-win32.c
+++ b/gdk/win32/gdkglquery-win32.c
@@ -16,15 +16,17 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include <string.h>
 
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglquery.h"
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
 #include <gdk/gdkdisplay.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
 gboolean
 gdk_gl_query_extension (void)
@@ -50,8 +52,6 @@ gdk_gl_query_extension (void)
 #endif
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 gboolean
 gdk_gl_query_extension_for_display (GdkDisplay *display)
 {
@@ -78,8 +78,6 @@ gdk_gl_query_extension_for_display (GdkDisplay *display)
 #endif
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 gboolean
 gdk_gl_query_version (int *major,
                       int *minor)
@@ -93,8 +91,6 @@ gdk_gl_query_version (int *major,
   return TRUE;
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 gboolean
 gdk_gl_query_version_for_display (GdkDisplay *display,
                                   int        *major,
@@ -113,8 +109,6 @@ gdk_gl_query_version_for_display (GdkDisplay *display,
   return TRUE;
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 gboolean
 gdk_win32_gl_query_wgl_extension (GdkGLConfig *glconfig,
                                   const char  *extension)
diff --git a/gdk/win32/gdkglwglext.c b/gdk/win32/gdkglwglext.c
index 757857f..d6f36e2 100644
--- a/gdk/win32/gdkglwglext.c
+++ b/gdk/win32/gdkglwglext.c
@@ -20,6 +20,10 @@
  * This is a generated file.  Please modify "gen-gdkglwglext-c.pl".
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglwglext.h"
@@ -594,6 +598,61 @@ gdk_gl_get_WGL_ARB_render_texture (GdkGLConfig *glconfig)
   return &_procs_WGL_ARB_render_texture;
 }
 
+/*
+ * WGL_ARB_create_context
+ */
+
+static GdkGL_WGL_ARB_create_context _procs_WGL_ARB_create_context = {
+  (GdkGLProc_wglCreateContextAttribsARB) -1
+};
+
+/* wglCreateContextAttribsARB */
+GdkGLProc
+gdk_gl_get_wglCreateContextAttribsARB (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_ARB_create_context.wglCreateContextAttribsARB == (GdkGLProc_wglCreateContextAttribsARB) -1)
+    _procs_WGL_ARB_create_context.wglCreateContextAttribsARB =
+      (GdkGLProc_wglCreateContextAttribsARB) gdk_gl_get_proc_address ("wglCreateContextAttribsARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglCreateContextAttribsARB () - %s",
+               (_procs_WGL_ARB_create_context.wglCreateContextAttribsARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_ARB_create_context.wglCreateContextAttribsARB);
+}
+
+/* Get WGL_ARB_create_context functions */
+GdkGL_WGL_ARB_create_context *
+gdk_gl_get_WGL_ARB_create_context (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_ARB_create_context");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglCreateContextAttribsARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_ARB_create_context () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_ARB_create_context;
+}
+
 /*
  * WGL_EXT_display_color_table
  */
@@ -2184,3 +2243,1003 @@ gdk_gl_get_WGL_I3D_swap_frame_usage (GdkGLConfig *glconfig)
   return &_procs_WGL_I3D_swap_frame_usage;
 }
 
+/*
+ * WGL_3DL_stereo_control
+ */
+
+static GdkGL_WGL_3DL_stereo_control _procs_WGL_3DL_stereo_control = {
+  (GdkGLProc_wglSetStereoEmitterState3DL) -1
+};
+
+/* wglSetStereoEmitterState3DL */
+GdkGLProc
+gdk_gl_get_wglSetStereoEmitterState3DL (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_3DL_stereo_control.wglSetStereoEmitterState3DL == (GdkGLProc_wglSetStereoEmitterState3DL) -1)
+    _procs_WGL_3DL_stereo_control.wglSetStereoEmitterState3DL =
+      (GdkGLProc_wglSetStereoEmitterState3DL) gdk_gl_get_proc_address ("wglSetStereoEmitterState3DL");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglSetStereoEmitterState3DL () - %s",
+               (_procs_WGL_3DL_stereo_control.wglSetStereoEmitterState3DL) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_3DL_stereo_control.wglSetStereoEmitterState3DL);
+}
+
+/* Get WGL_3DL_stereo_control functions */
+GdkGL_WGL_3DL_stereo_control *
+gdk_gl_get_WGL_3DL_stereo_control (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_3DL_stereo_control");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglSetStereoEmitterState3DL () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_3DL_stereo_control () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_3DL_stereo_control;
+}
+
+/*
+ * WGL_NV_present_video
+ */
+
+static GdkGL_WGL_NV_present_video _procs_WGL_NV_present_video = {
+  (GdkGLProc_wglEnumerateVideoDevicesNV) -1,
+  (GdkGLProc_wglBindVideoDeviceNV) -1,
+  (GdkGLProc_wglQueryCurrentContextNV) -1
+};
+
+/* wglEnumerateVideoDevicesNV */
+GdkGLProc
+gdk_gl_get_wglEnumerateVideoDevicesNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_present_video.wglEnumerateVideoDevicesNV == (GdkGLProc_wglEnumerateVideoDevicesNV) -1)
+    _procs_WGL_NV_present_video.wglEnumerateVideoDevicesNV =
+      (GdkGLProc_wglEnumerateVideoDevicesNV) gdk_gl_get_proc_address ("wglEnumerateVideoDevicesNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglEnumerateVideoDevicesNV () - %s",
+               (_procs_WGL_NV_present_video.wglEnumerateVideoDevicesNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_present_video.wglEnumerateVideoDevicesNV);
+}
+
+/* wglBindVideoDeviceNV */
+GdkGLProc
+gdk_gl_get_wglBindVideoDeviceNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_present_video.wglBindVideoDeviceNV == (GdkGLProc_wglBindVideoDeviceNV) -1)
+    _procs_WGL_NV_present_video.wglBindVideoDeviceNV =
+      (GdkGLProc_wglBindVideoDeviceNV) gdk_gl_get_proc_address ("wglBindVideoDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglBindVideoDeviceNV () - %s",
+               (_procs_WGL_NV_present_video.wglBindVideoDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_present_video.wglBindVideoDeviceNV);
+}
+
+/* wglQueryCurrentContextNV */
+GdkGLProc
+gdk_gl_get_wglQueryCurrentContextNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_present_video.wglQueryCurrentContextNV == (GdkGLProc_wglQueryCurrentContextNV) -1)
+    _procs_WGL_NV_present_video.wglQueryCurrentContextNV =
+      (GdkGLProc_wglQueryCurrentContextNV) gdk_gl_get_proc_address ("wglQueryCurrentContextNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglQueryCurrentContextNV () - %s",
+               (_procs_WGL_NV_present_video.wglQueryCurrentContextNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_present_video.wglQueryCurrentContextNV);
+}
+
+/* Get WGL_NV_present_video functions */
+GdkGL_WGL_NV_present_video *
+gdk_gl_get_WGL_NV_present_video (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_NV_present_video");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglEnumerateVideoDevicesNV () != NULL);
+          supported &= (gdk_gl_get_wglBindVideoDeviceNV () != NULL);
+          supported &= (gdk_gl_get_wglQueryCurrentContextNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_NV_present_video () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_NV_present_video;
+}
+
+/*
+ * WGL_NV_video_output
+ */
+
+static GdkGL_WGL_NV_video_output _procs_WGL_NV_video_output = {
+  (GdkGLProc_wglGetVideoDeviceNV) -1,
+  (GdkGLProc_wglReleaseVideoDeviceNV) -1,
+  (GdkGLProc_wglBindVideoImageNV) -1,
+  (GdkGLProc_wglReleaseVideoImageNV) -1,
+  (GdkGLProc_wglSendPbufferToVideoNV) -1,
+  (GdkGLProc_wglGetVideoInfoNV) -1
+};
+
+/* wglGetVideoDeviceNV */
+GdkGLProc
+gdk_gl_get_wglGetVideoDeviceNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_output.wglGetVideoDeviceNV == (GdkGLProc_wglGetVideoDeviceNV) -1)
+    _procs_WGL_NV_video_output.wglGetVideoDeviceNV =
+      (GdkGLProc_wglGetVideoDeviceNV) gdk_gl_get_proc_address ("wglGetVideoDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglGetVideoDeviceNV () - %s",
+               (_procs_WGL_NV_video_output.wglGetVideoDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_output.wglGetVideoDeviceNV);
+}
+
+/* wglReleaseVideoDeviceNV */
+GdkGLProc
+gdk_gl_get_wglReleaseVideoDeviceNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_output.wglReleaseVideoDeviceNV == (GdkGLProc_wglReleaseVideoDeviceNV) -1)
+    _procs_WGL_NV_video_output.wglReleaseVideoDeviceNV =
+      (GdkGLProc_wglReleaseVideoDeviceNV) gdk_gl_get_proc_address ("wglReleaseVideoDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglReleaseVideoDeviceNV () - %s",
+               (_procs_WGL_NV_video_output.wglReleaseVideoDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_output.wglReleaseVideoDeviceNV);
+}
+
+/* wglBindVideoImageNV */
+GdkGLProc
+gdk_gl_get_wglBindVideoImageNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_output.wglBindVideoImageNV == (GdkGLProc_wglBindVideoImageNV) -1)
+    _procs_WGL_NV_video_output.wglBindVideoImageNV =
+      (GdkGLProc_wglBindVideoImageNV) gdk_gl_get_proc_address ("wglBindVideoImageNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglBindVideoImageNV () - %s",
+               (_procs_WGL_NV_video_output.wglBindVideoImageNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_output.wglBindVideoImageNV);
+}
+
+/* wglReleaseVideoImageNV */
+GdkGLProc
+gdk_gl_get_wglReleaseVideoImageNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_output.wglReleaseVideoImageNV == (GdkGLProc_wglReleaseVideoImageNV) -1)
+    _procs_WGL_NV_video_output.wglReleaseVideoImageNV =
+      (GdkGLProc_wglReleaseVideoImageNV) gdk_gl_get_proc_address ("wglReleaseVideoImageNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglReleaseVideoImageNV () - %s",
+               (_procs_WGL_NV_video_output.wglReleaseVideoImageNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_output.wglReleaseVideoImageNV);
+}
+
+/* wglSendPbufferToVideoNV */
+GdkGLProc
+gdk_gl_get_wglSendPbufferToVideoNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_output.wglSendPbufferToVideoNV == (GdkGLProc_wglSendPbufferToVideoNV) -1)
+    _procs_WGL_NV_video_output.wglSendPbufferToVideoNV =
+      (GdkGLProc_wglSendPbufferToVideoNV) gdk_gl_get_proc_address ("wglSendPbufferToVideoNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglSendPbufferToVideoNV () - %s",
+               (_procs_WGL_NV_video_output.wglSendPbufferToVideoNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_output.wglSendPbufferToVideoNV);
+}
+
+/* wglGetVideoInfoNV */
+GdkGLProc
+gdk_gl_get_wglGetVideoInfoNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_output.wglGetVideoInfoNV == (GdkGLProc_wglGetVideoInfoNV) -1)
+    _procs_WGL_NV_video_output.wglGetVideoInfoNV =
+      (GdkGLProc_wglGetVideoInfoNV) gdk_gl_get_proc_address ("wglGetVideoInfoNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglGetVideoInfoNV () - %s",
+               (_procs_WGL_NV_video_output.wglGetVideoInfoNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_output.wglGetVideoInfoNV);
+}
+
+/* Get WGL_NV_video_output functions */
+GdkGL_WGL_NV_video_output *
+gdk_gl_get_WGL_NV_video_output (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_NV_video_output");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglGetVideoDeviceNV () != NULL);
+          supported &= (gdk_gl_get_wglReleaseVideoDeviceNV () != NULL);
+          supported &= (gdk_gl_get_wglBindVideoImageNV () != NULL);
+          supported &= (gdk_gl_get_wglReleaseVideoImageNV () != NULL);
+          supported &= (gdk_gl_get_wglSendPbufferToVideoNV () != NULL);
+          supported &= (gdk_gl_get_wglGetVideoInfoNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_NV_video_output () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_NV_video_output;
+}
+
+/*
+ * WGL_NV_swap_group
+ */
+
+static GdkGL_WGL_NV_swap_group _procs_WGL_NV_swap_group = {
+  (GdkGLProc_wglJoinSwapGroupNV) -1,
+  (GdkGLProc_wglBindSwapBarrierNV) -1,
+  (GdkGLProc_wglQuerySwapGroupNV) -1,
+  (GdkGLProc_wglQueryMaxSwapGroupsNV) -1,
+  (GdkGLProc_wglQueryFrameCountNV) -1,
+  (GdkGLProc_wglResetFrameCountNV) -1
+};
+
+/* wglJoinSwapGroupNV */
+GdkGLProc
+gdk_gl_get_wglJoinSwapGroupNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_swap_group.wglJoinSwapGroupNV == (GdkGLProc_wglJoinSwapGroupNV) -1)
+    _procs_WGL_NV_swap_group.wglJoinSwapGroupNV =
+      (GdkGLProc_wglJoinSwapGroupNV) gdk_gl_get_proc_address ("wglJoinSwapGroupNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglJoinSwapGroupNV () - %s",
+               (_procs_WGL_NV_swap_group.wglJoinSwapGroupNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_swap_group.wglJoinSwapGroupNV);
+}
+
+/* wglBindSwapBarrierNV */
+GdkGLProc
+gdk_gl_get_wglBindSwapBarrierNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_swap_group.wglBindSwapBarrierNV == (GdkGLProc_wglBindSwapBarrierNV) -1)
+    _procs_WGL_NV_swap_group.wglBindSwapBarrierNV =
+      (GdkGLProc_wglBindSwapBarrierNV) gdk_gl_get_proc_address ("wglBindSwapBarrierNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglBindSwapBarrierNV () - %s",
+               (_procs_WGL_NV_swap_group.wglBindSwapBarrierNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_swap_group.wglBindSwapBarrierNV);
+}
+
+/* wglQuerySwapGroupNV */
+GdkGLProc
+gdk_gl_get_wglQuerySwapGroupNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_swap_group.wglQuerySwapGroupNV == (GdkGLProc_wglQuerySwapGroupNV) -1)
+    _procs_WGL_NV_swap_group.wglQuerySwapGroupNV =
+      (GdkGLProc_wglQuerySwapGroupNV) gdk_gl_get_proc_address ("wglQuerySwapGroupNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglQuerySwapGroupNV () - %s",
+               (_procs_WGL_NV_swap_group.wglQuerySwapGroupNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_swap_group.wglQuerySwapGroupNV);
+}
+
+/* wglQueryMaxSwapGroupsNV */
+GdkGLProc
+gdk_gl_get_wglQueryMaxSwapGroupsNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_swap_group.wglQueryMaxSwapGroupsNV == (GdkGLProc_wglQueryMaxSwapGroupsNV) -1)
+    _procs_WGL_NV_swap_group.wglQueryMaxSwapGroupsNV =
+      (GdkGLProc_wglQueryMaxSwapGroupsNV) gdk_gl_get_proc_address ("wglQueryMaxSwapGroupsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglQueryMaxSwapGroupsNV () - %s",
+               (_procs_WGL_NV_swap_group.wglQueryMaxSwapGroupsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_swap_group.wglQueryMaxSwapGroupsNV);
+}
+
+/* wglQueryFrameCountNV */
+GdkGLProc
+gdk_gl_get_wglQueryFrameCountNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_swap_group.wglQueryFrameCountNV == (GdkGLProc_wglQueryFrameCountNV) -1)
+    _procs_WGL_NV_swap_group.wglQueryFrameCountNV =
+      (GdkGLProc_wglQueryFrameCountNV) gdk_gl_get_proc_address ("wglQueryFrameCountNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglQueryFrameCountNV () - %s",
+               (_procs_WGL_NV_swap_group.wglQueryFrameCountNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_swap_group.wglQueryFrameCountNV);
+}
+
+/* wglResetFrameCountNV */
+GdkGLProc
+gdk_gl_get_wglResetFrameCountNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_swap_group.wglResetFrameCountNV == (GdkGLProc_wglResetFrameCountNV) -1)
+    _procs_WGL_NV_swap_group.wglResetFrameCountNV =
+      (GdkGLProc_wglResetFrameCountNV) gdk_gl_get_proc_address ("wglResetFrameCountNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglResetFrameCountNV () - %s",
+               (_procs_WGL_NV_swap_group.wglResetFrameCountNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_swap_group.wglResetFrameCountNV);
+}
+
+/* Get WGL_NV_swap_group functions */
+GdkGL_WGL_NV_swap_group *
+gdk_gl_get_WGL_NV_swap_group (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_NV_swap_group");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglJoinSwapGroupNV () != NULL);
+          supported &= (gdk_gl_get_wglBindSwapBarrierNV () != NULL);
+          supported &= (gdk_gl_get_wglQuerySwapGroupNV () != NULL);
+          supported &= (gdk_gl_get_wglQueryMaxSwapGroupsNV () != NULL);
+          supported &= (gdk_gl_get_wglQueryFrameCountNV () != NULL);
+          supported &= (gdk_gl_get_wglResetFrameCountNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_NV_swap_group () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_NV_swap_group;
+}
+
+/*
+ * WGL_NV_gpu_affinity
+ */
+
+static GdkGL_WGL_NV_gpu_affinity _procs_WGL_NV_gpu_affinity = {
+  (GdkGLProc_wglEnumGpusNV) -1,
+  (GdkGLProc_wglEnumGpuDevicesNV) -1,
+  (GdkGLProc_wglCreateAffinityDCNV) -1,
+  (GdkGLProc_wglEnumGpusFromAffinityDCNV) -1,
+  (GdkGLProc_wglDeleteDCNV) -1
+};
+
+/* wglEnumGpusNV */
+GdkGLProc
+gdk_gl_get_wglEnumGpusNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_gpu_affinity.wglEnumGpusNV == (GdkGLProc_wglEnumGpusNV) -1)
+    _procs_WGL_NV_gpu_affinity.wglEnumGpusNV =
+      (GdkGLProc_wglEnumGpusNV) gdk_gl_get_proc_address ("wglEnumGpusNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglEnumGpusNV () - %s",
+               (_procs_WGL_NV_gpu_affinity.wglEnumGpusNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_gpu_affinity.wglEnumGpusNV);
+}
+
+/* wglEnumGpuDevicesNV */
+GdkGLProc
+gdk_gl_get_wglEnumGpuDevicesNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_gpu_affinity.wglEnumGpuDevicesNV == (GdkGLProc_wglEnumGpuDevicesNV) -1)
+    _procs_WGL_NV_gpu_affinity.wglEnumGpuDevicesNV =
+      (GdkGLProc_wglEnumGpuDevicesNV) gdk_gl_get_proc_address ("wglEnumGpuDevicesNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglEnumGpuDevicesNV () - %s",
+               (_procs_WGL_NV_gpu_affinity.wglEnumGpuDevicesNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_gpu_affinity.wglEnumGpuDevicesNV);
+}
+
+/* wglCreateAffinityDCNV */
+GdkGLProc
+gdk_gl_get_wglCreateAffinityDCNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_gpu_affinity.wglCreateAffinityDCNV == (GdkGLProc_wglCreateAffinityDCNV) -1)
+    _procs_WGL_NV_gpu_affinity.wglCreateAffinityDCNV =
+      (GdkGLProc_wglCreateAffinityDCNV) gdk_gl_get_proc_address ("wglCreateAffinityDCNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglCreateAffinityDCNV () - %s",
+               (_procs_WGL_NV_gpu_affinity.wglCreateAffinityDCNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_gpu_affinity.wglCreateAffinityDCNV);
+}
+
+/* wglEnumGpusFromAffinityDCNV */
+GdkGLProc
+gdk_gl_get_wglEnumGpusFromAffinityDCNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_gpu_affinity.wglEnumGpusFromAffinityDCNV == (GdkGLProc_wglEnumGpusFromAffinityDCNV) -1)
+    _procs_WGL_NV_gpu_affinity.wglEnumGpusFromAffinityDCNV =
+      (GdkGLProc_wglEnumGpusFromAffinityDCNV) gdk_gl_get_proc_address ("wglEnumGpusFromAffinityDCNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglEnumGpusFromAffinityDCNV () - %s",
+               (_procs_WGL_NV_gpu_affinity.wglEnumGpusFromAffinityDCNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_gpu_affinity.wglEnumGpusFromAffinityDCNV);
+}
+
+/* wglDeleteDCNV */
+GdkGLProc
+gdk_gl_get_wglDeleteDCNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_gpu_affinity.wglDeleteDCNV == (GdkGLProc_wglDeleteDCNV) -1)
+    _procs_WGL_NV_gpu_affinity.wglDeleteDCNV =
+      (GdkGLProc_wglDeleteDCNV) gdk_gl_get_proc_address ("wglDeleteDCNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglDeleteDCNV () - %s",
+               (_procs_WGL_NV_gpu_affinity.wglDeleteDCNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_gpu_affinity.wglDeleteDCNV);
+}
+
+/* Get WGL_NV_gpu_affinity functions */
+GdkGL_WGL_NV_gpu_affinity *
+gdk_gl_get_WGL_NV_gpu_affinity (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_NV_gpu_affinity");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglEnumGpusNV () != NULL);
+          supported &= (gdk_gl_get_wglEnumGpuDevicesNV () != NULL);
+          supported &= (gdk_gl_get_wglCreateAffinityDCNV () != NULL);
+          supported &= (gdk_gl_get_wglEnumGpusFromAffinityDCNV () != NULL);
+          supported &= (gdk_gl_get_wglDeleteDCNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_NV_gpu_affinity () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_NV_gpu_affinity;
+}
+
+/*
+ * WGL_AMD_gpu_association
+ */
+
+static GdkGL_WGL_AMD_gpu_association _procs_WGL_AMD_gpu_association = {
+  (GdkGLProc_wglGetGPUIDsAMD) -1,
+  (GdkGLProc_wglGetGPUInfoAMD) -1,
+  (GdkGLProc_wglGetContextGPUIDAMD) -1,
+  (GdkGLProc_wglCreateAssociatedContextAMD) -1,
+  (GdkGLProc_wglCreateAssociatedContextAttribsAMD) -1,
+  (GdkGLProc_wglDeleteAssociatedContextAMD) -1,
+  (GdkGLProc_wglMakeAssociatedContextCurrentAMD) -1,
+  (GdkGLProc_wglGetCurrentAssociatedContextAMD) -1,
+  (GdkGLProc_wglBlitContextFramebufferAMD) -1
+};
+
+/* wglGetGPUIDsAMD */
+GdkGLProc
+gdk_gl_get_wglGetGPUIDsAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglGetGPUIDsAMD == (GdkGLProc_wglGetGPUIDsAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglGetGPUIDsAMD =
+      (GdkGLProc_wglGetGPUIDsAMD) gdk_gl_get_proc_address ("wglGetGPUIDsAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglGetGPUIDsAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglGetGPUIDsAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglGetGPUIDsAMD);
+}
+
+/* wglGetGPUInfoAMD */
+GdkGLProc
+gdk_gl_get_wglGetGPUInfoAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglGetGPUInfoAMD == (GdkGLProc_wglGetGPUInfoAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglGetGPUInfoAMD =
+      (GdkGLProc_wglGetGPUInfoAMD) gdk_gl_get_proc_address ("wglGetGPUInfoAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglGetGPUInfoAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglGetGPUInfoAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglGetGPUInfoAMD);
+}
+
+/* wglGetContextGPUIDAMD */
+GdkGLProc
+gdk_gl_get_wglGetContextGPUIDAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglGetContextGPUIDAMD == (GdkGLProc_wglGetContextGPUIDAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglGetContextGPUIDAMD =
+      (GdkGLProc_wglGetContextGPUIDAMD) gdk_gl_get_proc_address ("wglGetContextGPUIDAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglGetContextGPUIDAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglGetContextGPUIDAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglGetContextGPUIDAMD);
+}
+
+/* wglCreateAssociatedContextAMD */
+GdkGLProc
+gdk_gl_get_wglCreateAssociatedContextAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAMD == (GdkGLProc_wglCreateAssociatedContextAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAMD =
+      (GdkGLProc_wglCreateAssociatedContextAMD) gdk_gl_get_proc_address ("wglCreateAssociatedContextAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglCreateAssociatedContextAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAMD);
+}
+
+/* wglCreateAssociatedContextAttribsAMD */
+GdkGLProc
+gdk_gl_get_wglCreateAssociatedContextAttribsAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAttribsAMD == (GdkGLProc_wglCreateAssociatedContextAttribsAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAttribsAMD =
+      (GdkGLProc_wglCreateAssociatedContextAttribsAMD) gdk_gl_get_proc_address ("wglCreateAssociatedContextAttribsAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglCreateAssociatedContextAttribsAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAttribsAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglCreateAssociatedContextAttribsAMD);
+}
+
+/* wglDeleteAssociatedContextAMD */
+GdkGLProc
+gdk_gl_get_wglDeleteAssociatedContextAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglDeleteAssociatedContextAMD == (GdkGLProc_wglDeleteAssociatedContextAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglDeleteAssociatedContextAMD =
+      (GdkGLProc_wglDeleteAssociatedContextAMD) gdk_gl_get_proc_address ("wglDeleteAssociatedContextAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglDeleteAssociatedContextAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglDeleteAssociatedContextAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglDeleteAssociatedContextAMD);
+}
+
+/* wglMakeAssociatedContextCurrentAMD */
+GdkGLProc
+gdk_gl_get_wglMakeAssociatedContextCurrentAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglMakeAssociatedContextCurrentAMD == (GdkGLProc_wglMakeAssociatedContextCurrentAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglMakeAssociatedContextCurrentAMD =
+      (GdkGLProc_wglMakeAssociatedContextCurrentAMD) gdk_gl_get_proc_address ("wglMakeAssociatedContextCurrentAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglMakeAssociatedContextCurrentAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglMakeAssociatedContextCurrentAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglMakeAssociatedContextCurrentAMD);
+}
+
+/* wglGetCurrentAssociatedContextAMD */
+GdkGLProc
+gdk_gl_get_wglGetCurrentAssociatedContextAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglGetCurrentAssociatedContextAMD == (GdkGLProc_wglGetCurrentAssociatedContextAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglGetCurrentAssociatedContextAMD =
+      (GdkGLProc_wglGetCurrentAssociatedContextAMD) gdk_gl_get_proc_address ("wglGetCurrentAssociatedContextAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglGetCurrentAssociatedContextAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglGetCurrentAssociatedContextAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglGetCurrentAssociatedContextAMD);
+}
+
+/* wglBlitContextFramebufferAMD */
+GdkGLProc
+gdk_gl_get_wglBlitContextFramebufferAMD (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_AMD_gpu_association.wglBlitContextFramebufferAMD == (GdkGLProc_wglBlitContextFramebufferAMD) -1)
+    _procs_WGL_AMD_gpu_association.wglBlitContextFramebufferAMD =
+      (GdkGLProc_wglBlitContextFramebufferAMD) gdk_gl_get_proc_address ("wglBlitContextFramebufferAMD");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglBlitContextFramebufferAMD () - %s",
+               (_procs_WGL_AMD_gpu_association.wglBlitContextFramebufferAMD) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_AMD_gpu_association.wglBlitContextFramebufferAMD);
+}
+
+/* Get WGL_AMD_gpu_association functions */
+GdkGL_WGL_AMD_gpu_association *
+gdk_gl_get_WGL_AMD_gpu_association (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_AMD_gpu_association");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglGetGPUIDsAMD () != NULL);
+          supported &= (gdk_gl_get_wglGetGPUInfoAMD () != NULL);
+          supported &= (gdk_gl_get_wglGetContextGPUIDAMD () != NULL);
+          supported &= (gdk_gl_get_wglCreateAssociatedContextAMD () != NULL);
+          supported &= (gdk_gl_get_wglCreateAssociatedContextAttribsAMD () != NULL);
+          supported &= (gdk_gl_get_wglDeleteAssociatedContextAMD () != NULL);
+          supported &= (gdk_gl_get_wglMakeAssociatedContextCurrentAMD () != NULL);
+          supported &= (gdk_gl_get_wglGetCurrentAssociatedContextAMD () != NULL);
+          supported &= (gdk_gl_get_wglBlitContextFramebufferAMD () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_AMD_gpu_association () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_AMD_gpu_association;
+}
+
+/*
+ * WGL_NV_video_capture
+ */
+
+static GdkGL_WGL_NV_video_capture _procs_WGL_NV_video_capture = {
+  (GdkGLProc_wglBindVideoCaptureDeviceNV) -1,
+  (GdkGLProc_wglEnumerateVideoCaptureDevicesNV) -1,
+  (GdkGLProc_wglLockVideoCaptureDeviceNV) -1,
+  (GdkGLProc_wglQueryVideoCaptureDeviceNV) -1,
+  (GdkGLProc_wglReleaseVideoCaptureDeviceNV) -1
+};
+
+/* wglBindVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_wglBindVideoCaptureDeviceNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_capture.wglBindVideoCaptureDeviceNV == (GdkGLProc_wglBindVideoCaptureDeviceNV) -1)
+    _procs_WGL_NV_video_capture.wglBindVideoCaptureDeviceNV =
+      (GdkGLProc_wglBindVideoCaptureDeviceNV) gdk_gl_get_proc_address ("wglBindVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglBindVideoCaptureDeviceNV () - %s",
+               (_procs_WGL_NV_video_capture.wglBindVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_capture.wglBindVideoCaptureDeviceNV);
+}
+
+/* wglEnumerateVideoCaptureDevicesNV */
+GdkGLProc
+gdk_gl_get_wglEnumerateVideoCaptureDevicesNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_capture.wglEnumerateVideoCaptureDevicesNV == (GdkGLProc_wglEnumerateVideoCaptureDevicesNV) -1)
+    _procs_WGL_NV_video_capture.wglEnumerateVideoCaptureDevicesNV =
+      (GdkGLProc_wglEnumerateVideoCaptureDevicesNV) gdk_gl_get_proc_address ("wglEnumerateVideoCaptureDevicesNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglEnumerateVideoCaptureDevicesNV () - %s",
+               (_procs_WGL_NV_video_capture.wglEnumerateVideoCaptureDevicesNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_capture.wglEnumerateVideoCaptureDevicesNV);
+}
+
+/* wglLockVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_wglLockVideoCaptureDeviceNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_capture.wglLockVideoCaptureDeviceNV == (GdkGLProc_wglLockVideoCaptureDeviceNV) -1)
+    _procs_WGL_NV_video_capture.wglLockVideoCaptureDeviceNV =
+      (GdkGLProc_wglLockVideoCaptureDeviceNV) gdk_gl_get_proc_address ("wglLockVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglLockVideoCaptureDeviceNV () - %s",
+               (_procs_WGL_NV_video_capture.wglLockVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_capture.wglLockVideoCaptureDeviceNV);
+}
+
+/* wglQueryVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_wglQueryVideoCaptureDeviceNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_capture.wglQueryVideoCaptureDeviceNV == (GdkGLProc_wglQueryVideoCaptureDeviceNV) -1)
+    _procs_WGL_NV_video_capture.wglQueryVideoCaptureDeviceNV =
+      (GdkGLProc_wglQueryVideoCaptureDeviceNV) gdk_gl_get_proc_address ("wglQueryVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglQueryVideoCaptureDeviceNV () - %s",
+               (_procs_WGL_NV_video_capture.wglQueryVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_capture.wglQueryVideoCaptureDeviceNV);
+}
+
+/* wglReleaseVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_wglReleaseVideoCaptureDeviceNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_video_capture.wglReleaseVideoCaptureDeviceNV == (GdkGLProc_wglReleaseVideoCaptureDeviceNV) -1)
+    _procs_WGL_NV_video_capture.wglReleaseVideoCaptureDeviceNV =
+      (GdkGLProc_wglReleaseVideoCaptureDeviceNV) gdk_gl_get_proc_address ("wglReleaseVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglReleaseVideoCaptureDeviceNV () - %s",
+               (_procs_WGL_NV_video_capture.wglReleaseVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_video_capture.wglReleaseVideoCaptureDeviceNV);
+}
+
+/* Get WGL_NV_video_capture functions */
+GdkGL_WGL_NV_video_capture *
+gdk_gl_get_WGL_NV_video_capture (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_NV_video_capture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglBindVideoCaptureDeviceNV () != NULL);
+          supported &= (gdk_gl_get_wglEnumerateVideoCaptureDevicesNV () != NULL);
+          supported &= (gdk_gl_get_wglLockVideoCaptureDeviceNV () != NULL);
+          supported &= (gdk_gl_get_wglQueryVideoCaptureDeviceNV () != NULL);
+          supported &= (gdk_gl_get_wglReleaseVideoCaptureDeviceNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_NV_video_capture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_NV_video_capture;
+}
+
+/*
+ * WGL_NV_copy_image
+ */
+
+static GdkGL_WGL_NV_copy_image _procs_WGL_NV_copy_image = {
+  (GdkGLProc_wglCopyImageSubDataNV) -1
+};
+
+/* wglCopyImageSubDataNV */
+GdkGLProc
+gdk_gl_get_wglCopyImageSubDataNV (void)
+{
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (_procs_WGL_NV_copy_image.wglCopyImageSubDataNV == (GdkGLProc_wglCopyImageSubDataNV) -1)
+    _procs_WGL_NV_copy_image.wglCopyImageSubDataNV =
+      (GdkGLProc_wglCopyImageSubDataNV) gdk_gl_get_proc_address ("wglCopyImageSubDataNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_wglCopyImageSubDataNV () - %s",
+               (_procs_WGL_NV_copy_image.wglCopyImageSubDataNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_WGL_NV_copy_image.wglCopyImageSubDataNV);
+}
+
+/* Get WGL_NV_copy_image functions */
+GdkGL_WGL_NV_copy_image *
+gdk_gl_get_WGL_NV_copy_image (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (wglGetCurrentContext () == NULL)
+    return NULL;
+
+  if (supported == -1)
+    {
+      supported = gdk_win32_gl_query_wgl_extension (glconfig, "WGL_NV_copy_image");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_wglCopyImageSubDataNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_WGL_NV_copy_image () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_WGL_NV_copy_image;
+}
+
diff --git a/gdk/win32/gdkglwglext.h b/gdk/win32/gdkglwglext.h
index b69a720..79ce73e 100644
--- a/gdk/win32/gdkglwglext.h
+++ b/gdk/win32/gdkglwglext.h
@@ -253,6 +253,27 @@ struct _GdkGL_WGL_ARB_render_texture
 
 GdkGL_WGL_ARB_render_texture *gdk_gl_get_WGL_ARB_render_texture (GdkGLConfig *glconfig);
 
+/*
+ * WGL_ARB_create_context
+ */
+
+/* wglCreateContextAttribsARB */
+typedef HGLRC (WINAPI * GdkGLProc_wglCreateContextAttribsARB) (HDC hDC, HGLRC hShareContext, const int *attribList);
+GdkGLProc    gdk_gl_get_wglCreateContextAttribsARB (void);
+#define      gdk_gl_wglCreateContextAttribsARB(proc, hDC, hShareContext, attribList) \
+  ( ((GdkGLProc_wglCreateContextAttribsARB) (proc)) (hDC, hShareContext, attribList) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_ARB_create_context GdkGL_WGL_ARB_create_context;
+
+struct _GdkGL_WGL_ARB_create_context
+{
+  GdkGLProc_wglCreateContextAttribsARB wglCreateContextAttribsARB;
+};
+
+GdkGL_WGL_ARB_create_context *gdk_gl_get_WGL_ARB_create_context (GdkGLConfig *glconfig);
+
 /*
  * WGL_EXT_display_color_table
  */
@@ -834,6 +855,370 @@ struct _GdkGL_WGL_I3D_swap_frame_usage
 
 GdkGL_WGL_I3D_swap_frame_usage *gdk_gl_get_WGL_I3D_swap_frame_usage (GdkGLConfig *glconfig);
 
+/*
+ * WGL_3DL_stereo_control
+ */
+
+/* wglSetStereoEmitterState3DL */
+typedef BOOL (WINAPI * GdkGLProc_wglSetStereoEmitterState3DL) (HDC hDC, UINT uState);
+GdkGLProc    gdk_gl_get_wglSetStereoEmitterState3DL (void);
+#define      gdk_gl_wglSetStereoEmitterState3DL(proc, hDC, uState) \
+  ( ((GdkGLProc_wglSetStereoEmitterState3DL) (proc)) (hDC, uState) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_3DL_stereo_control GdkGL_WGL_3DL_stereo_control;
+
+struct _GdkGL_WGL_3DL_stereo_control
+{
+  GdkGLProc_wglSetStereoEmitterState3DL wglSetStereoEmitterState3DL;
+};
+
+GdkGL_WGL_3DL_stereo_control *gdk_gl_get_WGL_3DL_stereo_control (GdkGLConfig *glconfig);
+
+/*
+ * WGL_NV_present_video
+ */
+
+/* wglEnumerateVideoDevicesNV */
+typedef int (WINAPI * GdkGLProc_wglEnumerateVideoDevicesNV) (HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList);
+GdkGLProc    gdk_gl_get_wglEnumerateVideoDevicesNV (void);
+#define      gdk_gl_wglEnumerateVideoDevicesNV(proc, hDC, phDeviceList) \
+  ( ((GdkGLProc_wglEnumerateVideoDevicesNV) (proc)) (hDC, phDeviceList) )
+
+/* wglBindVideoDeviceNV */
+typedef BOOL (WINAPI * GdkGLProc_wglBindVideoDeviceNV) (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);
+GdkGLProc    gdk_gl_get_wglBindVideoDeviceNV (void);
+#define      gdk_gl_wglBindVideoDeviceNV(proc, hDC, uVideoSlot, hVideoDevice, piAttribList) \
+  ( ((GdkGLProc_wglBindVideoDeviceNV) (proc)) (hDC, uVideoSlot, hVideoDevice, piAttribList) )
+
+/* wglQueryCurrentContextNV */
+typedef BOOL (WINAPI * GdkGLProc_wglQueryCurrentContextNV) (int iAttribute, int *piValue);
+GdkGLProc    gdk_gl_get_wglQueryCurrentContextNV (void);
+#define      gdk_gl_wglQueryCurrentContextNV(proc, iAttribute, piValue) \
+  ( ((GdkGLProc_wglQueryCurrentContextNV) (proc)) (iAttribute, piValue) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_NV_present_video GdkGL_WGL_NV_present_video;
+
+struct _GdkGL_WGL_NV_present_video
+{
+  GdkGLProc_wglEnumerateVideoDevicesNV wglEnumerateVideoDevicesNV;
+  GdkGLProc_wglBindVideoDeviceNV wglBindVideoDeviceNV;
+  GdkGLProc_wglQueryCurrentContextNV wglQueryCurrentContextNV;
+};
+
+GdkGL_WGL_NV_present_video *gdk_gl_get_WGL_NV_present_video (GdkGLConfig *glconfig);
+
+/*
+ * WGL_NV_video_output
+ */
+
+/* wglGetVideoDeviceNV */
+typedef BOOL (WINAPI * GdkGLProc_wglGetVideoDeviceNV) (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);
+GdkGLProc    gdk_gl_get_wglGetVideoDeviceNV (void);
+#define      gdk_gl_wglGetVideoDeviceNV(proc, hDC, numDevices, hVideoDevice) \
+  ( ((GdkGLProc_wglGetVideoDeviceNV) (proc)) (hDC, numDevices, hVideoDevice) )
+
+/* wglReleaseVideoDeviceNV */
+typedef BOOL (WINAPI * GdkGLProc_wglReleaseVideoDeviceNV) (HPVIDEODEV hVideoDevice);
+GdkGLProc    gdk_gl_get_wglReleaseVideoDeviceNV (void);
+#define      gdk_gl_wglReleaseVideoDeviceNV(proc, hVideoDevice) \
+  ( ((GdkGLProc_wglReleaseVideoDeviceNV) (proc)) (hVideoDevice) )
+
+/* wglBindVideoImageNV */
+typedef BOOL (WINAPI * GdkGLProc_wglBindVideoImageNV) (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);
+GdkGLProc    gdk_gl_get_wglBindVideoImageNV (void);
+#define      gdk_gl_wglBindVideoImageNV(proc, hVideoDevice, hPbuffer, iVideoBuffer) \
+  ( ((GdkGLProc_wglBindVideoImageNV) (proc)) (hVideoDevice, hPbuffer, iVideoBuffer) )
+
+/* wglReleaseVideoImageNV */
+typedef BOOL (WINAPI * GdkGLProc_wglReleaseVideoImageNV) (HPBUFFERARB hPbuffer, int iVideoBuffer);
+GdkGLProc    gdk_gl_get_wglReleaseVideoImageNV (void);
+#define      gdk_gl_wglReleaseVideoImageNV(proc, hPbuffer, iVideoBuffer) \
+  ( ((GdkGLProc_wglReleaseVideoImageNV) (proc)) (hPbuffer, iVideoBuffer) )
+
+/* wglSendPbufferToVideoNV */
+typedef BOOL (WINAPI * GdkGLProc_wglSendPbufferToVideoNV) (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);
+GdkGLProc    gdk_gl_get_wglSendPbufferToVideoNV (void);
+#define      gdk_gl_wglSendPbufferToVideoNV(proc, hPbuffer, iBufferType, pulCounterPbuffer, bBlock) \
+  ( ((GdkGLProc_wglSendPbufferToVideoNV) (proc)) (hPbuffer, iBufferType, pulCounterPbuffer, bBlock) )
+
+/* wglGetVideoInfoNV */
+typedef BOOL (WINAPI * GdkGLProc_wglGetVideoInfoNV) (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
+GdkGLProc    gdk_gl_get_wglGetVideoInfoNV (void);
+#define      gdk_gl_wglGetVideoInfoNV(proc, hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) \
+  ( ((GdkGLProc_wglGetVideoInfoNV) (proc)) (hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_NV_video_output GdkGL_WGL_NV_video_output;
+
+struct _GdkGL_WGL_NV_video_output
+{
+  GdkGLProc_wglGetVideoDeviceNV wglGetVideoDeviceNV;
+  GdkGLProc_wglReleaseVideoDeviceNV wglReleaseVideoDeviceNV;
+  GdkGLProc_wglBindVideoImageNV wglBindVideoImageNV;
+  GdkGLProc_wglReleaseVideoImageNV wglReleaseVideoImageNV;
+  GdkGLProc_wglSendPbufferToVideoNV wglSendPbufferToVideoNV;
+  GdkGLProc_wglGetVideoInfoNV wglGetVideoInfoNV;
+};
+
+GdkGL_WGL_NV_video_output *gdk_gl_get_WGL_NV_video_output (GdkGLConfig *glconfig);
+
+/*
+ * WGL_NV_swap_group
+ */
+
+/* wglJoinSwapGroupNV */
+typedef BOOL (WINAPI * GdkGLProc_wglJoinSwapGroupNV) (HDC hDC, GLuint group);
+GdkGLProc    gdk_gl_get_wglJoinSwapGroupNV (void);
+#define      gdk_gl_wglJoinSwapGroupNV(proc, hDC, group) \
+  ( ((GdkGLProc_wglJoinSwapGroupNV) (proc)) (hDC, group) )
+
+/* wglBindSwapBarrierNV */
+typedef BOOL (WINAPI * GdkGLProc_wglBindSwapBarrierNV) (GLuint group, GLuint barrier);
+GdkGLProc    gdk_gl_get_wglBindSwapBarrierNV (void);
+#define      gdk_gl_wglBindSwapBarrierNV(proc, group, barrier) \
+  ( ((GdkGLProc_wglBindSwapBarrierNV) (proc)) (group, barrier) )
+
+/* wglQuerySwapGroupNV */
+typedef BOOL (WINAPI * GdkGLProc_wglQuerySwapGroupNV) (HDC hDC, GLuint *group, GLuint *barrier);
+GdkGLProc    gdk_gl_get_wglQuerySwapGroupNV (void);
+#define      gdk_gl_wglQuerySwapGroupNV(proc, hDC, group, barrier) \
+  ( ((GdkGLProc_wglQuerySwapGroupNV) (proc)) (hDC, group, barrier) )
+
+/* wglQueryMaxSwapGroupsNV */
+typedef BOOL (WINAPI * GdkGLProc_wglQueryMaxSwapGroupsNV) (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);
+GdkGLProc    gdk_gl_get_wglQueryMaxSwapGroupsNV (void);
+#define      gdk_gl_wglQueryMaxSwapGroupsNV(proc, hDC, maxGroups, maxBarriers) \
+  ( ((GdkGLProc_wglQueryMaxSwapGroupsNV) (proc)) (hDC, maxGroups, maxBarriers) )
+
+/* wglQueryFrameCountNV */
+typedef BOOL (WINAPI * GdkGLProc_wglQueryFrameCountNV) (HDC hDC, GLuint *count);
+GdkGLProc    gdk_gl_get_wglQueryFrameCountNV (void);
+#define      gdk_gl_wglQueryFrameCountNV(proc, hDC, count) \
+  ( ((GdkGLProc_wglQueryFrameCountNV) (proc)) (hDC, count) )
+
+/* wglResetFrameCountNV */
+typedef BOOL (WINAPI * GdkGLProc_wglResetFrameCountNV) (HDC hDC);
+GdkGLProc    gdk_gl_get_wglResetFrameCountNV (void);
+#define      gdk_gl_wglResetFrameCountNV(proc, hDC) \
+  ( ((GdkGLProc_wglResetFrameCountNV) (proc)) (hDC) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_NV_swap_group GdkGL_WGL_NV_swap_group;
+
+struct _GdkGL_WGL_NV_swap_group
+{
+  GdkGLProc_wglJoinSwapGroupNV wglJoinSwapGroupNV;
+  GdkGLProc_wglBindSwapBarrierNV wglBindSwapBarrierNV;
+  GdkGLProc_wglQuerySwapGroupNV wglQuerySwapGroupNV;
+  GdkGLProc_wglQueryMaxSwapGroupsNV wglQueryMaxSwapGroupsNV;
+  GdkGLProc_wglQueryFrameCountNV wglQueryFrameCountNV;
+  GdkGLProc_wglResetFrameCountNV wglResetFrameCountNV;
+};
+
+GdkGL_WGL_NV_swap_group *gdk_gl_get_WGL_NV_swap_group (GdkGLConfig *glconfig);
+
+/*
+ * WGL_NV_gpu_affinity
+ */
+
+/* wglEnumGpusNV */
+typedef BOOL (WINAPI * GdkGLProc_wglEnumGpusNV) (UINT iGpuIndex, HGPUNV *phGpu);
+GdkGLProc    gdk_gl_get_wglEnumGpusNV (void);
+#define      gdk_gl_wglEnumGpusNV(proc, iGpuIndex, phGpu) \
+  ( ((GdkGLProc_wglEnumGpusNV) (proc)) (iGpuIndex, phGpu) )
+
+/* wglEnumGpuDevicesNV */
+typedef BOOL (WINAPI * GdkGLProc_wglEnumGpuDevicesNV) (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice);
+GdkGLProc    gdk_gl_get_wglEnumGpuDevicesNV (void);
+#define      gdk_gl_wglEnumGpuDevicesNV(proc, hGpu, iDeviceIndex, lpGpuDevice) \
+  ( ((GdkGLProc_wglEnumGpuDevicesNV) (proc)) (hGpu, iDeviceIndex, lpGpuDevice) )
+
+/* wglCreateAffinityDCNV */
+typedef HDC (WINAPI * GdkGLProc_wglCreateAffinityDCNV) (const HGPUNV *phGpuList);
+GdkGLProc    gdk_gl_get_wglCreateAffinityDCNV (void);
+#define      gdk_gl_wglCreateAffinityDCNV(proc, phGpuList) \
+  ( ((GdkGLProc_wglCreateAffinityDCNV) (proc)) (phGpuList) )
+
+/* wglEnumGpusFromAffinityDCNV */
+typedef BOOL (WINAPI * GdkGLProc_wglEnumGpusFromAffinityDCNV) (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu);
+GdkGLProc    gdk_gl_get_wglEnumGpusFromAffinityDCNV (void);
+#define      gdk_gl_wglEnumGpusFromAffinityDCNV(proc, hAffinityDC, iGpuIndex, hGpu) \
+  ( ((GdkGLProc_wglEnumGpusFromAffinityDCNV) (proc)) (hAffinityDC, iGpuIndex, hGpu) )
+
+/* wglDeleteDCNV */
+typedef BOOL (WINAPI * GdkGLProc_wglDeleteDCNV) (HDC hdc);
+GdkGLProc    gdk_gl_get_wglDeleteDCNV (void);
+#define      gdk_gl_wglDeleteDCNV(proc, hdc) \
+  ( ((GdkGLProc_wglDeleteDCNV) (proc)) (hdc) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_NV_gpu_affinity GdkGL_WGL_NV_gpu_affinity;
+
+struct _GdkGL_WGL_NV_gpu_affinity
+{
+  GdkGLProc_wglEnumGpusNV wglEnumGpusNV;
+  GdkGLProc_wglEnumGpuDevicesNV wglEnumGpuDevicesNV;
+  GdkGLProc_wglCreateAffinityDCNV wglCreateAffinityDCNV;
+  GdkGLProc_wglEnumGpusFromAffinityDCNV wglEnumGpusFromAffinityDCNV;
+  GdkGLProc_wglDeleteDCNV wglDeleteDCNV;
+};
+
+GdkGL_WGL_NV_gpu_affinity *gdk_gl_get_WGL_NV_gpu_affinity (GdkGLConfig *glconfig);
+
+/*
+ * WGL_AMD_gpu_association
+ */
+
+/* wglGetGPUIDsAMD */
+typedef UINT (WINAPI * GdkGLProc_wglGetGPUIDsAMD) (UINT maxCount, UINT *ids);
+GdkGLProc    gdk_gl_get_wglGetGPUIDsAMD (void);
+#define      gdk_gl_wglGetGPUIDsAMD(proc, maxCount, ids) \
+  ( ((GdkGLProc_wglGetGPUIDsAMD) (proc)) (maxCount, ids) )
+
+/* wglGetGPUInfoAMD */
+typedef INT (WINAPI * GdkGLProc_wglGetGPUInfoAMD) (UINT id, int property, GLenum dataType, UINT size, void *data);
+GdkGLProc    gdk_gl_get_wglGetGPUInfoAMD (void);
+#define      gdk_gl_wglGetGPUInfoAMD(proc, id, property, dataType, size, data) \
+  ( ((GdkGLProc_wglGetGPUInfoAMD) (proc)) (id, property, dataType, size, data) )
+
+/* wglGetContextGPUIDAMD */
+typedef UINT (WINAPI * GdkGLProc_wglGetContextGPUIDAMD) (HGLRC hglrc);
+GdkGLProc    gdk_gl_get_wglGetContextGPUIDAMD (void);
+#define      gdk_gl_wglGetContextGPUIDAMD(proc, hglrc) \
+  ( ((GdkGLProc_wglGetContextGPUIDAMD) (proc)) (hglrc) )
+
+/* wglCreateAssociatedContextAMD */
+typedef HGLRC (WINAPI * GdkGLProc_wglCreateAssociatedContextAMD) (UINT id);
+GdkGLProc    gdk_gl_get_wglCreateAssociatedContextAMD (void);
+#define      gdk_gl_wglCreateAssociatedContextAMD(proc, id) \
+  ( ((GdkGLProc_wglCreateAssociatedContextAMD) (proc)) (id) )
+
+/* wglCreateAssociatedContextAttribsAMD */
+typedef HGLRC (WINAPI * GdkGLProc_wglCreateAssociatedContextAttribsAMD) (UINT id, HGLRC hShareContext, const int *attribList);
+GdkGLProc    gdk_gl_get_wglCreateAssociatedContextAttribsAMD (void);
+#define      gdk_gl_wglCreateAssociatedContextAttribsAMD(proc, id, hShareContext, attribList) \
+  ( ((GdkGLProc_wglCreateAssociatedContextAttribsAMD) (proc)) (id, hShareContext, attribList) )
+
+/* wglDeleteAssociatedContextAMD */
+typedef BOOL (WINAPI * GdkGLProc_wglDeleteAssociatedContextAMD) (HGLRC hglrc);
+GdkGLProc    gdk_gl_get_wglDeleteAssociatedContextAMD (void);
+#define      gdk_gl_wglDeleteAssociatedContextAMD(proc, hglrc) \
+  ( ((GdkGLProc_wglDeleteAssociatedContextAMD) (proc)) (hglrc) )
+
+/* wglMakeAssociatedContextCurrentAMD */
+typedef BOOL (WINAPI * GdkGLProc_wglMakeAssociatedContextCurrentAMD) (HGLRC hglrc);
+GdkGLProc    gdk_gl_get_wglMakeAssociatedContextCurrentAMD (void);
+#define      gdk_gl_wglMakeAssociatedContextCurrentAMD(proc, hglrc) \
+  ( ((GdkGLProc_wglMakeAssociatedContextCurrentAMD) (proc)) (hglrc) )
+
+/* wglGetCurrentAssociatedContextAMD */
+typedef HGLRC (WINAPI * GdkGLProc_wglGetCurrentAssociatedContextAMD) (void);
+GdkGLProc    gdk_gl_get_wglGetCurrentAssociatedContextAMD (void);
+#define      gdk_gl_wglGetCurrentAssociatedContextAMD(proc) \
+  ( ((GdkGLProc_wglGetCurrentAssociatedContextAMD) (proc)) () )
+
+/* wglBlitContextFramebufferAMD */
+typedef VOID (WINAPI * GdkGLProc_wglBlitContextFramebufferAMD) (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
+GdkGLProc    gdk_gl_get_wglBlitContextFramebufferAMD (void);
+#define      gdk_gl_wglBlitContextFramebufferAMD(proc, dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) \
+  ( ((GdkGLProc_wglBlitContextFramebufferAMD) (proc)) (dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_AMD_gpu_association GdkGL_WGL_AMD_gpu_association;
+
+struct _GdkGL_WGL_AMD_gpu_association
+{
+  GdkGLProc_wglGetGPUIDsAMD wglGetGPUIDsAMD;
+  GdkGLProc_wglGetGPUInfoAMD wglGetGPUInfoAMD;
+  GdkGLProc_wglGetContextGPUIDAMD wglGetContextGPUIDAMD;
+  GdkGLProc_wglCreateAssociatedContextAMD wglCreateAssociatedContextAMD;
+  GdkGLProc_wglCreateAssociatedContextAttribsAMD wglCreateAssociatedContextAttribsAMD;
+  GdkGLProc_wglDeleteAssociatedContextAMD wglDeleteAssociatedContextAMD;
+  GdkGLProc_wglMakeAssociatedContextCurrentAMD wglMakeAssociatedContextCurrentAMD;
+  GdkGLProc_wglGetCurrentAssociatedContextAMD wglGetCurrentAssociatedContextAMD;
+  GdkGLProc_wglBlitContextFramebufferAMD wglBlitContextFramebufferAMD;
+};
+
+GdkGL_WGL_AMD_gpu_association *gdk_gl_get_WGL_AMD_gpu_association (GdkGLConfig *glconfig);
+
+/*
+ * WGL_NV_video_capture
+ */
+
+/* wglBindVideoCaptureDeviceNV */
+typedef BOOL (WINAPI * GdkGLProc_wglBindVideoCaptureDeviceNV) (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);
+GdkGLProc    gdk_gl_get_wglBindVideoCaptureDeviceNV (void);
+#define      gdk_gl_wglBindVideoCaptureDeviceNV(proc, uVideoSlot, hDevice) \
+  ( ((GdkGLProc_wglBindVideoCaptureDeviceNV) (proc)) (uVideoSlot, hDevice) )
+
+/* wglEnumerateVideoCaptureDevicesNV */
+typedef UINT (WINAPI * GdkGLProc_wglEnumerateVideoCaptureDevicesNV) (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);
+GdkGLProc    gdk_gl_get_wglEnumerateVideoCaptureDevicesNV (void);
+#define      gdk_gl_wglEnumerateVideoCaptureDevicesNV(proc, hDc, phDeviceList) \
+  ( ((GdkGLProc_wglEnumerateVideoCaptureDevicesNV) (proc)) (hDc, phDeviceList) )
+
+/* wglLockVideoCaptureDeviceNV */
+typedef BOOL (WINAPI * GdkGLProc_wglLockVideoCaptureDeviceNV) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+GdkGLProc    gdk_gl_get_wglLockVideoCaptureDeviceNV (void);
+#define      gdk_gl_wglLockVideoCaptureDeviceNV(proc, hDc, hDevice) \
+  ( ((GdkGLProc_wglLockVideoCaptureDeviceNV) (proc)) (hDc, hDevice) )
+
+/* wglQueryVideoCaptureDeviceNV */
+typedef BOOL (WINAPI * GdkGLProc_wglQueryVideoCaptureDeviceNV) (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);
+GdkGLProc    gdk_gl_get_wglQueryVideoCaptureDeviceNV (void);
+#define      gdk_gl_wglQueryVideoCaptureDeviceNV(proc, hDc, hDevice, iAttribute, piValue) \
+  ( ((GdkGLProc_wglQueryVideoCaptureDeviceNV) (proc)) (hDc, hDevice, iAttribute, piValue) )
+
+/* wglReleaseVideoCaptureDeviceNV */
+typedef BOOL (WINAPI * GdkGLProc_wglReleaseVideoCaptureDeviceNV) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);
+GdkGLProc    gdk_gl_get_wglReleaseVideoCaptureDeviceNV (void);
+#define      gdk_gl_wglReleaseVideoCaptureDeviceNV(proc, hDc, hDevice) \
+  ( ((GdkGLProc_wglReleaseVideoCaptureDeviceNV) (proc)) (hDc, hDevice) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_NV_video_capture GdkGL_WGL_NV_video_capture;
+
+struct _GdkGL_WGL_NV_video_capture
+{
+  GdkGLProc_wglBindVideoCaptureDeviceNV wglBindVideoCaptureDeviceNV;
+  GdkGLProc_wglEnumerateVideoCaptureDevicesNV wglEnumerateVideoCaptureDevicesNV;
+  GdkGLProc_wglLockVideoCaptureDeviceNV wglLockVideoCaptureDeviceNV;
+  GdkGLProc_wglQueryVideoCaptureDeviceNV wglQueryVideoCaptureDeviceNV;
+  GdkGLProc_wglReleaseVideoCaptureDeviceNV wglReleaseVideoCaptureDeviceNV;
+};
+
+GdkGL_WGL_NV_video_capture *gdk_gl_get_WGL_NV_video_capture (GdkGLConfig *glconfig);
+
+/*
+ * WGL_NV_copy_image
+ */
+
+/* wglCopyImageSubDataNV */
+typedef BOOL (WINAPI * GdkGLProc_wglCopyImageSubDataNV) (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+GdkGLProc    gdk_gl_get_wglCopyImageSubDataNV (void);
+#define      gdk_gl_wglCopyImageSubDataNV(proc, hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) \
+  ( ((GdkGLProc_wglCopyImageSubDataNV) (proc)) (hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) )
+
+/* proc struct */
+
+typedef struct _GdkGL_WGL_NV_copy_image GdkGL_WGL_NV_copy_image;
+
+struct _GdkGL_WGL_NV_copy_image
+{
+  GdkGLProc_wglCopyImageSubDataNV wglCopyImageSubDataNV;
+};
+
+GdkGL_WGL_NV_copy_image *gdk_gl_get_WGL_NV_copy_image (GdkGLConfig *glconfig);
+
 G_END_DECLS
 
 #endif /* __GDK_GL_WGLEXT_H__ */
diff --git a/gdk/win32/gdkglwindow-win32.c b/gdk/win32/gdkglwindow-win32.c
index 55fccec..afd1395 100644
--- a/gdk/win32/gdkglwindow-win32.c
+++ b/gdk/win32/gdkglwindow-win32.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglwin32.h"
 #include "gdkglprivate-win32.h"
 #include "gdkglconfig-win32.h"
@@ -37,57 +41,19 @@ static gboolean     gdk_gl_window_impl_win32_gl_begin             (GdkGLDrawable
 static void         gdk_gl_window_impl_win32_gl_end               (GdkGLDrawable *gldrawable);
 static GdkGLConfig *gdk_gl_window_impl_win32_get_gl_config        (GdkGLDrawable *gldrawable);
 
-static void gdk_gl_window_impl_win32_class_init (GdkGLWindowImplWin32Class *klass);
-static void gdk_gl_window_impl_win32_finalize   (GObject                   *object);
-static void gdk_gl_window_impl_win32_gl_drawable_interface_init (GdkGLDrawableClass *iface);
-
-static gpointer parent_class = NULL;
+static void         gdk_gl_window_impl_win32_gl_drawable_interface_init (GdkGLDrawableClass *iface);
 
-GType
-gdk_gl_window_impl_win32_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLWindowImplWin32Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_window_impl_win32_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLWindowImplWin32),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-      static const GInterfaceInfo gl_drawable_interface_info = {
-        (GInterfaceInitFunc) gdk_gl_window_impl_win32_gl_drawable_interface_init,
-        (GInterfaceFinalizeFunc) NULL,
-        NULL                    /* interface_data */
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_WINDOW,
-                                     "GdkGLWindowImplWin32",
-                                     &type_info, 0);
-      g_type_add_interface_static (type,
-                                   GDK_TYPE_GL_DRAWABLE,
-                                   &gl_drawable_interface_info);
-    }
-
-  return type;
-}
+G_DEFINE_TYPE_EXTENDED (GdkGLWindowImplWin32,
+                        gdk_gl_window_impl_win32,
+                        GDK_TYPE_GL_WINDOW,
+                        0,
+                        G_IMPLEMENT_INTERFACE
+                        (GDK_TYPE_GL_DRAWABLE,
+                         gdk_gl_window_impl_win32_gl_drawable_interface_init));
 
 static void
-gdk_gl_window_impl_win32_class_init (GdkGLWindowImplWin32Class *klass)
+gdk_gl_window_impl_win32_init (GdkGLWindowImplWin32 *self)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_window_impl_win32_finalize;
 }
 
 void
@@ -137,7 +103,17 @@ gdk_gl_window_impl_win32_finalize (GObject *object)
 
   g_object_unref (G_OBJECT (impl->glconfig));
 
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  G_OBJECT_CLASS (gdk_gl_window_impl_win32_parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_window_impl_win32_class_init (GdkGLWindowImplWin32Class *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  object_class->finalize = gdk_gl_window_impl_win32_finalize;
 }
 
 static void
diff --git a/gdk/x11/Makefile.am b/gdk/x11/Makefile.am
index 5290f5a..a3bb76f 100644
--- a/gdk/x11/Makefile.am
+++ b/gdk/x11/Makefile.am
@@ -1,7 +1,7 @@
 ## -*- Makefile -*-
 ## Makefile.am for gtkglext/gdk/x11
 
-INCLUDES = \
+AM_CPPFLAGS = \
 	-DG_LOG_DOMAIN=\"GdkGLExt\"	\
 	-DGDK_GL_COMPILATION		\
 	-DINSIDE_GDK_GL_X11		\
@@ -9,14 +9,9 @@ INCLUDES = \
 	-I$(top_srcdir)/gdk		\
 	-I$(top_builddir)/gdk		\
 	$(GTKGLEXT_DEBUG_FLAGS)		\
-	$(GDKGLEXT_DEP_CFLAGS)		\
-        $(GDKGLEXT_WIN_EXTRA_DEFS)	\
-	-DG_DISABLE_DEPRECATED		\
-	-DGDK_DISABLE_DEPRECATED	\
-	-DGDK_PIXBUF_DISABLE_DEPRECATED
-
-LDADDS = \
-	$(GDKGLEXT_DEP_LIBS)
+	$(GDK_CFLAGS)			\
+	$(GL_CFLAGS)			\
+	$(GDKGLEXT_WIN_CFLAGS)
 
 gdkglext_x11_public_h_sources = \
 	gdkglx.h		\
@@ -38,7 +33,6 @@ gdkglext_x11_c_sources = \
 	gdkgldrawable-x11.c	\
 	gdkglpixmap-x11.c	\
 	gdkglwindow-x11.c	\
-	gdkglfont-x11.c		\
 	gdkglglxext.c
 
 gdkglext_x11_headers = \
@@ -54,4 +48,5 @@ gdkglextx11include_HEADERS = $(gdkglext_x11_headers)
 noinst_LTLIBRARIES = libgdkglext-x11.la
 
 libgdkglext_x11_la_SOURCES = $(gdkglext_x11_sources)
+libgdkglext_x11_la_LDFLAGS = $(GDK_LIBS) $(GL_LIBS) $(GDKGLEXT_WIN_LIBS)
 
diff --git a/gdk/x11/gdkglconfig-x11.c b/gdk/x11/gdkglconfig-x11.c
index 9be25b2..ee20f1a 100644
--- a/gdk/x11/gdkglconfig-x11.c
+++ b/gdk/x11/gdkglconfig-x11.c
@@ -27,9 +27,7 @@
 #include "gdkgloverlay-x11.h"
 #include "gdkglconfig-x11.h"
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-#include <gdk/gdkscreen.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
+#include <gdk/gdk.h>
 
 #ifdef HAVE_LIBXMU
 
@@ -43,70 +41,43 @@
 
 #endif /* HAVE_LIBXMU */
 
-static void gdk_gl_config_impl_x11_class_init (GdkGLConfigImplX11Class *klass);
-static void gdk_gl_config_impl_x11_finalize   (GObject                 *object);
+G_DEFINE_TYPE (GdkGLConfigImplX11,              \
+               gdk_gl_config_impl_x11,          \
+               GDK_TYPE_GL_CONFIG)
 
-static gpointer parent_class = NULL;
-
-GType
-gdk_gl_config_impl_x11_get_type (void)
+static void
+gdk_gl_config_impl_x11_init (GdkGLConfigImplX11 *self)
 {
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLConfigImplX11Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_config_impl_x11_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLConfigImplX11),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_CONFIG,
-                                     "GdkGLConfigImplX11",
-                                     &type_info, 0);
-    }
-
-  return type;
 }
 
 static void
-gdk_gl_config_impl_x11_class_init (GdkGLConfigImplX11Class *klass)
+gdk_gl_config_impl_x11_finalize (GObject *object)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+  GdkGLConfigImplX11 *impl = GDK_GL_CONFIG_IMPL_X11 (object);
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-  parent_class = g_type_class_peek_parent (klass);
+  XFree (impl->xvinfo);
 
-  object_class->finalize = gdk_gl_config_impl_x11_finalize;
+  g_object_unref (G_OBJECT (impl->colormap));
+
+  G_OBJECT_CLASS (gdk_gl_config_impl_x11_parent_class)->finalize (object);
 }
 
 static void
-gdk_gl_config_impl_x11_finalize (GObject *object)
+gdk_gl_config_impl_x11_class_init (GdkGLConfigImplX11Class *klass)
 {
-  GdkGLConfigImplX11 *impl = GDK_GL_CONFIG_IMPL_X11 (object);
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-  XFree (impl->xvinfo);
-
-  g_object_unref (G_OBJECT (impl->colormap));
-
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  object_class->finalize = gdk_gl_config_impl_x11_finalize;
 }
 
 /* 
  * Get standard RGB colormap
  */
 
-#ifdef HAVE_GDK_X11_COLORMAP_FOREIGN_NEW
-
 static GdkColormap *
 gdk_gl_config_get_std_rgb_colormap (GdkScreen   *screen,
                                     XVisualInfo *xvinfo,
@@ -235,14 +206,10 @@ gdk_gl_config_get_std_rgb_colormap (GdkScreen   *screen,
   return NULL;
 }
 
-#endif /* HAVE_GDK_X11_COLORMAP_FOREIGN_NEW */
-
 /* 
  * Setup colormap.
  */
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 static GdkColormap *
 gdk_gl_config_setup_colormap (GdkScreen   *screen,
                               XVisualInfo *xvinfo,
@@ -339,100 +306,6 @@ gdk_gl_config_setup_colormap (GdkScreen   *screen,
   return NULL;
 }
 
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
-static GdkColormap *
-gdk_gl_config_setup_colormap (GdkScreen   *screen,
-                              XVisualInfo *xvinfo,
-                              gboolean     is_rgba,
-                              gboolean     is_mesa_glx)
-{
-  GdkColormap *colormap;
-  GdkVisual *visual;
-  GdkGLOverlayInfo overlay_info;
-  gboolean overlay_supported;
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  if (is_rgba)
-    {
-      /*
-       * For RGBA mode.
-       */
-
-      /* Try default colormap. */
-
-      colormap = gdk_colormap_get_system ();
-      visual = gdk_colormap_get_visual (colormap);
-      if (GDK_VISUAL_XVISUAL (visual)->visualid == xvinfo->visualid)
-        {
-          GDK_GL_NOTE (MISC, g_message (" -- Colormap: system default"));
-
-          g_object_ref (G_OBJECT (colormap));
-          return colormap;
-        }
-
-      /* New colormap. */
-
-      GDK_GL_NOTE (MISC, g_message (" -- Colormap: new"));
-
-      visual = gdkx_visual_get (xvinfo->visualid);
-      colormap = gdk_colormap_new (visual, FALSE);
-      return colormap;
-
-    }
-  else
-    {
-      /*
-       * For color index mode.
-       */
-
-      visual = gdkx_visual_get (xvinfo->visualid);
-
-      overlay_supported = _gdk_x11_gl_overlay_get_info (visual, &overlay_info);
-      if (overlay_supported &&
-          overlay_info.transparent_type == GDK_GL_OVERLAY_TRANSPARENT_PIXEL &&
-          overlay_info.value < xvinfo->visual->map_entries)
-        {
-
-          /*
-           * On machines where zero (or some other value in the range
-           * of 0 through map_entries-1), BadAlloc may be generated
-           * when an AllocAll overlay colormap is allocated since the
-           * transparent pixel precludes all the cells in the colormap
-           * being allocated (the transparent pixel is pre-allocated).
-           * So in this case, use XAllocColorCells to allocate
-           * map_entries-1 pixels (that is, all but the transparent pixel).
-           */
-
-          GDK_GL_NOTE (MISC, g_message (" -- Colormap: new"));
-          colormap = gdk_colormap_new (visual, FALSE);
-        }
-      else
-        {
-
-          /*
-           * If there is no transparent pixel or if the transparent
-           * pixel is outside the range of valid colormap cells (HP
-           * can implement their overlays this smart way since their
-           * transparent pixel is 255), we can AllocAll the colormap.
-           * See note above.
-           */
-
-          GDK_GL_NOTE (MISC, g_message (" -- Colormap: new allocated writable"));
-          colormap = gdk_colormap_new (visual, TRUE);
-        }
-
-      return colormap;
-
-    }
-
-  /* not reached */
-  return NULL;
-}
-
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 static void
 gdk_gl_config_init_attrib (GdkGLConfig *glconfig)
 {
@@ -500,13 +373,8 @@ gdk_gl_config_new_common (GdkScreen *screen,
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   xdisplay = GDK_SCREEN_XDISPLAY (screen);
   screen_num = GDK_SCREEN_XNUMBER (screen);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  xdisplay = gdk_x11_get_default_xdisplay ();
-  screen_num = gdk_x11_get_default_screen ();
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   GDK_GL_NOTE (MISC, _gdk_x11_gl_print_glx_info (xdisplay, screen_num));
 
@@ -571,7 +439,7 @@ gdk_gl_config_new_common (GdkScreen *screen,
 
 /**
  * gdk_gl_config_new:
- * @attrib_list: a list of attribute/value pairs. The last attribute must
+ * @attrib_list: (array): a list of attribute/value pairs. The last attribute must
  *               be GDK_GL_ATTRIB_LIST_NONE.
  *
  * Returns an OpenGL frame buffer configuration that match the specified
@@ -596,21 +464,15 @@ gdk_gl_config_new (const int *attrib_list)
 
   g_return_val_if_fail (attrib_list != NULL, NULL);
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   screen = gdk_screen_get_default ();
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  screen = NULL;
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   return gdk_gl_config_new_common (screen, attrib_list);
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 /**
  * gdk_gl_config_new_for_screen:
  * @screen: target screen.
- * @attrib_list: a list of attribute/value pairs. The last attribute must
+ * @attrib_list: (array): a list of attribute/value pairs. The last attribute must
  *               be GDK_GL_ATTRIB_LIST_NONE.
  *
  * Returns an OpenGL frame buffer configuration that match the specified
@@ -630,8 +492,6 @@ gdk_gl_config_new_for_screen (GdkScreen *screen,
   return gdk_gl_config_new_common (screen, attrib_list);
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 /*
  * XVisualInfo returned by this function should be freed by XFree ().
  */
@@ -674,13 +534,8 @@ gdk_x11_gl_config_new_from_visualid_common (GdkScreen *screen,
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   xdisplay = GDK_SCREEN_XDISPLAY (screen);
   screen_num = GDK_SCREEN_XNUMBER (screen);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  xdisplay = gdk_x11_get_default_xdisplay ();
-  screen_num = gdk_x11_get_default_screen ();
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   GDK_GL_NOTE (MISC,
                g_message (" -- GLX_VENDOR     : %s",
@@ -765,17 +620,11 @@ gdk_x11_gl_config_new_from_visualid (VisualID xvisualid)
 
   GDK_GL_NOTE_FUNC ();
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   screen = gdk_screen_get_default ();
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  screen = NULL;
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   return gdk_x11_gl_config_new_from_visualid_common (screen, xvisualid);
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 /**
  * gdk_x11_gl_config_new_from_visualid_for_screen:
  * @screen: target screen.
@@ -797,15 +646,13 @@ gdk_x11_gl_config_new_from_visualid_for_screen (GdkScreen *screen,
   return gdk_x11_gl_config_new_from_visualid_common (screen, xvisualid);
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 /**
  * gdk_gl_config_get_screen:
  * @glconfig: a #GdkGLConfig.
  *
  * Gets #GdkScreen.
  *
- * Return value: the #GdkScreen.
+ * Return value: (transfer none): the #GdkScreen.
  **/
 GdkScreen *
 gdk_gl_config_get_screen (GdkGLConfig *glconfig)
@@ -819,7 +666,7 @@ gdk_gl_config_get_screen (GdkGLConfig *glconfig)
  * gdk_gl_config_get_attrib:
  * @glconfig: a #GdkGLConfig.
  * @attribute: the attribute to be returned.
- * @value: returns the requested value.
+ * @value: (out): returns the requested value.
  *
  * Gets information about a OpenGL frame buffer configuration.
  *
@@ -849,7 +696,7 @@ gdk_gl_config_get_attrib (GdkGLConfig *glconfig,
  * Gets the #GdkColormap that is appropriate for the OpenGL frame buffer
  * configuration.
  *
- * Return value: the appropriate #GdkColormap.
+ * Return value: (transfer none): the appropriate #GdkColormap.
  **/
 GdkColormap *
 gdk_gl_config_get_colormap (GdkGLConfig *glconfig)
@@ -866,7 +713,7 @@ gdk_gl_config_get_colormap (GdkGLConfig *glconfig)
  * Gets the #GdkVisual that is appropriate for the OpenGL frame buffer
  * configuration.
  *
- * Return value: the appropriate #GdkVisual.
+ * Return value: (transfer none): the appropriate #GdkVisual.
  **/
 GdkVisual *
 gdk_gl_config_get_visual (GdkGLConfig *glconfig)
@@ -898,7 +745,7 @@ gdk_gl_config_get_depth (GdkGLConfig *glconfig)
  *
  * Gets X Display.
  *
- * Return value: pointer to the Display.
+ * Return value: (transfer none): pointer to the Display.
  **/
 Display *
 gdk_x11_gl_config_get_xdisplay (GdkGLConfig *glconfig)
@@ -930,7 +777,7 @@ gdk_x11_gl_config_get_screen_number (GdkGLConfig *glconfig)
  *
  * Gets XVisualInfo data.
  *
- * Return value: pointer to the XVisualInfo data.
+ * Return value: (transfer none): pointer to the XVisualInfo data.
  **/
 XVisualInfo *
 gdk_x11_gl_config_get_xvinfo (GdkGLConfig *glconfig)
diff --git a/gdk/x11/gdkglcontext-x11.c b/gdk/x11/gdkglcontext-x11.c
index 9f772cb..7249eb6 100644
--- a/gdk/x11/gdkglcontext-x11.c
+++ b/gdk/x11/gdkglcontext-x11.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
 #include <gdk/gdk.h>            /* for gdk_error_trap_(push|pop) () */
 
 #include "gdkglx.h"
@@ -27,52 +31,14 @@
 static void          gdk_gl_context_insert (GdkGLContext *glcontext);
 static void          gdk_gl_context_remove (GdkGLContext *glcontext);
 static GdkGLContext *gdk_gl_context_lookup (GLXContext    glxcontext);
-static guint         gdk_gl_context_hash   (GLXContext   *glxcontext);
-static gboolean      gdk_gl_context_equal  (GLXContext   *a,
-                                            GLXContext   *b);
-
-static void gdk_gl_context_impl_x11_class_init (GdkGLContextImplX11Class *klass);
-static void gdk_gl_context_impl_x11_finalize   (GObject                  *object);
-
-static gpointer parent_class = NULL;
-
-GType
-gdk_gl_context_impl_x11_get_type (void)
-{
-  static GType type = 0;
 
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLContextImplX11Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_context_impl_x11_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLContextImplX11),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_CONTEXT,
-                                     "GdkGLContextImplX11",
-                                     &type_info, 0);
-    }
-
-  return type;
-}
+G_DEFINE_TYPE (GdkGLContextImplX11,              \
+               gdk_gl_context_impl_x11,          \
+               GDK_TYPE_GL_CONTEXT)
 
 static void
-gdk_gl_context_impl_x11_class_init (GdkGLContextImplX11Class *klass)
+gdk_gl_context_impl_x11_init (GdkGLContextImplX11 *self)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_context_impl_x11_finalize;
 }
 
 void
@@ -139,7 +105,17 @@ gdk_gl_context_impl_x11_finalize (GObject *object)
   if (impl->share_list != NULL)
     g_object_unref (G_OBJECT (impl->share_list));
 
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  G_OBJECT_CLASS (gdk_gl_context_impl_x11_parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_context_impl_x11_class_init (GdkGLContextImplX11Class *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  object_class->finalize = gdk_gl_context_impl_x11_finalize;
 }
 
 static GdkGLContext *
@@ -271,7 +247,7 @@ _gdk_x11_gl_context_new (GdkGLDrawable *gldrawable,
 /**
  * gdk_x11_gl_context_foreign_new:
  * @glconfig: #GdkGLConfig that represents the visual the GLXContext uses.
- * @share_list: the #GdkGLContext which shares display lists with the
+ * @share_list: (allow-none): the #GdkGLContext which shares display lists with the
  *              GLXContext, or NULL.
  * @glxcontext: exsisting GLXContext.
  *
@@ -409,7 +385,7 @@ _gdk_gl_context_set_gl_drawable_read (GdkGLContext  *glcontext,
  *
  * Gets #GdkGLDrawable to which the @glcontext is bound.
  *
- * Return value: the #GdkGLDrawable or NULL if no #GdkGLDrawable is bound.
+ * Return value: (transfer none): the #GdkGLDrawable or NULL if no #GdkGLDrawable is bound.
  **/
 GdkGLDrawable *
 gdk_gl_context_get_gl_drawable (GdkGLContext *glcontext)
@@ -425,7 +401,7 @@ gdk_gl_context_get_gl_drawable (GdkGLContext *glcontext)
  *
  * Gets #GdkGLConfig with which the @glcontext is configured.
  *
- * Return value: the #GdkGLConfig.
+ * Return value: (transfer none): the #GdkGLConfig.
  **/
 GdkGLConfig *
 gdk_gl_context_get_gl_config (GdkGLContext *glcontext)
@@ -442,7 +418,7 @@ gdk_gl_context_get_gl_config (GdkGLContext *glcontext)
  * Gets #GdkGLContext with which the @glcontext shares the display lists and
  * texture objects.
  *
- * Return value: the #GdkGLContext.
+ * Return value: (transfer none): the #GdkGLContext.
  **/
 GdkGLContext *
 gdk_gl_context_get_share_list (GdkGLContext *glcontext)
@@ -489,7 +465,7 @@ gdk_gl_context_get_render_type (GdkGLContext *glcontext)
  *
  * Returns the current #GdkGLContext.
  *
- * Return value: the current #GdkGLContext or NULL if there is no current
+ * Return value: (transfer none): the current #GdkGLContext or NULL if there is no current
  *               context.
  **/
 GdkGLContext *
@@ -545,13 +521,18 @@ gdk_gl_context_insert (GdkGLContext *glcontext)
   if (gl_context_ht == NULL)
     {
       GDK_GL_NOTE (MISC, g_message (" -- Create GL context hash table."));
-      gl_context_ht = g_hash_table_new ((GHashFunc) gdk_gl_context_hash,
-                                        (GEqualFunc) gdk_gl_context_equal);
+
+      /* We do not know the storage type of GLXContext from the GLX
+         specification. We assume that it is a pointer as NULL values
+         are specified for this type---this is consistent with the SGI
+         and Mesa GLX implementations. */
+      gl_context_ht = g_hash_table_new (g_direct_hash,
+                                        g_direct_equal);
     }
 
   impl = GDK_GL_CONTEXT_IMPL_X11 (glcontext);
 
-  g_hash_table_insert (gl_context_ht, &(impl->glxcontext), glcontext);
+  g_hash_table_insert (gl_context_ht, impl->glxcontext, glcontext);
 }
 
 static void
@@ -566,7 +547,7 @@ gdk_gl_context_remove (GdkGLContext *glcontext)
 
   impl = GDK_GL_CONTEXT_IMPL_X11 (glcontext);
 
-  g_hash_table_remove (gl_context_ht, &(impl->glxcontext));
+  g_hash_table_remove (gl_context_ht, impl->glxcontext);
 
   if (g_hash_table_size (gl_context_ht) == 0)
     {
@@ -584,18 +565,5 @@ gdk_gl_context_lookup (GLXContext glxcontext)
   if (gl_context_ht == NULL)
     return NULL;
 
-  return g_hash_table_lookup (gl_context_ht, &glxcontext);
-}
-
-static guint
-gdk_gl_context_hash (GLXContext *glxcontext)
-{
-  return (guint) *glxcontext;
-}
-
-static gboolean
-gdk_gl_context_equal (GLXContext *a,
-                      GLXContext *b)
-{
-  return (*a == *b);
+  return g_hash_table_lookup (gl_context_ht, glxcontext);
 }
diff --git a/gdk/x11/gdkgldrawable-x11.c b/gdk/x11/gdkgldrawable-x11.c
index 3a22286..cb961d7 100644
--- a/gdk/x11/gdkgldrawable-x11.c
+++ b/gdk/x11/gdkgldrawable-x11.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglx.h"
 #include "gdkglprivate-x11.h"
 
diff --git a/gdk/x11/gdkglfont-x11.c b/gdk/x11/gdkglfont-x11.c
deleted file mode 100644
index d4ec881..0000000
--- a/gdk/x11/gdkglfont-x11.c
+++ /dev/null
@@ -1,196 +0,0 @@
-/* GdkGLExt - OpenGL Extension to GDK
- * Copyright (C) 2002-2004  Naofumi Yasufuku
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
- */
-
-#include <string.h>
-
-#include <pango/pangox.h>
-
-#include "gdkglx.h"
-#include "gdkglprivate-x11.h"
-#include "gdkglfont.h"
-
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-#include <gdk/gdkdisplay.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
-/*
- * This code is ripped from gdk/x11/gdkfont-x11.c in GTK+.
- */
-static char *
-gdk_gl_font_charset_for_locale (void)
-{
-  static char *charset_map[][2] = {
-    { "ANSI_X3.4-1968", "iso8859-1" },
-    { "US-ASCII",   "iso8859-1" },
-    { "ISO-8859-1", "iso8859-1" },
-    { "ISO-8859-2", "iso8859-2" },
-    { "ISO-8859-3", "iso8859-3" },
-    { "ISO-8859-4", "iso8859-4" },
-    { "ISO-8859-5", "iso8859-5" },
-    { "ISO-8859-6", "iso8859-6" },
-    { "ISO-8859-7", "iso8859-7" },
-    { "ISO-8859-8", "iso8859-8" },
-    { "ISO-8859-9", "iso8859-9" },
-    { "UTF-8",      "iso8859-1" }
-  };
-
-  const char *codeset;
-  char *result = NULL;
-  gsize i;
-
-  g_get_charset (&codeset);
-  
-  for (i = 0; i < G_N_ELEMENTS (charset_map); i++)
-    if (strcmp (charset_map[i][0], codeset) == 0)
-      {
-	result = charset_map[i][1];
-	break;
-      }
-
-  if (result != NULL)
-    return g_strdup (result);
-  else
-    return g_strdup ("iso8859-1");
-}
-
-static PangoFont *
-gdk_gl_font_use_pango_font_common (PangoFontMap               *font_map,
-                                   const PangoFontDescription *font_desc,
-                                   int                         first,
-                                   int                         count,
-                                   int                         list_base)
-{
-  PangoFont *font = NULL;
-  gchar *charset = NULL;
-  PangoXSubfont subfont_id;
-  gchar *xlfd = NULL;
-  PangoXFontCache *font_cache;
-  XFontStruct *fs;
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  font = pango_font_map_load_font (font_map, NULL, font_desc);
-  if (font == NULL)
-    {
-      g_warning ("cannot load PangoFont");
-      goto FAIL;
-    }
-
-  charset = gdk_gl_font_charset_for_locale ();
-  if (!pango_x_find_first_subfont (font, &charset, 1, &subfont_id))
-    {
-      g_warning ("cannot find PangoXSubfont");
-      font = NULL;
-      goto FAIL;
-    }
-
-  xlfd = pango_x_font_subfont_xlfd (font, subfont_id);
-  if (xlfd == NULL)
-    {
-      g_warning ("cannot get XLFD");
-      font = NULL;
-      goto FAIL;
-    }
-
-  font_cache = pango_x_font_map_get_font_cache (font_map);
-
-  fs = pango_x_font_cache_load (font_cache, xlfd);
-
-  glXUseXFont (fs->fid, first, count, list_base);
-
-  pango_x_font_cache_unload (font_cache, fs);
-
- FAIL:
-
-  if (charset != NULL)
-    g_free (charset);
-
-  if (xlfd != NULL)
-    g_free (xlfd);
-
-  return font;
-}
-
-/**
- * gdk_gl_font_use_pango_font:
- * @font_desc: a #PangoFontDescription describing the font to use.
- * @first: the index of the first glyph to be taken.
- * @count: the number of glyphs to be taken.
- * @list_base: the index of the first display list to be generated.
- *
- * Creates bitmap display lists from a #PangoFont.
- *
- * Return value: the #PangoFont used, or NULL if no font matched.
- **/
-PangoFont *
-gdk_gl_font_use_pango_font (const PangoFontDescription *font_desc,
-                            int                         first,
-                            int                         count,
-                            int                         list_base)
-{
-  PangoFontMap *font_map;
-
-  g_return_val_if_fail (font_desc != NULL, NULL);
-
-  GDK_GL_NOTE_FUNC ();
-
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-  font_map = pango_x_font_map_for_display (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()));
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  font_map = pango_x_font_map_for_display (gdk_x11_get_default_xdisplay ());
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
-  return gdk_gl_font_use_pango_font_common (font_map, font_desc,
-                                            first, count, list_base);
-}
-
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
-/**
- * gdk_gl_font_use_pango_font_for_display:
- * @display: a #GdkDisplay.
- * @font_desc: a #PangoFontDescription describing the font to use.
- * @first: the index of the first glyph to be taken.
- * @count: the number of glyphs to be taken.
- * @list_base: the index of the first display list to be generated.
- *
- * Creates bitmap display lists from a #PangoFont.
- *
- * Return value: the #PangoFont used, or NULL if no font matched.
- **/
-PangoFont *
-gdk_gl_font_use_pango_font_for_display (GdkDisplay                 *display,
-                                        const PangoFontDescription *font_desc,
-                                        int                         first,
-                                        int                         count,
-                                        int                         list_base)
-{
-  PangoFontMap *font_map;
-
-  g_return_val_if_fail (GDK_IS_DISPLAY (display), NULL);
-  g_return_val_if_fail (font_desc != NULL, NULL);
-
-  GDK_GL_NOTE_FUNC ();
-
-  font_map = pango_x_font_map_for_display (GDK_DISPLAY_XDISPLAY (display));
-
-  return gdk_gl_font_use_pango_font_common (font_map, font_desc,
-                                            first, count, list_base);
-}
-
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
diff --git a/gdk/x11/gdkglglxext.c b/gdk/x11/gdkglglxext.c
index 191a719..3aadcdd 100644
--- a/gdk/x11/gdkglglxext.c
+++ b/gdk/x11/gdkglglxext.c
@@ -20,6 +20,10 @@
  * This is a generated file.  Please modify "gen-gdkglglxext-c.pl".
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglx.h"
 #include "gdkglprivate-x11.h"
 #include "gdkglglxext.h"
@@ -450,6 +454,55 @@ gdk_gl_get_GLX_ARB_get_proc_address (GdkGLConfig *glconfig)
   return &_procs_GLX_ARB_get_proc_address;
 }
 
+/*
+ * GLX_ARB_create_context
+ */
+
+static GdkGL_GLX_ARB_create_context _procs_GLX_ARB_create_context = {
+  (GdkGLProc_glXCreateContextAttribsARB) -1
+};
+
+/* glXCreateContextAttribsARB */
+GdkGLProc
+gdk_gl_get_glXCreateContextAttribsARB (void)
+{
+  if (_procs_GLX_ARB_create_context.glXCreateContextAttribsARB == (GdkGLProc_glXCreateContextAttribsARB) -1)
+    _procs_GLX_ARB_create_context.glXCreateContextAttribsARB =
+      (GdkGLProc_glXCreateContextAttribsARB) gdk_gl_get_proc_address ("glXCreateContextAttribsARB");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXCreateContextAttribsARB () - %s",
+               (_procs_GLX_ARB_create_context.glXCreateContextAttribsARB) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_ARB_create_context.glXCreateContextAttribsARB);
+}
+
+/* Get GLX_ARB_create_context functions */
+GdkGL_GLX_ARB_create_context *
+gdk_gl_get_GLX_ARB_create_context (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_ARB_create_context");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXCreateContextAttribsARB () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_ARB_create_context () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_ARB_create_context;
+}
+
 /*
  * GLX_SGI_swap_control
  */
@@ -1765,6 +1818,174 @@ gdk_gl_get_GLX_OML_sync_control (GdkGLConfig *glconfig)
   return &_procs_GLX_OML_sync_control;
 }
 
+/*
+ * GLX_SGIX_hyperpipe
+ */
+
+static GdkGL_GLX_SGIX_hyperpipe _procs_GLX_SGIX_hyperpipe = {
+  (GdkGLProc_glXQueryHyperpipeNetworkSGIX) -1,
+  (GdkGLProc_glXHyperpipeConfigSGIX) -1,
+  (GdkGLProc_glXQueryHyperpipeConfigSGIX) -1,
+  (GdkGLProc_glXDestroyHyperpipeConfigSGIX) -1,
+  (GdkGLProc_glXBindHyperpipeSGIX) -1,
+  (GdkGLProc_glXQueryHyperpipeBestAttribSGIX) -1,
+  (GdkGLProc_glXHyperpipeAttribSGIX) -1,
+  (GdkGLProc_glXQueryHyperpipeAttribSGIX) -1
+};
+
+/* glXQueryHyperpipeNetworkSGIX */
+GdkGLProc
+gdk_gl_get_glXQueryHyperpipeNetworkSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeNetworkSGIX == (GdkGLProc_glXQueryHyperpipeNetworkSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeNetworkSGIX =
+      (GdkGLProc_glXQueryHyperpipeNetworkSGIX) gdk_gl_get_proc_address ("glXQueryHyperpipeNetworkSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQueryHyperpipeNetworkSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeNetworkSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeNetworkSGIX);
+}
+
+/* glXHyperpipeConfigSGIX */
+GdkGLProc
+gdk_gl_get_glXHyperpipeConfigSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXHyperpipeConfigSGIX == (GdkGLProc_glXHyperpipeConfigSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXHyperpipeConfigSGIX =
+      (GdkGLProc_glXHyperpipeConfigSGIX) gdk_gl_get_proc_address ("glXHyperpipeConfigSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXHyperpipeConfigSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXHyperpipeConfigSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXHyperpipeConfigSGIX);
+}
+
+/* glXQueryHyperpipeConfigSGIX */
+GdkGLProc
+gdk_gl_get_glXQueryHyperpipeConfigSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeConfigSGIX == (GdkGLProc_glXQueryHyperpipeConfigSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeConfigSGIX =
+      (GdkGLProc_glXQueryHyperpipeConfigSGIX) gdk_gl_get_proc_address ("glXQueryHyperpipeConfigSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQueryHyperpipeConfigSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeConfigSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeConfigSGIX);
+}
+
+/* glXDestroyHyperpipeConfigSGIX */
+GdkGLProc
+gdk_gl_get_glXDestroyHyperpipeConfigSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXDestroyHyperpipeConfigSGIX == (GdkGLProc_glXDestroyHyperpipeConfigSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXDestroyHyperpipeConfigSGIX =
+      (GdkGLProc_glXDestroyHyperpipeConfigSGIX) gdk_gl_get_proc_address ("glXDestroyHyperpipeConfigSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXDestroyHyperpipeConfigSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXDestroyHyperpipeConfigSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXDestroyHyperpipeConfigSGIX);
+}
+
+/* glXBindHyperpipeSGIX */
+GdkGLProc
+gdk_gl_get_glXBindHyperpipeSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXBindHyperpipeSGIX == (GdkGLProc_glXBindHyperpipeSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXBindHyperpipeSGIX =
+      (GdkGLProc_glXBindHyperpipeSGIX) gdk_gl_get_proc_address ("glXBindHyperpipeSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXBindHyperpipeSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXBindHyperpipeSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXBindHyperpipeSGIX);
+}
+
+/* glXQueryHyperpipeBestAttribSGIX */
+GdkGLProc
+gdk_gl_get_glXQueryHyperpipeBestAttribSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeBestAttribSGIX == (GdkGLProc_glXQueryHyperpipeBestAttribSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeBestAttribSGIX =
+      (GdkGLProc_glXQueryHyperpipeBestAttribSGIX) gdk_gl_get_proc_address ("glXQueryHyperpipeBestAttribSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQueryHyperpipeBestAttribSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeBestAttribSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeBestAttribSGIX);
+}
+
+/* glXHyperpipeAttribSGIX */
+GdkGLProc
+gdk_gl_get_glXHyperpipeAttribSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXHyperpipeAttribSGIX == (GdkGLProc_glXHyperpipeAttribSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXHyperpipeAttribSGIX =
+      (GdkGLProc_glXHyperpipeAttribSGIX) gdk_gl_get_proc_address ("glXHyperpipeAttribSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXHyperpipeAttribSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXHyperpipeAttribSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXHyperpipeAttribSGIX);
+}
+
+/* glXQueryHyperpipeAttribSGIX */
+GdkGLProc
+gdk_gl_get_glXQueryHyperpipeAttribSGIX (void)
+{
+  if (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeAttribSGIX == (GdkGLProc_glXQueryHyperpipeAttribSGIX) -1)
+    _procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeAttribSGIX =
+      (GdkGLProc_glXQueryHyperpipeAttribSGIX) gdk_gl_get_proc_address ("glXQueryHyperpipeAttribSGIX");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQueryHyperpipeAttribSGIX () - %s",
+               (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeAttribSGIX) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_SGIX_hyperpipe.glXQueryHyperpipeAttribSGIX);
+}
+
+/* Get GLX_SGIX_hyperpipe functions */
+GdkGL_GLX_SGIX_hyperpipe *
+gdk_gl_get_GLX_SGIX_hyperpipe (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_SGIX_hyperpipe");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXQueryHyperpipeNetworkSGIX () != NULL);
+          supported &= (gdk_gl_get_glXHyperpipeConfigSGIX () != NULL);
+          supported &= (gdk_gl_get_glXQueryHyperpipeConfigSGIX () != NULL);
+          supported &= (gdk_gl_get_glXDestroyHyperpipeConfigSGIX () != NULL);
+          supported &= (gdk_gl_get_glXBindHyperpipeSGIX () != NULL);
+          supported &= (gdk_gl_get_glXQueryHyperpipeBestAttribSGIX () != NULL);
+          supported &= (gdk_gl_get_glXHyperpipeAttribSGIX () != NULL);
+          supported &= (gdk_gl_get_glXQueryHyperpipeAttribSGIX () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_SGIX_hyperpipe () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_SGIX_hyperpipe;
+}
+
 /*
  * GLX_MESA_agp_offset
  */
@@ -1814,6 +2035,572 @@ gdk_gl_get_GLX_MESA_agp_offset (GdkGLConfig *glconfig)
   return &_procs_GLX_MESA_agp_offset;
 }
 
+/*
+ * GLX_EXT_texture_from_pixmap
+ */
+
+static GdkGL_GLX_EXT_texture_from_pixmap _procs_GLX_EXT_texture_from_pixmap = {
+  (GdkGLProc_glXBindTexImageEXT) -1,
+  (GdkGLProc_glXReleaseTexImageEXT) -1
+};
+
+/* glXBindTexImageEXT */
+GdkGLProc
+gdk_gl_get_glXBindTexImageEXT (void)
+{
+  if (_procs_GLX_EXT_texture_from_pixmap.glXBindTexImageEXT == (GdkGLProc_glXBindTexImageEXT) -1)
+    _procs_GLX_EXT_texture_from_pixmap.glXBindTexImageEXT =
+      (GdkGLProc_glXBindTexImageEXT) gdk_gl_get_proc_address ("glXBindTexImageEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXBindTexImageEXT () - %s",
+               (_procs_GLX_EXT_texture_from_pixmap.glXBindTexImageEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_EXT_texture_from_pixmap.glXBindTexImageEXT);
+}
+
+/* glXReleaseTexImageEXT */
+GdkGLProc
+gdk_gl_get_glXReleaseTexImageEXT (void)
+{
+  if (_procs_GLX_EXT_texture_from_pixmap.glXReleaseTexImageEXT == (GdkGLProc_glXReleaseTexImageEXT) -1)
+    _procs_GLX_EXT_texture_from_pixmap.glXReleaseTexImageEXT =
+      (GdkGLProc_glXReleaseTexImageEXT) gdk_gl_get_proc_address ("glXReleaseTexImageEXT");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXReleaseTexImageEXT () - %s",
+               (_procs_GLX_EXT_texture_from_pixmap.glXReleaseTexImageEXT) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_EXT_texture_from_pixmap.glXReleaseTexImageEXT);
+}
+
+/* Get GLX_EXT_texture_from_pixmap functions */
+GdkGL_GLX_EXT_texture_from_pixmap *
+gdk_gl_get_GLX_EXT_texture_from_pixmap (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_EXT_texture_from_pixmap");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXBindTexImageEXT () != NULL);
+          supported &= (gdk_gl_get_glXReleaseTexImageEXT () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_EXT_texture_from_pixmap () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_EXT_texture_from_pixmap;
+}
+
+/*
+ * GLX_NV_present_video
+ */
+
+static GdkGL_GLX_NV_present_video _procs_GLX_NV_present_video = {
+  (GdkGLProc_glXEnumerateVideoDevicesNV) -1,
+  (GdkGLProc_glXBindVideoDeviceNV) -1
+};
+
+/* glXEnumerateVideoDevicesNV */
+GdkGLProc
+gdk_gl_get_glXEnumerateVideoDevicesNV (void)
+{
+  if (_procs_GLX_NV_present_video.glXEnumerateVideoDevicesNV == (GdkGLProc_glXEnumerateVideoDevicesNV) -1)
+    _procs_GLX_NV_present_video.glXEnumerateVideoDevicesNV =
+      (GdkGLProc_glXEnumerateVideoDevicesNV) gdk_gl_get_proc_address ("glXEnumerateVideoDevicesNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXEnumerateVideoDevicesNV () - %s",
+               (_procs_GLX_NV_present_video.glXEnumerateVideoDevicesNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_present_video.glXEnumerateVideoDevicesNV);
+}
+
+/* glXBindVideoDeviceNV */
+GdkGLProc
+gdk_gl_get_glXBindVideoDeviceNV (void)
+{
+  if (_procs_GLX_NV_present_video.glXBindVideoDeviceNV == (GdkGLProc_glXBindVideoDeviceNV) -1)
+    _procs_GLX_NV_present_video.glXBindVideoDeviceNV =
+      (GdkGLProc_glXBindVideoDeviceNV) gdk_gl_get_proc_address ("glXBindVideoDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXBindVideoDeviceNV () - %s",
+               (_procs_GLX_NV_present_video.glXBindVideoDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_present_video.glXBindVideoDeviceNV);
+}
+
+/* Get GLX_NV_present_video functions */
+GdkGL_GLX_NV_present_video *
+gdk_gl_get_GLX_NV_present_video (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_NV_present_video");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXEnumerateVideoDevicesNV () != NULL);
+          supported &= (gdk_gl_get_glXBindVideoDeviceNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_NV_present_video () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_NV_present_video;
+}
+
+/*
+ * GLX_NV_video_output
+ */
+
+static GdkGL_GLX_NV_video_output _procs_GLX_NV_video_output = {
+  (GdkGLProc_glXGetVideoDeviceNV) -1,
+  (GdkGLProc_glXReleaseVideoDeviceNV) -1,
+  (GdkGLProc_glXBindVideoImageNV) -1,
+  (GdkGLProc_glXReleaseVideoImageNV) -1,
+  (GdkGLProc_glXSendPbufferToVideoNV) -1,
+  (GdkGLProc_glXGetVideoInfoNV) -1
+};
+
+/* glXGetVideoDeviceNV */
+GdkGLProc
+gdk_gl_get_glXGetVideoDeviceNV (void)
+{
+  if (_procs_GLX_NV_video_output.glXGetVideoDeviceNV == (GdkGLProc_glXGetVideoDeviceNV) -1)
+    _procs_GLX_NV_video_output.glXGetVideoDeviceNV =
+      (GdkGLProc_glXGetVideoDeviceNV) gdk_gl_get_proc_address ("glXGetVideoDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXGetVideoDeviceNV () - %s",
+               (_procs_GLX_NV_video_output.glXGetVideoDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_output.glXGetVideoDeviceNV);
+}
+
+/* glXReleaseVideoDeviceNV */
+GdkGLProc
+gdk_gl_get_glXReleaseVideoDeviceNV (void)
+{
+  if (_procs_GLX_NV_video_output.glXReleaseVideoDeviceNV == (GdkGLProc_glXReleaseVideoDeviceNV) -1)
+    _procs_GLX_NV_video_output.glXReleaseVideoDeviceNV =
+      (GdkGLProc_glXReleaseVideoDeviceNV) gdk_gl_get_proc_address ("glXReleaseVideoDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXReleaseVideoDeviceNV () - %s",
+               (_procs_GLX_NV_video_output.glXReleaseVideoDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_output.glXReleaseVideoDeviceNV);
+}
+
+/* glXBindVideoImageNV */
+GdkGLProc
+gdk_gl_get_glXBindVideoImageNV (void)
+{
+  if (_procs_GLX_NV_video_output.glXBindVideoImageNV == (GdkGLProc_glXBindVideoImageNV) -1)
+    _procs_GLX_NV_video_output.glXBindVideoImageNV =
+      (GdkGLProc_glXBindVideoImageNV) gdk_gl_get_proc_address ("glXBindVideoImageNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXBindVideoImageNV () - %s",
+               (_procs_GLX_NV_video_output.glXBindVideoImageNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_output.glXBindVideoImageNV);
+}
+
+/* glXReleaseVideoImageNV */
+GdkGLProc
+gdk_gl_get_glXReleaseVideoImageNV (void)
+{
+  if (_procs_GLX_NV_video_output.glXReleaseVideoImageNV == (GdkGLProc_glXReleaseVideoImageNV) -1)
+    _procs_GLX_NV_video_output.glXReleaseVideoImageNV =
+      (GdkGLProc_glXReleaseVideoImageNV) gdk_gl_get_proc_address ("glXReleaseVideoImageNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXReleaseVideoImageNV () - %s",
+               (_procs_GLX_NV_video_output.glXReleaseVideoImageNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_output.glXReleaseVideoImageNV);
+}
+
+/* glXSendPbufferToVideoNV */
+GdkGLProc
+gdk_gl_get_glXSendPbufferToVideoNV (void)
+{
+  if (_procs_GLX_NV_video_output.glXSendPbufferToVideoNV == (GdkGLProc_glXSendPbufferToVideoNV) -1)
+    _procs_GLX_NV_video_output.glXSendPbufferToVideoNV =
+      (GdkGLProc_glXSendPbufferToVideoNV) gdk_gl_get_proc_address ("glXSendPbufferToVideoNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXSendPbufferToVideoNV () - %s",
+               (_procs_GLX_NV_video_output.glXSendPbufferToVideoNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_output.glXSendPbufferToVideoNV);
+}
+
+/* glXGetVideoInfoNV */
+GdkGLProc
+gdk_gl_get_glXGetVideoInfoNV (void)
+{
+  if (_procs_GLX_NV_video_output.glXGetVideoInfoNV == (GdkGLProc_glXGetVideoInfoNV) -1)
+    _procs_GLX_NV_video_output.glXGetVideoInfoNV =
+      (GdkGLProc_glXGetVideoInfoNV) gdk_gl_get_proc_address ("glXGetVideoInfoNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXGetVideoInfoNV () - %s",
+               (_procs_GLX_NV_video_output.glXGetVideoInfoNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_output.glXGetVideoInfoNV);
+}
+
+/* Get GLX_NV_video_output functions */
+GdkGL_GLX_NV_video_output *
+gdk_gl_get_GLX_NV_video_output (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_NV_video_output");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXGetVideoDeviceNV () != NULL);
+          supported &= (gdk_gl_get_glXReleaseVideoDeviceNV () != NULL);
+          supported &= (gdk_gl_get_glXBindVideoImageNV () != NULL);
+          supported &= (gdk_gl_get_glXReleaseVideoImageNV () != NULL);
+          supported &= (gdk_gl_get_glXSendPbufferToVideoNV () != NULL);
+          supported &= (gdk_gl_get_glXGetVideoInfoNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_NV_video_output () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_NV_video_output;
+}
+
+/*
+ * GLX_NV_swap_group
+ */
+
+static GdkGL_GLX_NV_swap_group _procs_GLX_NV_swap_group = {
+  (GdkGLProc_glXJoinSwapGroupNV) -1,
+  (GdkGLProc_glXBindSwapBarrierNV) -1,
+  (GdkGLProc_glXQuerySwapGroupNV) -1,
+  (GdkGLProc_glXQueryMaxSwapGroupsNV) -1,
+  (GdkGLProc_glXQueryFrameCountNV) -1,
+  (GdkGLProc_glXResetFrameCountNV) -1
+};
+
+/* glXJoinSwapGroupNV */
+GdkGLProc
+gdk_gl_get_glXJoinSwapGroupNV (void)
+{
+  if (_procs_GLX_NV_swap_group.glXJoinSwapGroupNV == (GdkGLProc_glXJoinSwapGroupNV) -1)
+    _procs_GLX_NV_swap_group.glXJoinSwapGroupNV =
+      (GdkGLProc_glXJoinSwapGroupNV) gdk_gl_get_proc_address ("glXJoinSwapGroupNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXJoinSwapGroupNV () - %s",
+               (_procs_GLX_NV_swap_group.glXJoinSwapGroupNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_swap_group.glXJoinSwapGroupNV);
+}
+
+/* glXBindSwapBarrierNV */
+GdkGLProc
+gdk_gl_get_glXBindSwapBarrierNV (void)
+{
+  if (_procs_GLX_NV_swap_group.glXBindSwapBarrierNV == (GdkGLProc_glXBindSwapBarrierNV) -1)
+    _procs_GLX_NV_swap_group.glXBindSwapBarrierNV =
+      (GdkGLProc_glXBindSwapBarrierNV) gdk_gl_get_proc_address ("glXBindSwapBarrierNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXBindSwapBarrierNV () - %s",
+               (_procs_GLX_NV_swap_group.glXBindSwapBarrierNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_swap_group.glXBindSwapBarrierNV);
+}
+
+/* glXQuerySwapGroupNV */
+GdkGLProc
+gdk_gl_get_glXQuerySwapGroupNV (void)
+{
+  if (_procs_GLX_NV_swap_group.glXQuerySwapGroupNV == (GdkGLProc_glXQuerySwapGroupNV) -1)
+    _procs_GLX_NV_swap_group.glXQuerySwapGroupNV =
+      (GdkGLProc_glXQuerySwapGroupNV) gdk_gl_get_proc_address ("glXQuerySwapGroupNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQuerySwapGroupNV () - %s",
+               (_procs_GLX_NV_swap_group.glXQuerySwapGroupNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_swap_group.glXQuerySwapGroupNV);
+}
+
+/* glXQueryMaxSwapGroupsNV */
+GdkGLProc
+gdk_gl_get_glXQueryMaxSwapGroupsNV (void)
+{
+  if (_procs_GLX_NV_swap_group.glXQueryMaxSwapGroupsNV == (GdkGLProc_glXQueryMaxSwapGroupsNV) -1)
+    _procs_GLX_NV_swap_group.glXQueryMaxSwapGroupsNV =
+      (GdkGLProc_glXQueryMaxSwapGroupsNV) gdk_gl_get_proc_address ("glXQueryMaxSwapGroupsNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQueryMaxSwapGroupsNV () - %s",
+               (_procs_GLX_NV_swap_group.glXQueryMaxSwapGroupsNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_swap_group.glXQueryMaxSwapGroupsNV);
+}
+
+/* glXQueryFrameCountNV */
+GdkGLProc
+gdk_gl_get_glXQueryFrameCountNV (void)
+{
+  if (_procs_GLX_NV_swap_group.glXQueryFrameCountNV == (GdkGLProc_glXQueryFrameCountNV) -1)
+    _procs_GLX_NV_swap_group.glXQueryFrameCountNV =
+      (GdkGLProc_glXQueryFrameCountNV) gdk_gl_get_proc_address ("glXQueryFrameCountNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQueryFrameCountNV () - %s",
+               (_procs_GLX_NV_swap_group.glXQueryFrameCountNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_swap_group.glXQueryFrameCountNV);
+}
+
+/* glXResetFrameCountNV */
+GdkGLProc
+gdk_gl_get_glXResetFrameCountNV (void)
+{
+  if (_procs_GLX_NV_swap_group.glXResetFrameCountNV == (GdkGLProc_glXResetFrameCountNV) -1)
+    _procs_GLX_NV_swap_group.glXResetFrameCountNV =
+      (GdkGLProc_glXResetFrameCountNV) gdk_gl_get_proc_address ("glXResetFrameCountNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXResetFrameCountNV () - %s",
+               (_procs_GLX_NV_swap_group.glXResetFrameCountNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_swap_group.glXResetFrameCountNV);
+}
+
+/* Get GLX_NV_swap_group functions */
+GdkGL_GLX_NV_swap_group *
+gdk_gl_get_GLX_NV_swap_group (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_NV_swap_group");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXJoinSwapGroupNV () != NULL);
+          supported &= (gdk_gl_get_glXBindSwapBarrierNV () != NULL);
+          supported &= (gdk_gl_get_glXQuerySwapGroupNV () != NULL);
+          supported &= (gdk_gl_get_glXQueryMaxSwapGroupsNV () != NULL);
+          supported &= (gdk_gl_get_glXQueryFrameCountNV () != NULL);
+          supported &= (gdk_gl_get_glXResetFrameCountNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_NV_swap_group () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_NV_swap_group;
+}
+
+/*
+ * GLX_NV_video_capture
+ */
+
+static GdkGL_GLX_NV_video_capture _procs_GLX_NV_video_capture = {
+  (GdkGLProc_glXBindVideoCaptureDeviceNV) -1,
+  (GdkGLProc_glXEnumerateVideoCaptureDevicesNV) -1,
+  (GdkGLProc_glXLockVideoCaptureDeviceNV) -1,
+  (GdkGLProc_glXQueryVideoCaptureDeviceNV) -1,
+  (GdkGLProc_glXReleaseVideoCaptureDeviceNV) -1
+};
+
+/* glXBindVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_glXBindVideoCaptureDeviceNV (void)
+{
+  if (_procs_GLX_NV_video_capture.glXBindVideoCaptureDeviceNV == (GdkGLProc_glXBindVideoCaptureDeviceNV) -1)
+    _procs_GLX_NV_video_capture.glXBindVideoCaptureDeviceNV =
+      (GdkGLProc_glXBindVideoCaptureDeviceNV) gdk_gl_get_proc_address ("glXBindVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXBindVideoCaptureDeviceNV () - %s",
+               (_procs_GLX_NV_video_capture.glXBindVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_capture.glXBindVideoCaptureDeviceNV);
+}
+
+/* glXEnumerateVideoCaptureDevicesNV */
+GdkGLProc
+gdk_gl_get_glXEnumerateVideoCaptureDevicesNV (void)
+{
+  if (_procs_GLX_NV_video_capture.glXEnumerateVideoCaptureDevicesNV == (GdkGLProc_glXEnumerateVideoCaptureDevicesNV) -1)
+    _procs_GLX_NV_video_capture.glXEnumerateVideoCaptureDevicesNV =
+      (GdkGLProc_glXEnumerateVideoCaptureDevicesNV) gdk_gl_get_proc_address ("glXEnumerateVideoCaptureDevicesNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXEnumerateVideoCaptureDevicesNV () - %s",
+               (_procs_GLX_NV_video_capture.glXEnumerateVideoCaptureDevicesNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_capture.glXEnumerateVideoCaptureDevicesNV);
+}
+
+/* glXLockVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_glXLockVideoCaptureDeviceNV (void)
+{
+  if (_procs_GLX_NV_video_capture.glXLockVideoCaptureDeviceNV == (GdkGLProc_glXLockVideoCaptureDeviceNV) -1)
+    _procs_GLX_NV_video_capture.glXLockVideoCaptureDeviceNV =
+      (GdkGLProc_glXLockVideoCaptureDeviceNV) gdk_gl_get_proc_address ("glXLockVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXLockVideoCaptureDeviceNV () - %s",
+               (_procs_GLX_NV_video_capture.glXLockVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_capture.glXLockVideoCaptureDeviceNV);
+}
+
+/* glXQueryVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_glXQueryVideoCaptureDeviceNV (void)
+{
+  if (_procs_GLX_NV_video_capture.glXQueryVideoCaptureDeviceNV == (GdkGLProc_glXQueryVideoCaptureDeviceNV) -1)
+    _procs_GLX_NV_video_capture.glXQueryVideoCaptureDeviceNV =
+      (GdkGLProc_glXQueryVideoCaptureDeviceNV) gdk_gl_get_proc_address ("glXQueryVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXQueryVideoCaptureDeviceNV () - %s",
+               (_procs_GLX_NV_video_capture.glXQueryVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_capture.glXQueryVideoCaptureDeviceNV);
+}
+
+/* glXReleaseVideoCaptureDeviceNV */
+GdkGLProc
+gdk_gl_get_glXReleaseVideoCaptureDeviceNV (void)
+{
+  if (_procs_GLX_NV_video_capture.glXReleaseVideoCaptureDeviceNV == (GdkGLProc_glXReleaseVideoCaptureDeviceNV) -1)
+    _procs_GLX_NV_video_capture.glXReleaseVideoCaptureDeviceNV =
+      (GdkGLProc_glXReleaseVideoCaptureDeviceNV) gdk_gl_get_proc_address ("glXReleaseVideoCaptureDeviceNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXReleaseVideoCaptureDeviceNV () - %s",
+               (_procs_GLX_NV_video_capture.glXReleaseVideoCaptureDeviceNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_video_capture.glXReleaseVideoCaptureDeviceNV);
+}
+
+/* Get GLX_NV_video_capture functions */
+GdkGL_GLX_NV_video_capture *
+gdk_gl_get_GLX_NV_video_capture (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_NV_video_capture");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXBindVideoCaptureDeviceNV () != NULL);
+          supported &= (gdk_gl_get_glXEnumerateVideoCaptureDevicesNV () != NULL);
+          supported &= (gdk_gl_get_glXLockVideoCaptureDeviceNV () != NULL);
+          supported &= (gdk_gl_get_glXQueryVideoCaptureDeviceNV () != NULL);
+          supported &= (gdk_gl_get_glXReleaseVideoCaptureDeviceNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_NV_video_capture () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_NV_video_capture;
+}
+
+/*
+ * GLX_NV_copy_image
+ */
+
+static GdkGL_GLX_NV_copy_image _procs_GLX_NV_copy_image = {
+  (GdkGLProc_glXCopyImageSubDataNV) -1
+};
+
+/* glXCopyImageSubDataNV */
+GdkGLProc
+gdk_gl_get_glXCopyImageSubDataNV (void)
+{
+  if (_procs_GLX_NV_copy_image.glXCopyImageSubDataNV == (GdkGLProc_glXCopyImageSubDataNV) -1)
+    _procs_GLX_NV_copy_image.glXCopyImageSubDataNV =
+      (GdkGLProc_glXCopyImageSubDataNV) gdk_gl_get_proc_address ("glXCopyImageSubDataNV");
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_glXCopyImageSubDataNV () - %s",
+               (_procs_GLX_NV_copy_image.glXCopyImageSubDataNV) ? "supported" : "not supported"));
+
+  return (GdkGLProc) (_procs_GLX_NV_copy_image.glXCopyImageSubDataNV);
+}
+
+/* Get GLX_NV_copy_image functions */
+GdkGL_GLX_NV_copy_image *
+gdk_gl_get_GLX_NV_copy_image (GdkGLConfig *glconfig)
+{
+  static gint supported = -1;
+
+  if (supported == -1)
+    {
+      supported = gdk_x11_gl_query_glx_extension (glconfig, "GLX_NV_copy_image");
+
+      if (supported)
+        {
+          supported &= (gdk_gl_get_glXCopyImageSubDataNV () != NULL);
+        }
+    }
+
+  GDK_GL_NOTE (MISC,
+    g_message (" - gdk_gl_get_GLX_NV_copy_image () - %s",
+               (supported) ? "supported" : "not supported"));
+
+  if (!supported)
+    return NULL;
+
+  return &_procs_GLX_NV_copy_image;
+}
+
 /*
  * GLX_NV_vertex_array_range
  */
diff --git a/gdk/x11/gdkglglxext.h b/gdk/x11/gdkglglxext.h
index 3a52548..29bd43d 100644
--- a/gdk/x11/gdkglglxext.h
+++ b/gdk/x11/gdkglglxext.h
@@ -278,6 +278,27 @@ struct _GdkGL_GLX_ARB_get_proc_address
 
 GdkGL_GLX_ARB_get_proc_address *gdk_gl_get_GLX_ARB_get_proc_address (GdkGLConfig *glconfig);
 
+/*
+ * GLX_ARB_create_context
+ */
+
+/* glXCreateContextAttribsARB */
+typedef GLXContext ( * GdkGLProc_glXCreateContextAttribsARB) (Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list);
+GdkGLProc    gdk_gl_get_glXCreateContextAttribsARB (void);
+#define      gdk_gl_glXCreateContextAttribsARB(proc, dpy, config, share_context, direct, attrib_list) \
+  ( ((GdkGLProc_glXCreateContextAttribsARB) (proc)) (dpy, config, share_context, direct, attrib_list) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_ARB_create_context GdkGL_GLX_ARB_create_context;
+
+struct _GdkGL_GLX_ARB_create_context
+{
+  GdkGLProc_glXCreateContextAttribsARB glXCreateContextAttribsARB;
+};
+
+GdkGL_GLX_ARB_create_context *gdk_gl_get_GLX_ARB_create_context (GdkGLConfig *glconfig);
+
 /*
  * GLX_SGI_swap_control
  */
@@ -839,12 +860,82 @@ struct _GdkGL_GLX_OML_sync_control
 
 GdkGL_GLX_OML_sync_control *gdk_gl_get_GLX_OML_sync_control (GdkGLConfig *glconfig);
 
+/*
+ * GLX_SGIX_hyperpipe
+ */
+
+/* glXQueryHyperpipeNetworkSGIX */
+typedef GLXHyperpipeNetworkSGIX * ( * GdkGLProc_glXQueryHyperpipeNetworkSGIX) (Display *dpy, int *npipes);
+GdkGLProc    gdk_gl_get_glXQueryHyperpipeNetworkSGIX (void);
+#define      gdk_gl_glXQueryHyperpipeNetworkSGIX(proc, dpy, npipes) \
+  ( ((GdkGLProc_glXQueryHyperpipeNetworkSGIX) (proc)) (dpy, npipes) )
+
+/* glXHyperpipeConfigSGIX */
+typedef int ( * GdkGLProc_glXHyperpipeConfigSGIX) (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId);
+GdkGLProc    gdk_gl_get_glXHyperpipeConfigSGIX (void);
+#define      gdk_gl_glXHyperpipeConfigSGIX(proc, dpy, networkId, npipes, cfg, hpId) \
+  ( ((GdkGLProc_glXHyperpipeConfigSGIX) (proc)) (dpy, networkId, npipes, cfg, hpId) )
+
+/* glXQueryHyperpipeConfigSGIX */
+typedef GLXHyperpipeConfigSGIX * ( * GdkGLProc_glXQueryHyperpipeConfigSGIX) (Display *dpy, int hpId, int *npipes);
+GdkGLProc    gdk_gl_get_glXQueryHyperpipeConfigSGIX (void);
+#define      gdk_gl_glXQueryHyperpipeConfigSGIX(proc, dpy, hpId, npipes) \
+  ( ((GdkGLProc_glXQueryHyperpipeConfigSGIX) (proc)) (dpy, hpId, npipes) )
+
+/* glXDestroyHyperpipeConfigSGIX */
+typedef int ( * GdkGLProc_glXDestroyHyperpipeConfigSGIX) (Display *dpy, int hpId);
+GdkGLProc    gdk_gl_get_glXDestroyHyperpipeConfigSGIX (void);
+#define      gdk_gl_glXDestroyHyperpipeConfigSGIX(proc, dpy, hpId) \
+  ( ((GdkGLProc_glXDestroyHyperpipeConfigSGIX) (proc)) (dpy, hpId) )
+
+/* glXBindHyperpipeSGIX */
+typedef int ( * GdkGLProc_glXBindHyperpipeSGIX) (Display *dpy, int hpId);
+GdkGLProc    gdk_gl_get_glXBindHyperpipeSGIX (void);
+#define      gdk_gl_glXBindHyperpipeSGIX(proc, dpy, hpId) \
+  ( ((GdkGLProc_glXBindHyperpipeSGIX) (proc)) (dpy, hpId) )
+
+/* glXQueryHyperpipeBestAttribSGIX */
+typedef int ( * GdkGLProc_glXQueryHyperpipeBestAttribSGIX) (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList);
+GdkGLProc    gdk_gl_get_glXQueryHyperpipeBestAttribSGIX (void);
+#define      gdk_gl_glXQueryHyperpipeBestAttribSGIX(proc, dpy, timeSlice, attrib, size, attribList, returnAttribList) \
+  ( ((GdkGLProc_glXQueryHyperpipeBestAttribSGIX) (proc)) (dpy, timeSlice, attrib, size, attribList, returnAttribList) )
+
+/* glXHyperpipeAttribSGIX */
+typedef int ( * GdkGLProc_glXHyperpipeAttribSGIX) (Display *dpy, int timeSlice, int attrib, int size, void *attribList);
+GdkGLProc    gdk_gl_get_glXHyperpipeAttribSGIX (void);
+#define      gdk_gl_glXHyperpipeAttribSGIX(proc, dpy, timeSlice, attrib, size, attribList) \
+  ( ((GdkGLProc_glXHyperpipeAttribSGIX) (proc)) (dpy, timeSlice, attrib, size, attribList) )
+
+/* glXQueryHyperpipeAttribSGIX */
+typedef int ( * GdkGLProc_glXQueryHyperpipeAttribSGIX) (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList);
+GdkGLProc    gdk_gl_get_glXQueryHyperpipeAttribSGIX (void);
+#define      gdk_gl_glXQueryHyperpipeAttribSGIX(proc, dpy, timeSlice, attrib, size, returnAttribList) \
+  ( ((GdkGLProc_glXQueryHyperpipeAttribSGIX) (proc)) (dpy, timeSlice, attrib, size, returnAttribList) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_SGIX_hyperpipe GdkGL_GLX_SGIX_hyperpipe;
+
+struct _GdkGL_GLX_SGIX_hyperpipe
+{
+  GdkGLProc_glXQueryHyperpipeNetworkSGIX glXQueryHyperpipeNetworkSGIX;
+  GdkGLProc_glXHyperpipeConfigSGIX glXHyperpipeConfigSGIX;
+  GdkGLProc_glXQueryHyperpipeConfigSGIX glXQueryHyperpipeConfigSGIX;
+  GdkGLProc_glXDestroyHyperpipeConfigSGIX glXDestroyHyperpipeConfigSGIX;
+  GdkGLProc_glXBindHyperpipeSGIX glXBindHyperpipeSGIX;
+  GdkGLProc_glXQueryHyperpipeBestAttribSGIX glXQueryHyperpipeBestAttribSGIX;
+  GdkGLProc_glXHyperpipeAttribSGIX glXHyperpipeAttribSGIX;
+  GdkGLProc_glXQueryHyperpipeAttribSGIX glXQueryHyperpipeAttribSGIX;
+};
+
+GdkGL_GLX_SGIX_hyperpipe *gdk_gl_get_GLX_SGIX_hyperpipe (GdkGLConfig *glconfig);
+
 /*
  * GLX_MESA_agp_offset
  */
 
 /* glXGetAGPOffsetMESA */
-typedef GLuint ( * GdkGLProc_glXGetAGPOffsetMESA) (const GLvoid *pointer);
+typedef unsigned int ( * GdkGLProc_glXGetAGPOffsetMESA) (const void *pointer);
 GdkGLProc    gdk_gl_get_glXGetAGPOffsetMESA (void);
 #define      gdk_gl_glXGetAGPOffsetMESA(proc, pointer) \
   ( ((GdkGLProc_glXGetAGPOffsetMESA) (proc)) (pointer) )
@@ -860,6 +951,244 @@ struct _GdkGL_GLX_MESA_agp_offset
 
 GdkGL_GLX_MESA_agp_offset *gdk_gl_get_GLX_MESA_agp_offset (GdkGLConfig *glconfig);
 
+/*
+ * GLX_EXT_texture_from_pixmap
+ */
+
+/* glXBindTexImageEXT */
+typedef void ( * GdkGLProc_glXBindTexImageEXT) (Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list);
+GdkGLProc    gdk_gl_get_glXBindTexImageEXT (void);
+#define      gdk_gl_glXBindTexImageEXT(proc, dpy, drawable, buffer, attrib_list) \
+  ( ((GdkGLProc_glXBindTexImageEXT) (proc)) (dpy, drawable, buffer, attrib_list) )
+
+/* glXReleaseTexImageEXT */
+typedef void ( * GdkGLProc_glXReleaseTexImageEXT) (Display *dpy, GLXDrawable drawable, int buffer);
+GdkGLProc    gdk_gl_get_glXReleaseTexImageEXT (void);
+#define      gdk_gl_glXReleaseTexImageEXT(proc, dpy, drawable, buffer) \
+  ( ((GdkGLProc_glXReleaseTexImageEXT) (proc)) (dpy, drawable, buffer) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_EXT_texture_from_pixmap GdkGL_GLX_EXT_texture_from_pixmap;
+
+struct _GdkGL_GLX_EXT_texture_from_pixmap
+{
+  GdkGLProc_glXBindTexImageEXT glXBindTexImageEXT;
+  GdkGLProc_glXReleaseTexImageEXT glXReleaseTexImageEXT;
+};
+
+GdkGL_GLX_EXT_texture_from_pixmap *gdk_gl_get_GLX_EXT_texture_from_pixmap (GdkGLConfig *glconfig);
+
+/*
+ * GLX_NV_present_video
+ */
+
+/* glXEnumerateVideoDevicesNV */
+typedef unsigned int * ( * GdkGLProc_glXEnumerateVideoDevicesNV) (Display *dpy, int screen, int *nelements);
+GdkGLProc    gdk_gl_get_glXEnumerateVideoDevicesNV (void);
+#define      gdk_gl_glXEnumerateVideoDevicesNV(proc, dpy, screen, nelements) \
+  ( ((GdkGLProc_glXEnumerateVideoDevicesNV) (proc)) (dpy, screen, nelements) )
+
+/* glXBindVideoDeviceNV */
+typedef int ( * GdkGLProc_glXBindVideoDeviceNV) (Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list);
+GdkGLProc    gdk_gl_get_glXBindVideoDeviceNV (void);
+#define      gdk_gl_glXBindVideoDeviceNV(proc, dpy, video_slot, video_device, attrib_list) \
+  ( ((GdkGLProc_glXBindVideoDeviceNV) (proc)) (dpy, video_slot, video_device, attrib_list) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_NV_present_video GdkGL_GLX_NV_present_video;
+
+struct _GdkGL_GLX_NV_present_video
+{
+  GdkGLProc_glXEnumerateVideoDevicesNV glXEnumerateVideoDevicesNV;
+  GdkGLProc_glXBindVideoDeviceNV glXBindVideoDeviceNV;
+};
+
+GdkGL_GLX_NV_present_video *gdk_gl_get_GLX_NV_present_video (GdkGLConfig *glconfig);
+
+/*
+ * GLX_NV_video_output
+ */
+
+/* glXGetVideoDeviceNV */
+typedef int ( * GdkGLProc_glXGetVideoDeviceNV) (Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
+GdkGLProc    gdk_gl_get_glXGetVideoDeviceNV (void);
+#define      gdk_gl_glXGetVideoDeviceNV(proc, dpy, screen, numVideoDevices, pVideoDevice) \
+  ( ((GdkGLProc_glXGetVideoDeviceNV) (proc)) (dpy, screen, numVideoDevices, pVideoDevice) )
+
+/* glXReleaseVideoDeviceNV */
+typedef int ( * GdkGLProc_glXReleaseVideoDeviceNV) (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice);
+GdkGLProc    gdk_gl_get_glXReleaseVideoDeviceNV (void);
+#define      gdk_gl_glXReleaseVideoDeviceNV(proc, dpy, screen, VideoDevice) \
+  ( ((GdkGLProc_glXReleaseVideoDeviceNV) (proc)) (dpy, screen, VideoDevice) )
+
+/* glXBindVideoImageNV */
+typedef int ( * GdkGLProc_glXBindVideoImageNV) (Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
+GdkGLProc    gdk_gl_get_glXBindVideoImageNV (void);
+#define      gdk_gl_glXBindVideoImageNV(proc, dpy, VideoDevice, pbuf, iVideoBuffer) \
+  ( ((GdkGLProc_glXBindVideoImageNV) (proc)) (dpy, VideoDevice, pbuf, iVideoBuffer) )
+
+/* glXReleaseVideoImageNV */
+typedef int ( * GdkGLProc_glXReleaseVideoImageNV) (Display *dpy, GLXPbuffer pbuf);
+GdkGLProc    gdk_gl_get_glXReleaseVideoImageNV (void);
+#define      gdk_gl_glXReleaseVideoImageNV(proc, dpy, pbuf) \
+  ( ((GdkGLProc_glXReleaseVideoImageNV) (proc)) (dpy, pbuf) )
+
+/* glXSendPbufferToVideoNV */
+typedef int ( * GdkGLProc_glXSendPbufferToVideoNV) (Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock);
+GdkGLProc    gdk_gl_get_glXSendPbufferToVideoNV (void);
+#define      gdk_gl_glXSendPbufferToVideoNV(proc, dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) \
+  ( ((GdkGLProc_glXSendPbufferToVideoNV) (proc)) (dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) )
+
+/* glXGetVideoInfoNV */
+typedef int ( * GdkGLProc_glXGetVideoInfoNV) (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);
+GdkGLProc    gdk_gl_get_glXGetVideoInfoNV (void);
+#define      gdk_gl_glXGetVideoInfoNV(proc, dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) \
+  ( ((GdkGLProc_glXGetVideoInfoNV) (proc)) (dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_NV_video_output GdkGL_GLX_NV_video_output;
+
+struct _GdkGL_GLX_NV_video_output
+{
+  GdkGLProc_glXGetVideoDeviceNV glXGetVideoDeviceNV;
+  GdkGLProc_glXReleaseVideoDeviceNV glXReleaseVideoDeviceNV;
+  GdkGLProc_glXBindVideoImageNV glXBindVideoImageNV;
+  GdkGLProc_glXReleaseVideoImageNV glXReleaseVideoImageNV;
+  GdkGLProc_glXSendPbufferToVideoNV glXSendPbufferToVideoNV;
+  GdkGLProc_glXGetVideoInfoNV glXGetVideoInfoNV;
+};
+
+GdkGL_GLX_NV_video_output *gdk_gl_get_GLX_NV_video_output (GdkGLConfig *glconfig);
+
+/*
+ * GLX_NV_swap_group
+ */
+
+/* glXJoinSwapGroupNV */
+typedef Bool ( * GdkGLProc_glXJoinSwapGroupNV) (Display *dpy, GLXDrawable drawable, GLuint group);
+GdkGLProc    gdk_gl_get_glXJoinSwapGroupNV (void);
+#define      gdk_gl_glXJoinSwapGroupNV(proc, dpy, drawable, group) \
+  ( ((GdkGLProc_glXJoinSwapGroupNV) (proc)) (dpy, drawable, group) )
+
+/* glXBindSwapBarrierNV */
+typedef Bool ( * GdkGLProc_glXBindSwapBarrierNV) (Display *dpy, GLuint group, GLuint barrier);
+GdkGLProc    gdk_gl_get_glXBindSwapBarrierNV (void);
+#define      gdk_gl_glXBindSwapBarrierNV(proc, dpy, group, barrier) \
+  ( ((GdkGLProc_glXBindSwapBarrierNV) (proc)) (dpy, group, barrier) )
+
+/* glXQuerySwapGroupNV */
+typedef Bool ( * GdkGLProc_glXQuerySwapGroupNV) (Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier);
+GdkGLProc    gdk_gl_get_glXQuerySwapGroupNV (void);
+#define      gdk_gl_glXQuerySwapGroupNV(proc, dpy, drawable, group, barrier) \
+  ( ((GdkGLProc_glXQuerySwapGroupNV) (proc)) (dpy, drawable, group, barrier) )
+
+/* glXQueryMaxSwapGroupsNV */
+typedef Bool ( * GdkGLProc_glXQueryMaxSwapGroupsNV) (Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers);
+GdkGLProc    gdk_gl_get_glXQueryMaxSwapGroupsNV (void);
+#define      gdk_gl_glXQueryMaxSwapGroupsNV(proc, dpy, screen, maxGroups, maxBarriers) \
+  ( ((GdkGLProc_glXQueryMaxSwapGroupsNV) (proc)) (dpy, screen, maxGroups, maxBarriers) )
+
+/* glXQueryFrameCountNV */
+typedef Bool ( * GdkGLProc_glXQueryFrameCountNV) (Display *dpy, int screen, GLuint *count);
+GdkGLProc    gdk_gl_get_glXQueryFrameCountNV (void);
+#define      gdk_gl_glXQueryFrameCountNV(proc, dpy, screen, count) \
+  ( ((GdkGLProc_glXQueryFrameCountNV) (proc)) (dpy, screen, count) )
+
+/* glXResetFrameCountNV */
+typedef Bool ( * GdkGLProc_glXResetFrameCountNV) (Display *dpy, int screen);
+GdkGLProc    gdk_gl_get_glXResetFrameCountNV (void);
+#define      gdk_gl_glXResetFrameCountNV(proc, dpy, screen) \
+  ( ((GdkGLProc_glXResetFrameCountNV) (proc)) (dpy, screen) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_NV_swap_group GdkGL_GLX_NV_swap_group;
+
+struct _GdkGL_GLX_NV_swap_group
+{
+  GdkGLProc_glXJoinSwapGroupNV glXJoinSwapGroupNV;
+  GdkGLProc_glXBindSwapBarrierNV glXBindSwapBarrierNV;
+  GdkGLProc_glXQuerySwapGroupNV glXQuerySwapGroupNV;
+  GdkGLProc_glXQueryMaxSwapGroupsNV glXQueryMaxSwapGroupsNV;
+  GdkGLProc_glXQueryFrameCountNV glXQueryFrameCountNV;
+  GdkGLProc_glXResetFrameCountNV glXResetFrameCountNV;
+};
+
+GdkGL_GLX_NV_swap_group *gdk_gl_get_GLX_NV_swap_group (GdkGLConfig *glconfig);
+
+/*
+ * GLX_NV_video_capture
+ */
+
+/* glXBindVideoCaptureDeviceNV */
+typedef int ( * GdkGLProc_glXBindVideoCaptureDeviceNV) (Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
+GdkGLProc    gdk_gl_get_glXBindVideoCaptureDeviceNV (void);
+#define      gdk_gl_glXBindVideoCaptureDeviceNV(proc, dpy, video_capture_slot, device) \
+  ( ((GdkGLProc_glXBindVideoCaptureDeviceNV) (proc)) (dpy, video_capture_slot, device) )
+
+/* glXEnumerateVideoCaptureDevicesNV */
+typedef GLXVideoCaptureDeviceNV * ( * GdkGLProc_glXEnumerateVideoCaptureDevicesNV) (Display *dpy, int screen, int *nelements);
+GdkGLProc    gdk_gl_get_glXEnumerateVideoCaptureDevicesNV (void);
+#define      gdk_gl_glXEnumerateVideoCaptureDevicesNV(proc, dpy, screen, nelements) \
+  ( ((GdkGLProc_glXEnumerateVideoCaptureDevicesNV) (proc)) (dpy, screen, nelements) )
+
+/* glXLockVideoCaptureDeviceNV */
+typedef void ( * GdkGLProc_glXLockVideoCaptureDeviceNV) (Display *dpy, GLXVideoCaptureDeviceNV device);
+GdkGLProc    gdk_gl_get_glXLockVideoCaptureDeviceNV (void);
+#define      gdk_gl_glXLockVideoCaptureDeviceNV(proc, dpy, device) \
+  ( ((GdkGLProc_glXLockVideoCaptureDeviceNV) (proc)) (dpy, device) )
+
+/* glXQueryVideoCaptureDeviceNV */
+typedef int ( * GdkGLProc_glXQueryVideoCaptureDeviceNV) (Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value);
+GdkGLProc    gdk_gl_get_glXQueryVideoCaptureDeviceNV (void);
+#define      gdk_gl_glXQueryVideoCaptureDeviceNV(proc, dpy, device, attribute, value) \
+  ( ((GdkGLProc_glXQueryVideoCaptureDeviceNV) (proc)) (dpy, device, attribute, value) )
+
+/* glXReleaseVideoCaptureDeviceNV */
+typedef void ( * GdkGLProc_glXReleaseVideoCaptureDeviceNV) (Display *dpy, GLXVideoCaptureDeviceNV device);
+GdkGLProc    gdk_gl_get_glXReleaseVideoCaptureDeviceNV (void);
+#define      gdk_gl_glXReleaseVideoCaptureDeviceNV(proc, dpy, device) \
+  ( ((GdkGLProc_glXReleaseVideoCaptureDeviceNV) (proc)) (dpy, device) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_NV_video_capture GdkGL_GLX_NV_video_capture;
+
+struct _GdkGL_GLX_NV_video_capture
+{
+  GdkGLProc_glXBindVideoCaptureDeviceNV glXBindVideoCaptureDeviceNV;
+  GdkGLProc_glXEnumerateVideoCaptureDevicesNV glXEnumerateVideoCaptureDevicesNV;
+  GdkGLProc_glXLockVideoCaptureDeviceNV glXLockVideoCaptureDeviceNV;
+  GdkGLProc_glXQueryVideoCaptureDeviceNV glXQueryVideoCaptureDeviceNV;
+  GdkGLProc_glXReleaseVideoCaptureDeviceNV glXReleaseVideoCaptureDeviceNV;
+};
+
+GdkGL_GLX_NV_video_capture *gdk_gl_get_GLX_NV_video_capture (GdkGLConfig *glconfig);
+
+/*
+ * GLX_NV_copy_image
+ */
+
+/* glXCopyImageSubDataNV */
+typedef void ( * GdkGLProc_glXCopyImageSubDataNV) (Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
+GdkGLProc    gdk_gl_get_glXCopyImageSubDataNV (void);
+#define      gdk_gl_glXCopyImageSubDataNV(proc, dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) \
+  ( ((GdkGLProc_glXCopyImageSubDataNV) (proc)) (dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) )
+
+/* proc struct */
+
+typedef struct _GdkGL_GLX_NV_copy_image GdkGL_GLX_NV_copy_image;
+
+struct _GdkGL_GLX_NV_copy_image
+{
+  GdkGLProc_glXCopyImageSubDataNV glXCopyImageSubDataNV;
+};
+
+GdkGL_GLX_NV_copy_image *gdk_gl_get_GLX_NV_copy_image (GdkGLConfig *glconfig);
+
 /*
  * GLX_NV_vertex_array_range
  */
diff --git a/gdk/x11/gdkgloverlay-x11.c b/gdk/x11/gdkgloverlay-x11.c
index 4035606..2793875 100644
--- a/gdk/x11/gdkgloverlay-x11.c
+++ b/gdk/x11/gdkgloverlay-x11.c
@@ -16,13 +16,15 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gdkglx.h"
 #include "gdkglprivate-x11.h"
 #include "gdkgloverlay-x11.h"
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-#include <gdk/gdkscreen.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
+#include <gdk/gdk.h>
 
 #include <X11/Xmd.h>
 
@@ -78,9 +80,7 @@ gdk_gl_overlay_get_sov_props (GdkScreen *screen)
 {
   __SOVPropArray *sov_props;
   GdkWindow *root_window;
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   GdkDisplay *display;
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
   Display *xdisplay;
   Atom xa_sov;
   Status status;
@@ -91,11 +91,7 @@ gdk_gl_overlay_get_sov_props (GdkScreen *screen)
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   root_window = gdk_screen_get_root_window (screen);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  root_window = gdk_get_default_root_window ();
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   if (quark_sov_props == 0)
     quark_sov_props = g_quark_from_static_string (quark_sov_props_string);
@@ -106,14 +102,9 @@ gdk_gl_overlay_get_sov_props (GdkScreen *screen)
 
   sov_props = g_malloc (sizeof (__SOVPropArray));
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   display = gdk_screen_get_display (screen);
   xdisplay = GDK_DISPLAY_XDISPLAY (display);
   xa_sov = gdk_x11_get_xatom_by_name_for_display (display, "SERVER_OVERLAY_VISUALS");
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  xdisplay = gdk_x11_get_default_xdisplay ();
-  xa_sov = gdk_x11_get_xatom_by_name ("SERVER_OVERLAY_VISUALS");
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   status = XGetWindowProperty (xdisplay, GDK_WINDOW_XWINDOW (root_window),
                                xa_sov, 0L, 1000000L, False, AnyPropertyType,
@@ -146,18 +137,14 @@ gdk_gl_overlay_get_sov_props (GdkScreen *screen)
 #ifdef G_ENABLE_DEBUG
   if (gdk_gl_debug_flags & GDK_GL_DEBUG_MISC)
     {
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
       int screen_num = GDK_SCREEN_XNUMBER (screen);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-      int screen_num = gdk_x11_get_default_screen ();
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-      int i;
+      unsigned int i;
 
       g_message (" -- SERVER_OVERLAY_VISUALS: properties");
       g_print ("screen\tvisual\ttype\tvalue\tlayer\n");
       for (i = 0; i < sov_props->num; i++)
         {
-          g_print ("%d\t0x%lx\t%lu\t%lu\t%ld\n",
+          g_print ("%d\t0x%lx\t%u\t%u\t%d\n",
                    screen_num,
                    (VisualID) (sov_props->prop[i].overlay_visual),
                    (CARD32)   (sov_props->prop[i].transparent_type),
@@ -177,7 +164,7 @@ _gdk_x11_gl_overlay_get_info (GdkVisual        *visual,
 {
   __SOVPropArray *sov_props;
   VisualID xvisualid;
-  int i;
+  unsigned int i;
 
   GDK_GL_NOTE_FUNC_PRIVATE ();
 
@@ -186,11 +173,7 @@ _gdk_x11_gl_overlay_get_info (GdkVisual        *visual,
 
   /* Get SOV properties. */
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   sov_props = gdk_gl_overlay_get_sov_props (gdk_visual_get_screen (visual));
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  sov_props = gdk_gl_overlay_get_sov_props (NULL);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
   /* Look up SOV property for the visual. */
 
diff --git a/gdk/x11/gdkglpixmap-x11.c b/gdk/x11/gdkglpixmap-x11.c
index fcd8fb4..8ec389e 100644
--- a/gdk/x11/gdkglpixmap-x11.c
+++ b/gdk/x11/gdkglpixmap-x11.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include <string.h>
 
 #include "gdkglx.h"
@@ -37,57 +41,19 @@ static gboolean     gdk_gl_pixmap_impl_x11_gl_begin             (GdkGLDrawable *
 static void         gdk_gl_pixmap_impl_x11_gl_end               (GdkGLDrawable *gldrawable);
 static GdkGLConfig *gdk_gl_pixmap_impl_x11_get_gl_config        (GdkGLDrawable *gldrawable);
 
-static void gdk_gl_pixmap_impl_x11_class_init (GdkGLPixmapImplX11Class *klass);
-static void gdk_gl_pixmap_impl_x11_finalize   (GObject                 *object);
-static void gdk_gl_pixmap_impl_x11_gl_drawable_interface_init (GdkGLDrawableClass *iface);
-
-static gpointer parent_class = NULL;
+static void         gdk_gl_pixmap_impl_x11_gl_drawable_interface_init (GdkGLDrawableClass *iface);
 
-GType
-gdk_gl_pixmap_impl_x11_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLPixmapImplX11Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_pixmap_impl_x11_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLPixmapImplX11),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-      static const GInterfaceInfo gl_drawable_interface_info = {
-        (GInterfaceInitFunc) gdk_gl_pixmap_impl_x11_gl_drawable_interface_init,
-        (GInterfaceFinalizeFunc) NULL,
-        NULL                    /* interface_data */
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_PIXMAP,
-                                     "GdkGLPixmapImplX11",
-                                     &type_info, 0);
-      g_type_add_interface_static (type,
-                                   GDK_TYPE_GL_DRAWABLE,
-                                   &gl_drawable_interface_info);
-    }
-
-  return type;
-}
+G_DEFINE_TYPE_EXTENDED (GdkGLPixmapImplX11,
+                        gdk_gl_pixmap_impl_x11,
+                        GDK_TYPE_GL_PIXMAP,
+                        0,
+                        G_IMPLEMENT_INTERFACE
+                        (GDK_TYPE_GL_DRAWABLE,
+                         gdk_gl_pixmap_impl_x11_gl_drawable_interface_init));
 
 static void
-gdk_gl_pixmap_impl_x11_class_init (GdkGLPixmapImplX11Class *klass)
+gdk_gl_pixmap_impl_x11_init (GdkGLPixmapImplX11 *self)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_pixmap_impl_x11_finalize;
 }
 
 void
@@ -130,7 +96,17 @@ gdk_gl_pixmap_impl_x11_finalize (GObject *object)
 
   g_object_unref (G_OBJECT (impl->glconfig));
 
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  G_OBJECT_CLASS (gdk_gl_pixmap_impl_x11_parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_pixmap_impl_x11_class_init (GdkGLPixmapImplX11Class *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  object_class->finalize = gdk_gl_pixmap_impl_x11_finalize;
 }
 
 static void
@@ -154,7 +130,7 @@ gdk_gl_pixmap_impl_x11_gl_drawable_interface_init (GdkGLDrawableClass *iface)
  * gdk_gl_pixmap_new:
  * @glconfig: a #GdkGLConfig.
  * @pixmap: the #GdkPixmap to be used as the rendering area.
- * @attrib_list: this must be set to NULL or empty (first attribute of None).
+ * @attrib_list: (array) (allow-none): this must be set to NULL or empty (first attribute of None).
  *
  * Creates an off-screen rendering area.
  * attrib_list is currently unused. This must be set to NULL or empty
@@ -280,11 +256,9 @@ gdk_gl_pixmap_impl_x11_make_context_current (GdkGLDrawable *draw,
   if (glxpixmap == None || glxcontext == NULL)
     return FALSE;
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   GDK_GL_NOTE (MISC,
     g_message (" -- Pixmap: screen number = %d",
       GDK_SCREEN_XNUMBER (gdk_drawable_get_screen (GDK_DRAWABLE (draw)))));
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
   GDK_GL_NOTE (MISC,
     g_message (" -- Pixmap: visual id = 0x%lx",
       GDK_VISUAL_XVISUAL (gdk_drawable_get_visual (GDK_DRAWABLE (draw)))->visualid));
diff --git a/gdk/x11/gdkglquery-x11.c b/gdk/x11/gdkglquery-x11.c
index 562ddf1..ff99e14 100644
--- a/gdk/x11/gdkglquery-x11.c
+++ b/gdk/x11/gdkglquery-x11.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include <string.h>
 
 #ifdef __APPLE__
@@ -29,9 +33,7 @@
 #include "gdkglconfig-x11.h"
 #include "gdkglquery.h"
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-#include <gdk/gdkdisplay.h>
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
+#include <gdk/gdk.h>
 
 /**
  * gdk_gl_query_extension:
@@ -44,17 +46,10 @@
 gboolean
 gdk_gl_query_extension (void)
 {
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   return glXQueryExtension (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
                             NULL, NULL);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  return glXQueryExtension (gdk_x11_get_default_xdisplay (),
-                            NULL, NULL);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 /**
  * gdk_gl_query_extension_for_display:
  * @display: the #GdkDisplay where the query is sent to.
@@ -73,12 +68,10 @@ gdk_gl_query_extension_for_display (GdkDisplay *display)
                             NULL, NULL);
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 /**
  * gdk_gl_query_version:
- * @major: returns the major version number of the OpenGL extension.
- * @minor: returns the minor version number of the OpenGL extension.
+ * @major: (out): returns the major version number of the OpenGL extension.
+ * @minor: (out): returns the minor version number of the OpenGL extension.
  *
  * Returns the version numbers of the OpenGL extension to the window system.
  *
@@ -92,22 +85,15 @@ gboolean
 gdk_gl_query_version (int *major,
                       int *minor)
 {
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   return glXQueryVersion (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
                           major, minor);
-#else  /* GDKGLEXT_MULTIHEAD_SUPPORT */
-  return glXQueryVersion (gdk_x11_get_default_xdisplay (),
-                          major, minor);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 }
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
-
 /**
  * gdk_gl_query_version_for_display:
  * @display: the #GdkDisplay where the query is sent to.
- * @major: returns the major version number of the OpenGL extension.
- * @minor: returns the minor version number of the OpenGL extension.
+ * @major: (out): returns the major version number of the OpenGL extension.
+ * @minor: (out): returns the minor version number of the OpenGL extension.
  *
  * Returns the version numbers of the OpenGL extension to the window system.
  *
@@ -128,8 +114,6 @@ gdk_gl_query_version_for_display (GdkDisplay *display,
                           major, minor);
 }
 
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
-
 /*
  * This code is based on __glutIsSupportedByGLX().
  */
@@ -210,7 +194,7 @@ gdk_x11_gl_query_glx_extension (GdkGLConfig *glconfig,
  *
  * Returns the address of the OpenGL, GLU, or GLX function.
  *
- * Return value: the address of the function named by @proc_name.
+ * Return value: (type gpointer) (transfer none): the address of the function named by @proc_name.
  **/
 
 #ifdef __APPLE__
@@ -288,7 +272,7 @@ gdk_gl_get_proc_address (const char *proc_name)
 
       if (glx_get_proc_address != NULL)
         {
-          proc_address = glx_get_proc_address (proc_name);
+          proc_address = glx_get_proc_address ((unsigned char *) proc_name);
           GDK_GL_NOTE (IMPL, g_message (" ** glXGetProcAddress () - %s",
                                         proc_address ? "succeeded" : "failed"));
           if (proc_address != NULL)
@@ -405,7 +389,7 @@ gdk_gl_get_proc_address (const char *proc_name)
 
       if (glx_get_proc_address != NULL)
         {
-          proc_address = glx_get_proc_address (proc_name);
+          proc_address = glx_get_proc_address ((unsigned char *) proc_name);
           GDK_GL_NOTE (IMPL, g_message (" ** glXGetProcAddress () - %s",
                                         proc_address ? "succeeded" : "failed"));
           if (proc_address != NULL)
diff --git a/gdk/x11/gdkglwindow-x11.c b/gdk/x11/gdkglwindow-x11.c
index eb2701a..3de4539 100644
--- a/gdk/x11/gdkglwindow-x11.c
+++ b/gdk/x11/gdkglwindow-x11.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include <string.h>
 
 #include "gdkglx.h"
@@ -39,57 +43,19 @@ static gboolean     gdk_gl_window_impl_x11_gl_begin             (GdkGLDrawable *
 static void         gdk_gl_window_impl_x11_gl_end               (GdkGLDrawable *gldrawable);
 static GdkGLConfig *gdk_gl_window_impl_x11_get_gl_config        (GdkGLDrawable *gldrawable);
 
-static void gdk_gl_window_impl_x11_class_init (GdkGLWindowImplX11Class *klass);
-static void gdk_gl_window_impl_x11_finalize   (GObject                 *object);
-static void gdk_gl_window_impl_x11_gl_drawable_interface_init (GdkGLDrawableClass *iface);
-
-static gpointer parent_class = NULL;
+static void         gdk_gl_window_impl_x11_gl_drawable_interface_init (GdkGLDrawableClass *iface);
 
-GType
-gdk_gl_window_impl_x11_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info = {
-        sizeof (GdkGLWindowImplX11Class),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) gdk_gl_window_impl_x11_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,                   /* class_data */
-        sizeof (GdkGLWindowImplX11),
-        0,                      /* n_preallocs */
-        (GInstanceInitFunc) NULL
-      };
-      static const GInterfaceInfo gl_drawable_interface_info = {
-        (GInterfaceInitFunc) gdk_gl_window_impl_x11_gl_drawable_interface_init,
-        (GInterfaceFinalizeFunc) NULL,
-        NULL                    /* interface_data */
-      };
-
-      type = g_type_register_static (GDK_TYPE_GL_WINDOW,
-                                     "GdkGLWindowImplX11",
-                                     &type_info, 0);
-      g_type_add_interface_static (type,
-                                   GDK_TYPE_GL_DRAWABLE,
-                                   &gl_drawable_interface_info);
-    }
-
-  return type;
-}
+G_DEFINE_TYPE_EXTENDED (GdkGLWindowImplX11,
+                        gdk_gl_window_impl_x11,
+                        GDK_TYPE_GL_WINDOW,
+                        0,
+                        G_IMPLEMENT_INTERFACE
+                        (GDK_TYPE_GL_DRAWABLE,
+                         gdk_gl_window_impl_x11_gl_drawable_interface_init));
 
 static void
-gdk_gl_window_impl_x11_class_init (GdkGLWindowImplX11Class *klass)
+gdk_gl_window_impl_x11_init (GdkGLWindowImplX11 *self)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-
-  GDK_GL_NOTE_FUNC_PRIVATE ();
-
-  parent_class = g_type_class_peek_parent (klass);
-
-  object_class->finalize = gdk_gl_window_impl_x11_finalize;
 }
 
 void
@@ -138,7 +104,17 @@ gdk_gl_window_impl_x11_finalize (GObject *object)
 
   g_object_unref (G_OBJECT (impl->glconfig));
 
-  G_OBJECT_CLASS (parent_class)->finalize (object);
+  G_OBJECT_CLASS (gdk_gl_window_impl_x11_parent_class)->finalize (object);
+}
+
+static void
+gdk_gl_window_impl_x11_class_init (GdkGLWindowImplX11Class *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  GDK_GL_NOTE_FUNC_PRIVATE ();
+
+  object_class->finalize = gdk_gl_window_impl_x11_finalize;
 }
 
 static void
@@ -166,7 +142,7 @@ gdk_gl_window_impl_x11_gl_drawable_interface_init (GdkGLDrawableClass *iface)
  * gdk_gl_window_new:
  * @glconfig: a #GdkGLConfig.
  * @window: the #GdkWindow to be used as the rendering area.
- * @attrib_list: this must be set to NULL or empty (first attribute of None).
+ * @attrib_list: (array) (allow-none): this must be set to NULL or empty (first attribute of None).
  *
  * Creates an on-screen rendering area.
  * attrib_list is currently unused. This must be set to NULL or empty
@@ -236,11 +212,9 @@ gdk_gl_window_impl_x11_make_context_current (GdkGLDrawable *draw,
   if (glxwindow == None || glxcontext == NULL)
     return FALSE;
 
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
   GDK_GL_NOTE (MISC,
     g_message (" -- Window: screen number = %d",
       GDK_SCREEN_XNUMBER (gdk_drawable_get_screen (GDK_DRAWABLE (draw)))));
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
   GDK_GL_NOTE (MISC,
     g_message (" -- Window: visual id = 0x%lx",
       GDK_VISUAL_XVISUAL (gdk_drawable_get_visual (GDK_DRAWABLE (draw)))->visualid));
diff --git a/gdk/x11/gdkglx.h b/gdk/x11/gdkglx.h
index ebd2539..808dd28 100644
--- a/gdk/x11/gdkglx.h
+++ b/gdk/x11/gdkglx.h
@@ -37,10 +37,8 @@ gboolean      gdk_x11_gl_query_glx_extension      (GdkGLConfig  *glconfig,
 #ifndef GDK_MULTIHEAD_SAFE
 GdkGLConfig  *gdk_x11_gl_config_new_from_visualid            (VisualID   xvisualid);
 #endif /* GDK_MULTIHEAD_SAFE */
-#ifdef GDKGLEXT_MULTIHEAD_SUPPORT
 GdkGLConfig  *gdk_x11_gl_config_new_from_visualid_for_screen (GdkScreen *screen,
                                                               VisualID   xvisualid);
-#endif /* GDKGLEXT_MULTIHEAD_SUPPORT */
 
 Display      *gdk_x11_gl_config_get_xdisplay      (GdkGLConfig  *glconfig);
 int           gdk_x11_gl_config_get_screen_number (GdkGLConfig  *glconfig);
diff --git a/gdkglext-uninstalled.pc.in b/gdkglext-uninstalled.pc.in
index ca7b1db..8f642bd 100644
--- a/gdkglext-uninstalled.pc.in
+++ b/gdkglext-uninstalled.pc.in
@@ -1,11 +1,9 @@
 target=@gdktarget@
 api_version=@GTKGLEXT_API_VERSION@
 
-multihead=@GDKGLEXT_MULTIHEAD_SUPPORT@
-
 Name: GdkGLExt Uninstalled
 Description: OpenGL Extension to GDK (${target} target), Not Installed
 Version: @VERSION@
-Requires: @GDKGLEXT_PACKAGES@
-Libs: ${pc_top_builddir}${pcfiledir}/gdk/libgdkglext-${target}-${api_version}.la @GDKGLEXT_EXTRA_LIBS@
-Cflags: -I${pc_top_builddir}${pcfiledir} -I${pc_top_builddir}${pcfiledir}/@srcdir@ -I${pc_top_builddir}${pcfiledir}/gdk @GDKGLEXT_EXTRA_CFLAGS@
+Requires: gdk-2.0 pangox
+Libs: ${pc_top_builddir}${pcfiledir}/gdk/libgdkglext-${target}-${api_version}.la @GL_LIBS@ @GDKGLEXT_WIN_LIBS@
+Cflags: -I${pc_top_builddir}${pcfiledir} -I${pc_top_builddir}${pcfiledir}/@srcdir@ -I${pc_top_builddir}${pcfiledir}/gdk @GL_CFLAGS@ @GDKGLEXT_WIN_CFLAGS@
diff --git a/gdkglext.pc.in b/gdkglext.pc.in
index 12d6c9b..252f895 100644
--- a/gdkglext.pc.in
+++ b/gdkglext.pc.in
@@ -6,11 +6,9 @@ includedir=@includedir@
 target=@gdktarget@
 api_version=@GTKGLEXT_API_VERSION@
 
-multihead=@GDKGLEXT_MULTIHEAD_SUPPORT@
-
 Name: GdkGLExt
 Description: OpenGL Extension to GDK (${target} target)
 Version: @VERSION@
-Requires: @GDKGLEXT_PACKAGES@
-Libs: -L${libdir} -lgdkglext-${target}-${api_version} @GDKGLEXT_EXTRA_LIBS@
-Cflags: -I${includedir}/gtkglext-${api_version} -I${libdir}/gtkglext-${api_version}/include @GDKGLEXT_EXTRA_CFLAGS@
+Requires: gdk-2.0
+Libs: -L${libdir} -lgdkglext-${target}-${api_version} @GL_LIBS@ @GDKGLEXT_WIN_LIBS@
+Cflags: -I${includedir}/gtkglext-${api_version} -I${libdir}/gtkglext-${api_version}/include @GL_CFLAGS@ @GDKGLEXT_WIN_CFLAGS@
diff --git a/gtk/.gitignore b/gtk/.gitignore
new file mode 100644
index 0000000..9daf169
--- /dev/null
+++ b/gtk/.gitignore
@@ -0,0 +1,3 @@
+gtkglversion.h
+GtkGLExt-1.0.gir
+GtkGLExt-1.0.typelib
diff --git a/gtk/Makefile.am b/gtk/Makefile.am
index 6bb2dd7..5c85b0b 100644
--- a/gtk/Makefile.am
+++ b/gtk/Makefile.am
@@ -1,33 +1,23 @@
 ## -*- Makefile -*-
 ## Makefile.am for gtkglext/gtk
 
+CLEANFILES =
+
 EXTRA_DIST = \
 	gtkglversion.h.in	\
 	gtkglext.def
 
-if PLATFORM_WIN32
-no_undefined = -no-undefined
-endif
-
 if OS_WIN32
-gtkglext_def = gtkglext.def
+gtkglext_def = $(srcdir)/gtkglext.def
 gtkglext_win32_symbols = -export-symbols $(gtkglext_def)
 endif
 
 if MS_LIB_AVAILABLE
+mslibdir = $(libdir)
 noinst_DATA = gtkglext-win32-@GTKGLEXT_API_VERSION@.lib
 
 gtkglext-win32-@GTKGLEXT_API_VERSION@.lib: libgtkglext-win32-@GTKGLEXT_API_VERSION@.la $(gtkglext_def)
-	lib -name:libgtkglext-win32-@GTKGLEXT_API_VERSION@-@LT_CURRENT_MINUS_AGE@.dll -def:$(gtkglext_def) -out:$@
-
-install-ms-lib:
-	$(INSTALL) gtkglext-win32-@GTKGLEXT_API_VERSION@.lib $(DESTDIR)$(libdir)
-
-uninstall-ms-lib:
-	-rm $(DESTDIR)$(libdir)/gtkglext-win32-@GTKGLEXT_API_VERSION@.lib
-else
-install-ms-lib:
-uninstall-ms-lib:
+	lib -name:libgtkglext-win32-@GTKGLEXT_API_VERSION@-@GTKGLEXT_CURRENT_MINUS_AGE@.dll -def:$(gtkglext_def) -out:$@
 endif
 
 common_includes = \
@@ -36,23 +26,24 @@ common_includes = \
 	-I$(top_srcdir)			\
 	-I$(top_builddir)/gdk		\
 	$(GTKGLEXT_DEBUG_FLAGS)		\
-	$(GTKGLEXT_DEP_CFLAGS)		\
-	-DG_DISABLE_DEPRECATED		\
-	-DGDK_DISABLE_DEPRECATED	\
-	-DGDK_PIXBUF_DISABLE_DEPRECATED	\
-	-DGTK_DISABLE_DEPRECATED
+	$(GTK_CFLAGS)			\
+	$(GL_CFLAGS)			\
+	$(GDKGLEXT_WIN_CFLAGS)
 
 common_ldflags = \
-	-version-info $(LT_CURRENT):$(LT_REVISION):$(LT_AGE) 	\
+	-version-info $(GTKGLEXT_CURRENT):$(GTKGLEXT_REVISION):$(GTKGLEXT_AGE) 	\
 	-export-dynamic 					\
 	-rpath $(libdir) 					\
-	$(no_undefined)						\
+	-no-undefined						\
 	@LIBTOOL_EXPORT_OPTIONS@				\
 	$(gtkglext_win32_symbols)
 
 common_libadd = \
 	$(top_builddir)/gdk/$(gdkglext_targetlib)		\
-	$(GTKGLEXT_DEP_LIBS)
+	$(GTK_LIBS)						\
+	$(GL_LIBS)						\
+	$(GDKGLEXT_WIN_LIBS)					\
+	$(MATH_LIB)
 
 #
 # setup source file variables
@@ -88,28 +79,59 @@ gtkglext_sources = \
 gtkglextincludedir = $(includedir)/gtkglext-@GTKGLEXT_API_VERSION@/gtk
 gtkglextinclude_HEADERS = $(gtkglext_headers)
 
-INCLUDES = $(common_includes)
+AM_CPPFLAGS = $(common_includes)
 
 lib_LTLIBRARIES = $(gtkglext_targetlib)
 
 EXTRA_LTLIBRARIES = \
 	libgtkglext-x11-@API_MJ@.@API_MI@.la	\
+	libgtkglext-quartz-@API_MJ@.@API_MI@.la \
 	libgtkglext-win32-@API_MJ@.@API_MI@.la
 
 libgtkglext_x11_@API_MJ@_@API_MI@_la_SOURCES = $(gtkglext_sources)
 libgtkglext_x11_@API_MJ@_@API_MI@_la_LDFLAGS = $(common_ldflags)
 libgtkglext_x11_@API_MJ@_@API_MI@_la_LIBADD = $(common_libadd)
 
+libgtkglext_quartz_@API_MJ@_@API_MI@_la_SOURCES = $(gtkglext_sources)
+libgtkglext_quartz_@API_MJ@_@API_MI@_la_LDFLAGS = $(common_ldflags)
+libgtkglext_quartz_@API_MJ@_@API_MI@_la_LIBADD = $(common_libadd)
+
 libgtkglext_win32_@API_MJ@_@API_MI@_la_SOURCES = $(gtkglext_sources)
 libgtkglext_win32_@API_MJ@_@API_MI@_la_LDFLAGS = $(common_ldflags)
 libgtkglext_win32_@API_MJ@_@API_MI@_la_LIBADD = $(common_libadd)
 libgtkglext_win32_@API_MJ@_@API_MI@_la_DEPENDENCIES = $(gtkglext_def)
 
 #
-# Extra rules
+# Introspection
 #
 
-install-data-local: install-ms-lib
+-include $(INTROSPECTION_MAKEFILE)
+INTROSPECTION_GIRS =
+INTROSPECTION_SCANNER_ARGS = --add-include-path=../gdk
+INTROSPECTION_COMPILER_ARGS = --includedir=$(srcdir) --includedir=../gdk
 
-uninstall-local: uninstall-ms-lib
+if HAVE_INTROSPECTION
+introspection_sources = \
+	$(gtkglext_public_h_sources) \
+	$(gtkglext_c_sources)
 
+GtkGLExt-1.0.gir: $(gtkglext_targetlib)
+GtkGLExt_1_0_gir_INCLUDES = Gtk-3.0 GdkGLExt-1.0
+GtkGLExt_1_0_gir_SCANNERFLAGS = \
+	--warn-all \
+	--identifier-prefix=GtkGL \
+	--symbol-prefix=gtk_gl \
+	--symbol-prefix=gtk
+GtkGLExt_1_0_gir_CFLAGS = $(common_includes)
+GtkGLExt_1_0_gir_LIBS = $(gtkglext_targetlib)
+GtkGLExt_1_0_gir_FILES = $(introspection_sources)
+INTROSPECTION_GIRS += GtkGLExt-1.0.gir
+
+girdir = $(datadir)/gir-1.0
+gir_DATA = $(INTROSPECTION_GIRS)
+
+typelibdir = $(libdir)/girepository-1.0
+typelib_DATA = $(INTROSPECTION_GIRS:.gir=.typelib)
+
+CLEANFILES += $(gir_DATA) $(typelib_DATA)
+endif # HAVE_INTROSPECTION
diff --git a/gtk/gtkglinit.c b/gtk/gtkglinit.c
index 05117ee..8b8ec98 100644
--- a/gtk/gtkglinit.c
+++ b/gtk/gtkglinit.c
@@ -16,8 +16,11 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include <string.h>
-#include <stdlib.h>
 
 #include "gtkglprivate.h"
 #include "gtkglinit.h"
@@ -39,9 +42,9 @@ static const guint gtk_gl_ndebug_keys = G_N_ELEMENTS (gtk_gl_debug_keys);
 
 /**
  * gtk_gl_parse_args:
- * @argc: the number of command line arguments.
- * @argv: the array of command line arguments.
- * 
+ * @argc: (inout): the number of command line arguments.
+ * @argv: (array length=argc) (inout) (allow-none): the array of command line arguments.
+ *
  * Parses command line arguments, and initializes global
  * attributes of GtkGLExt.
  *
@@ -50,17 +53,15 @@ static const guint gtk_gl_ndebug_keys = G_N_ELEMENTS (gtk_gl_debug_keys);
  *
  * You shouldn't call this function explicitely if you are using
  * gtk_gl_init(), or gtk_gl_init_check().
- *
- * Return value: %TRUE if initialization succeeded, otherwise %FALSE.
  **/
-gboolean
+static void
 gtk_gl_parse_args (int    *argc,
                    char ***argv)
 {
   const gchar *env_string;
 
   if (gtk_gl_initialized)
-    return TRUE;
+    return;
 
   /*
    * If window manager doesn't watch the WM_COLORMAP_WINDOWS property on
@@ -89,7 +90,7 @@ gtk_gl_parse_args (int    *argc,
   if (argc && argv)
     {
       gint i, j, k;
-      
+
       for (i = 1; i < *argc;)
 	{
           if (strcmp ("--gtk-gl-install-colormap", (*argv)[i]) == 0)
@@ -102,7 +103,7 @@ gtk_gl_parse_args (int    *argc,
                    (strncmp ("--gtk-gl-debug=", (*argv)[i], 15) == 0))
 	    {
 	      gchar *equal_pos = strchr ((*argv)[i], '=');
-	      
+
 	      if (equal_pos != NULL)
 		{
 		  gtk_gl_debug_flags |= g_parse_debug_string (equal_pos+1,
@@ -123,7 +124,7 @@ gtk_gl_parse_args (int    *argc,
 		   (strncmp ("--gtk-gl-no-debug=", (*argv)[i], 18) == 0))
 	    {
 	      gchar *equal_pos = strchr ((*argv)[i], '=');
-	      
+
 	      if (equal_pos != NULL)
 		{
 		  gtk_gl_debug_flags &= ~g_parse_debug_string (equal_pos+1,
@@ -143,13 +144,13 @@ gtk_gl_parse_args (int    *argc,
 #endif /* G_ENABLE_DEBUG */
 	  i += 1;
 	}
-      
+
       for (i = 1; i < *argc; i++)
 	{
 	  for (k = i; k < *argc; k++)
 	    if ((*argv)[k] != NULL)
 	      break;
-	  
+
 	  if (k > i)
 	    {
 	      k -= i;
@@ -163,27 +164,25 @@ gtk_gl_parse_args (int    *argc,
 
   /* Set the 'initialized' flag. */
   gtk_gl_initialized = TRUE;
-
-  return TRUE;
 }
 
 /**
  * gtk_gl_init_check:
- * @argc: Address of the <parameter>argc</parameter> parameter of your 
+ * @argc: (inout): Address of the <parameter>argc</parameter> parameter of your
  *        <function>main()</function> function. Changed if any arguments
  *        were handled.
- * @argv: Address of the <parameter>argv</parameter> parameter of 
+ * @argv: (array length=argc) (inout) (allow-none): Address of the <parameter>argv</parameter> parameter of
  *        <function>main()</function>. Any parameters understood by
  *        gtk_gl_init() are stripped before return.
- * 
- * This function does the same work as gtk_gl_init() with only 
- * a single change: It does not terminate the program if the library can't be 
+ *
+ * This function does the same work as gtk_gl_init() with only
+ * a single change: It does not terminate the program if the library can't be
  * initialized. Instead it returns %FALSE on failure.
  *
- * This way the application can fall back to some other means of communication 
+ * This way the application can fall back to some other means of communication
  * with the user - for example a curses or command line interface.
- * 
- * Return value: %TRUE if the GUI has been successfully initialized, 
+ *
+ * Return value: %TRUE if the GUI has been successfully initialized,
  *               %FALSE otherwise.
  **/
 gboolean
@@ -195,33 +194,29 @@ gtk_gl_init_check (int    *argc,
     return FALSE;
 
   /* Parse args and init GtkGLExt library. */
-  if (!gtk_gl_parse_args (argc, argv))
-    {
-      g_warning ("GtkGLExt library initialization fails.");
-      return FALSE;
-    }
+  gtk_gl_parse_args (argc, argv);
 
   return TRUE;
 }
 
 /**
  * gtk_gl_init:
- * @argc: Address of the <parameter>argc</parameter> parameter of your 
+ * @argc: (inout): Address of the <parameter>argc</parameter> parameter of your
  *        <function>main()</function> function. Changed if any arguments
  *        were handled.
- * @argv: Address of the <parameter>argv</parameter> parameter of 
+ * @argv: (array length=argc) (inout) (allow-none): Address of the <parameter>argv</parameter> parameter of
  *        <function>main()</function>. Any parameters understood by
  *        gtk_gl_init() are stripped before return.
- * 
- * Call this function before using any other GtkGLExt functions in your 
+ *
+ * Call this function before using any other GtkGLExt functions in your
  * applications.  It will initialize everything needed to operate the library
- * and parses some standard command line options. @argc and 
- * @argv are adjusted accordingly so your own code will 
+ * and parses some standard command line options. @argc and
+ * @argv are adjusted accordingly so your own code will
  * never see those standard arguments.
  *
  * <note><para>
- * This function will terminate your program if it was unable to initialize 
- * the library for some reason. If you want your program to fall back to a 
+ * This function will terminate your program if it was unable to initialize
+ * the library for some reason. If you want your program to fall back to a
  * textual interface you want to call gtk_gl_init_check() instead.
  * </para></note>
  **/
@@ -230,5 +225,5 @@ gtk_gl_init (int    *argc,
              char ***argv)
 {
   if (!gtk_gl_init_check (argc, argv))
-    exit (1);
+    g_error ("GdkGLExt library initialization fails.");
 }
diff --git a/gtk/gtkglinit.h b/gtk/gtkglinit.h
index c34cbc9..142e8a0 100644
--- a/gtk/gtkglinit.h
+++ b/gtk/gtkglinit.h
@@ -29,9 +29,6 @@ G_BEGIN_DECLS
  * Initialization routines.
  */
 
-gboolean gtk_gl_parse_args (int    *argc,
-                            char ***argv);
-
 gboolean gtk_gl_init_check (int    *argc,
                             char ***argv);
 
diff --git a/gtk/gtkglversion.c b/gtk/gtkglversion.c
index 8fa23c1..8b5c599 100644
--- a/gtk/gtkglversion.c
+++ b/gtk/gtkglversion.c
@@ -16,6 +16,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
+
 #include "gtkglversion.h"
 
 const guint gtkglext_major_version = GTKGLEXT_MAJOR_VERSION;
diff --git a/gtk/gtkglwidget.c b/gtk/gtkglwidget.c
index ecb41ef..e1efa17 100644
--- a/gtk/gtkglwidget.c
+++ b/gtk/gtkglwidget.c
@@ -16,7 +16,9 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
  */
 
-#include <gtk/gtkmain.h>
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif /* HAVE_CONFIG_H */
 
 #include "gtkglprivate.h"
 #include "gtkglwidget.h"
@@ -68,6 +70,7 @@ static void
 gtk_gl_widget_realize (GtkWidget       *widget,
                        GLWidgetPrivate *private)
 {
+  GdkWindow *window;
   GdkGLWindow *glwindow;
 
   GTK_GL_NOTE_FUNC_PRIVATE ();
@@ -77,9 +80,10 @@ gtk_gl_widget_realize (GtkWidget       *widget,
    * handlers.
    */
 
-  if (!gdk_window_is_gl_capable (widget->window))
+  window = gtk_widget_get_window (widget);
+  if (!gdk_window_is_gl_capable (window))
     {
-      glwindow = gdk_window_set_gl_capability (widget->window,
+      glwindow = gdk_window_set_gl_capability (window,
                                                private->glconfig,
                                                NULL);
       if (glwindow == NULL)
@@ -127,9 +131,9 @@ gtk_gl_widget_size_allocate (GtkWidget       *widget,
    * Synchronize OpenGL and window resizing request streams.
    */
 
-  if (GTK_WIDGET_REALIZED (widget) && private->is_realized)
+  if (gtk_widget_get_realized (widget) && private->is_realized)
     {
-      gldrawable = gdk_window_get_gl_drawable (widget->window);
+      gldrawable = gdk_window_get_gl_drawable (gtk_widget_get_window (widget));
       gdk_gl_drawable_wait_gdk (gldrawable);
     }
 }
@@ -146,7 +150,7 @@ gtk_gl_widget_unrealize (GtkWidget       *widget,
 
   if (private->glcontext != NULL)
     {
-      gdk_gl_context_destroy (private->glcontext);
+      g_object_unref (private->glcontext);
       private->glcontext = NULL;
     }
 
@@ -154,8 +158,8 @@ gtk_gl_widget_unrealize (GtkWidget       *widget,
    * Remove OpenGL-capability from widget->window.
    */
 
-  if (GTK_WIDGET_REALIZED (widget))
-    gdk_window_unset_gl_capability (widget->window);
+  if (gtk_widget_get_realized (widget))
+    gdk_window_unset_gl_capability (gtk_widget_get_window (widget));
 
   private->is_realized = FALSE;
 }
@@ -174,7 +178,7 @@ gtk_gl_widget_parent_set (GtkWidget   *widget,
    */
 
   toplevel = gtk_widget_get_toplevel (widget);
-  if (GTK_WIDGET_TOPLEVEL (toplevel) && !GTK_WIDGET_REALIZED (toplevel))
+  if (gtk_widget_is_toplevel (toplevel) && !gtk_widget_get_realized (toplevel))
     {
       GTK_GL_NOTE (MISC,
         g_message (" - Install colormap to the top-level window."));
@@ -188,23 +192,27 @@ gtk_gl_widget_style_set (GtkWidget *widget,
                          GtkStyle  *previous_style,
                          gpointer   user_data)
 {
+  GdkWindow *window;
+
   GTK_GL_NOTE_FUNC_PRIVATE ();
 
   /* 
    * Set a background of "None" on window to avoid AIX X server crash.
    */
 
-  if (GTK_WIDGET_REALIZED (widget))
+  if (gtk_widget_get_realized (widget))
     {
+      window = gtk_widget_get_window (widget);
+
       GTK_GL_NOTE (MISC,
         g_message (" - window->bg_pixmap = %p",
-                   ((GdkWindowObject *) (widget->window))->bg_pixmap));
+                   ((GdkWindowObject *) window)->bg_pixmap));
 
-      gdk_window_set_back_pixmap (widget->window, NULL, FALSE);
+      gdk_window_set_back_pixmap (window, NULL, FALSE);
 
       GTK_GL_NOTE (MISC,
         g_message (" - window->bg_pixmap = %p",
-                   ((GdkWindowObject *) (widget->window))->bg_pixmap));
+                   ((GdkWindowObject *) window)->bg_pixmap));
     }
 }
 
@@ -225,7 +233,7 @@ gl_widget_private_destroy (GLWidgetPrivate *private)
  * gtk_widget_set_gl_capability:
  * @widget: the #GtkWidget to be used as the rendering area.
  * @glconfig: a #GdkGLConfig.
- * @share_list: the #GdkGLContext with which to share display lists and texture
+ * @share_list: (allow-none): the #GdkGLContext with which to share display lists and texture
  *              objects. NULL indicates that no sharing is to take place.
  * @direct: whether rendering is to be done with a direct connection to
  *          the graphics system.
@@ -250,8 +258,8 @@ gtk_widget_set_gl_capability (GtkWidget    *widget,
   GTK_GL_NOTE_FUNC ();
 
   g_return_val_if_fail (GTK_IS_WIDGET (widget), FALSE);
-  g_return_val_if_fail (!GTK_WIDGET_NO_WINDOW (widget), FALSE);
-  g_return_val_if_fail (!GTK_WIDGET_REALIZED (widget), FALSE);
+  g_return_val_if_fail (gtk_widget_get_has_window (widget), FALSE);
+  g_return_val_if_fail (!gtk_widget_get_realized (widget), FALSE);
   g_return_val_if_fail (GDK_IS_GL_CONFIG (glconfig), FALSE);
 
   /* 
@@ -388,7 +396,7 @@ gtk_widget_is_gl_capable (GtkWidget *widget)
  *
  * Returns the #GdkGLConfig referred by the @widget.
  *
- * Return value: the #GdkGLConfig.
+ * Return value: (transfer none): the #GdkGLConfig.
  **/
 GdkGLConfig *
 gtk_widget_get_gl_config (GtkWidget *widget)
@@ -407,7 +415,7 @@ gtk_widget_get_gl_config (GtkWidget *widget)
 /**
  * gtk_widget_create_gl_context:
  * @widget: a #GtkWidget.
- * @share_list: the #GdkGLContext with which to share display lists and texture
+ * @share_list: (allow-none): the #GdkGLContext with which to share display lists and texture
  *              objects. NULL indicates that no sharing is to take place.
  * @direct: whether rendering is to be done with a direct connection to
  *          the graphics system.
@@ -418,7 +426,7 @@ gtk_widget_get_gl_config (GtkWidget *widget)
  * for this widget. The GL context must be freed when you're
  * finished with it. See also gtk_widget_get_gl_context().
  *
- * Return value: the new #GdkGLContext.
+ * Return value: (transfer full): the new #GdkGLContext.
  **/
 GdkGLContext *
 gtk_widget_create_gl_context (GtkWidget    *widget,
@@ -432,9 +440,9 @@ gtk_widget_create_gl_context (GtkWidget    *widget,
   GTK_GL_NOTE_FUNC ();
 
   g_return_val_if_fail (GTK_IS_WIDGET (widget), NULL);
-  g_return_val_if_fail (GTK_WIDGET_REALIZED (widget), NULL);
+  g_return_val_if_fail (gtk_widget_get_realized (widget), NULL);
 
-  gldrawable = gdk_window_get_gl_drawable (widget->window);
+  gldrawable = gdk_window_get_gl_drawable (gtk_widget_get_window (widget));
   if (gldrawable == NULL)
     return NULL;
 
@@ -466,7 +474,7 @@ gtk_widget_create_gl_context (GtkWidget    *widget,
  * #GdkGLContext is needed for the function gdk_gl_drawable_begin,
  * or for sharing display lists (see gtk_widget_set_gl_capability()).
  *
- * Return value: the #GdkGLContext.
+ * Return value: (transfer none): the #GdkGLContext.
  **/
 GdkGLContext *
 gtk_widget_get_gl_context (GtkWidget *widget)
@@ -474,7 +482,7 @@ gtk_widget_get_gl_context (GtkWidget *widget)
   GLWidgetPrivate *private;
 
   g_return_val_if_fail (GTK_IS_WIDGET (widget), NULL);
-  g_return_val_if_fail (GTK_WIDGET_REALIZED (widget), NULL);
+  g_return_val_if_fail (gtk_widget_get_realized (widget), NULL);
 
   private = g_object_get_qdata (G_OBJECT (widget), quark_gl_private);
   if (private == NULL)
@@ -495,13 +503,13 @@ gtk_widget_get_gl_context (GtkWidget *widget)
  *
  * Returns the #GdkGLWindow owned by the @widget.
  *
- * Return value: the #GdkGLWindow.
+ * Return value: (transfer none): the #GdkGLWindow.
  **/
 GdkGLWindow *
 gtk_widget_get_gl_window (GtkWidget *widget)
 {
   g_return_val_if_fail (GTK_IS_WIDGET (widget), NULL);
-  g_return_val_if_fail (GTK_WIDGET_REALIZED (widget), NULL);
+  g_return_val_if_fail (gtk_widget_get_realized (widget), NULL);
 
-  return gdk_window_get_gl_window (widget->window);
+  return gdk_window_get_gl_window (gtk_widget_get_window (widget));
 }
diff --git a/gtk/gtkglwidget.h b/gtk/gtkglwidget.h
index fd6ad2a..13292f6 100644
--- a/gtk/gtkglwidget.h
+++ b/gtk/gtkglwidget.h
@@ -20,10 +20,8 @@
 #define __GTK_GL_WIDGET_H__
 
 #include <gdk/gdk.h>
-
 #include <gdk/gdkgl.h>
-
-#include <gtk/gtkwidget.h>
+#include <gtk/gtk.h>
 
 G_BEGIN_DECLS
 
diff --git a/gtkglext-uninstalled.pc.in b/gtkglext-uninstalled.pc.in
index 465726c..688b55e 100644
--- a/gtkglext-uninstalled.pc.in
+++ b/gtkglext-uninstalled.pc.in
@@ -1,11 +1,12 @@
 target=@gdktarget@
 api_version=@GTKGLEXT_API_VERSION@
 
-multihead=@GDKGLEXT_MULTIHEAD_SUPPORT@
+multihead=yes
 
 Name: GtkGLExt Uninstalled
 Description: OpenGL Extension to GTK+ (${target} target), Not Installed
 Version: @VERSION@
-Requires: gdkglext-${target}-${api_version}-uninstalled @GTKGLEXT_PACKAGES@
-Libs: ${pc_top_builddir}${pcfiledir}/gtk/libgtkglext-${target}-${api_version}.la @GTKGLEXT_EXTRA_LIBS@
-Cflags: -I${pc_top_builddir}${pcfiledir} -I${pc_top_builddir}${pcfiledir}/@srcdir@ @GTKGLEXT_EXTRA_CFLAGS@
+Requires: gtk+-2.0 gdkglext-${target}-${api_version}-uninstalled
+Libs: ${pc_top_builddir}${pcfiledir}/gtk/libgtkglext-${target}-${api_version}.la
+Libs.private: @MATH_LIB@
+Cflags: -I${pc_top_builddir}${pcfiledir} -I${pc_top_builddir}${pcfiledir}/@srcdir@
diff --git a/gtkglext.doap b/gtkglext.doap
new file mode 100644
index 0000000..026d0fd
--- /dev/null
+++ b/gtkglext.doap
@@ -0,0 +1,28 @@
+<Project xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+         xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
+         xmlns:foaf="http://xmlns.com/foaf/0.1/"
+         xmlns:gnome="http://api.gnome.org/doap-extensions#"
+         xmlns="http://usefulinc.com/ns/doap#">
+
+  <name xml:lang="en">GtkGLExt</name>
+  <shortdesc xml:lang="en">OpenGL extension to GTK+</shortdesc>
+  <homepage rdf:resource="http://projects.gnome.org/gtkglext/" />
+  <mailing-list rdf:resource="http://mail.gnome.org/mailman/listinfo/gtkglext-list" />
+
+  <maintainer>
+    <foaf:Person>
+      <foaf:name>Braden McDaniel</foaf:name>
+      <foaf:mbox rdf:resource="mailto:braden@endoframe.com" />
+      <gnome:userid>bradenmcd</gnome:userid>
+    </foaf:Person>
+  </maintainer>
+
+  <maintainer>
+    <foaf:Person>
+      <foaf:name>Mukund Sivaraman</foaf:name>
+      <foaf:mbox rdf:resource="mailto:muks@banu.com" />
+      <gnome:userid>muks</gnome:userid>
+    </foaf:Person>
+  </maintainer>
+
+</Project>
diff --git a/gtkglext.nsi.in b/gtkglext.nsi.in
index ec93308..0cc1554 100644
--- a/gtkglext.nsi.in
+++ b/gtkglext.nsi.in
@@ -9,8 +9,7 @@
 !define GTKGLEXT_VERSION         @GTKGLEXT_VERSION@
 !define GTKGLEXT_API_VERSION     @GTKGLEXT_API_VERSION@
 !define GTKGLEXT_PUBLISHER       "GtkGLExt"
-!define GTKGLEXT_URL_INFO_ABOUT  "http://gtkglext.sourceforge.net/"
-!define GTKGLEXT_URL_UPDATE_INFO "http://sourceforge.net/projects/gtkglext/"
+!define GTKGLEXT_URL_INFO_ABOUT  "http://projects.gnome.org/gtkglext/"
 !define GTKGLEXT_HELP_LINK       "mailto:gtkglext-list@gnome.org"
 
 ;--------------------------------
@@ -220,7 +219,7 @@ Section "Start Menu" SecStartMenu
 
     CreateDirectory "$SMPROGRAMS\$STARTMENU_FOLDER"
 
-    WriteINIStr "$SMPROGRAMS\$STARTMENU_FOLDER\GtkGLExt Website.url" "InternetShortcut" "URL" "http://gtkglext.sourceforge.net/"
+    WriteINIStr "$SMPROGRAMS\$STARTMENU_FOLDER\GtkGLExt Website.url" "InternetShortcut" "URL" "http://projects.gnome.org/gtkglext/"
 
     IfFileExists "$INSTDIR\share\gtk-doc\html\gtkglext\index.html" "" +2
       CreateShortCut "$SMPROGRAMS\$STARTMENU_FOLDER\GtkGLExt Reference Manual.lnk" "$INSTDIR\share\gtk-doc\html\gtkglext\index.html"
@@ -250,7 +249,7 @@ Section -post
   WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\GtkGLExt" "DisplayVersion" "${GTKGLEXT_VERSION}"
   WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\GtkGLExt" "Publisher" "${GTKGLEXT_PUBLISHER}"
   WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\GtkGLExt" "URLInfoAbout" "${GTKGLEXT_URL_INFO_ABOUT}"
-  WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\GtkGLExt" "URLUpdateInfo" "${GTKGLEXT_URL_UPDATE_INFO}"
+  WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\GtkGLExt" "URLUpdateInfo" "${GTKGLEXT_URL_INFO_ABOUT}"
   WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\GtkGLExt" "HelpLink" "${GTKGLEXT_HELP_LINK}"
   WriteRegExpandStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\GtkGLExt" "UninstallString" "$INSTDIR\uninst-gtkglext.exe"
 
diff --git a/gtkglext.pc.in b/gtkglext.pc.in
index b491dd5..cafe8ea 100644
--- a/gtkglext.pc.in
+++ b/gtkglext.pc.in
@@ -6,11 +6,12 @@ includedir=@includedir@
 target=@gdktarget@
 api_version=@GTKGLEXT_API_VERSION@
 
-multihead=@GDKGLEXT_MULTIHEAD_SUPPORT@
+multihead=yes
 
 Name: GtkGLExt
 Description: OpenGL Extension to GTK+ (${target} target)
 Version: @VERSION@
-Requires: gdkglext-${target}-${api_version} @GTKGLEXT_PACKAGES@
-Libs: -L${libdir} -lgtkglext-${target}-${api_version} @GTKGLEXT_EXTRA_LIBS@
-Cflags: -I${includedir}/gtkglext-${api_version} @GTKGLEXT_EXTRA_CFLAGS@
+Requires: gtk+-2.0 gdkglext-${target}-${api_version}
+Libs: -L${libdir} -lgtkglext-${target}-${api_version}
+Libs.private: @MATH_LIB@
+Cflags: -I${includedir}/gtkglext-${api_version}
diff --git a/gtkglext.spec.in b/gtkglext.spec.in
deleted file mode 100644
index 9719179..0000000
--- a/gtkglext.spec.in
+++ /dev/null
@@ -1,118 +0,0 @@
-# -*- rpm-spec -*-
-
-%define base_version		@GTKGLEXT_VERSION@
-%define api_version		@GTKGLEXT_API_VERSION@
-%define rel			1
-
-Summary: OpenGL Extension to GTK
-Name: gtkglext
-Version: %{base_version}
-Release: %{rel}
-License: LGPL
-Group: System Environment/Libraries
-URL: http://gtkglext.sourceforge.net/
-Source0: ftp://dl.sourceforge.net/pub/sourceforge/gtkglext/gtkglext-%{version}.tar.gz
-BuildRoot: %{_tmppath}/gtkglext-%{version}-root
-
-Requires: gtk2
-Requires: XFree86-libs
-
-BuildRequires: gtk2-devel
-BuildRequires: XFree86-devel
-BuildRequires: pkgconfig
-
-%description
-GtkGLExt is an OpenGL extension to GTK. It provides the GDK objects
-which support OpenGL rendering in GTK, and GtkWidget API add-ons to
-make GTK+ widgets OpenGL-capable.
-
-%package devel
-Summary: Development tools for GTK-based OpenGL applications
-Group: Development/Libraries
-
-Requires: %{name} = %{version}
-Requires: gtk2-devel
-Requires: XFree86-devel
-
-%description devel
-The gtkglext-devel package contains the header files, static libraries,
-and developer docs for GtkGLExt.
-
-%prep
-%setup -q -n gtkglext-%{version}
-
-%build
-%configure --disable-gtk-doc
-make
-
-%install
-rm -rf $RPM_BUILD_ROOT
-%makeinstall
-
-pushd "$RPM_BUILD_ROOT%{_libdir}"
-
-cp -p libgdkglext-x11-%{api_version}.la libgdkglext-x11-%{api_version}.la.bak
-cat libgdkglext-x11-%{api_version}.la.bak | \
-  sed -e "s| -L$RPM_BUILD_ROOT%{_libdir}||g" > libgdkglext-x11-%{api_version}.la
-rm -f libgdkglext-x11-%{api_version}.la.bak
-
-cp -p libgtkglext-x11-%{api_version}.la libgtkglext-x11-%{api_version}.la.bak
-cat libgtkglext-x11-%{api_version}.la.bak | \
-  sed -e "s| -L$RPM_BUILD_ROOT%{_libdir}||g" > libgtkglext-x11-%{api_version}.la
-rm -f libgtkglext-x11-%{api_version}.la.bak
-
-popd
-
-%clean
-rm -rf $RPM_BUILD_ROOT
-
-%post -p /sbin/ldconfig
-
-%postun -p /sbin/ldconfig
-
-%files
-%defattr(-,root,root,-)
-
-%doc AUTHORS COPYING COPYING.LIB ChangeLog NEWS README TODO
-%{_libdir}/libgdkglext-x11-%{api_version}.so.*
-%{_libdir}/libgtkglext-x11-%{api_version}.so.*
-
-%files devel
-%defattr(-,root,root,-)
-
-%{_includedir}/*
-%{_libdir}/gtkglext-%{api_version}
-%{_libdir}/lib*.so
-%{_libdir}/lib*.a
-%{_libdir}/lib*.la
-%{_libdir}/pkgconfig/*
-%{_datadir}/aclocal/*
-%{_datadir}/gtk-doc/html/*
-
-%changelog
-* Sun Aug 31 2003 Naofumi Yasufuku <naofumi@users.sourceforge.net>
-- Updated source URL.
-
-* Sun May 11 2003 Naofumi Yasufuku <naofumi@users.sourceforge.net>
-- Removed LDFLAGS setting.
-- Removed atk, pango, glib2 from Requires.
-- Remove lib*.la.bak files.
-
-* Mon Feb 24 2003 Naofumi Yasufuku <naofumi@users.sourceforge.net>
-- Added %{_datadir}/aclocal/* to the file list.
-- Re-enabled static libraries by default.
-
-* Tue Dec  3 2002 Naofumi Yasufuku <naofumi@users.sourceforge.net>
-- Added %{_libdir}/gtkglext-%{api_version} to the file list.
-
-* Fri Nov 15 2002 Naofumi Yasufuku <naofumi@users.sourceforge.net>
-- Removed --disable-mesa-ext configure option.
-- Disabled static libraries by default.
-
-* Sat Aug  3 2002 Naofumi Yasufuku <naofumi@users.sourceforge.net>
-- Added --disable-mesa-ext configure option.
-
-* Sun Jun 23 2002 Naofumi Yasufuku <naofumi@users.sourceforge.net>
-- Initial build.
-
-
diff --git a/m4macros/.gitignore b/m4macros/.gitignore
new file mode 100644
index 0000000..0d6d1d8
--- /dev/null
+++ b/m4macros/.gitignore
@@ -0,0 +1,35 @@
+codeset.m4
+gettext.m4
+glibc21.m4
+gtk-doc.m4
+iconv.m4
+intdiv0.m4
+intltool.m4
+intmax.m4
+inttypes-pri.m4
+inttypes.m4
+inttypes_h.m4
+isc-posix.m4
+lcmessage.m4
+lib-ld.m4
+lib-link.m4
+lib-prefix.m4
+libtool.m4
+longdouble.m4
+longlong.m4
+ltoptions.m4
+ltsugar.m4
+ltversion.m4
+lt~obsolete.m4
+nls.m4
+po.m4
+printf-posix.m4
+progtest.m4
+signed.m4
+size_max.m4
+stdint_h.m4
+uintmax_t.m4
+ulonglong.m4
+wchar_t.m4
+wint_t.m4
+xsize.m4
diff --git a/m4macros/Makefile.am b/m4macros/Makefile.am
deleted file mode 100644
index 60aa511..0000000
--- a/m4macros/Makefile.am
+++ /dev/null
@@ -1,18 +0,0 @@
-## -*- Makefile -*-
-## Makefile.am for gtkglext/m4macros
-
-EXTRA_DIST = \
-	gtkglext.m4
-
-API_VER = @GTKGLEXT_API_VERSION@
-
-gtkglext-$(API_VER).m4: $(srcdir)/gtkglext.m4
-	rm -f $@ && cp $< $@
-
-m4datadir = $(datadir)/aclocal
-m4data_DATA = gtkglext-$(API_VER).m4
-
-$(m4data_DATA): $(top_builddir)/config.status
-
-DISTCLEANFILES = gtkglext-$(API_VER).m4
-
diff --git a/m4macros/ax_check_gl.m4 b/m4macros/ax_check_gl.m4
new file mode 100644
index 0000000..808e0f4
--- /dev/null
+++ b/m4macros/ax_check_gl.m4
@@ -0,0 +1,155 @@
+# -*- mode: autoconf -*-
+#
+# AX_CHECK_GL
+#
+# Check for an OpenGL implementation.  If GL is found, the required compiler
+# and linker flags are included in the output variables "GL_CFLAGS" and
+# "GL_LIBS", respectively.  If no usable GL implementation is found, "no_gl"
+# is set to "yes".
+#
+# If the header "GL/gl.h" is found, "HAVE_GL_GL_H" is defined.  If the header
+# "OpenGL/gl.h" is found, HAVE_OPENGL_GL_H is defined.  These preprocessor
+# definitions may not be mutually exclusive.
+#
+# version: 2.6
+# author: Braden McDaniel <braden@endoframe.com>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception, the you may copy, distribute and modify the
+# configure scripts that are the output of Autoconf when processing
+# the Macro.  You need not follow the terms of the GNU General Public
+# License when using or distributing such scripts.
+#
+AC_DEFUN([AX_CHECK_GL],
+[AC_REQUIRE([AC_CANONICAL_HOST])dnl
+AC_REQUIRE([AC_PATH_X])dnl
+AC_REQUIRE([AC_PROG_SED])dnl
+AC_REQUIRE([AX_PTHREAD])dnl
+
+AC_LANG_PUSH([C])
+AX_LANG_COMPILER_MS
+AS_IF([test X$ax_compiler_ms = Xno],
+      [GL_CFLAGS="${PTHREAD_CFLAGS}"; GL_LIBS="${PTHREAD_LIBS}"])
+
+#
+# Use x_includes and x_libraries if they have been set (presumably by
+# AC_PATH_X).
+#
+AS_IF([test X$no_x != Xyes -a -n "$x_includes"],
+      [GL_CFLAGS="-I$x_includes $GL_CFLAGS"])
+
+AC_CHECK_HEADERS([windows.h])
+
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GL_CFLAGS $CPPFLAGS"
+AC_CHECK_HEADERS([GL/gl.h OpenGL/gl.h], , , [
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+])
+CPPFLAGS=$ax_save_CPPFLAGS
+
+m4_define([AX_CHECK_GL_PROGRAM],
+          [AC_LANG_PROGRAM([[
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+# ifdef HAVE_GL_GL_H
+#   include <GL/gl.h>
+# elif defined(HAVE_OPENGL_GL_H)
+#   include <OpenGL/gl.h>
+# else
+#   error no gl.h
+# endif]],
+                           [[glBegin(0)]])])
+
+m4_define([AX_CHECK_GL_GLX_PROGRAM],
+          [AC_LANG_PROGRAM([[
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+# ifdef HAVE_GL_GL_H
+#   include <GL/gl.h>
+# elif defined(HAVE_OPENGL_GL_H)
+#   include <OpenGL/gl.h>
+# else
+#   error no gl.h
+# endif]],
+                           [[glXQueryVersion(0, 0, 0)]])])
+
+AC_CACHE_CHECK([for OpenGL library], [ax_cv_check_gl_libgl],
+[ax_cv_check_gl_libgl=no
+case $host_cpu in
+  x86_64) ax_check_gl_libdir=lib64 ;;
+  *)      ax_check_gl_libdir=lib ;;
+esac
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$CPPFLAGS $GL_CFLAGS"
+ax_save_LDFLAGS=$LDFLAGS
+AS_IF([test X$no_x != Xyes -a -n "$x_libraries"],
+      [LDFLAGS="$LDFLAGS -L$x_libraries"])
+ax_save_LIBS=$LIBS
+ax_check_libs="-lopengl32 -lGL"
+for ax_lib in $ax_check_libs; do
+  AS_IF([test X$ax_compiler_ms = Xyes],
+        [ax_try_lib=`echo $ax_lib | $SED -e 's/^-l//' -e 's/$/.lib/'`],
+        [ax_try_lib=$ax_lib])
+  LDFLAGS="$ax_save_LDFLAGS $GL_LIBS"
+  LIBS="$ax_try_lib $ax_save_LIBS"
+AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+               [ax_cv_check_gl_libgl=$ax_try_lib; break],
+               [ax_check_gl_nvidia_flags="-L/usr/$ax_check_gl_libdir/nvidia"
+                LDFLAGS="$ax_save_LDFLAGS $GL_LIBS $ax_check_gl_nvidia_flags"
+                AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+                               [ax_cv_check_gl_libgl="$ax_check_gl_nvidia_flags $ax_try_lib"; break],
+                               [ax_check_gl_dylib_flag='-dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib'
+                                LDFLAGS="$ax_save_LDFLAGS $GL_LIBS $ax_check_gl_dylib_flag"
+                                AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+                                               [ax_cv_check_gl_libgl="$ax_check_gl_dylib_flag $ax_try_lib"; break])])])
+done
+
+#
+# If no_x is "yes", we don't want to wind up using a libGL that is
+# linked with X11.  Test to see if the found libGL includes GLX
+# functions.  If it does and no_x is "yes", we want to reset
+# ax_cv_check_gl_libgl back to "no".
+#
+# Note that LDFLAGS and LIBS should still have whatever values they
+# had when we broke out of the test loop above; use that.
+#
+AS_IF([test "X$ax_cv_check_gl_libgl" != Xno],
+      [AC_LINK_IFELSE([AX_CHECK_GL_GLX_PROGRAM],
+                      [AS_IF([test X$no_x = Xyes],
+                             [ax_cv_check_gl_libgl=no])])])
+
+LIBS=$ax_save_LIBS
+AS_IF([test "X$ax_cv_check_gl_libgl" = Xno -a X$no_x = Xyes],
+      [LDFLAGS="$ax_save_LDFLAGS -framework OpenGL"
+      AC_LINK_IFELSE([AX_CHECK_GL_PROGRAM],
+                     [ax_cv_check_gl_libgl='-framework OpenGL'])])
+
+LDFLAGS=$ax_save_LDFLAGS
+CPPFLAGS=$ax_save_CPPFLAGS])
+
+AS_IF([test "X$ax_cv_check_gl_libgl" = Xno],
+      [no_gl=yes; GL_CFLAGS=""; GL_LIBS=""],
+      [GL_LIBS="$ax_cv_check_gl_libgl $GL_LIBS"])
+AC_LANG_POP([C])
+
+AC_SUBST([GL_CFLAGS])
+AC_SUBST([GL_LIBS])
+])dnl
diff --git a/m4macros/ax_check_glu.m4 b/m4macros/ax_check_glu.m4
new file mode 100644
index 0000000..1680f3c
--- /dev/null
+++ b/m4macros/ax_check_glu.m4
@@ -0,0 +1,141 @@
+# -*- mode: autoconf -*-
+#
+# AX_CHECK_GLU
+#
+# Check for GLU.  If GLU is found, the required preprocessor and linker flags
+# are included in the output variables "GLU_CFLAGS" and "GLU_LIBS",
+# respectively.  If no GLU implementation is found, "no_glu" is set to "yes".
+#
+# If the header "GL/glu.h" is found, "HAVE_GL_GLU_H" is defined.  If the
+# header "OpenGL/glu.h" is found, HAVE_OPENGL_GLU_H is defined.  These
+# preprocessor definitions may not be mutually exclusive.
+#
+# Some implementations (in particular, some versions of Mac OS X) are known
+# to treat the GLU tesselator callback function type as "GLvoid (*)(...)"
+# rather than the standard "GLvoid (*)()".  If the former condition is
+# detected, this macro defines "HAVE_VARARGS_GLU_TESSCB".
+#
+# version: 2.4
+# author: Braden McDaniel <braden@endoframe.com>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception, the you may copy, distribute and modify the
+# configure scripts that are the output of Autoconf when processing
+# the Macro.  You need not follow the terms of the GNU General Public
+# License when using or distributing such scripts.
+#
+AC_DEFUN([AX_CHECK_GLU],
+[AC_REQUIRE([AX_CHECK_GL])dnl
+AC_REQUIRE([AC_PROG_CXX])dnl
+GLU_CFLAGS=$GL_CFLAGS
+
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GL_CFLAGS $CPPFLAGS"
+AC_CHECK_HEADERS([GL/glu.h OpenGL/glu.h], , , [
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+])
+CPPFLAGS=$ax_save_CPPFLAGS
+
+m4_define([AX_CHECK_GLU_PROGRAM],
+          [AC_LANG_PROGRAM([[
+# if defined(HAVE_WINDOWS_H) && defined(_WIN32)
+#   include <windows.h>
+# endif
+# ifdef HAVE_GL_GLU_H
+#   include <GL/glu.h>
+# elif defined(HAVE_OPENGL_GLU_H)
+#   include <OpenGL/glu.h>
+# else
+#   error no glu.h
+# endif]],
+                           [[gluBeginCurve(0)]])])
+
+AC_CACHE_CHECK([for OpenGL Utility library], [ax_cv_check_glu_libglu],
+[ax_cv_check_glu_libglu=no
+ax_save_CPPFLAGS=$CPPFLAGS
+CPPFLAGS="$GL_CFLAGS $CPPFLAGS"
+ax_save_LDFLAGS=$LDFLAGS
+ax_save_LIBS=$LIBS
+
+#
+# First, check for the possibility that everything we need is already in
+# GL_LIBS.
+#
+LDFLAGS="$ax_save_LDFLAGS $GL_LIBS"
+#
+# libGLU typically links with libstdc++ on POSIX platforms.
+# However, setting the language to C++ means that test program
+# source is named "conftest.cc"; and Microsoft cl doesn't know what
+# to do with such a file.
+#
+AC_LANG_PUSH([C++])
+AS_IF([test X$ax_compiler_ms = Xyes],
+      [AC_LANG_PUSH([C])])
+AC_LINK_IFELSE([AX_CHECK_GLU_PROGRAM],
+               [ax_cv_check_glu_libglu=yes],
+               [LIBS=""
+                ax_check_libs="-lglu32 -lGLU"
+                for ax_lib in ${ax_check_libs}; do
+                  AS_IF([test X$ax_compiler_ms = Xyes],
+                        [ax_try_lib=`echo $ax_lib | $SED -e 's/^-l//' -e 's/$/.lib/'`],
+                        [ax_try_lib=$ax_lib])
+                  LIBS="$ax_try_lib $ax_save_LIBS"
+                  AC_LINK_IFELSE([AX_CHECK_GLU_PROGRAM],
+                                 [ax_cv_check_glu_libglu=$ax_try_lib; break])
+                done])
+AS_IF([test X$ax_compiler_ms = Xyes],
+      [AC_LANG_POP([C])])
+AC_LANG_POP([C++])
+
+LIBS=$ax_save_LIBS
+LDFLAGS=$ax_save_LDFLAGS
+CPPFLAGS=$ax_save_CPPFLAGS])
+AS_IF([test "X$ax_cv_check_glu_libglu" = Xno],
+      [no_glu=yes; GLU_CFLAGS=""; GLU_LIBS=""],
+      [AS_IF([test "X$ax_cv_check_glu_libglu" = Xyes],
+             [GLU_LIBS=""],
+             [GLU_LIBS="$ax_cv_check_glu_libglu"])])
+AC_SUBST([GLU_CFLAGS])
+AC_SUBST([GLU_LIBS])
+
+#
+# Some versions of Mac OS X include a broken interpretation of the GLU
+# tesselation callback function signature when using the C++ compiler.
+#
+AS_IF([test "X$ax_cv_check_glu_libglu" != Xno],
+      [AC_CACHE_CHECK([for varargs GLU tesselator callback function type],
+                      [ax_cv_varargs_glu_tesscb],
+                      [AC_LANG_PUSH([C++])
+                      ax_cv_varargs_glu_tesscb=no
+                      ax_save_CXXFLAGS=$CXXFLAGS
+                      CXXFLAGS="$GL_CFLAGS $CXXFLAGS"
+                      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+# ifdef HAVE_GL_GLU_H
+#   include <GL/glu.h>
+# else
+#   include <OpenGL/glu.h>
+# endif]],
+                                        [[GLvoid (*func)(...); gluTessCallback(0, 0, func)]])],
+                                        [ax_cv_varargs_glu_tesscb=yes])
+                      CXXFLAGS=$ax_save_CXXFLAGS
+                      AC_LANG_POP([C++])])
+      AS_IF([test X$ax_cv_varargs_glu_tesscb = Xyes],
+            [AC_DEFINE([HAVE_VARARGS_GLU_TESSCB], [1],
+                       [Use nonstandard varargs form for the GLU tesselator callback])])])
+])
diff --git a/m4macros/ax_lang_compiler_ms.m4 b/m4macros/ax_lang_compiler_ms.m4
new file mode 100644
index 0000000..1c85d77
--- /dev/null
+++ b/m4macros/ax_lang_compiler_ms.m4
@@ -0,0 +1,41 @@
+# -*- mode: autoconf -*-
+#
+# Check whether the compiler for the current language is Microsoft.
+#
+# This macro is modeled after _AC_LANG_COMPILER_GNU in the GNU Autoconf
+# implementation.
+#
+# version: 1.0
+# author: Braden McDaniel <braden@endoframe.com>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.
+#
+# As a special exception, the you may copy, distribute and modify the
+# configure scripts that are the output of Autoconf when processing
+# the Macro.  You need not follow the terms of the GNU General Public
+# License when using or distributing such scripts.
+#
+AC_DEFUN([AX_LANG_COMPILER_MS],
+[AC_CACHE_CHECK([whether we are using the Microsoft _AC_LANG compiler],
+                [ax_cv_[]_AC_LANG_ABBREV[]_compiler_ms],
+[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [[#ifndef _MSC_VER
+       choke me
+#endif
+]])],
+                   [ax_compiler_ms=yes],
+                   [ax_compiler_ms=no])
+ax_cv_[]_AC_LANG_ABBREV[]_compiler_ms=$ax_compiler_ms
+])])
diff --git a/m4macros/ax_pthread.m4 b/m4macros/ax_pthread.m4
new file mode 100644
index 0000000..37502dd
--- /dev/null
+++ b/m4macros/ax_pthread.m4
@@ -0,0 +1,277 @@
+# ===========================================================================
+#           http://www.nongnu.org/autoconf-archive/ax_pthread.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PTHREAD([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro figures out how to build C programs using POSIX threads. It
+#   sets the PTHREAD_LIBS output variable to the threads library and linker
+#   flags, and the PTHREAD_CFLAGS output variable to any special C compiler
+#   flags that are needed. (The user can also force certain compiler
+#   flags/libs to be tested by setting these environment variables.)
+#
+#   Also sets PTHREAD_CC to any special C compiler that is needed for
+#   multi-threaded programs (defaults to the value of CC otherwise). (This
+#   is necessary on AIX to use the special cc_r compiler alias.)
+#
+#   NOTE: You are assumed to not only compile your program with these flags,
+#   but also link it with them as well. e.g. you should link with
+#   $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS
+#
+#   If you are only building threads programs, you may wish to use these
+#   variables in your default LIBS, CFLAGS, and CC:
+#
+#     LIBS="$PTHREAD_LIBS $LIBS"
+#     CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+#     CC="$PTHREAD_CC"
+#
+#   In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute constant
+#   has a nonstandard name, defines PTHREAD_CREATE_JOINABLE to that name
+#   (e.g. PTHREAD_CREATE_UNDETACHED on AIX).
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a threads library
+#   is found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it
+#   is not found. If ACTION-IF-FOUND is not specified, the default action
+#   will define HAVE_PTHREAD.
+#
+#   Please let the authors know if this macro fails on any platform, or if
+#   you have any other suggestions or comments. This macro was based on work
+#   by SGJ on autoconf scripts for FFTW (http://www.fftw.org/) (with help
+#   from M. Frigo), as well as ac_pthread and hb_pthread macros posted by
+#   Alejandro Forero Cuervo to the autoconf macro repository. We are also
+#   grateful for the helpful feedback of numerous users.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <http://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])
+AC_DEFUN([AX_PTHREAD], [
+AC_REQUIRE([AC_CANONICAL_HOST])
+AC_LANG_SAVE
+AC_LANG_C
+ax_pthread_ok=no
+
+# We used to check for pthread.h first, but this fails if pthread.h
+# requires special compiler flags (e.g. on True64 or Sequent).
+# It gets checked for in the link test anyway.
+
+# First of all, check if the user has set any of the PTHREAD_LIBS,
+# etcetera environment variables, and if threads linking works using
+# them:
+if test x"$PTHREAD_LIBS$PTHREAD_CFLAGS" != x; then
+        save_CFLAGS="$CFLAGS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        save_LIBS="$LIBS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])
+        AC_TRY_LINK_FUNC(pthread_join, ax_pthread_ok=yes)
+        AC_MSG_RESULT($ax_pthread_ok)
+        if test x"$ax_pthread_ok" = xno; then
+                PTHREAD_LIBS=""
+                PTHREAD_CFLAGS=""
+        fi
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+fi
+
+# We must check for the threads library under a number of different
+# names; the ordering is very important because some systems
+# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
+# libraries is broken (non-POSIX).
+
+# Create a list of thread flags to try.  Items starting with a "-" are
+# C compiler flags, and other items are library names, except for "none"
+# which indicates that we try without any flags at all, and "pthread-config"
+# which is a program returning the flags for the Pth emulation library.
+
+ax_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config"
+
+# The ordering *is* (sometimes) important.  Some notes on the
+# individual items follow:
+
+# pthreads: AIX (must check this before -lpthread)
+# none: in case threads are in libc; should be tried before -Kthread and
+#       other compiler flags to prevent continual compiler warnings
+# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
+# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
+# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
+# -pthreads: Solaris/gcc
+# -mthreads: Mingw32/gcc, Lynx/gcc
+# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
+#      doesn't hurt to check since this sometimes defines pthreads too;
+#      also defines -D_REENTRANT)
+#      ... -mt is also the pthreads flag for HP/aCC
+# pthread: Linux, etcetera
+# --thread-safe: KAI C++
+# pthread-config: use pthread-config program (for GNU Pth library)
+
+case "${host_cpu}-${host_os}" in
+        *solaris*)
+
+        # On Solaris (at least, for some versions), libc contains stubbed
+        # (non-functional) versions of the pthreads routines, so link-based
+        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/
+        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
+        # a function called by this macro, so we could check for that, but
+        # who knows whether they'll stub that too in a future libc.)  So,
+        # we'll just look for -pthreads and -lpthread first:
+
+        ax_pthread_flags="-pthreads pthread -mt -pthread $ax_pthread_flags"
+        ;;
+esac
+
+if test x"$ax_pthread_ok" = xno; then
+for flag in $ax_pthread_flags; do
+
+        case $flag in
+                none)
+                AC_MSG_CHECKING([whether pthreads work without any flags])
+                ;;
+
+                -*)
+                AC_MSG_CHECKING([whether pthreads work with $flag])
+                PTHREAD_CFLAGS="$flag"
+                ;;
+
+		pthread-config)
+		AC_CHECK_PROG(ax_pthread_config, pthread-config, yes, no)
+		if test x"$ax_pthread_config" = xno; then continue; fi
+		PTHREAD_CFLAGS="`pthread-config --cflags`"
+		PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
+		;;
+
+                *)
+                AC_MSG_CHECKING([for the pthreads library -l$flag])
+                PTHREAD_LIBS="-l$flag"
+                ;;
+        esac
+
+        save_LIBS="$LIBS"
+        save_CFLAGS="$CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+
+        # Check for various functions.  We must include pthread.h,
+        # since some functions may be macros.  (On the Sequent, we
+        # need a special flag -Kthread to make this header compile.)
+        # We check for pthread_join because it is in -lpthread on IRIX
+        # while pthread_create is in libc.  We check for pthread_attr_init
+        # due to DEC craziness with -lpthreads.  We check for
+        # pthread_cleanup_push because it is one of the few pthread
+        # functions on Solaris that doesn't have a non-functional libc stub.
+        # We try pthread_create on general principles.
+        AC_TRY_LINK([#include <pthread.h>
+	             static void routine(void* a) {a=0;}
+	             static void* start_routine(void* a) {return a;}],
+                    [pthread_t th; pthread_attr_t attr;
+                     pthread_join(th, 0);
+                     pthread_attr_init(&attr);
+                     pthread_cleanup_push(routine, 0);
+                     pthread_create(&th,0,start_routine,0);
+                     pthread_cleanup_pop(0); ],
+                    [ax_pthread_ok=yes])
+
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+
+        AC_MSG_RESULT($ax_pthread_ok)
+        if test "x$ax_pthread_ok" = xyes; then
+                break;
+        fi
+
+        PTHREAD_LIBS=""
+        PTHREAD_CFLAGS=""
+done
+fi
+
+# Various other checks:
+if test "x$ax_pthread_ok" = xyes; then
+        save_LIBS="$LIBS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        save_CFLAGS="$CFLAGS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+
+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.
+	AC_MSG_CHECKING([for joinable pthread attribute])
+	attr_name=unknown
+	for attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do
+	    AC_TRY_LINK([#include <pthread.h>], [int attr=$attr; return attr;],
+                        [attr_name=$attr; break])
+	done
+        AC_MSG_RESULT($attr_name)
+        if test "$attr_name" != PTHREAD_CREATE_JOINABLE; then
+            AC_DEFINE_UNQUOTED(PTHREAD_CREATE_JOINABLE, $attr_name,
+                               [Define to necessary symbol if this constant
+                                uses a non-standard name on your system.])
+        fi
+
+        AC_MSG_CHECKING([if more special flags are required for pthreads])
+        flag=no
+        case "${host_cpu}-${host_os}" in
+            *-aix* | *-freebsd* | *-darwin*) flag="-D_THREAD_SAFE";;
+            *solaris* | *-osf* | *-hpux*) flag="-D_REENTRANT";;
+        esac
+        AC_MSG_RESULT(${flag})
+        if test "x$flag" != xno; then
+            PTHREAD_CFLAGS="$flag $PTHREAD_CFLAGS"
+        fi
+
+        LIBS="$save_LIBS"
+        CFLAGS="$save_CFLAGS"
+
+        # More AIX lossage: must compile with xlc_r or cc_r
+	if test x"$GCC" != xyes; then
+          AC_CHECK_PROGS(PTHREAD_CC, xlc_r cc_r, ${CC})
+        else
+          PTHREAD_CC=$CC
+	fi
+else
+        PTHREAD_CC="$CC"
+fi
+
+AC_SUBST(PTHREAD_LIBS)
+AC_SUBST(PTHREAD_CFLAGS)
+AC_SUBST(PTHREAD_CC)
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$ax_pthread_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.]),[$1])
+        :
+else
+        ax_pthread_ok=no
+        $2
+fi
+AC_LANG_RESTORE
+])dnl AX_PTHREAD
diff --git a/m4macros/gtkglext.m4 b/m4macros/gtkglext.m4
deleted file mode 100644
index cfc49fd..0000000
--- a/m4macros/gtkglext.m4
+++ /dev/null
@@ -1,230 +0,0 @@
-# Configure paths for GtkGLExt
-# Naofumi Yasufuku
-#
-# Shamelessly stolen from gtk-2.0.m4
-# Configure paths for GTK+
-# Owen Taylor     1997-2001
-
-dnl AM_PATH_GTKGLEXT_1_0([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
-dnl Test for GtkGLExt, and define GTKGLEXT_CFLAGS and GTKGLEXT_LIBS.
-dnl
-AC_DEFUN([AM_PATH_GTKGLEXT_1_0],
-[ no_gtkglext=""
-  GTKGLEXT_CFLAGS=""
-  GTKGLEXT_LIBS=""
-
-  # GtkGLExt pkg-config module
-  gtkglext_module=gtkglext-1.0
-
-  # minimum GtkGLExt version
-  gtkglext_min_version=ifelse([$1], ,1.0.0,$1)
-
-  # minimum pkg-config version
-  pkgconfig_min_version=0.7
-
-AC_ARG_ENABLE(gtkglext-test,
-[  --disable-gtkglext-test do not try to compile and run a test GtkGLExt program],
-, enable_gtkglext_test=yes)
-
-dnl 
-dnl Get the cflags and libraries from pkg-config
-dnl
-  pkg_config_modules=$gtkglext_module
-
-  AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
-
-  if test x$PKG_CONFIG != xno ; then
-    if pkg-config --atleast-pkgconfig-version $pkgconfig_min_version ; then
-      :
-    else
-      echo ""
-      echo "*** pkg-config too old; version $pkgconfig_min_version or better required."
-      no_gtkglext=yes
-      PKG_CONFIG=no
-    fi
-  else
-    no_gtkglext=yes
-  fi
-
-  AC_MSG_CHECKING(for GtkGLExt - version >= $gtkglext_min_version)
-
-  if test x$PKG_CONFIG != xno ; then
-    ## don't try to run the test against uninstalled libtool libs
-    if $PKG_CONFIG --uninstalled $pkg_config_modules; then
-      echo ""
-      echo "Will use uninstalled version of GtkGLExt found in PKG_CONFIG_PATH"
-      enable_gtkglext_test=no
-    fi
-
-    if $PKG_CONFIG --atleast-version $gtkglext_min_version $pkg_config_modules; then
-      :
-    else
-      echo ""
-      echo "*** pkg-config cannot find $gtkglext_module >= $gtkglext_min_version"
-      echo "*** Set the environment variable PKG_CONFIG_PATH to point to the correct"
-      echo "*** configuration files."
-      no_gtkglext=yes
-      enable_gtkglext_test=no
-    fi
-  fi
-
-  if test x"$no_gtkglext" = x ; then
-    GTKGLEXT_CFLAGS=`$PKG_CONFIG --cflags $pkg_config_modules`
-    GTKGLEXT_LIBS=`$PKG_CONFIG --libs $pkg_config_modules`
-    gtkglext_config_major_version=`$PKG_CONFIG --modversion $gtkglext_module | \
-           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
-    gtkglext_config_minor_version=`$PKG_CONFIG --modversion $gtkglext_module | \
-           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
-    gtkglext_config_micro_version=`$PKG_CONFIG --modversion $gtkglext_module | \
-           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
-    if test "x$enable_gtkglext_test" = "xyes" ; then
-      ac_save_CFLAGS="$CFLAGS"
-      ac_save_LIBS="$LIBS"
-      CFLAGS="$CFLAGS $GTKGLEXT_CFLAGS"
-      LIBS="$GTKGLEXT_LIBS $LIBS"
-dnl
-dnl Now check if the installed GtkGLExt is sufficiently new. (Also sanity
-dnl checks the results of pkg-config to some extent)
-dnl
-      rm -f conf.gtkgltest
-      AC_TRY_RUN([
-#include <gtk/gtk.h>
-#include <gtk/gtkgl.h>
-#include <stdio.h>
-#include <stdlib.h>
-
-int 
-main ()
-{
-  int major, minor, micro;
-  char *tmp_version;
-
-  system ("touch conf.gtkgltest");
-
-  /* HP/UX 9 (%@#!) writes to sscanf strings */
-  tmp_version = g_strdup ("$gtkglext_min_version");
-  if (sscanf (tmp_version, "%d.%d.%d", &major, &minor, &micro) != 3)
-    {
-      printf ("%s, bad version string\n", "$gtkglext_min_version");
-      exit (1);
-    }
-
-  if ((gtkglext_major_version != $gtkglext_config_major_version) ||
-      (gtkglext_minor_version != $gtkglext_config_minor_version) ||
-      (gtkglext_micro_version != $gtkglext_config_micro_version))
-    {
-      printf ("\n*** 'pkg-config --modversion $gtkglext_module' returned %d.%d.%d, but GtkGLExt\n",
-              $gtkglext_config_major_version, $gtkglext_config_minor_version, $gtkglext_config_micro_version);
-      printf ("*** library %d.%d.%d was found!\n",
-              gtkglext_major_version, gtkglext_minor_version, gtkglext_micro_version);
-      printf ("***\n");
-      printf ("*** If pkg-config was correct, then it is best to remove the old version\n");
-      printf ("*** of GtkGLExt. You may also be able to fix the error by modifying your\n");
-      printf ("*** LD_LIBRARY_PATH enviroment variable, or by editing /etc/ld.so.conf.\n");
-      printf ("*** Make sure you have run ldconfig if that is required on your system.\n");
-      printf ("***\n");
-      printf ("*** If pkg-config was wrong, set the environment variable PKG_CONFIG_PATH\n");
-      printf ("*** to point to the correct configuration files.\n");
-    } 
-  else if ((gtkglext_major_version != GTKGLEXT_MAJOR_VERSION) ||
-	   (gtkglext_minor_version != GTKGLEXT_MINOR_VERSION) ||
-           (gtkglext_micro_version != GTKGLEXT_MICRO_VERSION))
-    {
-      printf ("\n*** GtkGLExt header files (version %d.%d.%d) do not match library (version %d.%d.%d).\n",
-              GTKGLEXT_MAJOR_VERSION, GTKGLEXT_MINOR_VERSION, GTKGLEXT_MICRO_VERSION,
-              gtkglext_major_version, gtkglext_minor_version, gtkglext_micro_version);
-    }
-  else
-    {
-      if ((gtkglext_major_version > major) ||
-          ((gtkglext_major_version == major) && (gtkglext_minor_version > minor)) ||
-          ((gtkglext_major_version == major) && (gtkglext_minor_version == minor) && (gtkglext_micro_version >= micro)))
-        {
-          return 0;
-        }
-      else
-        {
-          printf ("\n*** An old version of GtkGLExt library (%d.%d.%d) was found.\n",
-                  gtkglext_major_version, gtkglext_minor_version, gtkglext_micro_version);
-          printf ("*** You need a version of GtkGLExt newer than %d.%d.%d. The latest version of\n",
-                  major, minor, micro);
-          printf ("*** GtkGLExt is always available from http://gtkglext.sourceforge.net/.\n");
-          printf ("***\n");
-          printf ("*** If you have already installed a sufficiently new version, this error\n");
-          printf ("*** probably means that the wrong copy of the pkg-config shell script is\n");
-          printf ("*** being found. The easiest way to fix this is to remove the old version\n");
-          printf ("*** of GtkGLExt, but you can also set the PKG_CONFIG environment to point\n");
-          printf ("*** to the correct copy of pkg-config. (In this case, you will have to\n");
-          printf ("*** modify your LD_LIBRARY_PATH enviroment variable, or edit /etc/ld.so.conf\n");
-          printf ("*** so that the correct libraries are found at run-time)\n");
-        }
-    }
-  return 1;
-}
-],, no_gtkglext=yes,[echo $ac_n "cross compiling; assumed OK... $ac_c"])
-       CFLAGS="$ac_save_CFLAGS"
-       LIBS="$ac_save_LIBS"
-     fi
-  fi
-  if test "x$no_gtkglext" = x ; then
-     AC_MSG_RESULT(yes (version $gtkglext_config_major_version.$gtkglext_config_minor_version.$gtkglext_config_micro_version))
-     ifelse([$2], , :, [$2])
-  else
-     AC_MSG_RESULT(no)
-     if test "$PKG_CONFIG" = "no" ; then
-       echo "*** A new enough version of pkg-config was not found."
-       echo "*** See http://www.freedesktop.org/software/pkgconfig/."
-     elif test "x$enable_gtkglext_test" = "xyes" ; then
-       if test -f conf.gtkgltest ; then
-        :
-       else
-          echo "*** Could not run GtkGLExt test program, checking why..."
-	  ac_save_CFLAGS="$CFLAGS"
-	  ac_save_LIBS="$LIBS"
-          CFLAGS="$CFLAGS $GTKGLEXT_CFLAGS"
-          LIBS="$LIBS $GTKGLEXT_LIBS"
-          AC_TRY_LINK([
-#include <gtk/gtk.h>
-#include <gtk/gtkgl.h>
-#include <stdio.h>
-],      [ return ((gtkglext_major_version) || (gtkglext_minor_version) || (gtkglext_micro_version)); ],
-        [ echo "*** The test program compiled, but did not run. This usually means"
-          echo "*** that the run-time linker is not finding GtkGLExt or finding the wrong"
-          echo "*** version of GtkGLExt. If it is not finding GtkGLExt, you'll need to set your"
-          echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
-          echo "*** to the installed location  Also, make sure you have run ldconfig if that"
-          echo "*** is required on your system"
-	  echo "***"
-          echo "*** If you have an old version installed, it is best to remove it, although"
-          echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH" ],
-        [ echo "*** The test program failed to compile or link. See the file config.log for the"
-          echo "*** exact error that occured. This usually means GtkGLExt is incorrectly installed."])
-          CFLAGS="$ac_save_CFLAGS"
-          LIBS="$ac_save_LIBS"
-       fi
-     fi
-     GTKGLEXT_CFLAGS=""
-     GTKGLEXT_LIBS=""
-     ifelse([$3], , :, [$3])
-  fi
-  AC_SUBST(GTKGLEXT_CFLAGS)
-  AC_SUBST(GTKGLEXT_LIBS)
-  rm -f conf.gtkgltest
-])
-
-dnl AC_GTKGLEXT_SUPPORTS_MULTIHEAD([ACTION-IF-SUPPORTED [, ACTION-IF-NOT-SUPPORTED]])
-dnl Checks whether GtkGLExt supports multihead.
-dnl
-AC_DEFUN([AC_GTKGLEXT_SUPPORTS_MULTIHEAD],
-[ AC_CACHE_CHECK([whether GtkGLExt supports multihead],
-                 [ac_cv_gtkglext_supports_multihead],
-                 [AC_TRY_LINK([#include <gdk/gdkglquery.h>], 
-                              [gdk_gl_query_extension_for_display(gdk_display_get_default());],
-                              [ac_cv_gtkglext_supports_multihead=yes],
-                              [ac_cv_gtkglext_supports_multihead=no])])
-  if test "x$ac_cv_gtkglext_supports_multihead" = "xyes" ; then
-    ifelse([$1], , :, [$1])
-  else
-    ifelse([$2], , :, [$2])
-  fi
-])
